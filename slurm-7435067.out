NODELIST=lrdn0803
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/distributed/launch.py:181: FutureWarning: The module torch.distributed.launch is deprecated
and will be removed in future. Use torchrun.
Note that --use-env is set by default in torchrun.
If your script expects `--local-rank` argument to be set, please
change it to read from `os.environ['LOCAL_RANK']` instead. See 
https://pytorch.org/docs/stable/distributed.html#launch-utility for 
further instructions

  warnings.warn(
WARNING:torch.distributed.run:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
1
0
32

DEVICE SET
DEVICE SET
DEVICE SET
DEVICE SET
09/06/2024 18:17:48 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 0
09/06/2024 18:17:48 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 3
09/06/2024 18:17:48 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 1
09/06/2024 18:17:48 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 2
09/06/2024 18:17:48 - INFO - torch.distributed.distributed_c10d -   Rank 0: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/06/2024 18:17:48 - INFO - torch.distributed.distributed_c10d -   Rank 3: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/06/2024 18:17:48 - INFO - torch.distributed.distributed_c10d -   Rank 1: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/06/2024 18:17:48 - INFO - torch.distributed.distributed_c10d -   Rank 2: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/06/2024 18:17:48 - INFO - __main__ -   ==================model_configs==================

09/06/2024 18:17:48 - INFO - __main__ -   model_cfg_model_type : vast
09/06/2024 18:17:48 - INFO - __main__ -   model_cfg_itm_ratio : 0.1
09/06/2024 18:17:48 - INFO - __main__ -   model_cfg_frozen_vision : False
09/06/2024 18:17:48 - INFO - __main__ -   model_cfg_frozen_audio : False
09/06/2024 18:17:48 - INFO - __main__ -   model_cfg_checkpointing : True
09/06/2024 18:17:48 - INFO - __main__ -   model_cfg_max_caption_len : 40
09/06/2024 18:17:48 - INFO - __main__ -   model_cfg_max_omni_caption_len : 70
09/06/2024 18:17:48 - INFO - __main__ -   model_cfg_max_subtitle_len : 70
09/06/2024 18:17:48 - INFO - __main__ -   model_cfg_contra_dim : 512
09/06/2024 18:17:48 - INFO - __main__ -   model_cfg_inherit_keys : ['vision_encoder_type', 'audio_encoder_type', 'audio_melbins', 'audio_target_length']
09/06/2024 18:17:48 - INFO - __main__ -   model_cfg_frame_embedding_type : adaptive
09/06/2024 18:17:48 - INFO - __main__ -   model_cfg_vision_resolution : 224
09/06/2024 18:17:48 - INFO - __main__ -   model_cfg_vision_encoder_type : evaclip01_giant
09/06/2024 18:17:48 - INFO - __main__ -   model_cfg_audio_encoder_type : beats
09/06/2024 18:17:48 - INFO - __main__ -   model_cfg_audio_melbins : 64
09/06/2024 18:17:48 - INFO - __main__ -   model_cfg_audio_target_length : 1024
09/06/2024 18:17:48 - INFO - __main__ -   model_cfg_beam_size : 3
09/06/2024 18:17:48 - INFO - __main__ -   model_cfg_captioner_mode : False
09/06/2024 18:17:48 - INFO - __main__ -   model_cfg_generate_nums : 1
09/06/2024 18:17:48 - INFO - __main__ -   model_cfg_ret_bidirection_evaluation : False
09/06/2024 18:17:48 - INFO - __main__ -   model_cfg_itm_rerank_num : 50
09/06/2024 18:17:48 - INFO - __main__ -   model_cfg_evaluation_type : evaluation_mm
09/06/2024 18:17:48 - INFO - __main__ -   model_cfg_default : ./config/vast/default_model_cfg.json
09/06/2024 18:17:48 - INFO - __main__ -   model_cfg_max_vision_sample_num : 1
09/06/2024 18:17:48 - INFO - __main__ -   model_cfg_max_audio_sample_num : 1
09/06/2024 18:17:48 - INFO - __main__ -   ==================run_configs==================

09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_checkpoint : 
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_output_dir : ./output/vast/pretrain_vast/downstream/finetuneArea
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_gradient_accumulation_steps : 1
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_clip_lr : 5e-07
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_optim : adamw
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_learning_rate : 2e-05
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_betas : [0.9, 0.98]
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_weight_decay : 0.01
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_grad_norm : 2.0
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_warmup_ratio : 0.1
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_resume : False
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_seed : 50
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_fp16 : True
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_bf16 : False
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_zero_shot : False
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_scheduler : warmup_linear
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_new_lr : 0
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_new_params_name : []
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_valid_freq : 10
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_dataset_mix_type : random
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_remove_before_ckpt : True
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_first_eval : False
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_pretrain_dir : ./output/vast/pretrain_vast
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_num_train_steps : 0
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_save_best : True
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_pin_mem : True
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_vision_resolution : 224
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_use_ddp : False
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_mode : training
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_log_steps : 100
09/06/2024 18:17:48 - INFO - __main__ -   run_cfg_default : ./config/vast/default_run_cfg.json
09/06/2024 18:17:48 - INFO - __main__ -   ==================data_configs==================

09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_finetune_area_train_type : annoindexed
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_finetune_area_train_training : True
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_finetune_area_train_name : finetune_area
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_finetune_area_train_txt : ../vast27m/annotations100k.json
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_finetune_area_train_vision : ../vast27m/videos/
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_finetune_area_train_audio : ../vast27m/audios
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_finetune_area_train_vision_transforms : crop_flip
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_finetune_area_train_vision_format : video_rawvideo
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_finetune_area_train_vision_sample_num : 1
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_finetune_area_train_audio_sample_num : 1
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_finetune_area_train_task : ret%tv%ta
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_finetune_area_train_epoch : 4
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_finetune_area_train_n_workers : 8
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_finetune_area_train_batch_size : 256
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_msrvtt_ret_val_type : annoindexed
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_msrvtt_ret_val_training : False
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_msrvtt_ret_val_name : msrvtt_ret
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_msrvtt_ret_val_txt : datasets/annotations/msrvtt/descs_ret_test.json
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision : ../MSRVTT/video_test
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_transforms : crop_flip
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_format : video_rawvideo
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_msrvtt_ret_val_audio : ../MSRVTT/audio_test
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_sample_num : 8
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_msrvtt_ret_val_audio_sample_num : 1
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_msrvtt_ret_val_task : ret%tv
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_msrvtt_ret_val_n_workers : 8
09/06/2024 18:17:48 - INFO - __main__ -   data_cfg_msrvtt_ret_val_batch_size : 64
wandb: Tracking run with wandb version 0.17.8
wandb: W&B syncing is set to `offline` in this directory.  
wandb: Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
09/06/2024 18:17:52 - INFO - __main__ -   finetune_area Using clip mean and std.
09/06/2024 18:17:52 - INFO - __main__ -   finetune_area transforms crop_flip
ci sono 99621 labelsci sono 99621 labels

ci sono 99621 labelsci sono 99621 labels

09/06/2024 18:18:33 - INFO - __main__ -   Create Dataset finetune_area Success
09/06/2024 18:18:33 - INFO - __main__ -    loader ret%tv%ta--finetune_area , ratio 1556 , bs_pergpu 64, n_workers 8
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
09/06/2024 18:18:36 - INFO - __main__ -   msrvtt_ret Using clip mean and std.
09/06/2024 18:18:36 - INFO - __main__ -   msrvtt_ret transforms crop_flip
ci sono 884 labelsci sono 884 labelsci sono 884 labelsci sono 884 labels



09/06/2024 18:18:37 - INFO - __main__ -   Create Dataset msrvtt_ret Success
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
09/06/2024 18:18:40 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
09/06/2024 18:18:40 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
09/06/2024 18:18:40 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
09/06/2024 18:18:40 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x555cb9c76e40] mmco: unref short failure
[h264 @ 0x555cb9c76e40] mmco: unref short failure
[h264 @ 0x560b00f6d8c0] mmco: unref short failure
[h264 @ 0x560b00f6d8c0] mmco: unref short failure
[h264 @ 0x560b00eb53c0] mmco: unref short failure
[h264 @ 0x560b00eb53c0] mmco: unref short failure
[h264 @ 0x555cbb0b5940] mmco: unref short failure
[h264 @ 0x560b0202d480] mmco: unref short failure
[h264 @ 0x560b0202d480] mmco: unref short failure
[h264 @ 0x564fbbe82180] mmco: unref short failure
09/06/2024 18:19:41 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
09/06/2024 18:19:42 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
09/06/2024 18:19:43 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
09/06/2024 18:19:44 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
[h264 @ 0x564fbb420000] mmco: unref short failure
09/06/2024 18:19:52 - INFO - root -   incompatible_keys.missing_keys: []
09/06/2024 18:19:52 - INFO - root -   incompatible_keys.missing_keys: []
09/06/2024 18:19:52 - INFO - root -   incompatible_keys.missing_keys: []
[h264 @ 0x564fbf93ee40] mmco: unref short failure
[h264 @ 0x564fbf93ee40] mmco: unref short failure
09/06/2024 18:19:55 - INFO - root -   incompatible_keys.missing_keys: []
09/06/2024 18:19:55 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/06/2024 18:19:55 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/06/2024 18:19:55 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/06/2024 18:19:57 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/06/2024 18:20:07 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
09/06/2024 18:20:07 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
[h264 @ 0x560b00b6f700] mmco: unref short failure
09/06/2024 18:20:07 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
09/06/2024 18:20:08 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
[h264 @ 0x555cb9c93a80] mmco: unref short failure
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.7.crossattention.self.value.bias', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.11.crossattention.self.key.bias', 'cls.predictions.transform.dense.bias', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.self.query.bias', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.2.crossattention.self.value.bias', 'cls.predictions.transform.dense.weight', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.10.crossattention.self.key.bias', 'cls.predictions.bias', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.self.value.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.output.dense.bias', 'cls.predictions.bias', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.self.query.weight', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.10.crossattention.self.query.bias', 'cls.predictions.transform.dense.bias', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.self.query.bias', 'cls.predictions.transform.dense.weight', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.3.crossattention.self.query.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['cls.predictions.transform.LayerNorm.bias', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.self.key.weight', 'cls.predictions.bias', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.3.crossattention.self.value.weight', 'cls.predictions.transform.dense.bias', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.self.query.weight', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.2.crossattention.self.value.weight', 'cls.predictions.transform.dense.weight', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.1.crossattention.self.query.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.9.crossattention.self.key.weight', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.bias', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.self.value.weight', 'cls.predictions.transform.dense.weight', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.self.query.bias', 'cls.predictions.transform.dense.bias', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.9.crossattention.output.LayerNorm.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
[h264 @ 0x555b7b98a9c0] mmco: unref short failure
09/06/2024 18:20:35 - INFO - __main__ -   load_from_pretrained: ./output/vast/pretrain_vast/ckpt/model_step_204994.pt
09/06/2024 18:20:35 - INFO - __main__ -   Load from pretrained dir ./output/vast/pretrain_vast
09/06/2024 18:20:41 - INFO - __main__ -   Unexpected keys ['vision_encoder.text.logit_scale']
09/06/2024 18:20:41 - INFO - __main__ -   missing_keys  ['vision_encoder.logit_scale']
[h264 @ 0x555b79559d40] mmco: unref short failure
09/06/2024 18:20:48 - INFO - __main__ -   ==================learning_rate_settings==================

09/06/2024 18:20:48 - INFO - __main__ -     basic_lr : 2e-05
09/06/2024 18:20:48 - INFO - __main__ -     clip_lr_visual : 5e-07
09/06/2024 18:20:48 - INFO - __main__ -     clip_lr_visual_len : 245
09/06/2024 18:20:48 - INFO - __main__ -     new_lr : 0
09/06/2024 18:20:48 - INFO - __main__ -     new_params_name: []
  0%|          | 0/1556 [00:00<?, ?it/s][h264 @ 0x560b05657940] mmco: unref short failure
[h264 @ 0x560b02990dc0] mmco: unref short failure
[h264 @ 0x560b02990dc0] mmco: unref short failure
  0%|          | 1/1556 [00:28<12:28:05, 28.87s/it]  0%|          | 2/1556 [00:34<6:39:26, 15.42s/it]   0%|          | 3/1556 [00:38<4:17:27,  9.95s/it][h264 @ 0x560b069ba2c0] mmco: unref short failure
[h264 @ 0x560b069ba2c0] mmco: unref short failure
[h264 @ 0x564fbc200040] mmco: unref short failure
[h264 @ 0x564fbc200040] mmco: unref short failure
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
  0%|          | 4/1556 [00:42<3:22:31,  7.83s/it][h264 @ 0x555b78ef5e40] mmco: unref short failure
[h264 @ 0x555b78ef5e40] mmco: unref short failure
  0%|          | 5/1556 [00:47<2:56:48,  6.84s/it][h264 @ 0x560b0253f440] mmco: unref short failure
[h264 @ 0x560b0253f440] mmco: unref short failure
  0%|          | 6/1556 [00:53<2:42:31,  6.29s/it][h264 @ 0x560b07587ac0] mmco: unref short failure
[h264 @ 0x560b07587ac0] mmco: unref short failure
  0%|          | 7/1556 [00:57<2:24:56,  5.61s/it][h264 @ 0x564fbbb29f00] mmco: unref short failure
[h264 @ 0x560b01aea8c0] mmco: unref short failure
[h264 @ 0x560b01aea8c0] mmco: unref short failure
[h264 @ 0x560b01aea8c0] mmco: unref short failure
[h264 @ 0x560b01aea8c0] mmco: unref short failure
[h264 @ 0x560b01aea8c0] mmco: unref short failure
[h264 @ 0x555cbe244ec0] mmco: unref short failure
[h264 @ 0x555cbe244ec0] mmco: unref short failure
[h264 @ 0x560b02768480] mmco: unref short failure
[h264 @ 0x560b02768480] mmco: unref short failure
[h264 @ 0x564fc1fe7500] mmco: unref short failure
[h264 @ 0x564fc1fe7500] mmco: unref short failure
  1%|          | 8/1556 [01:27<5:46:05, 13.41s/it]  1%|          | 9/1556 [01:31<4:29:12, 10.44s/it]  1%|          | 10/1556 [01:35<3:37:40,  8.45s/it]  1%|          | 11/1556 [01:39<3:05:16,  7.20s/it][h264 @ 0x560b03424340] mmco: unref short failure
not have audios 8-qwaveiHMM.3
  1%|          | 12/1556 [01:44<2:43:59,  6.37s/it]  1%|          | 13/1556 [01:48<2:27:51,  5.75s/it]  1%|          | 14/1556 [01:53<2:18:21,  5.38s/it]  1%|          | 15/1556 [01:58<2:14:52,  5.25s/it][h264 @ 0x555b77c98c00] mmco: unref short failure
[h264 @ 0x555b77c98c00] mmco: unref short failure
[h264 @ 0x564fbd065340] mmco: unref short failure
[h264 @ 0x555cc2790540] mmco: unref short failure
[h264 @ 0x555cc2790540] mmco: unref short failure
[h264 @ 0x555b791cc780] mmco: unref short failure
[h264 @ 0x555b791cc780] mmco: unref short failure
[h264 @ 0x560b07ec11c0] mmco: unref short failure
[h264 @ 0x564fbfa51540] mmco: unref short failure
[h264 @ 0x564fbfa51540] mmco: unref short failure
[h264 @ 0x564fbf35ec80] mmco: unref short failure
  1%|          | 16/1556 [03:05<10:15:08, 23.97s/it]  1%|          | 17/1556 [03:10<7:46:29, 18.19s/it] [h264 @ 0x555b7f4f4f80] mmco: unref short failure
[h264 @ 0x555cba5468c0] mmco: unref short failure
  1%|          | 18/1556 [03:16<6:12:34, 14.53s/it][h264 @ 0x555cc0b7ca80] mmco: unref short failure
[h264 @ 0x555cc0b7ca80] mmco: unref short failure
  1%|          | 19/1556 [03:20<4:54:43, 11.51s/it][h264 @ 0x564fc3f5db40] mmco: unref short failure
[h264 @ 0x564fc3f5db40] mmco: unref short failure
[h264 @ 0x555cbbad3cc0] mmco: unref short failure
[h264 @ 0x555cbbad3cc0] mmco: unref short failure
  1%|▏         | 20/1556 [03:25<4:00:32,  9.40s/it]  1%|▏         | 21/1556 [03:29<3:20:51,  7.85s/it]  1%|▏         | 22/1556 [03:34<2:57:40,  6.95s/it]  1%|▏         | 23/1556 [03:38<2:35:02,  6.07s/it][h264 @ 0x555cbbe56e80] mmco: unref short failure
[h264 @ 0x555cbbe56e80] mmco: unref short failure
[h264 @ 0x555b7e032580] mmco: unref short failure
[h264 @ 0x555b7e032580] mmco: unref short failure
[h264 @ 0x555b77c88480] mmco: unref short failure
[h264 @ 0x555b77c88480] mmco: unref short failure
[h264 @ 0x560b02f23080] mmco: unref short failure
[h264 @ 0x560b02f23080] mmco: unref short failure
[h264 @ 0x560b091804c0] mmco: unref short failure
[h264 @ 0x560b091804c0] mmco: unref short failure
[h264 @ 0x555b7c3bedc0] mmco: unref short failure
[h264 @ 0x560b0a183080] mmco: unref short failure
[h264 @ 0x560b0a183080] mmco: unref short failure
[h264 @ 0x555b80db9940] mmco: unref short failure
[h264 @ 0x560b0776ff40] mmco: unref short failure
[h264 @ 0x560b0776ff40] mmco: unref short failure
[h264 @ 0x560b0931b0c0] mmco: unref short failure
[h264 @ 0x564fbbf602c0] mmco: unref short failure
[h264 @ 0x564fbddcaf00] mmco: unref short failure
  2%|▏         | 24/1556 [04:40<9:44:38, 22.90s/it]  2%|▏         | 25/1556 [04:44<7:16:14, 17.10s/it][h264 @ 0x555cbe28e100] mmco: unref short failure
[h264 @ 0x564fc41c0580] mmco: unref short failure
  2%|▏         | 26/1556 [04:48<5:38:09, 13.26s/it]  2%|▏         | 27/1556 [04:52<4:29:04, 10.56s/it]  2%|▏         | 28/1556 [04:56<3:41:09,  8.68s/it]  2%|▏         | 29/1556 [05:00<3:05:02,  7.27s/it]  2%|▏         | 30/1556 [05:05<2:44:50,  6.48s/it]  2%|▏         | 31/1556 [05:10<2:32:08,  5.99s/it][h264 @ 0x555b7f57df80] mmco: unref short failure
[h264 @ 0x555b7f57df80] mmco: unref short failure
[h264 @ 0x560b01557a00] mmco: unref short failure
[h264 @ 0x555b77a46240] mmco: unref short failure
[h264 @ 0x555cbddb4a40] mmco: unref short failure
[h264 @ 0x555cba5b0200] mmco: unref short failure
[h264 @ 0x555cba5b0200] mmco: unref short failure
[h264 @ 0x555cc3656d40] mmco: unref short failure
[h264 @ 0x555cc3656d40] mmco: unref short failure
[h264 @ 0x555b8010bbc0] mmco: unref short failure
[h264 @ 0x555b8010bbc0] mmco: unref short failure
[h264 @ 0x555b8010bbc0] mmco: unref short failure
[h264 @ 0x555b8010bbc0] mmco: unref short failure
[h264 @ 0x555b79ec7b40] mmco: unref short failure
[h264 @ 0x555b79ec7b40] mmco: unref short failure
[h264 @ 0x555b8328b380] mmco: unref short failure
[h264 @ 0x555b8328b380] mmco: unref short failure
  2%|▏         | 32/1556 [06:17<10:20:02, 24.41s/it]  2%|▏         | 33/1556 [06:22<7:51:22, 18.57s/it]   2%|▏         | 34/1556 [06:27<6:06:46, 14.46s/it][h264 @ 0x555cc1193c80] mmco: unref short failure
  2%|▏         | 35/1556 [06:32<4:54:59, 11.64s/it]  2%|▏         | 36/1556 [06:37<3:59:40,  9.46s/it]  2%|▏         | 37/1556 [06:41<3:21:06,  7.94s/it][h264 @ 0x555cbb5a6a00] mmco: unref short failure
[h264 @ 0x555cbb5a6a00] mmco: unref short failure
[h264 @ 0x555b79c88f00] mmco: unref short failure
[h264 @ 0x555b79c88f00] mmco: unref short failure
[h264 @ 0x560b05b156c0] mmco: unref short failure
[h264 @ 0x560b05b156c0] mmco: unref short failure
[h264 @ 0x555cc30d1740] mmco: unref short failure
  2%|▏         | 38/1556 [06:47<3:03:15,  7.24s/it][h264 @ 0x564fc332bc80] mmco: unref short failure
  3%|▎         | 39/1556 [06:51<2:41:17,  6.38s/it][h264 @ 0x555b78de3200] mmco: unref short failure
[h264 @ 0x555b78de3200] mmco: unref short failure
[h264 @ 0x555cc020d2c0] mmco: unref short failure
[h264 @ 0x555cc020d2c0] mmco: unref short failure
[h264 @ 0x564fc47f5680] mmco: unref short failure
[h264 @ 0x560b0998b800] mmco: unref short failure
[h264 @ 0x560b0998b800] mmco: unref short failure
[h264 @ 0x555cc5083000] mmco: unref short failure
[h264 @ 0x555b7bd805c0] mmco: unref short failure
[h264 @ 0x555b7bd805c0] mmco: unref short failure
[h264 @ 0x564fc0c81d00] mmco: unref short failure
[h264 @ 0x564fc4a103c0] mmco: unref short failure
[h264 @ 0x564fc4a103c0] mmco: unref short failure
[h264 @ 0x555b77206500] mmco: unref short failure
[h264 @ 0x555b77206500] mmco: unref short failure
[h264 @ 0x555cbab339c0] mmco: unref short failure
[h264 @ 0x555cbab339c0] mmco: unref short failure
[h264 @ 0x564fc60957c0] mmco: unref short failure
  3%|▎         | 40/1556 [07:57<10:13:46, 24.29s/it][h264 @ 0x555b81c7ab80] mmco: unref short failure
  3%|▎         | 41/1556 [08:01<7:40:01, 18.22s/it] [h264 @ 0x564fbe9eecc0] mmco: unref short failure
  3%|▎         | 42/1556 [08:08<6:14:28, 14.84s/it][h264 @ 0x564fbced1580] mmco: unref short failure
[h264 @ 0x564fbced1580] mmco: unref short failure
  3%|▎         | 43/1556 [08:13<4:59:45, 11.89s/it][h264 @ 0x564fc8a89240] mmco: unref short failure
[h264 @ 0x555cbe8c9600] mmco: unref short failure
[h264 @ 0x555cbe8c9600] mmco: unref short failure
  3%|▎         | 44/1556 [08:18<4:04:35,  9.71s/it][h264 @ 0x560b0c9e2180] mmco: unref short failure
[h264 @ 0x555b7c4006c0] mmco: unref short failure
  3%|▎         | 45/1556 [08:22<3:23:33,  8.08s/it]  3%|▎         | 46/1556 [08:26<2:54:15,  6.92s/it][h264 @ 0x560b09c379c0] mmco: unref short failure
  3%|▎         | 47/1556 [08:30<2:34:34,  6.15s/it][h264 @ 0x560b06f48f00] mmco: unref short failure
[h264 @ 0x560b06f48f00] mmco: unref short failure
[h264 @ 0x555b80b46f80] mmco: unref short failure
[h264 @ 0x555b80b46f80] mmco: unref short failure
[h264 @ 0x555cbe8c9cc0] mmco: unref short failure
[h264 @ 0x555cbe8c9cc0] mmco: unref short failure
[h264 @ 0x560b05ae9d80] mmco: unref short failure
[h264 @ 0x560b0a16ce80] mmco: unref short failure
[h264 @ 0x560b0a16ce80] mmco: unref short failure
[h264 @ 0x560b0a16ce80] mmco: unref short failure
[h264 @ 0x560b0a16ce80] mmco: unref short failure
[h264 @ 0x555b76beeb40] mmco: unref short failure
[h264 @ 0x555b76beeb40] mmco: unref short failure
[h264 @ 0x555b81374080] mmco: unref short failure
[h264 @ 0x555cbf576a00] mmco: unref short failure
[h264 @ 0x555cbf576a00] mmco: unref short failure
[h264 @ 0x555cc58e40c0] mmco: unref short failure
[h264 @ 0x555cc58e40c0] mmco: unref short failure
[h264 @ 0x555cc7b10700] mmco: unref short failure
[h264 @ 0x555cc7b10700] mmco: unref short failure
  3%|▎         | 48/1556 [09:31<9:24:26, 22.46s/it][h264 @ 0x555b7a322700] mmco: unref short failure
[h264 @ 0x555cc29c6e00] mmco: unref short failure
[h264 @ 0x555cc29c6e00] mmco: unref short failure
  3%|▎         | 49/1556 [09:35<7:08:46, 17.07s/it][h264 @ 0x564fc364d280] mmco: unref short failure
[h264 @ 0x555b7f971300] mmco: unref short failure
09/06/2024 18:30:31 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.413073778152466, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.049995630979537964, 'loss_ret%tv%ta--finetune_area/loss_area': 3.10347580909729, 'loss_ret%tv%ta--finetune_area/total_loss': 6.566545486450195}
  3%|▎         | 50/1556 [09:46<6:17:33, 15.04s/it][h264 @ 0x560b07f76f40] mmco: unref short failure
[h264 @ 0x560b07f76f40] mmco: unref short failure
  3%|▎         | 51/1556 [09:50<4:56:38, 11.83s/it][h264 @ 0x560b0efb7980] mmco: unref short failure
[h264 @ 0x560b0efb7980] mmco: unref short failure
  3%|▎         | 52/1556 [09:54<4:00:26,  9.59s/it]  3%|▎         | 53/1556 [09:59<3:19:44,  7.97s/it][h264 @ 0x560b08c89180] mmco: unref short failure
  3%|▎         | 54/1556 [10:04<2:56:48,  7.06s/it][h264 @ 0x555cc5791680] mmco: unref short failure
[h264 @ 0x555cc5791680] mmco: unref short failure
[h264 @ 0x555cc5791680] mmco: unref short failure
[h264 @ 0x555cc5791680] mmco: unref short failure
[h264 @ 0x555cc5791680] mmco: unref short failure
[h264 @ 0x555cc5791680] mmco: unref short failure
  4%|▎         | 55/1556 [10:08<2:36:04,  6.24s/it][h264 @ 0x555cc020cc00] mmco: unref short failure
[h264 @ 0x564fc068c240] mmco: unref short failure
[h264 @ 0x560b0d6a4c00] mmco: unref short failure
[h264 @ 0x560b0d6a4c00] mmco: unref short failure
[h264 @ 0x560b0d6a4c00] mmco: unref short failure
[h264 @ 0x560b0d6a4c00] mmco: unref short failure
[h264 @ 0x560b0d6a4c00] mmco: unref short failure
[h264 @ 0x560b0d6a4c00] mmco: unref short failure
[h264 @ 0x560b0d6a4c00] mmco: unref short failure
[h264 @ 0x560b0d6a4c00] mmco: unref short failure
[h264 @ 0x560b0d6a4c00] mmco: unref short failure
[h264 @ 0x560b0d6a4c00] mmco: unref short failure
[h264 @ 0x555b7e4f7400] mmco: unref short failure
[h264 @ 0x555cc60dc100] mmco: unref short failure
[h264 @ 0x555cbdb57880] mmco: unref short failure
[h264 @ 0x555cc336cbc0] mmco: unref short failure
[h264 @ 0x555cc336cbc0] mmco: unref short failure
[h264 @ 0x555cbd665c40] mmco: unref short failure
[h264 @ 0x555b7c3e7c40] mmco: unref short failure
[h264 @ 0x555b8110e700] mmco: unref short failure
[h264 @ 0x555b8110e700] mmco: unref short failure
[h264 @ 0x564fc8ea40c0] mmco: unref short failure
[h264 @ 0x560b09a5bc40] mmco: unref short failure
[h264 @ 0x560b09a5bc40] mmco: unref short failure
[h264 @ 0x555b7f41e980] mmco: unref short failure
[h264 @ 0x555b7f41e980] mmco: unref short failure
  4%|▎         | 56/1556 [11:09<9:30:24, 22.82s/it]  4%|▎         | 57/1556 [11:14<7:11:04, 17.25s/it][h264 @ 0x555b804be080] mmco: unref short failure
[h264 @ 0x560b0ab7f1c0] mmco: unref short failure
[h264 @ 0x560b0ab7f1c0] mmco: unref short failure
[h264 @ 0x560b0a9c8f40] mmco: unref short failure
[h264 @ 0x555b7a242b00] mmco: unref short failure
[h264 @ 0x555b7a242b00] mmco: unref short failure
  4%|▎         | 58/1556 [11:18<5:34:45, 13.41s/it][h264 @ 0x564fc6fe0180] mmco: unref short failure
[h264 @ 0x555b83e6ea80] mmco: unref short failure
[h264 @ 0x555b83e6ea80] mmco: unref short failure
  4%|▍         | 59/1556 [11:23<4:27:34, 10.72s/it][h264 @ 0x555b7a322240] mmco: unref short failure
  4%|▍         | 60/1556 [11:27<3:42:55,  8.94s/it]  4%|▍         | 61/1556 [11:32<3:08:28,  7.56s/it][h264 @ 0x555b81b19600] mmco: unref short failure
  4%|▍         | 62/1556 [11:36<2:40:44,  6.46s/it][h264 @ 0x564fc326e5c0] mmco: unref short failure
[h264 @ 0x564fc326e5c0] mmco: unref short failure
  4%|▍         | 63/1556 [11:40<2:28:39,  5.97s/it][h264 @ 0x555b869bf980] mmco: unref short failure
[h264 @ 0x555b869bf980] mmco: unref short failure
[h264 @ 0x560b0b8846c0] mmco: unref short failure
[h264 @ 0x560b0b8846c0] mmco: unref short failure
[h264 @ 0x564fc1125140] mmco: unref short failure
[h264 @ 0x564fc1125140] mmco: unref short failure
[h264 @ 0x555cbb12d880] mmco: unref short failure
[h264 @ 0x555cbb12d880] mmco: unref short failure
[h264 @ 0x564fcaf5b5c0] mmco: unref short failure
[h264 @ 0x564fcaf5b5c0] mmco: unref short failure
[h264 @ 0x555cc2e52800] mmco: unref short failure
[h264 @ 0x555cc2e52800] mmco: unref short failure
[h264 @ 0x560b08c63c40] mmco: unref short failure
[h264 @ 0x560b08c63c40] mmco: unref short failure
[h264 @ 0x555b78893100] mmco: unref short failure
[h264 @ 0x555cc09c2a80] mmco: unref short failure
  4%|▍         | 64/1556 [12:48<10:06:48, 24.40s/it]  4%|▍         | 65/1556 [12:52<7:37:34, 18.41s/it]   4%|▍         | 66/1556 [12:57<5:53:29, 14.23s/it]  4%|▍         | 67/1556 [13:02<4:43:08, 11.41s/it]  4%|▍         | 68/1556 [13:06<3:49:11,  9.24s/it][h264 @ 0x560b0c402f80] mmco: unref short failure
  4%|▍         | 69/1556 [13:11<3:16:27,  7.93s/it]  4%|▍         | 70/1556 [13:15<2:49:43,  6.85s/it]  5%|▍         | 71/1556 [13:20<2:36:44,  6.33s/it][h264 @ 0x555b85c72d80] mmco: unref short failure
[h264 @ 0x555b85c72d80] mmco: unref short failure
[h264 @ 0x555b7e852ac0] mmco: unref short failure
[h264 @ 0x555b80454740] mmco: unref short failure
[h264 @ 0x564fc240fe40] mmco: unref short failure
[h264 @ 0x560b0bf88940] mmco: unref short failure
[h264 @ 0x555cbc2aba40] mmco: unref short failure
[h264 @ 0x560b0576a780] mmco: unref short failure
[h264 @ 0x560b0576a780] mmco: unref short failure
[h264 @ 0x555cc7946880] mmco: unref short failure
[h264 @ 0x555cc7946880] mmco: unref short failure
[h264 @ 0x560b0aec7500] mmco: unref short failure
[h264 @ 0x560b0aec7500] mmco: unref short failure
[h264 @ 0x555b81df1440] mmco: unref short failure
[h264 @ 0x555b81c89f40] mmco: unref short failure
  5%|▍         | 72/1556 [14:23<9:38:43, 23.40s/it]  5%|▍         | 73/1556 [14:27<7:15:38, 17.63s/it][h264 @ 0x555b89304f00] mmco: unref short failure
[h264 @ 0x555b89304f00] mmco: unref short failure
[h264 @ 0x555b786b21c0] mmco: unref short failure
[h264 @ 0x555b786b21c0] mmco: unref short failure
  5%|▍         | 74/1556 [14:32<5:40:08, 13.77s/it][h264 @ 0x555cc5832540] mmco: unref short failure
  5%|▍         | 75/1556 [14:37<4:30:02, 10.94s/it][h264 @ 0x564fca8a52c0] mmco: unref short failure
[h264 @ 0x564fca8a52c0] mmco: unref short failure
[h264 @ 0x555b78c471c0] mmco: unref short failure
  5%|▍         | 76/1556 [14:41<3:41:25,  8.98s/it]  5%|▍         | 77/1556 [14:45<3:03:55,  7.46s/it]  5%|▌         | 78/1556 [14:50<2:45:47,  6.73s/it]  5%|▌         | 79/1556 [14:55<2:29:49,  6.09s/it][h264 @ 0x564fc3f51900] mmco: unref short failure
[h264 @ 0x560b0cb0ac80] mmco: unref short failure
[h264 @ 0x560b0cb0ac80] mmco: unref short failure
[h264 @ 0x555cc0a9a180] mmco: unref short failure
[h264 @ 0x560b0cd08840] mmco: unref short failure
[h264 @ 0x560b0cd08840] mmco: unref short failure
[h264 @ 0x560b0b955880] mmco: unref short failure
[h264 @ 0x560b0b955880] mmco: unref short failure
[h264 @ 0x555b83e3c980] mmco: unref short failure
[h264 @ 0x555b78a48800] mmco: unref short failure
[h264 @ 0x564fc8b7ac80] mmco: unref short failure
[h264 @ 0x564fc8b7ac80] mmco: unref short failure
[h264 @ 0x555ccb3bde00] mmco: unref short failure
not have audios 7wavFXW3AFw.7
[h264 @ 0x560b0dc54900] mmco: unref short failure
[h264 @ 0x560b0dc54900] mmco: unref short failure
[h264 @ 0x564fc84673c0] mmco: unref short failure
[h264 @ 0x564fc84673c0] mmco: unref short failure
[h264 @ 0x564fc84673c0] mmco: unref short failure
  5%|▌         | 80/1556 [15:58<9:31:08, 23.22s/it][h264 @ 0x555cbd7db500] mmco: unref short failure
[h264 @ 0x555b82b33b40] mmco: unref short failure
[h264 @ 0x555b82b33b40] mmco: unref short failure
[h264 @ 0x555b82b33b40] mmco: unref short failure
[h264 @ 0x560b03f4e040] mmco: unref short failure
  5%|▌         | 81/1556 [16:03<7:17:12, 17.78s/it][h264 @ 0x564fcb85c3c0] mmco: unref short failure
  5%|▌         | 82/1556 [16:11<6:06:15, 14.91s/it]  5%|▌         | 83/1556 [16:17<5:01:24, 12.28s/it][h264 @ 0x564fccc02780] mmco: unref short failure
[h264 @ 0x564fccc02780] mmco: unref short failure
  5%|▌         | 84/1556 [16:22<4:03:49,  9.94s/it]  5%|▌         | 85/1556 [16:26<3:24:51,  8.36s/it][h264 @ 0x555cc3ef6900] mmco: unref short failure
[h264 @ 0x555cbd936200] mmco: unref short failure
[h264 @ 0x555cbd936200] mmco: unref short failure
  6%|▌         | 86/1556 [16:31<2:59:00,  7.31s/it]  6%|▌         | 87/1556 [16:35<2:35:27,  6.35s/it][h264 @ 0x555cc3561380] mmco: unref short failure
[h264 @ 0x560b10505f80] mmco: unref short failure
[h264 @ 0x555cbd2a03c0] mmco: unref short failure
[h264 @ 0x555cbd2a03c0] mmco: unref short failure
[h264 @ 0x560b0c5245c0] mmco: unref short failure
[h264 @ 0x555cc449d000] mmco: unref short failure
[h264 @ 0x555cbe097f00] mmco: unref short failure
[h264 @ 0x555cbe097f00] mmco: unref short failure
[h264 @ 0x560b047a26c0] mmco: unref short failure
[h264 @ 0x560b047a26c0] mmco: unref short failure
[h264 @ 0x555b87892980] mmco: unref short failure
  6%|▌         | 88/1556 [17:33<8:53:07, 21.79s/it][h264 @ 0x564fcb2cc740] mmco: unref short failure
[h264 @ 0x564fcb2cc740] mmco: unref short failure
  6%|▌         | 89/1556 [17:37<6:45:04, 16.57s/it][h264 @ 0x555cc9a52000] mmco: unref short failure
  6%|▌         | 90/1556 [17:48<6:01:27, 14.79s/it][h264 @ 0x555cc9e61240] mmco: unref short failure
[h264 @ 0x555b89a7c8c0] mmco: unref short failure
[h264 @ 0x555b89a7c8c0] mmco: unref short failure
  6%|▌         | 91/1556 [17:53<4:50:12, 11.89s/it]  6%|▌         | 92/1556 [17:57<3:53:28,  9.57s/it]  6%|▌         | 93/1556 [18:01<3:13:12,  7.92s/it]  6%|▌         | 94/1556 [18:06<2:51:46,  7.05s/it][h264 @ 0x560b124d9c80] mmco: unref short failure
[h264 @ 0x560b124d9c80] mmco: unref short failure
  6%|▌         | 95/1556 [18:11<2:30:56,  6.20s/it][h264 @ 0x555b76f66bc0] mmco: unref short failure
[h264 @ 0x555ccb64fac0] mmco: unref short failure
[h264 @ 0x555ccb64fac0] mmco: unref short failure
[h264 @ 0x560b06de2a80] mmco: unref short failure
[h264 @ 0x560b0999e380] mmco: unref short failure
[h264 @ 0x560b0999e380] mmco: unref short failure
[h264 @ 0x560b0999e380] mmco: unref short failure
[h264 @ 0x560b0999e380] mmco: unref short failure
[h264 @ 0x555b82f26bc0] mmco: unref short failure
[h264 @ 0x555b82f26bc0] mmco: unref short failure
[h264 @ 0x555b85b50100] mmco: unref short failure
[h264 @ 0x555b85b50100] mmco: unref short failure
[h264 @ 0x555b85b50100] mmco: unref short failure
[h264 @ 0x555b85b50100] mmco: unref short failure
[h264 @ 0x564fc0488000] mmco: unref short failure
  6%|▌         | 96/1556 [19:08<8:45:36, 21.60s/it]  6%|▌         | 97/1556 [19:12<6:37:53, 16.36s/it][h264 @ 0x564fc3259ac0] mmco: unref short failure
[h264 @ 0x564fc3259ac0] mmco: unref short failure
[h264 @ 0x564fc3259ac0] mmco: unref short failure
[h264 @ 0x564fc3259ac0] mmco: unref short failure
[h264 @ 0x555cb9f26380] mmco: unref short failure
[h264 @ 0x555cb9f26380] mmco: unref short failure
[h264 @ 0x555b89b1e200] mmco: unref short failure
[h264 @ 0x560b03f4e240] mmco: unref short failure
[h264 @ 0x560b03f4e240] mmco: unref short failure
[h264 @ 0x555cbe895440] mmco: unref short failure
[h264 @ 0x555cbe895440] mmco: unref short failure
[h264 @ 0x555cbe895440] mmco: unref short failure
[h264 @ 0x555cbe895440] mmco: unref short failure
  6%|▋         | 98/1556 [19:33<7:08:56, 17.65s/it][h264 @ 0x555cc4c0dec0] mmco: unref short failure
[h264 @ 0x555cc4c0dec0] mmco: unref short failure
[h264 @ 0x560b16771540] mmco: unref short failure
  6%|▋         | 99/1556 [19:38<5:33:34, 13.74s/it]09/06/2024 18:40:28 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.36600923538208, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.05069562792778015, 'loss_ret%tv%ta--finetune_area/loss_area': 3.021848678588867, 'loss_ret%tv%ta--finetune_area/total_loss': 6.438553810119629}
  6%|▋         | 100/1556 [19:42<4:27:35, 11.03s/it][h264 @ 0x555cbe3c6500] mmco: unref short failure
[h264 @ 0x560b0da9eac0] mmco: unref short failure
[h264 @ 0x560b0da9eac0] mmco: unref short failure
[h264 @ 0x555cc53d0b40] mmco: unref short failure
[h264 @ 0x555cc53d0b40] mmco: unref short failure
[h264 @ 0x564fc84c7280] mmco: unref short failure
[h264 @ 0x564fc84c7280] mmco: unref short failure
  6%|▋         | 101/1556 [19:47<3:40:45,  9.10s/it]  7%|▋         | 102/1556 [19:52<3:09:51,  7.83s/it][h264 @ 0x560b14725340] mmco: unref short failure
  7%|▋         | 103/1556 [19:56<2:42:30,  6.71s/it][h264 @ 0x555cbc7eeb80] mmco: unref short failure
[h264 @ 0x555cbc7eeb80] mmco: unref short failure
[h264 @ 0x555b8044b740] mmco: unref short failure
[h264 @ 0x555b84de89c0] mmco: unref short failure
[h264 @ 0x555b84de89c0] mmco: unref short failure
[h264 @ 0x555b84de89c0] mmco: unref short failure
[h264 @ 0x555b84de89c0] mmco: unref short failure
[h264 @ 0x564fc5962d40] mmco: unref short failure
[h264 @ 0x564fc5962d40] mmco: unref short failure
[h264 @ 0x555b79ad8f80] mmco: unref short failure
[h264 @ 0x555b79ad8f80] mmco: unref short failure
[h264 @ 0x564fc42a69c0] mmco: unref short failure
[h264 @ 0x555cbda370c0] mmco: unref short failure
[h264 @ 0x555b780531c0] mmco: unref short failure
[h264 @ 0x564fcf350c00] mmco: unref short failure
[h264 @ 0x564fcf350c00] mmco: unref short failure
[h264 @ 0x564fbbfb7ac0] mmco: unref short failure
  7%|▋         | 104/1556 [20:43<7:36:04, 18.85s/it]  7%|▋         | 105/1556 [20:47<5:50:55, 14.51s/it][h264 @ 0x560b07d65f00] mmco: unref short failure
[h264 @ 0x560b07d65f00] mmco: unref short failure
[h264 @ 0x555b897c4100] mmco: unref short failure
[h264 @ 0x555b897c4100] mmco: unref short failure
[h264 @ 0x555cc78aea80] mmco: unref short failure
[h264 @ 0x560b09b4ffc0] mmco: unref short failure
  7%|▋         | 106/1556 [21:07<6:30:26, 16.16s/it][h264 @ 0x555cbb17c980] mmco: unref short failure
[h264 @ 0x555cbb17c980] mmco: unref short failure
  7%|▋         | 107/1556 [21:12<5:07:09, 12.72s/it][h264 @ 0x564fcc142bc0] mmco: unref short failure
[h264 @ 0x555b837f9cc0] mmco: unref short failure
[h264 @ 0x564fc7eeb2c0] mmco: unref short failure
[h264 @ 0x564fc7eeb2c0] mmco: unref short failure
  7%|▋         | 108/1556 [21:17<4:07:31, 10.26s/it][h264 @ 0x564fc65b2bc0] mmco: unref short failure
[h264 @ 0x564fc5c57f80] mmco: unref short failure
  7%|▋         | 109/1556 [21:21<3:24:46,  8.49s/it][h264 @ 0x555b760015c0] mmco: unref short failure
[h264 @ 0x564fcdca4980] mmco: unref short failure
[h264 @ 0x564fcdca4980] mmco: unref short failure
[h264 @ 0x564fbd3b7080] mmco: unref short failure
[h264 @ 0x564fbd3b7080] mmco: unref short failure
[h264 @ 0x560b07550980] mmco: unref short failure
[h264 @ 0x560b07550980] mmco: unref short failure
  7%|▋         | 110/1556 [21:25<2:53:40,  7.21s/it][h264 @ 0x564fc38dfb40] mmco: unref short failure
  7%|▋         | 111/1556 [21:30<2:33:12,  6.36s/it][h264 @ 0x555cc0318200] mmco: unref short failure
[h264 @ 0x555cc0318200] mmco: unref short failure
[h264 @ 0x555cc57fef00] mmco: unref short failure
[h264 @ 0x555cc57fef00] mmco: unref short failure
[h264 @ 0x555cc5027600] mmco: unref short failure
[h264 @ 0x564fbf1b3dc0] mmco: unref short failure
[h264 @ 0x564fbf1b3dc0] mmco: unref short failure
[h264 @ 0x560b0962c140] mmco: unref short failure
[h264 @ 0x555cc3c756c0] mmco: unref short failure
[h264 @ 0x564fc84e1240] mmco: unref short failure
[h264 @ 0x564fcc31a540] mmco: unref short failure
[h264 @ 0x564fcc31a540] mmco: unref short failure
[h264 @ 0x560b030d5c40] mmco: unref short failure
  7%|▋         | 112/1556 [22:22<8:01:55, 20.02s/it]  7%|▋         | 113/1556 [22:26<6:11:15, 15.44s/it][h264 @ 0x564fcd20d9c0] mmco: unref short failure
[h264 @ 0x564fcd20d9c0] mmco: unref short failure
[h264 @ 0x555cc1ca2280] mmco: unref short failure
[h264 @ 0x564fc47975c0] mmco: unref short failure
[h264 @ 0x564fc4c9ee00] mmco: unref short failure
[h264 @ 0x564fc4c9ee00] mmco: unref short failure
  7%|▋         | 114/1556 [22:43<6:18:07, 15.73s/it]  7%|▋         | 115/1556 [22:47<4:55:43, 12.31s/it]  7%|▋         | 116/1556 [22:51<3:57:15,  9.89s/it][h264 @ 0x555b82f269c0] mmco: unref short failure
[h264 @ 0x555b82f269c0] mmco: unref short failure
[h264 @ 0x555b82f269c0] mmco: unref short failure
  8%|▊         | 117/1556 [22:56<3:17:10,  8.22s/it]  8%|▊         | 118/1556 [23:04<3:20:50,  8.38s/it]  8%|▊         | 119/1556 [23:09<2:54:27,  7.28s/it][h264 @ 0x560b141d0bc0] mmco: unref short failure
[h264 @ 0x560b141d0bc0] mmco: unref short failure
[h264 @ 0x560b0ef60e00] mmco: unref short failure
[h264 @ 0x560b0ef60e00] mmco: unref short failure
[h264 @ 0x555b81d66300] mmco: unref short failure
[h264 @ 0x560b0620ff00] mmco: unref short failure
[h264 @ 0x560b0620ff00] mmco: unref short failure
[h264 @ 0x555cbb8587c0] mmco: unref short failure
  8%|▊         | 120/1556 [24:03<8:29:55, 21.31s/it]  8%|▊         | 121/1556 [24:08<6:29:29, 16.29s/it][h264 @ 0x555b82b2fb80] mmco: unref short failure
[h264 @ 0x555b82b2fb80] mmco: unref short failure
  8%|▊         | 122/1556 [24:17<5:38:46, 14.17s/it][h264 @ 0x555b835ae480] mmco: unref short failure
  8%|▊         | 123/1556 [24:21<4:28:03, 11.22s/it]  8%|▊         | 124/1556 [24:26<3:44:27,  9.40s/it][h264 @ 0x555b7eb73f80] mmco: unref short failure
  8%|▊         | 125/1556 [24:31<3:11:09,  8.02s/it]  8%|▊         | 126/1556 [24:42<3:33:59,  8.98s/it][h264 @ 0x560b13c131c0] mmco: unref short failure
[h264 @ 0x560b13c131c0] mmco: unref short failure
[h264 @ 0x555b8011e180] mmco: unref short failure
  8%|▊         | 127/1556 [24:47<3:05:52,  7.80s/it][h264 @ 0x555cbb01dac0] mmco: unref short failure
[h264 @ 0x564fcaf7aac0] mmco: unref short failure
[h264 @ 0x555b8711b600] mmco: unref short failure
[h264 @ 0x555cc78a5e00] mmco: unref short failure
[h264 @ 0x560b11a774c0] mmco: unref short failure
[h264 @ 0x564fcac0f440] mmco: unref short failure
[h264 @ 0x560b13c2ad00] mmco: unref short failure
[h264 @ 0x560b13c2ad00] mmco: unref short failure
[h264 @ 0x555b8c844e80] mmco: unref short failure
  8%|▊         | 128/1556 [25:43<8:44:17, 22.03s/it][h264 @ 0x560b11ed0c80] mmco: unref short failure
[h264 @ 0x564fbf28f200] mmco: unref short failure
[h264 @ 0x564fbf28f200] mmco: unref short failure
  8%|▊         | 129/1556 [25:47<6:39:58, 16.82s/it]  8%|▊         | 130/1556 [25:55<5:35:57, 14.14s/it]  8%|▊         | 131/1556 [26:00<4:25:40, 11.19s/it]  8%|▊         | 132/1556 [26:05<3:41:21,  9.33s/it][h264 @ 0x564fd21de100] mmco: unref short failure
[h264 @ 0x555cc71a9f40] mmco: unref short failure
  9%|▊         | 133/1556 [26:09<3:04:45,  7.79s/it][h264 @ 0x560b15b8f400] mmco: unref short failure
  9%|▊         | 134/1556 [26:22<3:41:52,  9.36s/it]  9%|▊         | 135/1556 [26:26<3:05:35,  7.84s/it][h264 @ 0x555b8a064340] mmco: unref short failure
[h264 @ 0x555cca649e80] mmco: unref short failure
[h264 @ 0x560b0d6de680] mmco: unref short failure
[h264 @ 0x560b0d6de680] mmco: unref short failure
[h264 @ 0x560b11ac8a00] mmco: unref short failure
[h264 @ 0x555cc71c6a80] mmco: unref short failure
[h264 @ 0x555cc71c6a80] mmco: unref short failure
[h264 @ 0x555cc76cfc40] mmco: unref short failure
[h264 @ 0x555cc76cfc40] mmco: unref short failure
[h264 @ 0x555b8a0640c0] mmco: unref short failure
[h264 @ 0x555ccb0c2ac0] mmco: unref short failure
[h264 @ 0x555ccb0c2ac0] mmco: unref short failure
[h264 @ 0x555ccb0c2ac0] mmco: unref short failure
[h264 @ 0x555ccb0c2ac0] mmco: unref short failure
[h264 @ 0x564fcd76ab00] mmco: unref short failure
[h264 @ 0x564fcd76ab00] mmco: unref short failure
[h264 @ 0x555b8b7faf00] mmco: unref short failure
[h264 @ 0x555b8b7faf00] mmco: unref short failure
[h264 @ 0x555cc155b800] mmco: unref short failure
  9%|▊         | 136/1556 [27:22<8:46:58, 22.27s/it][h264 @ 0x564fc55c6200] mmco: unref short failure
[h264 @ 0x555cc41a4400] mmco: unref short failure
[h264 @ 0x555cc41a4400] mmco: unref short failure
[h264 @ 0x564fcea47980] mmco: unref short failure
[h264 @ 0x564fcea47980] mmco: unref short failure
[h264 @ 0x564fcea47980] mmco: unref short failure
  9%|▉         | 137/1556 [27:27<6:45:05, 17.13s/it]  9%|▉         | 138/1556 [27:36<5:44:58, 14.60s/it]  9%|▉         | 139/1556 [27:40<4:30:00, 11.43s/it]  9%|▉         | 140/1556 [27:44<3:38:53,  9.27s/it]  9%|▉         | 141/1556 [27:48<3:02:25,  7.74s/it][h264 @ 0x564fc3011040] mmco: unref short failure
[h264 @ 0x560b17ca4800] mmco: unref short failure
[h264 @ 0x560b17ca4800] mmco: unref short failure
  9%|▉         | 142/1556 [28:02<3:46:01,  9.59s/it][h264 @ 0x560b0e1a7ec0] mmco: unref short failure
[h264 @ 0x560b0e1a7ec0] mmco: unref short failure
  9%|▉         | 143/1556 [28:06<3:06:10,  7.91s/it][h264 @ 0x555b75bedcc0] mmco: unref short failure
[h264 @ 0x555b8b426f00] mmco: unref short failure
[h264 @ 0x564fbddc11c0] mmco: unref short failure
[h264 @ 0x564fbddc11c0] mmco: unref short failure
[h264 @ 0x555cc20b1940] mmco: unref short failure
[h264 @ 0x555cc20b1940] mmco: unref short failure
[h264 @ 0x555cc78eef40] mmco: unref short failure
[h264 @ 0x555ccc0efac0] mmco: unref short failure
[h264 @ 0x555ccc0efac0] mmco: unref short failure
[h264 @ 0x564fcf12dbc0] mmco: unref short failure
[h264 @ 0x564fccbe6380] mmco: unref short failure
  9%|▉         | 144/1556 [28:55<7:57:44, 20.30s/it]  9%|▉         | 145/1556 [29:00<6:09:35, 15.72s/it][h264 @ 0x555cbd38f780] mmco: unref short failure
[h264 @ 0x555cba425f40] mmco: unref short failure
  9%|▉         | 146/1556 [29:17<6:17:31, 16.07s/it][h264 @ 0x555cc9b4ef40] mmco: unref short failure
[h264 @ 0x555cc9b4ef40] mmco: unref short failure
  9%|▉         | 147/1556 [29:22<4:57:32, 12.67s/it][h264 @ 0x555cbdc77180] mmco: unref short failure
 10%|▉         | 148/1556 [29:26<3:58:26, 10.16s/it][h264 @ 0x560b0e321f40] mmco: unref short failure
[h264 @ 0x560b05b9a640] mmco: unref short failure
 10%|▉         | 149/1556 [29:30<3:15:03,  8.32s/it][h264 @ 0x555b7fdfe500] mmco: unref short failure
[h264 @ 0x564fbded1c40] mmco: unref short failure
[h264 @ 0x564fbded1c40] mmco: unref short failure
09/06/2024 18:50:27 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.6134631633758545, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.050909947603940964, 'loss_ret%tv%ta--finetune_area/loss_area': 3.377692699432373, 'loss_ret%tv%ta--finetune_area/total_loss': 7.042065620422363}
 10%|▉         | 150/1556 [29:41<3:29:36,  8.95s/it] 10%|▉         | 151/1556 [29:46<3:00:34,  7.71s/it][h264 @ 0x564fce79ff00] mmco: unref short failure
[h264 @ 0x564fcdc39d80] mmco: unref short failure
[h264 @ 0x564fce643780] mmco: unref short failure
[h264 @ 0x560b125121c0] mmco: unref short failure
[h264 @ 0x560b125121c0] mmco: unref short failure
[h264 @ 0x555b771b0500] mmco: unref short failure
 10%|▉         | 152/1556 [30:35<7:54:15, 20.27s/it] 10%|▉         | 153/1556 [30:40<6:08:12, 15.75s/it][h264 @ 0x560b10a12900] mmco: unref short failure
[h264 @ 0x560b10a12900] mmco: unref short failure
[h264 @ 0x555b873997c0] mmco: unref short failure
[h264 @ 0x555b873997c0] mmco: unref short failure
[h264 @ 0x555b873997c0] mmco: unref short failure
[h264 @ 0x555b873997c0] mmco: unref short failure
[h264 @ 0x560b0b2db680] mmco: unref short failure
[h264 @ 0x560b118e9540] mmco: unref short failure
[h264 @ 0x560b118e9540] mmco: unref short failure
[h264 @ 0x560b191f12c0] mmco: unref short failure
 10%|▉         | 154/1556 [30:56<6:05:53, 15.66s/it] 10%|▉         | 155/1556 [31:00<4:48:59, 12.38s/it][h264 @ 0x560b0135f200] mmco: unref short failure
[h264 @ 0x560b0135f200] mmco: unref short failure
[h264 @ 0x564fbc220c40] mmco: unref short failure
[h264 @ 0x564fbc220c40] mmco: unref short failure
 10%|█         | 156/1556 [31:05<3:54:21, 10.04s/it] 10%|█         | 157/1556 [31:09<3:12:04,  8.24s/it][h264 @ 0x564fcd7c2300] mmco: unref short failure
[h264 @ 0x555cc6c20540] mmco: unref short failure
[h264 @ 0x555cc6c20540] mmco: unref short failure
[h264 @ 0x560b08f99b40] mmco: unref short failure
[h264 @ 0x564fbbdd2600] mmco: unref short failure
 10%|█         | 158/1556 [31:19<3:20:25,  8.60s/it] 10%|█         | 159/1556 [31:23<2:49:02,  7.26s/it][h264 @ 0x564fc048b540] mmco: unref short failure
[h264 @ 0x555b7c3b11c0] mmco: unref short failure
[h264 @ 0x564fd1992d40] mmco: unref short failure
[h264 @ 0x564fc90d5bc0] mmco: unref short failure
[h264 @ 0x555ccb0c28c0] mmco: unref short failure
[h264 @ 0x555b76041540] mmco: unref short failure
 10%|█         | 160/1556 [32:12<7:42:41, 19.89s/it] 10%|█         | 161/1556 [32:16<5:54:14, 15.24s/it][h264 @ 0x560b0b2dafc0] mmco: unref short failure
 10%|█         | 162/1556 [32:32<5:55:04, 15.28s/it][h264 @ 0x560b02339f80] mmco: unref short failure
 10%|█         | 163/1556 [32:36<4:36:08, 11.89s/it] 11%|█         | 164/1556 [32:40<3:45:26,  9.72s/it][h264 @ 0x564fc5de2280] mmco: unref short failure
 11%|█         | 165/1556 [32:45<3:06:54,  8.06s/it][h264 @ 0x555cce1d8dc0] mmco: unref short failure
[h264 @ 0x555cce1d8dc0] mmco: unref short failure
[h264 @ 0x555cbdaa9fc0] mmco: unref short failure
[h264 @ 0x555cbdaa9fc0] mmco: unref short failure
 11%|█         | 166/1556 [33:01<4:06:56, 10.66s/it][h264 @ 0x555ccd3a7cc0] mmco: unref short failure
 11%|█         | 167/1556 [33:07<3:28:45,  9.02s/it][h264 @ 0x564fc06e4c40] mmco: unref short failure
[h264 @ 0x555b77afa340] mmco: unref short failure
[h264 @ 0x555b77afa340] mmco: unref short failure
[h264 @ 0x560b08214000] mmco: unref short failure
[h264 @ 0x560b08214000] mmco: unref short failure
[h264 @ 0x560b184651c0] mmco: unref short failure
[h264 @ 0x560b184651c0] mmco: unref short failure
[h264 @ 0x560b01bcd800] mmco: unref short failure
[h264 @ 0x560b01bcd800] mmco: unref short failure
 11%|█         | 168/1556 [33:50<7:30:59, 19.50s/it] 11%|█         | 169/1556 [33:55<5:45:10, 14.93s/it][h264 @ 0x564fce071c40] mmco: unref short failure
[h264 @ 0x555cbaf3a0c0] mmco: unref short failure
[h264 @ 0x555cbaf3a0c0] mmco: unref short failure
[h264 @ 0x555b87f14300] mmco: unref short failure
[h264 @ 0x555b87f14300] mmco: unref short failure
 11%|█         | 170/1556 [34:13<6:08:35, 15.96s/it] 11%|█         | 171/1556 [34:17<4:45:42, 12.38s/it][h264 @ 0x564fbb6c2480] mmco: unref short failure
 11%|█         | 172/1556 [34:22<3:50:45, 10.00s/it] 11%|█         | 173/1556 [34:26<3:12:37,  8.36s/it][h264 @ 0x564fd2c79940] mmco: unref short failure
[h264 @ 0x564fd2c79940] mmco: unref short failure
[h264 @ 0x564fbd4c3c00] mmco: unref short failure
[h264 @ 0x564fbd4c3c00] mmco: unref short failure
 11%|█         | 174/1556 [34:46<4:29:46, 11.71s/it][h264 @ 0x555cbeaae1c0] mmco: unref short failure
[h264 @ 0x555cbeaae1c0] mmco: unref short failure
 11%|█         | 175/1556 [34:50<3:37:29,  9.45s/it][h264 @ 0x555b7bd18d80] mmco: unref short failure
[h264 @ 0x555b834529c0] mmco: unref short failure
[h264 @ 0x555b834529c0] mmco: unref short failure
[h264 @ 0x564fc3449b80] mmco: unref short failure
[h264 @ 0x564fc3449b80] mmco: unref short failure
[h264 @ 0x564fbbcb3940] mmco: unref short failure
[h264 @ 0x555cbe701c00] mmco: unref short failure
 11%|█▏        | 176/1556 [35:25<6:37:39, 17.29s/it] 11%|█▏        | 177/1556 [35:30<5:13:05, 13.62s/it][h264 @ 0x555cbbb26b40] mmco: unref short failure
[h264 @ 0x555cbbb26b40] mmco: unref short failure
[h264 @ 0x560b0a0489c0] mmco: unref short failure
[h264 @ 0x560b0a0489c0] mmco: unref short failure
[h264 @ 0x560b0a0489c0] mmco: unref short failure
[h264 @ 0x560b0a0489c0] mmco: unref short failure
[h264 @ 0x555cbc936a40] mmco: unref short failure
[h264 @ 0x555cbc936a40] mmco: unref short failure
[h264 @ 0x560b01e4de00] mmco: unref short failure
[h264 @ 0x560b01e4de00] mmco: unref short failure
[h264 @ 0x555cba7542c0] mmco: unref short failure
[h264 @ 0x555cba7542c0] mmco: unref short failure
 11%|█▏        | 178/1556 [35:51<5:57:45, 15.58s/it] 12%|█▏        | 179/1556 [35:55<4:39:04, 12.16s/it][h264 @ 0x555cce5c2180] mmco: unref short failure
[h264 @ 0x555cce5c2180] mmco: unref short failure
 12%|█▏        | 180/1556 [35:59<3:41:20,  9.65s/it] 12%|█▏        | 181/1556 [36:03<3:03:58,  8.03s/it][h264 @ 0x564fbfb507c0] mmco: unref short failure
[h264 @ 0x564fbfb507c0] mmco: unref short failure
[h264 @ 0x555b80893c80] mmco: unref short failure
[h264 @ 0x555cd11f6ac0] mmco: unref short failure
[h264 @ 0x555cd11f6ac0] mmco: unref short failure
 12%|█▏        | 182/1556 [36:22<4:23:29, 11.51s/it][h264 @ 0x555b7c43ed40] mmco: unref short failure
[h264 @ 0x555b7c43ed40] mmco: unref short failure
 12%|█▏        | 183/1556 [36:27<3:35:02,  9.40s/it][h264 @ 0x555b88b04dc0] mmco: unref short failure
[h264 @ 0x564fccf59b80] mmco: unref short failure
[h264 @ 0x564fbcb07500] mmco: unref short failure
 12%|█▏        | 184/1556 [37:01<6:25:22, 16.85s/it][h264 @ 0x555b8693e400] mmco: unref short failure
 12%|█▏        | 185/1556 [37:06<5:02:45, 13.25s/it][h264 @ 0x560b07a11540] mmco: unref short failure
[h264 @ 0x555cb9e8c380] mmco: unref short failure
[h264 @ 0x555cb9e8c380] mmco: unref short failure
[h264 @ 0x560b00a0cac0] mmco: unref short failure
[h264 @ 0x555b7a777640] mmco: unref short failure
[h264 @ 0x555b7a777640] mmco: unref short failure
[h264 @ 0x564fc3449b80] mmco: unref short failure
 12%|█▏        | 186/1556 [37:29<6:10:51, 16.24s/it][h264 @ 0x560b029b0240] mmco: unref short failure
[h264 @ 0x560b029b0240] mmco: unref short failure
 12%|█▏        | 187/1556 [37:33<4:47:58, 12.62s/it] 12%|█▏        | 188/1556 [37:38<3:52:58, 10.22s/it] 12%|█▏        | 189/1556 [37:43<3:13:35,  8.50s/it][h264 @ 0x555b89c13b40] mmco: unref short failure
[h264 @ 0x560b07a11e00] mmco: unref short failure
 12%|█▏        | 190/1556 [38:02<4:28:07, 11.78s/it][h264 @ 0x564fccf59280] mmco: unref short failure
[h264 @ 0x564fccf59280] mmco: unref short failure
 12%|█▏        | 191/1556 [38:06<3:37:49,  9.57s/it][h264 @ 0x555b883adfc0] mmco: unref short failure
[h264 @ 0x555b883adfc0] mmco: unref short failure
[h264 @ 0x560b0464f980] mmco: unref short failure
[h264 @ 0x564fbbdd20c0] mmco: unref short failure
[h264 @ 0x560b00fb0900] mmco: unref short failure
[h264 @ 0x560b00fb0900] mmco: unref short failure
[h264 @ 0x555b7da5da00] mmco: unref short failure
 12%|█▏        | 192/1556 [38:44<6:45:25, 17.83s/it] 12%|█▏        | 193/1556 [38:47<5:10:27, 13.67s/it][h264 @ 0x555cc176f940] mmco: unref short failure
[h264 @ 0x555b80960280] mmco: unref short failure
[h264 @ 0x555b79c26ac0] mmco: unref short failure
[h264 @ 0x555b823d1540] mmco: unref short failure
 12%|█▏        | 194/1556 [39:08<5:56:29, 15.70s/it][h264 @ 0x564fbb44c080] mmco: unref short failure
 13%|█▎        | 195/1556 [39:12<4:39:48, 12.34s/it] 13%|█▎        | 196/1556 [39:17<3:47:07, 10.02s/it] 13%|█▎        | 197/1556 [39:21<3:08:48,  8.34s/it][h264 @ 0x555ccee5aa00] mmco: unref short failure
[h264 @ 0x560b0716d200] mmco: unref short failure
[h264 @ 0x555b7fc04d40] mmco: unref short failure
[h264 @ 0x555b7fc04d40] mmco: unref short failure
 13%|█▎        | 198/1556 [39:44<4:46:34, 12.66s/it][h264 @ 0x564fbf0557c0] mmco: unref short failure
[h264 @ 0x564fbf0557c0] mmco: unref short failure
 13%|█▎        | 199/1556 [39:50<3:58:18, 10.54s/it][h264 @ 0x555cca88bc80] mmco: unref short failure
[h264 @ 0x555cca88bc80] mmco: unref short failure
[h264 @ 0x564fcff2f640] mmco: unref short failure
[h264 @ 0x564fcff2f640] mmco: unref short failure
09/06/2024 19:01:07 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.8194057941436768, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.052286237478256226, 'loss_ret%tv%ta--finetune_area/loss_area': 3.553373098373413, 'loss_ret%tv%ta--finetune_area/total_loss': 7.425065040588379}
 13%|█▎        | 200/1556 [40:21<6:20:19, 16.83s/it][h264 @ 0x555b760fb6c0] mmco: unref short failure
 13%|█▎        | 201/1556 [40:26<4:57:50, 13.19s/it][h264 @ 0x564fbbf89100] mmco: unref short failure
[h264 @ 0x564fbbf89100] mmco: unref short failure
[h264 @ 0x564fbbf89100] mmco: unref short failure
[h264 @ 0x564fbbf89100] mmco: unref short failure
[h264 @ 0x564fbbf89100] mmco: unref short failure
[h264 @ 0x564fbbf89100] mmco: unref short failure
[h264 @ 0x564fbbf89100] mmco: unref short failure
[h264 @ 0x564fbbf89100] mmco: unref short failure
[h264 @ 0x564fbbf89100] mmco: unref short failure
[h264 @ 0x564fbbf89100] mmco: unref short failure
[h264 @ 0x555cbe7a0ac0] mmco: unref short failure
[h264 @ 0x555cc2b96680] mmco: unref short failure
 13%|█▎        | 202/1556 [40:49<6:03:53, 16.12s/it][h264 @ 0x555cc2aa0240] mmco: unref short failure
[h264 @ 0x555cbb8fc440] mmco: unref short failure
 13%|█▎        | 203/1556 [40:53<4:43:08, 12.56s/it][h264 @ 0x555b82cbc1c0] mmco: unref short failure
 13%|█▎        | 204/1556 [40:58<3:50:38, 10.24s/it][h264 @ 0x555b815e7540] mmco: unref short failure
 13%|█▎        | 205/1556 [41:03<3:14:45,  8.65s/it][h264 @ 0x564fbffd33c0] mmco: unref short failure
[h264 @ 0x555b75b11b00] mmco: unref short failure
[h264 @ 0x560b17f6f200] mmco: unref short failure
[h264 @ 0x555cc0fcd900] mmco: unref short failure
[h264 @ 0x555cc3b8c1c0] mmco: unref short failure
 13%|█▎        | 206/1556 [41:30<5:20:02, 14.22s/it] 13%|█▎        | 207/1556 [41:34<4:11:05, 11.17s/it][h264 @ 0x564fc25c7100] mmco: unref short failure
[h264 @ 0x564fc25c7100] mmco: unref short failure
[h264 @ 0x564fbda23d80] mmco: unref short failure
[h264 @ 0x564fc6c6f8c0] mmco: unref short failure
 13%|█▎        | 208/1556 [41:59<5:45:42, 15.39s/it][h264 @ 0x560b146bde40] mmco: unref short failure
[h264 @ 0x564fbddc11c0] mmco: unref short failure
[h264 @ 0x564fbddc11c0] mmco: unref short failure
 13%|█▎        | 209/1556 [42:03<4:27:32, 11.92s/it][h264 @ 0x564fbd81ec00] mmco: unref short failure
[h264 @ 0x564fbd81ec00] mmco: unref short failure
 13%|█▎        | 210/1556 [42:28<5:50:36, 15.63s/it][h264 @ 0x555ccf326980] mmco: unref short failure
[h264 @ 0x555ccf326980] mmco: unref short failure
 14%|█▎        | 211/1556 [42:32<4:34:15, 12.23s/it] 14%|█▎        | 212/1556 [42:36<3:40:13,  9.83s/it][h264 @ 0x555cc0846fc0] mmco: unref short failure
[h264 @ 0x564fd1a62200] mmco: unref short failure
[h264 @ 0x564fd1a62200] mmco: unref short failure
 14%|█▎        | 213/1556 [42:40<3:03:01,  8.18s/it][h264 @ 0x555cb94d8500] mmco: unref short failure
[h264 @ 0x560b0438d200] mmco: unref short failure
[h264 @ 0x560b0438d200] mmco: unref short failure
[h264 @ 0x560b0438d200] mmco: unref short failure
[h264 @ 0x560b0438d200] mmco: unref short failure
[h264 @ 0x560b0438d200] mmco: unref short failure
[h264 @ 0x560b0438d200] mmco: unref short failure
[h264 @ 0x564fbba79980] mmco: unref short failure
[h264 @ 0x564fbba79980] mmco: unref short failure
[h264 @ 0x555cc3972340] mmco: unref short failure
[h264 @ 0x555cc3972340] mmco: unref short failure
[h264 @ 0x555b8df7a740] mmco: unref short failure
[h264 @ 0x555b8df7a740] mmco: unref short failure
[h264 @ 0x560b0c5b2980] mmco: unref short failure
[h264 @ 0x560b0c5b2980] mmco: unref short failure
[h264 @ 0x560b03e8acc0] mmco: unref short failure
[h264 @ 0x555b8e9d6980] mmco: unref short failure
[h264 @ 0x555b8e9d6980] mmco: unref short failure
 14%|█▍        | 214/1556 [43:10<5:27:49, 14.66s/it] 14%|█▍        | 215/1556 [43:15<4:18:37, 11.57s/it][h264 @ 0x555b81ccef80] mmco: unref short failure
[h264 @ 0x555cbc3d3a00] mmco: unref short failure
[h264 @ 0x555cbc3d3a00] mmco: unref short failure
[h264 @ 0x560b05647480] mmco: unref short failure
[h264 @ 0x560b05647480] mmco: unref short failure
[h264 @ 0x564fbfdb2300] mmco: unref short failure
[h264 @ 0x564fbfdb2300] mmco: unref short failure
[h264 @ 0x555ccbef6e00] mmco: unref short failure
[h264 @ 0x555ccbef6e00] mmco: unref short failure
[h264 @ 0x555ccbef6e00] mmco: unref short failure
[h264 @ 0x555ccbef6e00] mmco: unref short failure
[h264 @ 0x555cbdd6c400] mmco: unref short failure
[h264 @ 0x555cbdd6c400] mmco: unref short failure
[h264 @ 0x564fcc619680] mmco: unref short failure
[h264 @ 0x564fcc619680] mmco: unref short failure
 14%|█▍        | 216/1556 [43:38<5:38:06, 15.14s/it] 14%|█▍        | 217/1556 [43:42<4:23:32, 11.81s/it][h264 @ 0x560b06a37c40] mmco: unref short failure
[h264 @ 0x560b06a37c40] mmco: unref short failure
[h264 @ 0x564fcb31a380] mmco: unref short failure
[h264 @ 0x564fd0c855c0] mmco: unref short failure
[h264 @ 0x560b12086680] mmco: unref short failure
[h264 @ 0x560b12086680] mmco: unref short failure
 14%|█▍        | 218/1556 [44:09<6:02:42, 16.27s/it][h264 @ 0x564fbe166f00] mmco: unref short failure
[h264 @ 0x564fbe166f00] mmco: unref short failure
 14%|█▍        | 219/1556 [44:13<4:43:37, 12.73s/it] 14%|█▍        | 220/1556 [44:17<3:46:26, 10.17s/it] 14%|█▍        | 221/1556 [44:22<3:10:24,  8.56s/it][h264 @ 0x555b89221440] mmco: unref short failure
[h264 @ 0x560b050c2640] mmco: unref short failure
[h264 @ 0x564fbe225a00] mmco: unref short failure
[h264 @ 0x555b760f1780] mmco: unref short failure
 14%|█▍        | 222/1556 [44:51<5:28:31, 14.78s/it] 14%|█▍        | 223/1556 [44:56<4:18:04, 11.62s/it][h264 @ 0x555b874c0d80] mmco: unref short failure
[h264 @ 0x555b874c0d80] mmco: unref short failure
[h264 @ 0x564fc521c4c0] mmco: unref short failure
[h264 @ 0x555cbab525c0] mmco: unref short failure
[h264 @ 0x555cceb77d80] mmco: unref short failure
[h264 @ 0x555cceb77d80] mmco: unref short failure
 14%|█▍        | 224/1556 [45:15<5:12:05, 14.06s/it][h264 @ 0x555b77167bc0] mmco: unref short failure
 14%|█▍        | 225/1556 [45:20<4:11:00, 11.32s/it][h264 @ 0x560b03efeb80] mmco: unref short failure
[h264 @ 0x560b03efeb80] mmco: unref short failure
[h264 @ 0x555cba2a2e00] mmco: unref short failure
[h264 @ 0x560b15dd6680] mmco: unref short failure
[h264 @ 0x560b15dd6680] mmco: unref short failure
[h264 @ 0x555b811bc7c0] mmco: unref short failure
[h264 @ 0x555b811bc7c0] mmco: unref short failure
not have audios ua_Kowav7hg.20
 15%|█▍        | 226/1556 [45:51<6:20:39, 17.17s/it] 15%|█▍        | 227/1556 [45:56<4:55:09, 13.33s/it][h264 @ 0x564fc3000900] mmco: unref short failure
 15%|█▍        | 228/1556 [45:59<3:52:11, 10.49s/it] 15%|█▍        | 229/1556 [46:03<3:08:57,  8.54s/it][h264 @ 0x560b00fed2c0] mmco: unref short failure
[h264 @ 0x555cc4cda7c0] mmco: unref short failure
[h264 @ 0x555cc4cda7c0] mmco: unref short failure
[h264 @ 0x555cc4cda7c0] mmco: unref short failure
[h264 @ 0x555cc4cda7c0] mmco: unref short failure
[h264 @ 0x564fbdc1b680] mmco: unref short failure
[h264 @ 0x560b048ad740] mmco: unref short failure
[h264 @ 0x560b048ad740] mmco: unref short failure
[h264 @ 0x555ccb450b40] mmco: unref short failure
 15%|█▍        | 230/1556 [46:29<5:04:10, 13.76s/it][h264 @ 0x564fc837fa80] mmco: unref short failure
[h264 @ 0x564fc837fa80] mmco: unref short failure
[h264 @ 0x564fc837fa80] mmco: unref short failure
[h264 @ 0x564fc837fa80] mmco: unref short failure
 15%|█▍        | 231/1556 [46:33<3:58:11, 10.79s/it][h264 @ 0x555cbfb19680] mmco: unref short failure
[h264 @ 0x564fc7201cc0] mmco: unref short failure
[h264 @ 0x564fc7201cc0] mmco: unref short failure
[h264 @ 0x560b04b2e240] mmco: unref short failure
[h264 @ 0x560b04b2e240] mmco: unref short failure
[h264 @ 0x560b10da1340] mmco: unref short failure
 15%|█▍        | 232/1556 [46:56<5:17:37, 14.39s/it][h264 @ 0x564fd215a300] mmco: unref short failure
 15%|█▍        | 233/1556 [47:00<4:11:28, 11.40s/it][h264 @ 0x564fc1db6f00] mmco: unref short failure
[h264 @ 0x564fc1db6f00] mmco: unref short failure
[h264 @ 0x555b7c8c1500] mmco: unref short failure
[h264 @ 0x555b76cecd00] mmco: unref short failure
[h264 @ 0x555b76cecd00] mmco: unref short failure
[h264 @ 0x555b76cecd00] mmco: unref short failure
[h264 @ 0x555b76cecd00] mmco: unref short failure
[h264 @ 0x555b76cecd00] mmco: unref short failure
[h264 @ 0x555b76cecd00] mmco: unref short failure
[h264 @ 0x564fc12e93c0] mmco: unref short failure
[h264 @ 0x555cc20db180] mmco: unref short failure
[h264 @ 0x560b048e0640] mmco: unref short failure
[h264 @ 0x564fbfdb2500] mmco: unref short failure
[h264 @ 0x564fbfdb2500] mmco: unref short failure
[h264 @ 0x555b808864c0] mmco: unref short failure
[h264 @ 0x555b808864c0] mmco: unref short failure
[h264 @ 0x555cc205a5c0] mmco: unref short failure
[h264 @ 0x555cc205a5c0] mmco: unref short failure
 15%|█▌        | 234/1556 [47:38<7:01:16, 19.12s/it] 15%|█▌        | 235/1556 [47:42<5:20:42, 14.57s/it] 15%|█▌        | 236/1556 [47:47<4:18:45, 11.76s/it] 15%|█▌        | 237/1556 [47:51<3:29:01,  9.51s/it][h264 @ 0x564fbb025a80] mmco: unref short failure
[h264 @ 0x555b8b9d9d40] mmco: unref short failure
[h264 @ 0x560b01713f40] mmco: unref short failure
[h264 @ 0x560b0de1c040] mmco: unref short failure
[h264 @ 0x560b0de1c040] mmco: unref short failure
 15%|█▌        | 238/1556 [48:08<4:19:52, 11.83s/it][h264 @ 0x555b784bb300] mmco: unref short failure
[h264 @ 0x564fcb9e9340] mmco: unref short failure
[h264 @ 0x564fcb9e9340] mmco: unref short failure
 15%|█▌        | 239/1556 [48:12<3:29:27,  9.54s/it][h264 @ 0x555b8954d040] mmco: unref short failure
[h264 @ 0x555b8954d040] mmco: unref short failure
[h264 @ 0x555b8954d4c0] mmco: unref short failure
[h264 @ 0x555b8954d4c0] mmco: unref short failure
[h264 @ 0x555ccd907c00] mmco: unref short failure
 15%|█▌        | 240/1556 [48:37<5:04:52, 13.90s/it] 15%|█▌        | 241/1556 [48:41<4:05:15, 11.19s/it][h264 @ 0x555cbf4ac580] mmco: unref short failure
[h264 @ 0x560b0c200e80] mmco: unref short failure
[h264 @ 0x564fca0731c0] mmco: unref short failure
[h264 @ 0x564fca0731c0] mmco: unref short failure
 16%|█▌        | 242/1556 [49:17<6:45:03, 18.50s/it] 16%|█▌        | 243/1556 [49:21<5:11:43, 14.25s/it] 16%|█▌        | 244/1556 [49:25<4:04:47, 11.19s/it] 16%|█▌        | 245/1556 [49:30<3:23:01,  9.29s/it][h264 @ 0x560b0c200e80] mmco: unref short failure
[h264 @ 0x560b0c200e80] mmco: unref short failure
 16%|█▌        | 246/1556 [49:47<4:10:21, 11.47s/it][h264 @ 0x555b855b0780] mmco: unref short failure
 16%|█▌        | 247/1556 [49:51<3:24:55,  9.39s/it][h264 @ 0x555cbe852a00] mmco: unref short failure
[h264 @ 0x555cbe852a00] mmco: unref short failure
[h264 @ 0x555cbd379240] mmco: unref short failure
[h264 @ 0x555cbd379240] mmco: unref short failure
 16%|█▌        | 248/1556 [50:14<4:50:14, 13.31s/it][h264 @ 0x555cc11d0640] mmco: unref short failure
[h264 @ 0x560b06f48a80] mmco: unref short failure
[h264 @ 0x564fd169f080] mmco: unref short failure
[h264 @ 0x564fd169f080] mmco: unref short failure
[h264 @ 0x555b84bd2580] mmco: unref short failure
 16%|█▌        | 249/1556 [50:21<4:09:40, 11.46s/it][h264 @ 0x564fc8057940] mmco: unref short failure
[h264 @ 0x555b811bce80] mmco: unref short failure
[h264 @ 0x560b1107e1c0] mmco: unref short failure
[h264 @ 0x564fccf59b80] mmco: unref short failure
[h264 @ 0x564fccf59b80] mmco: unref short failure
[h264 @ 0x564fc424e880] mmco: unref short failure
[h264 @ 0x564fc424e880] mmco: unref short failure
[h264 @ 0x560b01278180] mmco: unref short failure
[h264 @ 0x560b01278180] mmco: unref short failure
09/06/2024 19:11:43 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.4209372997283936, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.0471600741147995, 'loss_ret%tv%ta--finetune_area/loss_area': 3.092557907104492, 'loss_ret%tv%ta--finetune_area/total_loss': 6.56065559387207}
[h264 @ 0x564fc68f4ac0] mmco: unref short failure
[h264 @ 0x564fc68f4ac0] mmco: unref short failure
 16%|█▌        | 250/1556 [50:57<6:51:15, 18.89s/it] 16%|█▌        | 251/1556 [51:02<5:18:05, 14.62s/it] 16%|█▌        | 252/1556 [51:07<4:15:12, 11.74s/it][h264 @ 0x564fbc1b0e00] mmco: unref short failure
[h264 @ 0x564fbc1b0e00] mmco: unref short failure
[h264 @ 0x564fd2ab4200] mmco: unref short failure
 16%|█▋        | 253/1556 [51:11<3:27:13,  9.54s/it][h264 @ 0x555b892d7200] mmco: unref short failure
[h264 @ 0x555b892d7200] mmco: unref short failure
[h264 @ 0x560b17434340] mmco: unref short failure
[h264 @ 0x560b17434340] mmco: unref short failure
[h264 @ 0x555cc0656d80] mmco: unref short failure
[h264 @ 0x555cc0656d80] mmco: unref short failure
[h264 @ 0x560b12757f80] mmco: unref short failure
 16%|█▋        | 254/1556 [51:30<4:27:47, 12.34s/it][h264 @ 0x560b04d0f440] mmco: unref short failure
[h264 @ 0x560b04d0f440] mmco: unref short failure
 16%|█▋        | 255/1556 [51:35<3:36:21,  9.98s/it][h264 @ 0x564fc3b5db00] mmco: unref short failure
[h264 @ 0x564fbba6f780] mmco: unref short failure
[h264 @ 0x564fbba6f780] mmco: unref short failure
[h264 @ 0x564fc3083d80] mmco: unref short failure
[h264 @ 0x564fc3083d80] mmco: unref short failure
[h264 @ 0x555cbb2a5040] mmco: unref short failure
[h264 @ 0x555cbb2a5040] mmco: unref short failure
 16%|█▋        | 256/1556 [51:57<4:55:22, 13.63s/it] 17%|█▋        | 257/1556 [52:02<3:57:53, 10.99s/it][h264 @ 0x555b88644f00] mmco: unref short failure
[h264 @ 0x564fd2963f40] mmco: unref short failure
 17%|█▋        | 258/1556 [52:37<6:37:33, 18.38s/it] 17%|█▋        | 259/1556 [52:42<5:07:31, 14.23s/it] 17%|█▋        | 260/1556 [52:46<4:05:34, 11.37s/it] 17%|█▋        | 261/1556 [52:50<3:17:50,  9.17s/it] 17%|█▋        | 262/1556 [53:06<4:01:38, 11.20s/it] 17%|█▋        | 263/1556 [53:10<3:14:47,  9.04s/it][h264 @ 0x555ccc1502c0] mmco: unref short failure
[h264 @ 0x555b81485800] mmco: unref short failure
[h264 @ 0x555b81485800] mmco: unref short failure
[h264 @ 0x560b0c45afc0] mmco: unref short failure
 17%|█▋        | 264/1556 [53:37<5:10:30, 14.42s/it][h264 @ 0x560b0d787600] mmco: unref short failure
[h264 @ 0x564fc6dafd80] mmco: unref short failure
 17%|█▋        | 265/1556 [53:46<4:31:07, 12.60s/it][h264 @ 0x555b86199f80] mmco: unref short failure
[h264 @ 0x555b86199f80] mmco: unref short failure
[h264 @ 0x564fbc5aef80] mmco: unref short failure
[h264 @ 0x555b8a48b640] mmco: unref short failure
[h264 @ 0x555b8a48b640] mmco: unref short failure
 17%|█▋        | 266/1556 [54:14<6:12:21, 17.32s/it] 17%|█▋        | 267/1556 [54:18<4:46:11, 13.32s/it] 17%|█▋        | 268/1556 [54:23<3:52:54, 10.85s/it][h264 @ 0x560b023f3540] mmco: unref short failure
 17%|█▋        | 269/1556 [54:27<3:10:39,  8.89s/it][h264 @ 0x560b0d787600] mmco: unref short failure
[h264 @ 0x560b0d787600] mmco: unref short failure
[h264 @ 0x555cbf762180] mmco: unref short failure
[h264 @ 0x555cbf762180] mmco: unref short failure
 17%|█▋        | 270/1556 [54:46<4:11:39, 11.74s/it][h264 @ 0x555b81e9e2c0] mmco: unref short failure
[h264 @ 0x555b803894c0] mmco: unref short failure
[h264 @ 0x555b803894c0] mmco: unref short failure
 17%|█▋        | 271/1556 [54:50<3:22:56,  9.48s/it][h264 @ 0x560b0b8696c0] mmco: unref short failure
[h264 @ 0x555cbd98d240] mmco: unref short failure
[h264 @ 0x555b7824c000] mmco: unref short failure
[h264 @ 0x555b7824c000] mmco: unref short failure
 17%|█▋        | 272/1556 [55:18<5:19:41, 14.94s/it] 18%|█▊        | 273/1556 [55:28<4:50:56, 13.61s/it][h264 @ 0x560b134e6700] mmco: unref short failure
[h264 @ 0x555cc1ab7400] mmco: unref short failure
[h264 @ 0x555cc1ab7400] mmco: unref short failure
[h264 @ 0x560b02308d80] mmco: unref short failure
[h264 @ 0x560b02308d80] mmco: unref short failure
 18%|█▊        | 274/1556 [55:53<6:01:28, 16.92s/it] 18%|█▊        | 275/1556 [55:57<4:36:38, 12.96s/it] 18%|█▊        | 276/1556 [56:01<3:39:38, 10.30s/it][h264 @ 0x555cc20520c0] mmco: unref short failure
 18%|█▊        | 277/1556 [56:05<3:03:02,  8.59s/it][h264 @ 0x564fc965b000] mmco: unref short failure
 18%|█▊        | 278/1556 [56:21<3:48:37, 10.73s/it][h264 @ 0x555b8c4b8d80] mmco: unref short failure
[h264 @ 0x555b8c4b8d80] mmco: unref short failure
 18%|█▊        | 279/1556 [56:25<3:08:40,  8.86s/it][h264 @ 0x555b75dd6400] mmco: unref short failure
[h264 @ 0x555b75ef8b00] mmco: unref short failure
[h264 @ 0x555b87f14680] mmco: unref short failure
[h264 @ 0x555b87f14680] mmco: unref short failure
[h264 @ 0x560b18b86240] mmco: unref short failure
[h264 @ 0x555ccadfba40] mmco: unref short failure
[h264 @ 0x555ccadfba40] mmco: unref short failure
[h264 @ 0x555b8ad5ab80] mmco: unref short failure
 18%|█▊        | 280/1556 [56:53<5:07:36, 14.46s/it][h264 @ 0x555b8e9d6500] mmco: unref short failure
[h264 @ 0x555b8e9d6500] mmco: unref short failure
[h264 @ 0x555cc3b9da80] mmco: unref short failure
[h264 @ 0x555cc3b9da80] mmco: unref short failure
[h264 @ 0x555b83e1ad00] mmco: unref short failure
[h264 @ 0x555b83e1ad00] mmco: unref short failure
 18%|█▊        | 281/1556 [57:10<5:25:55, 15.34s/it][h264 @ 0x555b86e043c0] mmco: unref short failure
[h264 @ 0x555b86e043c0] mmco: unref short failure
[h264 @ 0x560b00a03180] mmco: unref short failure
[h264 @ 0x560b00a03180] mmco: unref short failure
 18%|█▊        | 282/1556 [57:35<6:22:36, 18.02s/it][h264 @ 0x560b02504e00] mmco: unref short failure
 18%|█▊        | 283/1556 [57:40<4:58:48, 14.08s/it][h264 @ 0x560b12ddeb00] mmco: unref short failure
 18%|█▊        | 284/1556 [57:44<3:59:03, 11.28s/it] 18%|█▊        | 285/1556 [57:48<3:11:46,  9.05s/it][h264 @ 0x560b181c5700] mmco: unref short failure
[h264 @ 0x555b794d00c0] mmco: unref short failure
[h264 @ 0x555b7bff6a80] mmco: unref short failure
 18%|█▊        | 286/1556 [58:02<3:39:11, 10.36s/it] 18%|█▊        | 287/1556 [58:06<3:01:13,  8.57s/it] 19%|█▊        | 288/1556 [58:37<5:21:13, 15.20s/it][h264 @ 0x560b0c5d9700] mmco: unref short failure
[h264 @ 0x560b0c5d9700] mmco: unref short failure
[h264 @ 0x560b0c5d9700] mmco: unref short failure
[h264 @ 0x560b0c5d9700] mmco: unref short failure
[h264 @ 0x560b0c5d9700] mmco: unref short failure
[h264 @ 0x560b0c5d9700] mmco: unref short failure
[h264 @ 0x555b77fdb340] mmco: unref short failure
[h264 @ 0x555ccadfb840] mmco: unref short failure
[h264 @ 0x555b77686a00] mmco: unref short failure
[h264 @ 0x555b77686a00] mmco: unref short failure
 19%|█▊        | 289/1556 [58:50<5:10:18, 14.69s/it][h264 @ 0x560b0a4964c0] mmco: unref short failure
[h264 @ 0x560b0a4964c0] mmco: unref short failure
[h264 @ 0x564fd2574240] mmco: unref short failure
 19%|█▊        | 290/1556 [59:15<6:15:54, 17.82s/it] 19%|█▊        | 291/1556 [59:20<4:52:59, 13.90s/it] 19%|█▉        | 292/1556 [59:24<3:52:29, 11.04s/it] 19%|█▉        | 293/1556 [59:30<3:16:43,  9.35s/it][h264 @ 0x555cc0aaf6c0] mmco: unref short failure
[h264 @ 0x555cc0aaf6c0] mmco: unref short failure
[h264 @ 0x560b03d3b840] mmco: unref short failure
 19%|█▉        | 294/1556 [59:46<3:57:59, 11.32s/it] 19%|█▉        | 295/1556 [59:50<3:12:31,  9.16s/it][h264 @ 0x555b87f14680] mmco: unref short failure
[h264 @ 0x560b09b2a840] mmco: unref short failure
[h264 @ 0x560b09b2a840] mmco: unref short failure
[h264 @ 0x555cbf072180] mmco: unref short failure
[h264 @ 0x555b8ecfcb40] mmco: unref short failure
[h264 @ 0x555b8ecfcb40] mmco: unref short failure
[h264 @ 0x555b7960b880] mmco: unref short failure
[h264 @ 0x555b7960b880] mmco: unref short failure
[h264 @ 0x555b7960b880] mmco: unref short failure
[h264 @ 0x555b7960b880] mmco: unref short failure
 19%|█▉        | 296/1556 [1:00:15<4:53:58, 14.00s/it][h264 @ 0x564fc4091300] mmco: unref short failure
[h264 @ 0x560b1601b300] mmco: unref short failure
[h264 @ 0x555b777ff5c0] mmco: unref short failure
[h264 @ 0x555b777ff5c0] mmco: unref short failure
[h264 @ 0x564fccdf4b40] mmco: unref short failure
[h264 @ 0x564fccdf4b40] mmco: unref short failure
 19%|█▉        | 297/1556 [1:00:34<5:22:37, 15.38s/it][h264 @ 0x560b0c6dbb80] mmco: unref short failure
[h264 @ 0x555b8a26b600] mmco: unref short failure
 19%|█▉        | 298/1556 [1:00:50<5:30:50, 15.78s/it][h264 @ 0x555cc9d61800] mmco: unref short failure
 19%|█▉        | 299/1556 [1:00:55<4:21:24, 12.48s/it]09/06/2024 19:21:43 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/06/2024 19:21:43 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x555b775116c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
[h264 @ 0x555cc5ca1880] mmco: unref short failure
[h264 @ 0x560b04b2db00] mmco: unref short failure
[h264 @ 0x560b04b2db00] mmco: unref short failure
[h264 @ 0x560b05b89400] mmco: unref short failure
[h264 @ 0x560b05b89400] mmco: unref short failure
[h264 @ 0x555cbe573b80] mmco: unref short failure
Traceback (most recent call last):
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/./run.py", line 81, in <module>
    main()
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/./run.py", line 64, in main
    train(model, optimizer, train_loader, val_loaders, args.run_cfg, start_step = start_step, verbose_time=False)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/pipeline.py", line 121, in train
    eval_log = evaluate_fn(model, val_loaders, run_cfg, global_step)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 27, in evaluate_mm
    val_log = evaluate_single(model, loader, task.split('--')[0], run_cfg, global_step,task.split('--')[1])
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 43, in evaluate_single
    ret_dict = evaluate_ret(model, task, val_loader, global_step)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 256, in evaluate_ret
    store_dict[f'condition_feats_v'] = torch.cat(store_dict[f'condition_feats_v'],dim=0)
KeyError: 'condition_feats_v'
Traceback (most recent call last):
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/./run.py", line 81, in <module>
    main()
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/./run.py", line 64, in main
    train(model, optimizer, train_loader, val_loaders, args.run_cfg, start_step = start_step, verbose_time=False)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/pipeline.py", line 121, in train
    eval_log = evaluate_fn(model, val_loaders, run_cfg, global_step)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 27, in evaluate_mm
    val_log = evaluate_single(model, loader, task.split('--')[0], run_cfg, global_step,task.split('--')[1])
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 43, in evaluate_single
    ret_dict = evaluate_ret(model, task, val_loader, global_step)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 256, in evaluate_ret
    store_dict[f'condition_feats_v'] = torch.cat(store_dict[f'condition_feats_v'],dim=0)
KeyError: 'condition_feats_v'
Traceback (most recent call last):
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/./run.py", line 81, in <module>
    main()
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/./run.py", line 64, in main
    train(model, optimizer, train_loader, val_loaders, args.run_cfg, start_step = start_step, verbose_time=False)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/pipeline.py", line 121, in train
    eval_log = evaluate_fn(model, val_loaders, run_cfg, global_step)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 27, in evaluate_mm
    val_log = evaluate_single(model, loader, task.split('--')[0], run_cfg, global_step,task.split('--')[1])
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 43, in evaluate_single
    ret_dict = evaluate_ret(model, task, val_loader, global_step)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 256, in evaluate_ret
    store_dict[f'condition_feats_v'] = torch.cat(store_dict[f'condition_feats_v'],dim=0)
KeyError: 'condition_feats_v'
Traceback (most recent call last):
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/./run.py", line 81, in <module>
    main()
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/./run.py", line 64, in main
    train(model, optimizer, train_loader, val_loaders, args.run_cfg, start_step = start_step, verbose_time=False)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/pipeline.py", line 121, in train
    eval_log = evaluate_fn(model, val_loaders, run_cfg, global_step)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 27, in evaluate_mm
    val_log = evaluate_single(model, loader, task.split('--')[0], run_cfg, global_step,task.split('--')[1])
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 43, in evaluate_single
    ret_dict = evaluate_ret(model, task, val_loader, global_step)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 256, in evaluate_ret
    store_dict[f'condition_feats_v'] = torch.cat(store_dict[f'condition_feats_v'],dim=0)
KeyError: 'condition_feats_v'
Traceback (most recent call last):
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/./run.py", line 81, in <module>
    main()
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/./run.py", line 64, in main
    train(model, optimizer, train_loader, val_loaders, args.run_cfg, start_step = start_step, verbose_time=False)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/pipeline.py", line 121, in train
    eval_log = evaluate_fn(model, val_loaders, run_cfg, global_step)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 27, in evaluate_mm
    val_log = evaluate_single(model, loader, task.split('--')[0], run_cfg, global_step,task.split('--')[1])
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 43, in evaluate_single
    ret_dict = evaluate_ret(model, task, val_loader, global_step)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 256, in evaluate_ret
    store_dict[f'condition_feats_v'] = torch.cat(store_dict[f'condition_feats_v'],dim=0)
KeyError: 'condition_feats_v'
wandb: 
wandb: Run history:
wandb:  loss_area ▆█▅▄▄▂▃▂▁▃▂▂▂▂▃▂▂▂▁▂▂▁▂▂▂▃▂▂▁▂▁▂▁▂▂▂▁▂▁▁
wandb:   loss_itc ▇█▆▅▆▃▄▄▂▅▄▄▂▂▄▁▄▃▁▂▂▂▂▂▂▃▂▃▂▃▁▃▁▃▂▂▁▃▁▁
wandb:   loss_itm ▆█▃▁▆▃▅▄▃▆▆▅▂▄▅▃▅▅▁▃▂▄▃▃▄▄▃▅▅▄▄▄▃▄▄▄▃▄▃▂
wandb: total_loss ▆█▅▅▄▂▃▃▂▄▃▂▂▂▃▁▂▂▁▂▂▁▂▂▂▃▂▂▁▂▁▂▁▂▂▂▁▂▁▁
wandb: 
wandb: Run summary:
wandb:  loss_area 2.87769
wandb:   loss_itc 3.23598
wandb:   loss_itm 0.05112
wandb: total_loss 6.16479
wandb: 
wandb: You can sync this run to the cloud by running:
wandb: wandb sync /leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/wandb/offline-run-20240906_181749-yrxzasoi
wandb: Find logs at: ./wandb/offline-run-20240906_181749-yrxzasoi/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
[h264 @ 0x555cbb5ca040] mmco: unref short failure
09/06/2024 19:23:52 - WARNING - urllib3.connectionpool -   Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x14a5667160d0>: Failed to establish a new connection: [Errno 101] Network is unreachable')': /api/4504800232407040/envelope/
09/06/2024 19:23:52 - WARNING - urllib3.connectionpool -   Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x14a566717b50>: Failed to establish a new connection: [Errno 101] Network is unreachable')': /api/4504800232407040/envelope/
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 3688356 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 3688357 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 3688358 closing signal SIGTERM
ERROR:torch.distributed.elastic.multiprocessing.api:failed (exitcode: 1) local_rank: 3 (pid: 3688359) of binary: /leonardo/home/userexternal/gcicchet/.conda/envs/vast/bin/python3
Traceback (most recent call last):
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/runpy.py", line 197, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/distributed/launch.py", line 196, in <module>
    main()
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/distributed/launch.py", line 192, in main
    launch(args)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/distributed/launch.py", line 177, in launch
    run(args)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/distributed/run.py", line 785, in run
    elastic_launch(
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 134, in __call__
    return launch_agent(self._config, self._entrypoint, list(args))
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 250, in launch_agent
    raise ChildFailedError(
torch.distributed.elastic.multiprocessing.errors.ChildFailedError: 
============================================================
./run.py FAILED
------------------------------------------------------------
Failures:
  <NO_OTHER_FAILURES>
------------------------------------------------------------
Root Cause (first observed failure):
[0]:
  time      : 2024-09-06_19:23:52
  host      : lrdn0803-net3-3.leonardo.local
  rank      : 3 (local_rank: 3)
  exitcode  : 1 (pid: 3688359)
  error_file: <N/A>
  traceback : To enable traceback see: https://pytorch.org/docs/stable/elastic/errors.html
============================================================
srun: error: lrdn0803: task 0: Exited with exit code 1
