NODELIST=lrdn0789
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/distributed/launch.py:181: FutureWarning: The module torch.distributed.launch is deprecated
and will be removed in future. Use torchrun.
Note that --use-env is set by default in torchrun.
If your script expects `--local-rank` argument to be set, please
change it to read from `os.environ['LOCAL_RANK']` instead. See 
https://pytorch.org/docs/stable/distributed.html#launch-utility for 
further instructions

  warnings.warn(
WARNING:torch.distributed.run:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
3
1
2
DEVICE SET
DEVICE SET
09/06/2024 19:31:37 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 1
09/06/2024 19:31:37 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 3
DEVICE SET
09/06/2024 19:31:37 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 2
0
DEVICE SET
09/06/2024 19:31:37 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 0
09/06/2024 19:31:37 - INFO - torch.distributed.distributed_c10d -   Rank 0: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/06/2024 19:31:37 - INFO - torch.distributed.distributed_c10d -   Rank 1: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/06/2024 19:31:37 - INFO - torch.distributed.distributed_c10d -   Rank 3: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/06/2024 19:31:37 - INFO - torch.distributed.distributed_c10d -   Rank 2: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/06/2024 19:31:37 - INFO - __main__ -   ==================model_configs==================

09/06/2024 19:31:37 - INFO - __main__ -   model_cfg_model_type : vast
09/06/2024 19:31:37 - INFO - __main__ -   model_cfg_itm_ratio : 0.1
09/06/2024 19:31:37 - INFO - __main__ -   model_cfg_frozen_vision : False
09/06/2024 19:31:37 - INFO - __main__ -   model_cfg_frozen_audio : False
09/06/2024 19:31:37 - INFO - __main__ -   model_cfg_checkpointing : True
09/06/2024 19:31:37 - INFO - __main__ -   model_cfg_max_caption_len : 40
09/06/2024 19:31:37 - INFO - __main__ -   model_cfg_max_omni_caption_len : 70
09/06/2024 19:31:37 - INFO - __main__ -   model_cfg_max_subtitle_len : 70
09/06/2024 19:31:37 - INFO - __main__ -   model_cfg_contra_dim : 512
09/06/2024 19:31:37 - INFO - __main__ -   model_cfg_inherit_keys : ['vision_encoder_type', 'audio_encoder_type', 'audio_melbins', 'audio_target_length']
09/06/2024 19:31:37 - INFO - __main__ -   model_cfg_frame_embedding_type : adaptive
09/06/2024 19:31:37 - INFO - __main__ -   model_cfg_vision_resolution : 224
09/06/2024 19:31:37 - INFO - __main__ -   model_cfg_vision_encoder_type : evaclip01_giant
09/06/2024 19:31:37 - INFO - __main__ -   model_cfg_audio_encoder_type : beats
09/06/2024 19:31:37 - INFO - __main__ -   model_cfg_audio_melbins : 64
09/06/2024 19:31:37 - INFO - __main__ -   model_cfg_audio_target_length : 1024
09/06/2024 19:31:37 - INFO - __main__ -   model_cfg_beam_size : 3
09/06/2024 19:31:37 - INFO - __main__ -   model_cfg_captioner_mode : False
09/06/2024 19:31:37 - INFO - __main__ -   model_cfg_generate_nums : 1
09/06/2024 19:31:37 - INFO - __main__ -   model_cfg_ret_bidirection_evaluation : False
09/06/2024 19:31:37 - INFO - __main__ -   model_cfg_itm_rerank_num : 50
09/06/2024 19:31:37 - INFO - __main__ -   model_cfg_evaluation_type : evaluation_mm
09/06/2024 19:31:37 - INFO - __main__ -   model_cfg_default : ./config/vast/default_model_cfg.json
09/06/2024 19:31:37 - INFO - __main__ -   model_cfg_max_vision_sample_num : 1
09/06/2024 19:31:37 - INFO - __main__ -   model_cfg_max_audio_sample_num : 1
09/06/2024 19:31:37 - INFO - __main__ -   ==================run_configs==================

09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_checkpoint : 
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_output_dir : ./output/vast/pretrain_vast/downstream/finetuneArea
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_gradient_accumulation_steps : 1
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_clip_lr : 5e-07
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_optim : adamw
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_learning_rate : 2e-05
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_betas : [0.9, 0.98]
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_weight_decay : 0.01
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_grad_norm : 2.0
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_warmup_ratio : 0.1
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_resume : False
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_seed : 50
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_fp16 : True
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_bf16 : False
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_zero_shot : False
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_scheduler : warmup_linear
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_new_lr : 0
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_new_params_name : []
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_valid_freq : 10
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_dataset_mix_type : random
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_remove_before_ckpt : True
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_first_eval : False
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_pretrain_dir : ./output/vast/pretrain_vast
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_num_train_steps : 0
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_save_best : True
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_pin_mem : True
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_vision_resolution : 224
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_use_ddp : False
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_mode : training
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_log_steps : 100
09/06/2024 19:31:37 - INFO - __main__ -   run_cfg_default : ./config/vast/default_run_cfg.json
09/06/2024 19:31:37 - INFO - __main__ -   ==================data_configs==================

09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_finetune_area_train_type : annoindexed
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_finetune_area_train_training : True
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_finetune_area_train_name : finetune_area
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_finetune_area_train_txt : ../vast27m/annotations100k.json
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_finetune_area_train_vision : ../vast27m/videos/
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_finetune_area_train_audio : ../vast27m/audios
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_finetune_area_train_vision_transforms : crop_flip
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_finetune_area_train_vision_format : video_rawvideo
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_finetune_area_train_vision_sample_num : 1
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_finetune_area_train_audio_sample_num : 1
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_finetune_area_train_task : ret%tv%ta
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_finetune_area_train_epoch : 4
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_finetune_area_train_n_workers : 8
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_finetune_area_train_batch_size : 256
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_msrvtt_ret_val_type : annoindexed
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_msrvtt_ret_val_training : False
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_msrvtt_ret_val_name : msrvtt_ret
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_msrvtt_ret_val_txt : datasets/annotations/msrvtt/descs_ret_test.json
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision : ../MSRVTT/video_test
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_transforms : crop_flip
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_format : video_rawvideo
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_msrvtt_ret_val_audio : ../MSRVTT/audio_test
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_sample_num : 8
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_msrvtt_ret_val_audio_sample_num : 1
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_msrvtt_ret_val_task : ret%tv
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_msrvtt_ret_val_n_workers : 8
09/06/2024 19:31:37 - INFO - __main__ -   data_cfg_msrvtt_ret_val_batch_size : 64
wandb: Tracking run with wandb version 0.17.8
wandb: W&B syncing is set to `offline` in this directory.  
wandb: Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
09/06/2024 19:31:42 - INFO - __main__ -   finetune_area Using clip mean and std.
09/06/2024 19:31:42 - INFO - __main__ -   finetune_area transforms crop_flip
ci sono 99621 labelsci sono 99621 labels

ci sono 99621 labelsci sono 99621 labels

09/06/2024 19:32:31 - INFO - __main__ -   Create Dataset finetune_area Success
09/06/2024 19:32:31 - INFO - __main__ -    loader ret%tv%ta--finetune_area , ratio 1556 , bs_pergpu 64, n_workers 8
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
ci sono 884 labelsci sono 884 labels

ci sono 884 labels
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
09/06/2024 19:32:35 - INFO - __main__ -   msrvtt_ret Using clip mean and std.
09/06/2024 19:32:35 - INFO - __main__ -   msrvtt_ret transforms crop_flip
ci sono 884 labels
09/06/2024 19:32:36 - INFO - __main__ -   Create Dataset msrvtt_ret Success
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
09/06/2024 19:32:39 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
09/06/2024 19:32:39 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
09/06/2024 19:32:39 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
09/06/2024 19:32:40 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55c8c1480980] mmco: unref short failure
[h264 @ 0x55c8c1480980] mmco: unref short failure
[h264 @ 0x56492c484400] mmco: unref short failure
[h264 @ 0x56492c484400] mmco: unref short failure
[h264 @ 0x56492c415a40] mmco: unref short failure
[h264 @ 0x56492c415a40] mmco: unref short failure
[h264 @ 0x56492c7c6400] mmco: unref short failure
[h264 @ 0x56492c7c6400] mmco: unref short failure
[h264 @ 0x55c8c13e6a00] mmco: unref short failure
[h264 @ 0x55e4720a0480] mmco: unref short failure
[h264 @ 0x55e4717c5f40] mmco: unref short failure
[h264 @ 0x55e4717c5f40] mmco: unref short failure
[h264 @ 0x55e4735d7540] mmco: unref short failure
09/06/2024 19:34:10 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
09/06/2024 19:34:14 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
09/06/2024 19:34:19 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
09/06/2024 19:34:22 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
09/06/2024 19:34:29 - INFO - root -   incompatible_keys.missing_keys: []
09/06/2024 19:34:29 - INFO - root -   incompatible_keys.missing_keys: []
09/06/2024 19:34:32 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/06/2024 19:34:32 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/06/2024 19:34:33 - INFO - root -   incompatible_keys.missing_keys: []
09/06/2024 19:34:33 - INFO - root -   incompatible_keys.missing_keys: []
09/06/2024 19:34:35 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/06/2024 19:34:36 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
[h264 @ 0x564930bf5b80] mmco: unref short failure
[h264 @ 0x5615fa8e7180] mmco: unref short failure
[h264 @ 0x55c8c1556d00] mmco: unref short failure
09/06/2024 19:34:47 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
09/06/2024 19:34:47 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
09/06/2024 19:34:49 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
09/06/2024 19:34:50 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.2.crossattention.output.dense.weight', 'cls.predictions.transform.dense.bias', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.1.crossattention.output.dense.bias', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.2.crossattention.self.key.bias', 'cls.predictions.transform.dense.weight', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.6.crossattention.output.dense.bias', 'cls.predictions.bias', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.0.crossattention.self.query.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.key.weight', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'cls.predictions.transform.dense.bias', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'cls.predictions.transform.dense.weight', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.4.crossattention.output.dense.bias', 'cls.predictions.bias', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.8.crossattention.output.dense.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.output.dense.bias', 'cls.predictions.transform.dense.bias', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'cls.predictions.transform.dense.weight', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.key.bias', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.11.crossattention.output.dense.weight', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.0.crossattention.self.key.bias', 'cls.predictions.bias', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.4.crossattention.output.dense.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.9.crossattention.self.query.weight', 'cls.predictions.transform.dense.weight', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.4.crossattention.self.value.bias', 'cls.predictions.transform.dense.bias', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.9.crossattention.self.key.weight', 'cls.predictions.bias', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.self.key.weight', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.1.crossattention.self.query.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
[h264 @ 0x5615fb474c40] mmco: unref short failure
09/06/2024 19:35:22 - INFO - __main__ -   load_from_pretrained: ./output/vast/pretrain_vast/ckpt/model_step_204994.pt
09/06/2024 19:35:22 - INFO - __main__ -   Load from pretrained dir ./output/vast/pretrain_vast
09/06/2024 19:35:29 - INFO - __main__ -   Unexpected keys ['vision_encoder.text.logit_scale']
09/06/2024 19:35:29 - INFO - __main__ -   missing_keys  ['vision_encoder.logit_scale']
[h264 @ 0x5649320ce840] mmco: unref short failure
[h264 @ 0x5649320ce840] mmco: unref short failure
09/06/2024 19:35:38 - INFO - __main__ -   ==================learning_rate_settings==================

09/06/2024 19:35:38 - INFO - __main__ -     basic_lr : 2e-05
09/06/2024 19:35:38 - INFO - __main__ -     clip_lr_visual : 5e-07
09/06/2024 19:35:38 - INFO - __main__ -     clip_lr_visual_len : 245
09/06/2024 19:35:38 - INFO - __main__ -     new_lr : 0
09/06/2024 19:35:38 - INFO - __main__ -     new_params_name: []
  0%|          | 0/1556 [00:00<?, ?it/s][h264 @ 0x564931b00c80] mmco: unref short failure
[h264 @ 0x55e4741b16c0] mmco: unref short failure
[h264 @ 0x55e4741b16c0] mmco: unref short failure
  0%|          | 1/1556 [00:29<12:34:57, 29.13s/it]  0%|          | 2/1556 [00:34<6:38:53, 15.40s/it]   0%|          | 3/1556 [00:38<4:22:35, 10.14s/it]/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
  0%|          | 4/1556 [00:43<3:28:04,  8.04s/it][h264 @ 0x564930ab7840] mmco: unref short failure
[h264 @ 0x564930ab7840] mmco: unref short failure
[h264 @ 0x55e47763b5c0] mmco: unref short failure
[h264 @ 0x5615fd3f7dc0] mmco: unref short failure
[h264 @ 0x5615fd3f7dc0] mmco: unref short failure
[h264 @ 0x5649325297c0] mmco: unref short failure
[h264 @ 0x5649325297c0] mmco: unref short failure
[h264 @ 0x55c8c6d29380] mmco: unref short failure
[h264 @ 0x55c8c6d29380] mmco: unref short failure
  0%|          | 5/1556 [00:50<3:21:15,  7.79s/it][h264 @ 0x56492dacb300] mmco: unref short failure
[h264 @ 0x56492dacb300] mmco: unref short failure
[h264 @ 0x56492dacb300] mmco: unref short failure
[h264 @ 0x56492dacb300] mmco: unref short failure
[h264 @ 0x56492dacb300] mmco: unref short failure
  0%|          | 6/1556 [00:57<3:09:01,  7.32s/it][h264 @ 0x56492decfd80] mmco: unref short failure
[h264 @ 0x56492decfd80] mmco: unref short failure
[h264 @ 0x564932283e80] mmco: unref short failure
[h264 @ 0x564932283e80] mmco: unref short failure
  0%|          | 7/1556 [01:03<2:56:08,  6.82s/it][h264 @ 0x55e4769d4780] mmco: unref short failure
[h264 @ 0x55e4769d4780] mmco: unref short failure
  1%|          | 8/1556 [01:42<7:25:52, 17.28s/it]  1%|          | 9/1556 [01:49<5:58:40, 13.91s/it]  1%|          | 10/1556 [01:55<4:56:18, 11.50s/it]  1%|          | 11/1556 [02:01<4:10:36,  9.73s/it][h264 @ 0x5615fc8ef3c0] mmco: unref short failure
[h264 @ 0x5615fc8ef3c0] mmco: unref short failure
  1%|          | 12/1556 [02:06<3:33:23,  8.29s/it][h264 @ 0x56492ed80800] mmco: unref short failure
[h264 @ 0x55c8c8d16840] mmco: unref short failure
[h264 @ 0x55c8c8d16840] mmco: unref short failure
  1%|          | 13/1556 [02:13<3:24:06,  7.94s/it][h264 @ 0x55e473fe3380] mmco: unref short failure
not have audios 8-qwaveiHMM.3
  1%|          | 14/1556 [02:18<3:05:50,  7.23s/it]  1%|          | 15/1556 [02:25<3:00:42,  7.04s/it][h264 @ 0x5615ff3c3c00] mmco: unref short failure
[h264 @ 0x5615ff3c3c00] mmco: unref short failure
[h264 @ 0x55e475370e40] mmco: unref short failure
[h264 @ 0x55e475370e40] mmco: unref short failure
[h264 @ 0x56492ecf0140] mmco: unref short failure
[h264 @ 0x55c8c322a000] mmco: unref short failure
[h264 @ 0x55c8c322a000] mmco: unref short failure
[h264 @ 0x55e47673ea80] mmco: unref short failure
[h264 @ 0x5615fabcf5c0] mmco: unref short failure
[h264 @ 0x55c8c553dbc0] mmco: unref short failure
[h264 @ 0x55e474c9c2c0] mmco: unref short failure
[h264 @ 0x55e474c9c2c0] mmco: unref short failure
[h264 @ 0x55c8c4f0a640] mmco: unref short failure
[h264 @ 0x55c8c4f0a640] mmco: unref short failure
  1%|          | 16/1556 [03:45<12:25:41, 29.05s/it]  1%|          | 17/1556 [03:51<9:24:42, 22.02s/it]   1%|          | 18/1556 [03:56<7:16:46, 17.04s/it]  1%|          | 19/1556 [04:02<5:49:41, 13.65s/it]  1%|▏         | 20/1556 [04:08<4:48:12, 11.26s/it]  1%|▏         | 21/1556 [04:13<4:01:27,  9.44s/it][h264 @ 0x5615fd81df00] mmco: unref short failure
[h264 @ 0x5615fd81df00] mmco: unref short failure
  1%|▏         | 22/1556 [04:18<3:31:27,  8.27s/it]  1%|▏         | 23/1556 [04:24<3:12:47,  7.55s/it][h264 @ 0x5615fb9984c0] mmco: unref short failure
[h264 @ 0x5615fb9984c0] mmco: unref short failure
[h264 @ 0x55c8c2272000] mmco: unref short failure
[h264 @ 0x55c8c2272000] mmco: unref short failure
[h264 @ 0x5615fe3bd7c0] mmco: unref short failure
[h264 @ 0x564931a3ab00] mmco: unref short failure
[h264 @ 0x564931a3ab00] mmco: unref short failure
[h264 @ 0x56492e5601c0] mmco: unref short failure
[h264 @ 0x56492e5601c0] mmco: unref short failure
[h264 @ 0x564935fff000] mmco: unref short failure
[h264 @ 0x564935fff000] mmco: unref short failure
[h264 @ 0x5615fdd13200] mmco: unref short failure
[h264 @ 0x5649305b8cc0] mmco: unref short failure
[h264 @ 0x5649305b8cc0] mmco: unref short failure
[h264 @ 0x55e47794f3c0] mmco: unref short failure
[h264 @ 0x55e47aa61100] mmco: unref short failure
[h264 @ 0x55c8c5542d40] mmco: unref short failure
[h264 @ 0x55e47ae2ad40] mmco: unref short failure
[h264 @ 0x56492f39b800] mmco: unref short failure
  2%|▏         | 24/1556 [05:49<13:03:37, 30.69s/it]  2%|▏         | 25/1556 [05:56<10:00:07, 23.52s/it]  2%|▏         | 26/1556 [06:02<7:45:09, 18.24s/it] [h264 @ 0x5615fc1cae80] mmco: unref short failure
[h264 @ 0x5615fc1cae80] mmco: unref short failure
  2%|▏         | 27/1556 [06:07<6:07:41, 14.43s/it]  2%|▏         | 28/1556 [06:13<5:02:54, 11.89s/it]  2%|▏         | 29/1556 [06:18<4:07:07,  9.71s/it]  2%|▏         | 30/1556 [06:24<3:38:12,  8.58s/it][h264 @ 0x56492e27f900] mmco: unref short failure
  2%|▏         | 31/1556 [06:29<3:09:02,  7.44s/it][h264 @ 0x5615fc1db900] mmco: unref short failure
[h264 @ 0x55c8c88b4180] mmco: unref short failure
[h264 @ 0x55c8c5bc8400] mmco: unref short failure
[h264 @ 0x55c8c5bc8400] mmco: unref short failure
[h264 @ 0x561603311500] mmco: unref short failure
[h264 @ 0x561603311500] mmco: unref short failure
[h264 @ 0x5615faba7600] mmco: unref short failure
[h264 @ 0x5615faba7600] mmco: unref short failure
[h264 @ 0x5615faba7600] mmco: unref short failure
[h264 @ 0x5615faba7600] mmco: unref short failure
[h264 @ 0x55c8c5607900] mmco: unref short failure
[h264 @ 0x55c8c5607900] mmco: unref short failure
[h264 @ 0x55c8ca205580] mmco: unref short failure
[h264 @ 0x5615faba6ec0] mmco: unref short failure
[h264 @ 0x5615faba6ec0] mmco: unref short failure
[h264 @ 0x5615fb998000] mmco: unref short failure
[h264 @ 0x5615fb998000] mmco: unref short failure
[h264 @ 0x55c8c2146040] mmco: unref short failure
[h264 @ 0x55c8c2146040] mmco: unref short failure
[h264 @ 0x564936f8bc80] mmco: unref short failure
[h264 @ 0x564936f8bc80] mmco: unref short failure
[h264 @ 0x55c8ca4de200] mmco: unref short failure
[h264 @ 0x55c8ca4de200] mmco: unref short failure
  2%|▏         | 32/1556 [08:07<14:39:05, 34.61s/it][h264 @ 0x5616052d2340] mmco: unref short failure
[h264 @ 0x5616052d2340] mmco: unref short failure
[h264 @ 0x55c8cba77440] mmco: unref short failure
  2%|▏         | 33/1556 [08:14<11:08:06, 26.32s/it]  2%|▏         | 34/1556 [08:19<8:28:41, 20.05s/it] [h264 @ 0x55e4753a3a80] mmco: unref short failure
[h264 @ 0x55e47af5f680] mmco: unref short failure
  2%|▏         | 35/1556 [08:24<6:37:33, 15.68s/it][h264 @ 0x56493832cb00] mmco: unref short failure
[h264 @ 0x56493832cb00] mmco: unref short failure
  2%|▏         | 36/1556 [08:30<5:20:29, 12.65s/it]  2%|▏         | 37/1556 [08:36<4:26:58, 10.55s/it]  2%|▏         | 38/1556 [08:41<3:48:30,  9.03s/it][h264 @ 0x55e47c003400] mmco: unref short failure
[h264 @ 0x55e47c003400] mmco: unref short failure
  3%|▎         | 39/1556 [08:47<3:20:22,  7.93s/it][h264 @ 0x56160429a840] mmco: unref short failure
[h264 @ 0x56160429a840] mmco: unref short failure
[h264 @ 0x55e47e60ad00] mmco: unref short failure
[h264 @ 0x55c8cb1d9dc0] mmco: unref short failure
[h264 @ 0x561600891700] mmco: unref short failure
[h264 @ 0x561600891700] mmco: unref short failure
[h264 @ 0x55c8cba50500] mmco: unref short failure
[h264 @ 0x55c8cba50500] mmco: unref short failure
[h264 @ 0x55e479ee1000] mmco: unref short failure
[h264 @ 0x5615ff2542c0] mmco: unref short failure
[h264 @ 0x55e4747c3b00] mmco: unref short failure
[h264 @ 0x55c8c7d213c0] mmco: unref short failure
[h264 @ 0x55c8c7d213c0] mmco: unref short failure
[h264 @ 0x5615fa9e8540] mmco: unref short failure
[h264 @ 0x55e479ff5c40] mmco: unref short failure
[h264 @ 0x55e479ff5c40] mmco: unref short failure
[h264 @ 0x564934371540] mmco: unref short failure
  3%|▎         | 40/1556 [10:07<12:28:54, 29.64s/it][h264 @ 0x55e47afbca80] mmco: unref short failure
  3%|▎         | 41/1556 [10:12<9:20:14, 22.19s/it] [h264 @ 0x56492db14800] mmco: unref short failure
[h264 @ 0x56492db14800] mmco: unref short failure
  3%|▎         | 42/1556 [10:17<7:14:12, 17.21s/it]  3%|▎         | 43/1556 [10:24<5:53:15, 14.01s/it][h264 @ 0x55c8c7242340] mmco: unref short failure
[h264 @ 0x55c8c7242340] mmco: unref short failure
  3%|▎         | 44/1556 [10:29<4:45:42, 11.34s/it][h264 @ 0x56493619c4c0] mmco: unref short failure
  3%|▎         | 45/1556 [10:35<4:08:05,  9.85s/it][h264 @ 0x5615fc1ba4c0] mmco: unref short failure
[h264 @ 0x5615fc1ba4c0] mmco: unref short failure
  3%|▎         | 46/1556 [10:41<3:36:01,  8.58s/it][h264 @ 0x55c8c15b1300] mmco: unref short failure
[h264 @ 0x55c8c15b1300] mmco: unref short failure
[h264 @ 0x56492e46e180] mmco: unref short failure
  3%|▎         | 47/1556 [10:48<3:23:47,  8.10s/it][h264 @ 0x55c8c3798ec0] mmco: unref short failure
[h264 @ 0x55c8c3798ec0] mmco: unref short failure
[h264 @ 0x564937b43f40] mmco: unref short failure
[h264 @ 0x564937b43f40] mmco: unref short failure
[h264 @ 0x564937b43f40] mmco: unref short failure
[h264 @ 0x564937b43f40] mmco: unref short failure
[h264 @ 0x5615fc5acac0] mmco: unref short failure
[h264 @ 0x561605782640] mmco: unref short failure
[h264 @ 0x561605782640] mmco: unref short failure
[h264 @ 0x55c8c15b1780] mmco: unref short failure
[h264 @ 0x55c8c15b1780] mmco: unref short failure
[h264 @ 0x55e4719ad5c0] mmco: unref short failure
[h264 @ 0x56492de97780] mmco: unref short failure
[h264 @ 0x56492de97780] mmco: unref short failure
[h264 @ 0x561600cd9900] mmco: unref short failure
[h264 @ 0x55c8c4924100] mmco: unref short failure
[h264 @ 0x564932542280] mmco: unref short failure
[h264 @ 0x56493a938e80] mmco: unref short failure
[h264 @ 0x56493a938e80] mmco: unref short failure
[h264 @ 0x561607c5bb00] mmco: unref short failure
[h264 @ 0x55c8c63a3480] mmco: unref short failure
[h264 @ 0x55c8c63a3480] mmco: unref short failure
[h264 @ 0x55c8c63a3480] mmco: unref short failure
[h264 @ 0x55c8c63a3480] mmco: unref short failure
[h264 @ 0x55c8c63a3480] mmco: unref short failure
[h264 @ 0x55c8c63a3480] mmco: unref short failure
[h264 @ 0x55c8c4da6100] mmco: unref short failure
[h264 @ 0x55c8c4da6100] mmco: unref short failure
  3%|▎         | 48/1556 [12:21<14:01:57, 33.50s/it]  3%|▎         | 49/1556 [12:26<10:29:34, 25.07s/it]09/06/2024 19:48:07 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.413073778152466, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.049995630979537964, 'loss_ret%tv%ta--finetune_area/loss_area': 3.10347580909729, 'loss_ret%tv%ta--finetune_area/total_loss': 6.566545486450195}
[h264 @ 0x55c8c4395640] mmco: unref short failure
  3%|▎         | 50/1556 [12:30<7:54:06, 18.89s/it]   3%|▎         | 51/1556 [12:34<5:58:28, 14.29s/it]  3%|▎         | 52/1556 [12:39<4:51:34, 11.63s/it][h264 @ 0x55c8c6aab000] mmco: unref short failure
  3%|▎         | 53/1556 [12:45<4:05:32,  9.80s/it]  3%|▎         | 54/1556 [12:51<3:34:29,  8.57s/it][h264 @ 0x55c8c93dac40] mmco: unref short failure
  4%|▎         | 55/1556 [12:57<3:16:28,  7.85s/it][h264 @ 0x55e4798312c0] mmco: unref short failure
[h264 @ 0x55c8c7d3f640] mmco: unref short failure
[h264 @ 0x55c8c7d3f640] mmco: unref short failure
[h264 @ 0x5615fc709ec0] mmco: unref short failure
[h264 @ 0x5615fc709ec0] mmco: unref short failure
[h264 @ 0x5615fd267140] mmco: unref short failure
[h264 @ 0x56160219d380] mmco: unref short failure
[h264 @ 0x5615fac598c0] mmco: unref short failure
[h264 @ 0x5615fac598c0] mmco: unref short failure
[h264 @ 0x55e476515b80] mmco: unref short failure
[h264 @ 0x56493a1f8980] mmco: unref short failure
[h264 @ 0x56493a1f8980] mmco: unref short failure
[h264 @ 0x56493a1f8980] mmco: unref short failure
[h264 @ 0x56493a1f8980] mmco: unref short failure
[h264 @ 0x56493a1f8980] mmco: unref short failure
[h264 @ 0x56493a1f8980] mmco: unref short failure
[h264 @ 0x56493a1f8980] mmco: unref short failure
[h264 @ 0x56493a1f8980] mmco: unref short failure
[h264 @ 0x56493a1f8980] mmco: unref short failure
[h264 @ 0x56493a1f8980] mmco: unref short failure
[h264 @ 0x5615ffe26040] mmco: unref short failure
[h264 @ 0x564939bb8cc0] mmco: unref short failure
[h264 @ 0x564939bb8cc0] mmco: unref short failure
[h264 @ 0x561604c6c740] mmco: unref short failure
[h264 @ 0x561604c6c740] mmco: unref short failure
[h264 @ 0x5616082cdd40] mmco: unref short failure
[h264 @ 0x5616082cdd40] mmco: unref short failure
[h264 @ 0x55e472915200] mmco: unref short failure
[h264 @ 0x55e472915200] mmco: unref short failure
[h264 @ 0x561607d57f00] mmco: unref short failure
[h264 @ 0x561607d57f00] mmco: unref short failure
  4%|▎         | 56/1556 [14:15<12:00:26, 28.82s/it][h264 @ 0x561607d583c0] mmco: unref short failure
  4%|▎         | 57/1556 [14:20<9:04:07, 21.78s/it]   4%|▎         | 58/1556 [14:25<6:58:17, 16.75s/it][h264 @ 0x55c8c4eff380] mmco: unref short failure
[h264 @ 0x55c8c4eff380] mmco: unref short failure
[h264 @ 0x55e476a90f00] mmco: unref short failure
[h264 @ 0x55e4747bb600] mmco: unref short failure
[h264 @ 0x55e4747bb600] mmco: unref short failure
  4%|▍         | 59/1556 [14:31<5:35:04, 13.43s/it][h264 @ 0x5649392c7a80] mmco: unref short failure
[h264 @ 0x56493a313340] mmco: unref short failure
[h264 @ 0x56493a313340] mmco: unref short failure
  4%|▍         | 60/1556 [14:37<4:38:30, 11.17s/it][h264 @ 0x561606f46140] mmco: unref short failure
  4%|▍         | 61/1556 [14:42<3:55:22,  9.45s/it]  4%|▍         | 62/1556 [14:48<3:30:35,  8.46s/it]  4%|▍         | 63/1556 [14:53<3:06:54,  7.51s/it][h264 @ 0x564935168f00] mmco: unref short failure
[h264 @ 0x564935168f00] mmco: unref short failure
[h264 @ 0x55e47dea1fc0] mmco: unref short failure
[h264 @ 0x55e47dea1fc0] mmco: unref short failure
[h264 @ 0x5615fedd6040] mmco: unref short failure
[h264 @ 0x55c8cc8ce880] mmco: unref short failure
[h264 @ 0x55c8cc8ce880] mmco: unref short failure
[h264 @ 0x55c8c7e4bec0] mmco: unref short failure
[h264 @ 0x5615fac2ec40] mmco: unref short failure
[h264 @ 0x56492fa70480] mmco: unref short failure
[h264 @ 0x56492fa70480] mmco: unref short failure
  4%|▍         | 64/1556 [16:23<13:19:01, 32.13s/it]  4%|▍         | 65/1556 [16:27<9:50:22, 23.76s/it] [h264 @ 0x561603965440] mmco: unref short failure
[h264 @ 0x561603965440] mmco: unref short failure
  4%|▍         | 66/1556 [16:33<7:34:47, 18.31s/it]  4%|▍         | 67/1556 [16:38<5:58:05, 14.43s/it][h264 @ 0x56492f9faa00] mmco: unref short failure
[h264 @ 0x55e474ac2180] mmco: unref short failure
  4%|▍         | 68/1556 [16:43<4:45:39, 11.52s/it]  4%|▍         | 69/1556 [16:49<4:02:30,  9.79s/it]  4%|▍         | 70/1556 [16:54<3:31:39,  8.55s/it]  5%|▍         | 71/1556 [16:59<3:06:19,  7.53s/it][h264 @ 0x56493a3312c0] mmco: unref short failure
[h264 @ 0x5615fc5bd980] mmco: unref short failure
[h264 @ 0x55c8cfcf3300] mmco: unref short failure
[h264 @ 0x55c8cfcf3300] mmco: unref short failure
[h264 @ 0x5649303a4bc0] mmco: unref short failure
[h264 @ 0x5649303a4bc0] mmco: unref short failure
[h264 @ 0x56160811d340] mmco: unref short failure
[h264 @ 0x561604055a00] mmco: unref short failure
[h264 @ 0x55e47ca5a840] mmco: unref short failure
[h264 @ 0x55e47ca5a840] mmco: unref short failure
[h264 @ 0x561604ced680] mmco: unref short failure
[h264 @ 0x561604ced680] mmco: unref short failure
[h264 @ 0x5616051dbdc0] mmco: unref short failure
[h264 @ 0x55c8ca924780] mmco: unref short failure
[h264 @ 0x55c8cf3a9a00] mmco: unref short failure
[h264 @ 0x564938a52e40] mmco: unref short failure
[h264 @ 0x564938a52e40] mmco: unref short failure
[h264 @ 0x55c8ccbfb440] mmco: unref short failure
  5%|▍         | 72/1556 [18:22<12:19:30, 29.90s/it][h264 @ 0x564935412b00] mmco: unref short failure
[h264 @ 0x564935412b00] mmco: unref short failure
  5%|▍         | 73/1556 [18:27<9:18:11, 22.58s/it] [h264 @ 0x561605ffd840] mmco: unref short failure
[h264 @ 0x561605ffd840] mmco: unref short failure
  5%|▍         | 74/1556 [18:33<7:12:27, 17.51s/it]  5%|▍         | 75/1556 [18:38<5:41:52, 13.85s/it][h264 @ 0x55e4772ff6c0] mmco: unref short failure
  5%|▍         | 76/1556 [18:43<4:36:44, 11.22s/it][h264 @ 0x564935e3e840] mmco: unref short failure
[h264 @ 0x564935e3e840] mmco: unref short failure
  5%|▍         | 77/1556 [18:48<3:51:49,  9.40s/it]  5%|▌         | 78/1556 [18:53<3:19:47,  8.11s/it]  5%|▌         | 79/1556 [19:00<3:11:01,  7.76s/it][h264 @ 0x5615fff5ae00] mmco: unref short failure
[h264 @ 0x5615fd0cc180] mmco: unref short failure
[h264 @ 0x5615fd0cc180] mmco: unref short failure
[h264 @ 0x5615fd0cc180] mmco: unref short failure
[h264 @ 0x55c8c3e16380] mmco: unref short failure
[h264 @ 0x55e482bc0640] mmco: unref short failure
[h264 @ 0x55e482bc0640] mmco: unref short failure
[h264 @ 0x55e481218a80] mmco: unref short failure
[h264 @ 0x55e481218a80] mmco: unref short failure
[h264 @ 0x5649314d1400] mmco: unref short failure
[h264 @ 0x5649314d1400] mmco: unref short failure
[h264 @ 0x56160516adc0] mmco: unref short failure
[h264 @ 0x55c8d17b9400] mmco: unref short failure
[h264 @ 0x55c8c6792480] mmco: unref short failure
[h264 @ 0x55e47b1b4780] mmco: unref short failure
[h264 @ 0x55c8d160c080] mmco: unref short failure
[h264 @ 0x55c8cf3a7180] mmco: unref short failure
[h264 @ 0x55c8cf3a7180] mmco: unref short failure
[h264 @ 0x55c8d11efd40] mmco: unref short failure
[h264 @ 0x55c8d11efd40] mmco: unref short failure
[h264 @ 0x56493cd1a400] mmco: unref short failure
[h264 @ 0x56493cd1a400] mmco: unref short failure
not have audios 7wavFXW3AFw.7
  5%|▌         | 80/1556 [20:23<12:23:21, 30.22s/it]  5%|▌         | 81/1556 [20:29<9:27:08, 23.07s/it] [h264 @ 0x56493cd19b00] mmco: unref short failure
  5%|▌         | 82/1556 [20:36<7:23:28, 18.05s/it][h264 @ 0x55e47171fbc0] mmco: unref short failure
[h264 @ 0x55e47171fbc0] mmco: unref short failure
[h264 @ 0x55e47171fbc0] mmco: unref short failure
[h264 @ 0x55c8ce9a6b80] mmco: unref short failure
[h264 @ 0x55c8ce9a6b80] mmco: unref short failure
[h264 @ 0x561601f8cc40] mmco: unref short failure
  5%|▌         | 83/1556 [20:42<5:55:02, 14.46s/it]  5%|▌         | 84/1556 [20:48<4:51:34, 11.89s/it]  5%|▌         | 85/1556 [20:53<4:01:26,  9.85s/it]  6%|▌         | 86/1556 [20:58<3:29:11,  8.54s/it]  6%|▌         | 87/1556 [21:04<3:05:11,  7.56s/it][h264 @ 0x56493bf59a40] mmco: unref short failure
[h264 @ 0x56493bf59a40] mmco: unref short failure
[h264 @ 0x55e47f5836c0] mmco: unref short failure
[h264 @ 0x55e47f5836c0] mmco: unref short failure
[h264 @ 0x5616045a65c0] mmco: unref short failure
[h264 @ 0x5616045a65c0] mmco: unref short failure
[h264 @ 0x56492caef240] mmco: unref short failure
[h264 @ 0x564934b7af80] mmco: unref short failure
[h264 @ 0x55c8cee09640] mmco: unref short failure
[h264 @ 0x55c8c90f7900] mmco: unref short failure
[h264 @ 0x56493038e1c0] mmco: unref short failure
[h264 @ 0x56493038e1c0] mmco: unref short failure
[h264 @ 0x55c8c0533c00] mmco: unref short failure
  6%|▌         | 88/1556 [22:31<12:54:32, 31.66s/it]  6%|▌         | 89/1556 [22:38<9:46:52, 24.00s/it] [h264 @ 0x56160ba63b40] mmco: unref short failure
  6%|▌         | 90/1556 [22:44<7:36:00, 18.66s/it]  6%|▌         | 91/1556 [22:50<6:01:57, 14.82s/it][h264 @ 0x55c8c72f0500] mmco: unref short failure
[h264 @ 0x55c8c72f0500] mmco: unref short failure
[h264 @ 0x561603327700] mmco: unref short failure
[h264 @ 0x561603327700] mmco: unref short failure
[h264 @ 0x55e48057c380] mmco: unref short failure
  6%|▌         | 92/1556 [22:55<4:52:20, 11.98s/it]  6%|▌         | 93/1556 [23:00<4:02:03,  9.93s/it]  6%|▌         | 94/1556 [23:05<3:24:02,  8.37s/it]  6%|▌         | 95/1556 [23:09<2:55:01,  7.19s/it][h264 @ 0x5615fc9ab000] mmco: unref short failure
[h264 @ 0x564939f9bb80] mmco: unref short failure
[h264 @ 0x55c8c892fcc0] mmco: unref short failure
[h264 @ 0x55c8c892fcc0] mmco: unref short failure
[h264 @ 0x55c8c892fcc0] mmco: unref short failure
[h264 @ 0x55c8c892fcc0] mmco: unref short failure
[h264 @ 0x56160bceea40] mmco: unref short failure
[h264 @ 0x56160bceea40] mmco: unref short failure
[h264 @ 0x56160bceea40] mmco: unref short failure
[h264 @ 0x56160bceea40] mmco: unref short failure
[h264 @ 0x55c8d2812dc0] mmco: unref short failure
[h264 @ 0x55c8d1810900] mmco: unref short failure
[h264 @ 0x55c8d1810900] mmco: unref short failure
[h264 @ 0x5615fb195dc0] mmco: unref short failure
[h264 @ 0x5615fb195dc0] mmco: unref short failure
[h264 @ 0x561609701b40] mmco: unref short failure
[h264 @ 0x561609701b40] mmco: unref short failure
[h264 @ 0x5615fb195dc0] mmco: unref short failure
[h264 @ 0x5615fb195dc0] mmco: unref short failure
[h264 @ 0x56492f9a2040] mmco: unref short failure
[h264 @ 0x56492f9a2040] mmco: unref short failure
[h264 @ 0x56492f9a2040] mmco: unref short failure
[h264 @ 0x56492f9a2040] mmco: unref short failure
  6%|▌         | 96/1556 [24:24<11:08:30, 27.47s/it][h264 @ 0x55e4826e2840] mmco: unref short failure
[h264 @ 0x55e4826e2840] mmco: unref short failure
[h264 @ 0x55e4826e2840] mmco: unref short failure
[h264 @ 0x55e4826e2840] mmco: unref short failure
  6%|▌         | 97/1556 [24:30<8:27:47, 20.88s/it] [h264 @ 0x5649395549c0] mmco: unref short failure
[h264 @ 0x56160b147080] mmco: unref short failure
  6%|▋         | 98/1556 [24:36<6:38:53, 16.42s/it][h264 @ 0x55c8cb84fd40] mmco: unref short failure
[h264 @ 0x55c8cb84fd40] mmco: unref short failure
[h264 @ 0x564938c1ef00] mmco: unref short failure
[h264 @ 0x564938c1ef00] mmco: unref short failure
  6%|▋         | 99/1556 [24:43<5:33:31, 13.73s/it]09/06/2024 20:00:24 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.36600923538208, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.05069562792778015, 'loss_ret%tv%ta--finetune_area/loss_area': 3.021848678588867, 'loss_ret%tv%ta--finetune_area/total_loss': 6.438553810119629}
[h264 @ 0x56493ee7fe00] mmco: unref short failure
[h264 @ 0x56493ee7fe00] mmco: unref short failure
  6%|▋         | 100/1556 [24:48<4:26:31, 10.98s/it]  6%|▋         | 101/1556 [24:52<3:38:14,  9.00s/it]  7%|▋         | 102/1556 [24:57<3:06:20,  7.69s/it][h264 @ 0x56493a9431c0] mmco: unref short failure
[h264 @ 0x55e47d150a40] mmco: unref short failure
[h264 @ 0x55e47d150a40] mmco: unref short failure
  7%|▋         | 103/1556 [25:02<2:47:13,  6.91s/it][h264 @ 0x5615fd96bd80] mmco: unref short failure
[h264 @ 0x55e4847e6880] mmco: unref short failure
[h264 @ 0x55c8d29a9400] mmco: unref short failure
[h264 @ 0x55c8d29a9400] mmco: unref short failure
[h264 @ 0x5615faffb940] mmco: unref short failure
[h264 @ 0x564935c5c0c0] mmco: unref short failure
[h264 @ 0x55c8c77c9e40] mmco: unref short failure
[h264 @ 0x55c8ce560a40] mmco: unref short failure
[h264 @ 0x55c8ce560a40] mmco: unref short failure
[h264 @ 0x55e47a9b0840] mmco: unref short failure
[h264 @ 0x55e47a9b0840] mmco: unref short failure
[h264 @ 0x561608819e00] mmco: unref short failure
[h264 @ 0x5649362b8580] mmco: unref short failure
[h264 @ 0x5649362b8580] mmco: unref short failure
[h264 @ 0x55e4815c1740] mmco: unref short failure
[h264 @ 0x55c8d2341380] mmco: unref short failure
[h264 @ 0x55c8d2341380] mmco: unref short failure
[h264 @ 0x55e47b3fe100] mmco: unref short failure
[h264 @ 0x55e47b3fe100] mmco: unref short failure
[h264 @ 0x55e473fc6c40] mmco: unref short failure
[h264 @ 0x55e473fc6c40] mmco: unref short failure
[h264 @ 0x56493a037d80] mmco: unref short failure
[h264 @ 0x56493a037d80] mmco: unref short failure
[h264 @ 0x55c8d0a1b040] mmco: unref short failure
  7%|▋         | 104/1556 [26:22<11:39:44, 28.91s/it][h264 @ 0x55c8d2749d40] mmco: unref short failure
  7%|▋         | 105/1556 [26:27<8:48:45, 21.86s/it] [h264 @ 0x55e484eeb680] mmco: unref short failure
[h264 @ 0x55e484eeb680] mmco: unref short failure
[h264 @ 0x5615fb961e40] mmco: unref short failure
[h264 @ 0x5615fb961e40] mmco: unref short failure
  7%|▋         | 106/1556 [26:34<6:54:35, 17.16s/it][h264 @ 0x55e480981c40] mmco: unref short failure
[h264 @ 0x55c8c045a300] mmco: unref short failure
[h264 @ 0x55c8c045a300] mmco: unref short failure
  7%|▋         | 107/1556 [26:58<7:50:19, 19.48s/it]  7%|▋         | 108/1556 [27:04<6:09:07, 15.29s/it][h264 @ 0x55c8d234c3c0] mmco: unref short failure
  7%|▋         | 109/1556 [27:09<4:54:37, 12.22s/it]  7%|▋         | 110/1556 [27:14<4:03:00, 10.08s/it][h264 @ 0x55e47fe662c0] mmco: unref short failure
[h264 @ 0x55e473ae2500] mmco: unref short failure
  7%|▋         | 111/1556 [27:20<3:31:44,  8.79s/it][h264 @ 0x55c8d0a348c0] mmco: unref short failure
[h264 @ 0x55c8d0a348c0] mmco: unref short failure
[h264 @ 0x55e472c7b340] mmco: unref short failure
[h264 @ 0x55e472c7b340] mmco: unref short failure
[h264 @ 0x55e47c662000] mmco: unref short failure
[h264 @ 0x55e48394cc00] mmco: unref short failure
[h264 @ 0x56493a7a9d40] mmco: unref short failure
[h264 @ 0x55e472603a00] mmco: unref short failure
[h264 @ 0x55e472603a00] mmco: unref short failure
[h264 @ 0x55e4842fe180] mmco: unref short failure
[h264 @ 0x56160b4361c0] mmco: unref short failure
[h264 @ 0x56160b4361c0] mmco: unref short failure
[h264 @ 0x56160b4361c0] mmco: unref short failure
[h264 @ 0x55e4738a2cc0] mmco: unref short failure
[h264 @ 0x55e4738a2cc0] mmco: unref short failure
[h264 @ 0x55c8c4f68200] mmco: unref short failure
[h264 @ 0x55e475fec640] mmco: unref short failure
[h264 @ 0x55e475fec640] mmco: unref short failure
  7%|▋         | 112/1556 [28:38<11:51:50, 29.58s/it][h264 @ 0x564939eb5700] mmco: unref short failure
[h264 @ 0x55e482727240] mmco: unref short failure
[h264 @ 0x55e482727240] mmco: unref short failure
  7%|▋         | 113/1556 [28:45<9:08:42, 22.82s/it]   7%|▋         | 114/1556 [28:50<7:02:36, 17.58s/it]  7%|▋         | 115/1556 [28:56<5:37:34, 14.06s/it][h264 @ 0x56493b5484c0] mmco: unref short failure
[h264 @ 0x56493b5484c0] mmco: unref short failure
  7%|▋         | 116/1556 [29:02<4:39:19, 11.64s/it][h264 @ 0x56493b548740] mmco: unref short failure
[h264 @ 0x56493b548740] mmco: unref short failure
  8%|▊         | 117/1556 [29:09<4:03:19, 10.15s/it]  8%|▊         | 118/1556 [29:14<3:29:27,  8.74s/it][h264 @ 0x55c8c2d8f040] mmco: unref short failure
  8%|▊         | 119/1556 [29:19<3:02:36,  7.62s/it][h264 @ 0x56160d4c5200] mmco: unref short failure
[h264 @ 0x56160ec6b640] mmco: unref short failure
[h264 @ 0x56160ff240c0] mmco: unref short failure
[h264 @ 0x56160ff240c0] mmco: unref short failure
[h264 @ 0x5616029e3640] mmco: unref short failure
  8%|▊         | 120/1556 [30:41<11:53:54, 29.83s/it][h264 @ 0x56493f462140] mmco: unref short failure
[h264 @ 0x56493f462140] mmco: unref short failure
  8%|▊         | 121/1556 [30:46<8:53:28, 22.31s/it] [h264 @ 0x56160d64bf00] mmco: unref short failure
  8%|▊         | 122/1556 [30:52<6:58:20, 17.50s/it]  8%|▊         | 123/1556 [31:02<6:06:06, 15.33s/it][h264 @ 0x56493853ba80] mmco: unref short failure
[h264 @ 0x56493853ba80] mmco: unref short failure
  8%|▊         | 124/1556 [31:08<4:55:10, 12.37s/it]  8%|▊         | 125/1556 [31:13<4:05:28, 10.29s/it][h264 @ 0x55c8d18d8dc0] mmco: unref short failure
  8%|▊         | 126/1556 [31:20<3:39:22,  9.20s/it][h264 @ 0x55e473697280] mmco: unref short failure
  8%|▊         | 127/1556 [31:26<3:15:43,  8.22s/it][h264 @ 0x55c8d473e080] mmco: unref short failure
[h264 @ 0x56493264e6c0] mmco: unref short failure
[h264 @ 0x55c8c95e54c0] mmco: unref short failure
[h264 @ 0x56160e244600] mmco: unref short failure
[h264 @ 0x56493e00c5c0] mmco: unref short failure
[h264 @ 0x56493e00c5c0] mmco: unref short failure
[h264 @ 0x561608963b80] mmco: unref short failure
[h264 @ 0x56493f5ad980] mmco: unref short failure
[h264 @ 0x55e475f860c0] mmco: unref short failure
[h264 @ 0x564931210c00] mmco: unref short failure
[h264 @ 0x55e473f0df00] mmco: unref short failure
[h264 @ 0x55e473f0df00] mmco: unref short failure
[h264 @ 0x55c8d4eeaa40] mmco: unref short failure
[h264 @ 0x55c8d4eeaa40] mmco: unref short failure
[h264 @ 0x55c8ca8975c0] mmco: unref short failure
[h264 @ 0x55c8ca8975c0] mmco: unref short failure
  8%|▊         | 128/1556 [32:41<11:14:05, 28.32s/it][h264 @ 0x55c8ca8975c0] mmco: unref short failure
[h264 @ 0x55c8ca8975c0] mmco: unref short failure
[h264 @ 0x55c8d2d2c380] mmco: unref short failure
  8%|▊         | 129/1556 [32:47<8:32:14, 21.54s/it]   8%|▊         | 130/1556 [32:52<6:34:57, 16.62s/it][h264 @ 0x55e4802a0900] mmco: unref short failure
[h264 @ 0x56493c561900] mmco: unref short failure
[h264 @ 0x56493c561900] mmco: unref short failure
[h264 @ 0x564934afb400] mmco: unref short failure
[h264 @ 0x56160753ef80] mmco: unref short failure
  8%|▊         | 131/1556 [33:09<6:39:59, 16.84s/it]  8%|▊         | 132/1556 [33:15<5:23:05, 13.61s/it]  9%|▊         | 133/1556 [33:21<4:27:45, 11.29s/it]  9%|▊         | 134/1556 [33:28<3:52:18,  9.80s/it][h264 @ 0x56160db0dec0] mmco: unref short failure
  9%|▊         | 135/1556 [33:33<3:22:45,  8.56s/it][h264 @ 0x55c8c21f2d40] mmco: unref short failure
[h264 @ 0x55c8d2f02c00] mmco: unref short failure
[h264 @ 0x55c8d2f02c00] mmco: unref short failure
[h264 @ 0x55c8d43433c0] mmco: unref short failure
[h264 @ 0x55c8d43433c0] mmco: unref short failure
[h264 @ 0x55e482d64380] mmco: unref short failure
[h264 @ 0x55e482d64380] mmco: unref short failure
[h264 @ 0x55e483a2b140] mmco: unref short failure
[h264 @ 0x55e483a2b140] mmco: unref short failure
[h264 @ 0x55e483a2b140] mmco: unref short failure
[h264 @ 0x55e482975b80] mmco: unref short failure
[h264 @ 0x5615fb1f7e40] mmco: unref short failure
[h264 @ 0x5615fb1f7e40] mmco: unref short failure
  9%|▊         | 136/1556 [34:38<10:00:32, 25.37s/it][h264 @ 0x56493df9d480] mmco: unref short failure
[h264 @ 0x56493df9d480] mmco: unref short failure
  9%|▉         | 137/1556 [34:43<7:37:39, 19.35s/it]   9%|▉         | 138/1556 [34:48<5:53:43, 14.97s/it][h264 @ 0x55e476c71300] mmco: unref short failure
[h264 @ 0x55e476c71300] mmco: unref short failure
  9%|▉         | 139/1556 [35:06<6:14:04, 15.84s/it][h264 @ 0x55e47e823280] mmco: unref short failure
  9%|▉         | 140/1556 [35:11<4:56:49, 12.58s/it][h264 @ 0x55c8ce835040] mmco: unref short failure
  9%|▉         | 141/1556 [35:16<4:04:50, 10.38s/it]  9%|▉         | 142/1556 [35:20<3:22:51,  8.61s/it]  9%|▉         | 143/1556 [35:25<2:53:22,  7.36s/it][h264 @ 0x55c8d00842c0] mmco: unref short failure
[h264 @ 0x55c8d00842c0] mmco: unref short failure
[h264 @ 0x55e474f95200] mmco: unref short failure
[h264 @ 0x5616073d46c0] mmco: unref short failure
[h264 @ 0x55c8c2de9ac0] mmco: unref short failure
[h264 @ 0x56160fb7d5c0] mmco: unref short failure
[h264 @ 0x55c8c1955080] mmco: unref short failure
[h264 @ 0x56160e86fdc0] mmco: unref short failure
[h264 @ 0x55c8c8159740] mmco: unref short failure
[h264 @ 0x55c8c8159740] mmco: unref short failure
[h264 @ 0x55c8c2c73e40] mmco: unref short failure
[h264 @ 0x55c8c2c73e40] mmco: unref short failure
[h264 @ 0x56493e39bf80] mmco: unref short failure
[h264 @ 0x56493e39bf80] mmco: unref short failure
[h264 @ 0x55c8d2469300] mmco: unref short failure
[h264 @ 0x55e488b2e5c0] mmco: unref short failure
  9%|▉         | 144/1556 [36:40<10:54:57, 27.83s/it]  9%|▉         | 145/1556 [36:46<8:16:31, 21.11s/it]   9%|▉         | 146/1556 [36:51<6:26:50, 16.46s/it][h264 @ 0x55e488856f40] mmco: unref short failure
  9%|▉         | 147/1556 [37:12<6:52:45, 17.58s/it] 10%|▉         | 148/1556 [37:18<5:30:05, 14.07s/it] 10%|▉         | 149/1556 [37:24<4:33:57, 11.68s/it][h264 @ 0x564941754740] mmco: unref short failure
09/06/2024 20:13:05 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.6134631633758545, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.050909947603940964, 'loss_ret%tv%ta--finetune_area/loss_area': 3.377692699432373, 'loss_ret%tv%ta--finetune_area/total_loss': 7.042065620422363}
 10%|▉         | 150/1556 [37:29<3:47:51,  9.72s/it][h264 @ 0x55e47121dc00] mmco: unref short failure
 10%|▉         | 151/1556 [37:33<3:12:02,  8.20s/it][h264 @ 0x55e474021f40] mmco: unref short failure
[h264 @ 0x55e474021f40] mmco: unref short failure
[h264 @ 0x56493c1170c0] mmco: unref short failure
[h264 @ 0x56493c1170c0] mmco: unref short failure
[h264 @ 0x55e480891040] mmco: unref short failure
[h264 @ 0x5649356d9800] mmco: unref short failure
[h264 @ 0x5649356d9800] mmco: unref short failure
[h264 @ 0x56492df89c00] mmco: unref short failure
[h264 @ 0x5615fc62eec0] mmco: unref short failure
[h264 @ 0x55c8cda50a40] mmco: unref short failure
[h264 @ 0x55c8c375eb00] mmco: unref short failure
[h264 @ 0x55c8c375eb00] mmco: unref short failure
[h264 @ 0x56160c839c40] mmco: unref short failure
[h264 @ 0x56160c839c40] mmco: unref short failure
[h264 @ 0x56160c839c40] mmco: unref short failure
[h264 @ 0x56160c839c40] mmco: unref short failure
[h264 @ 0x56493b086580] mmco: unref short failure
[h264 @ 0x55e477474dc0] mmco: unref short failure
[h264 @ 0x55e477474dc0] mmco: unref short failure
[h264 @ 0x56492dc3d100] mmco: unref short failure
[h264 @ 0x55e4723913c0] mmco: unref short failure
[h264 @ 0x5615fb0ef9c0] mmco: unref short failure
[h264 @ 0x56493e01b5c0] mmco: unref short failure
[h264 @ 0x56493e01b5c0] mmco: unref short failure
 10%|▉         | 152/1556 [38:56<11:54:30, 30.53s/it] 10%|▉         | 153/1556 [39:02<9:00:56, 23.13s/it] [h264 @ 0x56494012c6c0] mmco: unref short failure
[h264 @ 0x56494012c6c0] mmco: unref short failure
 10%|▉         | 154/1556 [39:08<7:00:42, 18.00s/it] 10%|▉         | 155/1556 [39:13<5:32:45, 14.25s/it] 10%|█         | 156/1556 [39:21<4:42:18, 12.10s/it] 10%|█         | 157/1556 [39:27<4:02:32, 10.40s/it][h264 @ 0x55e476a945c0] mmco: unref short failure
 10%|█         | 158/1556 [39:33<3:32:35,  9.12s/it] 10%|█         | 159/1556 [39:39<3:10:32,  8.18s/it][h264 @ 0x564941d7a480] mmco: unref short failure
[h264 @ 0x55e48027c580] mmco: unref short failure
[h264 @ 0x55e47f59e200] mmco: unref short failure
[h264 @ 0x55e480715700] mmco: unref short failure
[h264 @ 0x56492cbf2b00] mmco: unref short failure
[h264 @ 0x561601ce9640] mmco: unref short failure
[h264 @ 0x55c8d03188c0] mmco: unref short failure
[h264 @ 0x55c8d03188c0] mmco: unref short failure
[h264 @ 0x55c8cffae780] mmco: unref short failure
 10%|█         | 160/1556 [41:02<11:51:29, 30.58s/it] 10%|█         | 161/1556 [41:09<9:07:34, 23.55s/it]  10%|█         | 162/1556 [41:15<7:03:44, 18.24s/it] 10%|█         | 163/1556 [41:20<5:33:03, 14.35s/it] 11%|█         | 164/1556 [41:26<4:29:48, 11.63s/it] 11%|█         | 165/1556 [41:32<3:52:39, 10.04s/it] 11%|█         | 166/1556 [41:37<3:19:01,  8.59s/it][h264 @ 0x55e4713a3380] mmco: unref short failure
 11%|█         | 167/1556 [41:43<2:57:29,  7.67s/it][h264 @ 0x55c8c35c4d40] mmco: unref short failure
[h264 @ 0x55c8c35c4d40] mmco: unref short failure
[h264 @ 0x56493d894500] mmco: unref short failure
[h264 @ 0x56493d894500] mmco: unref short failure
[h264 @ 0x56492c371e00] mmco: unref short failure
[h264 @ 0x55c8c3a7f080] mmco: unref short failure
[h264 @ 0x55c8c3a7f080] mmco: unref short failure
[h264 @ 0x5615fa9496c0] mmco: unref short failure
[h264 @ 0x5615fa9496c0] mmco: unref short failure
[h264 @ 0x5615f9ba3cc0] mmco: unref short failure
[h264 @ 0x5615f9ba3cc0] mmco: unref short failure
[h264 @ 0x55e47fe841c0] mmco: unref short failure
[h264 @ 0x56492c72fe80] mmco: unref short failure
[h264 @ 0x56492c72fe80] mmco: unref short failure
[h264 @ 0x55c8c3673400] mmco: unref short failure
[h264 @ 0x55c8c3673400] mmco: unref short failure
[h264 @ 0x55e4743a4780] mmco: unref short failure
[h264 @ 0x56492d9d2080] mmco: unref short failure
[h264 @ 0x56492d9d2080] mmco: unref short failure
 11%|█         | 168/1556 [43:20<13:17:28, 34.47s/it][h264 @ 0x55e472692ac0] mmco: unref short failure
[h264 @ 0x55e472692ac0] mmco: unref short failure
 11%|█         | 169/1556 [43:26<9:59:40, 25.94s/it]  11%|█         | 170/1556 [43:31<7:37:46, 19.82s/it] 11%|█         | 171/1556 [43:36<5:54:13, 15.35s/it][h264 @ 0x5615fc324180] mmco: unref short failure
 11%|█         | 172/1556 [43:42<4:49:45, 12.56s/it][h264 @ 0x55e47e820640] mmco: unref short failure
[h264 @ 0x55e47e820640] mmco: unref short failure
 11%|█         | 173/1556 [43:48<4:00:14, 10.42s/it][h264 @ 0x56160e74ce00] mmco: unref short failure
[h264 @ 0x56160e74ce00] mmco: unref short failure
[h264 @ 0x55e473768880] mmco: unref short failure
 11%|█         | 174/1556 [43:53<3:28:56,  9.07s/it] 11%|█         | 175/1556 [44:00<3:12:10,  8.35s/it][h264 @ 0x55e4837408c0] mmco: unref short failure
[h264 @ 0x55c8ce92c4c0] mmco: unref short failure
[h264 @ 0x561604206880] mmco: unref short failure
[h264 @ 0x55c8c8dcb280] mmco: unref short failure
[h264 @ 0x55c8c8dcb280] mmco: unref short failure
[h264 @ 0x55c8c11bd680] mmco: unref short failure
[h264 @ 0x55c8c11bd680] mmco: unref short failure
[h264 @ 0x55e475f595c0] mmco: unref short failure
[h264 @ 0x55e475f595c0] mmco: unref short failure
[h264 @ 0x564935343640] mmco: unref short failure
[h264 @ 0x564935343640] mmco: unref short failure
[h264 @ 0x564935343640] mmco: unref short failure
[h264 @ 0x564935343640] mmco: unref short failure
[h264 @ 0x55c8d382ef00] mmco: unref short failure
[h264 @ 0x55c8d382ef00] mmco: unref short failure
[h264 @ 0x55c8d3b836c0] mmco: unref short failure
[h264 @ 0x55c8d3b836c0] mmco: unref short failure
[h264 @ 0x56492c40ea40] mmco: unref short failure
[h264 @ 0x56492c40ea40] mmco: unref short failure
[h264 @ 0x55c8c8ebdc40] mmco: unref short failure
[h264 @ 0x55c8c8ebdc40] mmco: unref short failure
 11%|█▏        | 176/1556 [45:23<11:44:58, 30.65s/it] 11%|█▏        | 177/1556 [45:30<9:00:24, 23.51s/it] [h264 @ 0x56160242e0c0] mmco: unref short failure
[h264 @ 0x56160242e0c0] mmco: unref short failure
 11%|█▏        | 178/1556 [45:34<6:48:45, 17.80s/it] 12%|█▏        | 179/1556 [45:39<5:20:24, 13.96s/it][h264 @ 0x561600cb7a40] mmco: unref short failure
 12%|█▏        | 180/1556 [45:45<4:23:43, 11.50s/it] 12%|█▏        | 181/1556 [45:51<3:43:03,  9.73s/it][h264 @ 0x55e486086880] mmco: unref short failure
[h264 @ 0x55e486086880] mmco: unref short failure
[h264 @ 0x55e47171e2c0] mmco: unref short failure
 12%|█▏        | 182/1556 [45:57<3:17:21,  8.62s/it] 12%|█▏        | 183/1556 [46:03<2:59:09,  7.83s/it][h264 @ 0x56493d89ea00] mmco: unref short failure
[h264 @ 0x5615fa95a080] mmco: unref short failure
[h264 @ 0x5615fb060200] mmco: unref short failure
[h264 @ 0x5615fb060200] mmco: unref short failure
[h264 @ 0x56492c3a6440] mmco: unref short failure
[h264 @ 0x56492c3a6440] mmco: unref short failure
[h264 @ 0x5615fff13380] mmco: unref short failure
[h264 @ 0x55e472e5e380] mmco: unref short failure
[h264 @ 0x55c8d1960180] mmco: unref short failure
[h264 @ 0x55c8d1960180] mmco: unref short failure
[h264 @ 0x55e4742bbc40] mmco: unref short failure
[h264 @ 0x55e4742bbc40] mmco: unref short failure
 12%|█▏        | 184/1556 [47:30<12:08:35, 31.86s/it] 12%|█▏        | 185/1556 [47:36<9:06:59, 23.94s/it] [h264 @ 0x55e47642cb00] mmco: unref short failure
 12%|█▏        | 186/1556 [47:42<7:03:12, 18.53s/it][h264 @ 0x564930122580] mmco: unref short failure
 12%|█▏        | 187/1556 [47:48<5:36:34, 14.75s/it][h264 @ 0x55c8c885e480] mmco: unref short failure
 12%|█▏        | 188/1556 [47:53<4:29:13, 11.81s/it] 12%|█▏        | 189/1556 [47:57<3:39:21,  9.63s/it] 12%|█▏        | 190/1556 [48:02<3:07:39,  8.24s/it] 12%|█▏        | 191/1556 [48:07<2:44:17,  7.22s/it][h264 @ 0x5615fc6a5300] mmco: unref short failure
[h264 @ 0x5615fc6a5300] mmco: unref short failure
[h264 @ 0x56492c6b0b40] mmco: unref short failure
[h264 @ 0x56493f3e54c0] mmco: unref short failure
[h264 @ 0x56493f3e54c0] mmco: unref short failure
[h264 @ 0x5615faeea1c0] mmco: unref short failure
[h264 @ 0x5615fb060680] mmco: unref short failure
[h264 @ 0x56493788d480] mmco: unref short failure
[h264 @ 0x561607e39fc0] mmco: unref short failure
[h264 @ 0x55e47e97dbc0] mmco: unref short failure
[h264 @ 0x55e47d1b2980] mmco: unref short failure
[h264 @ 0x56160bf61b00] mmco: unref short failure
[h264 @ 0x561601038d40] mmco: unref short failure
[h264 @ 0x561601038d40] mmco: unref short failure
[h264 @ 0x55e473455b00] mmco: unref short failure
[h264 @ 0x55e473455b00] mmco: unref short failure
 12%|█▏        | 192/1556 [49:43<12:50:09, 33.88s/it][h264 @ 0x55c8c1270e40] mmco: unref short failure
 12%|█▏        | 193/1556 [49:49<9:39:05, 25.49s/it] [h264 @ 0x55e475ba5440] mmco: unref short failure
[h264 @ 0x55e475ba5440] mmco: unref short failure
 12%|█▏        | 194/1556 [49:55<7:27:34, 19.72s/it] 13%|█▎        | 195/1556 [50:01<5:52:52, 15.56s/it][h264 @ 0x56492facb840] mmco: unref short failure
[h264 @ 0x56160e7246c0] mmco: unref short failure
 13%|█▎        | 196/1556 [50:07<4:45:05, 12.58s/it] 13%|█▎        | 197/1556 [50:12<3:54:12, 10.34s/it] 13%|█▎        | 198/1556 [50:18<3:22:10,  8.93s/it] 13%|█▎        | 199/1556 [50:24<3:03:34,  8.12s/it][h264 @ 0x55c8c1c04c00] mmco: unref short failure
[h264 @ 0x55c8c1c04c00] mmco: unref short failure
[h264 @ 0x55c8c2c6b180] mmco: unref short failure
[h264 @ 0x55e482975040] mmco: unref short failure
[h264 @ 0x55e482975040] mmco: unref short failure
[h264 @ 0x55e482975040] mmco: unref short failure
[h264 @ 0x55e482975040] mmco: unref short failure
[h264 @ 0x55e482975040] mmco: unref short failure
[h264 @ 0x55e482975040] mmco: unref short failure
[h264 @ 0x55e482975040] mmco: unref short failure
[h264 @ 0x55e482975040] mmco: unref short failure
[h264 @ 0x55e482975040] mmco: unref short failure
[h264 @ 0x55e482975040] mmco: unref short failure
[h264 @ 0x5616068300c0] mmco: unref short failure
[h264 @ 0x55c8c954af80] mmco: unref short failure
[h264 @ 0x561603ce7180] mmco: unref short failure
[h264 @ 0x55c8c1796280] mmco: unref short failure
[h264 @ 0x55c8cb6ea740] mmco: unref short failure
[h264 @ 0x561603ce7600] mmco: unref short failure
[h264 @ 0x55c8c55fe080] mmco: unref short failure
[h264 @ 0x55c8c5e93100] mmco: unref short failure
09/06/2024 20:27:18 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.8194057941436768, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.052286237478256226, 'loss_ret%tv%ta--finetune_area/loss_area': 3.553373098373413, 'loss_ret%tv%ta--finetune_area/total_loss': 7.425065040588379}
 13%|█▎        | 200/1556 [51:44<11:12:33, 29.76s/it][h264 @ 0x564938c5c980] mmco: unref short failure
 13%|█▎        | 201/1556 [51:50<8:29:10, 22.55s/it]  13%|█▎        | 202/1556 [51:55<6:31:52, 17.37s/it] 13%|█▎        | 203/1556 [52:02<5:18:11, 14.11s/it] 13%|█▎        | 204/1556 [52:07<4:17:29, 11.43s/it] 13%|█▎        | 205/1556 [52:12<3:33:40,  9.49s/it][h264 @ 0x564934c1aa00] mmco: unref short failure
[h264 @ 0x564934c1aa00] mmco: unref short failure
[h264 @ 0x55e47105bd40] mmco: unref short failure
[h264 @ 0x55e47105bd40] mmco: unref short failure
[h264 @ 0x55e47cc92680] mmco: unref short failure
[h264 @ 0x56493a14bd80] mmco: unref short failure
 13%|█▎        | 206/1556 [52:17<3:07:27,  8.33s/it] 13%|█▎        | 207/1556 [52:23<2:46:31,  7.41s/it][h264 @ 0x56493b939cc0] mmco: unref short failure
[h264 @ 0x55e46fedf0c0] mmco: unref short failure
[h264 @ 0x56492fbbba80] mmco: unref short failure
[h264 @ 0x56492fbbba80] mmco: unref short failure
[h264 @ 0x55e47ad63e80] mmco: unref short failure
[h264 @ 0x55e47ad63e80] mmco: unref short failure
[h264 @ 0x55e474b57540] mmco: unref short failure
[h264 @ 0x561601f26440] mmco: unref short failure
[h264 @ 0x561601f26440] mmco: unref short failure
[h264 @ 0x55c8cf8d0f40] mmco: unref short failure
[h264 @ 0x55c8cf8d0f40] mmco: unref short failure
[h264 @ 0x55c8cbb92a40] mmco: unref short failure
[h264 @ 0x56160ceb0980] mmco: unref short failure
[h264 @ 0x56160ceb0980] mmco: unref short failure
[h264 @ 0x55c8c1b76640] mmco: unref short failure
[h264 @ 0x55c8c1b76640] mmco: unref short failure
 13%|█▎        | 208/1556 [53:48<11:32:59, 30.85s/it][h264 @ 0x55e485091380] mmco: unref short failure
[h264 @ 0x55e485091380] mmco: unref short failure
[h264 @ 0x55e47e3ded40] mmco: unref short failure
[h264 @ 0x55e47e3ded40] mmco: unref short failure
 13%|█▎        | 209/1556 [53:52<8:33:38, 22.88s/it]  13%|█▎        | 210/1556 [53:57<6:30:52, 17.42s/it][h264 @ 0x5615fe3739c0] mmco: unref short failure
[h264 @ 0x55c8d326d9c0] mmco: unref short failure
[h264 @ 0x55c8d326d9c0] mmco: unref short failure
[h264 @ 0x55c8d326d9c0] mmco: unref short failure
[h264 @ 0x55c8d326d9c0] mmco: unref short failure
 14%|█▎        | 211/1556 [54:04<5:20:23, 14.29s/it][h264 @ 0x55e4759efe80] mmco: unref short failure
[h264 @ 0x55e4759efe80] mmco: unref short failure
 14%|█▎        | 212/1556 [54:09<4:15:40, 11.41s/it][h264 @ 0x56492b499980] mmco: unref short failure
[h264 @ 0x56492b499980] mmco: unref short failure
 14%|█▎        | 213/1556 [54:14<3:32:15,  9.48s/it] 14%|█▍        | 214/1556 [54:19<3:03:23,  8.20s/it][h264 @ 0x55e4734000c0] mmco: unref short failure
 14%|█▍        | 215/1556 [54:24<2:44:37,  7.37s/it][h264 @ 0x55c8c0d1e500] mmco: unref short failure
[h264 @ 0x55e47aff4400] mmco: unref short failure
[h264 @ 0x55e47aff4400] mmco: unref short failure
[h264 @ 0x55c8c4274fc0] mmco: unref short failure
[h264 @ 0x55c8c4274fc0] mmco: unref short failure
[h264 @ 0x55e4766b0440] mmco: unref short failure
[h264 @ 0x55e4766b0440] mmco: unref short failure
[h264 @ 0x564941635300] mmco: unref short failure
[h264 @ 0x564941635300] mmco: unref short failure
[h264 @ 0x564941635300] mmco: unref short failure
[h264 @ 0x564941635300] mmco: unref short failure
[h264 @ 0x564941635300] mmco: unref short failure
[h264 @ 0x564941635300] mmco: unref short failure
[h264 @ 0x56493a696d80] mmco: unref short failure
[h264 @ 0x55c8d2cb5940] mmco: unref short failure
[h264 @ 0x55c8d2cb5940] mmco: unref short failure
[h264 @ 0x55e47f59db00] mmco: unref short failure
 14%|█▍        | 216/1556 [56:00<12:38:02, 33.94s/it] 14%|█▍        | 217/1556 [56:06<9:25:53, 25.36s/it]  14%|█▍        | 218/1556 [56:11<7:08:26, 19.21s/it][h264 @ 0x55e47aecb700] mmco: unref short failure
[h264 @ 0x55e47aecb700] mmco: unref short failure
 14%|█▍        | 219/1556 [56:15<5:29:42, 14.80s/it][h264 @ 0x56160bf61b00] mmco: unref short failure
[h264 @ 0x56160ba5c9c0] mmco: unref short failure
[h264 @ 0x56160ba5c9c0] mmco: unref short failure
 14%|█▍        | 220/1556 [56:20<4:24:04, 11.86s/it][h264 @ 0x55c8cb2befc0] mmco: unref short failure
 14%|█▍        | 221/1556 [56:25<3:37:25,  9.77s/it][h264 @ 0x55e47135e440] mmco: unref short failure
 14%|█▍        | 222/1556 [56:30<3:03:27,  8.25s/it] 14%|█▍        | 223/1556 [56:35<2:45:10,  7.43s/it][h264 @ 0x55e478c021c0] mmco: unref short failure
[h264 @ 0x5615fec40040] mmco: unref short failure
[h264 @ 0x564936f1e4c0] mmco: unref short failure
[h264 @ 0x564936f1e4c0] mmco: unref short failure
[h264 @ 0x561612dc3100] mmco: unref short failure
[h264 @ 0x55c8cc17a0c0] mmco: unref short failure
[h264 @ 0x55c8cc17a0c0] mmco: unref short failure
[h264 @ 0x55c8c5991a80] mmco: unref short failure
[h264 @ 0x56493e2f3c80] mmco: unref short failure
[h264 @ 0x56493e2f3c80] mmco: unref short failure
[h264 @ 0x561604003e40] mmco: unref short failure
[h264 @ 0x561604003e40] mmco: unref short failure
[h264 @ 0x56492bed9c40] mmco: unref short failure
[h264 @ 0x56492bed9c40] mmco: unref short failure
[h264 @ 0x55e47f57a5c0] mmco: unref short failure
not have audios ua_Kowav7hg.20
[h264 @ 0x55c8c3e1c1c0] mmco: unref short failure
[h264 @ 0x56492c507a40] mmco: unref short failure
[h264 @ 0x55c8d4c72fc0] mmco: unref short failure
[h264 @ 0x55c8d4c72fc0] mmco: unref short failure
[h264 @ 0x55c8d4c72fc0] mmco: unref short failure
[h264 @ 0x55c8d4c72fc0] mmco: unref short failure
 14%|█▍        | 224/1556 [58:05<11:51:36, 32.05s/it][h264 @ 0x55c8c7ee4e00] mmco: unref short failure
[h264 @ 0x55e47a763d40] mmco: unref short failure
 14%|█▍        | 225/1556 [58:11<8:59:08, 24.30s/it] [h264 @ 0x56493b76b800] mmco: unref short failure
[h264 @ 0x56493b76b800] mmco: unref short failure
 15%|█▍        | 226/1556 [58:17<6:56:52, 18.81s/it] 15%|█▍        | 227/1556 [58:22<5:22:28, 14.56s/it][h264 @ 0x56492e628580] mmco: unref short failure
 15%|█▍        | 228/1556 [58:27<4:20:13, 11.76s/it] 15%|█▍        | 229/1556 [58:32<3:35:23,  9.74s/it][h264 @ 0x56160682fec0] mmco: unref short failure
[h264 @ 0x56160682fec0] mmco: unref short failure
[h264 @ 0x56160682fec0] mmco: unref short failure
[h264 @ 0x56160682fec0] mmco: unref short failure
[h264 @ 0x56160682fec0] mmco: unref short failure
[h264 @ 0x56160682fec0] mmco: unref short failure
 15%|█▍        | 230/1556 [58:38<3:10:36,  8.63s/it] 15%|█▍        | 231/1556 [58:44<2:51:43,  7.78s/it][h264 @ 0x5615fa870140] mmco: unref short failure
[h264 @ 0x5615fa870140] mmco: unref short failure
[h264 @ 0x55e47101d0c0] mmco: unref short failure
[h264 @ 0x55e47101d0c0] mmco: unref short failure
[h264 @ 0x55e47101d0c0] mmco: unref short failure
[h264 @ 0x55e47101d0c0] mmco: unref short failure
[h264 @ 0x55e47e823280] mmco: unref short failure
[h264 @ 0x56493fbae900] mmco: unref short failure
[h264 @ 0x56493fbae900] mmco: unref short failure
[h264 @ 0x55c8d51bbe80] mmco: unref short failure
[h264 @ 0x55e47f57a7c0] mmco: unref short failure
[h264 @ 0x55e47f57a7c0] mmco: unref short failure
[h264 @ 0x55e471392e40] mmco: unref short failure
[h264 @ 0x55e471392e40] mmco: unref short failure
[h264 @ 0x5615fc509bc0] mmco: unref short failure
[h264 @ 0x55e476654440] mmco: unref short failure
[h264 @ 0x55c8d6a43240] mmco: unref short failure
[h264 @ 0x55c8d6a43240] mmco: unref short failure
[h264 @ 0x56492fbfb400] mmco: unref short failure
[h264 @ 0x56492fbfb400] mmco: unref short failure
[h264 @ 0x56160f8ad780] mmco: unref short failure
 15%|█▍        | 232/1556 [1:00:08<11:20:35, 30.84s/it][h264 @ 0x564936f1e740] mmco: unref short failure
[h264 @ 0x55e4873268c0] mmco: unref short failure
[h264 @ 0x55e4873268c0] mmco: unref short failure
 15%|█▍        | 233/1556 [1:00:14<8:31:02, 23.18s/it]  15%|█▌        | 234/1556 [1:00:20<6:41:02, 18.20s/it][h264 @ 0x55e47b9df280] mmco: unref short failure
 15%|█▌        | 235/1556 [1:00:26<5:15:54, 14.35s/it] 15%|█▌        | 236/1556 [1:00:31<4:15:45, 11.63s/it] 15%|█▌        | 237/1556 [1:00:37<3:36:55,  9.87s/it][h264 @ 0x55c8c3c5b100] mmco: unref short failure
 15%|█▌        | 238/1556 [1:00:42<3:07:04,  8.52s/it][h264 @ 0x56493440efc0] mmco: unref short failure
 15%|█▌        | 239/1556 [1:00:48<2:48:18,  7.67s/it][h264 @ 0x5649399ce980] mmco: unref short failure
[h264 @ 0x561612dc3380] mmco: unref short failure
[h264 @ 0x561607929e00] mmco: unref short failure
[h264 @ 0x561607929e00] mmco: unref short failure
[h264 @ 0x561607929e00] mmco: unref short failure
[h264 @ 0x561607929e00] mmco: unref short failure
[h264 @ 0x55c8cef95dc0] mmco: unref short failure
[h264 @ 0x55e47cffbf00] mmco: unref short failure
[h264 @ 0x55e47cffbf00] mmco: unref short failure
[h264 @ 0x55e47c2155c0] mmco: unref short failure
[h264 @ 0x55e47c2155c0] mmco: unref short failure
[h264 @ 0x56160ec3f680] mmco: unref short failure
[h264 @ 0x55c8d1115a80] mmco: unref short failure
[h264 @ 0x55c8d1115a80] mmco: unref short failure
[h264 @ 0x56493e38d040] mmco: unref short failure
[h264 @ 0x56493e38d040] mmco: unref short failure
 15%|█▌        | 240/1556 [1:02:09<10:56:11, 29.92s/it] 15%|█▌        | 241/1556 [1:02:15<8:17:10, 22.69s/it]  16%|█▌        | 242/1556 [1:02:22<6:30:36, 17.84s/it][h264 @ 0x55c8c2e8b180] mmco: unref short failure
[h264 @ 0x55c8c2e8b180] mmco: unref short failure
 16%|█▌        | 243/1556 [1:02:29<5:20:39, 14.65s/it] 16%|█▌        | 244/1556 [1:02:35<4:20:44, 11.92s/it] 16%|█▌        | 245/1556 [1:02:41<3:43:15, 10.22s/it] 16%|█▌        | 246/1556 [1:02:47<3:19:42,  9.15s/it] 16%|█▌        | 247/1556 [1:02:53<2:55:24,  8.04s/it][h264 @ 0x561608f23640] mmco: unref short failure
[h264 @ 0x56493ef2bbc0] mmco: unref short failure
[h264 @ 0x55e4826d1680] mmco: unref short failure
[h264 @ 0x55e4826d1680] mmco: unref short failure
[h264 @ 0x55e476c77200] mmco: unref short failure
[h264 @ 0x55e476c77200] mmco: unref short failure
[h264 @ 0x55e4760af640] mmco: unref short failure
[h264 @ 0x55c8c9f75000] mmco: unref short failure
[h264 @ 0x55e474a6e600] mmco: unref short failure
[h264 @ 0x55e474a6e600] mmco: unref short failure
[h264 @ 0x561601ce9440] mmco: unref short failure
[h264 @ 0x5649357e3980] mmco: unref short failure
[h264 @ 0x5649357e3980] mmco: unref short failure
[h264 @ 0x56160b9f5440] mmco: unref short failure
[h264 @ 0x56160b9f5440] mmco: unref short failure
[h264 @ 0x55e476975c40] mmco: unref short failure
[h264 @ 0x55e476975c40] mmco: unref short failure
[h264 @ 0x56492eede940] mmco: unref short failure
 16%|█▌        | 248/1556 [1:04:27<12:18:53, 33.89s/it] 16%|█▌        | 249/1556 [1:04:32<9:07:03, 25.11s/it] [h264 @ 0x55e47adcae00] mmco: unref short failure
[h264 @ 0x55e47adcae00] mmco: unref short failure
09/06/2024 20:40:13 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.4209372997283936, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.0471600741147995, 'loss_ret%tv%ta--finetune_area/loss_area': 3.092557907104492, 'loss_ret%tv%ta--finetune_area/total_loss': 6.56065559387207}
[h264 @ 0x55c8c9ada4c0] mmco: unref short failure
[h264 @ 0x55c8c9ada4c0] mmco: unref short failure
 16%|█▌        | 250/1556 [1:04:38<7:01:33, 19.37s/it] 16%|█▌        | 251/1556 [1:04:43<5:29:42, 15.16s/it] 16%|█▌        | 252/1556 [1:04:47<4:18:08, 11.88s/it][h264 @ 0x564942712900] mmco: unref short failure
[h264 @ 0x564942712900] mmco: unref short failure
 16%|█▋        | 253/1556 [1:04:52<3:31:47,  9.75s/it] 16%|█▋        | 254/1556 [1:04:57<2:59:04,  8.25s/it][h264 @ 0x5649349f9e00] mmco: unref short failure
 16%|█▋        | 255/1556 [1:05:03<2:43:59,  7.56s/it][h264 @ 0x55e474a6e600] mmco: unref short failure
[h264 @ 0x561600ef1480] mmco: unref short failure
[h264 @ 0x55e471392e40] mmco: unref short failure
[h264 @ 0x55e47888aa40] mmco: unref short failure
[h264 @ 0x55e47888aa40] mmco: unref short failure
[h264 @ 0x55c8cfcf2040] mmco: unref short failure
[h264 @ 0x55c8cfcf2040] mmco: unref short failure
[h264 @ 0x56492d524140] mmco: unref short failure
[h264 @ 0x56492d524140] mmco: unref short failure
[h264 @ 0x55e484ec2400] mmco: unref short failure
[h264 @ 0x55e484ec2400] mmco: unref short failure
[h264 @ 0x55e485907c00] mmco: unref short failure
 16%|█▋        | 256/1556 [1:06:27<11:02:36, 30.58s/it] 17%|█▋        | 257/1556 [1:06:32<8:15:30, 22.89s/it] [h264 @ 0x5615fa8fa100] mmco: unref short failure
[h264 @ 0x5615fa8fa100] mmco: unref short failure
 17%|█▋        | 258/1556 [1:06:38<6:27:14, 17.90s/it] 17%|█▋        | 259/1556 [1:06:46<5:19:36, 14.79s/it] 17%|█▋        | 260/1556 [1:06:51<4:17:28, 11.92s/it] 17%|█▋        | 261/1556 [1:06:56<3:33:56,  9.91s/it] 17%|█▋        | 262/1556 [1:07:01<3:02:12,  8.45s/it] 17%|█▋        | 263/1556 [1:07:06<2:40:23,  7.44s/it][h264 @ 0x56160177e1c0] mmco: unref short failure
[h264 @ 0x56160177e1c0] mmco: unref short failure
[h264 @ 0x55e47946df80] mmco: unref short failure
[h264 @ 0x55c8c8d8ed40] mmco: unref short failure
[h264 @ 0x56160a746a00] mmco: unref short failure
[h264 @ 0x56160a746a00] mmco: unref short failure
[h264 @ 0x55e4887e9200] mmco: unref short failure
[h264 @ 0x55c8d2628d00] mmco: unref short failure
[h264 @ 0x55c8d2628d00] mmco: unref short failure
[h264 @ 0x5615fb30a3c0] mmco: unref short failure
[h264 @ 0x5615fb30a3c0] mmco: unref short failure
[h264 @ 0x56493e98e3c0] mmco: unref short failure
[h264 @ 0x55c8c505bc40] mmco: unref short failure
[h264 @ 0x56160f4d3080] mmco: unref short failure
[h264 @ 0x56160f4d3080] mmco: unref short failure
[h264 @ 0x56493001fdc0] mmco: unref short failure
 17%|█▋        | 264/1556 [1:08:41<12:05:07, 33.67s/it][h264 @ 0x5615fd7f4580] mmco: unref short failure
 17%|█▋        | 265/1556 [1:08:46<8:56:17, 24.92s/it]  17%|█▋        | 266/1556 [1:08:52<6:53:03, 19.21s/it] 17%|█▋        | 267/1556 [1:08:57<5:23:56, 15.08s/it] 17%|█▋        | 268/1556 [1:09:01<4:12:20, 11.75s/it] 17%|█▋        | 269/1556 [1:09:06<3:29:59,  9.79s/it] 17%|█▋        | 270/1556 [1:09:11<2:58:33,  8.33s/it] 17%|█▋        | 271/1556 [1:09:16<2:37:03,  7.33s/it][h264 @ 0x56492d0fe2c0] mmco: unref short failure
[h264 @ 0x56492d524140] mmco: unref short failure
[h264 @ 0x56492d524140] mmco: unref short failure
[h264 @ 0x56492f9185c0] mmco: unref short failure
[h264 @ 0x5615fb69c000] mmco: unref short failure
[h264 @ 0x55c8c0e53400] mmco: unref short failure
[h264 @ 0x55c8c0e53400] mmco: unref short failure
[h264 @ 0x56160abb6dc0] mmco: unref short failure
[h264 @ 0x56493b345ec0] mmco: unref short failure
[h264 @ 0x56493b345ec0] mmco: unref short failure
[h264 @ 0x56492ca1b2c0] mmco: unref short failure
[h264 @ 0x56492ca1b2c0] mmco: unref short failure
[h264 @ 0x55c8c39d1f40] mmco: unref short failure
[h264 @ 0x55c8c39d1f40] mmco: unref short failure
[h264 @ 0x56493003cf80] mmco: unref short failure
[h264 @ 0x55e470f87ac0] mmco: unref short failure
[h264 @ 0x55c8c9c0e7c0] mmco: unref short failure
[h264 @ 0x56160c7b2000] mmco: unref short failure
[h264 @ 0x56160c7b2000] mmco: unref short failure
[h264 @ 0x5616058eeac0] mmco: unref short failure
[h264 @ 0x5616058eeac0] mmco: unref short failure
[h264 @ 0x56493d561e00] mmco: unref short failure
[h264 @ 0x561607e3a400] mmco: unref short failure
 17%|█▋        | 272/1556 [1:10:50<11:49:12, 33.14s/it] 18%|█▊        | 273/1556 [1:10:55<8:48:34, 24.72s/it]  18%|█▊        | 274/1556 [1:11:00<6:44:28, 18.93s/it][h264 @ 0x5616120b5940] mmco: unref short failure
[h264 @ 0x5616120b5940] mmco: unref short failure
 18%|█▊        | 275/1556 [1:11:05<5:17:35, 14.88s/it][h264 @ 0x56493f293340] mmco: unref short failure
[h264 @ 0x55c8cd447580] mmco: unref short failure
[h264 @ 0x55c8cd447580] mmco: unref short failure
 18%|█▊        | 276/1556 [1:11:10<4:13:41, 11.89s/it][h264 @ 0x5615fe19a3c0] mmco: unref short failure
[h264 @ 0x5615fe19a3c0] mmco: unref short failure
 18%|█▊        | 277/1556 [1:11:16<3:30:39,  9.88s/it] 18%|█▊        | 278/1556 [1:11:21<3:00:02,  8.45s/it][h264 @ 0x5649311e3800] mmco: unref short failure
 18%|█▊        | 279/1556 [1:11:27<2:44:30,  7.73s/it][h264 @ 0x56160945db40] mmco: unref short failure
[h264 @ 0x56160945db40] mmco: unref short failure
[h264 @ 0x56160c380f40] mmco: unref short failure
[h264 @ 0x56493f3e5e00] mmco: unref short failure
[h264 @ 0x56493f3e5e00] mmco: unref short failure
[h264 @ 0x56493f3e5e00] mmco: unref short failure
[h264 @ 0x56493f3e5e00] mmco: unref short failure
[h264 @ 0x56493f3e5e00] mmco: unref short failure
[h264 @ 0x56493f3e5e00] mmco: unref short failure
[h264 @ 0x56493a9f9380] mmco: unref short failure
[h264 @ 0x561608bf1f00] mmco: unref short failure
 18%|█▊        | 280/1556 [1:12:53<11:02:51, 31.17s/it] 18%|█▊        | 281/1556 [1:12:58<8:16:08, 23.35s/it]  18%|█▊        | 282/1556 [1:13:04<6:24:41, 18.12s/it] 18%|█▊        | 283/1556 [1:13:09<5:01:43, 14.22s/it][h264 @ 0x55c8c4ba8400] mmco: unref short failure
 18%|█▊        | 284/1556 [1:13:14<4:04:49, 11.55s/it] 18%|█▊        | 285/1556 [1:13:20<3:27:25,  9.79s/it] 18%|█▊        | 286/1556 [1:13:26<3:05:36,  8.77s/it][h264 @ 0x56160460f880] mmco: unref short failure
 18%|█▊        | 287/1556 [1:13:31<2:43:47,  7.74s/it][h264 @ 0x56160945db80] mmco: unref short failure
[h264 @ 0x56160945db80] mmco: unref short failure
[h264 @ 0x56492f0bf140] mmco: unref short failure
[h264 @ 0x56492f0bf140] mmco: unref short failure
[h264 @ 0x55e47a0f9140] mmco: unref short failure
[h264 @ 0x55c8c98ec840] mmco: unref short failure
[h264 @ 0x55c8c98ec840] mmco: unref short failure
[h264 @ 0x5649302b0c40] mmco: unref short failure
 19%|█▊        | 288/1556 [1:14:53<10:32:25, 29.93s/it] 19%|█▊        | 289/1556 [1:14:59<7:58:34, 22.66s/it] [h264 @ 0x561608bf1f00] mmco: unref short failure
 19%|█▊        | 290/1556 [1:15:05<6:14:08, 17.73s/it] 19%|█▊        | 291/1556 [1:15:11<4:56:56, 14.08s/it][h264 @ 0x561610970180] mmco: unref short failure
[h264 @ 0x561610970180] mmco: unref short failure
 19%|█▉        | 292/1556 [1:15:17<4:10:01, 11.87s/it] 19%|█▉        | 293/1556 [1:15:22<3:26:59,  9.83s/it] 19%|█▉        | 294/1556 [1:15:28<3:01:38,  8.64s/it][h264 @ 0x56493d99b1c0] mmco: unref short failure
 19%|█▉        | 295/1556 [1:15:34<2:42:57,  7.75s/it][h264 @ 0x55c8c5dd3500] mmco: unref short failure
[h264 @ 0x564935b98780] mmco: unref short failure
[h264 @ 0x564935b98780] mmco: unref short failure
[h264 @ 0x55c8c47b05c0] mmco: unref short failure
[h264 @ 0x55e47c4a6fc0] mmco: unref short failure
[h264 @ 0x55c8d32ed9c0] mmco: unref short failure
[h264 @ 0x5616062da280] mmco: unref short failure
[h264 @ 0x5616062da280] mmco: unref short failure
[h264 @ 0x5616062da280] mmco: unref short failure
[h264 @ 0x5616062da280] mmco: unref short failure
[h264 @ 0x55e483c8a140] mmco: unref short failure
[h264 @ 0x55e483c8a140] mmco: unref short failure
[h264 @ 0x561602e22040] mmco: unref short failure
[h264 @ 0x56160067fdc0] mmco: unref short failure
[h264 @ 0x56160067fdc0] mmco: unref short failure
[h264 @ 0x55c8c0f56940] mmco: unref short failure
[h264 @ 0x564939e72f40] mmco: unref short failure
[h264 @ 0x55c8d1975700] mmco: unref short failure
[h264 @ 0x5615fd7b7680] mmco: unref short failure
 19%|█▉        | 296/1556 [1:17:03<11:13:03, 32.05s/it] 19%|█▉        | 297/1556 [1:17:07<8:18:33, 23.76s/it]  19%|█▉        | 298/1556 [1:17:13<6:24:45, 18.35s/it] 19%|█▉        | 299/1556 [1:17:18<5:01:47, 14.41s/it]09/06/2024 20:52:57 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/06/2024 20:52:57 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
[h264 @ 0x56493f9eeb80] mmco: unref short failure
[h264 @ 0x56493f9eeb80] mmco: unref short failure
[h264 @ 0x55c8c508fb40] mmco: unref short failure
[h264 @ 0x56492beec8c0] mmco: unref short failure
[h264 @ 0x56492beec8c0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:24,  9.11it/s][A
  1%|          | 2/221 [00:00<00:27,  8.06it/s][A
  1%|▏         | 3/221 [00:00<00:55,  3.91it/s][A
  2%|▏         | 5/221 [00:00<00:30,  7.09it/s][A
  4%|▎         | 8/221 [00:00<00:19, 11.10it/s][A
  5%|▍         | 10/221 [00:01<00:39,  5.33it/s][A
  5%|▌         | 12/221 [00:01<00:35,  5.90it/s][A
  6%|▌         | 13/221 [00:02<00:32,  6.33it/s][A
  6%|▋         | 14/221 [00:02<00:32,  6.47it/s][A
  7%|▋         | 15/221 [00:02<00:30,  6.67it/s][A
  7%|▋         | 16/221 [00:02<00:37,  5.45it/s][A
  8%|▊         | 17/221 [00:03<01:10,  2.89it/s][A
  8%|▊         | 18/221 [00:03<00:56,  3.57it/s][A
  9%|▊         | 19/221 [00:03<00:47,  4.24it/s][A
 10%|▉         | 21/221 [00:03<00:32,  6.17it/s][A
 10%|▉         | 22/221 [00:03<00:32,  6.22it/s][A
 11%|█         | 24/221 [00:04<00:23,  8.32it/s][A
 12%|█▏        | 26/221 [00:04<00:21,  8.98it/s][A
 13%|█▎        | 28/221 [00:04<00:35,  5.42it/s][A
 14%|█▎        | 30/221 [00:05<00:31,  6.07it/s][A
 14%|█▍        | 32/221 [00:05<00:26,  7.04it/s][A
 15%|█▌        | 34/221 [00:05<00:21,  8.54it/s][A
 16%|█▋        | 36/221 [00:05<00:28,  6.47it/s][A
 17%|█▋        | 37/221 [00:06<00:58,  3.15it/s][A
 18%|█▊        | 39/221 [00:07<00:45,  3.98it/s][A
 19%|█▊        | 41/221 [00:07<00:38,  4.70it/s][A
 19%|█▉        | 43/221 [00:07<00:30,  5.85it/s][A
 20%|█▉        | 44/221 [00:08<01:03,  2.78it/s][A
 20%|██        | 45/221 [00:09<00:56,  3.11it/s][A
 21%|██        | 46/221 [00:09<01:05,  2.67it/s][A
 22%|██▏       | 48/221 [00:09<00:43,  3.98it/s][A
 23%|██▎       | 50/221 [00:09<00:32,  5.29it/s][A
 24%|██▎       | 52/221 [00:09<00:24,  6.78it/s][A
 24%|██▍       | 54/221 [00:11<00:47,  3.48it/s][A
 25%|██▌       | 56/221 [00:11<00:37,  4.34it/s][A
 26%|██▌       | 58/221 [00:11<00:28,  5.73it/s][A
 27%|██▋       | 60/221 [00:12<00:54,  2.93it/s][A
 28%|██▊       | 61/221 [00:13<00:56,  2.85it/s][A
 29%|██▊       | 63/221 [00:14<01:03,  2.47it/s][A
 29%|██▉       | 65/221 [00:15<01:17,  2.02it/s][A
 30%|███       | 67/221 [00:15<00:55,  2.77it/s][A
 31%|███       | 68/221 [00:16<01:06,  2.31it/s][A
 32%|███▏      | 70/221 [00:17<01:00,  2.50it/s][A
 32%|███▏      | 71/221 [00:17<00:57,  2.60it/s][A
 33%|███▎      | 72/221 [00:17<00:59,  2.51it/s][A
 33%|███▎      | 74/221 [00:18<00:46,  3.13it/s][A
 34%|███▍      | 76/221 [00:19<00:50,  2.90it/s][A
 35%|███▌      | 78/221 [00:19<00:44,  3.24it/s][A
 36%|███▌      | 80/221 [00:19<00:35,  4.03it/s][A
 37%|███▋      | 81/221 [00:20<00:36,  3.88it/s][A
 37%|███▋      | 82/221 [00:20<00:37,  3.74it/s][A
 38%|███▊      | 85/221 [00:20<00:22,  6.10it/s][A
 39%|███▉      | 86/221 [00:21<00:50,  2.69it/s][A
 39%|███▉      | 87/221 [00:22<00:59,  2.26it/s][A
 40%|███▉      | 88/221 [00:22<00:56,  2.36it/s][A
 40%|████      | 89/221 [00:23<00:52,  2.49it/s][A
 41%|████      | 90/221 [00:23<00:43,  3.00it/s][A
 41%|████      | 91/221 [00:23<00:38,  3.34it/s][A
 42%|████▏     | 92/221 [00:23<00:32,  3.95it/s][A
 42%|████▏     | 93/221 [00:23<00:28,  4.54it/s][A
 43%|████▎     | 94/221 [00:24<00:24,  5.19it/s][A
 43%|████▎     | 95/221 [00:26<01:36,  1.31it/s][A
 43%|████▎     | 96/221 [00:26<01:12,  1.72it/s][A
 44%|████▍     | 97/221 [00:27<01:26,  1.43it/s][A
 44%|████▍     | 98/221 [00:27<01:06,  1.86it/s][A
 45%|████▌     | 100/221 [00:28<01:06,  1.81it/s][A
 46%|████▌     | 102/221 [00:28<00:43,  2.73it/s][A
 47%|████▋     | 103/221 [00:29<00:44,  2.64it/s][A
 47%|████▋     | 104/221 [00:30<01:17,  1.51it/s][A
 48%|████▊     | 106/221 [00:30<00:49,  2.33it/s][A
 49%|████▉     | 109/221 [00:31<00:29,  3.74it/s][A
 50%|████▉     | 110/221 [00:31<00:27,  4.10it/s][A
 50%|█████     | 111/221 [00:31<00:28,  3.88it/s][A
 51%|█████     | 113/221 [00:31<00:20,  5.34it/s][A
 52%|█████▏    | 114/221 [00:32<00:29,  3.67it/s][A
 52%|█████▏    | 115/221 [00:32<00:31,  3.34it/s][A
 52%|█████▏    | 116/221 [00:32<00:27,  3.87it/s][A
 53%|█████▎    | 117/221 [00:33<00:25,  4.05it/s][A
 53%|█████▎    | 118/221 [00:33<00:21,  4.81it/s][A
 54%|█████▍    | 120/221 [00:33<00:15,  6.61it/s][A
 55%|█████▍    | 121/221 [00:33<00:14,  6.80it/s][A
 56%|█████▌    | 123/221 [00:33<00:16,  6.06it/s][A
 56%|█████▌    | 124/221 [00:34<00:14,  6.53it/s][A
 57%|█████▋    | 125/221 [00:34<00:29,  3.30it/s][A
 57%|█████▋    | 126/221 [00:35<00:27,  3.46it/s][A
 58%|█████▊    | 129/221 [00:35<00:15,  6.06it/s][A
 59%|█████▉    | 130/221 [00:39<01:32,  1.02s/it][A
 59%|█████▉    | 131/221 [00:39<01:16,  1.18it/s][A
 60%|█████▉    | 132/221 [00:43<02:19,  1.56s/it][A
 60%|██████    | 133/221 [00:45<02:22,  1.62s/it][A
 61%|██████    | 134/221 [00:45<01:48,  1.25s/it][A
 61%|██████    | 135/221 [00:46<01:24,  1.01it/s][A
 62%|██████▏   | 136/221 [00:46<01:09,  1.23it/s][A
 62%|██████▏   | 137/221 [00:46<00:59,  1.41it/s][A
 62%|██████▏   | 138/221 [00:47<00:54,  1.51it/s][A
 63%|██████▎   | 139/221 [00:48<01:00,  1.36it/s][A
 63%|██████▎   | 140/221 [00:48<00:54,  1.49it/s][A
 64%|██████▍   | 141/221 [00:49<00:55,  1.44it/s][A
 65%|██████▌   | 144/221 [00:49<00:25,  3.05it/s][A
 66%|██████▌   | 146/221 [00:49<00:17,  4.17it/s][A
 67%|██████▋   | 148/221 [00:50<00:18,  3.88it/s][A
 67%|██████▋   | 149/221 [00:50<00:19,  3.74it/s][A
 68%|██████▊   | 150/221 [00:51<00:24,  2.85it/s][A
 68%|██████▊   | 151/221 [00:51<00:20,  3.36it/s][A
 69%|██████▉   | 152/221 [00:51<00:18,  3.72it/s][A
 69%|██████▉   | 153/221 [00:51<00:15,  4.33it/s][A
 70%|██████▉   | 154/221 [00:52<00:18,  3.58it/s][A
 70%|███████   | 155/221 [00:53<00:42,  1.57it/s][A
 71%|███████   | 156/221 [00:53<00:33,  1.95it/s][A
 71%|███████▏  | 158/221 [00:54<00:20,  3.07it/s][A
 73%|███████▎  | 161/221 [00:54<00:12,  4.86it/s][A
 73%|███████▎  | 162/221 [00:54<00:11,  5.12it/s][A
 74%|███████▍  | 163/221 [00:54<00:11,  4.83it/s][A
 74%|███████▍  | 164/221 [00:55<00:12,  4.61it/s][A
 75%|███████▌  | 166/221 [00:55<00:14,  3.81it/s][A
 76%|███████▌  | 168/221 [00:56<00:11,  4.47it/s][A
 76%|███████▋  | 169/221 [00:58<00:31,  1.63it/s][A
 77%|███████▋  | 171/221 [00:58<00:24,  2.08it/s][A
 78%|███████▊  | 173/221 [00:59<00:17,  2.67it/s][A
 79%|███████▊  | 174/221 [00:59<00:16,  2.89it/s][A
 79%|███████▉  | 175/221 [00:59<00:13,  3.34it/s][A
 80%|███████▉  | 176/221 [00:59<00:13,  3.25it/s][A
 80%|████████  | 177/221 [01:00<00:14,  2.94it/s][A
 81%|████████▏ | 180/221 [01:00<00:08,  4.70it/s][A
 82%|████████▏ | 181/221 [01:00<00:08,  4.75it/s][A
 82%|████████▏ | 182/221 [01:02<00:19,  2.01it/s][A
 83%|████████▎ | 184/221 [01:02<00:13,  2.83it/s][A
 84%|████████▎ | 185/221 [01:02<00:11,  3.04it/s][A
 84%|████████▍ | 186/221 [01:02<00:09,  3.58it/s][A
 85%|████████▍ | 187/221 [01:02<00:08,  4.23it/s][A
 86%|████████▌ | 189/221 [01:03<00:05,  5.81it/s][A
 86%|████████▌ | 190/221 [01:03<00:05,  6.18it/s][A
 87%|████████▋ | 192/221 [01:03<00:06,  4.65it/s][A
 87%|████████▋ | 193/221 [01:03<00:05,  4.93it/s][A
 88%|████████▊ | 195/221 [01:04<00:04,  6.06it/s][A
 89%|████████▉ | 197/221 [01:04<00:03,  7.58it/s][A
 90%|████████▉ | 198/221 [01:04<00:02,  7.82it/s][A
 90%|█████████ | 200/221 [01:04<00:02,  9.63it/s][A
 91%|█████████▏| 202/221 [01:04<00:02,  6.81it/s][A
 92%|█████████▏| 204/221 [01:05<00:02,  6.49it/s][A
 93%|█████████▎| 206/221 [01:05<00:02,  6.60it/s][A
 94%|█████████▎| 207/221 [01:06<00:02,  4.87it/s][A
 95%|█████████▍| 209/221 [01:06<00:02,  4.76it/s][A
 95%|█████████▌| 210/221 [01:06<00:02,  4.39it/s][A
 96%|█████████▌| 212/221 [01:07<00:01,  4.86it/s][A
 97%|█████████▋| 214/221 [01:07<00:01,  5.66it/s][A
 97%|█████████▋| 215/221 [01:09<00:03,  1.84it/s][A
 98%|█████████▊| 216/221 [01:09<00:02,  2.03it/s][A
 98%|█████████▊| 217/221 [01:09<00:01,  2.37it/s][A
 99%|█████████▊| 218/221 [01:10<00:01,  2.63it/s][A 99%|█████████▉| 219/221 [01:10<00:00,  3.12it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.77it/s][A
  1%|          | 2/221 [00:00<00:58,  3.77it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.76it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.76it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.75it/s][A
  3%|▎         | 6/221 [00:01<00:57,  3.75it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.76it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.76it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.75it/s][A
  5%|▍         | 10/221 [00:02<00:56,  3.76it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.76it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.76it/s][A
  6%|▌         | 13/221 [00:03<00:55,  3.76it/s][A
  6%|▋         | 14/221 [00:03<00:55,  3.76it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.76it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.76it/s][A
  8%|▊         | 17/221 [00:04<00:54,  3.76it/s][A
  8%|▊         | 18/221 [00:04<00:54,  3.76it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.75it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.75it/s][A
 10%|▉         | 21/221 [00:05<00:53,  3.75it/s][A
 10%|▉         | 22/221 [00:05<00:53,  3.75it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.75it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.75it/s][A
 11%|█▏        | 25/221 [00:06<00:52,  3.75it/s][A
 12%|█▏        | 26/221 [00:06<00:52,  3.75it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.75it/s][A
 13%|█▎        | 28/221 [00:07<00:51,  3.75it/s][A
 13%|█▎        | 29/221 [00:07<00:51,  3.75it/s][A
 14%|█▎        | 30/221 [00:07<00:51,  3.75it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.75it/s][A
 14%|█▍        | 32/221 [00:08<00:50,  3.75it/s][A
 15%|█▍        | 33/221 [00:08<00:50,  3.75it/s][A
 15%|█▌        | 34/221 [00:09<00:49,  3.75it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.75it/s][A
 16%|█▋        | 36/221 [00:09<00:49,  3.75it/s][A
 17%|█▋        | 37/221 [00:09<00:49,  3.75it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.75it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.75it/s][A
 18%|█▊        | 40/221 [00:10<00:48,  3.75it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.76it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.76it/s][A
 19%|█▉        | 43/221 [00:11<00:47,  3.76it/s][A
 20%|█▉        | 44/221 [00:11<00:47,  3.75it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.75it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.76it/s][A
 21%|██▏       | 47/221 [00:12<00:46,  3.76it/s][A
 22%|██▏       | 48/221 [00:12<00:46,  3.75it/s][A
 22%|██▏       | 49/221 [00:13<00:45,  3.75it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.75it/s][A
 23%|██▎       | 51/221 [00:13<00:45,  3.75it/s][A
 24%|██▎       | 52/221 [00:13<00:45,  3.75it/s][A
 24%|██▍       | 53/221 [00:14<00:44,  3.75it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.75it/s][A
 25%|██▍       | 55/221 [00:14<00:44,  3.75it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.75it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.75it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.75it/s][A
 27%|██▋       | 59/221 [00:15<00:43,  3.75it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.75it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.75it/s][A
 28%|██▊       | 62/221 [00:16<00:42,  3.75it/s][A
 29%|██▊       | 63/221 [00:16<00:42,  3.75it/s][A
 29%|██▉       | 64/221 [00:17<00:41,  3.75it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.74it/s][A
 30%|██▉       | 66/221 [00:17<00:41,  3.74it/s][A
 30%|███       | 67/221 [00:17<00:41,  3.74it/s][A
 31%|███       | 68/221 [00:18<00:40,  3.74it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.75it/s][A
 32%|███▏      | 70/221 [00:18<00:40,  3.75it/s][A
 32%|███▏      | 71/221 [00:18<00:40,  3.75it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.75it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.75it/s][A
 33%|███▎      | 74/221 [00:19<00:39,  3.75it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.75it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.75it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.75it/s][A
 35%|███▌      | 78/221 [00:20<00:38,  3.75it/s][A
 36%|███▌      | 79/221 [00:21<00:37,  3.75it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.75it/s][A
 37%|███▋      | 81/221 [00:21<00:37,  3.75it/s][A
 37%|███▋      | 82/221 [00:21<00:37,  3.75it/s][A
 38%|███▊      | 83/221 [00:22<00:36,  3.75it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.75it/s][A
 38%|███▊      | 85/221 [00:22<00:36,  3.75it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.75it/s][A
 39%|███▉      | 87/221 [00:23<00:35,  3.75it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.75it/s][A
 40%|████      | 89/221 [00:23<00:35,  3.75it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.76it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.75it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.75it/s][A
 42%|████▏     | 93/221 [00:24<00:34,  3.75it/s][A
 43%|████▎     | 94/221 [00:25<00:33,  3.75it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.75it/s][A
 43%|████▎     | 96/221 [00:25<00:33,  3.75it/s][A
 44%|████▍     | 97/221 [00:25<00:33,  3.75it/s][A
 44%|████▍     | 98/221 [00:26<00:32,  3.75it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.75it/s][A
 45%|████▌     | 100/221 [00:26<00:32,  3.75it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.75it/s][A
 46%|████▌     | 102/221 [00:27<00:31,  3.75it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.75it/s][A
 47%|████▋     | 104/221 [00:27<00:31,  3.75it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.75it/s][A
 48%|████▊     | 106/221 [00:28<00:30,  3.75it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.75it/s][A
 49%|████▉     | 108/221 [00:28<00:30,  3.75it/s][A
 49%|████▉     | 109/221 [00:29<00:29,  3.75it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.76it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.76it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.76it/s][A
 51%|█████     | 113/221 [00:30<00:28,  3.76it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.75it/s][A
 52%|█████▏    | 115/221 [00:30<00:28,  3.75it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.75it/s][A
 53%|█████▎    | 117/221 [00:31<00:27,  3.75it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.75it/s][A
 54%|█████▍    | 119/221 [00:31<00:27,  3.75it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.75it/s][A
 55%|█████▍    | 121/221 [00:32<00:26,  3.75it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.75it/s][A
 56%|█████▌    | 123/221 [00:32<00:26,  3.75it/s][A
 56%|█████▌    | 124/221 [00:33<00:25,  3.75it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.75it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.75it/s][A
 57%|█████▋    | 127/221 [00:33<00:25,  3.75it/s][A
 58%|█████▊    | 128/221 [00:34<00:24,  3.75it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.75it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.75it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.75it/s][A
 60%|█████▉    | 132/221 [00:35<00:23,  3.75it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.75it/s][A
 61%|██████    | 134/221 [00:35<00:23,  3.75it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.75it/s][A
 62%|██████▏   | 136/221 [00:36<00:22,  3.75it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.75it/s][A
 62%|██████▏   | 138/221 [00:36<00:22,  3.75it/s][A
 63%|██████▎   | 139/221 [00:37<00:21,  3.75it/s][A
 63%|██████▎   | 140/221 [00:37<00:21,  3.75it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.75it/s][A
 64%|██████▍   | 142/221 [00:37<00:21,  3.75it/s][A
 65%|██████▍   | 143/221 [00:38<00:20,  3.75it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.75it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.75it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.75it/s][A
 67%|██████▋   | 147/221 [00:39<00:19,  3.75it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.75it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.75it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.75it/s][A
 68%|██████▊   | 151/221 [00:40<00:18,  3.75it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.75it/s][A
 69%|██████▉   | 153/221 [00:40<00:18,  3.75it/s][A
 70%|██████▉   | 154/221 [00:41<00:17,  3.75it/s][A
 70%|███████   | 155/221 [00:41<00:17,  3.75it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.75it/s][A
 71%|███████   | 157/221 [00:41<00:17,  3.75it/s][A
 71%|███████▏  | 158/221 [00:42<00:16,  3.75it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.75it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.75it/s][A
 73%|███████▎  | 161/221 [00:42<00:16,  3.75it/s][A
 73%|███████▎  | 162/221 [00:43<00:15,  3.75it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.75it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.75it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.75it/s][A
 75%|███████▌  | 166/221 [00:44<00:14,  3.75it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.75it/s][A
 76%|███████▌  | 168/221 [00:44<00:14,  3.75it/s][A
 76%|███████▋  | 169/221 [00:45<00:13,  3.75it/s][A
 77%|███████▋  | 170/221 [00:45<00:13,  3.75it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.75it/s][A
 78%|███████▊  | 172/221 [00:45<00:13,  3.75it/s][A
 78%|███████▊  | 173/221 [00:46<00:12,  3.75it/s][A
 79%|███████▊  | 174/221 [00:46<00:12,  3.75it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.74it/s][A
 80%|███████▉  | 176/221 [00:46<00:12,  3.75it/s][A
 80%|████████  | 177/221 [00:47<00:11,  3.75it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.75it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.76it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.75it/s][A
 82%|████████▏ | 181/221 [00:48<00:10,  3.75it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.75it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.75it/s][A
 83%|████████▎ | 184/221 [00:49<00:09,  3.75it/s][A
 84%|████████▎ | 185/221 [00:49<00:09,  3.75it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.75it/s][A
 85%|████████▍ | 187/221 [00:49<00:09,  3.75it/s][A
 85%|████████▌ | 188/221 [00:50<00:08,  3.75it/s][A
 86%|████████▌ | 189/221 [00:50<00:08,  3.75it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.75it/s][A
 86%|████████▋ | 191/221 [00:50<00:08,  3.75it/s][A
 87%|████████▋ | 192/221 [00:51<00:07,  3.75it/s][A
 87%|████████▋ | 193/221 [00:51<00:07,  3.75it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.75it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.75it/s][A
 89%|████████▊ | 196/221 [00:52<00:06,  3.75it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.75it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.75it/s][A
 90%|█████████ | 199/221 [00:53<00:05,  3.75it/s][A
 90%|█████████ | 200/221 [00:53<00:05,  3.75it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.75it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.74it/s][A
 92%|█████████▏| 203/221 [00:54<00:04,  3.75it/s][A
 92%|█████████▏| 204/221 [00:54<00:04,  3.75it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.75it/s][A
 93%|█████████▎| 206/221 [00:54<00:04,  3.75it/s][A
 94%|█████████▎| 207/221 [00:55<00:03,  3.75it/s][A
 94%|█████████▍| 208/221 [00:55<00:03,  3.75it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.75it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.75it/s][A
 95%|█████████▌| 211/221 [00:56<00:02,  3.75it/s][A
 96%|█████████▌| 212/221 [00:56<00:02,  3.75it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.75it/s][A
 97%|█████████▋| 214/221 [00:57<00:01,  3.75it/s][A
 97%|█████████▋| 215/221 [00:57<00:01,  3.75it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.75it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.75it/s][A
 99%|█████████▊| 218/221 [00:58<00:00,  3.75it/s][A
 99%|█████████▉| 219/221 [00:58<00:00,  3.76it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.75it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.75it/s][A100%|██████████| 221/221 [00:58<00:00,  3.75it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  1%|          | 2/221 [00:00<00:23,  9.35it/s][A
  1%|▏         | 3/221 [00:00<00:28,  7.53it/s][A
  2%|▏         | 4/221 [00:00<00:31,  6.82it/s][A
  2%|▏         | 5/221 [00:00<00:38,  5.56it/s][A
  3%|▎         | 7/221 [00:01<00:33,  6.32it/s][A
  4%|▍         | 9/221 [00:01<00:29,  7.10it/s][A
  5%|▍         | 10/221 [00:01<00:51,  4.09it/s][A
  5%|▍         | 11/221 [00:02<00:50,  4.13it/s][A
  5%|▌         | 12/221 [00:02<00:46,  4.45it/s][A
  6%|▌         | 13/221 [00:02<01:04,  3.20it/s][A
  6%|▋         | 14/221 [00:02<00:53,  3.84it/s][A
  7%|▋         | 15/221 [00:03<00:50,  4.07it/s][A
  7%|▋         | 16/221 [00:03<00:51,  4.01it/s][A
  8%|▊         | 17/221 [00:03<01:00,  3.36it/s][A
  8%|▊         | 18/221 [00:04<00:52,  3.85it/s][A
  9%|▊         | 19/221 [00:04<00:46,  4.34it/s][A
  9%|▉         | 20/221 [00:04<00:45,  4.46it/s][A
 10%|▉         | 22/221 [00:04<00:32,  6.04it/s][A
 11%|█         | 24/221 [00:04<00:28,  6.96it/s][A
 11%|█▏        | 25/221 [00:04<00:27,  7.21it/s][A
 12%|█▏        | 26/221 [00:05<00:30,  6.42it/s][A
 13%|█▎        | 28/221 [00:05<00:27,  6.95it/s][A
 13%|█▎        | 29/221 [00:05<00:32,  5.97it/s][A
 14%|█▎        | 30/221 [00:06<00:42,  4.54it/s][A
 14%|█▍        | 31/221 [00:06<00:36,  5.19it/s][A
 15%|█▍        | 33/221 [00:06<00:31,  5.95it/s][A
 15%|█▌        | 34/221 [00:06<00:28,  6.45it/s][A
 16%|█▌        | 35/221 [00:06<00:36,  5.04it/s][A
 16%|█▋        | 36/221 [00:07<00:50,  3.67it/s][A
 17%|█▋        | 37/221 [00:07<00:44,  4.13it/s][A
 17%|█▋        | 38/221 [00:07<00:51,  3.53it/s][A
 18%|█▊        | 39/221 [00:08<00:45,  4.04it/s][A
 18%|█▊        | 40/221 [00:08<00:49,  3.67it/s][A
 19%|█▊        | 41/221 [00:08<00:51,  3.49it/s][A
 19%|█▉        | 42/221 [00:08<00:49,  3.61it/s][A
 19%|█▉        | 43/221 [00:09<00:50,  3.50it/s][A
 20%|█▉        | 44/221 [00:09<01:01,  2.86it/s][A
 20%|██        | 45/221 [00:10<00:56,  3.09it/s][A
 21%|██        | 46/221 [00:10<00:48,  3.61it/s][A
 21%|██▏       | 47/221 [00:10<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:10<00:39,  4.42it/s][A
 22%|██▏       | 49/221 [00:10<00:39,  4.38it/s][A
 23%|██▎       | 50/221 [00:10<00:37,  4.51it/s][A
 24%|██▎       | 52/221 [00:11<00:46,  3.63it/s][A
 24%|██▍       | 53/221 [00:11<00:39,  4.25it/s][A
 24%|██▍       | 54/221 [00:12<00:55,  2.99it/s][A
 25%|██▍       | 55/221 [00:12<00:50,  3.32it/s][A
 25%|██▌       | 56/221 [00:12<00:43,  3.80it/s][A
 26%|██▌       | 57/221 [00:13<00:45,  3.62it/s][A
 26%|██▌       | 58/221 [00:13<00:44,  3.68it/s][A
 27%|██▋       | 59/221 [00:13<00:39,  4.11it/s][A
 27%|██▋       | 60/221 [00:14<01:07,  2.40it/s][A
 28%|██▊       | 61/221 [00:14<00:54,  2.92it/s][A
 28%|██▊       | 62/221 [00:14<00:55,  2.88it/s][A
 29%|██▊       | 63/221 [00:15<00:46,  3.43it/s][A
 29%|██▉       | 64/221 [00:15<01:04,  2.44it/s][A
 30%|██▉       | 66/221 [00:16<01:01,  2.53it/s][A
 30%|███       | 67/221 [00:17<01:07,  2.30it/s][A
 31%|███       | 68/221 [00:17<00:54,  2.81it/s][A
 31%|███       | 69/221 [00:18<01:19,  1.92it/s][A
 32%|███▏      | 70/221 [00:18<01:04,  2.35it/s][A
 32%|███▏      | 71/221 [00:18<00:55,  2.70it/s][A
 33%|███▎      | 72/221 [00:18<00:53,  2.81it/s][A
 33%|███▎      | 73/221 [00:19<00:46,  3.17it/s][A
 33%|███▎      | 74/221 [00:19<00:37,  3.92it/s][A
 34%|███▍      | 75/221 [00:19<00:37,  3.86it/s][A
 34%|███▍      | 76/221 [00:19<00:34,  4.23it/s][A
 35%|███▍      | 77/221 [00:20<01:04,  2.24it/s][A
 35%|███▌      | 78/221 [00:20<00:49,  2.91it/s][A
 36%|███▌      | 79/221 [00:21<00:54,  2.63it/s][A
 36%|███▌      | 80/221 [00:21<00:47,  2.97it/s][A
 37%|███▋      | 81/221 [00:21<00:38,  3.66it/s][A
 37%|███▋      | 82/221 [00:21<00:38,  3.61it/s][A
 38%|███▊      | 83/221 [00:22<01:14,  1.86it/s][A
 38%|███▊      | 84/221 [00:23<00:59,  2.29it/s][A
 38%|███▊      | 85/221 [00:23<00:46,  2.90it/s][A
 39%|███▉      | 86/221 [00:23<00:36,  3.67it/s][A
 39%|███▉      | 87/221 [00:24<00:50,  2.67it/s][A
 40%|███▉      | 88/221 [00:24<00:57,  2.32it/s][A
 40%|████      | 89/221 [00:24<00:50,  2.63it/s][A
 41%|████      | 90/221 [00:25<00:50,  2.61it/s][A
 41%|████      | 91/221 [00:25<00:42,  3.09it/s][A
 42%|████▏     | 92/221 [00:25<00:46,  2.78it/s][A
 42%|████▏     | 93/221 [00:26<00:52,  2.45it/s][A
 43%|████▎     | 94/221 [00:26<00:53,  2.38it/s][A
 43%|████▎     | 95/221 [00:27<00:47,  2.67it/s][A
 43%|████▎     | 96/221 [00:27<00:53,  2.33it/s][A
 44%|████▍     | 97/221 [00:27<00:43,  2.84it/s][A
 44%|████▍     | 98/221 [00:28<01:05,  1.88it/s][A
 45%|████▌     | 100/221 [00:29<00:45,  2.67it/s][A
 46%|████▌     | 101/221 [00:29<00:38,  3.10it/s][A
 46%|████▌     | 102/221 [00:30<01:04,  1.84it/s][A
 47%|████▋     | 103/221 [00:30<00:52,  2.27it/s][A
 47%|████▋     | 104/221 [00:30<00:40,  2.88it/s][A
 48%|████▊     | 105/221 [00:31<00:43,  2.69it/s][A
 48%|████▊     | 106/221 [00:31<00:52,  2.18it/s][A
 48%|████▊     | 107/221 [00:31<00:41,  2.76it/s][A
 49%|████▉     | 108/221 [00:32<00:40,  2.76it/s][A
 49%|████▉     | 109/221 [00:32<00:34,  3.29it/s][A
 50%|████▉     | 110/221 [00:32<00:36,  3.05it/s][A
 50%|█████     | 111/221 [00:33<00:32,  3.37it/s][A
 51%|█████     | 112/221 [00:33<00:32,  3.39it/s][A
 51%|█████     | 113/221 [00:34<00:41,  2.60it/s][A
 52%|█████▏    | 114/221 [00:34<00:32,  3.29it/s][A
 52%|█████▏    | 115/221 [00:34<00:28,  3.66it/s][A
 52%|█████▏    | 116/221 [00:34<00:28,  3.69it/s][A
 53%|█████▎    | 117/221 [00:34<00:26,  3.94it/s][A
 53%|█████▎    | 118/221 [00:35<00:25,  4.05it/s][A
 54%|█████▍    | 119/221 [00:35<00:26,  3.87it/s][A
 54%|█████▍    | 120/221 [00:35<00:24,  4.06it/s][A
 55%|█████▍    | 121/221 [00:35<00:20,  4.88it/s][A
 55%|█████▌    | 122/221 [00:35<00:20,  4.91it/s][A
 56%|█████▌    | 123/221 [00:36<00:20,  4.86it/s][A
 56%|█████▌    | 124/221 [00:36<00:21,  4.57it/s][A
 57%|█████▋    | 125/221 [00:36<00:22,  4.21it/s][A
 57%|█████▋    | 126/221 [00:36<00:20,  4.68it/s][A
 57%|█████▋    | 127/221 [00:37<00:26,  3.52it/s][A
 58%|█████▊    | 128/221 [00:37<00:24,  3.78it/s][A
 59%|█████▉    | 130/221 [00:37<00:17,  5.26it/s][A
 59%|█████▉    | 131/221 [00:37<00:17,  5.24it/s][A
 60%|█████▉    | 132/221 [00:38<00:39,  2.24it/s][A
 60%|██████    | 133/221 [00:39<00:36,  2.39it/s][A
 61%|██████    | 134/221 [00:40<00:47,  1.84it/s][A
 61%|██████    | 135/221 [00:40<00:43,  1.96it/s][A
 62%|██████▏   | 136/221 [00:40<00:35,  2.40it/s][A
 62%|██████▏   | 137/221 [00:41<00:29,  2.82it/s][A
 62%|██████▏   | 138/221 [00:41<00:28,  2.93it/s][A
 63%|██████▎   | 139/221 [00:41<00:31,  2.63it/s][A
 63%|██████▎   | 140/221 [00:42<00:28,  2.80it/s][A
 64%|██████▍   | 141/221 [00:42<00:24,  3.22it/s][A
 64%|██████▍   | 142/221 [00:42<00:20,  3.87it/s][A
 65%|██████▍   | 143/221 [00:43<00:32,  2.39it/s][A
 65%|██████▌   | 144/221 [00:44<00:41,  1.87it/s][A
 66%|██████▌   | 145/221 [00:44<00:32,  2.35it/s][A
 67%|██████▋   | 147/221 [00:44<00:22,  3.32it/s][A
 67%|██████▋   | 148/221 [00:45<00:29,  2.48it/s][A
 67%|██████▋   | 149/221 [00:46<00:39,  1.81it/s][A
 68%|██████▊   | 150/221 [00:46<00:34,  2.07it/s][A
 68%|██████▊   | 151/221 [00:46<00:31,  2.20it/s][A
 69%|██████▉   | 152/221 [00:47<00:33,  2.04it/s][A
 69%|██████▉   | 153/221 [00:47<00:28,  2.38it/s][A
 70%|██████▉   | 154/221 [00:47<00:22,  2.92it/s][A
 70%|███████   | 155/221 [00:48<00:20,  3.14it/s][A
 71%|███████   | 156/221 [00:48<00:21,  3.06it/s][A
 71%|███████   | 157/221 [00:48<00:21,  3.04it/s][A
 71%|███████▏  | 158/221 [00:49<00:18,  3.38it/s][A
 72%|███████▏  | 159/221 [00:49<00:16,  3.82it/s][A
 72%|███████▏  | 160/221 [00:49<00:14,  4.19it/s][A
 73%|███████▎  | 161/221 [00:49<00:14,  4.21it/s][A
 73%|███████▎  | 162/221 [00:49<00:13,  4.38it/s][A
 74%|███████▍  | 163/221 [00:50<00:12,  4.56it/s][A
 74%|███████▍  | 164/221 [00:50<00:11,  4.98it/s][A
 75%|███████▍  | 165/221 [00:50<00:17,  3.29it/s][A
 76%|███████▌  | 167/221 [00:50<00:10,  4.92it/s][A
 76%|███████▌  | 168/221 [00:51<00:10,  4.85it/s][A
 76%|███████▋  | 169/221 [00:51<00:10,  5.10it/s][A
 77%|███████▋  | 170/221 [00:51<00:11,  4.38it/s][A
 77%|███████▋  | 171/221 [00:52<00:15,  3.32it/s][A
 78%|███████▊  | 172/221 [00:52<00:12,  4.00it/s][A
 78%|███████▊  | 173/221 [00:52<00:18,  2.54it/s][A
 79%|███████▊  | 174/221 [00:53<00:18,  2.55it/s][A
 79%|███████▉  | 175/221 [00:53<00:18,  2.50it/s][A
 80%|███████▉  | 176/221 [00:53<00:15,  2.91it/s][A
 80%|████████  | 177/221 [00:54<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:54<00:16,  2.61it/s][A
 81%|████████  | 179/221 [00:54<00:14,  2.98it/s][A
 81%|████████▏ | 180/221 [00:55<00:11,  3.43it/s][A
 82%|████████▏ | 181/221 [00:55<00:10,  3.94it/s][A
 82%|████████▏ | 182/221 [00:55<00:10,  3.60it/s][A
 83%|████████▎ | 183/221 [00:55<00:09,  3.99it/s][A
 83%|████████▎ | 184/221 [00:56<00:08,  4.14it/s][A
 84%|████████▎ | 185/221 [00:56<00:08,  4.28it/s][A
 84%|████████▍ | 186/221 [00:56<00:11,  3.07it/s][A
 85%|████████▍ | 187/221 [00:57<00:10,  3.36it/s][A
 85%|████████▌ | 188/221 [00:57<00:09,  3.52it/s][A
 86%|████████▌ | 189/221 [00:57<00:08,  3.85it/s][A
 86%|████████▌ | 190/221 [00:57<00:07,  3.91it/s][A
 86%|████████▋ | 191/221 [00:57<00:07,  4.12it/s][A
 87%|████████▋ | 192/221 [00:58<00:06,  4.14it/s][A
 87%|████████▋ | 193/221 [00:58<00:06,  4.52it/s][A
 88%|████████▊ | 194/221 [00:58<00:06,  4.15it/s][A
 88%|████████▊ | 195/221 [00:58<00:05,  4.35it/s][A
 89%|████████▊ | 196/221 [00:59<00:05,  4.74it/s][A
 89%|████████▉ | 197/221 [00:59<00:06,  3.91it/s][A
 90%|████████▉ | 198/221 [00:59<00:05,  4.42it/s][A
 90%|█████████ | 199/221 [00:59<00:04,  4.46it/s][A
 90%|█████████ | 200/221 [01:00<00:04,  4.26it/s][A
 91%|█████████ | 201/221 [01:00<00:03,  5.13it/s][A
 91%|█████████▏| 202/221 [01:00<00:03,  5.25it/s][A
 92%|█████████▏| 203/221 [01:00<00:03,  5.62it/s][A
 92%|█████████▏| 204/221 [01:00<00:03,  4.46it/s][A
 93%|█████████▎| 205/221 [01:00<00:03,  4.86it/s][A
 93%|█████████▎| 206/221 [01:01<00:03,  4.67it/s][A
 94%|█████████▎| 207/221 [01:01<00:02,  5.47it/s][A
 94%|█████████▍| 208/221 [01:01<00:02,  5.54it/s][A
 95%|█████████▍| 209/221 [01:01<00:02,  4.99it/s][A
 95%|█████████▌| 210/221 [01:01<00:02,  4.55it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.72it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.61it/s][A
 96%|█████████▋| 213/221 [01:02<00:01,  4.20it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  2.40it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.02it/s][A
 98%|█████████▊| 216/221 [01:04<00:01,  2.95it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  2.67it/s][A
 99%|█████████▊| 218/221 [01:04<00:01,  2.96it/s][A
 99%|█████████▉| 219/221 [01:05<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:05<00:00,  3.79it/s][A
100%|██████████| 221/221 [01:05<00:00,  3.98it/s][A100%|██████████| 221/221 [01:05<00:00,  3.38it/s]
09/06/2024 20:58:27 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 299--===========

09/06/2024 20:58:27 - INFO - __main__ -   {'area_r1': 21.6, 'area_recall': '21.6/40.5/50.1', 'area_ravg': 37.4}
09/06/2024 20:58:27 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 299--===========

09/06/2024 20:58:27 - INFO - __main__ -   {'forward_r1': 38.9, 'forward_recall': '38.9/67.3/76.6', 'forward_ravg': 60.9}
09/06/2024 20:58:27 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 299--===========

09/06/2024 20:58:27 - INFO - __main__ -   {'area_video_r1': 39.9, 'area_video_recall': '39.9/68.8/78.2', 'area_video_ravg': 62.3}
09/06/2024 20:58:27 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 299=======

09/06/2024 20:58:27 - INFO - __main__ -   {'area_video_r1': 39.9, 'area_video_recall': '39.9/68.8/78.2', 'area_video_ravg': 62.3}
09/06/2024 20:58:27 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 299--===========

09/06/2024 20:58:27 - INFO - __main__ -   {'area_video_r1': 51.0, 'area_video_recall': '51.0/73.4/79.9', 'area_video_ravg': 68.1, 'area_video_back_r1': 51.0, 'area_video_back_recall': '51.0/73.8/81.9', 'area_video_back_ravg': 68.9}
09/06/2024 20:58:27 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 299=======

09/06/2024 20:58:27 - INFO - __main__ -   {'area_video_r1': 51.0, 'area_video_recall': '51.0/73.4/79.9', 'area_video_ravg': 68.1, 'area_video_back_r1': 51.0, 'area_video_back_recall': '51.0/73.8/81.9', 'area_video_back_ravg': 68.9}
09/06/2024 20:58:27 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 299--===========

09/06/2024 20:58:27 - INFO - __main__ -   {'video_r1': 43.3, 'video_recall': '43.3/70.8/80.2', 'video_ravg': 64.8}
09/06/2024 20:58:27 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 299=======

09/06/2024 20:58:27 - INFO - __main__ -   {'video_r1': 43.3, 'video_recall': '43.3/70.8/80.2', 'video_ravg': 64.8}
09/06/2024 20:58:27 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 299--===========

09/06/2024 20:58:27 - INFO - __main__ -   {'video_r1': 52.0, 'video_recall': '52.0/75.3/81.8', 'video_ravg': 69.7}
09/06/2024 20:58:27 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 299=======

09/06/2024 20:58:27 - INFO - __main__ -   {'video_r1': 52.0, 'video_recall': '52.0/75.3/81.8', 'video_ravg': 69.7}
09/06/2024 20:59:05 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.366037368774414, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04742967337369919, 'loss_ret%tv%ta--finetune_area/loss_area': 2.870980978012085, 'loss_ret%tv%ta--finetune_area/total_loss': 6.28444766998291}
[h264 @ 0x5616008ebe80] mmco: unref short failure
[h264 @ 0x5616008ebe80] mmco: unref short failure
 19%|█▉        | 300/1556 [1:23:28<42:16:12, 121.16s/it] 19%|█▉        | 301/1556 [1:23:31<29:50:49, 85.62s/it]  19%|█▉        | 302/1556 [1:23:34<21:11:10, 60.82s/it] 19%|█▉        | 303/1556 [1:23:37<15:11:03, 43.63s/it] 20%|█▉        | 304/1556 [1:23:41<11:01:01, 31.68s/it] 20%|█▉        | 305/1556 [1:23:46<8:08:47, 23.44s/it]  20%|█▉        | 306/1556 [1:23:51<6:14:58, 18.00s/it][h264 @ 0x55e47b1bec40] mmco: unref short failure
[h264 @ 0x55e47b1bec40] mmco: unref short failure
 20%|█▉        | 307/1556 [1:23:56<4:56:14, 14.23s/it] 20%|█▉        | 308/1556 [1:24:02<4:01:29, 11.61s/it][h264 @ 0x55e47c11de00] mmco: unref short failure
[h264 @ 0x55e47c11de00] mmco: unref short failure
[h264 @ 0x55c8c9a714c0] mmco: unref short failure
[h264 @ 0x55c8c9a714c0] mmco: unref short failure
 20%|█▉        | 309/1556 [1:24:07<3:20:35,  9.65s/it] 20%|█▉        | 310/1556 [1:24:12<2:55:09,  8.43s/it] 20%|█▉        | 311/1556 [1:24:18<2:38:17,  7.63s/it][h264 @ 0x55c8cf7e8400] mmco: unref short failure
 20%|██        | 312/1556 [1:24:24<2:26:23,  7.06s/it] 20%|██        | 313/1556 [1:24:29<2:14:29,  6.49s/it] 20%|██        | 314/1556 [1:24:35<2:09:45,  6.27s/it] 20%|██        | 315/1556 [1:24:41<2:06:32,  6.12s/it] 20%|██        | 316/1556 [1:24:53<2:42:28,  7.86s/it][h264 @ 0x55e48615dfc0] mmco: unref short failure
 20%|██        | 317/1556 [1:25:10<3:39:41, 10.64s/it][h264 @ 0x55c8c368a940] mmco: unref short failure
[h264 @ 0x55c8c368a940] mmco: unref short failure
 20%|██        | 318/1556 [1:25:15<3:05:44,  9.00s/it][h264 @ 0x55c8d4029bc0] mmco: unref short failure
[h264 @ 0x55c8d4029bc0] mmco: unref short failure
 21%|██        | 319/1556 [1:25:20<2:43:20,  7.92s/it][h264 @ 0x5616000cb740] mmco: unref short failure
[h264 @ 0x5616000cb740] mmco: unref short failure
[h264 @ 0x5649309fcd00] mmco: unref short failure
 21%|██        | 320/1556 [1:25:26<2:27:38,  7.17s/it][h264 @ 0x5615fef85380] mmco: unref short failure
[h264 @ 0x5615fef85380] mmco: unref short failure
 21%|██        | 321/1556 [1:25:31<2:16:16,  6.62s/it] 21%|██        | 322/1556 [1:25:37<2:10:25,  6.34s/it] 21%|██        | 323/1556 [1:25:42<2:01:48,  5.93s/it][h264 @ 0x56492d82d4c0] mmco: unref short failure
[h264 @ 0x56492d82d4c0] mmco: unref short failure
[h264 @ 0x561602df6380] mmco: unref short failure
[h264 @ 0x561602df6380] mmco: unref short failure
[h264 @ 0x564930a0c380] mmco: unref short failure
[h264 @ 0x56493c7aa400] mmco: unref short failure
[h264 @ 0x5649305bdb00] mmco: unref short failure
[h264 @ 0x55c8d5607340] mmco: unref short failure
[h264 @ 0x55c8c4565ac0] mmco: unref short failure
[h264 @ 0x55c8c4565ac0] mmco: unref short failure
[h264 @ 0x56160a76c7c0] mmco: unref short failure
[h264 @ 0x56160a76c7c0] mmco: unref short failure
[h264 @ 0x55e47ddfec40] mmco: unref short failure
[h264 @ 0x55e47ddfec40] mmco: unref short failure
[h264 @ 0x55e473eae040] mmco: unref short failure
[h264 @ 0x55e473eae040] mmco: unref short failure
[h264 @ 0x56493435b080] mmco: unref short failure
[h264 @ 0x56493435b080] mmco: unref short failure
 21%|██        | 324/1556 [1:26:34<6:45:54, 19.77s/it][h264 @ 0x56493bd7ecc0] mmco: unref short failure
[h264 @ 0x56493bd7ecc0] mmco: unref short failure
[h264 @ 0x5616025d1500] mmco: unref short failure
[h264 @ 0x5616025d1500] mmco: unref short failure
[h264 @ 0x56160a76c7c0] mmco: unref short failure
[h264 @ 0x56160a76c7c0] mmco: unref short failure
 21%|██        | 325/1556 [1:26:49<6:19:01, 18.47s/it][h264 @ 0x55e487d86600] mmco: unref short failure
[h264 @ 0x55e487d86600] mmco: unref short failure
[h264 @ 0x55e487d86600] mmco: unref short failure
[h264 @ 0x55e487d86600] mmco: unref short failure
 21%|██        | 326/1556 [1:26:54<4:58:00, 14.54s/it][h264 @ 0x561604b3df00] mmco: unref short failure
[h264 @ 0x561604b3df00] mmco: unref short failure
[h264 @ 0x55e4792cf940] mmco: unref short failure
[h264 @ 0x55e4792cf940] mmco: unref short failure
 21%|██        | 327/1556 [1:27:00<4:02:43, 11.85s/it] 21%|██        | 328/1556 [1:27:08<3:39:12, 10.71s/it] 21%|██        | 329/1556 [1:27:14<3:06:31,  9.12s/it] 21%|██        | 330/1556 [1:27:19<2:42:48,  7.97s/it][h264 @ 0x55e473e71c00] mmco: unref short failure
[h264 @ 0x55e473e71c00] mmco: unref short failure
 21%|██▏       | 331/1556 [1:27:24<2:27:33,  7.23s/it][h264 @ 0x55e479582b80] mmco: unref short failure
[h264 @ 0x55e4711d5180] mmco: unref short failure
[h264 @ 0x56493c0ea940] mmco: unref short failure
[h264 @ 0x55c8c556c0c0] mmco: unref short failure
[h264 @ 0x55c8c556c0c0] mmco: unref short failure
[h264 @ 0x55c8d76b6f80] mmco: unref short failure
[h264 @ 0x55c8d76b6f80] mmco: unref short failure
[h264 @ 0x56492f2a4380] mmco: unref short failure
[h264 @ 0x56160c021b40] mmco: unref short failure
[h264 @ 0x55c8cddbc300] mmco: unref short failure
[h264 @ 0x55c8cddbc300] mmco: unref short failure
 21%|██▏       | 332/1556 [1:28:18<7:09:53, 21.07s/it] 21%|██▏       | 333/1556 [1:28:27<5:58:40, 17.60s/it][h264 @ 0x56492da82140] mmco: unref short failure
[h264 @ 0x56492da82140] mmco: unref short failure
[h264 @ 0x5649352ac480] mmco: unref short failure
[h264 @ 0x5649352ac480] mmco: unref short failure
 21%|██▏       | 334/1556 [1:28:32<4:41:28, 13.82s/it] 22%|██▏       | 335/1556 [1:28:38<3:50:34, 11.33s/it][h264 @ 0x55c8c556c0c0] mmco: unref short failure
[h264 @ 0x55c8c556c0c0] mmco: unref short failure
 22%|██▏       | 336/1556 [1:28:44<3:19:17,  9.80s/it] 22%|██▏       | 337/1556 [1:28:50<2:54:08,  8.57s/it] 22%|██▏       | 338/1556 [1:28:55<2:35:31,  7.66s/it][h264 @ 0x56492dec0e80] mmco: unref short failure
[h264 @ 0x5649306aa3c0] mmco: unref short failure
[h264 @ 0x5649306aa3c0] mmco: unref short failure
[h264 @ 0x5649306aa3c0] mmco: unref short failure
[h264 @ 0x5649306aa3c0] mmco: unref short failure
 22%|██▏       | 339/1556 [1:29:00<2:20:59,  6.95s/it][h264 @ 0x5649342afe80] mmco: unref short failure
[h264 @ 0x5649342afe80] mmco: unref short failure
[h264 @ 0x5649342afe80] mmco: unref short failure
[h264 @ 0x564934555f00] mmco: unref short failure
[h264 @ 0x55e481912e00] mmco: unref short failure
[h264 @ 0x55e481912e00] mmco: unref short failure
[h264 @ 0x56493259df40] mmco: unref short failure
[h264 @ 0x56493259df40] mmco: unref short failure
[h264 @ 0x56493259df40] mmco: unref short failure
[h264 @ 0x56493259df40] mmco: unref short failure
[h264 @ 0x55c8ccb31780] mmco: unref short failure
[h264 @ 0x55e48190c180] mmco: unref short failure
[h264 @ 0x55c8c24fdc80] mmco: unref short failure
[h264 @ 0x55c8c24fdc80] mmco: unref short failure
[h264 @ 0x561612088480] mmco: unref short failure
[h264 @ 0x5615fd50d340] mmco: unref short failure
[h264 @ 0x5615fd50d340] mmco: unref short failure
[h264 @ 0x55e47f328240] mmco: unref short failure
[h264 @ 0x55e47f328240] mmco: unref short failure
[h264 @ 0x56160380f780] mmco: unref short failure
[h264 @ 0x56160380f780] mmco: unref short failure
[h264 @ 0x56160380f780] mmco: unref short failure
[h264 @ 0x564941a28bc0] mmco: unref short failure
 22%|██▏       | 340/1556 [1:29:54<7:04:34, 20.95s/it][h264 @ 0x55e47a893540] mmco: unref short failure
[h264 @ 0x55e47a893540] mmco: unref short failure
[h264 @ 0x56493614aec0] mmco: unref short failure
 22%|██▏       | 341/1556 [1:30:03<5:53:17, 17.45s/it] 22%|██▏       | 342/1556 [1:30:09<4:41:01, 13.89s/it][h264 @ 0x56160c8d0700] mmco: unref short failure
[h264 @ 0x56160c8d0700] mmco: unref short failure
[h264 @ 0x5649357f8940] mmco: unref short failure
[h264 @ 0x5649357f8940] mmco: unref short failure
 22%|██▏       | 343/1556 [1:30:15<3:50:43, 11.41s/it] 22%|██▏       | 344/1556 [1:30:21<3:21:06,  9.96s/it] 22%|██▏       | 345/1556 [1:30:26<2:49:34,  8.40s/it][h264 @ 0x55e477108500] mmco: unref short failure
[h264 @ 0x55e477108500] mmco: unref short failure
[h264 @ 0x56493a1e8c80] mmco: unref short failure
 22%|██▏       | 346/1556 [1:30:35<2:52:31,  8.55s/it][h264 @ 0x561603219ec0] mmco: unref short failure
[h264 @ 0x561603219ec0] mmco: unref short failure
 22%|██▏       | 347/1556 [1:30:42<2:43:46,  8.13s/it][h264 @ 0x56493ea6cd00] mmco: unref short failure
[h264 @ 0x55c8ca7ef580] mmco: unref short failure
[h264 @ 0x56492fcb7080] mmco: unref short failure
[h264 @ 0x56492fcb7080] mmco: unref short failure
[h264 @ 0x55e476263f40] mmco: unref short failure
[h264 @ 0x55e476263f40] mmco: unref short failure
[h264 @ 0x55c8d569b740] mmco: unref short failure
[h264 @ 0x55c8d569b740] mmco: unref short failure
[h264 @ 0x55c8cd0dc940] mmco: unref short failure
[h264 @ 0x55c8cd0dc940] mmco: unref short failure
[h264 @ 0x5615fca7ad40] mmco: unref short failure
[h264 @ 0x55e487d96f80] mmco: unref short failure
 22%|██▏       | 348/1556 [1:31:35<7:15:08, 21.61s/it][h264 @ 0x5615f9534b80] mmco: unref short failure
[h264 @ 0x5615f9534b80] mmco: unref short failure
[h264 @ 0x55c8c2002840] mmco: unref short failure
[h264 @ 0x55c8c2002840] mmco: unref short failure
 22%|██▏       | 349/1556 [1:31:41<5:38:21, 16.82s/it]09/06/2024 21:07:21 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.3198137283325195, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.049777861684560776, 'loss_ret%tv%ta--finetune_area/loss_area': 2.903088092803955, 'loss_ret%tv%ta--finetune_area/total_loss': 6.272679328918457}
[h264 @ 0x561610f381c0] mmco: unref short failure
[h264 @ 0x561610f381c0] mmco: unref short failure
[h264 @ 0x561603a27180] mmco: unref short failure
[h264 @ 0x5616120bfb00] mmco: unref short failure
[h264 @ 0x5616120bfb00] mmco: unref short failure
 22%|██▏       | 350/1556 [1:31:46<4:26:32, 13.26s/it][h264 @ 0x55c8c0f62e40] mmco: unref short failure
 23%|██▎       | 351/1556 [1:31:55<4:03:32, 12.13s/it] 23%|██▎       | 352/1556 [1:32:00<3:21:24, 10.04s/it] 23%|██▎       | 353/1556 [1:32:05<2:52:00,  8.58s/it][h264 @ 0x56492c6427c0] mmco: unref short failure
 23%|██▎       | 354/1556 [1:32:19<3:19:19,  9.95s/it] 23%|██▎       | 355/1556 [1:32:24<2:51:03,  8.55s/it][h264 @ 0x55c8c99ffa80] mmco: unref short failure
[h264 @ 0x55e4856bb300] mmco: unref short failure
[h264 @ 0x5615fe32ac80] mmco: unref short failure
[h264 @ 0x55c8ce896d40] mmco: unref short failure
[h264 @ 0x55c8ce896d40] mmco: unref short failure
 23%|██▎       | 356/1556 [1:33:12<6:47:58, 20.40s/it][h264 @ 0x5649365f8240] mmco: unref short failure
[h264 @ 0x5649365f8240] mmco: unref short failure
[h264 @ 0x55c8c1793000] mmco: unref short failure
[h264 @ 0x55c8c1793000] mmco: unref short failure
[h264 @ 0x561605012840] mmco: unref short failure
[h264 @ 0x55e476397080] mmco: unref short failure
 23%|██▎       | 357/1556 [1:33:17<5:15:33, 15.79s/it][h264 @ 0x55c8cad1a680] mmco: unref short failure
[h264 @ 0x55c8cad1a680] mmco: unref short failure
 23%|██▎       | 358/1556 [1:33:22<4:13:53, 12.72s/it][h264 @ 0x55c8c3e52240] mmco: unref short failure
[h264 @ 0x55e47651e600] mmco: unref short failure
[h264 @ 0x55e47d798600] mmco: unref short failure
[h264 @ 0x55e47d798600] mmco: unref short failure
[h264 @ 0x5649357f8940] mmco: unref short failure
 23%|██▎       | 359/1556 [1:33:33<4:00:42, 12.07s/it] 23%|██▎       | 360/1556 [1:33:39<3:24:39, 10.27s/it] 23%|██▎       | 361/1556 [1:33:45<2:55:30,  8.81s/it][h264 @ 0x56160345bd40] mmco: unref short failure
[h264 @ 0x55c8c3e52240] mmco: unref short failure
[h264 @ 0x55c8c3e52240] mmco: unref short failure
[h264 @ 0x56493359c580] mmco: unref short failure
[h264 @ 0x56160bc87d40] mmco: unref short failure
[h264 @ 0x561609fc6900] mmco: unref short failure
 23%|██▎       | 362/1556 [1:33:59<3:28:39, 10.49s/it] 23%|██▎       | 363/1556 [1:34:04<2:55:42,  8.84s/it][h264 @ 0x55e4729d7ec0] mmco: unref short failure
[h264 @ 0x55e4729d7ec0] mmco: unref short failure
[h264 @ 0x56492c41f000] mmco: unref short failure
[h264 @ 0x56492c41f000] mmco: unref short failure
[h264 @ 0x56492d30df00] mmco: unref short failure
[h264 @ 0x56492d30df00] mmco: unref short failure
[h264 @ 0x561603464200] mmco: unref short failure
[h264 @ 0x56160a000a00] mmco: unref short failure
[h264 @ 0x56160a000a00] mmco: unref short failure
[h264 @ 0x564934ef6340] mmco: unref short failure
 23%|██▎       | 364/1556 [1:34:46<6:12:12, 18.74s/it] 23%|██▎       | 365/1556 [1:34:53<5:05:32, 15.39s/it] 24%|██▎       | 366/1556 [1:34:59<4:05:19, 12.37s/it][h264 @ 0x5616013f3240] mmco: unref short failure
[h264 @ 0x5615fca96e40] mmco: unref short failure
[h264 @ 0x5615fca96e40] mmco: unref short failure
[h264 @ 0x5615fca96e40] mmco: unref short failure
[h264 @ 0x5615fca96e40] mmco: unref short failure
 24%|██▎       | 367/1556 [1:35:13<4:18:39, 13.05s/it][h264 @ 0x55e472afb600] mmco: unref short failure
 24%|██▎       | 368/1556 [1:35:19<3:32:49, 10.75s/it][h264 @ 0x564936eca7c0] mmco: unref short failure
 24%|██▎       | 369/1556 [1:35:24<3:02:59,  9.25s/it][h264 @ 0x5615fb618b00] mmco: unref short failure
[h264 @ 0x5615fb618b00] mmco: unref short failure
[h264 @ 0x5615fb618b00] mmco: unref short failure
[h264 @ 0x55e47233e0c0] mmco: unref short failure
 24%|██▍       | 370/1556 [1:35:39<3:35:35, 10.91s/it] 24%|██▍       | 371/1556 [1:35:45<3:05:04,  9.37s/it][h264 @ 0x55c8c4a2d0c0] mmco: unref short failure
[h264 @ 0x56492dd25740] mmco: unref short failure
[h264 @ 0x56492dd25740] mmco: unref short failure
 24%|██▍       | 372/1556 [1:36:24<6:00:26, 18.27s/it][h264 @ 0x5616034c8900] mmco: unref short failure
 24%|██▍       | 373/1556 [1:36:32<5:00:03, 15.22s/it][h264 @ 0x5615ff910680] mmco: unref short failure
[h264 @ 0x5615ff910680] mmco: unref short failure
[h264 @ 0x55c8c6e32800] mmco: unref short failure
[h264 @ 0x55c8c6e32800] mmco: unref short failure
 24%|██▍       | 374/1556 [1:36:37<4:00:24, 12.20s/it][h264 @ 0x55c8d6220c80] mmco: unref short failure
[h264 @ 0x55c8d6220c80] mmco: unref short failure
[h264 @ 0x55e47a02ec80] mmco: unref short failure
[h264 @ 0x55e47a02ec80] mmco: unref short failure
[h264 @ 0x55e4714f3540] mmco: unref short failure
[h264 @ 0x55e48392e100] mmco: unref short failure
[h264 @ 0x55e48392e100] mmco: unref short failure
[h264 @ 0x5616034c8900] mmco: unref short failure
[h264 @ 0x5616034c8900] mmco: unref short failure
[h264 @ 0x5616034c8900] mmco: unref short failure
[h264 @ 0x55c8c6406700] mmco: unref short failure
[h264 @ 0x55c8c6406700] mmco: unref short failure
[h264 @ 0x56492e3dfbc0] mmco: unref short failure
 24%|██▍       | 375/1556 [1:36:59<4:54:10, 14.95s/it] 24%|██▍       | 376/1556 [1:37:04<3:59:49, 12.19s/it][h264 @ 0x5615fb451cc0] mmco: unref short failure
 24%|██▍       | 377/1556 [1:37:10<3:19:34, 10.16s/it][h264 @ 0x55c8c988dcc0] mmco: unref short failure
[h264 @ 0x55c8c988dcc0] mmco: unref short failure
[h264 @ 0x55e473190ec0] mmco: unref short failure
[h264 @ 0x55e473190ec0] mmco: unref short failure
[h264 @ 0x56492f871380] mmco: unref short failure
[h264 @ 0x56492f871380] mmco: unref short failure
[h264 @ 0x56492fcaa300] mmco: unref short failure
 24%|██▍       | 378/1556 [1:37:20<3:21:01, 10.24s/it][h264 @ 0x55c8d2f30140] mmco: unref short failure
[h264 @ 0x55c8d2f30140] mmco: unref short failure
[h264 @ 0x56160f9f3d40] mmco: unref short failure
[h264 @ 0x56160f9f3d40] mmco: unref short failure
 24%|██▍       | 379/1556 [1:37:26<2:51:59,  8.77s/it][h264 @ 0x55e473e8c440] mmco: unref short failure
[h264 @ 0x55c8ca2a5ec0] mmco: unref short failure
[h264 @ 0x564934dccb40] mmco: unref short failure
[h264 @ 0x564934dccb40] mmco: unref short failure
[h264 @ 0x55c8c5ce6d40] mmco: unref short failure
[h264 @ 0x55c8c5ce6d40] mmco: unref short failure
[h264 @ 0x56492daee540] mmco: unref short failure
[h264 @ 0x56492daee540] mmco: unref short failure
[h264 @ 0x5649328922c0] mmco: unref short failure
 24%|██▍       | 380/1556 [1:38:02<5:34:48, 17.08s/it][h264 @ 0x564932529e00] mmco: unref short failure
[h264 @ 0x5649330bba40] mmco: unref short failure
 24%|██▍       | 381/1556 [1:38:13<4:55:36, 15.10s/it] 25%|██▍       | 382/1556 [1:38:16<3:44:43, 11.48s/it][h264 @ 0x56492da82140] mmco: unref short failure
[h264 @ 0x56492da82140] mmco: unref short failure
 25%|██▍       | 383/1556 [1:38:21<3:10:13,  9.73s/it] 25%|██▍       | 384/1556 [1:38:24<2:27:32,  7.55s/it] 25%|██▍       | 385/1556 [1:38:26<1:57:18,  6.01s/it] 25%|██▍       | 386/1556 [1:38:28<1:35:58,  4.92s/it] 25%|██▍       | 387/1556 [1:38:31<1:20:50,  4.15s/it] 25%|██▍       | 388/1556 [1:38:34<1:17:45,  3.99s/it]/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x561671173340] mmco: unref short failure
[h264 @ 0x561671173340] mmco: unref short failure
[h264 @ 0x55e4fa134340] mmco: unref short failure
[h264 @ 0x55e4fa134340] mmco: unref short failure
[h264 @ 0x55e4fac16d00] mmco: unref short failure
[h264 @ 0x55e4fac16d00] mmco: unref short failure
[h264 @ 0x5649b8ede880] mmco: unref short failure
[h264 @ 0x5649b8ede880] mmco: unref short failure
[h264 @ 0x55c938a12f00] mmco: unref short failure
[h264 @ 0x55c938a12f00] mmco: unref short failure
[h264 @ 0x5616a8e29880] mmco: unref short failure
[h264 @ 0x5616a8e29880] mmco: unref short failure
[h264 @ 0x5616711591c0] mmco: unref short failure
[h264 @ 0x5649dbdf9a40] mmco: unref short failure
[h264 @ 0x5649dbdf9a40] mmco: unref short failure
[h264 @ 0x55e52164b680] mmco: unref short failure
[h264 @ 0x55e52164b680] mmco: unref short failure
[h264 @ 0x55c971a92f00] mmco: unref short failure
[h264 @ 0x55e52149a280] mmco: unref short failure
[h264 @ 0x55c974924700] mmco: unref short failure
[h264 @ 0x5649dc2e3080] mmco: unref short failure
[h264 @ 0x55e522f60cc0] mmco: unref short failure
[h264 @ 0x55e522f60cc0] mmco: unref short failure
 25%|██▌       | 389/1556 [1:40:28<11:58:43, 36.95s/it][h264 @ 0x5649de78cd40] mmco: unref short failure
[h264 @ 0x5649de78cd40] mmco: unref short failure
[h264 @ 0x5649de2fe8c0] mmco: unref short failure
 25%|██▌       | 390/1556 [1:40:33<8:50:49, 27.32s/it] [h264 @ 0x5649dd6d50c0] mmco: unref short failure
 25%|██▌       | 391/1556 [1:40:38<6:41:34, 20.68s/it][h264 @ 0x55c938240600] mmco: unref short failure
[h264 @ 0x55c938240600] mmco: unref short failure
 25%|██▌       | 392/1556 [1:40:44<5:11:34, 16.06s/it] 25%|██▌       | 393/1556 [1:40:49<4:09:57, 12.90s/it] 25%|██▌       | 394/1556 [1:40:55<3:26:39, 10.67s/it][h264 @ 0x55c9713e6340] mmco: unref short failure
[h264 @ 0x55c9713e6340] mmco: unref short failure
[h264 @ 0x55c9713e6340] mmco: unref short failure
[h264 @ 0x5616ac59e0c0] mmco: unref short failure
[h264 @ 0x5616ac59e0c0] mmco: unref short failure
 25%|██▌       | 395/1556 [1:41:00<2:57:37,  9.18s/it][h264 @ 0x55c97231cd00] mmco: unref short failure
[h264 @ 0x55c97231cd00] mmco: unref short failure
[h264 @ 0x55c937dc35c0] mmco: unref short failure
[h264 @ 0x55c937dc35c0] mmco: unref short failure
 25%|██▌       | 396/1556 [1:41:06<2:37:25,  8.14s/it][h264 @ 0x55e4f9e0dd40] mmco: unref short failure
[h264 @ 0x55e4f9e0dd40] mmco: unref short failure
[h264 @ 0x5649b8fef400] mmco: unref short failure
[h264 @ 0x5649b8fef400] mmco: unref short failure
[h264 @ 0x5616713edc40] mmco: unref short failure
[h264 @ 0x5616713edc40] mmco: unref short failure
[h264 @ 0x5649dd6d3b00] mmco: unref short failure
[h264 @ 0x55e5214bfe40] mmco: unref short failure
[h264 @ 0x55e5214bfe40] mmco: unref short failure
[h264 @ 0x55c972af16c0] mmco: unref short failure
[h264 @ 0x55c972af16c0] mmco: unref short failure
[h264 @ 0x55c9713ae100] mmco: unref short failure
[h264 @ 0x55c9713ae100] mmco: unref short failure
[h264 @ 0x5649de62cc40] mmco: unref short failure
[h264 @ 0x5616ab615dc0] mmco: unref short failure
[h264 @ 0x5616713f18c0] mmco: unref short failure
[h264 @ 0x55e525c469c0] mmco: unref short failure
[h264 @ 0x5649b8a4ab00] mmco: unref short failure
[h264 @ 0x5649b8a4ab00] mmco: unref short failure
 26%|██▌       | 397/1556 [1:42:07<7:43:35, 24.00s/it][h264 @ 0x5616ab804b40] mmco: unref short failure
 26%|██▌       | 398/1556 [1:42:12<5:54:53, 18.39s/it] 26%|██▌       | 399/1556 [1:42:18<4:39:19, 14.49s/it]09/06/2024 21:17:59 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.2916178703308105, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.050521090626716614, 'loss_ret%tv%ta--finetune_area/loss_area': 3.0438222885131836, 'loss_ret%tv%ta--finetune_area/total_loss': 6.385961532592773}
 26%|██▌       | 400/1556 [1:42:24<3:49:08, 11.89s/it][h264 @ 0x55e52456b040] mmco: unref short failure
[h264 @ 0x55e52456b040] mmco: unref short failure
[h264 @ 0x55e52456b040] mmco: unref short failure
[h264 @ 0x55e52456b040] mmco: unref short failure
[h264 @ 0x55c9387f5680] mmco: unref short failure
 26%|██▌       | 401/1556 [1:42:29<3:13:38, 10.06s/it] 26%|██▌       | 402/1556 [1:42:35<2:47:18,  8.70s/it][h264 @ 0x5649df011780] mmco: unref short failure
[h264 @ 0x5649df011780] mmco: unref short failure
[h264 @ 0x5616a950f100] mmco: unref short failure
[h264 @ 0x5616a950f100] mmco: unref short failure
 26%|██▌       | 403/1556 [1:42:41<2:34:11,  8.02s/it][h264 @ 0x55c9730bff40] mmco: unref short failure
[h264 @ 0x55c9730bff40] mmco: unref short failure
[h264 @ 0x55c96feb82c0] mmco: unref short failure
[h264 @ 0x55c96feb82c0] mmco: unref short failure
 26%|██▌       | 404/1556 [1:42:46<2:16:43,  7.12s/it][h264 @ 0x55c96fea1cc0] mmco: unref short failure
[h264 @ 0x55c96fea1cc0] mmco: unref short failure
[h264 @ 0x5649e178f040] mmco: unref short failure
[h264 @ 0x5649dedaa000] mmco: unref short failure
[h264 @ 0x5649dedaa000] mmco: unref short failure
[h264 @ 0x55c938dcac80] mmco: unref short failure
[h264 @ 0x55c97567d800] mmco: unref short failure
[h264 @ 0x55e523c46940] mmco: unref short failure
[h264 @ 0x55e523c46940] mmco: unref short failure
[h264 @ 0x5616ae745280] mmco: unref short failure
[h264 @ 0x55e5262209c0] mmco: unref short failure
[h264 @ 0x55e5262209c0] mmco: unref short failure
[h264 @ 0x561671050d40] mmco: unref short failure
 26%|██▌       | 405/1556 [1:43:58<8:30:38, 26.62s/it] 26%|██▌       | 406/1556 [1:44:04<6:30:15, 20.36s/it][h264 @ 0x5616acc47b00] mmco: unref short failure
[h264 @ 0x5616acc47b00] mmco: unref short failure
 26%|██▌       | 407/1556 [1:44:10<5:04:35, 15.91s/it] 26%|██▌       | 408/1556 [1:44:15<4:01:23, 12.62s/it][h264 @ 0x5616b22aa400] mmco: unref short failure
 26%|██▋       | 409/1556 [1:44:20<3:20:55, 10.51s/it] 26%|██▋       | 410/1556 [1:44:26<2:54:07,  9.12s/it][h264 @ 0x55e524f95080] mmco: unref short failure
[h264 @ 0x55e524f95080] mmco: unref short failure
 26%|██▋       | 411/1556 [1:44:32<2:35:17,  8.14s/it] 26%|██▋       | 412/1556 [1:44:38<2:21:34,  7.43s/it][h264 @ 0x5649e47a2d00] mmco: unref short failure
[h264 @ 0x5616b1ae80c0] mmco: unref short failure
[h264 @ 0x5616ab1fdc40] mmco: unref short failure
[h264 @ 0x5616ab1fdc40] mmco: unref short failure
[h264 @ 0x5616ab1fdc40] mmco: unref short failure
[h264 @ 0x55e520a828c0] mmco: unref short failure
[h264 @ 0x55e520a828c0] mmco: unref short failure
 27%|██▋       | 413/1556 [1:45:30<6:35:36, 20.77s/it] 27%|██▋       | 414/1556 [1:45:35<5:09:36, 16.27s/it][h264 @ 0x55e5230acd00] mmco: unref short failure
[h264 @ 0x55e5230acd00] mmco: unref short failure
[h264 @ 0x55e5230acd00] mmco: unref short failure
[h264 @ 0x55e5230acd00] mmco: unref short failure
 27%|██▋       | 415/1556 [1:45:41<4:05:51, 12.93s/it] 27%|██▋       | 416/1556 [1:45:46<3:25:44, 10.83s/it][h264 @ 0x5649dc963500] mmco: unref short failure
[h264 @ 0x5649dc963500] mmco: unref short failure
 27%|██▋       | 417/1556 [1:45:52<2:57:29,  9.35s/it] 27%|██▋       | 418/1556 [1:45:58<2:35:29,  8.20s/it] 27%|██▋       | 419/1556 [1:46:03<2:16:41,  7.21s/it][h264 @ 0x5649db79cb40] mmco: unref short failure
[h264 @ 0x5649db79cb40] mmco: unref short failure
 27%|██▋       | 420/1556 [1:46:10<2:17:17,  7.25s/it][h264 @ 0x55c938918e80] mmco: unref short failure
[h264 @ 0x55c938918e80] mmco: unref short failure
[h264 @ 0x5616aab8ea80] mmco: unref short failure
[h264 @ 0x5616aab8ea80] mmco: unref short failure
[h264 @ 0x55e5287d0cc0] mmco: unref short failure
[h264 @ 0x55e522de8e40] mmco: unref short failure
[h264 @ 0x55e522de8e40] mmco: unref short failure
[h264 @ 0x55c97a0db340] mmco: unref short failure
[h264 @ 0x55c97a0db340] mmco: unref short failure
[h264 @ 0x55e5227d7600] mmco: unref short failure
 27%|██▋       | 421/1556 [1:47:12<7:28:23, 23.70s/it] 27%|██▋       | 422/1556 [1:47:18<5:46:15, 18.32s/it][h264 @ 0x561671743a40] mmco: unref short failure
[h264 @ 0x561671743a40] mmco: unref short failure
[h264 @ 0x561671743a40] mmco: unref short failure
[h264 @ 0x561671743a40] mmco: unref short failure
 27%|██▋       | 423/1556 [1:47:23<4:33:18, 14.47s/it][h264 @ 0x55c976a5a4c0] mmco: unref short failure
 27%|██▋       | 424/1556 [1:47:29<3:41:37, 11.75s/it][h264 @ 0x5616abf1f3c0] mmco: unref short failure
[h264 @ 0x5616abf1f3c0] mmco: unref short failure
[h264 @ 0x5649e5c02000] mmco: unref short failure
[h264 @ 0x5649e19cc540] mmco: unref short failure
[h264 @ 0x5649e19cc540] mmco: unref short failure
 27%|██▋       | 425/1556 [1:47:34<3:05:54,  9.86s/it] 27%|██▋       | 426/1556 [1:47:39<2:39:16,  8.46s/it] 27%|██▋       | 427/1556 [1:47:45<2:23:39,  7.63s/it] 28%|██▊       | 428/1556 [1:47:50<2:09:13,  6.87s/it][h264 @ 0x55e52a5561c0] mmco: unref short failure
[h264 @ 0x55c977034700] mmco: unref short failure
[h264 @ 0x5649e6869f00] mmco: unref short failure
[h264 @ 0x5649dc0f6dc0] mmco: unref short failure
[h264 @ 0x5616ae8ace40] mmco: unref short failure
[h264 @ 0x5616ae8ace40] mmco: unref short failure
[h264 @ 0x55c978a1ad00] mmco: unref short failure
[h264 @ 0x55c978a1ad00] mmco: unref short failure
[h264 @ 0x5649e70de180] mmco: unref short failure
[h264 @ 0x5649e70de180] mmco: unref short failure
[h264 @ 0x5616ab2bf9c0] mmco: unref short failure
[h264 @ 0x5616ab2bf9c0] mmco: unref short failure
[h264 @ 0x55e5241d8240] mmco: unref short failure
 28%|██▊       | 429/1556 [1:48:48<6:56:05, 22.15s/it] 28%|██▊       | 430/1556 [1:48:54<5:22:37, 17.19s/it] 28%|██▊       | 431/1556 [1:48:59<4:15:38, 13.63s/it] 28%|██▊       | 432/1556 [1:49:05<3:30:47, 11.25s/it] 28%|██▊       | 433/1556 [1:49:10<2:56:54,  9.45s/it][h264 @ 0x55e52125bb80] mmco: unref short failure
[h264 @ 0x55e52125bb80] mmco: unref short failure
 28%|██▊       | 434/1556 [1:49:16<2:36:54,  8.39s/it] 28%|██▊       | 435/1556 [1:49:21<2:19:55,  7.49s/it][h264 @ 0x5649e47f8880] mmco: unref short failure
[h264 @ 0x5649e47f8880] mmco: unref short failure
[h264 @ 0x55c971592080] mmco: unref short failure
[h264 @ 0x5649b9b1df00] mmco: unref short failure
[h264 @ 0x5649b9b1df00] mmco: unref short failure
 28%|██▊       | 436/1556 [1:49:27<2:11:23,  7.04s/it][h264 @ 0x55c9733f51c0] mmco: unref short failure
[h264 @ 0x55c9733f51c0] mmco: unref short failure
[h264 @ 0x5616aac79f80] mmco: unref short failure
[h264 @ 0x55c9771e0500] mmco: unref short failure
[h264 @ 0x5616a9832800] mmco: unref short failure
[h264 @ 0x5616a9832800] mmco: unref short failure
[h264 @ 0x55c977cf9d80] mmco: unref short failure
[h264 @ 0x55c977cf9d80] mmco: unref short failure
[h264 @ 0x55c977cf9d80] mmco: unref short failure
[h264 @ 0x55c977cf9d80] mmco: unref short failure
[h264 @ 0x55e52af5f440] mmco: unref short failure
[h264 @ 0x55e52af5f440] mmco: unref short failure
[h264 @ 0x55e5280ffb00] mmco: unref short failure
[h264 @ 0x55e5280ffb00] mmco: unref short failure
[h264 @ 0x5649e2c956c0] mmco: unref short failure
[h264 @ 0x5649e2c956c0] mmco: unref short failure
[h264 @ 0x55c97936e580] mmco: unref short failure
[h264 @ 0x55c97936e580] mmco: unref short failure
[h264 @ 0x55c97a6305c0] mmco: unref short failure
[h264 @ 0x55c97a6305c0] mmco: unref short failure
[h264 @ 0x55e4f9dd0600] mmco: unref short failure
[h264 @ 0x55e4f9dd0600] mmco: unref short failure
[h264 @ 0x55c96fe8ed80] mmco: unref short failure
[h264 @ 0x55c96fe8ed80] mmco: unref short failure
[h264 @ 0x55c97b62ff40] mmco: unref short failure
[h264 @ 0x55c97b62ff40] mmco: unref short failure
 28%|██▊       | 437/1556 [1:50:37<8:03:46, 25.94s/it][h264 @ 0x55e5225a1980] mmco: unref short failure
[h264 @ 0x55e5225a1980] mmco: unref short failure
 28%|██▊       | 438/1556 [1:50:42<6:05:53, 19.64s/it][h264 @ 0x55e52e7c3b40] mmco: unref short failure
[h264 @ 0x55e52e7c3b40] mmco: unref short failure
 28%|██▊       | 439/1556 [1:50:48<4:46:14, 15.38s/it] 28%|██▊       | 440/1556 [1:50:53<3:49:42, 12.35s/it][h264 @ 0x5649df558440] mmco: unref short failure
[h264 @ 0x5649df558440] mmco: unref short failure
 28%|██▊       | 441/1556 [1:50:59<3:13:39, 10.42s/it][h264 @ 0x5649dbc01340] mmco: unref short failure
 28%|██▊       | 442/1556 [1:51:04<2:46:29,  8.97s/it][h264 @ 0x5616ae4b6200] mmco: unref short failure
 28%|██▊       | 443/1556 [1:51:10<2:25:32,  7.85s/it] 29%|██▊       | 444/1556 [1:51:16<2:15:15,  7.30s/it][h264 @ 0x55c973bd60c0] mmco: unref short failure
[h264 @ 0x5649e7d5eb00] mmco: unref short failure
[h264 @ 0x5649e7d5eb00] mmco: unref short failure
[h264 @ 0x55c97b8d90c0] mmco: unref short failure
[h264 @ 0x55c97b8d90c0] mmco: unref short failure
[h264 @ 0x5616ae0aabc0] mmco: unref short failure
[h264 @ 0x5649e79f9fc0] mmco: unref short failure
[h264 @ 0x5649dcee89c0] mmco: unref short failure
[h264 @ 0x55e4fab433c0] mmco: unref short failure
 29%|██▊       | 445/1556 [1:52:15<7:06:04, 23.01s/it] 29%|██▊       | 446/1556 [1:52:21<5:28:15, 17.74s/it] 29%|██▊       | 447/1556 [1:52:26<4:18:00, 13.96s/it] 29%|██▉       | 448/1556 [1:52:32<3:31:52, 11.47s/it] 29%|██▉       | 449/1556 [1:52:37<2:59:21,  9.72s/it][h264 @ 0x5649eac29080] mmco: unref short failure
[h264 @ 0x5649eac29080] mmco: unref short failure
[h264 @ 0x55e52ea52800] mmco: unref short failure
09/06/2024 21:28:18 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.3218727111816406, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04726430028676987, 'loss_ret%tv%ta--finetune_area/loss_area': 3.0687460899353027, 'loss_ret%tv%ta--finetune_area/total_loss': 6.437883377075195}
[h264 @ 0x5616ad40fb00] mmco: unref short failure
[h264 @ 0x5616ad40fb00] mmco: unref short failure
 29%|██▉       | 450/1556 [1:52:43<2:38:29,  8.60s/it] 29%|██▉       | 451/1556 [1:52:49<2:20:19,  7.62s/it] 29%|██▉       | 452/1556 [1:52:54<2:08:43,  7.00s/it][h264 @ 0x55c978414a00] mmco: unref short failure
[h264 @ 0x55c978414a00] mmco: unref short failure
[h264 @ 0x5649e991e480] mmco: unref short failure
[h264 @ 0x5616ac7a3bc0] mmco: unref short failure
[h264 @ 0x5649e8808540] mmco: unref short failure
[h264 @ 0x5649e8808540] mmco: unref short failure
[h264 @ 0x5649e758f940] mmco: unref short failure
[h264 @ 0x5649e758f940] mmco: unref short failure
[h264 @ 0x55e52857d680] mmco: unref short failure
[h264 @ 0x55e52857d680] mmco: unref short failure
[h264 @ 0x55c97a042040] mmco: unref short failure
[h264 @ 0x55c97b7f6540] mmco: unref short failure
[h264 @ 0x55c97b7f6540] mmco: unref short failure
[h264 @ 0x56167088b040] mmco: unref short failure
[h264 @ 0x56167088b040] mmco: unref short failure
[h264 @ 0x5616abbbd100] mmco: unref short failure
[h264 @ 0x5616abbbd100] mmco: unref short failure
[h264 @ 0x55c97c368300] mmco: unref short failure
[h264 @ 0x55c97c368300] mmco: unref short failure
[h264 @ 0x55c971d9e000] mmco: unref short failure
[h264 @ 0x5616abd49b00] mmco: unref short failure
[h264 @ 0x55e524deeec0] mmco: unref short failure
[h264 @ 0x55e524deeec0] mmco: unref short failure
not have audios 7wavFXW3AFw.7
 29%|██▉       | 453/1556 [1:54:03<7:51:24, 25.64s/it] 29%|██▉       | 454/1556 [1:54:08<5:58:18, 19.51s/it][h264 @ 0x55c97c6b9e00] mmco: unref short failure
[h264 @ 0x55c97c6b9e00] mmco: unref short failure
 29%|██▉       | 455/1556 [1:54:15<4:45:14, 15.54s/it][h264 @ 0x55e528f27fc0] mmco: unref short failure
[h264 @ 0x55e528f27fc0] mmco: unref short failure
 29%|██▉       | 456/1556 [1:54:20<3:47:18, 12.40s/it] 29%|██▉       | 457/1556 [1:54:25<3:07:04, 10.21s/it][h264 @ 0x5616a8c8cc80] mmco: unref short failure
[h264 @ 0x55e52852a640] mmco: unref short failure
[h264 @ 0x55e52852a640] mmco: unref short failure
 29%|██▉       | 458/1556 [1:54:30<2:40:30,  8.77s/it] 29%|██▉       | 459/1556 [1:54:36<2:21:12,  7.72s/it] 30%|██▉       | 460/1556 [1:54:41<2:09:17,  7.08s/it][h264 @ 0x55c97ec29100] mmco: unref short failure
[h264 @ 0x55e5246d08c0] mmco: unref short failure
[h264 @ 0x55e51fc2b8c0] mmco: unref short failure
[h264 @ 0x55e51fc2b8c0] mmco: unref short failure
[h264 @ 0x5649dfcfb0c0] mmco: unref short failure
[h264 @ 0x5649dfcfb0c0] mmco: unref short failure
[h264 @ 0x55c975feaf80] mmco: unref short failure
[h264 @ 0x55c975feaf80] mmco: unref short failure
[h264 @ 0x5616b9817780] mmco: unref short failure
[h264 @ 0x5616b9817780] mmco: unref short failure
[h264 @ 0x5616a910ff00] mmco: unref short failure
[h264 @ 0x5616a910ff00] mmco: unref short failure
[h264 @ 0x5616b3836500] mmco: unref short failure
[h264 @ 0x55c980427180] mmco: unref short failure
 30%|██▉       | 461/1556 [1:55:45<7:19:38, 24.09s/it][h264 @ 0x5649dad13cc0] mmco: unref short failure
[h264 @ 0x5616b956bc40] mmco: unref short failure
 30%|██▉       | 462/1556 [1:55:50<5:35:42, 18.41s/it] 30%|██▉       | 463/1556 [1:55:55<4:22:29, 14.41s/it][h264 @ 0x5649dc2e0880] mmco: unref short failure
 30%|██▉       | 464/1556 [1:56:01<3:36:50, 11.91s/it] 30%|██▉       | 465/1556 [1:56:06<2:57:59,  9.79s/it][h264 @ 0x5616b4f65500] mmco: unref short failure
[h264 @ 0x5616b4f65500] mmco: unref short failure
 30%|██▉       | 466/1556 [1:56:12<2:36:50,  8.63s/it] 30%|███       | 467/1556 [1:56:17<2:18:09,  7.61s/it][h264 @ 0x55c97069b7c0] mmco: unref short failure
 30%|███       | 468/1556 [1:56:23<2:05:59,  6.95s/it][h264 @ 0x55e52e36e300] mmco: unref short failure
[h264 @ 0x55e52e36e300] mmco: unref short failure
[h264 @ 0x55c979c1c4c0] mmco: unref short failure
[h264 @ 0x55e52fc55c00] mmco: unref short failure
[h264 @ 0x5616b7ed7900] mmco: unref short failure
[h264 @ 0x55c97dfc4940] mmco: unref short failure
[h264 @ 0x55c97dfc4940] mmco: unref short failure
[h264 @ 0x55c971827780] mmco: unref short failure
[h264 @ 0x55c971827780] mmco: unref short failure
[h264 @ 0x5616b6fa4f00] mmco: unref short failure
[h264 @ 0x5616b6fa4f00] mmco: unref short failure
[h264 @ 0x55c9783e7040] mmco: unref short failure
[h264 @ 0x5649e5160c40] mmco: unref short failure
[h264 @ 0x5649e5160c40] mmco: unref short failure
[h264 @ 0x5616b7db0300] mmco: unref short failure
[h264 @ 0x5616b7db0300] mmco: unref short failure
[h264 @ 0x5616b7db0300] mmco: unref short failure
[h264 @ 0x5616b7db0300] mmco: unref short failure
[h264 @ 0x55e528b0d000] mmco: unref short failure
[h264 @ 0x55c97d295ec0] mmco: unref short failure
[h264 @ 0x55c97d295ec0] mmco: unref short failure
[h264 @ 0x55c97d295ec0] mmco: unref short failure
[h264 @ 0x55c97d295ec0] mmco: unref short failure
[h264 @ 0x5649e202b4c0] mmco: unref short failure
[h264 @ 0x55c9782546c0] mmco: unref short failure
[h264 @ 0x55c9782546c0] mmco: unref short failure
 30%|███       | 469/1556 [1:57:24<6:59:59, 23.18s/it][h264 @ 0x55c971f8d7c0] mmco: unref short failure
 30%|███       | 470/1556 [1:57:29<5:20:36, 17.71s/it][h264 @ 0x5649e2aa1e00] mmco: unref short failure
 30%|███       | 471/1556 [1:57:34<4:11:20, 13.90s/it][h264 @ 0x55c97d29ba00] mmco: unref short failure
 30%|███       | 472/1556 [1:57:40<3:29:21, 11.59s/it] 30%|███       | 473/1556 [1:57:45<2:55:37,  9.73s/it][h264 @ 0x5616b7c17940] mmco: unref short failure
[h264 @ 0x5616b7c17940] mmco: unref short failure
[h264 @ 0x55e52f958b00] mmco: unref short failure
 30%|███       | 474/1556 [1:57:51<2:32:30,  8.46s/it] 31%|███       | 475/1556 [1:57:59<2:28:19,  8.23s/it][h264 @ 0x5616b3698340] mmco: unref short failure
[h264 @ 0x5616b3698340] mmco: unref short failure
 31%|███       | 476/1556 [1:58:04<2:13:21,  7.41s/it][h264 @ 0x55c9750f14c0] mmco: unref short failure
[h264 @ 0x5616a8a0cd00] mmco: unref short failure
[h264 @ 0x55c97fe3b4c0] mmco: unref short failure
[h264 @ 0x55c97fe3b4c0] mmco: unref short failure
[h264 @ 0x55c981a70d40] mmco: unref short failure
[h264 @ 0x55c981a70d40] mmco: unref short failure
[h264 @ 0x5616b31b3fc0] mmco: unref short failure
[h264 @ 0x55e52c6fcac0] mmco: unref short failure
[h264 @ 0x55e52c6fcac0] mmco: unref short failure
[h264 @ 0x55e52c6fcac0] mmco: unref short failure
 31%|███       | 477/1556 [1:59:02<6:43:59, 22.47s/it][h264 @ 0x5616b2cab480] mmco: unref short failure
[h264 @ 0x5616b2cab480] mmco: unref short failure
[h264 @ 0x55e5222be840] mmco: unref short failure
[h264 @ 0x55e5222be840] mmco: unref short failure
 31%|███       | 478/1556 [1:59:07<5:12:41, 17.40s/it][h264 @ 0x55c970b2b000] mmco: unref short failure
[h264 @ 0x5649db957a80] mmco: unref short failure
[h264 @ 0x5649db957a80] mmco: unref short failure
 31%|███       | 479/1556 [1:59:12<4:05:17, 13.66s/it][h264 @ 0x55e52c44a900] mmco: unref short failure
 31%|███       | 480/1556 [1:59:18<3:21:06, 11.21s/it] 31%|███       | 481/1556 [1:59:24<2:55:54,  9.82s/it][h264 @ 0x55c971f01280] mmco: unref short failure
[h264 @ 0x55e52c14da80] mmco: unref short failure
 31%|███       | 482/1556 [1:59:32<2:44:07,  9.17s/it][h264 @ 0x55e5201bc340] mmco: unref short failure
[h264 @ 0x55e5201bc340] mmco: unref short failure
 31%|███       | 483/1556 [1:59:38<2:26:28,  8.19s/it][h264 @ 0x55c9713d59c0] mmco: unref short failure
[h264 @ 0x55c9713d59c0] mmco: unref short failure
[h264 @ 0x55c97f697400] mmco: unref short failure
 31%|███       | 484/1556 [1:59:43<2:09:44,  7.26s/it][h264 @ 0x5616b4640300] mmco: unref short failure
[h264 @ 0x5616ba29c1c0] mmco: unref short failure
[h264 @ 0x5649ec399e80] mmco: unref short failure
[h264 @ 0x5649ec399e80] mmco: unref short failure
[h264 @ 0x5649e5160c40] mmco: unref short failure
[h264 @ 0x5649dccb8bc0] mmco: unref short failure
[h264 @ 0x55e52dff9f80] mmco: unref short failure
[h264 @ 0x55e52dff9f80] mmco: unref short failure
[h264 @ 0x55e52940de80] mmco: unref short failure
[h264 @ 0x55c97c353c40] mmco: unref short failure
 31%|███       | 485/1556 [2:00:37<6:20:48, 21.33s/it] 31%|███       | 486/1556 [2:00:43<4:57:10, 16.66s/it][h264 @ 0x55e525db7080] mmco: unref short failure
[h264 @ 0x55e525db7080] mmco: unref short failure
[h264 @ 0x5616b4fae800] mmco: unref short failure
[h264 @ 0x5616b4fae800] mmco: unref short failure
 31%|███▏      | 487/1556 [2:00:48<3:57:50, 13.35s/it][h264 @ 0x55e52cb985c0] mmco: unref short failure
[h264 @ 0x55e52cb985c0] mmco: unref short failure
[h264 @ 0x5649eaf8fa40] mmco: unref short failure
[h264 @ 0x5649eaf8fa40] mmco: unref short failure
 31%|███▏      | 488/1556 [2:00:53<3:12:46, 10.83s/it] 31%|███▏      | 489/1556 [2:00:58<2:38:00,  8.89s/it] 31%|███▏      | 490/1556 [2:01:03<2:16:47,  7.70s/it] 32%|███▏      | 491/1556 [2:01:08<2:02:12,  6.88s/it][h264 @ 0x55e531239680] mmco: unref short failure
[h264 @ 0x55e531239680] mmco: unref short failure
 32%|███▏      | 492/1556 [2:01:15<2:04:37,  7.03s/it][h264 @ 0x55c97ed81180] mmco: unref short failure
[h264 @ 0x55e52dcf6cc0] mmco: unref short failure
[h264 @ 0x5616b8436140] mmco: unref short failure
[h264 @ 0x5649e4ccd0c0] mmco: unref short failure
[h264 @ 0x5616bab12080] mmco: unref short failure
[h264 @ 0x55c97b7f2600] mmco: unref short failure
[h264 @ 0x55c97b7f2600] mmco: unref short failure
[h264 @ 0x55c973d7a600] mmco: unref short failure
[h264 @ 0x55c973d7a600] mmco: unref short failure
[h264 @ 0x55e52c07ae00] mmco: unref short failure
[h264 @ 0x55c9712f5900] mmco: unref short failure
[h264 @ 0x55e521582f80] mmco: unref short failure
[h264 @ 0x55e521582f80] mmco: unref short failure
 32%|███▏      | 493/1556 [2:02:11<6:25:25, 21.76s/it] 32%|███▏      | 494/1556 [2:02:17<4:59:59, 16.95s/it][h264 @ 0x5616a8fb8040] mmco: unref short failure
[h264 @ 0x55e525aa45c0] mmco: unref short failure
 32%|███▏      | 495/1556 [2:02:22<3:57:16, 13.42s/it] 32%|███▏      | 496/1556 [2:02:28<3:16:32, 11.13s/it] 32%|███▏      | 497/1556 [2:02:33<2:47:24,  9.48s/it] 32%|███▏      | 498/1556 [2:02:39<2:26:41,  8.32s/it][h264 @ 0x5649e891ea80] mmco: unref short failure
 32%|███▏      | 499/1556 [2:02:45<2:12:35,  7.53s/it]09/06/2024 21:38:26 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.543051242828369, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.05317285284399986, 'loss_ret%tv%ta--finetune_area/loss_area': 3.319859027862549, 'loss_ret%tv%ta--finetune_area/total_loss': 6.916083335876465}
[h264 @ 0x561671bd2b40] mmco: unref short failure
[h264 @ 0x561671bd2b40] mmco: unref short failure
 32%|███▏      | 500/1556 [2:02:50<2:00:27,  6.84s/it][h264 @ 0x55e52aee5c40] mmco: unref short failure
[h264 @ 0x55e520648b80] mmco: unref short failure
[h264 @ 0x55e520648b80] mmco: unref short failure
[h264 @ 0x55e533e85100] mmco: unref short failure
[h264 @ 0x55e533e85100] mmco: unref short failure
[h264 @ 0x55c97069b9c0] mmco: unref short failure
[h264 @ 0x55c97069b9c0] mmco: unref short failure
[h264 @ 0x55c97472b000] mmco: unref short failure
[h264 @ 0x55e52a292600] mmco: unref short failure
[h264 @ 0x55e52aa52d80] mmco: unref short failure
[h264 @ 0x55c97fe3b4c0] mmco: unref short failure
[h264 @ 0x55c981b1aec0] mmco: unref short failure
[h264 @ 0x55c981b1aec0] mmco: unref short failure
 32%|███▏      | 501/1556 [2:03:50<6:42:48, 22.91s/it][h264 @ 0x5649db674000] mmco: unref short failure
[h264 @ 0x5616bc68ba00] mmco: unref short failure
 32%|███▏      | 502/1556 [2:03:56<5:08:46, 17.58s/it][h264 @ 0x55c977f26300] mmco: unref short failure
[h264 @ 0x55c977f26300] mmco: unref short failure
 32%|███▏      | 503/1556 [2:04:01<4:04:28, 13.93s/it][h264 @ 0x5649ee8c5800] mmco: unref short failure
[h264 @ 0x5649ee8c5800] mmco: unref short failure
 32%|███▏      | 504/1556 [2:04:06<3:17:36, 11.27s/it] 32%|███▏      | 505/1556 [2:04:11<2:45:57,  9.47s/it] 33%|███▎      | 506/1556 [2:04:17<2:24:50,  8.28s/it] 33%|███▎      | 507/1556 [2:04:22<2:08:08,  7.33s/it] 33%|███▎      | 508/1556 [2:04:28<2:00:19,  6.89s/it][h264 @ 0x55e5296d7280] mmco: unref short failure
[h264 @ 0x55c97cdc1780] mmco: unref short failure
[h264 @ 0x55c97f89fd00] mmco: unref short failure
[h264 @ 0x55c97f89fd00] mmco: unref short failure
[h264 @ 0x5616bae12040] mmco: unref short failure
[h264 @ 0x5616bae12040] mmco: unref short failure
[h264 @ 0x55c976603b40] mmco: unref short failure
[h264 @ 0x55c976603b40] mmco: unref short failure
[h264 @ 0x55e5337bb880] mmco: unref short failure
[h264 @ 0x55e5337bb880] mmco: unref short failure
[h264 @ 0x55e4fa640280] mmco: unref short failure
[h264 @ 0x55e4fa640280] mmco: unref short failure
[h264 @ 0x5616aad1eb80] mmco: unref short failure
[h264 @ 0x5616aad1eb80] mmco: unref short failure
[h264 @ 0x55e52844f9c0] mmco: unref short failure
[h264 @ 0x55e52844f9c0] mmco: unref short failure
 33%|███▎      | 509/1556 [2:05:35<7:14:40, 24.91s/it] 33%|███▎      | 510/1556 [2:05:40<5:30:25, 18.95s/it] 33%|███▎      | 511/1556 [2:05:45<4:17:56, 14.81s/it] 33%|███▎      | 512/1556 [2:05:50<3:27:23, 11.92s/it] 33%|███▎      | 513/1556 [2:05:55<2:53:09,  9.96s/it] 33%|███▎      | 514/1556 [2:06:01<2:29:08,  8.59s/it][h264 @ 0x5616af953700] mmco: unref short failure
[h264 @ 0x5616af953700] mmco: unref short failure
[h264 @ 0x55e534c814c0] mmco: unref short failure
[h264 @ 0x5649edf2b980] mmco: unref short failure
[h264 @ 0x5649edf2b980] mmco: unref short failure
 33%|███▎      | 515/1556 [2:06:06<2:12:40,  7.65s/it] 33%|███▎      | 516/1556 [2:06:13<2:06:18,  7.29s/it][h264 @ 0x55e532ca3240] mmco: unref short failure
[h264 @ 0x55e532ca3240] mmco: unref short failure
[h264 @ 0x55e52c0e4980] mmco: unref short failure
[h264 @ 0x55e52c0e4980] mmco: unref short failure
[h264 @ 0x5616b5b8ca80] mmco: unref short failure
[h264 @ 0x5649e552c180] mmco: unref short failure
[h264 @ 0x5649e552c180] mmco: unref short failure
 33%|███▎      | 517/1556 [2:07:19<7:12:50, 25.00s/it] 33%|███▎      | 518/1556 [2:07:25<5:31:09, 19.14s/it][h264 @ 0x5616bb014b40] mmco: unref short failure
 33%|███▎      | 519/1556 [2:07:31<4:22:40, 15.20s/it] 33%|███▎      | 520/1556 [2:07:35<3:28:23, 12.07s/it][h264 @ 0x55e5256af280] mmco: unref short failure
 33%|███▎      | 521/1556 [2:07:41<2:54:56, 10.14s/it][h264 @ 0x5616bc7e5640] mmco: unref short failure
[h264 @ 0x5616bc7e5640] mmco: unref short failure
[h264 @ 0x5649e7544780] mmco: unref short failure
 34%|███▎      | 522/1556 [2:07:46<2:28:35,  8.62s/it][h264 @ 0x5616b9478a40] mmco: unref short failure
 34%|███▎      | 523/1556 [2:07:51<2:08:10,  7.44s/it][h264 @ 0x5616b954e1c0] mmco: unref short failure
[h264 @ 0x5616bac60980] mmco: unref short failure
[h264 @ 0x55c97d32ba80] mmco: unref short failure
[h264 @ 0x55c97d32ba80] mmco: unref short failure
 34%|███▎      | 524/1556 [2:07:55<1:53:15,  6.58s/it][h264 @ 0x55c97a6270c0] mmco: unref short failure
[h264 @ 0x55c938556600] mmco: unref short failure
[h264 @ 0x55e534a64640] mmco: unref short failure
[h264 @ 0x55e534a64640] mmco: unref short failure
[h264 @ 0x55e52e1be140] mmco: unref short failure
[h264 @ 0x55e52e1be140] mmco: unref short failure
[h264 @ 0x55e529a63e00] mmco: unref short failure
[h264 @ 0x55e529a63e00] mmco: unref short failure
[h264 @ 0x5649ec60d140] mmco: unref short failure
[h264 @ 0x55c972560680] mmco: unref short failure
[h264 @ 0x5616b59b8a40] mmco: unref short failure
[h264 @ 0x5616b59b8a40] mmco: unref short failure
[h264 @ 0x55e52e1bdcc0] mmco: unref short failure
[h264 @ 0x55e52e1bdcc0] mmco: unref short failure
 34%|███▎      | 525/1556 [2:08:59<6:47:32, 23.72s/it][h264 @ 0x55c9863b0d00] mmco: unref short failure
 34%|███▍      | 526/1556 [2:09:04<5:10:32, 18.09s/it] 34%|███▍      | 527/1556 [2:09:09<4:05:08, 14.29s/it][h264 @ 0x55c987e0b300] mmco: unref short failure
[h264 @ 0x55c987e0b300] mmco: unref short failure
[h264 @ 0x5616bac60980] mmco: unref short failure
[h264 @ 0x5616bac60980] mmco: unref short failure
 34%|███▍      | 528/1556 [2:09:15<3:19:01, 11.62s/it][h264 @ 0x55c983af6940] mmco: unref short failure
[h264 @ 0x55c983af6940] mmco: unref short failure
 34%|███▍      | 529/1556 [2:09:20<2:47:29,  9.79s/it] 34%|███▍      | 530/1556 [2:09:26<2:25:14,  8.49s/it] 34%|███▍      | 531/1556 [2:09:31<2:08:32,  7.52s/it][h264 @ 0x55c978d328c0] mmco: unref short failure
[h264 @ 0x55c978d328c0] mmco: unref short failure
 34%|███▍      | 532/1556 [2:09:36<1:57:56,  6.91s/it][h264 @ 0x5649dbd31280] mmco: unref short failure
[h264 @ 0x5649dbd31280] mmco: unref short failure
[h264 @ 0x5616b55e64c0] mmco: unref short failure
[h264 @ 0x55c980f3ca00] mmco: unref short failure
[h264 @ 0x55c97cb273c0] mmco: unref short failure
[h264 @ 0x55c96fc91f80] mmco: unref short failure
[h264 @ 0x55c96fc91f80] mmco: unref short failure
[h264 @ 0x55e52fb29fc0] mmco: unref short failure
[h264 @ 0x55e52fb29fc0] mmco: unref short failure
[h264 @ 0x5649ec1a7a00] mmco: unref short failure
[h264 @ 0x55e53327b680] mmco: unref short failure
[h264 @ 0x5649e497c740] mmco: unref short failure
[h264 @ 0x5616be407ec0] mmco: unref short failure
[h264 @ 0x5649e96b41c0] mmco: unref short failure
[h264 @ 0x5649e96b41c0] mmco: unref short failure
[h264 @ 0x55e5221b94c0] mmco: unref short failure
[h264 @ 0x55e5221b94c0] mmco: unref short failure
 34%|███▍      | 533/1556 [2:10:44<7:05:56, 24.98s/it][h264 @ 0x55c98658af40] mmco: unref short failure
[h264 @ 0x5616bd3ade80] mmco: unref short failure
 34%|███▍      | 534/1556 [2:10:49<5:26:04, 19.14s/it] 34%|███▍      | 535/1556 [2:10:54<4:13:35, 14.90s/it] 34%|███▍      | 536/1556 [2:11:00<3:26:35, 12.15s/it][h264 @ 0x5649b92d9a40] mmco: unref short failure
[h264 @ 0x5649b92d9a40] mmco: unref short failure
[h264 @ 0x55c98557a080] mmco: unref short failure
[h264 @ 0x5649dc48ec80] mmco: unref short failure
 35%|███▍      | 537/1556 [2:11:05<2:51:14, 10.08s/it] 35%|███▍      | 538/1556 [2:11:11<2:28:38,  8.76s/it][h264 @ 0x5649eec73340] mmco: unref short failure
[h264 @ 0x5649eec73340] mmco: unref short failure
 35%|███▍      | 539/1556 [2:11:16<2:10:38,  7.71s/it][h264 @ 0x55c97f09fc80] mmco: unref short failure
[h264 @ 0x5616b90b2180] mmco: unref short failure
 35%|███▍      | 540/1556 [2:11:22<2:00:16,  7.10s/it][h264 @ 0x55c981c9a080] mmco: unref short failure
[h264 @ 0x55e52d067780] mmco: unref short failure
[h264 @ 0x55e52d067780] mmco: unref short failure
[h264 @ 0x5616bdcf3380] mmco: unref short failure
[h264 @ 0x55c9386b0dc0] mmco: unref short failure
[h264 @ 0x5649ec6bf000] mmco: unref short failure
 35%|███▍      | 541/1556 [2:12:22<6:31:36, 23.15s/it][h264 @ 0x5616acd31c80] mmco: unref short failure
[h264 @ 0x5616acd31c80] mmco: unref short failure
[h264 @ 0x5649ec33c740] mmco: unref short failure
[h264 @ 0x5649ec33c740] mmco: unref short failure
 35%|███▍      | 542/1556 [2:12:29<5:07:28, 18.19s/it][h264 @ 0x5616b90b1f80] mmco: unref short failure
[h264 @ 0x5616b90b1f80] mmco: unref short failure
 35%|███▍      | 543/1556 [2:12:34<4:02:27, 14.36s/it][h264 @ 0x55e5289963c0] mmco: unref short failure
[h264 @ 0x55e5289963c0] mmco: unref short failure
[h264 @ 0x55e531de4080] mmco: unref short failure
 35%|███▍      | 544/1556 [2:12:39<3:14:39, 11.54s/it][h264 @ 0x5649db2ec7c0] mmco: unref short failure
[h264 @ 0x55c96f8f7100] mmco: unref short failure
[h264 @ 0x55c96f8f7100] mmco: unref short failure
 35%|███▌      | 545/1556 [2:12:45<2:43:35,  9.71s/it][h264 @ 0x55c98756acc0] mmco: unref short failure
[h264 @ 0x55c98756acc0] mmco: unref short failure
 35%|███▌      | 546/1556 [2:12:50<2:20:26,  8.34s/it] 35%|███▌      | 547/1556 [2:12:55<2:04:35,  7.41s/it] 35%|███▌      | 548/1556 [2:13:00<1:53:05,  6.73s/it][h264 @ 0x5616ab75c780] mmco: unref short failure
[h264 @ 0x5616ab75c780] mmco: unref short failure
[h264 @ 0x5616713bda80] mmco: unref short failure
[h264 @ 0x55c980f3c7c0] mmco: unref short failure
[h264 @ 0x55c938a66ac0] mmco: unref short failure
[h264 @ 0x55c938a66ac0] mmco: unref short failure
[h264 @ 0x5649dda3d240] mmco: unref short failure
[h264 @ 0x5616a9cb6b00] mmco: unref short failure
[h264 @ 0x5616a9cb6b00] mmco: unref short failure
[h264 @ 0x55e522abcb00] mmco: unref short failure
 35%|███▌      | 549/1556 [2:13:56<5:59:24, 21.41s/it]09/06/2024 21:49:37 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.2990756034851074, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04995039850473404, 'loss_ret%tv%ta--finetune_area/loss_area': 3.042966365814209, 'loss_ret%tv%ta--finetune_area/total_loss': 6.391992568969727}
 35%|███▌      | 550/1556 [2:14:02<4:41:05, 16.76s/it] 35%|███▌      | 551/1556 [2:14:08<3:44:44, 13.42s/it] 35%|███▌      | 552/1556 [2:14:14<3:07:56, 11.23s/it][h264 @ 0x55e5289963c0] mmco: unref short failure
[h264 @ 0x55e5289963c0] mmco: unref short failure
 36%|███▌      | 553/1556 [2:14:19<2:36:04,  9.34s/it] 36%|███▌      | 554/1556 [2:14:24<2:17:52,  8.26s/it] 36%|███▌      | 555/1556 [2:14:30<2:05:40,  7.53s/it][h264 @ 0x5616aeae46c0] mmco: unref short failure
[h264 @ 0x55e52634b8c0] mmco: unref short failure
[h264 @ 0x55e52634b8c0] mmco: unref short failure
 36%|███▌      | 556/1556 [2:14:35<1:53:50,  6.83s/it][h264 @ 0x55e52aab6240] mmco: unref short failure
[h264 @ 0x5616aab62c40] mmco: unref short failure
[h264 @ 0x5616aab62c40] mmco: unref short failure
[h264 @ 0x55c93848b4c0] mmco: unref short failure
[h264 @ 0x5649dbf6d080] mmco: unref short failure
[h264 @ 0x55e520cfe440] mmco: unref short failure
[h264 @ 0x55e520cfe440] mmco: unref short failure
[h264 @ 0x55c9879ad740] mmco: unref short failure
[h264 @ 0x5649e7053080] mmco: unref short failure
[h264 @ 0x55c97881dcc0] mmco: unref short failure
[h264 @ 0x5649e2f15a00] mmco: unref short failure
[h264 @ 0x55c971a9f940] mmco: unref short failure
[h264 @ 0x55c971a9f940] mmco: unref short failure
 36%|███▌      | 557/1556 [2:15:33<6:07:46, 22.09s/it] 36%|███▌      | 558/1556 [2:15:38<4:43:03, 17.02s/it][h264 @ 0x55e525c7dbc0] mmco: unref short failure
[h264 @ 0x55e525c7dbc0] mmco: unref short failure
 36%|███▌      | 559/1556 [2:15:43<3:43:34, 13.45s/it][h264 @ 0x55e52f02d800] mmco: unref short failure
[h264 @ 0x55e52f02d800] mmco: unref short failure
[h264 @ 0x55c971c7cf40] mmco: unref short failure
 36%|███▌      | 560/1556 [2:15:49<3:05:20, 11.16s/it][h264 @ 0x5616ad6900c0] mmco: unref short failure
 36%|███▌      | 561/1556 [2:15:54<2:35:56,  9.40s/it] 36%|███▌      | 562/1556 [2:16:00<2:14:03,  8.09s/it][h264 @ 0x55c978fb5140] mmco: unref short failure
[h264 @ 0x55c978fb5140] mmco: unref short failure
 36%|███▌      | 563/1556 [2:16:05<2:02:00,  7.37s/it][h264 @ 0x55e520a83540] mmco: unref short failure
[h264 @ 0x55e520a83540] mmco: unref short failure
 36%|███▌      | 564/1556 [2:16:11<1:52:15,  6.79s/it][h264 @ 0x5616b93c1040] mmco: unref short failure
[h264 @ 0x5616b93c1040] mmco: unref short failure
[h264 @ 0x55c97881da40] mmco: unref short failure
[h264 @ 0x5616b87fd5c0] mmco: unref short failure
[h264 @ 0x5616bb4af3c0] mmco: unref short failure
[h264 @ 0x5616bb4af3c0] mmco: unref short failure
[h264 @ 0x55c938cbe940] mmco: unref short failure
[h264 @ 0x55c938cbe940] mmco: unref short failure
[h264 @ 0x55c938cbe940] mmco: unref short failure
[h264 @ 0x55c938cbe940] mmco: unref short failure
[h264 @ 0x5616ba19f940] mmco: unref short failure
[h264 @ 0x5616ba19f940] mmco: unref short failure
[h264 @ 0x5616715da700] mmco: unref short failure
[h264 @ 0x5616715da700] mmco: unref short failure
[h264 @ 0x5616715da700] mmco: unref short failure
[h264 @ 0x5616715da700] mmco: unref short failure
[h264 @ 0x5649de187140] mmco: unref short failure
 36%|███▋      | 565/1556 [2:17:08<6:04:50, 22.09s/it][h264 @ 0x55e533b3b140] mmco: unref short failure
[h264 @ 0x55e533b3b140] mmco: unref short failure
 36%|███▋      | 566/1556 [2:17:14<4:41:20, 17.05s/it][h264 @ 0x55c979c6f300] mmco: unref short failure
[h264 @ 0x55e5244dff40] mmco: unref short failure
[h264 @ 0x55e5244dff40] mmco: unref short failure
 36%|███▋      | 567/1556 [2:17:19<3:42:57, 13.53s/it][h264 @ 0x5616ab585a40] mmco: unref short failure
[h264 @ 0x5616ab585a40] mmco: unref short failure
[h264 @ 0x55e4fa853940] mmco: unref short failure
[h264 @ 0x55e4fa853940] mmco: unref short failure
 37%|███▋      | 568/1556 [2:17:25<3:04:59, 11.23s/it] 37%|███▋      | 569/1556 [2:17:30<2:35:55,  9.48s/it][h264 @ 0x5616b93c0e00] mmco: unref short failure
[h264 @ 0x55e4f980ee80] mmco: unref short failure
 37%|███▋      | 570/1556 [2:17:36<2:16:06,  8.28s/it][h264 @ 0x5649dad91100] mmco: unref short failure
[h264 @ 0x5649dad91100] mmco: unref short failure
 37%|███▋      | 571/1556 [2:17:42<2:03:20,  7.51s/it][h264 @ 0x5616a912e000] mmco: unref short failure
 37%|███▋      | 572/1556 [2:17:47<1:52:18,  6.85s/it][h264 @ 0x5616ac467d40] mmco: unref short failure
[h264 @ 0x5616ac467d40] mmco: unref short failure
[h264 @ 0x55c974292bc0] mmco: unref short failure
[h264 @ 0x55c974292bc0] mmco: unref short failure
[h264 @ 0x55c97a052500] mmco: unref short failure
[h264 @ 0x5616aeae4440] mmco: unref short failure
[h264 @ 0x5616aeae4440] mmco: unref short failure
[h264 @ 0x55e52fb74700] mmco: unref short failure
[h264 @ 0x55e52fb74700] mmco: unref short failure
[h264 @ 0x55e4fa468400] mmco: unref short failure
[h264 @ 0x55c97aaa4c40] mmco: unref short failure
[h264 @ 0x55c97aaa4c40] mmco: unref short failure
 37%|███▋      | 573/1556 [2:18:46<6:11:15, 22.66s/it] 37%|███▋      | 574/1556 [2:18:52<4:48:18, 17.62s/it][h264 @ 0x55e5237b3ec0] mmco: unref short failure
[h264 @ 0x55e5237b3ec0] mmco: unref short failure
[h264 @ 0x5616a9eb11c0] mmco: unref short failure
[h264 @ 0x5616a9eb11c0] mmco: unref short failure
 37%|███▋      | 575/1556 [2:18:58<3:49:00, 14.01s/it] 37%|███▋      | 576/1556 [2:19:03<3:06:04, 11.39s/it] 37%|███▋      | 577/1556 [2:19:08<2:36:29,  9.59s/it] 37%|███▋      | 578/1556 [2:19:14<2:14:31,  8.25s/it][h264 @ 0x55e523383b00] mmco: unref short failure
 37%|███▋      | 579/1556 [2:19:19<1:59:55,  7.36s/it] 37%|███▋      | 580/1556 [2:19:25<1:54:52,  7.06s/it][h264 @ 0x5616ace0f580] mmco: unref short failure
[h264 @ 0x5649b992b480] mmco: unref short failure
[h264 @ 0x5649b992b480] mmco: unref short failure
[h264 @ 0x55e4fa41bc80] mmco: unref short failure
[h264 @ 0x5616b33d9a80] mmco: unref short failure
[h264 @ 0x55e522365400] mmco: unref short failure
[h264 @ 0x55e522365400] mmco: unref short failure
[h264 @ 0x5649ebe60cc0] mmco: unref short failure
[h264 @ 0x5616bae12b80] mmco: unref short failure
[h264 @ 0x5616bae12b80] mmco: unref short failure
[h264 @ 0x55c97aaa4540] mmco: unref short failure
[h264 @ 0x5616bd3bd780] mmco: unref short failure
[h264 @ 0x5616bd3bd780] mmco: unref short failure
 37%|███▋      | 581/1556 [2:20:29<6:30:34, 24.04s/it] 37%|███▋      | 582/1556 [2:20:34<5:00:14, 18.49s/it][h264 @ 0x5616ba19f2c0] mmco: unref short failure
[h264 @ 0x5616ba19f2c0] mmco: unref short failure
[h264 @ 0x55e5271a1080] mmco: unref short failure
 37%|███▋      | 583/1556 [2:20:40<3:56:29, 14.58s/it][h264 @ 0x55c938a66600] mmco: unref short failure
[h264 @ 0x55c938a66600] mmco: unref short failure
 38%|███▊      | 584/1556 [2:20:45<3:08:39, 11.65s/it] 38%|███▊      | 585/1556 [2:20:50<2:39:36,  9.86s/it] 38%|███▊      | 586/1556 [2:20:56<2:19:29,  8.63s/it][h264 @ 0x5649eb45fd40] mmco: unref short failure
 38%|███▊      | 587/1556 [2:21:01<2:02:59,  7.62s/it] 38%|███▊      | 588/1556 [2:21:06<1:50:19,  6.84s/it][h264 @ 0x5616b5b8d100] mmco: unref short failure
[h264 @ 0x5616ab5857c0] mmco: unref short failure
[h264 @ 0x5649e44bab80] mmco: unref short failure
[h264 @ 0x5649e44bab80] mmco: unref short failure
[h264 @ 0x5616b9bbb480] mmco: unref short failure
[h264 @ 0x5616b9bbb480] mmco: unref short failure
[h264 @ 0x55e5331b5380] mmco: unref short failure
[h264 @ 0x5649e3858180] mmco: unref short failure
[h264 @ 0x5649e3858180] mmco: unref short failure
[h264 @ 0x5649e3858180] mmco: unref short failure
[h264 @ 0x5649e3858180] mmco: unref short failure
[h264 @ 0x5649e3858180] mmco: unref short failure
[h264 @ 0x5649e3858180] mmco: unref short failure
[h264 @ 0x55e4f9d1bd80] mmco: unref short failure
[h264 @ 0x55e4f9d1bd80] mmco: unref short failure
[h264 @ 0x55c9756527c0] mmco: unref short failure
[h264 @ 0x55c9756527c0] mmco: unref short failure
[h264 @ 0x5616bf31e1c0] mmco: unref short failure
[h264 @ 0x5616bf31e1c0] mmco: unref short failure
not have audios ua_Kowav7hg.20
[h264 @ 0x55e527b8bc00] mmco: unref short failure
[h264 @ 0x55e527b8bc00] mmco: unref short failure
[h264 @ 0x5616ba8eb000] mmco: unref short failure
[h264 @ 0x55c982cd0340] mmco: unref short failure
[h264 @ 0x55c982cd0340] mmco: unref short failure
 38%|███▊      | 589/1556 [2:22:03<5:52:08, 21.85s/it] 38%|███▊      | 590/1556 [2:22:08<4:30:58, 16.83s/it] 38%|███▊      | 591/1556 [2:22:14<3:35:09, 13.38s/it][h264 @ 0x5616ab5a4b00] mmco: unref short failure
[h264 @ 0x5616ab5a4b00] mmco: unref short failure
 38%|███▊      | 592/1556 [2:22:19<2:57:27, 11.04s/it][h264 @ 0x55c978fb4f40] mmco: unref short failure
 38%|███▊      | 593/1556 [2:22:25<2:31:23,  9.43s/it][h264 @ 0x55c986bd3940] mmco: unref short failure
[h264 @ 0x55c986bd3940] mmco: unref short failure
 38%|███▊      | 594/1556 [2:22:31<2:13:12,  8.31s/it] 38%|███▊      | 595/1556 [2:22:36<1:57:49,  7.36s/it][h264 @ 0x55e51f923900] mmco: unref short failure
 38%|███▊      | 596/1556 [2:22:41<1:47:01,  6.69s/it][h264 @ 0x5616ada8ea00] mmco: unref short failure
[h264 @ 0x5616ada8ea00] mmco: unref short failure
[h264 @ 0x55c97a8e0e00] mmco: unref short failure
[h264 @ 0x55c985644840] mmco: unref short failure
[h264 @ 0x55c985644840] mmco: unref short failure
[h264 @ 0x55e52ce432c0] mmco: unref short failure
[h264 @ 0x55c970aeb140] mmco: unref short failure
[h264 @ 0x55c938ec5f40] mmco: unref short failure
[h264 @ 0x5616bb8e4100] mmco: unref short failure
[h264 @ 0x5616b2998ec0] mmco: unref short failure
[h264 @ 0x5616b2998ec0] mmco: unref short failure
 38%|███▊      | 597/1556 [2:23:37<5:45:31, 21.62s/it][h264 @ 0x55c9713c7640] mmco: unref short failure
[h264 @ 0x55c9713c7640] mmco: unref short failure
 38%|███▊      | 598/1556 [2:23:43<4:26:47, 16.71s/it][h264 @ 0x5649e7410080] mmco: unref short failure
[h264 @ 0x5649e7410080] mmco: unref short failure
 38%|███▊      | 599/1556 [2:23:48<3:30:20, 13.19s/it]09/06/2024 21:59:27 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/06/2024 21:59:27 - INFO - __main__ -   start running ret%tv validation...
[h264 @ 0x55c97eabd240] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e531aea440] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e52332d300] mmco: unref short failure
[h264 @ 0x55e5298d5f40] mmco: unref short failure
[h264 @ 0x55e52da1d680] mmco: unref short failure
[h264 @ 0x5616a8d54880] mmco: unref short failure
[h264 @ 0x5616a8d54880] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e520a70580] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e52c3c7c00] mmco: unref short failure
[h264 @ 0x55e52c3c7c00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5649e12b0c80] mmco: unref short failure
[h264 @ 0x5649e12b0c80] mmco: unref short failure
[h264 @ 0x55e522aef5c0] mmco: unref short failure
[h264 @ 0x55c97902ffc0] mmco: unref short failure
[h264 @ 0x55c97902ffc0] mmco: unref short failure
[h264 @ 0x5649e45b8d40] mmco: unref short failure
[h264 @ 0x5616a8d697c0] mmco: unref short failure
[h264 @ 0x5616a8d697c0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A[h264 @ 0x55c9808a3140] mmco: unref short failure

  0%|          | 1/221 [00:00<01:26,  2.54it/s][A
  1%|          | 2/221 [00:00<01:13,  2.96it/s][A
  1%|▏         | 3/221 [00:01<01:25,  2.56it/s][A
  2%|▏         | 4/221 [00:01<01:03,  3.42it/s][A
  3%|▎         | 6/221 [00:01<00:37,  5.80it/s][A
  3%|▎         | 7/221 [00:01<00:32,  6.55it/s][A
  4%|▍         | 9/221 [00:01<00:27,  7.80it/s][A
  5%|▍         | 10/221 [00:02<00:35,  5.97it/s][A
  5%|▌         | 12/221 [00:02<00:41,  5.03it/s][A
  6%|▌         | 13/221 [00:02<00:37,  5.62it/s][A
  7%|▋         | 15/221 [00:02<00:30,  6.69it/s][A
  7%|▋         | 16/221 [00:03<00:32,  6.26it/s][A[h264 @ 0x55e528464b00] mmco: unref short failure
[h264 @ 0x55e528464b00] mmco: unref short failure

  8%|▊         | 17/221 [00:03<00:57,  3.57it/s][A
  8%|▊         | 18/221 [00:03<00:51,  3.97it/s][A
  9%|▉         | 20/221 [00:04<00:36,  5.49it/s][A
 10%|▉         | 22/221 [00:04<00:30,  6.48it/s][A
 11%|█         | 24/221 [00:04<00:24,  8.16it/s][A
 12%|█▏        | 26/221 [00:04<00:27,  7.14it/s][A
 13%|█▎        | 28/221 [00:05<00:30,  6.38it/s][A
 13%|█▎        | 29/221 [00:05<00:29,  6.51it/s][A
 14%|█▎        | 30/221 [00:05<00:27,  6.91it/s][A
 14%|█▍        | 31/221 [00:05<00:29,  6.42it/s][A
 15%|█▍        | 33/221 [00:05<00:28,  6.68it/s][A
 16%|█▌        | 35/221 [00:05<00:22,  8.11it/s][A
 16%|█▋        | 36/221 [00:06<00:26,  6.87it/s][A
 17%|█▋        | 37/221 [00:06<00:32,  5.64it/s][A
 17%|█▋        | 38/221 [00:07<00:55,  3.29it/s][A
 18%|█▊        | 40/221 [00:07<00:38,  4.68it/s][A
 19%|█▉        | 42/221 [00:07<00:41,  4.36it/s][A
 20%|█▉        | 44/221 [00:07<00:30,  5.86it/s][A
 20%|██        | 45/221 [00:08<00:57,  3.05it/s][A
 21%|██        | 46/221 [00:09<00:52,  3.35it/s][A
 21%|██▏       | 47/221 [00:09<01:11,  2.42it/s][A
 22%|██▏       | 49/221 [00:10<00:50,  3.43it/s][A
 23%|██▎       | 51/221 [00:10<00:38,  4.47it/s][A
 24%|██▍       | 53/221 [00:10<00:27,  6.08it/s][A[h264 @ 0x5616abeec080] mmco: unref short failure

 25%|██▍       | 55/221 [00:12<01:01,  2.70it/s][A
 26%|██▌       | 57/221 [00:12<00:45,  3.61it/s][A
 27%|██▋       | 59/221 [00:12<00:35,  4.59it/s][A
 27%|██▋       | 60/221 [00:14<01:29,  1.79it/s][A
 28%|██▊       | 62/221 [00:14<01:10,  2.24it/s][A
 29%|██▊       | 63/221 [00:15<01:00,  2.63it/s][A
 29%|██▉       | 64/221 [00:15<01:10,  2.23it/s][A
 30%|██▉       | 66/221 [00:16<01:17,  2.01it/s][A
 30%|███       | 67/221 [00:17<01:06,  2.31it/s][A
 31%|███       | 68/221 [00:17<00:56,  2.70it/s][A
 31%|███       | 69/221 [00:17<01:10,  2.16it/s][A
 32%|███▏      | 71/221 [00:18<00:59,  2.50it/s][A
 33%|███▎      | 72/221 [00:18<00:56,  2.65it/s][A
 33%|███▎      | 73/221 [00:19<01:07,  2.18it/s][A
 34%|███▍      | 75/221 [00:20<00:52,  2.79it/s][A
 34%|███▍      | 76/221 [00:20<00:43,  3.34it/s][A
 35%|███▍      | 77/221 [00:20<00:46,  3.10it/s][A
 36%|███▌      | 79/221 [00:20<00:36,  3.92it/s][A
 37%|███▋      | 81/221 [00:21<00:41,  3.39it/s][A
 37%|███▋      | 82/221 [00:21<00:44,  3.11it/s][A
 38%|███▊      | 83/221 [00:22<00:43,  3.18it/s][A
 39%|███▉      | 86/221 [00:22<00:23,  5.65it/s][A
 40%|███▉      | 88/221 [00:23<00:41,  3.23it/s][A
 40%|████      | 89/221 [00:23<00:42,  3.14it/s][A
 41%|████      | 90/221 [00:24<00:44,  2.91it/s][A
 41%|████      | 91/221 [00:24<00:38,  3.35it/s][A
 42%|████▏     | 92/221 [00:24<00:32,  3.98it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 94/221 [00:25<00:30,  4.14it/s][A
 43%|████▎     | 95/221 [00:25<00:27,  4.64it/s][A
 43%|████▎     | 96/221 [00:26<00:51,  2.42it/s][A
 44%|████▍     | 97/221 [00:26<00:41,  3.02it/s][A
 44%|████▍     | 98/221 [00:26<00:53,  2.28it/s][A
 45%|████▌     | 100/221 [00:27<00:33,  3.67it/s][A
 46%|████▌     | 102/221 [00:28<00:55,  2.13it/s][A
 47%|████▋     | 104/221 [00:28<00:38,  3.05it/s][A
 48%|████▊     | 105/221 [00:29<00:36,  3.17it/s][A
 48%|████▊     | 106/221 [00:29<00:48,  2.38it/s][A
 49%|████▉     | 108/221 [00:30<00:32,  3.53it/s][A
 50%|████▉     | 110/221 [00:30<00:22,  4.98it/s][A
 51%|█████     | 112/221 [00:30<00:21,  5.12it/s][A
 51%|█████     | 113/221 [00:30<00:27,  3.95it/s][A
 52%|█████▏    | 115/221 [00:31<00:19,  5.48it/s][A
 53%|█████▎    | 117/221 [00:32<00:37,  2.80it/s][A
 53%|█████▎    | 118/221 [00:32<00:32,  3.16it/s][A
 54%|█████▍    | 119/221 [00:32<00:28,  3.55it/s][A
 55%|█████▍    | 121/221 [00:32<00:19,  5.03it/s][A
 55%|█████▌    | 122/221 [00:33<00:18,  5.40it/s][A
 56%|█████▌    | 123/221 [00:33<00:16,  5.81it/s][A
 57%|█████▋    | 125/221 [00:33<00:22,  4.25it/s][A
 57%|█████▋    | 126/221 [00:34<00:26,  3.60it/s][A
 57%|█████▋    | 127/221 [00:35<00:47,  1.98it/s][A
 58%|█████▊    | 128/221 [00:35<00:40,  2.29it/s][A
 59%|█████▉    | 130/221 [00:35<00:24,  3.64it/s][A
 60%|█████▉    | 132/221 [00:38<01:06,  1.33it/s][A
 60%|██████    | 133/221 [00:39<00:56,  1.55it/s][A
 61%|██████    | 134/221 [00:42<01:59,  1.37s/it][A
 61%|██████    | 135/221 [00:44<01:52,  1.31s/it][A
 62%|██████▏   | 136/221 [00:44<01:28,  1.04s/it][A
 62%|██████▏   | 137/221 [00:44<01:11,  1.17it/s][A
 62%|██████▏   | 138/221 [00:45<01:01,  1.34it/s][A
 63%|██████▎   | 139/221 [00:45<00:56,  1.45it/s][A
 63%|██████▎   | 140/221 [00:46<00:50,  1.60it/s][A
 64%|██████▍   | 141/221 [00:47<01:06,  1.20it/s][A
 64%|██████▍   | 142/221 [00:48<01:17,  1.02it/s][A
 65%|██████▍   | 143/221 [00:49<01:06,  1.17it/s][A
 65%|██████▌   | 144/221 [00:49<00:48,  1.59it/s][A
 66%|██████▌   | 146/221 [00:49<00:27,  2.74it/s][A
 67%|██████▋   | 148/221 [00:49<00:18,  3.98it/s][A
 67%|██████▋   | 149/221 [00:50<00:17,  4.07it/s][A
 68%|██████▊   | 151/221 [00:50<00:15,  4.47it/s][A
 69%|██████▉   | 152/221 [00:50<00:16,  4.09it/s][A
 69%|██████▉   | 153/221 [00:50<00:15,  4.48it/s][A
 70%|██████▉   | 154/221 [00:51<00:13,  4.84it/s][A
 70%|███████   | 155/221 [00:51<00:13,  5.07it/s][A
 71%|███████   | 156/221 [00:51<00:11,  5.81it/s][A
 71%|███████   | 157/221 [00:51<00:20,  3.19it/s][A
 71%|███████▏  | 158/221 [00:52<00:18,  3.39it/s][A
 72%|███████▏  | 159/221 [00:52<00:15,  3.92it/s][A
 73%|███████▎  | 161/221 [00:52<00:10,  5.68it/s][A
 74%|███████▍  | 163/221 [00:52<00:09,  5.91it/s][A
 74%|███████▍  | 164/221 [00:53<00:13,  4.09it/s][A
 75%|███████▍  | 165/221 [00:53<00:14,  3.97it/s][A
 75%|███████▌  | 166/221 [00:53<00:14,  3.83it/s][A
 76%|███████▌  | 168/221 [00:55<00:26,  2.02it/s][A
 77%|███████▋  | 170/221 [00:55<00:18,  2.76it/s][A
 77%|███████▋  | 171/221 [00:57<00:29,  1.68it/s][A
 78%|███████▊  | 173/221 [00:57<00:20,  2.30it/s][A
 79%|███████▉  | 175/221 [00:57<00:14,  3.09it/s][A
 80%|███████▉  | 176/221 [00:58<00:13,  3.30it/s][A
 81%|████████  | 178/221 [00:58<00:11,  3.87it/s][A
 81%|████████  | 179/221 [00:59<00:14,  2.96it/s][A
 82%|████████▏ | 181/221 [00:59<00:09,  4.24it/s][A
 82%|████████▏ | 182/221 [00:59<00:08,  4.57it/s][A
 83%|████████▎ | 183/221 [00:59<00:07,  4.86it/s][A
 83%|████████▎ | 184/221 [01:00<00:12,  2.90it/s][A
 84%|████████▍ | 186/221 [01:00<00:09,  3.59it/s][A
 85%|████████▍ | 187/221 [01:00<00:09,  3.54it/s][A
 85%|████████▌ | 188/221 [01:01<00:08,  4.08it/s][A
 86%|████████▌ | 189/221 [01:01<00:07,  4.51it/s][A
 86%|████████▌ | 190/221 [01:01<00:06,  4.80it/s][A
 87%|████████▋ | 192/221 [01:01<00:04,  6.36it/s][A
 88%|████████▊ | 194/221 [01:02<00:06,  4.18it/s][A
 89%|████████▊ | 196/221 [01:02<00:04,  5.62it/s][A
 89%|████████▉ | 197/221 [01:02<00:04,  5.30it/s][A
 90%|█████████ | 199/221 [01:02<00:03,  6.71it/s][A
 91%|█████████ | 201/221 [01:03<00:02,  7.44it/s][A
 92%|█████████▏| 203/221 [01:03<00:02,  7.45it/s][A
 92%|█████████▏| 204/221 [01:03<00:02,  7.54it/s][A
 93%|█████████▎| 206/221 [01:03<00:02,  6.66it/s][A
 94%|█████████▍| 208/221 [01:04<00:01,  7.38it/s][A
 95%|█████████▍| 209/221 [01:04<00:01,  6.94it/s][A
 95%|█████████▌| 211/221 [01:04<00:01,  6.19it/s][A
 96%|█████████▌| 212/221 [01:04<00:01,  5.51it/s][A
 97%|█████████▋| 214/221 [01:05<00:01,  4.63it/s][A
 97%|█████████▋| 215/221 [01:05<00:01,  4.64it/s][A
 98%|█████████▊| 216/221 [01:05<00:01,  4.91it/s][A
 98%|█████████▊| 217/221 [01:07<00:02,  1.56it/s][A
 99%|█████████▊| 218/221 [01:07<00:01,  1.93it/s][A
 99%|█████████▉| 219/221 [01:08<00:00,  2.47it/s][A
100%|█████████▉| 220/221 [01:08<00:00,  2.45it/s][A100%|██████████| 221/221 [01:08<00:00,  3.23it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.79it/s][A
  1%|          | 2/221 [00:00<00:57,  3.79it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.79it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.79it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.79it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.79it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.79it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.79it/s][A
  4%|▍         | 9/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.79it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.79it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.79it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.79it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.79it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:51,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:37,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 125/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.78it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.78it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.79it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.79it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.79it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.79it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.79it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.79it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.79it/s][A
 67%|██████▋   | 149/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.79it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.79it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.79it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.79it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.79it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.79it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.79it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 159/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.79it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.79it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.79it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.79it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.79it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.79it/s][A
 76%|███████▌  | 168/221 [00:44<00:13,  3.79it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.79it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.79it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.79it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.79it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.79it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 178/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.79it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.79it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.79it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.79it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.79it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.79it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.79it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.79it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.79it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.79it/s][A
 89%|████████▉ | 197/221 [00:51<00:06,  3.79it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.79it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.79it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.79it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.79it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.79it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.79it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.79it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.79it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.79it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.79it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.79it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▌| 212/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.79it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.79it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.79it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.79it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.79it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.79it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.79it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.79it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.79it/s][A100%|██████████| 221/221 [00:58<00:00,  3.79it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:39,  5.55it/s][A
  1%|          | 2/221 [00:00<00:33,  6.51it/s][A
  1%|▏         | 3/221 [00:00<00:38,  5.67it/s][A
  2%|▏         | 4/221 [00:00<00:33,  6.45it/s][A
  3%|▎         | 6/221 [00:00<00:24,  8.75it/s][A
  3%|▎         | 7/221 [00:00<00:28,  7.56it/s][A
  4%|▎         | 8/221 [00:01<00:29,  7.30it/s][A
  4%|▍         | 9/221 [00:01<00:30,  6.99it/s][A
  5%|▍         | 10/221 [00:01<00:54,  3.85it/s][A
  5%|▍         | 11/221 [00:01<00:46,  4.54it/s][A
  5%|▌         | 12/221 [00:02<00:43,  4.83it/s][A
  6%|▌         | 13/221 [00:02<00:53,  3.89it/s][A
  7%|▋         | 15/221 [00:02<00:45,  4.57it/s][A
  7%|▋         | 16/221 [00:03<00:49,  4.17it/s][A
  8%|▊         | 17/221 [00:03<01:07,  3.01it/s][A
  8%|▊         | 18/221 [00:03<00:58,  3.46it/s][A
  9%|▊         | 19/221 [00:04<00:51,  3.94it/s][A
  9%|▉         | 20/221 [00:04<00:45,  4.44it/s][A
 10%|▉         | 22/221 [00:04<00:35,  5.59it/s][A
 11%|█         | 24/221 [00:04<00:31,  6.27it/s][A
 11%|█▏        | 25/221 [00:04<00:29,  6.60it/s][A
 12%|█▏        | 26/221 [00:05<00:32,  5.96it/s][A
 13%|█▎        | 28/221 [00:05<00:30,  6.41it/s][A
 13%|█▎        | 29/221 [00:05<00:36,  5.22it/s][A
 14%|█▎        | 30/221 [00:06<00:47,  4.00it/s][A
 14%|█▍        | 31/221 [00:06<00:41,  4.56it/s][A
 15%|█▍        | 33/221 [00:06<00:39,  4.77it/s][A
 16%|█▌        | 35/221 [00:06<00:36,  5.11it/s][A
 16%|█▋        | 36/221 [00:07<00:43,  4.24it/s][A
 17%|█▋        | 37/221 [00:07<00:40,  4.49it/s][A
 17%|█▋        | 38/221 [00:07<00:46,  3.93it/s][A
 18%|█▊        | 39/221 [00:08<00:40,  4.51it/s][A
 18%|█▊        | 40/221 [00:08<00:42,  4.29it/s][A
 19%|█▊        | 41/221 [00:08<00:37,  4.77it/s][A
 19%|█▉        | 42/221 [00:08<00:37,  4.81it/s][A
 19%|█▉        | 43/221 [00:08<00:38,  4.65it/s][A
 20%|█▉        | 44/221 [00:09<00:40,  4.41it/s][A
 20%|██        | 45/221 [00:09<00:45,  3.86it/s][A
 21%|██        | 46/221 [00:09<00:40,  4.32it/s][A
 21%|██▏       | 47/221 [00:09<00:38,  4.48it/s][A
 22%|██▏       | 48/221 [00:09<00:33,  5.17it/s][A
 22%|██▏       | 49/221 [00:10<00:36,  4.70it/s][A
 23%|██▎       | 50/221 [00:10<00:38,  4.45it/s][A
 23%|██▎       | 51/221 [00:10<00:35,  4.82it/s][A
 24%|██▎       | 52/221 [00:10<00:35,  4.76it/s][A
 24%|██▍       | 54/221 [00:11<01:00,  2.78it/s][A
 25%|██▍       | 55/221 [00:12<00:55,  3.00it/s][A
 25%|██▌       | 56/221 [00:12<00:45,  3.65it/s][A
 26%|██▌       | 57/221 [00:12<00:41,  4.00it/s][A
 26%|██▌       | 58/221 [00:12<00:49,  3.30it/s][A
 27%|██▋       | 59/221 [00:13<00:42,  3.84it/s][A
 27%|██▋       | 60/221 [00:13<00:56,  2.85it/s][A
 28%|██▊       | 61/221 [00:13<00:44,  3.57it/s][A
 28%|██▊       | 62/221 [00:14<00:44,  3.54it/s][A
 29%|██▊       | 63/221 [00:14<00:42,  3.71it/s][A
 29%|██▉       | 64/221 [00:15<01:12,  2.16it/s][A
 30%|██▉       | 66/221 [00:15<01:00,  2.55it/s][A
 30%|███       | 67/221 [00:16<01:06,  2.30it/s][A
 31%|███       | 68/221 [00:16<00:55,  2.73it/s][A
 31%|███       | 69/221 [00:17<01:20,  1.88it/s][A
 32%|███▏      | 70/221 [00:17<01:04,  2.36it/s][A
 32%|███▏      | 71/221 [00:17<00:55,  2.69it/s][A
 33%|███▎      | 72/221 [00:18<00:54,  2.71it/s][A
 33%|███▎      | 73/221 [00:18<00:54,  2.73it/s][A
 33%|███▎      | 74/221 [00:18<00:43,  3.41it/s][A
 34%|███▍      | 75/221 [00:19<00:43,  3.39it/s][A
 34%|███▍      | 76/221 [00:19<00:42,  3.38it/s][A
 35%|███▍      | 77/221 [00:19<00:49,  2.89it/s][A
 36%|███▌      | 79/221 [00:20<00:43,  3.25it/s][A
 36%|███▌      | 80/221 [00:20<00:40,  3.49it/s][A
 37%|███▋      | 81/221 [00:20<00:38,  3.68it/s][A
 37%|███▋      | 82/221 [00:21<00:40,  3.47it/s][A
 38%|███▊      | 83/221 [00:22<01:12,  1.91it/s][A
 38%|███▊      | 84/221 [00:22<00:57,  2.39it/s][A
 39%|███▉      | 86/221 [00:22<00:36,  3.71it/s][A
 39%|███▉      | 87/221 [00:23<00:44,  3.02it/s][A
 40%|███▉      | 88/221 [00:23<00:42,  3.15it/s][A
 40%|████      | 89/221 [00:23<00:39,  3.34it/s][A
 41%|████      | 90/221 [00:24<00:45,  2.85it/s][A
 41%|████      | 91/221 [00:24<00:40,  3.23it/s][A
 42%|████▏     | 92/221 [00:24<00:37,  3.46it/s][A
 42%|████▏     | 93/221 [00:25<00:50,  2.53it/s][A
 43%|████▎     | 94/221 [00:25<00:49,  2.55it/s][A
 43%|████▎     | 95/221 [00:25<00:46,  2.71it/s][A
 43%|████▎     | 96/221 [00:26<00:55,  2.25it/s][A
 44%|████▍     | 97/221 [00:26<00:45,  2.71it/s][A
 44%|████▍     | 98/221 [00:27<01:04,  1.92it/s][A
 45%|████▍     | 99/221 [00:27<00:49,  2.49it/s][A
 45%|████▌     | 100/221 [00:27<00:44,  2.74it/s][A
 46%|████▌     | 101/221 [00:28<00:39,  3.07it/s][A
 46%|████▌     | 102/221 [00:29<01:27,  1.36it/s][A
 47%|████▋     | 103/221 [00:30<01:09,  1.71it/s][A
 47%|████▋     | 104/221 [00:30<00:52,  2.25it/s][A
 48%|████▊     | 105/221 [00:30<00:44,  2.59it/s][A
 48%|████▊     | 106/221 [00:30<00:42,  2.71it/s][A
 48%|████▊     | 107/221 [00:30<00:33,  3.36it/s][A
 49%|████▉     | 108/221 [00:31<00:35,  3.15it/s][A
 49%|████▉     | 109/221 [00:31<00:29,  3.81it/s][A
 50%|████▉     | 110/221 [00:31<00:27,  3.97it/s][A
 50%|█████     | 111/221 [00:31<00:24,  4.44it/s][A
 51%|█████     | 112/221 [00:32<00:31,  3.48it/s][A
 51%|█████     | 113/221 [00:32<00:35,  3.03it/s][A
 52%|█████▏    | 115/221 [00:32<00:24,  4.27it/s][A
 52%|█████▏    | 116/221 [00:33<00:25,  4.16it/s][A
 53%|█████▎    | 117/221 [00:33<00:27,  3.84it/s][A
 53%|█████▎    | 118/221 [00:33<00:25,  4.09it/s][A
 54%|█████▍    | 119/221 [00:34<00:26,  3.78it/s][A
 55%|█████▍    | 121/221 [00:34<00:20,  4.91it/s][A
 55%|█████▌    | 122/221 [00:34<00:21,  4.71it/s][A
 56%|█████▌    | 123/221 [00:34<00:20,  4.90it/s][A
 56%|█████▌    | 124/221 [00:34<00:20,  4.64it/s][A
 57%|█████▋    | 125/221 [00:35<00:24,  3.96it/s][A
 57%|█████▋    | 126/221 [00:35<00:21,  4.40it/s][A
 57%|█████▋    | 127/221 [00:35<00:27,  3.48it/s][A
 58%|█████▊    | 128/221 [00:36<00:24,  3.78it/s][A
 59%|█████▉    | 130/221 [00:36<00:17,  5.10it/s][A
 59%|█████▉    | 131/221 [00:36<00:15,  5.65it/s][A
 60%|█████▉    | 132/221 [00:37<00:43,  2.06it/s][A
 60%|██████    | 133/221 [00:38<00:38,  2.27it/s][A
 61%|██████    | 134/221 [00:39<00:51,  1.71it/s][A
 61%|██████    | 135/221 [00:39<00:54,  1.59it/s][A
 62%|██████▏   | 136/221 [00:40<00:43,  1.97it/s][A
 62%|██████▏   | 137/221 [00:40<00:34,  2.41it/s][A
 62%|██████▏   | 138/221 [00:40<00:32,  2.54it/s][A
 63%|██████▎   | 139/221 [00:41<00:36,  2.28it/s][A
 63%|██████▎   | 140/221 [00:41<00:32,  2.46it/s][A
 64%|██████▍   | 141/221 [00:41<00:31,  2.58it/s][A
 64%|██████▍   | 142/221 [00:42<00:25,  3.05it/s][A
 65%|██████▍   | 143/221 [00:42<00:34,  2.25it/s][A
 65%|██████▌   | 144/221 [00:43<00:40,  1.92it/s][A
 66%|██████▌   | 146/221 [00:43<00:24,  3.06it/s][A
 67%|██████▋   | 147/221 [00:43<00:23,  3.21it/s][A
 67%|██████▋   | 148/221 [00:44<00:31,  2.29it/s][A
 67%|██████▋   | 149/221 [00:45<00:36,  1.98it/s][A
 68%|██████▊   | 150/221 [00:45<00:29,  2.41it/s][A
 68%|██████▊   | 151/221 [00:45<00:25,  2.72it/s][A
 69%|██████▉   | 152/221 [00:46<00:25,  2.73it/s][A
 69%|██████▉   | 153/221 [00:46<00:20,  3.29it/s][A
 70%|██████▉   | 154/221 [00:46<00:17,  3.79it/s][A
 70%|███████   | 155/221 [00:47<00:22,  2.97it/s][A
 71%|███████   | 156/221 [00:47<00:17,  3.63it/s][A
 71%|███████   | 157/221 [00:47<00:17,  3.68it/s][A
 71%|███████▏  | 158/221 [00:47<00:16,  3.84it/s][A
 72%|███████▏  | 159/221 [00:47<00:14,  4.25it/s][A
 72%|███████▏  | 160/221 [00:47<00:11,  5.10it/s][A
 73%|███████▎  | 161/221 [00:48<00:18,  3.27it/s][A
 73%|███████▎  | 162/221 [00:48<00:16,  3.53it/s][A
 74%|███████▍  | 163/221 [00:48<00:15,  3.65it/s][A
 74%|███████▍  | 164/221 [00:49<00:14,  3.84it/s][A
 75%|███████▍  | 165/221 [00:49<00:16,  3.39it/s][A
 76%|███████▌  | 167/221 [00:49<00:11,  4.90it/s][A
 76%|███████▌  | 168/221 [00:50<00:11,  4.45it/s][A
 76%|███████▋  | 169/221 [00:50<00:10,  4.84it/s][A
 77%|███████▋  | 170/221 [00:50<00:11,  4.39it/s][A
 77%|███████▋  | 171/221 [00:51<00:17,  2.80it/s][A
 78%|███████▊  | 172/221 [00:51<00:14,  3.40it/s][A
 78%|███████▊  | 173/221 [00:51<00:16,  2.84it/s][A
 79%|███████▊  | 174/221 [00:52<00:18,  2.49it/s][A
 79%|███████▉  | 175/221 [00:52<00:18,  2.47it/s][A
 80%|███████▉  | 176/221 [00:52<00:15,  2.86it/s][A
 81%|████████  | 178/221 [00:53<00:12,  3.45it/s][A
 81%|████████  | 179/221 [00:53<00:11,  3.53it/s][A
 81%|████████▏ | 180/221 [00:53<00:11,  3.65it/s][A
 82%|████████▏ | 182/221 [00:54<00:10,  3.86it/s][A
 83%|████████▎ | 183/221 [00:54<00:09,  3.88it/s][A
 83%|████████▎ | 184/221 [00:54<00:09,  3.88it/s][A
 84%|████████▎ | 185/221 [00:55<00:10,  3.51it/s][A
 84%|████████▍ | 186/221 [00:55<00:12,  2.71it/s][A
 85%|████████▍ | 187/221 [00:56<00:11,  3.01it/s][A
 85%|████████▌ | 188/221 [00:56<00:10,  3.14it/s][A
 86%|████████▌ | 189/221 [00:56<00:09,  3.51it/s][A
 86%|████████▌ | 190/221 [00:56<00:09,  3.44it/s][A
 86%|████████▋ | 191/221 [00:57<00:07,  4.26it/s][A
 87%|████████▋ | 192/221 [00:57<00:06,  4.78it/s][A
 87%|████████▋ | 193/221 [00:57<00:04,  5.61it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.69it/s][A
 88%|████████▊ | 195/221 [00:58<00:07,  3.43it/s][A
 89%|████████▊ | 196/221 [00:58<00:06,  3.99it/s][A
 89%|████████▉ | 197/221 [00:58<00:06,  3.69it/s][A
 90%|████████▉ | 198/221 [00:58<00:05,  4.15it/s][A
 90%|█████████ | 199/221 [00:58<00:05,  4.29it/s][A
 90%|█████████ | 200/221 [00:59<00:04,  4.26it/s][A
 91%|█████████ | 201/221 [00:59<00:04,  4.91it/s][A
 91%|█████████▏| 202/221 [00:59<00:03,  4.86it/s][A
 92%|█████████▏| 203/221 [00:59<00:03,  5.50it/s][A
 92%|█████████▏| 204/221 [01:00<00:05,  3.14it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.83it/s][A
 93%|█████████▎| 206/221 [01:00<00:03,  3.87it/s][A
 94%|█████████▍| 208/221 [01:00<00:02,  5.21it/s][A
 95%|█████████▍| 209/221 [01:01<00:02,  5.41it/s][A
 95%|█████████▌| 210/221 [01:01<00:01,  6.05it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  4.61it/s][A
 96%|█████████▌| 212/221 [01:01<00:02,  4.37it/s][A
 96%|█████████▋| 213/221 [01:01<00:01,  5.01it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  2.36it/s][A
 97%|█████████▋| 215/221 [01:03<00:02,  2.74it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.05it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  2.79it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.04it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.57it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  4.22it/s][A
100%|██████████| 221/221 [01:04<00:00,  4.41it/s][A100%|██████████| 221/221 [01:04<00:00,  3.42it/s]
09/06/2024 22:04:48 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 599--===========

09/06/2024 22:04:48 - INFO - __main__ -   {'area_r1': 21.4, 'area_recall': '21.4/45.9/57.7', 'area_ravg': 41.7}
09/06/2024 22:04:48 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 599--===========

09/06/2024 22:04:48 - INFO - __main__ -   {'forward_r1': 38.3, 'forward_recall': '38.3/66.9/75.3', 'forward_ravg': 60.2}
09/06/2024 22:04:48 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 599--===========

09/06/2024 22:04:48 - INFO - __main__ -   {'area_video_r1': 40.3, 'area_video_recall': '40.3/69.1/79.2', 'area_video_ravg': 62.9}
09/06/2024 22:04:48 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 599=======

09/06/2024 22:04:48 - INFO - __main__ -   {'area_video_r1': 40.3, 'area_video_recall': '40.3/69.1/79.2', 'area_video_ravg': 62.9}
09/06/2024 22:04:48 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 599--===========

09/06/2024 22:04:48 - INFO - __main__ -   {'area_video_r1': 50.5, 'area_video_recall': '50.5/74.5/80.0', 'area_video_ravg': 68.3, 'area_video_back_r1': 50.7, 'area_video_back_recall': '50.7/73.5/81.9', 'area_video_back_ravg': 68.7}
09/06/2024 22:04:48 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 299=======

09/06/2024 22:04:48 - INFO - __main__ -   {'area_video_r1': 51.0, 'area_video_recall': '51.0/73.4/79.9', 'area_video_ravg': 68.1, 'area_video_back_r1': 51.0, 'area_video_back_recall': '51.0/73.8/81.9', 'area_video_back_ravg': 68.9}
09/06/2024 22:04:48 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 599--===========

09/06/2024 22:04:48 - INFO - __main__ -   {'video_r1': 41.6, 'video_recall': '41.6/70.2/80.7', 'video_ravg': 64.2}
09/06/2024 22:04:48 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 299=======

09/06/2024 22:04:48 - INFO - __main__ -   {'video_r1': 43.3, 'video_recall': '43.3/70.8/80.2', 'video_ravg': 64.8}
09/06/2024 22:04:48 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 599--===========

09/06/2024 22:04:48 - INFO - __main__ -   {'video_r1': 51.4, 'video_recall': '51.4/75.0/82.2', 'video_ravg': 69.5}
09/06/2024 22:04:48 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 299=======

09/06/2024 22:04:48 - INFO - __main__ -   {'video_r1': 52.0, 'video_recall': '52.0/75.3/81.8', 'video_ravg': 69.7}
09/06/2024 22:05:12 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.0553507804870605, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04949626326560974, 'loss_ret%tv%ta--finetune_area/loss_area': 2.6002755165100098, 'loss_ret%tv%ta--finetune_area/total_loss': 5.705122470855713}
 39%|███▊      | 600/1556 [2:29:35<30:09:09, 113.55s/it] 39%|███▊      | 601/1556 [2:29:38<21:18:23, 80.32s/it]  39%|███▊      | 602/1556 [2:29:41<15:07:33, 57.08s/it] 39%|███▉      | 603/1556 [2:29:44<10:51:08, 41.00s/it][h264 @ 0x5649de73df80] mmco: unref short failure
[h264 @ 0x55e52d58eec0] mmco: unref short failure
[h264 @ 0x55e52d58eec0] mmco: unref short failure
 39%|███▉      | 604/1556 [2:29:49<7:54:38, 29.91s/it]  39%|███▉      | 605/1556 [2:29:53<5:51:40, 22.19s/it][h264 @ 0x5649e9948940] mmco: unref short failure
 39%|███▉      | 606/1556 [2:29:58<4:32:33, 17.21s/it] 39%|███▉      | 607/1556 [2:30:04<3:36:12, 13.67s/it] 39%|███▉      | 608/1556 [2:30:09<2:56:29, 11.17s/it][h264 @ 0x5649dd91bb40] mmco: unref short failure
[h264 @ 0x5649dd91bb40] mmco: unref short failure
[h264 @ 0x5616b05072c0] mmco: unref short failure
[h264 @ 0x5616b05072c0] mmco: unref short failure
 39%|███▉      | 609/1556 [2:30:14<2:24:52,  9.18s/it][h264 @ 0x5649e9cea1c0] mmco: unref short failure
 39%|███▉      | 610/1556 [2:30:19<2:08:44,  8.16s/it][h264 @ 0x5616b2eecc80] mmco: unref short failure
[h264 @ 0x55c9855e2340] mmco: unref short failure
 39%|███▉      | 611/1556 [2:30:25<1:56:35,  7.40s/it][h264 @ 0x55e5254f6c40] mmco: unref short failure
 39%|███▉      | 612/1556 [2:30:30<1:46:40,  6.78s/it][h264 @ 0x5649ed067100] mmco: unref short failure
[h264 @ 0x5649ed067100] mmco: unref short failure
[h264 @ 0x5649ed067100] mmco: unref short failure
[h264 @ 0x5649ed067100] mmco: unref short failure
[h264 @ 0x5649ed067100] mmco: unref short failure
[h264 @ 0x5649ed067100] mmco: unref short failure
[h264 @ 0x5649ed067100] mmco: unref short failure
[h264 @ 0x5649ed067100] mmco: unref short failure
[h264 @ 0x5649ed067100] mmco: unref short failure
[h264 @ 0x5649ed067100] mmco: unref short failure
[h264 @ 0x55c973eeb340] mmco: unref short failure
[h264 @ 0x5649ed067100] mmco: unref short failure
[h264 @ 0x5649ed067100] mmco: unref short failure
[h264 @ 0x55c973eeb340] mmco: unref short failure
 39%|███▉      | 613/1556 [2:30:36<1:42:34,  6.53s/it][h264 @ 0x55c973eeb340] mmco: unref short failure
 39%|███▉      | 614/1556 [2:30:42<1:36:40,  6.16s/it][h264 @ 0x5649df45c580] mmco: unref short failure
[h264 @ 0x5649df45c580] mmco: unref short failure
 40%|███▉      | 615/1556 [2:30:47<1:34:06,  6.00s/it][h264 @ 0x5649db842100] mmco: unref short failure
 40%|███▉      | 616/1556 [2:30:59<2:03:08,  7.86s/it][h264 @ 0x5649eb536440] mmco: unref short failure
[h264 @ 0x5649eb536440] mmco: unref short failure
[h264 @ 0x5649eeb27cc0] mmco: unref short failure
 40%|███▉      | 617/1556 [2:31:12<2:23:39,  9.18s/it][h264 @ 0x55c9722dbfc0] mmco: unref short failure
 40%|███▉      | 618/1556 [2:31:19<2:13:37,  8.55s/it][h264 @ 0x5649db0045c0] mmco: unref short failure
[h264 @ 0x5649db0045c0] mmco: unref short failure
[h264 @ 0x55c97b8ac700] mmco: unref short failure
 40%|███▉      | 619/1556 [2:31:24<1:59:39,  7.66s/it] 40%|███▉      | 620/1556 [2:31:32<1:57:20,  7.52s/it] 40%|███▉      | 621/1556 [2:31:37<1:48:27,  6.96s/it][h264 @ 0x55e523025b40] mmco: unref short failure
[h264 @ 0x5616b2998a40] mmco: unref short failure
[h264 @ 0x55c981be6780] mmco: unref short failure
[h264 @ 0x55c981be6780] mmco: unref short failure
[h264 @ 0x55e520b972c0] mmco: unref short failure
[h264 @ 0x55e520b972c0] mmco: unref short failure
[h264 @ 0x5649de7c5640] mmco: unref short failure
 40%|███▉      | 622/1556 [2:31:42<1:39:05,  6.37s/it] 40%|████      | 623/1556 [2:31:48<1:35:51,  6.16s/it][h264 @ 0x55e5281d7f80] mmco: unref short failure
[h264 @ 0x55c9701e70c0] mmco: unref short failure
[h264 @ 0x5649e0b0b200] mmco: unref short failure
[h264 @ 0x5649e5a551c0] mmco: unref short failure
[h264 @ 0x5649e5a551c0] mmco: unref short failure
[h264 @ 0x55c970619440] mmco: unref short failure
[h264 @ 0x55c970619440] mmco: unref short failure
not have audios 8-qwaveiHMM.3
[h264 @ 0x5649e4c3f100] mmco: unref short failure
[h264 @ 0x5649e4c3f100] mmco: unref short failure
[h264 @ 0x5649b9028880] mmco: unref short failure
[h264 @ 0x5649de1e7a40] mmco: unref short failure
[h264 @ 0x5649de1e7a40] mmco: unref short failure
[h264 @ 0x55c971ad3c00] mmco: unref short failure
[h264 @ 0x55c971ad3c00] mmco: unref short failure
[h264 @ 0x5616aa36eec0] mmco: unref short failure
 40%|████      | 624/1556 [2:32:43<5:26:18, 21.01s/it][h264 @ 0x55e523942480] mmco: unref short failure
[h264 @ 0x55e523942480] mmco: unref short failure
[h264 @ 0x55c979c71680] mmco: unref short failure
[h264 @ 0x55c979c71680] mmco: unref short failure
[h264 @ 0x5616b2291800] mmco: unref short failure
[h264 @ 0x5616b2291800] mmco: unref short failure
[h264 @ 0x5616b4d9bd40] mmco: unref short failure
 40%|████      | 625/1556 [2:32:51<4:21:59, 16.88s/it][h264 @ 0x5649ed0a8fc0] mmco: unref short failure
[h264 @ 0x5649ed0a8fc0] mmco: unref short failure
[h264 @ 0x55c97592e600] mmco: unref short failure
[h264 @ 0x55c97592e600] mmco: unref short failure
 40%|████      | 626/1556 [2:33:00<3:46:53, 14.64s/it] 40%|████      | 627/1556 [2:33:05<3:02:29, 11.79s/it] 40%|████      | 628/1556 [2:33:11<2:34:40, 10.00s/it] 40%|████      | 629/1556 [2:33:17<2:14:09,  8.68s/it][h264 @ 0x55c9726e1040] mmco: unref short failure
[h264 @ 0x55c97cf4e500] mmco: unref short failure
[h264 @ 0x55e5312ad580] mmco: unref short failure
[h264 @ 0x55e5312ad580] mmco: unref short failure
 40%|████      | 630/1556 [2:33:22<1:59:06,  7.72s/it] 41%|████      | 631/1556 [2:33:30<2:00:00,  7.78s/it][h264 @ 0x55e526ec9a00] mmco: unref short failure
[h264 @ 0x5649e8806c80] mmco: unref short failure
[h264 @ 0x5616b70dc580] mmco: unref short failure
[h264 @ 0x5649df920800] mmco: unref short failure
[h264 @ 0x5649df920800] mmco: unref short failure
[h264 @ 0x5649b90d9500] mmco: unref short failure
[h264 @ 0x5649b90d9500] mmco: unref short failure
[h264 @ 0x5649df02ee00] mmco: unref short failure
[h264 @ 0x5616b3c69100] mmco: unref short failure
[h264 @ 0x5616b3c69100] mmco: unref short failure
[h264 @ 0x55e523025680] mmco: unref short failure
[h264 @ 0x55e523025680] mmco: unref short failure
[h264 @ 0x5649dd5a9dc0] mmco: unref short failure
[h264 @ 0x5649dd5a9dc0] mmco: unref short failure
[h264 @ 0x5649b8c34680] mmco: unref short failure
 41%|████      | 632/1556 [2:34:22<5:22:34, 20.95s/it][h264 @ 0x55e534963440] mmco: unref short failure
[h264 @ 0x55e534963440] mmco: unref short failure
 41%|████      | 633/1556 [2:34:31<4:27:27, 17.39s/it][h264 @ 0x55c979c71680] mmco: unref short failure
[h264 @ 0x55c979c71680] mmco: unref short failure
 41%|████      | 634/1556 [2:34:37<3:35:02, 13.99s/it] 41%|████      | 635/1556 [2:34:42<2:54:22, 11.36s/it] 41%|████      | 636/1556 [2:34:48<2:27:40,  9.63s/it] 41%|████      | 637/1556 [2:34:53<2:07:52,  8.35s/it] 41%|████      | 638/1556 [2:35:00<1:59:12,  7.79s/it][h264 @ 0x55c97a472bc0] mmco: unref short failure
 41%|████      | 639/1556 [2:35:12<2:19:19,  9.12s/it][h264 @ 0x55e525462c00] mmco: unref short failure
[h264 @ 0x55e525462c00] mmco: unref short failure
[h264 @ 0x55c97dbf7900] mmco: unref short failure
[h264 @ 0x5649db2b7980] mmco: unref short failure
[h264 @ 0x5649db2b7980] mmco: unref short failure
[h264 @ 0x5649eeb109c0] mmco: unref short failure
[h264 @ 0x5649eeb109c0] mmco: unref short failure
[h264 @ 0x55e52b86d8c0] mmco: unref short failure
[h264 @ 0x55e5273d9540] mmco: unref short failure
[h264 @ 0x55e5273d9540] mmco: unref short failure
[h264 @ 0x5616b14ab740] mmco: unref short failure
[h264 @ 0x5616b14ab740] mmco: unref short failure
[h264 @ 0x5649db9bf2c0] mmco: unref short failure
[h264 @ 0x5649db9bf2c0] mmco: unref short failure
 41%|████      | 640/1556 [2:36:06<5:47:27, 22.76s/it][h264 @ 0x55c938d91740] mmco: unref short failure
 41%|████      | 641/1556 [2:36:12<4:28:59, 17.64s/it] 41%|████▏     | 642/1556 [2:36:17<3:32:40, 13.96s/it][h264 @ 0x5616b4d929c0] mmco: unref short failure
[h264 @ 0x5616b4d929c0] mmco: unref short failure
[h264 @ 0x55c974621c80] mmco: unref short failure
[h264 @ 0x55c974621c80] mmco: unref short failure
[h264 @ 0x55c974621c80] mmco: unref short failure
[h264 @ 0x55c974621c80] mmco: unref short failure
 41%|████▏     | 643/1556 [2:36:23<2:51:54, 11.30s/it][h264 @ 0x55c978f89680] mmco: unref short failure
[h264 @ 0x5649e0266ec0] mmco: unref short failure
[h264 @ 0x5649e0b0b480] mmco: unref short failure
[h264 @ 0x5649e0b0b480] mmco: unref short failure
 41%|████▏     | 644/1556 [2:36:30<2:36:20, 10.29s/it] 41%|████▏     | 645/1556 [2:36:36<2:16:29,  8.99s/it][h264 @ 0x55c97f735300] mmco: unref short failure
[h264 @ 0x55c97f735300] mmco: unref short failure
[h264 @ 0x55e520be5300] mmco: unref short failure
 42%|████▏     | 646/1556 [2:36:42<1:59:50,  7.90s/it] 42%|████▏     | 647/1556 [2:36:54<2:18:21,  9.13s/it][h264 @ 0x5649e5a06a00] mmco: unref short failure
[h264 @ 0x5649e5a06a00] mmco: unref short failure
[h264 @ 0x55e52b1c8ec0] mmco: unref short failure
[h264 @ 0x55e52b1c8ec0] mmco: unref short failure
[h264 @ 0x55e521833580] mmco: unref short failure
[h264 @ 0x55e521833580] mmco: unref short failure
[h264 @ 0x55c9850e4500] mmco: unref short failure
[h264 @ 0x5649dd1627c0] mmco: unref short failure
[h264 @ 0x5616b51ab4c0] mmco: unref short failure
[h264 @ 0x5616b51ab4c0] mmco: unref short failure
[h264 @ 0x5616a8726f00] mmco: unref short failure
[h264 @ 0x5616b75fd600] mmco: unref short failure
[h264 @ 0x5616b75fd600] mmco: unref short failure
[h264 @ 0x5616b75fd600] mmco: unref short failure
[h264 @ 0x5616b75fd600] mmco: unref short failure
 42%|████▏     | 648/1556 [2:37:46<5:33:23, 22.03s/it][h264 @ 0x55e529acbb00] mmco: unref short failure
[h264 @ 0x55e529acbb00] mmco: unref short failure
 42%|████▏     | 649/1556 [2:37:51<4:18:05, 17.07s/it]09/06/2024 22:13:32 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.128126621246338, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.05056595057249069, 'loss_ret%tv%ta--finetune_area/loss_area': 2.68068790435791, 'loss_ret%tv%ta--finetune_area/total_loss': 5.859380722045898}
 42%|████▏     | 650/1556 [2:37:56<3:23:01, 13.45s/it][h264 @ 0x55e5313d3100] mmco: unref short failure
 42%|████▏     | 651/1556 [2:38:02<2:46:26, 11.03s/it][h264 @ 0x55e52c4ef2c0] mmco: unref short failure
[h264 @ 0x55e52c4ef2c0] mmco: unref short failure
[h264 @ 0x55c97b114940] mmco: unref short failure
[h264 @ 0x55c9852c73c0] mmco: unref short failure
[h264 @ 0x5649ea1b4740] mmco: unref short failure
[h264 @ 0x5616a9e5cf00] mmco: unref short failure
 42%|████▏     | 652/1556 [2:38:13<2:44:38, 10.93s/it] 42%|████▏     | 653/1556 [2:38:17<2:17:19,  9.12s/it][h264 @ 0x55c981ad5940] mmco: unref short failure
 42%|████▏     | 654/1556 [2:38:23<2:01:59,  8.11s/it][h264 @ 0x55c972e20000] mmco: unref short failure
[h264 @ 0x55c972e20000] mmco: unref short failure
[h264 @ 0x55c9704582c0] mmco: unref short failure
[h264 @ 0x5616aa8c3640] mmco: unref short failure
[h264 @ 0x5616aa8c3640] mmco: unref short failure
 42%|████▏     | 655/1556 [2:38:32<2:04:48,  8.31s/it][h264 @ 0x5649e4615f40] mmco: unref short failure
[h264 @ 0x5649e4615f40] mmco: unref short failure
[h264 @ 0x55e52312ae40] mmco: unref short failure
[h264 @ 0x55e52312ae40] mmco: unref short failure
[h264 @ 0x5616a9e5d100] mmco: unref short failure
[h264 @ 0x5616a9e5d100] mmco: unref short failure
[h264 @ 0x55c98132a540] mmco: unref short failure
[h264 @ 0x55c98132a540] mmco: unref short failure
[h264 @ 0x55c9704582c0] mmco: unref short failure
[h264 @ 0x55c9704582c0] mmco: unref short failure
[h264 @ 0x55c97eee8cc0] mmco: unref short failure
 42%|████▏     | 656/1556 [2:39:26<5:31:05, 22.07s/it] 42%|████▏     | 657/1556 [2:39:31<4:14:06, 16.96s/it][h264 @ 0x5616b1868d80] mmco: unref short failure
 42%|████▏     | 658/1556 [2:39:36<3:20:09, 13.37s/it] 42%|████▏     | 659/1556 [2:39:41<2:39:38, 10.68s/it][h264 @ 0x55c98207b400] mmco: unref short failure
[h264 @ 0x55c98207b400] mmco: unref short failure
 42%|████▏     | 660/1556 [2:39:57<3:06:04, 12.46s/it][h264 @ 0x5649e549c440] mmco: unref short failure
 42%|████▏     | 661/1556 [2:40:02<2:32:44, 10.24s/it][h264 @ 0x55c97dbf7d80] mmco: unref short failure
[h264 @ 0x55c97dbf7d80] mmco: unref short failure
[h264 @ 0x55c970458500] mmco: unref short failure
 43%|████▎     | 662/1556 [2:40:08<2:13:07,  8.93s/it] 43%|████▎     | 663/1556 [2:40:13<1:56:13,  7.81s/it][h264 @ 0x5649e7953480] mmco: unref short failure
[h264 @ 0x5649e7953480] mmco: unref short failure
[h264 @ 0x55e5325a9440] mmco: unref short failure
[h264 @ 0x55e5204fcd00] mmco: unref short failure
[h264 @ 0x55e5204fcd00] mmco: unref short failure
[h264 @ 0x5649eb2c5d00] mmco: unref short failure
[h264 @ 0x5649eb2c5d00] mmco: unref short failure
 43%|████▎     | 664/1556 [2:41:07<5:18:49, 21.45s/it][h264 @ 0x55c97ca28e00] mmco: unref short failure
[h264 @ 0x55c97ca28e00] mmco: unref short failure
 43%|████▎     | 665/1556 [2:41:12<4:07:11, 16.65s/it] 43%|████▎     | 666/1556 [2:41:18<3:17:58, 13.35s/it] 43%|████▎     | 667/1556 [2:41:23<2:40:40, 10.84s/it][h264 @ 0x55e524b3bc00] mmco: unref short failure
[h264 @ 0x55c97b5ce3c0] mmco: unref short failure
[h264 @ 0x55c97b5ce3c0] mmco: unref short failure
[h264 @ 0x55c97b8bf980] mmco: unref short failure
[h264 @ 0x55c97b8bf980] mmco: unref short failure
 43%|████▎     | 668/1556 [2:41:36<2:50:05, 11.49s/it][h264 @ 0x55c9706d3800] mmco: unref short failure
 43%|████▎     | 669/1556 [2:41:41<2:24:20,  9.76s/it][h264 @ 0x55c9754a9980] mmco: unref short failure
[h264 @ 0x55c9754a9980] mmco: unref short failure
[h264 @ 0x55c9778f5200] mmco: unref short failure
 43%|████▎     | 670/1556 [2:41:48<2:08:18,  8.69s/it][h264 @ 0x55e524d89980] mmco: unref short failure
 43%|████▎     | 671/1556 [2:41:53<1:53:38,  7.70s/it][h264 @ 0x5616b4be3f40] mmco: unref short failure
[h264 @ 0x5616b4be3f40] mmco: unref short failure
[h264 @ 0x5616af3179c0] mmco: unref short failure
[h264 @ 0x55c985114d80] mmco: unref short failure
[h264 @ 0x55c985114d80] mmco: unref short failure
[h264 @ 0x55c979646880] mmco: unref short failure
[h264 @ 0x5616a8d54d00] mmco: unref short failure
[h264 @ 0x5616a8d54d00] mmco: unref short failure
[h264 @ 0x5616a8d54d00] mmco: unref short failure
[h264 @ 0x5616a8d54d00] mmco: unref short failure
[h264 @ 0x55c97b5839c0] mmco: unref short failure
[h264 @ 0x5616b1f30a00] mmco: unref short failure
[h264 @ 0x5616b1f30a00] mmco: unref short failure
[h264 @ 0x55c9747d1f80] mmco: unref short failure
[h264 @ 0x55c9747d1f80] mmco: unref short failure
[h264 @ 0x55e5295dd340] mmco: unref short failure
[h264 @ 0x55e5295dd340] mmco: unref short failure
[h264 @ 0x5649e80b1500] mmco: unref short failure
[h264 @ 0x5649e80b1500] mmco: unref short failure
[h264 @ 0x5649de21afc0] mmco: unref short failure
 43%|████▎     | 672/1556 [2:42:39<4:41:28, 19.10s/it][h264 @ 0x55e522cd4480] mmco: unref short failure
[h264 @ 0x5649e622a700] mmco: unref short failure
[h264 @ 0x5649e622a700] mmco: unref short failure
 43%|████▎     | 673/1556 [2:42:44<3:41:26, 15.05s/it][h264 @ 0x5649df4a54c0] mmco: unref short failure
 43%|████▎     | 674/1556 [2:42:49<2:57:45, 12.09s/it][h264 @ 0x55e525900fc0] mmco: unref short failure
 43%|████▎     | 675/1556 [2:42:55<2:26:36,  9.98s/it][h264 @ 0x55e52f063040] mmco: unref short failure
[h264 @ 0x5649dd5a9bc0] mmco: unref short failure
 43%|████▎     | 676/1556 [2:43:17<3:20:35, 13.68s/it][h264 @ 0x561671532980] mmco: unref short failure
 44%|████▎     | 677/1556 [2:43:23<2:49:24, 11.56s/it] 44%|████▎     | 678/1556 [2:43:29<2:22:12,  9.72s/it] 44%|████▎     | 679/1556 [2:43:37<2:13:12,  9.11s/it][h264 @ 0x5616bc2001c0] mmco: unref short failure
[h264 @ 0x55e52bcc5b40] mmco: unref short failure
[h264 @ 0x55e524a4ed40] mmco: unref short failure
[h264 @ 0x55e524a4ed40] mmco: unref short failure
[h264 @ 0x5649e52edf40] mmco: unref short failure
[h264 @ 0x55c97b5837c0] mmco: unref short failure
[h264 @ 0x55e52aeeb400] mmco: unref short failure
[h264 @ 0x55e52f3532c0] mmco: unref short failure
[h264 @ 0x55e52f3532c0] mmco: unref short failure
 44%|████▎     | 680/1556 [2:44:18<4:34:34, 18.81s/it][h264 @ 0x5649dd8fa640] mmco: unref short failure
[h264 @ 0x56167175d0c0] mmco: unref short failure
[h264 @ 0x56167175d0c0] mmco: unref short failure
[h264 @ 0x5616ac83dd40] mmco: unref short failure
 44%|████▍     | 681/1556 [2:44:25<3:40:29, 15.12s/it] 44%|████▍     | 682/1556 [2:44:30<2:59:45, 12.34s/it][h264 @ 0x5616ac6297c0] mmco: unref short failure
[h264 @ 0x5616ac6297c0] mmco: unref short failure
 44%|████▍     | 683/1556 [2:44:37<2:34:17, 10.60s/it][h264 @ 0x55c97c88ccc0] mmco: unref short failure
[h264 @ 0x55c97c88ccc0] mmco: unref short failure
 44%|████▍     | 684/1556 [2:44:55<3:06:28, 12.83s/it] 44%|████▍     | 685/1556 [2:45:01<2:35:01, 10.68s/it][h264 @ 0x55c97cafb200] mmco: unref short failure
[h264 @ 0x55c97cafb200] mmco: unref short failure
 44%|████▍     | 686/1556 [2:45:06<2:12:49,  9.16s/it][h264 @ 0x5616b586b900] mmco: unref short failure
[h264 @ 0x55c97956f840] mmco: unref short failure
 44%|████▍     | 687/1556 [2:45:11<1:55:37,  7.98s/it][h264 @ 0x55e51fe90700] mmco: unref short failure
[h264 @ 0x55e533159a80] mmco: unref short failure
[h264 @ 0x55e533159a80] mmco: unref short failure
[h264 @ 0x55c972e00180] mmco: unref short failure
[h264 @ 0x55c972e00180] mmco: unref short failure
[h264 @ 0x55c972e00180] mmco: unref short failure
[h264 @ 0x55c972e00180] mmco: unref short failure
[h264 @ 0x55c97b3a80c0] mmco: unref short failure
[h264 @ 0x5649e7b0d900] mmco: unref short failure
[h264 @ 0x5649e7b0d900] mmco: unref short failure
[h264 @ 0x55e52fd32cc0] mmco: unref short failure
[h264 @ 0x55e52fd32cc0] mmco: unref short failure
[h264 @ 0x5649f0663f80] mmco: unref short failure
[h264 @ 0x55c979eb5b00] mmco: unref short failure
[h264 @ 0x55c979eb5b00] mmco: unref short failure
[h264 @ 0x5649dd636140] mmco: unref short failure
[h264 @ 0x55e5311c47c0] mmco: unref short failure
[h264 @ 0x55e5311c47c0] mmco: unref short failure
[h264 @ 0x5616aa941b80] mmco: unref short failure
[h264 @ 0x5616b1868f80] mmco: unref short failure
[h264 @ 0x5616bcba69c0] mmco: unref short failure
[h264 @ 0x5616b1eb7300] mmco: unref short failure
 44%|████▍     | 688/1556 [2:45:59<4:45:28, 19.73s/it] 44%|████▍     | 689/1556 [2:46:04<3:44:20, 15.52s/it] 44%|████▍     | 690/1556 [2:46:10<3:01:15, 12.56s/it] 44%|████▍     | 691/1556 [2:46:16<2:33:07, 10.62s/it][h264 @ 0x55c979c23240] mmco: unref short failure
[h264 @ 0x55c979c23240] mmco: unref short failure
[h264 @ 0x55c97c88cec0] mmco: unref short failure
[h264 @ 0x55c97c88cec0] mmco: unref short failure
[h264 @ 0x55e5281b2500] mmco: unref short failure
[h264 @ 0x5649e41fe3c0] mmco: unref short failure
[h264 @ 0x5649e41fe3c0] mmco: unref short failure
 44%|████▍     | 692/1556 [2:46:39<3:25:56, 14.30s/it][h264 @ 0x5649e87959c0] mmco: unref short failure
 45%|████▍     | 693/1556 [2:46:45<2:49:51, 11.81s/it][h264 @ 0x55e524fd7680] mmco: unref short failure
 45%|████▍     | 694/1556 [2:46:50<2:22:12,  9.90s/it] 45%|████▍     | 695/1556 [2:46:56<2:03:54,  8.63s/it][h264 @ 0x55c97d8cdbc0] mmco: unref short failure
[h264 @ 0x5616aaa24080] mmco: unref short failure
[h264 @ 0x5616aaa24080] mmco: unref short failure
[h264 @ 0x5616b94b8a40] mmco: unref short failure
[h264 @ 0x5616b94b8a40] mmco: unref short failure
[h264 @ 0x5649e273a880] mmco: unref short failure
[h264 @ 0x5649e273a880] mmco: unref short failure
[h264 @ 0x55c9388bda80] mmco: unref short failure
[h264 @ 0x55c9388bda80] mmco: unref short failure
[h264 @ 0x5616ba643f40] mmco: unref short failure
[h264 @ 0x5649f38523c0] mmco: unref short failure
 45%|████▍     | 696/1556 [2:47:37<4:23:06, 18.36s/it][h264 @ 0x55e526dae700] mmco: unref short failure
[h264 @ 0x55e526dae700] mmco: unref short failure
[h264 @ 0x55e522139740] mmco: unref short failure
[h264 @ 0x55e522139740] mmco: unref short failure
[h264 @ 0x55c97d8cdbc0] mmco: unref short failure
 45%|████▍     | 697/1556 [2:47:45<3:37:42, 15.21s/it][h264 @ 0x5649b94e66c0] mmco: unref short failure
 45%|████▍     | 698/1556 [2:47:50<2:52:10, 12.04s/it] 45%|████▍     | 699/1556 [2:47:57<2:34:09, 10.79s/it][h264 @ 0x5616ac6297c0] mmco: unref short failure
[h264 @ 0x5616ac6297c0] mmco: unref short failure
09/06/2024 22:23:46 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.2355258464813232, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04550832509994507, 'loss_ret%tv%ta--finetune_area/loss_area': 2.8340206146240234, 'loss_ret%tv%ta--finetune_area/total_loss': 6.115055084228516}
 45%|████▍     | 700/1556 [2:48:11<2:46:01, 11.64s/it][h264 @ 0x5649e5e6e5c0] mmco: unref short failure
 45%|████▌     | 701/1556 [2:48:17<2:20:58,  9.89s/it][h264 @ 0x5649e59ab4c0] mmco: unref short failure
[h264 @ 0x55c971208a00] mmco: unref short failure
[h264 @ 0x55c971208a00] mmco: unref short failure
[h264 @ 0x5649e59ab4c0] mmco: unref short failure
[h264 @ 0x5649e59ab4c0] mmco: unref short failure
[h264 @ 0x5649ecfcb380] mmco: unref short failure
[h264 @ 0x5649ecfcb380] mmco: unref short failure
 45%|████▌     | 702/1556 [2:48:22<2:02:11,  8.58s/it] 45%|████▌     | 703/1556 [2:48:27<1:46:04,  7.46s/it][h264 @ 0x55e53457c0c0] mmco: unref short failure
[h264 @ 0x55e53457c0c0] mmco: unref short failure
[h264 @ 0x55e5301eda00] mmco: unref short failure
[h264 @ 0x55c9854ad640] mmco: unref short failure
[h264 @ 0x55c9854ad640] mmco: unref short failure
[h264 @ 0x5616b3cf5c80] mmco: unref short failure
[h264 @ 0x5649f426a140] mmco: unref short failure
[h264 @ 0x5649f426a140] mmco: unref short failure
[h264 @ 0x5616a95fd800] mmco: unref short failure
[h264 @ 0x5616a95fd800] mmco: unref short failure
[h264 @ 0x5616a95fd800] mmco: unref short failure
[h264 @ 0x5616a95fd800] mmco: unref short failure
[h264 @ 0x5649b8fc7ec0] mmco: unref short failure
[h264 @ 0x5649b8fc7ec0] mmco: unref short failure
[h264 @ 0x5616bd32e240] mmco: unref short failure
[h264 @ 0x5616b137bbc0] mmco: unref short failure
[h264 @ 0x5616b137bbc0] mmco: unref short failure
[h264 @ 0x5616b137bbc0] mmco: unref short failure
[h264 @ 0x55e52fecaac0] mmco: unref short failure
[h264 @ 0x55e52fecaac0] mmco: unref short failure
[h264 @ 0x55c9728a8240] mmco: unref short failure
[h264 @ 0x55c9728a8240] mmco: unref short failure
[h264 @ 0x5649e2d71580] mmco: unref short failure
[h264 @ 0x5649e2d71580] mmco: unref short failure
 45%|████▌     | 704/1556 [2:49:16<4:40:11, 19.73s/it][h264 @ 0x55e52f14cc80] mmco: unref short failure
[h264 @ 0x5616b5e48300] mmco: unref short failure
[h264 @ 0x5616b5e48300] mmco: unref short failure
[h264 @ 0x55c971400a00] mmco: unref short failure
[h264 @ 0x55c971400a00] mmco: unref short failure
 45%|████▌     | 705/1556 [2:49:21<3:38:35, 15.41s/it] 45%|████▌     | 706/1556 [2:49:27<2:59:26, 12.67s/it] 45%|████▌     | 707/1556 [2:49:34<2:35:54, 11.02s/it][h264 @ 0x55c980788100] mmco: unref short failure
 46%|████▌     | 708/1556 [2:49:50<2:56:12, 12.47s/it][h264 @ 0x55c97053ac40] mmco: unref short failure
[h264 @ 0x55c97053ac40] mmco: unref short failure
 46%|████▌     | 709/1556 [2:49:56<2:25:58, 10.34s/it][h264 @ 0x55e534ef2380] mmco: unref short failure
[h264 @ 0x55c9728a8240] mmco: unref short failure
[h264 @ 0x55c9728a8240] mmco: unref short failure
 46%|████▌     | 710/1556 [2:50:01<2:06:14,  8.95s/it] 46%|████▌     | 711/1556 [2:50:07<1:50:04,  7.82s/it][h264 @ 0x55c975cc9200] mmco: unref short failure
[h264 @ 0x55c975cc9200] mmco: unref short failure
[h264 @ 0x5616ab8fe940] mmco: unref short failure
[h264 @ 0x5616ab8fe940] mmco: unref short failure
[h264 @ 0x55c97464bbc0] mmco: unref short failure
 46%|████▌     | 712/1556 [2:50:58<4:55:50, 21.03s/it][h264 @ 0x56167096c680] mmco: unref short failure
[h264 @ 0x56167096c680] mmco: unref short failure
 46%|████▌     | 713/1556 [2:51:04<3:49:51, 16.36s/it] 46%|████▌     | 714/1556 [2:51:09<3:03:41, 13.09s/it][h264 @ 0x5616b1aab840] mmco: unref short failure
 46%|████▌     | 715/1556 [2:51:15<2:30:39, 10.75s/it][h264 @ 0x55c938c26c40] mmco: unref short failure
 46%|████▌     | 716/1556 [2:51:27<2:36:09, 11.15s/it] 46%|████▌     | 717/1556 [2:51:33<2:13:34,  9.55s/it][h264 @ 0x55c97c6d6940] mmco: unref short failure
[h264 @ 0x55c97c6d6940] mmco: unref short failure
 46%|████▌     | 718/1556 [2:51:38<1:56:14,  8.32s/it][h264 @ 0x55c979838300] mmco: unref short failure
[h264 @ 0x55e5204c1dc0] mmco: unref short failure
 46%|████▌     | 719/1556 [2:51:43<1:41:49,  7.30s/it][h264 @ 0x5616a82e0d40] mmco: unref short failure
[h264 @ 0x55c985c9fe40] mmco: unref short failure
[h264 @ 0x55e52edbe380] mmco: unref short failure
[h264 @ 0x55e52edbe380] mmco: unref short failure
[h264 @ 0x5649ea1bde40] mmco: unref short failure
[h264 @ 0x5649ea1bde40] mmco: unref short failure
[h264 @ 0x5649ea1bde40] mmco: unref short failure
[h264 @ 0x5649ea1bde40] mmco: unref short failure
[h264 @ 0x5649ea1bde40] mmco: unref short failure
[h264 @ 0x5649ea1bde40] mmco: unref short failure
[h264 @ 0x55e534894ac0] mmco: unref short failure
[h264 @ 0x55e534894ac0] mmco: unref short failure
[h264 @ 0x5616716df140] mmco: unref short failure
 46%|████▋     | 720/1556 [2:52:38<5:01:52, 21.67s/it] 46%|████▋     | 721/1556 [2:52:44<3:54:42, 16.87s/it][h264 @ 0x55e4fa4711c0] mmco: unref short failure
[h264 @ 0x55e4fa4711c0] mmco: unref short failure
[h264 @ 0x55e4fa4711c0] mmco: unref short failure
[h264 @ 0x55e4fa4711c0] mmco: unref short failure
 46%|████▋     | 722/1556 [2:52:49<3:07:39, 13.50s/it][h264 @ 0x55e532ea1200] mmco: unref short failure
[h264 @ 0x55e532ea1200] mmco: unref short failure
 46%|████▋     | 723/1556 [2:52:54<2:32:27, 10.98s/it][h264 @ 0x5649ee0a07c0] mmco: unref short failure
[h264 @ 0x5616b9eef480] mmco: unref short failure
[h264 @ 0x5616b9eef480] mmco: unref short failure
 47%|████▋     | 724/1556 [2:53:06<2:35:01, 11.18s/it][h264 @ 0x5616b4123c40] mmco: unref short failure
[h264 @ 0x5616b4123c40] mmco: unref short failure
 47%|████▋     | 725/1556 [2:53:11<2:09:25,  9.34s/it][h264 @ 0x5616b6c7dd00] mmco: unref short failure
[h264 @ 0x5616b6c7dd00] mmco: unref short failure
 47%|████▋     | 726/1556 [2:53:17<1:54:28,  8.28s/it] 47%|████▋     | 727/1556 [2:53:22<1:40:48,  7.30s/it][h264 @ 0x55e4fa1bcd80] mmco: unref short failure
[h264 @ 0x55e4fa1bcd80] mmco: unref short failure
[h264 @ 0x55c9826eb1c0] mmco: unref short failure
[h264 @ 0x5649e85e4700] mmco: unref short failure
[h264 @ 0x5649e85e4700] mmco: unref short failure
[h264 @ 0x55e52df13600] mmco: unref short failure
[h264 @ 0x55e52df13600] mmco: unref short failure
[h264 @ 0x5649e93dfe40] mmco: unref short failure
[h264 @ 0x55e5270e5a40] mmco: unref short failure
[h264 @ 0x55e5270e5a40] mmco: unref short failure
[h264 @ 0x55e52e75e940] mmco: unref short failure
[h264 @ 0x5616b12b7200] mmco: unref short failure
[h264 @ 0x5616abd13100] mmco: unref short failure
[h264 @ 0x55c9765bdbc0] mmco: unref short failure
 47%|████▋     | 728/1556 [2:54:19<5:05:17, 22.12s/it][h264 @ 0x5616b69fd040] mmco: unref short failure
[h264 @ 0x5616b69fd040] mmco: unref short failure
[h264 @ 0x55c977bf0740] mmco: unref short failure
 47%|████▋     | 729/1556 [2:54:24<3:56:05, 17.13s/it] 47%|████▋     | 730/1556 [2:54:29<3:05:15, 13.46s/it][h264 @ 0x5649dd357400] mmco: unref short failure
[h264 @ 0x5649dd357400] mmco: unref short failure
 47%|████▋     | 731/1556 [2:54:35<2:33:16, 11.15s/it] 47%|████▋     | 732/1556 [2:54:45<2:30:45, 10.98s/it][h264 @ 0x55c984de4280] mmco: unref short failure
 47%|████▋     | 733/1556 [2:54:53<2:18:37, 10.11s/it] 47%|████▋     | 734/1556 [2:54:59<1:59:23,  8.71s/it] 47%|████▋     | 735/1556 [2:55:04<1:44:24,  7.63s/it][h264 @ 0x55e52fb90380] mmco: unref short failure
[h264 @ 0x55e52fb90380] mmco: unref short failure
[h264 @ 0x55e52cddc5c0] mmco: unref short failure
[h264 @ 0x55e520969b80] mmco: unref short failure
[h264 @ 0x55e520969b80] mmco: unref short failure
[h264 @ 0x55e522344c00] mmco: unref short failure
[h264 @ 0x55e522344c00] mmco: unref short failure
[h264 @ 0x5649b9b292c0] mmco: unref short failure
[h264 @ 0x5649b9b292c0] mmco: unref short failure
[h264 @ 0x55c986366040] mmco: unref short failure
[h264 @ 0x55c986366040] mmco: unref short failure
[h264 @ 0x55e52f34c580] mmco: unref short failure
[h264 @ 0x55e52f34c580] mmco: unref short failure
[h264 @ 0x5616af512fc0] mmco: unref short failure
 47%|████▋     | 736/1556 [2:55:55<4:41:15, 20.58s/it] 47%|████▋     | 737/1556 [2:56:00<3:37:58, 15.97s/it] 47%|████▋     | 738/1556 [2:56:05<2:53:02, 12.69s/it][h264 @ 0x5616b9971780] mmco: unref short failure
[h264 @ 0x55c9781454c0] mmco: unref short failure
[h264 @ 0x55c9706eaf80] mmco: unref short failure
 47%|████▋     | 739/1556 [2:56:11<2:25:14, 10.67s/it][h264 @ 0x55c97f3b6080] mmco: unref short failure
[h264 @ 0x5616ad12fe80] mmco: unref short failure
[h264 @ 0x5616ad12fe80] mmco: unref short failure
[h264 @ 0x55e5326abf40] mmco: unref short failure
[h264 @ 0x5649e899ba80] mmco: unref short failure
[h264 @ 0x5649e899ba80] mmco: unref short failure
 48%|████▊     | 740/1556 [2:56:23<2:31:31, 11.14s/it][h264 @ 0x5649dad97e80] mmco: unref short failure
[h264 @ 0x55e4f9afb4c0] mmco: unref short failure
[h264 @ 0x55e4f9afb4c0] mmco: unref short failure
 48%|████▊     | 741/1556 [2:56:29<2:08:29,  9.46s/it][h264 @ 0x5616bc0bcbc0] mmco: unref short failure
[h264 @ 0x5616bc0bcbc0] mmco: unref short failure
 48%|████▊     | 742/1556 [2:56:36<1:57:40,  8.67s/it][h264 @ 0x55c978c5de80] mmco: unref short failure
 48%|████▊     | 743/1556 [2:56:41<1:43:11,  7.62s/it][h264 @ 0x55c9822920c0] mmco: unref short failure
[h264 @ 0x5649dc419b80] mmco: unref short failure
[h264 @ 0x5649dc419b80] mmco: unref short failure
[h264 @ 0x5616b5458c80] mmco: unref short failure
[h264 @ 0x55c983787dc0] mmco: unref short failure
[h264 @ 0x55c983787dc0] mmco: unref short failure
[h264 @ 0x5616a92efe80] mmco: unref short failure
[h264 @ 0x55e529641640] mmco: unref short failure
[h264 @ 0x5616b457ccc0] mmco: unref short failure
[h264 @ 0x5616b457ccc0] mmco: unref short failure
[h264 @ 0x55c978af8dc0] mmco: unref short failure
[h264 @ 0x55c978af8dc0] mmco: unref short failure
[h264 @ 0x55c978af8dc0] mmco: unref short failure
[h264 @ 0x55c978af8dc0] mmco: unref short failure
[h264 @ 0x55c97e505fc0] mmco: unref short failure
[h264 @ 0x55c97e505fc0] mmco: unref short failure
[h264 @ 0x5616b92f5d80] mmco: unref short failure
 48%|████▊     | 744/1556 [2:57:28<4:24:22, 19.54s/it][h264 @ 0x561670fddf80] mmco: unref short failure
[h264 @ 0x561670fddf80] mmco: unref short failure
 48%|████▊     | 745/1556 [2:57:34<3:30:23, 15.57s/it][h264 @ 0x55c9747baf00] mmco: unref short failure
[h264 @ 0x55c9747baf00] mmco: unref short failure
 48%|████▊     | 746/1556 [2:57:40<2:48:43, 12.50s/it] 48%|████▊     | 747/1556 [2:57:48<2:31:31, 11.24s/it] 48%|████▊     | 748/1556 [2:58:00<2:34:26, 11.47s/it][h264 @ 0x5616a92dbcc0] mmco: unref short failure
[h264 @ 0x55e523d770c0] mmco: unref short failure
[h264 @ 0x55e523d770c0] mmco: unref short failure
 48%|████▊     | 749/1556 [2:58:06<2:12:18,  9.84s/it][h264 @ 0x55e51f6181c0] mmco: unref short failure
[h264 @ 0x55e51f6181c0] mmco: unref short failure
09/06/2024 22:33:50 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.129641532897949, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.047281622886657715, 'loss_ret%tv%ta--finetune_area/loss_area': 2.937070369720459, 'loss_ret%tv%ta--finetune_area/total_loss': 6.1139936447143555}
 48%|████▊     | 750/1556 [2:58:15<2:07:25,  9.49s/it] 48%|████▊     | 751/1556 [2:58:21<1:52:50,  8.41s/it][h264 @ 0x55c973a8a880] mmco: unref short failure
[h264 @ 0x55c973a8a880] mmco: unref short failure
[h264 @ 0x5649e3490080] mmco: unref short failure
[h264 @ 0x55e51f4f5840] mmco: unref short failure
[h264 @ 0x55e5230cbb80] mmco: unref short failure
[h264 @ 0x55e5230cbb80] mmco: unref short failure
[h264 @ 0x55e5230cbb80] mmco: unref short failure
[h264 @ 0x55e5230cbb80] mmco: unref short failure
[h264 @ 0x55e5230cbb80] mmco: unref short failure
[h264 @ 0x55e5230cbb80] mmco: unref short failure
[h264 @ 0x55e5230cbb80] mmco: unref short failure
[h264 @ 0x55e5230cbb80] mmco: unref short failure
[h264 @ 0x55e52451d7c0] mmco: unref short failure
[h264 @ 0x55e52451d7c0] mmco: unref short failure
[h264 @ 0x55e52451d7c0] mmco: unref short failure
[h264 @ 0x55e52451d7c0] mmco: unref short failure
[h264 @ 0x55e52451d7c0] mmco: unref short failure
[h264 @ 0x55e52451d7c0] mmco: unref short failure
[h264 @ 0x5649e572adc0] mmco: unref short failure
[h264 @ 0x55c937dab580] mmco: unref short failure
 48%|████▊     | 752/1556 [2:59:08<4:27:33, 19.97s/it] 48%|████▊     | 753/1556 [2:59:12<3:26:02, 15.39s/it] 48%|████▊     | 754/1556 [2:59:18<2:45:28, 12.38s/it] 49%|████▊     | 755/1556 [2:59:23<2:15:45, 10.17s/it][h264 @ 0x5616acba2000] mmco: unref short failure
[h264 @ 0x5616acba2000] mmco: unref short failure
[h264 @ 0x55e520fb6440] mmco: unref short failure
[h264 @ 0x55e4fa3b16c0] mmco: unref short failure
[h264 @ 0x55c9388fbe80] mmco: unref short failure
[h264 @ 0x55c9388fbe80] mmco: unref short failure
[h264 @ 0x55c97549f200] mmco: unref short failure
[h264 @ 0x55c97549f200] mmco: unref short failure
 49%|████▊     | 756/1556 [2:59:37<2:32:47, 11.46s/it][h264 @ 0x5616af1d1980] mmco: unref short failure
[h264 @ 0x5616af1d1980] mmco: unref short failure
 49%|████▊     | 757/1556 [2:59:43<2:09:54,  9.75s/it][h264 @ 0x5649e40379c0] mmco: unref short failure
 49%|████▊     | 758/1556 [2:59:53<2:11:27,  9.88s/it] 49%|████▉     | 759/1556 [2:59:58<1:52:58,  8.51s/it][h264 @ 0x55c982ee9c00] mmco: unref short failure
[h264 @ 0x55e52bc8e7c0] mmco: unref short failure
[h264 @ 0x55e52bc8e7c0] mmco: unref short failure
[h264 @ 0x55e52bc8e7c0] mmco: unref short failure
 49%|████▉     | 760/1556 [3:00:38<3:58:15, 17.96s/it][h264 @ 0x56167191cd40] mmco: unref short failure
[h264 @ 0x56167191cd40] mmco: unref short failure
 49%|████▉     | 761/1556 [3:00:45<3:10:54, 14.41s/it] 49%|████▉     | 762/1556 [3:00:51<2:40:45, 12.15s/it] 49%|████▉     | 763/1556 [3:00:57<2:13:18, 10.09s/it][h264 @ 0x55e53077e080] mmco: unref short failure
[h264 @ 0x5616b7dca780] mmco: unref short failure
[h264 @ 0x5616abe35580] mmco: unref short failure
[h264 @ 0x55c93855a580] mmco: unref short failure
 49%|████▉     | 764/1556 [3:01:19<3:01:19, 13.74s/it] 49%|████▉     | 765/1556 [3:01:24<2:27:49, 11.21s/it] 49%|████▉     | 766/1556 [3:01:31<2:08:53,  9.79s/it][h264 @ 0x55c9838b1080] mmco: unref short failure
 49%|████▉     | 767/1556 [3:01:36<1:51:21,  8.47s/it][h264 @ 0x5649b9524980] mmco: unref short failure
[h264 @ 0x5649b9524980] mmco: unref short failure
[h264 @ 0x5616a9e36340] mmco: unref short failure
[h264 @ 0x5616a9e36340] mmco: unref short failure
[h264 @ 0x55e5255e87c0] mmco: unref short failure
[h264 @ 0x55e5255e87c0] mmco: unref short failure
[h264 @ 0x5616bc976fc0] mmco: unref short failure
[h264 @ 0x5616bc976fc0] mmco: unref short failure
[h264 @ 0x55c983277cc0] mmco: unref short failure
[h264 @ 0x55c983277cc0] mmco: unref short failure
 49%|████▉     | 768/1556 [3:02:17<4:00:18, 18.30s/it] 49%|████▉     | 769/1556 [3:02:22<3:04:52, 14.10s/it][h264 @ 0x55e4fa2182c0] mmco: unref short failure
 49%|████▉     | 770/1556 [3:02:26<2:26:49, 11.21s/it][h264 @ 0x5616abe35580] mmco: unref short failure
 50%|████▉     | 771/1556 [3:02:30<1:57:31,  8.98s/it][h264 @ 0x5649eab3e2c0] mmco: unref short failure
[h264 @ 0x5616b8c17b40] mmco: unref short failure
[h264 @ 0x5649e25a6780] mmco: unref short failure
[h264 @ 0x5649e25a6780] mmco: unref short failure
 50%|████▉     | 772/1556 [3:02:41<2:05:19,  9.59s/it][h264 @ 0x5649e25a6780] mmco: unref short failure
[h264 @ 0x5649e25a6780] mmco: unref short failure
 50%|████▉     | 773/1556 [3:02:44<1:38:08,  7.52s/it] 50%|████▉     | 774/1556 [3:02:47<1:20:43,  6.19s/it] 50%|████▉     | 775/1556 [3:02:49<1:06:55,  5.14s/it][h264 @ 0x5616b5b24c80] mmco: unref short failure
[h264 @ 0x5616b5b24c80] mmco: unref short failure
[h264 @ 0x5616b5b24c80] mmco: unref short failure
[h264 @ 0x5616b5b24c80] mmco: unref short failure
[h264 @ 0x5616b5b24c80] mmco: unref short failure
[h264 @ 0x5616b5b24c80] mmco: unref short failure
 50%|████▉     | 776/1556 [3:02:59<1:25:11,  6.55s/it] 50%|████▉     | 777/1556 [3:03:02<1:08:43,  5.29s/it]/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5616712d9840] mmco: unref short failure
[h264 @ 0x5616712d9840] mmco: unref short failure
[h264 @ 0x561670d9ee00] mmco: unref short failure
[h264 @ 0x55e4faacdc00] mmco: unref short failure
[h264 @ 0x55e4faacdc00] mmco: unref short failure
[h264 @ 0x5649b95d0ac0] mmco: unref short failure
[h264 @ 0x55c9383833c0] mmco: unref short failure
[h264 @ 0x55e4fa7cc780] mmco: unref short failure
[h264 @ 0x55e4fa7cc780] mmco: unref short failure
[h264 @ 0x55c938229e40] mmco: unref short failure
[h264 @ 0x55c938229e40] mmco: unref short failure
[h264 @ 0x55e4fa9d54c0] mmco: unref short failure
[h264 @ 0x55c938894180] mmco: unref short failure
[h264 @ 0x56167123ae80] mmco: unref short failure
[h264 @ 0x56167123ae80] mmco: unref short failure
[h264 @ 0x55c971518cc0] mmco: unref short failure
[h264 @ 0x55e4fa710100] mmco: unref short failure
[h264 @ 0x5616a9ee12c0] mmco: unref short failure
[h264 @ 0x5616a9ee12c0] mmco: unref short failure
[h264 @ 0x5616aade1580] mmco: unref short failure
[h264 @ 0x55c937f7c640] mmco: unref short failure
[h264 @ 0x55c96fdca280] mmco: unref short failure
[h264 @ 0x55c96fdca280] mmco: unref short failure
[h264 @ 0x5616a91713c0] mmco: unref short failure
[h264 @ 0x55e521c06a80] mmco: unref short failure
[h264 @ 0x55e521c06a80] mmco: unref short failure
 50%|█████     | 778/1556 [3:04:58<8:20:22, 38.59s/it] 50%|█████     | 779/1556 [3:05:03<6:09:55, 28.57s/it] 50%|█████     | 780/1556 [3:05:09<4:40:16, 21.67s/it] 50%|█████     | 781/1556 [3:05:14<3:35:39, 16.70s/it][h264 @ 0x55e51fb3ab40] mmco: unref short failure
[h264 @ 0x55e51fb3ab40] mmco: unref short failure
 50%|█████     | 782/1556 [3:05:19<2:51:06, 13.26s/it] 50%|█████     | 783/1556 [3:05:24<2:20:04, 10.87s/it] 50%|█████     | 784/1556 [3:05:30<1:59:03,  9.25s/it][h264 @ 0x561670954bc0] mmco: unref short failure
 50%|█████     | 785/1556 [3:05:35<1:44:37,  8.14s/it][h264 @ 0x5616a8aba400] mmco: unref short failure
[h264 @ 0x5616a8aba400] mmco: unref short failure
[h264 @ 0x55c974111ac0] mmco: unref short failure
[h264 @ 0x5616ab6cc700] mmco: unref short failure
[h264 @ 0x55c97213d7c0] mmco: unref short failure
[h264 @ 0x5649dcd13140] mmco: unref short failure
[h264 @ 0x55c9754357c0] mmco: unref short failure
[h264 @ 0x55c937f38200] mmco: unref short failure
[h264 @ 0x55c937f38200] mmco: unref short failure
[h264 @ 0x561671314a00] mmco: unref short failure
[h264 @ 0x561671314a00] mmco: unref short failure
[h264 @ 0x55e523d93c00] mmco: unref short failure
[h264 @ 0x55e523d93c00] mmco: unref short failure
 51%|█████     | 786/1556 [3:06:32<4:51:29, 22.71s/it] 51%|█████     | 787/1556 [3:06:37<3:42:49, 17.39s/it] 51%|█████     | 788/1556 [3:06:42<2:55:03, 13.68s/it][h264 @ 0x5649ddfcde40] mmco: unref short failure
[h264 @ 0x5649ddfcde40] mmco: unref short failure
[h264 @ 0x55c973373840] mmco: unref short failure
[h264 @ 0x55c973373840] mmco: unref short failure
[h264 @ 0x55c973373840] mmco: unref short failure
[h264 @ 0x55c973373840] mmco: unref short failure
 51%|█████     | 789/1556 [3:06:48<2:23:52, 11.26s/it][h264 @ 0x5649b8b79840] mmco: unref short failure
[h264 @ 0x5649b8b79840] mmco: unref short failure
 51%|█████     | 790/1556 [3:06:53<2:01:19,  9.50s/it][h264 @ 0x55e521560740] mmco: unref short failure
 51%|█████     | 791/1556 [3:06:59<1:45:52,  8.30s/it] 51%|█████     | 792/1556 [3:07:04<1:33:50,  7.37s/it] 51%|█████     | 793/1556 [3:07:09<1:23:52,  6.60s/it][h264 @ 0x55c9380f4440] mmco: unref short failure
[h264 @ 0x55c9380f4440] mmco: unref short failure
[h264 @ 0x5649dbea3100] mmco: unref short failure
[h264 @ 0x5649dbea3100] mmco: unref short failure
[h264 @ 0x55c97056c7c0] mmco: unref short failure
[h264 @ 0x55c97056c7c0] mmco: unref short failure
[h264 @ 0x5616a8c7f700] mmco: unref short failure
[h264 @ 0x5616a8c7f700] mmco: unref short failure
[h264 @ 0x55e52618c400] mmco: unref short failure
[h264 @ 0x55e52618c400] mmco: unref short failure
[h264 @ 0x561671606d40] mmco: unref short failure
[h264 @ 0x561671606d40] mmco: unref short failure
[h264 @ 0x55e5209c7880] mmco: unref short failure
[h264 @ 0x55e5209c7880] mmco: unref short failure
[h264 @ 0x5649df12c600] mmco: unref short failure
not have audios 8-qwaveiHMM.3
 51%|█████     | 794/1556 [3:08:10<4:50:55, 22.91s/it] 51%|█████     | 795/1556 [3:08:15<3:43:06, 17.59s/it] 51%|█████     | 796/1556 [3:08:20<2:54:39, 13.79s/it][h264 @ 0x55c9712ea280] mmco: unref short failure
[h264 @ 0x55c9712ea280] mmco: unref short failure
 51%|█████     | 797/1556 [3:08:25<2:21:17, 11.17s/it] 51%|█████▏    | 798/1556 [3:08:30<1:57:53,  9.33s/it] 51%|█████▏    | 799/1556 [3:08:35<1:41:16,  8.03s/it][h264 @ 0x5616abca1600] mmco: unref short failure
[h264 @ 0x5616abca1600] mmco: unref short failure
[h264 @ 0x5616abca1600] mmco: unref short failure
[h264 @ 0x5616abca1600] mmco: unref short failure
09/06/2024 22:44:16 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 2.8318138122558594, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04601696878671646, 'loss_ret%tv%ta--finetune_area/loss_area': 2.1990346908569336, 'loss_ret%tv%ta--finetune_area/total_loss': 5.076865196228027}
 51%|█████▏    | 800/1556 [3:08:40<1:31:46,  7.28s/it][h264 @ 0x5649e37ba340] mmco: unref short failure
 51%|█████▏    | 801/1556 [3:08:46<1:24:00,  6.68s/it][h264 @ 0x5649b9090f40] mmco: unref short failure
[h264 @ 0x5649b9090f40] mmco: unref short failure
[h264 @ 0x55e4f9822380] mmco: unref short failure
[h264 @ 0x55e4f9822380] mmco: unref short failure
[h264 @ 0x55e4f9dd8480] mmco: unref short failure
[h264 @ 0x55e4f9dd8480] mmco: unref short failure
 52%|█████▏    | 802/1556 [3:09:45<4:44:51, 22.67s/it][h264 @ 0x5649e5438300] mmco: unref short failure
[h264 @ 0x5649e5438300] mmco: unref short failure
[h264 @ 0x55c9719dd940] mmco: unref short failure
[h264 @ 0x55c9719dd940] mmco: unref short failure
[h264 @ 0x5616aa078d40] mmco: unref short failure
[h264 @ 0x5616aa078d40] mmco: unref short failure
 52%|█████▏    | 803/1556 [3:09:56<3:57:40, 18.94s/it] 52%|█████▏    | 804/1556 [3:10:01<3:06:04, 14.85s/it][h264 @ 0x55c9739ec840] mmco: unref short failure
 52%|█████▏    | 805/1556 [3:10:06<2:28:50, 11.89s/it][h264 @ 0x55c970769680] mmco: unref short failure
 52%|█████▏    | 806/1556 [3:10:11<2:03:25,  9.87s/it][h264 @ 0x55e527030a80] mmco: unref short failure
 52%|█████▏    | 807/1556 [3:10:17<1:46:42,  8.55s/it][h264 @ 0x55c97a2f9d00] mmco: unref short failure
 52%|█████▏    | 808/1556 [3:10:22<1:34:58,  7.62s/it] 52%|█████▏    | 809/1556 [3:10:27<1:25:32,  6.87s/it][h264 @ 0x5616b121ab40] mmco: unref short failure
[h264 @ 0x5649df03b000] mmco: unref short failure
[h264 @ 0x5649df03b000] mmco: unref short failure
[h264 @ 0x55e52185b100] mmco: unref short failure
[h264 @ 0x55c9731d9b00] mmco: unref short failure
not have audios ua_Kowav7hg.20
[h264 @ 0x5649e1683b40] mmco: unref short failure
[h264 @ 0x5616ada37740] mmco: unref short failure
 52%|█████▏    | 810/1556 [3:11:24<4:31:26, 21.83s/it][h264 @ 0x55e52823e7c0] mmco: unref short failure
[h264 @ 0x55e52823e7c0] mmco: unref short failure
[h264 @ 0x55c978186980] mmco: unref short failure
 52%|█████▏    | 811/1556 [3:11:32<3:40:26, 17.75s/it][h264 @ 0x55c979088140] mmco: unref short failure
[h264 @ 0x55c979088140] mmco: unref short failure
 52%|█████▏    | 812/1556 [3:11:37<2:53:45, 14.01s/it][h264 @ 0x55c974e0fd80] mmco: unref short failure
[h264 @ 0x55c974e0fd80] mmco: unref short failure
[h264 @ 0x55e521857080] mmco: unref short failure
[h264 @ 0x55e521857080] mmco: unref short failure
 52%|█████▏    | 813/1556 [3:11:43<2:21:12, 11.40s/it][h264 @ 0x5616ae59e040] mmco: unref short failure
[h264 @ 0x5616ae59e040] mmco: unref short failure
 52%|█████▏    | 814/1556 [3:11:48<1:58:41,  9.60s/it] 52%|█████▏    | 815/1556 [3:11:54<1:43:54,  8.41s/it] 52%|█████▏    | 816/1556 [3:11:59<1:32:29,  7.50s/it][h264 @ 0x5649de451940] mmco: unref short failure
 53%|█████▎    | 817/1556 [3:12:04<1:23:47,  6.80s/it][h264 @ 0x55e522b5a280] mmco: unref short failure
[h264 @ 0x55e522b5a280] mmco: unref short failure
[h264 @ 0x5616a9156c80] mmco: unref short failure
[h264 @ 0x5616a9156c80] mmco: unref short failure
[h264 @ 0x55e52a5f8900] mmco: unref short failure
[h264 @ 0x55e52a5f8900] mmco: unref short failure
[h264 @ 0x55e523f0cec0] mmco: unref short failure
[h264 @ 0x5649dc656240] mmco: unref short failure
[h264 @ 0x5649dc656240] mmco: unref short failure
[h264 @ 0x5616aef73840] mmco: unref short failure
[h264 @ 0x5616aef73840] mmco: unref short failure
[h264 @ 0x5616af514340] mmco: unref short failure
[h264 @ 0x5616af514340] mmco: unref short failure
[h264 @ 0x5616af514340] mmco: unref short failure
[h264 @ 0x5616af514340] mmco: unref short failure
[h264 @ 0x5616af514340] mmco: unref short failure
[h264 @ 0x5616ac61a600] mmco: unref short failure
[h264 @ 0x5616ac61a600] mmco: unref short failure
[h264 @ 0x5616a8c7fdc0] mmco: unref short failure
[h264 @ 0x5649dfe3c3c0] mmco: unref short failure
[h264 @ 0x5649dfe3c3c0] mmco: unref short failure
 53%|█████▎    | 818/1556 [3:12:58<4:15:36, 20.78s/it][h264 @ 0x5616a8c80040] mmco: unref short failure
[h264 @ 0x5616a8c80040] mmco: unref short failure
 53%|█████▎    | 819/1556 [3:13:03<3:18:45, 16.18s/it][h264 @ 0x5616ad1dabc0] mmco: unref short failure
 53%|█████▎    | 820/1556 [3:13:09<2:38:26, 12.92s/it][h264 @ 0x55e52cf4af00] mmco: unref short failure
[h264 @ 0x55c97cf98f40] mmco: unref short failure
 53%|█████▎    | 821/1556 [3:13:14<2:11:48, 10.76s/it][h264 @ 0x5616b2c2d2c0] mmco: unref short failure
[h264 @ 0x5616b2c2d2c0] mmco: unref short failure
[h264 @ 0x5616b2c2d2c0] mmco: unref short failure
[h264 @ 0x5616b2c2d2c0] mmco: unref short failure
[h264 @ 0x5649dc5fac00] mmco: unref short failure
[h264 @ 0x5649dc5fac00] mmco: unref short failure
 53%|█████▎    | 822/1556 [3:13:19<1:51:03,  9.08s/it] 53%|█████▎    | 823/1556 [3:13:25<1:37:27,  7.98s/it] 53%|█████▎    | 824/1556 [3:13:30<1:27:59,  7.21s/it] 53%|█████▎    | 825/1556 [3:13:36<1:20:52,  6.64s/it][h264 @ 0x55e5234f7340] mmco: unref short failure
[h264 @ 0x55e5234f7340] mmco: unref short failure
[h264 @ 0x5649b9812200] mmco: unref short failure
[h264 @ 0x5649b9812200] mmco: unref short failure
[h264 @ 0x5616acc6dc00] mmco: unref short failure
[h264 @ 0x5616acc6dc00] mmco: unref short failure
[h264 @ 0x5649df94a6c0] mmco: unref short failure
[h264 @ 0x5616b5d6fd00] mmco: unref short failure
[h264 @ 0x5616b3dc1e40] mmco: unref short failure
[h264 @ 0x55e52662de00] mmco: unref short failure
[h264 @ 0x55e52662de00] mmco: unref short failure
[h264 @ 0x5616b6bf1340] mmco: unref short failure
[h264 @ 0x5616b6bf1340] mmco: unref short failure
[h264 @ 0x55c9743f7e40] mmco: unref short failure
[h264 @ 0x55c9743f7e40] mmco: unref short failure
 53%|█████▎    | 826/1556 [3:14:36<4:37:25, 22.80s/it] 53%|█████▎    | 827/1556 [3:14:41<3:33:26, 17.57s/it][h264 @ 0x55c978207fc0] mmco: unref short failure
[h264 @ 0x55c978207fc0] mmco: unref short failure
[h264 @ 0x5616b397a8c0] mmco: unref short failure
[h264 @ 0x5616b397a8c0] mmco: unref short failure
[h264 @ 0x5616b4385100] mmco: unref short failure
 53%|█████▎    | 828/1556 [3:14:47<2:49:01, 13.93s/it][h264 @ 0x5649e0d42200] mmco: unref short failure
[h264 @ 0x5649e0d42200] mmco: unref short failure
[h264 @ 0x5649e0d42200] mmco: unref short failure
[h264 @ 0x5649e0d42200] mmco: unref short failure
[h264 @ 0x5616a91b00c0] mmco: unref short failure
[h264 @ 0x5649dc59e940] mmco: unref short failure
[h264 @ 0x5649dc59e940] mmco: unref short failure
 53%|█████▎    | 829/1556 [3:14:55<2:27:43, 12.19s/it] 53%|█████▎    | 830/1556 [3:15:01<2:03:32, 10.21s/it][h264 @ 0x55e525c945c0] mmco: unref short failure
[h264 @ 0x55e525c945c0] mmco: unref short failure
 53%|█████▎    | 831/1556 [3:15:06<1:46:31,  8.82s/it][h264 @ 0x5649b8c47180] mmco: unref short failure
[h264 @ 0x5649b8c47180] mmco: unref short failure
[h264 @ 0x5616b18b4680] mmco: unref short failure
 53%|█████▎    | 832/1556 [3:15:12<1:36:42,  8.01s/it] 54%|█████▎    | 833/1556 [3:15:18<1:28:17,  7.33s/it][h264 @ 0x55c96f9a0300] mmco: unref short failure
[h264 @ 0x55c96f9a0300] mmco: unref short failure
[h264 @ 0x5649e49bd080] mmco: unref short failure
[h264 @ 0x5649e49bd080] mmco: unref short failure
[h264 @ 0x55c97af20340] mmco: unref short failure
[h264 @ 0x55c97af20340] mmco: unref short failure
[h264 @ 0x5649e1182bc0] mmco: unref short failure
[h264 @ 0x5649e1182bc0] mmco: unref short failure
[h264 @ 0x5616b65bb640] mmco: unref short failure
[h264 @ 0x5616b65bb640] mmco: unref short failure
[h264 @ 0x5616aa5bd000] mmco: unref short failure
 54%|█████▎    | 834/1556 [3:16:11<4:12:29, 20.98s/it] 54%|█████▎    | 835/1556 [3:16:17<3:18:55, 16.55s/it][h264 @ 0x55e51fb7e600] mmco: unref short failure
[h264 @ 0x55e51fb7e600] mmco: unref short failure
 54%|█████▎    | 836/1556 [3:16:23<2:38:58, 13.25s/it][h264 @ 0x5649ea3f28c0] mmco: unref short failure
 54%|█████▍    | 837/1556 [3:16:28<2:12:21, 11.04s/it][h264 @ 0x5616b1780080] mmco: unref short failure
[h264 @ 0x5616b1780080] mmco: unref short failure
 54%|█████▍    | 838/1556 [3:16:34<1:52:54,  9.44s/it][h264 @ 0x5616b3f0fe40] mmco: unref short failure
 54%|█████▍    | 839/1556 [3:16:40<1:40:16,  8.39s/it] 54%|█████▍    | 840/1556 [3:16:46<1:29:52,  7.53s/it] 54%|█████▍    | 841/1556 [3:16:51<1:21:34,  6.85s/it][h264 @ 0x5616a8f69140] mmco: unref short failure
[h264 @ 0x5616a8f69140] mmco: unref short failure
[h264 @ 0x55e527186c80] mmco: unref short failure
[h264 @ 0x55e52c71c8c0] mmco: unref short failure
[h264 @ 0x55e52c71c8c0] mmco: unref short failure
[h264 @ 0x5649e91f8500] mmco: unref short failure
[h264 @ 0x55e526473b80] mmco: unref short failure
[h264 @ 0x55c97af2e680] mmco: unref short failure
[h264 @ 0x55c97af2e680] mmco: unref short failure
[h264 @ 0x55e5284ad6c0] mmco: unref short failure
[h264 @ 0x55e5284ad6c0] mmco: unref short failure
[h264 @ 0x5649e2316600] mmco: unref short failure
[h264 @ 0x55c96f9a0100] mmco: unref short failure
[h264 @ 0x5649ea54cdc0] mmco: unref short failure
[h264 @ 0x55c976d9e700] mmco: unref short failure
[h264 @ 0x55c976d9e700] mmco: unref short failure
[h264 @ 0x55e52edc8480] mmco: unref short failure
 54%|█████▍    | 842/1556 [3:17:52<4:34:04, 23.03s/it] 54%|█████▍    | 843/1556 [3:17:57<3:32:02, 17.84s/it] 54%|█████▍    | 844/1556 [3:18:03<2:47:12, 14.09s/it] 54%|█████▍    | 845/1556 [3:18:09<2:18:12, 11.66s/it][h264 @ 0x5649e08f5cc0] mmco: unref short failure
[h264 @ 0x5649e08f5cc0] mmco: unref short failure
[h264 @ 0x5649e08f5cc0] mmco: unref short failure
[h264 @ 0x5649e08f5cc0] mmco: unref short failure
[h264 @ 0x5649e08f5cc0] mmco: unref short failure
[h264 @ 0x5649e08f5cc0] mmco: unref short failure
[h264 @ 0x5649e08f5cc0] mmco: unref short failure
[h264 @ 0x5649e08f5cc0] mmco: unref short failure
 54%|█████▍    | 846/1556 [3:18:14<1:56:18,  9.83s/it][h264 @ 0x5649e895a580] mmco: unref short failure
[h264 @ 0x5649e895a580] mmco: unref short failure
 54%|█████▍    | 847/1556 [3:18:19<1:38:29,  8.33s/it][h264 @ 0x55e52ed1ed00] mmco: unref short failure
[h264 @ 0x55e52ed1ed00] mmco: unref short failure
 54%|█████▍    | 848/1556 [3:18:25<1:28:33,  7.50s/it] 55%|█████▍    | 849/1556 [3:18:30<1:20:59,  6.87s/it][h264 @ 0x55e4fac10540] mmco: unref short failure
[h264 @ 0x55e4fac10540] mmco: unref short failure
[h264 @ 0x5616b7c88500] mmco: unref short failure
[h264 @ 0x55c97338aec0] mmco: unref short failure
[h264 @ 0x55c97338aec0] mmco: unref short failure
[h264 @ 0x5616b655d800] mmco: unref short failure
[h264 @ 0x5616a9635200] mmco: unref short failure
[h264 @ 0x5616a9635200] mmco: unref short failure
09/06/2024 22:55:03 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.1117258071899414, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04863179847598076, 'loss_ret%tv%ta--finetune_area/loss_area': 2.54459285736084, 'loss_ret%tv%ta--finetune_area/total_loss': 5.704950332641602}
[h264 @ 0x5616b1053440] mmco: unref short failure
[h264 @ 0x5616b1053440] mmco: unref short failure
 55%|█████▍    | 850/1556 [3:19:27<4:18:48, 21.99s/it] 55%|█████▍    | 851/1556 [3:19:33<3:20:53, 17.10s/it][h264 @ 0x55c97e1b83c0] mmco: unref short failure
[h264 @ 0x55c97e1b83c0] mmco: unref short failure
 55%|█████▍    | 852/1556 [3:19:39<2:40:25, 13.67s/it] 55%|█████▍    | 853/1556 [3:19:44<2:08:50, 11.00s/it][h264 @ 0x55e520d36380] mmco: unref short failure
[h264 @ 0x55e520d36380] mmco: unref short failure
 55%|█████▍    | 854/1556 [3:19:49<1:49:20,  9.35s/it][h264 @ 0x55e523a6d900] mmco: unref short failure
[h264 @ 0x55e523a6d900] mmco: unref short failure
 55%|█████▍    | 855/1556 [3:19:55<1:36:50,  8.29s/it] 55%|█████▌    | 856/1556 [3:20:00<1:26:23,  7.41s/it][h264 @ 0x55e528dc4bc0] mmco: unref short failure
[h264 @ 0x55e528dc4bc0] mmco: unref short failure
 55%|█████▌    | 857/1556 [3:20:07<1:22:33,  7.09s/it][h264 @ 0x5649e40ff700] mmco: unref short failure
[h264 @ 0x5649e418e340] mmco: unref short failure
[h264 @ 0x5616aa91e3c0] mmco: unref short failure
[h264 @ 0x55e51f3cf100] mmco: unref short failure
[h264 @ 0x55e51f3cf100] mmco: unref short failure
[h264 @ 0x5616ac6c9800] mmco: unref short failure
[h264 @ 0x55c971757dc0] mmco: unref short failure
[h264 @ 0x55e52bbf1740] mmco: unref short failure
[h264 @ 0x55c97d1fc300] mmco: unref short failure
[h264 @ 0x5649dfb36140] mmco: unref short failure
[h264 @ 0x5616aa61a080] mmco: unref short failure
[h264 @ 0x5616aa61a080] mmco: unref short failure
 55%|█████▌    | 858/1556 [3:21:02<4:10:08, 21.50s/it][h264 @ 0x5616b703f200] mmco: unref short failure
[h264 @ 0x55c97aee0e40] mmco: unref short failure
[h264 @ 0x55c97aee0e40] mmco: unref short failure
 55%|█████▌    | 859/1556 [3:21:10<3:23:12, 17.49s/it] 55%|█████▌    | 860/1556 [3:21:15<2:40:05, 13.80s/it] 55%|█████▌    | 861/1556 [3:21:20<2:11:03, 11.31s/it] 55%|█████▌    | 862/1556 [3:21:25<1:48:27,  9.38s/it] 55%|█████▌    | 863/1556 [3:21:31<1:33:52,  8.13s/it] 56%|█████▌    | 864/1556 [3:21:36<1:24:57,  7.37s/it][h264 @ 0x5616b5acf500] mmco: unref short failure
[h264 @ 0x5616b5acf500] mmco: unref short failure
 56%|█████▌    | 865/1556 [3:21:42<1:18:10,  6.79s/it][h264 @ 0x55e52cc59680] mmco: unref short failure
[h264 @ 0x55e52cc59680] mmco: unref short failure
[h264 @ 0x5616b86d9440] mmco: unref short failure
[h264 @ 0x55e52c35a100] mmco: unref short failure
[h264 @ 0x55e52c35a100] mmco: unref short failure
[h264 @ 0x55e52b369340] mmco: unref short failure
[h264 @ 0x55e52b369340] mmco: unref short failure
[h264 @ 0x55c97d665e00] mmco: unref short failure
[h264 @ 0x5649e08f32c0] mmco: unref short failure
[h264 @ 0x5649e08f32c0] mmco: unref short failure
[h264 @ 0x5616b4feaf80] mmco: unref short failure
[h264 @ 0x55e52e02c700] mmco: unref short failure
[h264 @ 0x55e52e02c700] mmco: unref short failure
 56%|█████▌    | 866/1556 [3:22:37<4:06:36, 21.44s/it][h264 @ 0x5616b3258e00] mmco: unref short failure
[h264 @ 0x55e52069a300] mmco: unref short failure
[h264 @ 0x55e52069a300] mmco: unref short failure
 56%|█████▌    | 867/1556 [3:22:46<3:23:47, 17.75s/it][h264 @ 0x55e5245954c0] mmco: unref short failure
[h264 @ 0x55e5245954c0] mmco: unref short failure
[h264 @ 0x5649eaaf0dc0] mmco: unref short failure
 56%|█████▌    | 868/1556 [3:22:52<2:41:24, 14.08s/it] 56%|█████▌    | 869/1556 [3:22:57<2:10:21, 11.39s/it] 56%|█████▌    | 870/1556 [3:23:03<1:52:39,  9.85s/it][h264 @ 0x55e53105b7c0] mmco: unref short failure
 56%|█████▌    | 871/1556 [3:23:09<1:38:29,  8.63s/it][h264 @ 0x55e52d084800] mmco: unref short failure
 56%|█████▌    | 872/1556 [3:23:14<1:27:35,  7.68s/it] 56%|█████▌    | 873/1556 [3:23:20<1:21:01,  7.12s/it][h264 @ 0x5616bba098c0] mmco: unref short failure
[h264 @ 0x5616bba098c0] mmco: unref short failure
[h264 @ 0x55c97bce1ec0] mmco: unref short failure
[h264 @ 0x55c97bce1ec0] mmco: unref short failure
[h264 @ 0x55c9797d05c0] mmco: unref short failure
[h264 @ 0x5649ed18c440] mmco: unref short failure
[h264 @ 0x5649ed18c440] mmco: unref short failure
[h264 @ 0x5649de776600] mmco: unref short failure
[h264 @ 0x5649de776600] mmco: unref short failure
 56%|█████▌    | 874/1556 [3:24:16<4:06:38, 21.70s/it][h264 @ 0x5616b8bb1440] mmco: unref short failure
[h264 @ 0x5616b8bb1440] mmco: unref short failure
 56%|█████▌    | 875/1556 [3:24:21<3:10:23, 16.77s/it][h264 @ 0x55c97ebcfc40] mmco: unref short failure
[h264 @ 0x55c97ebcfc40] mmco: unref short failure
[h264 @ 0x5616b4c52d80] mmco: unref short failure
[h264 @ 0x55c982482300] mmco: unref short failure
 56%|█████▋    | 876/1556 [3:24:27<2:34:01, 13.59s/it] 56%|█████▋    | 877/1556 [3:24:33<2:04:56, 11.04s/it] 56%|█████▋    | 878/1556 [3:24:39<1:48:14,  9.58s/it][h264 @ 0x5649ed18c240] mmco: unref short failure
[h264 @ 0x5649ed18c240] mmco: unref short failure
 56%|█████▋    | 879/1556 [3:24:43<1:30:58,  8.06s/it][h264 @ 0x5616aa23ed40] mmco: unref short failure
[h264 @ 0x5616aa23ed40] mmco: unref short failure
 57%|█████▋    | 880/1556 [3:24:51<1:28:52,  7.89s/it][h264 @ 0x55e52e2fa480] mmco: unref short failure
[h264 @ 0x55e52e2fa480] mmco: unref short failure
 57%|█████▋    | 881/1556 [3:24:56<1:20:18,  7.14s/it][h264 @ 0x5649e9075e40] mmco: unref short failure
[h264 @ 0x5649e9075e40] mmco: unref short failure
[h264 @ 0x5649e9b41d40] mmco: unref short failure
[h264 @ 0x55e52247c5c0] mmco: unref short failure
[h264 @ 0x5616b73572c0] mmco: unref short failure
[h264 @ 0x5616aa5f8440] mmco: unref short failure
[h264 @ 0x5616aa5f8440] mmco: unref short failure
[h264 @ 0x5649e3135b00] mmco: unref short failure
[h264 @ 0x55e522c1e340] mmco: unref short failure
[h264 @ 0x55e522c1e340] mmco: unref short failure
 57%|█████▋    | 882/1556 [3:25:47<3:48:32, 20.35s/it] 57%|█████▋    | 883/1556 [3:25:57<3:12:58, 17.20s/it][h264 @ 0x5649e70b2180] mmco: unref short failure
 57%|█████▋    | 884/1556 [3:26:03<2:35:36, 13.89s/it] 57%|█████▋    | 885/1556 [3:26:09<2:09:12, 11.55s/it][h264 @ 0x55c983092d40] mmco: unref short failure
[h264 @ 0x55c983092d40] mmco: unref short failure
[h264 @ 0x5616b4710a40] mmco: unref short failure
[h264 @ 0x5616b4710a40] mmco: unref short failure
 57%|█████▋    | 886/1556 [3:26:15<1:47:36,  9.64s/it][h264 @ 0x55c977f6ba40] mmco: unref short failure
 57%|█████▋    | 887/1556 [3:26:20<1:34:38,  8.49s/it] 57%|█████▋    | 888/1556 [3:26:26<1:25:59,  7.72s/it] 57%|█████▋    | 889/1556 [3:26:32<1:17:54,  7.01s/it][h264 @ 0x55c974b7a0c0] mmco: unref short failure
[h264 @ 0x55c974b7a0c0] mmco: unref short failure
[h264 @ 0x55c9813971c0] mmco: unref short failure
[h264 @ 0x55c97b1f7fc0] mmco: unref short failure
[h264 @ 0x55c97b1f7fc0] mmco: unref short failure
[h264 @ 0x55e53218b040] mmco: unref short failure
[h264 @ 0x55e53218b040] mmco: unref short failure
[h264 @ 0x55e53218b040] mmco: unref short failure
[h264 @ 0x55e53218b040] mmco: unref short failure
[h264 @ 0x55c977885d00] mmco: unref short failure
[h264 @ 0x5649dfc4df80] mmco: unref short failure
[h264 @ 0x5649dfc4df80] mmco: unref short failure
 57%|█████▋    | 890/1556 [3:27:22<3:40:52, 19.90s/it][h264 @ 0x55c981daedc0] mmco: unref short failure
[h264 @ 0x5649ea96cfc0] mmco: unref short failure
[h264 @ 0x5649ea96cfc0] mmco: unref short failure
[h264 @ 0x55c97300c000] mmco: unref short failure
[h264 @ 0x55e51f4ad740] mmco: unref short failure
[h264 @ 0x55e51f4ad740] mmco: unref short failure
 57%|█████▋    | 891/1556 [3:27:37<3:26:31, 18.63s/it][h264 @ 0x55c97d420dc0] mmco: unref short failure
[h264 @ 0x55c97d420dc0] mmco: unref short failure
[h264 @ 0x5616b56d5380] mmco: unref short failure
[h264 @ 0x5616b56d5380] mmco: unref short failure
[h264 @ 0x5649dad6aa00] mmco: unref short failure
[h264 @ 0x5649dad6aa00] mmco: unref short failure
 57%|█████▋    | 892/1556 [3:27:43<2:41:38, 14.61s/it][h264 @ 0x55c97f4345c0] mmco: unref short failure
 57%|█████▋    | 893/1556 [3:27:48<2:12:35, 12.00s/it] 57%|█████▋    | 894/1556 [3:27:54<1:50:42, 10.03s/it][h264 @ 0x55e52087b400] mmco: unref short failure
 58%|█████▊    | 895/1556 [3:27:59<1:34:57,  8.62s/it][h264 @ 0x5649e96e29c0] mmco: unref short failure
[h264 @ 0x55c97aeb0780] mmco: unref short failure
[h264 @ 0x55c97aeb0780] mmco: unref short failure
 58%|█████▊    | 896/1556 [3:28:05<1:24:30,  7.68s/it][h264 @ 0x55e52be98180] mmco: unref short failure
[h264 @ 0x55e52be98180] mmco: unref short failure
 58%|█████▊    | 897/1556 [3:28:10<1:17:27,  7.05s/it][h264 @ 0x55e51fd66080] mmco: unref short failure
[h264 @ 0x55e51fd66080] mmco: unref short failure
[h264 @ 0x5649db423840] mmco: unref short failure
[h264 @ 0x5649db423840] mmco: unref short failure
[h264 @ 0x55e53285d680] mmco: unref short failure
[h264 @ 0x55e53285d680] mmco: unref short failure
[h264 @ 0x5649e3bb8280] mmco: unref short failure
[h264 @ 0x5649e3bb8280] mmco: unref short failure
[h264 @ 0x5616ab5df2c0] mmco: unref short failure
[h264 @ 0x5616ab5df2c0] mmco: unref short failure
[h264 @ 0x5649db3d45c0] mmco: unref short failure
[h264 @ 0x5649db3d45c0] mmco: unref short failure
[h264 @ 0x55c97e0014c0] mmco: unref short failure
[h264 @ 0x5616b776f440] mmco: unref short failure
 58%|█████▊    | 898/1556 [3:28:58<3:30:54, 19.23s/it][h264 @ 0x55c982e3ed40] mmco: unref short failure
[h264 @ 0x55e520315f40] mmco: unref short failure
[h264 @ 0x55e520315f40] mmco: unref short failure
[h264 @ 0x55e520315f40] mmco: unref short failure
[h264 @ 0x55e520315f40] mmco: unref short failure
[h264 @ 0x55e520315f40] mmco: unref short failure
[h264 @ 0x55e520315f40] mmco: unref short failure
[h264 @ 0x5616bb786200] mmco: unref short failure
[h264 @ 0x5616bb786200] mmco: unref short failure
 58%|█████▊    | 899/1556 [3:29:17<3:29:36, 19.14s/it]09/06/2024 23:04:56 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/06/2024 23:04:56 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55c938a60a80] mmco: unref short failure
[h264 @ 0x55c938a60a80] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55c98244cd80] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55c97da44f00] mmco: unref short failure
[h264 @ 0x55e52a9a4680] mmco: unref short failure
[h264 @ 0x55e52a9a4680] mmco: unref short failure
[h264 @ 0x5649e5bd3d40] mmco: unref short failure
[h264 @ 0x55e526d32280] mmco: unref short failure
[h264 @ 0x55e5251ba6c0] mmco: unref short failure
[h264 @ 0x55e5251ba6c0] mmco: unref short failure
[h264 @ 0x55c97684d940] mmco: unref short failure
[h264 @ 0x5616ba553a00] mmco: unref short failure
[h264 @ 0x5649e430c1c0] mmco: unref short failure
[h264 @ 0x5649e430c1c0] mmco: unref short failure
[h264 @ 0x55c9815c0840] mmco: unref short failure
[h264 @ 0x55c9815c0840] mmco: unref short failure
[h264 @ 0x5616aa165e40] mmco: unref short failure
[h264 @ 0x5616aa165e40] mmco: unref short failure
[h264 @ 0x55e52f7f0c40] mmco: unref short failure
[h264 @ 0x55e52f7f0c40] mmco: unref short failure
[h264 @ 0x55e523f67380] mmco: unref short failure
[h264 @ 0x55e523f67380] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:58,  1.85it/s][A
  1%|          | 2/221 [00:00<01:26,  2.53it/s][A[h264 @ 0x55c976116f40] mmco: unref short failure
[h264 @ 0x55c976116f40] mmco: unref short failure

  1%|▏         | 3/221 [00:01<01:27,  2.50it/s][A
  2%|▏         | 4/221 [00:01<01:02,  3.45it/s][A
  3%|▎         | 7/221 [00:01<00:31,  6.78it/s][A
  4%|▍         | 9/221 [00:01<00:28,  7.46it/s][A
  5%|▍         | 10/221 [00:01<00:30,  6.97it/s][A
  5%|▌         | 12/221 [00:03<01:03,  3.29it/s][A
  6%|▌         | 13/221 [00:03<00:55,  3.75it/s][A
  6%|▋         | 14/221 [00:03<00:49,  4.17it/s][A
  7%|▋         | 15/221 [00:03<00:43,  4.78it/s][A
  7%|▋         | 16/221 [00:03<00:42,  4.78it/s][A
  8%|▊         | 17/221 [00:04<01:12,  2.82it/s][A
  8%|▊         | 18/221 [00:04<01:02,  3.25it/s][A
  9%|▊         | 19/221 [00:04<00:51,  3.89it/s][A
 10%|▉         | 21/221 [00:04<00:37,  5.37it/s][A
 10%|▉         | 22/221 [00:05<00:34,  5.85it/s][A
 11%|█         | 24/221 [00:05<00:25,  7.59it/s][A
 12%|█▏        | 26/221 [00:05<00:25,  7.62it/s][A
 13%|█▎        | 28/221 [00:05<00:24,  7.76it/s][A
 13%|█▎        | 29/221 [00:05<00:24,  7.71it/s][A
 14%|█▎        | 30/221 [00:06<00:29,  6.42it/s][A
 14%|█▍        | 31/221 [00:06<00:32,  5.92it/s][A
 15%|█▍        | 33/221 [00:06<00:26,  7.15it/s][A
 16%|█▌        | 35/221 [00:06<00:21,  8.62it/s][A
 16%|█▋        | 36/221 [00:06<00:27,  6.63it/s][A
 17%|█▋        | 37/221 [00:07<00:31,  5.82it/s][A
 17%|█▋        | 38/221 [00:07<00:52,  3.49it/s][A
 18%|█▊        | 40/221 [00:08<00:41,  4.37it/s][A
 19%|█▉        | 42/221 [00:08<00:49,  3.60it/s][A
 20%|█▉        | 44/221 [00:08<00:35,  4.94it/s][A
 20%|██        | 45/221 [00:10<01:16,  2.31it/s][A
 21%|██        | 46/221 [00:10<01:07,  2.61it/s][A
 21%|██▏       | 47/221 [00:11<01:32,  1.89it/s][A
 22%|██▏       | 49/221 [00:11<01:02,  2.75it/s][A
 23%|██▎       | 51/221 [00:12<00:46,  3.69it/s][A
 24%|██▍       | 53/221 [00:12<00:33,  4.95it/s][A
 24%|██▍       | 54/221 [00:13<01:08,  2.44it/s][A
 25%|██▍       | 55/221 [00:13<01:03,  2.61it/s][A
 26%|██▌       | 57/221 [00:13<00:44,  3.70it/s][A
 27%|██▋       | 59/221 [00:14<00:32,  4.93it/s][A
 27%|██▋       | 60/221 [00:15<01:11,  2.25it/s][A
 28%|██▊       | 61/221 [00:15<01:00,  2.65it/s][A
 28%|██▊       | 62/221 [00:15<00:56,  2.80it/s][A
 29%|██▊       | 63/221 [00:16<00:49,  3.21it/s][A
 29%|██▉       | 64/221 [00:16<01:00,  2.59it/s][A
 30%|██▉       | 66/221 [00:17<01:08,  2.25it/s][A
 30%|███       | 67/221 [00:17<01:01,  2.50it/s][A
 31%|███       | 68/221 [00:18<00:52,  2.91it/s][A
 31%|███       | 69/221 [00:19<01:21,  1.86it/s][A
 32%|███▏      | 71/221 [00:19<00:58,  2.57it/s][A
 33%|███▎      | 72/221 [00:19<00:57,  2.59it/s][A
 33%|███▎      | 73/221 [00:20<01:01,  2.40it/s][A
 34%|███▍      | 75/221 [00:20<00:48,  3.00it/s][A
 35%|███▍      | 77/221 [00:21<00:44,  3.21it/s][A
 36%|███▌      | 79/221 [00:21<00:37,  3.77it/s][A
 37%|███▋      | 81/221 [00:22<00:40,  3.45it/s][A
 37%|███▋      | 82/221 [00:23<00:46,  3.00it/s][A
 38%|███▊      | 83/221 [00:23<00:43,  3.19it/s][A
 39%|███▉      | 86/221 [00:23<00:24,  5.47it/s][A[h264 @ 0x5616abd19ac0] mmco: unref short failure
[h264 @ 0x5616abd19ac0] mmco: unref short failure

 39%|███▉      | 87/221 [00:24<00:36,  3.70it/s][A
 40%|███▉      | 88/221 [00:24<00:45,  2.90it/s][A
 40%|████      | 89/221 [00:24<00:44,  2.97it/s][A
 41%|████      | 90/221 [00:25<00:45,  2.86it/s][A
 41%|████      | 91/221 [00:25<00:37,  3.50it/s][A
 42%|████▏     | 92/221 [00:25<00:30,  4.17it/s][A
 42%|████▏     | 93/221 [00:25<00:30,  4.27it/s][A
 43%|████▎     | 94/221 [00:26<00:29,  4.23it/s][A
 43%|████▎     | 95/221 [00:26<00:25,  4.94it/s][A
 43%|████▎     | 96/221 [00:26<00:46,  2.66it/s][A
 44%|████▍     | 97/221 [00:27<00:38,  3.21it/s][A
 44%|████▍     | 98/221 [00:27<00:56,  2.16it/s][A
 45%|████▌     | 100/221 [00:28<00:33,  3.57it/s][A
 46%|████▌     | 102/221 [00:29<00:44,  2.67it/s][A
 47%|████▋     | 104/221 [00:29<00:31,  3.74it/s][A
 48%|████▊     | 105/221 [00:29<00:29,  3.91it/s][A
 48%|████▊     | 106/221 [00:30<00:47,  2.42it/s][A
 49%|████▉     | 108/221 [00:30<00:31,  3.54it/s][A
 49%|████▉     | 109/221 [00:30<00:28,  3.92it/s][A
 50%|█████     | 111/221 [00:30<00:22,  4.89it/s][A
 51%|█████     | 112/221 [00:31<00:21,  5.11it/s][A
 51%|█████     | 113/221 [00:31<00:35,  3.07it/s][A
 52%|█████▏    | 115/221 [00:31<00:22,  4.61it/s][A
 52%|█████▏    | 116/221 [00:32<00:36,  2.89it/s][A
 53%|█████▎    | 117/221 [00:33<00:40,  2.58it/s][A
 53%|█████▎    | 118/221 [00:33<00:32,  3.18it/s][A
 54%|█████▍    | 119/221 [00:33<00:28,  3.63it/s][A
 54%|█████▍    | 120/221 [00:33<00:24,  4.16it/s][A
 55%|█████▌    | 122/221 [00:33<00:16,  5.90it/s][A
 56%|█████▌    | 123/221 [00:34<00:17,  5.67it/s][A
 57%|█████▋    | 125/221 [00:34<00:22,  4.33it/s][A
 57%|█████▋    | 126/221 [00:35<00:27,  3.44it/s][A
 57%|█████▋    | 127/221 [00:36<00:58,  1.60it/s][A
 58%|█████▊    | 128/221 [00:37<00:50,  1.86it/s][A
 59%|█████▉    | 130/221 [00:37<00:30,  2.98it/s][A
 60%|█████▉    | 132/221 [00:39<00:54,  1.63it/s][A
 60%|██████    | 133/221 [00:39<00:48,  1.80it/s][A
 61%|██████    | 134/221 [00:43<01:45,  1.21s/it][A
 61%|██████    | 135/221 [00:44<01:40,  1.16s/it][A
 62%|██████▏   | 136/221 [00:44<01:20,  1.06it/s][A
 62%|██████▏   | 137/221 [00:45<01:09,  1.20it/s][A
 62%|██████▏   | 138/221 [00:45<01:04,  1.29it/s][A
 63%|██████▎   | 139/221 [00:46<01:00,  1.36it/s][A
 63%|██████▎   | 140/221 [00:46<00:53,  1.50it/s][A
 64%|██████▍   | 141/221 [00:47<00:53,  1.50it/s][A
 64%|██████▍   | 142/221 [00:48<00:51,  1.54it/s][A
 65%|██████▍   | 143/221 [00:48<00:54,  1.43it/s][A
 65%|██████▌   | 144/221 [00:48<00:40,  1.91it/s][A
 66%|██████▌   | 146/221 [00:49<00:23,  3.23it/s][A
 67%|██████▋   | 148/221 [00:49<00:16,  4.45it/s][A
 67%|██████▋   | 149/221 [00:49<00:15,  4.55it/s][A
 68%|██████▊   | 151/221 [00:49<00:15,  4.45it/s][A
 69%|██████▉   | 152/221 [00:50<00:18,  3.73it/s][A
 69%|██████▉   | 153/221 [00:50<00:17,  3.83it/s][A
 70%|██████▉   | 154/221 [00:50<00:15,  4.19it/s][A
 70%|███████   | 155/221 [00:50<00:14,  4.56it/s][A
 71%|███████   | 156/221 [00:51<00:12,  5.34it/s][A
 71%|███████   | 157/221 [00:51<00:23,  2.67it/s][A
 71%|███████▏  | 158/221 [00:52<00:21,  3.00it/s][A
 72%|███████▏  | 159/221 [00:52<00:19,  3.22it/s][A
 73%|███████▎  | 161/221 [00:52<00:12,  4.82it/s][A
 73%|███████▎  | 162/221 [00:52<00:10,  5.39it/s][A
 74%|███████▍  | 163/221 [00:52<00:11,  5.17it/s][A
 74%|███████▍  | 164/221 [00:53<00:17,  3.26it/s][A
 75%|███████▍  | 165/221 [00:53<00:17,  3.28it/s][A
 75%|███████▌  | 166/221 [00:54<00:18,  2.90it/s][A
 76%|███████▌  | 168/221 [00:55<00:29,  1.78it/s][A
 77%|███████▋  | 170/221 [00:56<00:20,  2.47it/s][A
 77%|███████▋  | 171/221 [00:57<00:25,  1.98it/s][A
 78%|███████▊  | 172/221 [00:57<00:20,  2.44it/s][A
 78%|███████▊  | 173/221 [00:57<00:18,  2.56it/s][A
 79%|███████▉  | 175/221 [00:57<00:12,  3.68it/s][A
 80%|███████▉  | 176/221 [00:57<00:11,  4.05it/s][A
 81%|████████  | 178/221 [00:58<00:07,  5.60it/s][A
 81%|████████  | 179/221 [00:58<00:14,  2.99it/s][A
 82%|████████▏ | 181/221 [00:59<00:09,  4.39it/s][A
 82%|████████▏ | 182/221 [00:59<00:08,  4.36it/s][A
 83%|████████▎ | 183/221 [00:59<00:08,  4.45it/s][A
 83%|████████▎ | 184/221 [01:00<00:12,  2.98it/s][A
 84%|████████▍ | 186/221 [01:00<00:11,  3.17it/s][A
 85%|████████▍ | 187/221 [01:00<00:10,  3.37it/s][A
 85%|████████▌ | 188/221 [01:01<00:08,  3.92it/s][A
 86%|████████▌ | 189/221 [01:01<00:07,  4.37it/s][A
 86%|████████▌ | 190/221 [01:01<00:06,  4.53it/s][A
 87%|████████▋ | 192/221 [01:01<00:05,  5.29it/s][A
 88%|████████▊ | 194/221 [01:02<00:06,  4.08it/s][A
 88%|████████▊ | 195/221 [01:02<00:05,  4.67it/s][A
 89%|████████▉ | 197/221 [01:02<00:04,  5.31it/s][A
 90%|█████████ | 199/221 [01:02<00:03,  6.49it/s][A
 91%|█████████ | 201/221 [01:03<00:02,  7.32it/s][A
 92%|█████████▏| 203/221 [01:03<00:02,  7.83it/s][A
 92%|█████████▏| 204/221 [01:03<00:02,  7.53it/s][A
 93%|█████████▎| 206/221 [01:03<00:02,  6.46it/s][A
 94%|█████████▍| 208/221 [01:04<00:01,  7.28it/s][A
 95%|█████████▍| 209/221 [01:04<00:01,  6.67it/s][A
 95%|█████████▌| 211/221 [01:04<00:01,  6.11it/s][A
 96%|█████████▌| 212/221 [01:05<00:01,  5.26it/s][A
 97%|█████████▋| 214/221 [01:05<00:01,  3.76it/s][A
 97%|█████████▋| 215/221 [01:06<00:01,  3.90it/s][A
 98%|█████████▊| 216/221 [01:06<00:01,  4.20it/s][A
 98%|█████████▊| 217/221 [01:07<00:02,  1.73it/s][A
 99%|█████████▊| 218/221 [01:08<00:01,  2.12it/s][A
 99%|█████████▉| 219/221 [01:08<00:00,  2.70it/s][A
100%|█████████▉| 220/221 [01:08<00:00,  2.37it/s][A100%|██████████| 221/221 [01:08<00:00,  3.22it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.79it/s][A
  1%|          | 2/221 [00:00<00:57,  3.79it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.79it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.79it/s][A
  2%|▏         | 5/221 [00:01<00:56,  3.79it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.79it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.79it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.79it/s][A
  4%|▍         | 9/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.79it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.79it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.79it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.79it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.79it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:51,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:37,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 125/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 130/221 [00:34<00:23,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.79it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.79it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.79it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.79it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.79it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.79it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.79it/s][A
 65%|██████▌   | 144/221 [00:37<00:20,  3.79it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.79it/s][A
 67%|██████▋   | 149/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.79it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.79it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.79it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.79it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.79it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.79it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.79it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 159/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.79it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.79it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 163/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.79it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.79it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.79it/s][A
 76%|███████▌  | 168/221 [00:44<00:13,  3.79it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.79it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.79it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.79it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.79it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.79it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 178/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.79it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.79it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.79it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.79it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.79it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.79it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.79it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.79it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.79it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.79it/s][A
 89%|████████▉ | 197/221 [00:51<00:06,  3.79it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.79it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.79it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.79it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.79it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.79it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.79it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.79it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.79it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.79it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.79it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.79it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▌| 212/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.79it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.79it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.79it/s][A
 98%|█████████▊| 216/221 [00:56<00:01,  3.79it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.79it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.79it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.79it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.79it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.79it/s][A100%|██████████| 221/221 [00:58<00:00,  3.79it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:35,  6.15it/s][A
  1%|          | 2/221 [00:00<00:40,  5.44it/s][A
  1%|▏         | 3/221 [00:00<00:42,  5.14it/s][A
  2%|▏         | 4/221 [00:00<00:34,  6.33it/s][A
  3%|▎         | 6/221 [00:00<00:23,  9.26it/s][A
  4%|▎         | 8/221 [00:01<00:27,  7.62it/s][A
  4%|▍         | 9/221 [00:01<00:28,  7.31it/s][A
  5%|▍         | 10/221 [00:01<00:47,  4.46it/s][A
  5%|▍         | 11/221 [00:01<00:41,  5.05it/s][A
  5%|▌         | 12/221 [00:02<00:40,  5.18it/s][A
  6%|▌         | 13/221 [00:02<00:49,  4.22it/s][A
  6%|▋         | 14/221 [00:02<00:41,  5.05it/s][A
  7%|▋         | 15/221 [00:02<00:43,  4.76it/s][A
  7%|▋         | 16/221 [00:03<00:50,  4.07it/s][A
  8%|▊         | 17/221 [00:03<01:17,  2.63it/s][A
  8%|▊         | 18/221 [00:03<01:04,  3.14it/s][A
  9%|▊         | 19/221 [00:04<00:54,  3.74it/s][A
  9%|▉         | 20/221 [00:04<00:45,  4.38it/s][A
 10%|▉         | 21/221 [00:04<00:38,  5.19it/s][A
 10%|▉         | 22/221 [00:04<00:37,  5.36it/s][A
 11%|█         | 24/221 [00:04<00:30,  6.45it/s][A
 11%|█▏        | 25/221 [00:04<00:28,  6.77it/s][A
 12%|█▏        | 26/221 [00:05<00:34,  5.69it/s][A
 13%|█▎        | 28/221 [00:05<00:30,  6.40it/s][A
 13%|█▎        | 29/221 [00:05<00:36,  5.33it/s][A
 14%|█▎        | 30/221 [00:06<00:54,  3.51it/s][A
 14%|█▍        | 31/221 [00:06<00:48,  3.91it/s][A
 15%|█▍        | 33/221 [00:06<00:39,  4.77it/s][A
 16%|█▌        | 35/221 [00:07<00:33,  5.56it/s][A
 16%|█▋        | 36/221 [00:07<00:40,  4.60it/s][A
 17%|█▋        | 37/221 [00:07<00:37,  4.91it/s][A
 17%|█▋        | 38/221 [00:07<00:43,  4.23it/s][A
 18%|█▊        | 39/221 [00:08<00:40,  4.48it/s][A
 18%|█▊        | 40/221 [00:08<00:44,  4.06it/s][A
 19%|█▉        | 42/221 [00:08<00:36,  4.93it/s][A
 19%|█▉        | 43/221 [00:08<00:34,  5.22it/s][A
 20%|█▉        | 44/221 [00:08<00:29,  5.93it/s][A
 20%|██        | 45/221 [00:09<00:39,  4.45it/s][A
 21%|██        | 46/221 [00:09<00:37,  4.71it/s][A
 21%|██▏       | 47/221 [00:09<00:38,  4.58it/s][A
 22%|██▏       | 49/221 [00:10<00:33,  5.10it/s][A
 23%|██▎       | 50/221 [00:10<00:34,  4.90it/s][A
 23%|██▎       | 51/221 [00:10<00:33,  5.14it/s][A
 24%|██▎       | 52/221 [00:10<00:38,  4.41it/s][A
 24%|██▍       | 54/221 [00:11<00:57,  2.92it/s][A
 25%|██▍       | 55/221 [00:11<00:53,  3.13it/s][A
 26%|██▌       | 57/221 [00:12<00:40,  4.07it/s][A
 26%|██▌       | 58/221 [00:12<00:48,  3.34it/s][A
 27%|██▋       | 59/221 [00:12<00:41,  3.87it/s][A
 27%|██▋       | 60/221 [00:13<00:48,  3.30it/s][A
 28%|██▊       | 61/221 [00:13<00:40,  3.98it/s][A
 28%|██▊       | 62/221 [00:13<00:38,  4.17it/s][A
 29%|██▊       | 63/221 [00:13<00:43,  3.64it/s][A
 29%|██▉       | 64/221 [00:14<01:16,  2.05it/s][A
 30%|██▉       | 66/221 [00:15<01:01,  2.52it/s][A
 30%|███       | 67/221 [00:16<01:06,  2.31it/s][A
 31%|███       | 68/221 [00:16<00:55,  2.75it/s][A
 31%|███       | 69/221 [00:17<01:37,  1.56it/s][A
 32%|███▏      | 70/221 [00:17<01:16,  1.98it/s][A
 32%|███▏      | 71/221 [00:17<01:01,  2.43it/s][A
 33%|███▎      | 72/221 [00:18<01:00,  2.48it/s][A
 33%|███▎      | 73/221 [00:18<00:56,  2.60it/s][A
 34%|███▍      | 75/221 [00:19<00:41,  3.51it/s][A
 34%|███▍      | 76/221 [00:19<00:39,  3.63it/s][A
 35%|███▍      | 77/221 [00:19<00:43,  3.30it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.77it/s][A
 36%|███▌      | 80/221 [00:20<00:33,  4.20it/s][A
 37%|███▋      | 81/221 [00:20<00:34,  4.04it/s][A
 37%|███▋      | 82/221 [00:20<00:35,  3.88it/s][A
 38%|███▊      | 83/221 [00:21<00:52,  2.64it/s][A
 38%|███▊      | 84/221 [00:21<00:43,  3.14it/s][A
 39%|███▉      | 86/221 [00:21<00:28,  4.71it/s][A
 39%|███▉      | 87/221 [00:22<00:38,  3.49it/s][A
 40%|███▉      | 88/221 [00:22<00:40,  3.32it/s][A
 40%|████      | 89/221 [00:22<00:36,  3.61it/s][A
 41%|████      | 90/221 [00:23<00:47,  2.78it/s][A
 41%|████      | 91/221 [00:23<00:38,  3.39it/s][A
 42%|████▏     | 92/221 [00:23<00:35,  3.68it/s][A
 42%|████▏     | 93/221 [00:24<00:42,  2.99it/s][A
 43%|████▎     | 94/221 [00:24<00:47,  2.65it/s][A
 43%|████▎     | 95/221 [00:25<00:43,  2.91it/s][A
 43%|████▎     | 96/221 [00:25<00:56,  2.19it/s][A
 44%|████▍     | 97/221 [00:25<00:47,  2.63it/s][A
 44%|████▍     | 98/221 [00:26<01:08,  1.79it/s][A
 45%|████▍     | 99/221 [00:27<00:52,  2.32it/s][A
 45%|████▌     | 100/221 [00:27<00:45,  2.68it/s][A
 46%|████▌     | 101/221 [00:27<00:38,  3.08it/s][A
 46%|████▌     | 102/221 [00:29<01:26,  1.37it/s][A
 47%|████▋     | 103/221 [00:29<01:04,  1.83it/s][A
 47%|████▋     | 104/221 [00:29<00:49,  2.38it/s][A
 48%|████▊     | 105/221 [00:29<00:41,  2.77it/s][A
 48%|████▊     | 106/221 [00:30<00:41,  2.76it/s][A
 48%|████▊     | 107/221 [00:30<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:30<00:31,  3.54it/s][A
 49%|████▉     | 109/221 [00:30<00:28,  3.97it/s][A
 50%|████▉     | 110/221 [00:30<00:24,  4.53it/s][A
 50%|█████     | 111/221 [00:30<00:22,  4.83it/s][A
 51%|█████     | 112/221 [00:31<00:26,  4.09it/s][A
 51%|█████     | 113/221 [00:31<00:37,  2.89it/s][A
 52%|█████▏    | 115/221 [00:32<00:25,  4.16it/s][A
 52%|█████▏    | 116/221 [00:32<00:25,  4.17it/s][A
 53%|█████▎    | 117/221 [00:32<00:25,  4.12it/s][A
 53%|█████▎    | 118/221 [00:32<00:23,  4.46it/s][A
 54%|█████▍    | 119/221 [00:33<00:25,  3.93it/s][A
 54%|█████▍    | 120/221 [00:33<00:21,  4.72it/s][A
 55%|█████▍    | 121/221 [00:33<00:18,  5.28it/s][A
 55%|█████▌    | 122/221 [00:33<00:20,  4.82it/s][A
 56%|█████▌    | 123/221 [00:33<00:19,  5.11it/s][A
 56%|█████▌    | 124/221 [00:34<00:21,  4.51it/s][A
 57%|█████▋    | 125/221 [00:34<00:23,  4.10it/s][A
 57%|█████▋    | 126/221 [00:34<00:21,  4.40it/s][A
 57%|█████▋    | 127/221 [00:34<00:26,  3.54it/s][A
 58%|█████▊    | 128/221 [00:35<00:24,  3.86it/s][A
 59%|█████▉    | 130/221 [00:35<00:17,  5.35it/s][A
 60%|█████▉    | 132/221 [00:36<00:33,  2.64it/s][A
 60%|██████    | 133/221 [00:36<00:31,  2.76it/s][A
 61%|██████    | 134/221 [00:37<00:43,  2.01it/s][A
 61%|██████    | 135/221 [00:38<00:48,  1.78it/s][A
 62%|██████▏   | 136/221 [00:38<00:39,  2.13it/s][A
 62%|██████▏   | 137/221 [00:39<00:33,  2.49it/s][A
 62%|██████▏   | 138/221 [00:39<00:32,  2.58it/s][A
 63%|██████▎   | 139/221 [00:40<00:36,  2.23it/s][A
 63%|██████▎   | 140/221 [00:40<00:35,  2.27it/s][A
 64%|██████▍   | 141/221 [00:40<00:32,  2.45it/s][A
 64%|██████▍   | 142/221 [00:40<00:27,  2.88it/s][A
 65%|██████▍   | 143/221 [00:41<00:39,  1.99it/s][A
 65%|██████▌   | 144/221 [00:42<00:40,  1.92it/s][A
 66%|██████▌   | 145/221 [00:42<00:30,  2.53it/s][A
 66%|██████▌   | 146/221 [00:42<00:23,  3.17it/s][A
 67%|██████▋   | 147/221 [00:42<00:21,  3.38it/s][A
 67%|██████▋   | 148/221 [00:43<00:32,  2.27it/s][A
 67%|██████▋   | 149/221 [00:44<00:35,  2.04it/s][A
 68%|██████▊   | 150/221 [00:44<00:28,  2.47it/s][A
 68%|██████▊   | 151/221 [00:44<00:25,  2.77it/s][A
 69%|██████▉   | 152/221 [00:45<00:25,  2.70it/s][A
 69%|██████▉   | 153/221 [00:45<00:21,  3.16it/s][A
 70%|██████▉   | 154/221 [00:45<00:18,  3.70it/s][A
 70%|███████   | 155/221 [00:45<00:21,  3.05it/s][A
 71%|███████   | 157/221 [00:46<00:16,  3.82it/s][A
 71%|███████▏  | 158/221 [00:46<00:16,  3.93it/s][A
 72%|███████▏  | 159/221 [00:46<00:14,  4.16it/s][A
 72%|███████▏  | 160/221 [00:46<00:12,  4.92it/s][A
 73%|███████▎  | 161/221 [00:47<00:20,  2.86it/s][A
 73%|███████▎  | 162/221 [00:47<00:17,  3.40it/s][A
 74%|███████▍  | 163/221 [00:48<00:16,  3.55it/s][A
 74%|███████▍  | 164/221 [00:48<00:15,  3.68it/s][A
 75%|███████▍  | 165/221 [00:48<00:16,  3.40it/s][A
 75%|███████▌  | 166/221 [00:48<00:13,  4.07it/s][A
 76%|███████▌  | 168/221 [00:49<00:11,  4.56it/s][A
 77%|███████▋  | 170/221 [00:49<00:10,  4.80it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.46it/s][A
 78%|███████▊  | 172/221 [00:50<00:12,  3.91it/s][A
 78%|███████▊  | 173/221 [00:50<00:14,  3.31it/s][A
 79%|███████▊  | 174/221 [00:51<00:15,  3.01it/s][A
 79%|███████▉  | 175/221 [00:51<00:14,  3.13it/s][A
 80%|███████▉  | 176/221 [00:51<00:12,  3.54it/s][A
 81%|████████  | 178/221 [00:51<00:08,  5.09it/s][A
 81%|████████  | 179/221 [00:51<00:08,  4.74it/s][A
 81%|████████▏ | 180/221 [00:52<00:08,  4.96it/s][A
 82%|████████▏ | 182/221 [00:52<00:08,  4.76it/s][A
 83%|████████▎ | 183/221 [00:52<00:08,  4.29it/s][A
 83%|████████▎ | 184/221 [00:53<00:09,  4.04it/s][A
 84%|████████▎ | 185/221 [00:53<00:09,  3.77it/s][A
 84%|████████▍ | 186/221 [00:54<00:14,  2.43it/s][A
 85%|████████▍ | 187/221 [00:54<00:12,  2.72it/s][A
 85%|████████▌ | 188/221 [00:54<00:11,  2.90it/s][A
 86%|████████▌ | 189/221 [00:55<00:09,  3.29it/s][A
 86%|████████▌ | 190/221 [00:55<00:09,  3.30it/s][A
 86%|████████▋ | 191/221 [00:55<00:07,  4.10it/s][A
 87%|████████▋ | 192/221 [00:55<00:07,  4.09it/s][A
 87%|████████▋ | 193/221 [00:55<00:05,  4.80it/s][A
 88%|████████▊ | 194/221 [00:56<00:07,  3.51it/s][A
 88%|████████▊ | 195/221 [00:56<00:07,  3.34it/s][A
 89%|████████▊ | 196/221 [00:56<00:06,  4.12it/s][A
 89%|████████▉ | 197/221 [00:57<00:06,  3.64it/s][A
 90%|████████▉ | 198/221 [00:57<00:06,  3.70it/s][A
 90%|█████████ | 199/221 [00:57<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:57<00:05,  4.00it/s][A
 91%|█████████ | 201/221 [00:57<00:04,  4.67it/s][A
 91%|█████████▏| 202/221 [00:58<00:04,  4.25it/s][A
 92%|█████████▏| 203/221 [00:58<00:03,  4.91it/s][A
 92%|█████████▏| 204/221 [00:58<00:05,  3.34it/s][A
 93%|█████████▎| 205/221 [00:58<00:03,  4.15it/s][A
 93%|█████████▎| 206/221 [00:59<00:04,  3.63it/s][A
 94%|█████████▍| 208/221 [00:59<00:02,  4.93it/s][A
 95%|█████████▍| 209/221 [00:59<00:02,  5.28it/s][A
 95%|█████████▌| 211/221 [01:00<00:01,  5.21it/s][A
 96%|█████████▌| 212/221 [01:00<00:01,  4.69it/s][A
 96%|█████████▋| 213/221 [01:00<00:01,  5.24it/s][A
 97%|█████████▋| 214/221 [01:01<00:02,  2.39it/s][A
 97%|█████████▋| 215/221 [01:01<00:02,  2.77it/s][A
 98%|█████████▊| 216/221 [01:02<00:01,  3.08it/s][A
 98%|█████████▊| 217/221 [01:02<00:01,  2.91it/s][A
 99%|█████████▊| 218/221 [01:02<00:00,  3.25it/s][A
 99%|█████████▉| 219/221 [01:02<00:00,  3.72it/s][A
100%|█████████▉| 220/221 [01:02<00:00,  4.23it/s][A
100%|██████████| 221/221 [01:03<00:00,  4.93it/s][A100%|██████████| 221/221 [01:03<00:00,  3.50it/s]
09/06/2024 23:10:16 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 899--===========

09/06/2024 23:10:16 - INFO - __main__ -   {'area_r1': 23.3, 'area_recall': '23.3/49.4/59.6', 'area_ravg': 44.1}
09/06/2024 23:10:16 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 899--===========

09/06/2024 23:10:16 - INFO - __main__ -   {'forward_r1': 38.3, 'forward_recall': '38.3/66.4/75.6', 'forward_ravg': 60.1}
09/06/2024 23:10:16 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 899--===========

09/06/2024 23:10:16 - INFO - __main__ -   {'area_video_r1': 39.1, 'area_video_recall': '39.1/68.4/78.8', 'area_video_ravg': 62.1}
09/06/2024 23:10:16 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 599=======

09/06/2024 23:10:16 - INFO - __main__ -   {'area_video_r1': 40.3, 'area_video_recall': '40.3/69.1/79.2', 'area_video_ravg': 62.9}
09/06/2024 23:10:16 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 899--===========

09/06/2024 23:10:16 - INFO - __main__ -   {'area_video_r1': 50.3, 'area_video_recall': '50.3/74.1/80.0', 'area_video_ravg': 68.1, 'area_video_back_r1': 50.0, 'area_video_back_recall': '50.0/72.5/81.3', 'area_video_back_ravg': 67.9}
09/06/2024 23:10:16 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 299=======

09/06/2024 23:10:16 - INFO - __main__ -   {'area_video_r1': 51.0, 'area_video_recall': '51.0/73.4/79.9', 'area_video_ravg': 68.1, 'area_video_back_r1': 51.0, 'area_video_back_recall': '51.0/73.8/81.9', 'area_video_back_ravg': 68.9}
09/06/2024 23:10:16 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 899--===========

09/06/2024 23:10:16 - INFO - __main__ -   {'video_r1': 41.0, 'video_recall': '41.0/69.6/80.0', 'video_ravg': 63.5}
09/06/2024 23:10:16 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 299=======

09/06/2024 23:10:16 - INFO - __main__ -   {'video_r1': 43.3, 'video_recall': '43.3/70.8/80.2', 'video_ravg': 64.8}
09/06/2024 23:10:16 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 899--===========

09/06/2024 23:10:16 - INFO - __main__ -   {'video_r1': 50.7, 'video_recall': '50.7/74.7/81.4', 'video_ravg': 68.9}
09/06/2024 23:10:16 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 299=======

09/06/2024 23:10:16 - INFO - __main__ -   {'video_r1': 52.0, 'video_recall': '52.0/75.3/81.8', 'video_ravg': 69.7}
09/06/2024 23:10:36 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 2.9716122150421143, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04522889852523804, 'loss_ret%tv%ta--finetune_area/loss_area': 2.403801918029785, 'loss_ret%tv%ta--finetune_area/total_loss': 5.420642852783203}
 58%|█████▊    | 900/1556 [3:34:59<21:09:21, 116.10s/it] 58%|█████▊    | 901/1556 [3:35:02<14:56:11, 82.09s/it] [h264 @ 0x55e52b5e6e80] mmco: unref short failure
 58%|█████▊    | 902/1556 [3:35:05<10:36:02, 58.35s/it][h264 @ 0x55c985636cc0] mmco: unref short failure
[h264 @ 0x55c985636cc0] mmco: unref short failure
 58%|█████▊    | 903/1556 [3:35:08<7:35:44, 41.87s/it] [h264 @ 0x5616b6cd1100] mmco: unref short failure
 58%|█████▊    | 904/1556 [3:35:12<5:30:49, 30.44s/it] 58%|█████▊    | 905/1556 [3:35:16<4:04:46, 22.56s/it][h264 @ 0x5616b9b7f300] mmco: unref short failure
[h264 @ 0x5616b9b7f300] mmco: unref short failure
 58%|█████▊    | 906/1556 [3:35:21<3:04:58, 17.08s/it] 58%|█████▊    | 907/1556 [3:35:27<2:28:52, 13.76s/it][h264 @ 0x5649db0c8080] mmco: unref short failure
[h264 @ 0x5616bb5a9940] mmco: unref short failure
 58%|█████▊    | 908/1556 [3:35:33<2:03:21, 11.42s/it][h264 @ 0x55c9840b2800] mmco: unref short failure
 58%|█████▊    | 909/1556 [3:35:38<1:43:09,  9.57s/it][h264 @ 0x5616b6cd1100] mmco: unref short failure
 58%|█████▊    | 910/1556 [3:35:43<1:29:09,  8.28s/it][h264 @ 0x5649ef614b40] mmco: unref short failure
[h264 @ 0x5649ef614b40] mmco: unref short failure
 59%|█████▊    | 911/1556 [3:35:49<1:21:11,  7.55s/it] 59%|█████▊    | 912/1556 [3:35:55<1:15:36,  7.04s/it] 59%|█████▊    | 913/1556 [3:36:01<1:11:14,  6.65s/it] 59%|█████▊    | 914/1556 [3:36:06<1:07:12,  6.28s/it][h264 @ 0x55e52e179580] mmco: unref short failure
[h264 @ 0x55e5347e1080] mmco: unref short failure
[h264 @ 0x55e5347e1080] mmco: unref short failure
[h264 @ 0x55c982276700] mmco: unref short failure
 59%|█████▉    | 915/1556 [3:36:12<1:06:18,  6.21s/it][h264 @ 0x55c97b5ed880] mmco: unref short failure
[h264 @ 0x55c97b5ed880] mmco: unref short failure
 59%|█████▉    | 916/1556 [3:36:18<1:04:40,  6.06s/it][h264 @ 0x5616abc4b580] mmco: unref short failure
 59%|█████▉    | 917/1556 [3:36:34<1:38:33,  9.26s/it][h264 @ 0x55e52e67c880] mmco: unref short failure
 59%|█████▉    | 918/1556 [3:36:40<1:26:42,  8.15s/it][h264 @ 0x55c97a2d0700] mmco: unref short failure
 59%|█████▉    | 919/1556 [3:36:48<1:27:12,  8.21s/it][h264 @ 0x5616b96b7b80] mmco: unref short failure
[h264 @ 0x5616b96b7b80] mmco: unref short failure
[h264 @ 0x55e4fa17a640] mmco: unref short failure
[h264 @ 0x5616bacdad80] mmco: unref short failure
[h264 @ 0x5616bacdad80] mmco: unref short failure
[h264 @ 0x55c9840b2a40] mmco: unref short failure
[h264 @ 0x55c9840b2a40] mmco: unref short failure
 59%|█████▉    | 920/1556 [3:37:00<1:37:05,  9.16s/it][h264 @ 0x5616b6e1a280] mmco: unref short failure
[h264 @ 0x5616b6e1a280] mmco: unref short failure
[h264 @ 0x55c9726873c0] mmco: unref short failure
[h264 @ 0x55e52bb3e880] mmco: unref short failure
[h264 @ 0x55e52bb3e880] mmco: unref short failure
 59%|█████▉    | 921/1556 [3:37:06<1:26:37,  8.19s/it] 59%|█████▉    | 922/1556 [3:37:11<1:16:53,  7.28s/it] 59%|█████▉    | 923/1556 [3:37:16<1:11:51,  6.81s/it][h264 @ 0x55c977521380] mmco: unref short failure
[h264 @ 0x55c977521380] mmco: unref short failure
[h264 @ 0x5649eb2b7380] mmco: unref short failure
[h264 @ 0x55c9823e75c0] mmco: unref short failure
[h264 @ 0x55e4f9e30ac0] mmco: unref short failure
[h264 @ 0x55e4f9e30ac0] mmco: unref short failure
[h264 @ 0x55e533502b00] mmco: unref short failure
 59%|█████▉    | 924/1556 [3:37:56<2:54:38, 16.58s/it][h264 @ 0x55e4fa695e40] mmco: unref short failure
[h264 @ 0x5649ec1ae080] mmco: unref short failure
[h264 @ 0x5649ec1ae080] mmco: unref short failure
[h264 @ 0x5649ec1ae080] mmco: unref short failure
[h264 @ 0x55c970274580] mmco: unref short failure
[h264 @ 0x55c970274580] mmco: unref short failure
[h264 @ 0x5649df2ef140] mmco: unref short failure
[h264 @ 0x55e5324477c0] mmco: unref short failure
[h264 @ 0x55e5324477c0] mmco: unref short failure
[h264 @ 0x5649dec6f980] mmco: unref short failure
 59%|█████▉    | 925/1556 [3:38:16<3:05:20, 17.62s/it][h264 @ 0x5616ae4b0680] mmco: unref short failure
 60%|█████▉    | 926/1556 [3:38:21<2:25:38, 13.87s/it] 60%|█████▉    | 927/1556 [3:38:27<1:59:01, 11.35s/it][h264 @ 0x55e529755f80] mmco: unref short failure
 60%|█████▉    | 928/1556 [3:38:38<1:59:08, 11.38s/it][h264 @ 0x5616b22a3740] mmco: unref short failure
[h264 @ 0x5616b22a3740] mmco: unref short failure
 60%|█████▉    | 929/1556 [3:38:44<1:41:15,  9.69s/it] 60%|█████▉    | 930/1556 [3:38:49<1:27:11,  8.36s/it][h264 @ 0x55e5347f1740] mmco: unref short failure
 60%|█████▉    | 931/1556 [3:38:55<1:20:05,  7.69s/it][h264 @ 0x55e4f9c8eb80] mmco: unref short failure
[h264 @ 0x55e4f9c8eb80] mmco: unref short failure
[h264 @ 0x55c97087ef40] mmco: unref short failure
[h264 @ 0x5649e6974840] mmco: unref short failure
[h264 @ 0x55c97d75bd00] mmco: unref short failure
[h264 @ 0x55e528c69a00] mmco: unref short failure
[h264 @ 0x55e528c69a00] mmco: unref short failure
[h264 @ 0x5649df2eecc0] mmco: unref short failure
[h264 @ 0x5649df2eecc0] mmco: unref short failure
[h264 @ 0x55c982081480] mmco: unref short failure
[h264 @ 0x55c982081480] mmco: unref short failure
[h264 @ 0x561671c8bac0] mmco: unref short failure
[h264 @ 0x561671c8bac0] mmco: unref short failure
[h264 @ 0x561671c8bac0] mmco: unref short failure
[h264 @ 0x561671c8bac0] mmco: unref short failure
 60%|█████▉    | 932/1556 [3:39:33<2:55:21, 16.86s/it][h264 @ 0x5649e65f53c0] mmco: unref short failure
[h264 @ 0x55c9760f0e80] mmco: unref short failure
[h264 @ 0x55c973e79040] mmco: unref short failure
[h264 @ 0x55c973e79040] mmco: unref short failure
[h264 @ 0x5649ee0271c0] mmco: unref short failure
 60%|█████▉    | 933/1556 [3:39:57<3:16:01, 18.88s/it] 60%|██████    | 934/1556 [3:40:02<2:32:20, 14.69s/it][h264 @ 0x5616bdbb6340] mmco: unref short failure
[h264 @ 0x55e530c1a280] mmco: unref short failure
[h264 @ 0x55e530c1a280] mmco: unref short failure
[h264 @ 0x5616a92490c0] mmco: unref short failure
[h264 @ 0x55c9859b8d00] mmco: unref short failure
[h264 @ 0x55c9859b8d00] mmco: unref short failure
 60%|██████    | 935/1556 [3:40:13<2:20:31, 13.58s/it][h264 @ 0x5649b92e6040] mmco: unref short failure
[h264 @ 0x5649b92e6040] mmco: unref short failure
[h264 @ 0x5649b92e6040] mmco: unref short failure
 60%|██████    | 936/1556 [3:40:18<1:55:00, 11.13s/it] 60%|██████    | 937/1556 [3:40:23<1:36:24,  9.35s/it][h264 @ 0x55c970e92000] mmco: unref short failure
 60%|██████    | 938/1556 [3:40:29<1:25:08,  8.27s/it][h264 @ 0x5649e95805c0] mmco: unref short failure
[h264 @ 0x5649e95805c0] mmco: unref short failure
 60%|██████    | 939/1556 [3:40:34<1:14:34,  7.25s/it][h264 @ 0x561670fea6c0] mmco: unref short failure
[h264 @ 0x55c97f3bfb80] mmco: unref short failure
[h264 @ 0x5616bc30cdc0] mmco: unref short failure
[h264 @ 0x5616bc30cdc0] mmco: unref short failure
[h264 @ 0x55e530d9f1c0] mmco: unref short failure
[h264 @ 0x5649ee6ffb00] mmco: unref short failure
[h264 @ 0x5649ee6ffb00] mmco: unref short failure
[h264 @ 0x5649db268740] mmco: unref short failure
[h264 @ 0x5649db268740] mmco: unref short failure
[h264 @ 0x55e4f98c6a00] mmco: unref short failure
[h264 @ 0x55e4f98c6a00] mmco: unref short failure
[h264 @ 0x5649ed61c080] mmco: unref short failure
[h264 @ 0x5649ed61c080] mmco: unref short failure
[h264 @ 0x5649e7063d00] mmco: unref short failure
 60%|██████    | 940/1556 [3:41:17<3:05:20, 18.05s/it][h264 @ 0x5616bd3aab80] mmco: unref short failure
[h264 @ 0x5616bd3aab80] mmco: unref short failure
 60%|██████    | 941/1556 [3:41:27<2:39:28, 15.56s/it][h264 @ 0x55c9382b9680] mmco: unref short failure
[h264 @ 0x55c9382b9680] mmco: unref short failure
[h264 @ 0x55c9382b9680] mmco: unref short failure
[h264 @ 0x55c9382b9680] mmco: unref short failure
[h264 @ 0x55c9382b9680] mmco: unref short failure
[h264 @ 0x55c9382b9680] mmco: unref short failure
 61%|██████    | 942/1556 [3:41:37<2:22:00, 13.88s/it][h264 @ 0x561670bf5580] mmco: unref short failure
[h264 @ 0x561670bf5580] mmco: unref short failure
[h264 @ 0x5616bf226f80] mmco: unref short failure
[h264 @ 0x5616bf226f80] mmco: unref short failure
[h264 @ 0x55c970d5c6c0] mmco: unref short failure
 61%|██████    | 943/1556 [3:41:43<1:57:33, 11.51s/it][h264 @ 0x55c974794f80] mmco: unref short failure
[h264 @ 0x55c974794f80] mmco: unref short failure
[h264 @ 0x55c9386e3240] mmco: unref short failure
[h264 @ 0x55c9386e3240] mmco: unref short failure
 61%|██████    | 944/1556 [3:42:00<2:15:25, 13.28s/it][h264 @ 0x55e5245956c0] mmco: unref short failure
[h264 @ 0x55e5245956c0] mmco: unref short failure
[h264 @ 0x55e5245956c0] mmco: unref short failure
[h264 @ 0x55e5245956c0] mmco: unref short failure
[h264 @ 0x5616aae9d380] mmco: unref short failure
[h264 @ 0x5616aae9d380] mmco: unref short failure
 61%|██████    | 945/1556 [3:42:06<1:52:57, 11.09s/it][h264 @ 0x55e5275e1d00] mmco: unref short failure
 61%|██████    | 946/1556 [3:42:12<1:35:34,  9.40s/it][h264 @ 0x5649e9dc8800] mmco: unref short failure
[h264 @ 0x5649e9dc8800] mmco: unref short failure
 61%|██████    | 947/1556 [3:42:18<1:24:25,  8.32s/it][h264 @ 0x55c97e001000] mmco: unref short failure
[h264 @ 0x55c97e001000] mmco: unref short failure
[h264 @ 0x5616ae04ff40] mmco: unref short failure
[h264 @ 0x5616b667aac0] mmco: unref short failure
[h264 @ 0x5616b667aac0] mmco: unref short failure
[h264 @ 0x5616b667aac0] mmco: unref short failure
[h264 @ 0x5616b667aac0] mmco: unref short failure
 61%|██████    | 948/1556 [3:42:57<2:59:23, 17.70s/it][h264 @ 0x5616ad22c300] mmco: unref short failure
[h264 @ 0x55e4fab50c80] mmco: unref short failure
 61%|██████    | 949/1556 [3:43:11<2:46:38, 16.47s/it][h264 @ 0x5649ddd04000] mmco: unref short failure
[h264 @ 0x5649ddd04000] mmco: unref short failure
[h264 @ 0x5649ddd04000] mmco: unref short failure
[h264 @ 0x5649ddd04000] mmco: unref short failure
09/06/2024 23:18:54 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.083378553390503, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.045669954270124435, 'loss_ret%tv%ta--finetune_area/loss_area': 2.774733066558838, 'loss_ret%tv%ta--finetune_area/total_loss': 5.903781890869141}
[h264 @ 0x5616ba25aa40] mmco: unref short failure
[h264 @ 0x5616ba25aa40] mmco: unref short failure
[h264 @ 0x5616ba25aa40] mmco: unref short failure
 61%|██████    | 950/1556 [3:43:19<2:20:48, 13.94s/it] 61%|██████    | 951/1556 [3:43:26<1:59:46, 11.88s/it][h264 @ 0x55c97d75bf00] mmco: unref short failure
 61%|██████    | 952/1556 [3:43:38<1:59:44, 11.90s/it][h264 @ 0x55e4fa8477c0] mmco: unref short failure
 61%|██████    | 953/1556 [3:43:44<1:40:59, 10.05s/it][h264 @ 0x5649e76a2f00] mmco: unref short failure
 61%|██████▏   | 954/1556 [3:43:50<1:29:26,  8.91s/it][h264 @ 0x55c9701a4cc0] mmco: unref short failure
[h264 @ 0x5616af249740] mmco: unref short failure
[h264 @ 0x5616af249740] mmco: unref short failure
 61%|██████▏   | 955/1556 [3:43:56<1:19:51,  7.97s/it][h264 @ 0x55c983c82b80] mmco: unref short failure
[h264 @ 0x5649df47f480] mmco: unref short failure
[h264 @ 0x5649db8a7e00] mmco: unref short failure
[h264 @ 0x5649db8a7e00] mmco: unref short failure
[h264 @ 0x55e523265880] mmco: unref short failure
[h264 @ 0x55e523265880] mmco: unref short failure
 61%|██████▏   | 956/1556 [3:44:38<3:02:59, 18.30s/it][h264 @ 0x55c976180780] mmco: unref short failure
[h264 @ 0x55c976180780] mmco: unref short failure
[h264 @ 0x55e521a23bc0] mmco: unref short failure
 62%|██████▏   | 957/1556 [3:44:49<2:41:27, 16.17s/it] 62%|██████▏   | 958/1556 [3:44:59<2:22:31, 14.30s/it][h264 @ 0x55e52692ce80] mmco: unref short failure
[h264 @ 0x55e52692ce80] mmco: unref short failure
[h264 @ 0x5616b41972c0] mmco: unref short failure
[h264 @ 0x5616b41972c0] mmco: unref short failure
 62%|██████▏   | 959/1556 [3:45:07<2:03:18, 12.39s/it][h264 @ 0x5616b7115bc0] mmco: unref short failure
[h264 @ 0x5616b7115bc0] mmco: unref short failure
[h264 @ 0x55e5313a70c0] mmco: unref short failure
[h264 @ 0x55e5313a70c0] mmco: unref short failure
[h264 @ 0x55c984725640] mmco: unref short failure
[h264 @ 0x55c984725640] mmco: unref short failure
 62%|██████▏   | 960/1556 [3:45:26<2:21:49, 14.28s/it][h264 @ 0x5616b2619a00] mmco: unref short failure
[h264 @ 0x5616b2619a00] mmco: unref short failure
 62%|██████▏   | 961/1556 [3:45:31<1:53:35, 11.45s/it][h264 @ 0x55c9739d8d40] mmco: unref short failure
[h264 @ 0x55c9739d8d40] mmco: unref short failure
 62%|██████▏   | 962/1556 [3:45:36<1:35:28,  9.64s/it][h264 @ 0x55e521c12500] mmco: unref short failure
[h264 @ 0x55e521c12500] mmco: unref short failure
 62%|██████▏   | 963/1556 [3:45:41<1:21:39,  8.26s/it][h264 @ 0x55c976d18880] mmco: unref short failure
[h264 @ 0x55c988822e40] mmco: unref short failure
[h264 @ 0x55c988822e40] mmco: unref short failure
[h264 @ 0x55c988822e40] mmco: unref short failure
[h264 @ 0x55c988822e40] mmco: unref short failure
[h264 @ 0x55e5244f5e80] mmco: unref short failure
[h264 @ 0x55e5244f5e80] mmco: unref short failure
[h264 @ 0x55e5244f5e80] mmco: unref short failure
[h264 @ 0x55e5244f5e80] mmco: unref short failure
[h264 @ 0x55e5244f5e80] mmco: unref short failure
[h264 @ 0x5616b667aac0] mmco: unref short failure
[h264 @ 0x5616aa4b3740] mmco: unref short failure
 62%|██████▏   | 964/1556 [3:46:19<2:48:52, 17.12s/it] 62%|██████▏   | 965/1556 [3:46:25<2:16:39, 13.87s/it] 62%|██████▏   | 966/1556 [3:46:39<2:15:12, 13.75s/it][h264 @ 0x55e530712180] mmco: unref short failure
[h264 @ 0x55c971db7fc0] mmco: unref short failure
 62%|██████▏   | 967/1556 [3:46:53<2:18:05, 14.07s/it][h264 @ 0x5616ab504a40] mmco: unref short failure
[h264 @ 0x5616ab504a40] mmco: unref short failure
 62%|██████▏   | 968/1556 [3:47:03<2:05:51, 12.84s/it][h264 @ 0x55c971666180] mmco: unref short failure
 62%|██████▏   | 969/1556 [3:47:08<1:42:24, 10.47s/it][h264 @ 0x55c9389267c0] mmco: unref short failure
 62%|██████▏   | 970/1556 [3:47:14<1:27:10,  8.93s/it][h264 @ 0x55e5209adc40] mmco: unref short failure
[h264 @ 0x55e5209adc40] mmco: unref short failure
 62%|██████▏   | 971/1556 [3:47:19<1:16:49,  7.88s/it][h264 @ 0x5649e9518b40] mmco: unref short failure
[h264 @ 0x5649e9518b40] mmco: unref short failure
[h264 @ 0x55c97ed04cc0] mmco: unref short failure
[h264 @ 0x5649b9411cc0] mmco: unref short failure
[h264 @ 0x5649b9411cc0] mmco: unref short failure
 62%|██████▏   | 972/1556 [3:47:51<2:25:59, 15.00s/it] 63%|██████▎   | 973/1556 [3:47:59<2:07:09, 13.09s/it][h264 @ 0x5649de446180] mmco: unref short failure
[h264 @ 0x5649de446180] mmco: unref short failure
[h264 @ 0x55c938b87640] mmco: unref short failure
[h264 @ 0x5649df0f5bc0] mmco: unref short failure
[h264 @ 0x5649df0f5bc0] mmco: unref short failure
[h264 @ 0x5616ad409e40] mmco: unref short failure
[h264 @ 0x55c938326040] mmco: unref short failure
[h264 @ 0x55c938326040] mmco: unref short failure
[h264 @ 0x55c938326040] mmco: unref short failure
[h264 @ 0x55c938326040] mmco: unref short failure
[h264 @ 0x5616ac1d3bc0] mmco: unref short failure
[h264 @ 0x5616ac1d3bc0] mmco: unref short failure
[h264 @ 0x5649e617df40] mmco: unref short failure
[h264 @ 0x5649e617df40] mmco: unref short failure
[h264 @ 0x5616a879c200] mmco: unref short failure
[h264 @ 0x55e5343ec340] mmco: unref short failure
[h264 @ 0x5649f125d5c0] mmco: unref short failure
[h264 @ 0x5649f125d5c0] mmco: unref short failure
 63%|██████▎   | 974/1556 [3:48:17<2:21:08, 14.55s/it] 63%|██████▎   | 975/1556 [3:48:30<2:15:56, 14.04s/it][h264 @ 0x55c980702540] mmco: unref short failure
[h264 @ 0x5616a9f07640] mmco: unref short failure
 63%|██████▎   | 976/1556 [3:48:40<2:03:08, 12.74s/it][h264 @ 0x55e530711d00] mmco: unref short failure
[h264 @ 0x55e530711d00] mmco: unref short failure
[h264 @ 0x55e52653af00] mmco: unref short failure
 63%|██████▎   | 977/1556 [3:48:46<1:42:23, 10.61s/it][h264 @ 0x5649e6c12780] mmco: unref short failure
 63%|██████▎   | 978/1556 [3:48:51<1:27:41,  9.10s/it] 63%|██████▎   | 979/1556 [3:48:56<1:15:48,  7.88s/it][h264 @ 0x5649e1f84540] mmco: unref short failure
[h264 @ 0x5649e804d5c0] mmco: unref short failure
[h264 @ 0x5649e804d5c0] mmco: unref short failure
[h264 @ 0x5649e0bd6d00] mmco: unref short failure
[h264 @ 0x5649e0935200] mmco: unref short failure
[h264 @ 0x5616a8345b80] mmco: unref short failure
[h264 @ 0x5616a8345b80] mmco: unref short failure
[h264 @ 0x5649dbd592c0] mmco: unref short failure
[h264 @ 0x5616af7e8c40] mmco: unref short failure
[h264 @ 0x55c980218080] mmco: unref short failure
[h264 @ 0x5616aace3500] mmco: unref short failure
 63%|██████▎   | 980/1556 [3:49:27<2:21:42, 14.76s/it][h264 @ 0x55e536178f80] mmco: unref short failure
[h264 @ 0x55e536178f80] mmco: unref short failure
 63%|██████▎   | 981/1556 [3:49:33<1:55:06, 12.01s/it][h264 @ 0x55e51f6df600] mmco: unref short failure
[h264 @ 0x5616a8ab7e80] mmco: unref short failure
[h264 @ 0x5616a8ab7e80] mmco: unref short failure
 63%|██████▎   | 982/1556 [3:50:00<2:38:30, 16.57s/it][h264 @ 0x55c9725da880] mmco: unref short failure
[h264 @ 0x55c9747a9780] mmco: unref short failure
 63%|██████▎   | 983/1556 [3:50:05<2:06:08, 13.21s/it] 63%|██████▎   | 984/1556 [3:50:22<2:17:25, 14.42s/it] 63%|██████▎   | 985/1556 [3:50:28<1:52:01, 11.77s/it][h264 @ 0x5649e500d800] mmco: unref short failure
 63%|██████▎   | 986/1556 [3:50:33<1:33:22,  9.83s/it] 63%|██████▎   | 987/1556 [3:50:39<1:21:40,  8.61s/it][h264 @ 0x55e520619500] mmco: unref short failure
[h264 @ 0x55e5297a0b80] mmco: unref short failure
[h264 @ 0x55e5297a0b80] mmco: unref short failure
 63%|██████▎   | 988/1556 [3:51:10<2:23:56, 15.21s/it] 64%|██████▎   | 989/1556 [3:51:15<1:56:22, 12.31s/it][h264 @ 0x55c9739d9600] mmco: unref short failure
[h264 @ 0x5616b2242f00] mmco: unref short failure
[h264 @ 0x5616b2242f00] mmco: unref short failure
 64%|██████▎   | 990/1556 [3:51:37<2:23:04, 15.17s/it][h264 @ 0x55c972d4dd80] mmco: unref short failure
[h264 @ 0x55c972d4dd80] mmco: unref short failure
[h264 @ 0x5649e6ab8500] mmco: unref short failure
[h264 @ 0x561671635580] mmco: unref short failure
 64%|██████▎   | 991/1556 [3:51:43<1:56:15, 12.35s/it][h264 @ 0x5649dac4dd00] mmco: unref short failure
[h264 @ 0x55e5208d2380] mmco: unref short failure
[h264 @ 0x55e5208d2380] mmco: unref short failure
[h264 @ 0x5616bcefee40] mmco: unref short failure
[h264 @ 0x5616bcefee40] mmco: unref short failure
 64%|██████▍   | 992/1556 [3:52:00<2:09:27, 13.77s/it][h264 @ 0x5616a9f07640] mmco: unref short failure
 64%|██████▍   | 993/1556 [3:52:06<1:47:09, 11.42s/it] 64%|██████▍   | 994/1556 [3:52:11<1:29:48,  9.59s/it] 64%|██████▍   | 995/1556 [3:52:17<1:18:11,  8.36s/it][h264 @ 0x55e522a15700] mmco: unref short failure
[h264 @ 0x55e522a15700] mmco: unref short failure
[h264 @ 0x55e522a15700] mmco: unref short failure
[h264 @ 0x5616a9f06fc0] mmco: unref short failure
[h264 @ 0x5616a9f06fc0] mmco: unref short failure
[h264 @ 0x5616bd733cc0] mmco: unref short failure
not have audios 7wavFXW3AFw.7
[h264 @ 0x5616b2483040] mmco: unref short failure
[h264 @ 0x55c970282e40] mmco: unref short failure
[h264 @ 0x5649e804dc40] mmco: unref short failure
[h264 @ 0x5649e804dc40] mmco: unref short failure
[h264 @ 0x55e4f9997cc0] mmco: unref short failure
[h264 @ 0x55c979ed2fc0] mmco: unref short failure
 64%|██████▍   | 996/1556 [3:52:46<2:15:57, 14.57s/it][h264 @ 0x55c9386a02c0] mmco: unref short failure
 64%|██████▍   | 997/1556 [3:52:51<1:49:09, 11.72s/it][h264 @ 0x5649e29faf80] mmco: unref short failure
[h264 @ 0x5649e29faf80] mmco: unref short failure
[h264 @ 0x55e51f600600] mmco: unref short failure
[h264 @ 0x55c9855b6b80] mmco: unref short failure
[h264 @ 0x55c978385c40] mmco: unref short failure
[h264 @ 0x55c978385c40] mmco: unref short failure
 64%|██████▍   | 998/1556 [3:53:14<2:21:13, 15.19s/it][h264 @ 0x55c978575f40] mmco: unref short failure
[h264 @ 0x55c978575f40] mmco: unref short failure
[h264 @ 0x5649e29fb600] mmco: unref short failure
[h264 @ 0x55c9798c8f00] mmco: unref short failure
[h264 @ 0x55c9798c8f00] mmco: unref short failure
[h264 @ 0x55c9798c9180] mmco: unref short failure
[h264 @ 0x55c9798c9180] mmco: unref short failure
 64%|██████▍   | 999/1556 [3:53:29<2:21:08, 15.20s/it]09/06/2024 23:29:10 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.0142624378204346, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04773437976837158, 'loss_ret%tv%ta--finetune_area/loss_area': 2.622490882873535, 'loss_ret%tv%ta--finetune_area/total_loss': 5.684487819671631}
 64%|██████▍   | 1000/1556 [3:53:35<1:54:14, 12.33s/it] 64%|██████▍   | 1001/1556 [3:53:40<1:34:56, 10.26s/it][h264 @ 0x5649b902b780] mmco: unref short failure
[h264 @ 0x5649b902b780] mmco: unref short failure
 64%|██████▍   | 1002/1556 [3:53:46<1:21:21,  8.81s/it][h264 @ 0x5616bd89b380] mmco: unref short failure
 64%|██████▍   | 1003/1556 [3:53:51<1:11:56,  7.81s/it][h264 @ 0x55e5355130c0] mmco: unref short failure
[h264 @ 0x5616bc673700] mmco: unref short failure
[h264 @ 0x5616bc673700] mmco: unref short failure
[h264 @ 0x55e52277df40] mmco: unref short failure
[h264 @ 0x55c97aee8480] mmco: unref short failure
[h264 @ 0x5616bb30c280] mmco: unref short failure
[h264 @ 0x5616bb30c280] mmco: unref short failure
[h264 @ 0x55e4fa7f0340] mmco: unref short failure
[h264 @ 0x55e523910440] mmco: unref short failure
[h264 @ 0x55e523910440] mmco: unref short failure
 65%|██████▍   | 1004/1556 [3:54:23<2:17:47, 14.98s/it] 65%|██████▍   | 1005/1556 [3:54:29<1:53:00, 12.31s/it][h264 @ 0x55e53313fdc0] mmco: unref short failure
[h264 @ 0x55c975c63c40] mmco: unref short failure
[h264 @ 0x5649e665eac0] mmco: unref short failure
[h264 @ 0x55c97878b400] mmco: unref short failure
[h264 @ 0x55c97878b400] mmco: unref short failure
[h264 @ 0x5649e1b51f40] mmco: unref short failure
[h264 @ 0x5649e770d640] mmco: unref short failure
[h264 @ 0x55c937ce04c0] mmco: unref short failure
 65%|██████▍   | 1006/1556 [3:54:52<2:23:22, 15.64s/it][h264 @ 0x55c9386da380] mmco: unref short failure
[h264 @ 0x561670ea4880] mmco: unref short failure
[h264 @ 0x561670ea4880] mmco: unref short failure
[h264 @ 0x561670ea4880] mmco: unref short failure
[h264 @ 0x561670ea4880] mmco: unref short failure
[h264 @ 0x561670ea4880] mmco: unref short failure
[h264 @ 0x561670ea4880] mmco: unref short failure
[h264 @ 0x5616acce8e40] mmco: unref short failure
 65%|██████▍   | 1007/1556 [3:55:05<2:15:53, 14.85s/it][h264 @ 0x5616b977aa80] mmco: unref short failure
[h264 @ 0x55c97a95cf40] mmco: unref short failure
[h264 @ 0x55c97a95cf40] mmco: unref short failure
[h264 @ 0x55c97a95cf40] mmco: unref short failure
[h264 @ 0x55c97a95cf40] mmco: unref short failure
 65%|██████▍   | 1008/1556 [3:55:11<1:49:41, 12.01s/it][h264 @ 0x55e52b8855c0] mmco: unref short failure
[h264 @ 0x55e52b8855c0] mmco: unref short failure
 65%|██████▍   | 1009/1556 [3:55:18<1:36:13, 10.55s/it][h264 @ 0x55c9838e32c0] mmco: unref short failure
 65%|██████▍   | 1010/1556 [3:55:22<1:18:47,  8.66s/it][h264 @ 0x5616b3bc3580] mmco: unref short failure
[h264 @ 0x5616b3bc3580] mmco: unref short failure
[h264 @ 0x5649de92be00] mmco: unref short failure
[h264 @ 0x5649de92be00] mmco: unref short failure
[h264 @ 0x55e4f9a02140] mmco: unref short failure
[h264 @ 0x55e4f9a02140] mmco: unref short failure
 65%|██████▍   | 1011/1556 [3:55:28<1:11:34,  7.88s/it][h264 @ 0x5616bfadb840] mmco: unref short failure
[h264 @ 0x5616bfadb840] mmco: unref short failure
[h264 @ 0x55e52209ce40] mmco: unref short failure
[h264 @ 0x5649ee23a880] mmco: unref short failure
[h264 @ 0x5649ee23a880] mmco: unref short failure
[h264 @ 0x55e523e88200] mmco: unref short failure
[h264 @ 0x5616bc407240] mmco: unref short failure
[h264 @ 0x5616bc407240] mmco: unref short failure
 65%|██████▌   | 1012/1556 [3:56:01<2:18:27, 15.27s/it][h264 @ 0x55e4fa7cea80] mmco: unref short failure
 65%|██████▌   | 1013/1556 [3:56:10<2:02:06, 13.49s/it][h264 @ 0x5649ddd69e00] mmco: unref short failure
[h264 @ 0x5649ddd69e00] mmco: unref short failure
[h264 @ 0x5616b0fc7940] mmco: unref short failure
 65%|██████▌   | 1014/1556 [3:56:34<2:31:14, 16.74s/it] 65%|██████▌   | 1015/1556 [3:56:45<2:13:44, 14.83s/it] 65%|██████▌   | 1016/1556 [3:56:52<1:52:50, 12.54s/it] 65%|██████▌   | 1017/1556 [3:56:58<1:34:29, 10.52s/it][h264 @ 0x55c9775c8700] mmco: unref short failure
[h264 @ 0x5616ad0f4840] mmco: unref short failure
[h264 @ 0x55e520a59240] mmco: unref short failure
[h264 @ 0x55e520a59240] mmco: unref short failure
[h264 @ 0x5616adc5f500] mmco: unref short failure
[h264 @ 0x5616adc5f500] mmco: unref short failure
 65%|██████▌   | 1018/1556 [3:57:03<1:19:45,  8.90s/it][h264 @ 0x55c97a171940] mmco: unref short failure
[h264 @ 0x5616b8afbe40] mmco: unref short failure
[h264 @ 0x5616b8afbe40] mmco: unref short failure
 65%|██████▌   | 1019/1556 [3:57:09<1:11:32,  7.99s/it][h264 @ 0x55c97100d880] mmco: unref short failure
[h264 @ 0x55c9838e30c0] mmco: unref short failure
[h264 @ 0x55e52ee0ffc0] mmco: unref short failure
 66%|██████▌   | 1020/1556 [3:57:40<2:14:04, 15.01s/it] 66%|██████▌   | 1021/1556 [3:57:46<1:47:57, 12.11s/it][h264 @ 0x55e52cda6340] mmco: unref short failure
[h264 @ 0x5649dbfb6400] mmco: unref short failure
[h264 @ 0x5649dbfb6400] mmco: unref short failure
[h264 @ 0x5649dbb60c40] mmco: unref short failure
[h264 @ 0x55c9724950c0] mmco: unref short failure
 66%|██████▌   | 1022/1556 [3:58:12<2:25:53, 16.39s/it] 66%|██████▌   | 1023/1556 [3:58:22<2:09:36, 14.59s/it] 66%|██████▌   | 1024/1556 [3:58:28<1:45:43, 11.92s/it][h264 @ 0x5616ab6c1180] mmco: unref short failure
[h264 @ 0x55c973be0300] mmco: unref short failure
[h264 @ 0x55c973be0300] mmco: unref short failure
[h264 @ 0x55c973be0300] mmco: unref short failure
[h264 @ 0x55e530fee880] mmco: unref short failure
 66%|██████▌   | 1025/1556 [3:58:33<1:28:11,  9.97s/it] 66%|██████▌   | 1026/1556 [3:58:39<1:15:45,  8.58s/it] 66%|██████▌   | 1027/1556 [3:58:45<1:09:24,  7.87s/it][h264 @ 0x55e52dc99600] mmco: unref short failure
[h264 @ 0x55c9380fe980] mmco: unref short failure
[h264 @ 0x5616af2f1cc0] mmco: unref short failure
 66%|██████▌   | 1028/1556 [3:59:13<2:02:09, 13.88s/it][h264 @ 0x55c9707cd940] mmco: unref short failure
[h264 @ 0x55c9707cd940] mmco: unref short failure
[h264 @ 0x55e5349ab000] mmco: unref short failure
 66%|██████▌   | 1029/1556 [3:59:26<1:59:06, 13.56s/it][h264 @ 0x5649e2acfec0] mmco: unref short failure
[h264 @ 0x5649e2acfec0] mmco: unref short failure
[h264 @ 0x55c974debd00] mmco: unref short failure
[h264 @ 0x55c974debd00] mmco: unref short failure
[h264 @ 0x55c97f369e80] mmco: unref short failure
[h264 @ 0x55c97f369e80] mmco: unref short failure
[h264 @ 0x55c97f369e80] mmco: unref short failure
[h264 @ 0x55c97f369e80] mmco: unref short failure
[h264 @ 0x55c97f369e80] mmco: unref short failure
[h264 @ 0x55c97f369e80] mmco: unref short failure
 66%|██████▌   | 1030/1556 [3:59:57<2:45:16, 18.85s/it][h264 @ 0x5649e1cdd640] mmco: unref short failure
[h264 @ 0x5649e1cdd640] mmco: unref short failure
 66%|██████▋   | 1031/1556 [4:00:03<2:11:06, 14.98s/it] 66%|██████▋   | 1032/1556 [4:00:08<1:45:50, 12.12s/it][h264 @ 0x55c97e9b3cc0] mmco: unref short failure
[h264 @ 0x55c97e9b3cc0] mmco: unref short failure
 66%|██████▋   | 1033/1556 [4:00:14<1:28:37, 10.17s/it] 66%|██████▋   | 1034/1556 [4:00:19<1:14:27,  8.56s/it][h264 @ 0x55e52070d000] mmco: unref short failure
 67%|██████▋   | 1035/1556 [4:00:24<1:06:03,  7.61s/it][h264 @ 0x55e530667d40] mmco: unref short failure
[h264 @ 0x5616a93ecc40] mmco: unref short failure
[h264 @ 0x5616a93ecc40] mmco: unref short failure
[h264 @ 0x55c9727bda40] mmco: unref short failure
[h264 @ 0x55c9727bda40] mmco: unref short failure
[h264 @ 0x5616afca64c0] mmco: unref short failure
[h264 @ 0x55c97045d280] mmco: unref short failure
[h264 @ 0x55c97045d280] mmco: unref short failure
[h264 @ 0x561671295c80] mmco: unref short failure
[h264 @ 0x55e53624a300] mmco: unref short failure
[h264 @ 0x55e53624a300] mmco: unref short failure
[h264 @ 0x5616b799f4c0] mmco: unref short failure
 67%|██████▋   | 1036/1556 [4:00:54<2:02:44, 14.16s/it][h264 @ 0x55c980833b00] mmco: unref short failure
[h264 @ 0x55c980833b00] mmco: unref short failure
[h264 @ 0x55c972142a40] mmco: unref short failure
 67%|██████▋   | 1037/1556 [4:01:09<2:05:59, 14.57s/it][h264 @ 0x55e533146f80] mmco: unref short failure
[h264 @ 0x55e533146f80] mmco: unref short failure
[h264 @ 0x5616aae2b6c0] mmco: unref short failure
[h264 @ 0x55e51f7cc380] mmco: unref short failure
[h264 @ 0x55e5214adb40] mmco: unref short failure
[h264 @ 0x55c9758aa3c0] mmco: unref short failure
[h264 @ 0x55c9758aa3c0] mmco: unref short failure
[h264 @ 0x55c97d5e92c0] mmco: unref short failure
[h264 @ 0x55c97d5e92c0] mmco: unref short failure
[h264 @ 0x5616bc265b40] mmco: unref short failure
[h264 @ 0x5616bc265b40] mmco: unref short failure
[h264 @ 0x5616bc265b40] mmco: unref short failure
 67%|██████▋   | 1038/1556 [4:01:39<2:46:21, 19.27s/it][h264 @ 0x5616b21b0a40] mmco: unref short failure
[h264 @ 0x55e5209e25c0] mmco: unref short failure
 67%|██████▋   | 1039/1556 [4:01:44<2:09:05, 14.98s/it][h264 @ 0x55c96fffdf80] mmco: unref short failure
 67%|██████▋   | 1040/1556 [4:01:50<1:43:59, 12.09s/it] 67%|██████▋   | 1041/1556 [4:01:55<1:27:18, 10.17s/it][h264 @ 0x5649e8b7b4c0] mmco: unref short failure
[h264 @ 0x55e4fa7ce3c0] mmco: unref short failure
[h264 @ 0x55e4fa7ce3c0] mmco: unref short failure
 67%|██████▋   | 1042/1556 [4:02:01<1:15:14,  8.78s/it] 67%|██████▋   | 1043/1556 [4:02:06<1:05:51,  7.70s/it][h264 @ 0x5649f07c83c0] mmco: unref short failure
[h264 @ 0x5649f07c83c0] mmco: unref short failure
[h264 @ 0x561671383980] mmco: unref short failure
[h264 @ 0x5649ed319140] mmco: unref short failure
[h264 @ 0x5649ed319140] mmco: unref short failure
 67%|██████▋   | 1044/1556 [4:02:32<1:53:04, 13.25s/it][h264 @ 0x55c96fb49c00] mmco: unref short failure
[h264 @ 0x55c97aff2380] mmco: unref short failure
[h264 @ 0x5616bb985dc0] mmco: unref short failure
 67%|██████▋   | 1045/1556 [4:02:50<2:03:37, 14.52s/it][h264 @ 0x5616aabfa2c0] mmco: unref short failure
[h264 @ 0x5616aabfa2c0] mmco: unref short failure
[h264 @ 0x55c9387d1f00] mmco: unref short failure
[h264 @ 0x5616baef6b00] mmco: unref short failure
[h264 @ 0x5616baef6b00] mmco: unref short failure
[h264 @ 0x5649dc876680] mmco: unref short failure
[h264 @ 0x5649dc876680] mmco: unref short failure
 67%|██████▋   | 1046/1556 [4:03:19<2:41:34, 19.01s/it] 67%|██████▋   | 1047/1556 [4:03:24<2:05:59, 14.85s/it][h264 @ 0x5616ac134500] mmco: unref short failure
 67%|██████▋   | 1048/1556 [4:03:30<1:42:08, 12.06s/it] 67%|██████▋   | 1049/1556 [4:03:35<1:24:55, 10.05s/it]09/06/2024 23:39:16 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 2.9479622840881348, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.043555062264204025, 'loss_ret%tv%ta--finetune_area/loss_area': 2.3401412963867188, 'loss_ret%tv%ta--finetune_area/total_loss': 5.331658363342285}
[h264 @ 0x55e52180df00] mmco: unref short failure
[h264 @ 0x55e52180df00] mmco: unref short failure
[h264 @ 0x5616bb4e7d00] mmco: unref short failure
[h264 @ 0x5616bb4e7d00] mmco: unref short failure
 67%|██████▋   | 1050/1556 [4:03:41<1:13:55,  8.77s/it] 68%|██████▊   | 1051/1556 [4:03:47<1:05:32,  7.79s/it][h264 @ 0x55e52e6055c0] mmco: unref short failure
[h264 @ 0x55e52e6055c0] mmco: unref short failure
 68%|██████▊   | 1052/1556 [4:04:10<1:44:50, 12.48s/it] 68%|██████▊   | 1053/1556 [4:04:29<2:00:41, 14.40s/it][h264 @ 0x55c97b3cfa40] mmco: unref short failure
[h264 @ 0x55c97b3cfa40] mmco: unref short failure
[h264 @ 0x55c97b3cfa40] mmco: unref short failure
[h264 @ 0x55c97b3cfa40] mmco: unref short failure
[h264 @ 0x5616b5116ec0] mmco: unref short failure
[h264 @ 0x55c98250b200] mmco: unref short failure
[h264 @ 0x5649e1cd9100] mmco: unref short failure
[h264 @ 0x5649e1cd9100] mmco: unref short failure
[h264 @ 0x55c98250b200] mmco: unref short failure
[h264 @ 0x55c98250b200] mmco: unref short failure
 68%|██████▊   | 1054/1556 [4:04:59<2:39:39, 19.08s/it][h264 @ 0x55c98250b200] mmco: unref short failure
[h264 @ 0x55c98250b200] mmco: unref short failure
 68%|██████▊   | 1055/1556 [4:05:05<2:05:55, 15.08s/it][h264 @ 0x55e52595ca00] mmco: unref short failure
[h264 @ 0x55e52595ca00] mmco: unref short failure
 68%|██████▊   | 1056/1556 [4:05:10<1:40:16, 12.03s/it][h264 @ 0x55e52f665bc0] mmco: unref short failure
[h264 @ 0x55e52f665bc0] mmco: unref short failure
[h264 @ 0x55c97204c840] mmco: unref short failure
[h264 @ 0x55c97204c840] mmco: unref short failure
 68%|██████▊   | 1057/1556 [4:05:15<1:23:22, 10.03s/it] 68%|██████▊   | 1058/1556 [4:05:21<1:12:44,  8.76s/it][h264 @ 0x55c97698fe40] mmco: unref short failure
[h264 @ 0x55e51fe47080] mmco: unref short failure
[h264 @ 0x55e51fe47080] mmco: unref short failure
[h264 @ 0x55e51fe47080] mmco: unref short failure
[h264 @ 0x55e51fe47080] mmco: unref short failure
[h264 @ 0x55e51fe47080] mmco: unref short failure
[h264 @ 0x55e51fe47080] mmco: unref short failure
[h264 @ 0x55e51fe47080] mmco: unref short failure
[h264 @ 0x55e51fe47080] mmco: unref short failure
 68%|██████▊   | 1059/1556 [4:05:26<1:04:41,  7.81s/it][h264 @ 0x5616b51f00c0] mmco: unref short failure
 68%|██████▊   | 1060/1556 [4:05:48<1:38:24, 11.90s/it][h264 @ 0x55e52fc87dc0] mmco: unref short failure
[h264 @ 0x55c96fe23900] mmco: unref short failure
 68%|██████▊   | 1061/1556 [4:06:10<2:04:49, 15.13s/it][h264 @ 0x5649eb726500] mmco: unref short failure
[h264 @ 0x5649eb744f40] mmco: unref short failure
[h264 @ 0x5649eb744f40] mmco: unref short failure
[h264 @ 0x55e52ef12800] mmco: unref short failure
[h264 @ 0x55c98455bc80] mmco: unref short failure
[h264 @ 0x55c98455bc80] mmco: unref short failure
 68%|██████▊   | 1062/1556 [4:06:39<2:37:25, 19.12s/it] 68%|██████▊   | 1063/1556 [4:06:44<2:03:35, 15.04s/it] 68%|██████▊   | 1064/1556 [4:06:49<1:38:40, 12.03s/it][h264 @ 0x561671b65500] mmco: unref short failure
 68%|██████▊   | 1065/1556 [4:06:55<1:21:45,  9.99s/it] 69%|██████▊   | 1066/1556 [4:07:00<1:10:53,  8.68s/it] 69%|██████▊   | 1067/1556 [4:07:05<1:02:06,  7.62s/it] 69%|██████▊   | 1068/1556 [4:07:27<1:36:38, 11.88s/it][h264 @ 0x55c977a4b600] mmco: unref short failure
[h264 @ 0x55c977a4b600] mmco: unref short failure
[h264 @ 0x5649dac4e100] mmco: unref short failure
[h264 @ 0x5649dac4e100] mmco: unref short failure
[h264 @ 0x5616ba389480] mmco: unref short failure
 69%|██████▊   | 1069/1556 [4:07:54<2:11:52, 16.25s/it][h264 @ 0x55e521657300] mmco: unref short failure
 69%|██████▉   | 1070/1556 [4:08:15<2:23:22, 17.70s/it] 69%|██████▉   | 1071/1556 [4:08:24<2:03:00, 15.22s/it][h264 @ 0x55c971d2b440] mmco: unref short failure
[h264 @ 0x55c971d2b440] mmco: unref short failure
 69%|██████▉   | 1072/1556 [4:08:29<1:37:37, 12.10s/it][h264 @ 0x5616bd77d600] mmco: unref short failure
[h264 @ 0x5616bd77d600] mmco: unref short failure
[h264 @ 0x55e5209adec0] mmco: unref short failure
[h264 @ 0x55e5209adec0] mmco: unref short failure
 69%|██████▉   | 1073/1556 [4:08:35<1:21:45, 10.16s/it] 69%|██████▉   | 1074/1556 [4:08:40<1:10:52,  8.82s/it] 69%|██████▉   | 1075/1556 [4:08:46<1:02:43,  7.82s/it][h264 @ 0x561670ab81c0] mmco: unref short failure
[h264 @ 0x5616b51efe40] mmco: unref short failure
[h264 @ 0x5616b51efe40] mmco: unref short failure
[h264 @ 0x55e525cf2d40] mmco: unref short failure
 69%|██████▉   | 1076/1556 [4:09:05<1:30:42, 11.34s/it][h264 @ 0x55e521952900] mmco: unref short failure
[h264 @ 0x55e521952900] mmco: unref short failure
[h264 @ 0x55e528cf9300] mmco: unref short failure
[h264 @ 0x55e4fa1ed080] mmco: unref short failure
[h264 @ 0x55c97d056780] mmco: unref short failure
[h264 @ 0x5616be2b7500] mmco: unref short failure
[h264 @ 0x5616be2b7500] mmco: unref short failure
 69%|██████▉   | 1077/1556 [4:09:37<2:19:35, 17.48s/it][h264 @ 0x55c96f8b7640] mmco: unref short failure
[h264 @ 0x55c96f8b7640] mmco: unref short failure
 69%|██████▉   | 1078/1556 [4:09:54<2:16:47, 17.17s/it][h264 @ 0x5649db0b9240] mmco: unref short failure
[h264 @ 0x5649edd78d40] mmco: unref short failure
[h264 @ 0x5649edd78d40] mmco: unref short failure
 69%|██████▉   | 1079/1556 [4:10:03<1:57:51, 14.83s/it][h264 @ 0x55c980412640] mmco: unref short failure
 69%|██████▉   | 1080/1556 [4:10:08<1:33:24, 11.77s/it][h264 @ 0x5649dc00bf00] mmco: unref short failure
 69%|██████▉   | 1081/1556 [4:10:12<1:16:14,  9.63s/it][h264 @ 0x5649ed0b2940] mmco: unref short failure
[h264 @ 0x5649ed0b2940] mmco: unref short failure
[h264 @ 0x5616b87df1c0] mmco: unref short failure
 70%|██████▉   | 1082/1556 [4:10:18<1:06:51,  8.46s/it][h264 @ 0x55c97d9adb40] mmco: unref short failure
[h264 @ 0x55c97d9adb40] mmco: unref short failure
[h264 @ 0x5616bc8d5d40] mmco: unref short failure
 70%|██████▉   | 1083/1556 [4:10:23<59:12,  7.51s/it]  [h264 @ 0x55c975591700] mmco: unref short failure
[h264 @ 0x55c9840b4b40] mmco: unref short failure
[h264 @ 0x55c9840b4b40] mmco: unref short failure
[h264 @ 0x5616b2473d80] mmco: unref short failure
[h264 @ 0x55c970390f00] mmco: unref short failure
[h264 @ 0x55c9702b18c0] mmco: unref short failure
[h264 @ 0x5649e1ce5f80] mmco: unref short failure
[h264 @ 0x55c96fc40300] mmco: unref short failure
[h264 @ 0x55c96fc40300] mmco: unref short failure
[h264 @ 0x5649dcb2d400] mmco: unref short failure
[h264 @ 0x5649dcb2d400] mmco: unref short failure
[h264 @ 0x55e52d1342c0] mmco: unref short failure
[h264 @ 0x55e52d1342c0] mmco: unref short failure
 70%|██████▉   | 1084/1556 [4:10:51<1:46:07, 13.49s/it][h264 @ 0x5616ab0cf640] mmco: unref short failure
[h264 @ 0x5616bc229140] mmco: unref short failure
[h264 @ 0x5616bc229140] mmco: unref short failure
[h264 @ 0x55e52e147280] mmco: unref short failure
[h264 @ 0x55e52e147280] mmco: unref short failure
[h264 @ 0x55e52e147280] mmco: unref short failure
[h264 @ 0x55e52e147280] mmco: unref short failure
 70%|██████▉   | 1085/1556 [4:11:18<2:18:47, 17.68s/it][h264 @ 0x55e530c19dc0] mmco: unref short failure
[h264 @ 0x55e530c19dc0] mmco: unref short failure
[h264 @ 0x55e530c19dc0] mmco: unref short failure
[h264 @ 0x55e530c19dc0] mmco: unref short failure
 70%|██████▉   | 1086/1556 [4:11:39<2:26:13, 18.67s/it][h264 @ 0x5616ac993140] mmco: unref short failure
[h264 @ 0x5616ac993140] mmco: unref short failure
 70%|██████▉   | 1087/1556 [4:11:45<1:56:05, 14.85s/it][h264 @ 0x55c96fbf72c0] mmco: unref short failure
 70%|██████▉   | 1088/1556 [4:11:50<1:33:42, 12.01s/it][h264 @ 0x5649e58a2900] mmco: unref short failure
[h264 @ 0x5649e58a2900] mmco: unref short failure
[h264 @ 0x55c97c3a2980] mmco: unref short failure
[h264 @ 0x55c97c3a2980] mmco: unref short failure
[h264 @ 0x55c97c3a2980] mmco: unref short failure
[h264 @ 0x55c97c3a2980] mmco: unref short failure
 70%|██████▉   | 1089/1556 [4:11:55<1:17:02,  9.90s/it][h264 @ 0x5616af6acf40] mmco: unref short failure
[h264 @ 0x5616af6acf40] mmco: unref short failure
 70%|███████   | 1090/1556 [4:12:01<1:05:37,  8.45s/it] 70%|███████   | 1091/1556 [4:12:06<58:52,  7.60s/it]  [h264 @ 0x55e52abc3d80] mmco: unref short failure
[h264 @ 0x55e52cc9b5c0] mmco: unref short failure
[h264 @ 0x55e52cc9b5c0] mmco: unref short failure
[h264 @ 0x5649e7c11ec0] mmco: unref short failure
[h264 @ 0x5649dbdd7b80] mmco: unref short failure
[h264 @ 0x5649dbdd7b80] mmco: unref short failure
[h264 @ 0x5616ac015fc0] mmco: unref short failure
[h264 @ 0x5616ac015fc0] mmco: unref short failure
[h264 @ 0x5649e88fd640] mmco: unref short failure
[h264 @ 0x5649e88fd640] mmco: unref short failure
 70%|███████   | 1092/1556 [4:12:31<1:37:45, 12.64s/it][h264 @ 0x55e52f9b5740] mmco: unref short failure
[h264 @ 0x55e52f9b5740] mmco: unref short failure
[h264 @ 0x55c9850d2c40] mmco: unref short failure
[h264 @ 0x55c97fe70540] mmco: unref short failure
[h264 @ 0x5616b68c9280] mmco: unref short failure
[h264 @ 0x5616ad61d7c0] mmco: unref short failure
[h264 @ 0x5616ad61d7c0] mmco: unref short failure
[h264 @ 0x56167099ee80] mmco: unref short failure
 70%|███████   | 1093/1556 [4:12:55<2:05:43, 16.29s/it][h264 @ 0x5616b13701c0] mmco: unref short failure
[h264 @ 0x55e523a7b480] mmco: unref short failure
[h264 @ 0x5649e138c540] mmco: unref short failure
[h264 @ 0x5649e138c540] mmco: unref short failure
 70%|███████   | 1094/1556 [4:13:14<2:10:42, 16.98s/it][h264 @ 0x5649e267ba80] mmco: unref short failure
 70%|███████   | 1095/1556 [4:13:24<1:55:17, 15.01s/it] 70%|███████   | 1096/1556 [4:13:30<1:32:52, 12.11s/it][h264 @ 0x5616bfc5efc0] mmco: unref short failure
[h264 @ 0x5616bfc5efc0] mmco: unref short failure
 71%|███████   | 1097/1556 [4:13:36<1:18:38, 10.28s/it] 71%|███████   | 1098/1556 [4:13:41<1:06:25,  8.70s/it][h264 @ 0x5616bcf67180] mmco: unref short failure
[h264 @ 0x5616bcf67180] mmco: unref short failure
 71%|███████   | 1099/1556 [4:13:46<58:22,  7.66s/it]  [h264 @ 0x5649b8ec3e40] mmco: unref short failure
[h264 @ 0x5649b8ec3e40] mmco: unref short failure
09/06/2024 23:49:49 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 2.878514289855957, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04391063377261162, 'loss_ret%tv%ta--finetune_area/loss_area': 2.251223087310791, 'loss_ret%tv%ta--finetune_area/total_loss': 5.173647880554199}
[h264 @ 0x5616bc0d3200] mmco: unref short failure
 71%|███████   | 1100/1556 [4:14:13<1:42:15, 13.45s/it][h264 @ 0x5649e3967b80] mmco: unref short failure
[h264 @ 0x5649e3967b80] mmco: unref short failure
[h264 @ 0x5616aba2d940] mmco: unref short failure
 71%|███████   | 1101/1556 [4:14:31<1:52:23, 14.82s/it][h264 @ 0x55c9844bc5c0] mmco: unref short failure
[h264 @ 0x55c9844bc5c0] mmco: unref short failure
[h264 @ 0x55c983edeb40] mmco: unref short failure
 71%|███████   | 1102/1556 [4:14:50<2:01:38, 16.08s/it][h264 @ 0x5649e8b001c0] mmco: unref short failure
[h264 @ 0x5649e8b001c0] mmco: unref short failure
[h264 @ 0x55c987388900] mmco: unref short failure
[h264 @ 0x55c987388900] mmco: unref short failure
 71%|███████   | 1103/1556 [4:15:04<1:56:03, 15.37s/it][h264 @ 0x55c938548780] mmco: unref short failure
 71%|███████   | 1104/1556 [4:15:09<1:33:21, 12.39s/it] 71%|███████   | 1105/1556 [4:15:15<1:19:11, 10.54s/it][h264 @ 0x55c97677e780] mmco: unref short failure
[h264 @ 0x55c97677e780] mmco: unref short failure
[h264 @ 0x55e51fe05ec0] mmco: unref short failure
 71%|███████   | 1106/1556 [4:15:22<1:11:11,  9.49s/it] 71%|███████   | 1107/1556 [4:15:28<1:03:27,  8.48s/it][h264 @ 0x5616ab73f0c0] mmco: unref short failure
[h264 @ 0x55c9801a84c0] mmco: unref short failure
[h264 @ 0x55c9801a84c0] mmco: unref short failure
[h264 @ 0x55e52f6bbf40] mmco: unref short failure
[h264 @ 0x55c981d831c0] mmco: unref short failure
[h264 @ 0x55c981d831c0] mmco: unref short failure
[h264 @ 0x5649e0b24a80] mmco: unref short failure
[h264 @ 0x5649e20b5780] mmco: unref short failure
[h264 @ 0x5649e20b5780] mmco: unref short failure
 71%|███████   | 1108/1556 [4:15:49<1:30:12, 12.08s/it][h264 @ 0x55e4f9c4a200] mmco: unref short failure
[h264 @ 0x55e5237e90c0] mmco: unref short failure
[h264 @ 0x55e5237e90c0] mmco: unref short failure
[h264 @ 0x55e520b34ec0] mmco: unref short failure
[h264 @ 0x55e520b34ec0] mmco: unref short failure
[h264 @ 0x55e52417ad80] mmco: unref short failure
 71%|███████▏  | 1109/1556 [4:16:12<1:54:43, 15.40s/it][h264 @ 0x5649eb4a3e80] mmco: unref short failure
[h264 @ 0x55c97c6cbb00] mmco: unref short failure
[h264 @ 0x55c97c069080] mmco: unref short failure
 71%|███████▏  | 1110/1556 [4:16:24<1:47:26, 14.45s/it][h264 @ 0x55c974150940] mmco: unref short failure
[h264 @ 0x55c9805407c0] mmco: unref short failure
[h264 @ 0x55c9805407c0] mmco: unref short failure
[h264 @ 0x5616be5c9c00] mmco: unref short failure
[h264 @ 0x55e531322580] mmco: unref short failure
[h264 @ 0x55e531322580] mmco: unref short failure
 71%|███████▏  | 1111/1556 [4:16:45<2:00:59, 16.31s/it] 71%|███████▏  | 1112/1556 [4:16:51<1:37:07, 13.13s/it][h264 @ 0x55e525dec7c0] mmco: unref short failure
[h264 @ 0x55c938e3d040] mmco: unref short failure
[h264 @ 0x55c938e3d040] mmco: unref short failure
 72%|███████▏  | 1113/1556 [4:16:58<1:24:04, 11.39s/it] 72%|███████▏  | 1114/1556 [4:17:04<1:11:19,  9.68s/it][h264 @ 0x55e532b23d40] mmco: unref short failure
[h264 @ 0x55e532b23d40] mmco: unref short failure
[h264 @ 0x55c97f854b00] mmco: unref short failure
[h264 @ 0x55c97f854b00] mmco: unref short failure
 72%|███████▏  | 1115/1556 [4:17:10<1:03:30,  8.64s/it][h264 @ 0x5649dea483c0] mmco: unref short failure
[h264 @ 0x55c9780b0480] mmco: unref short failure
[h264 @ 0x5616b70e6b80] mmco: unref short failure
[h264 @ 0x5616b70e6b80] mmco: unref short failure
[h264 @ 0x5616c008cdc0] mmco: unref short failure
[h264 @ 0x5616c008cdc0] mmco: unref short failure
[h264 @ 0x5616c008cdc0] mmco: unref short failure
[h264 @ 0x5616b60678c0] mmco: unref short failure
 72%|███████▏  | 1116/1556 [4:17:37<1:44:12, 14.21s/it][h264 @ 0x55c971443340] mmco: unref short failure
[h264 @ 0x55e521dbd680] mmco: unref short failure
[h264 @ 0x5616bd82a380] mmco: unref short failure
 72%|███████▏  | 1117/1556 [4:17:51<1:43:13, 14.11s/it][h264 @ 0x55e4fab912c0] mmco: unref short failure
[h264 @ 0x5616af50ed40] mmco: unref short failure
[h264 @ 0x55e522a0f300] mmco: unref short failure
[h264 @ 0x55e522a0f300] mmco: unref short failure
[h264 @ 0x55e522673f00] mmco: unref short failure
[h264 @ 0x55e522673f00] mmco: unref short failure
[h264 @ 0x5616aa51e000] mmco: unref short failure
[h264 @ 0x55c985b66a00] mmco: unref short failure
[h264 @ 0x55c985b66a00] mmco: unref short failure
[h264 @ 0x5616b6025640] mmco: unref short failure
[h264 @ 0x5616b6025640] mmco: unref short failure
 72%|███████▏  | 1118/1556 [4:18:06<1:45:35, 14.46s/it][h264 @ 0x5649dc6400c0] mmco: unref short failure
[h264 @ 0x5649dc6400c0] mmco: unref short failure
[h264 @ 0x55c97c994b00] mmco: unref short failure
[h264 @ 0x5649f2ca2ac0] mmco: unref short failure
[h264 @ 0x5649f2ca2ac0] mmco: unref short failure
 72%|███████▏  | 1119/1556 [4:18:19<1:41:57, 14.00s/it][h264 @ 0x5649e0fbadc0] mmco: unref short failure
[h264 @ 0x5649e0fbadc0] mmco: unref short failure
 72%|███████▏  | 1120/1556 [4:18:25<1:23:19, 11.47s/it][h264 @ 0x55c974af8680] mmco: unref short failure
[h264 @ 0x55c974af8680] mmco: unref short failure
 72%|███████▏  | 1121/1556 [4:18:45<1:41:07, 13.95s/it] 72%|███████▏  | 1122/1556 [4:18:50<1:21:52, 11.32s/it][h264 @ 0x5649f13af8c0] mmco: unref short failure
[h264 @ 0x5649f13af8c0] mmco: unref short failure
 72%|███████▏  | 1123/1556 [4:18:55<1:07:39,  9.37s/it][h264 @ 0x5649e9627540] mmco: unref short failure
[h264 @ 0x5616ab9f5a40] mmco: unref short failure
[h264 @ 0x5616ab9f5a40] mmco: unref short failure
[h264 @ 0x55c97bf672c0] mmco: unref short failure
[h264 @ 0x5649ec9cc840] mmco: unref short failure
[h264 @ 0x5649ec9cc840] mmco: unref short failure
 72%|███████▏  | 1124/1556 [4:19:21<1:44:00, 14.45s/it][h264 @ 0x55c9793bc980] mmco: unref short failure
[h264 @ 0x55c9793bc980] mmco: unref short failure
[h264 @ 0x5649ef0de380] mmco: unref short failure
 72%|███████▏  | 1125/1556 [4:19:32<1:37:26, 13.56s/it][h264 @ 0x55e523b23b40] mmco: unref short failure
[h264 @ 0x55e523b23b40] mmco: unref short failure
[h264 @ 0x55e523b23b40] mmco: unref short failure
[h264 @ 0x55e523b23b40] mmco: unref short failure
[h264 @ 0x55c972684800] mmco: unref short failure
[h264 @ 0x55c972684800] mmco: unref short failure
 72%|███████▏  | 1126/1556 [4:19:49<1:44:02, 14.52s/it][h264 @ 0x5616ac2db200] mmco: unref short failure
[h264 @ 0x5616ac2db200] mmco: unref short failure
[h264 @ 0x55e52603ab40] mmco: unref short failure
[h264 @ 0x55e52603ab40] mmco: unref short failure
[h264 @ 0x5649eccad280] mmco: unref short failure
[h264 @ 0x5649eccad280] mmco: unref short failure
 72%|███████▏  | 1127/1556 [4:20:02<1:39:47, 13.96s/it][h264 @ 0x5616b0dbf4c0] mmco: unref short failure
[h264 @ 0x5616b0dbf4c0] mmco: unref short failure
 72%|███████▏  | 1128/1556 [4:20:07<1:20:36, 11.30s/it][h264 @ 0x55c9735e6e00] mmco: unref short failure
[h264 @ 0x55c9735e6e00] mmco: unref short failure
[h264 @ 0x5649df68cc40] mmco: unref short failure
 73%|███████▎  | 1129/1556 [4:20:23<1:31:04, 12.80s/it][h264 @ 0x55c9758b24c0] mmco: unref short failure
[h264 @ 0x55c9758b24c0] mmco: unref short failure
 73%|███████▎  | 1130/1556 [4:20:28<1:14:53, 10.55s/it][h264 @ 0x5649de07a900] mmco: unref short failure
[h264 @ 0x5649de07a900] mmco: unref short failure
 73%|███████▎  | 1131/1556 [4:20:34<1:04:57,  9.17s/it] 73%|███████▎  | 1132/1556 [4:20:56<1:30:57, 12.87s/it][h264 @ 0x5616ba616e40] mmco: unref short failure
[h264 @ 0x5616ba616e40] mmco: unref short failure
[h264 @ 0x55c9830930c0] mmco: unref short failure
[h264 @ 0x55c9830930c0] mmco: unref short failure
[h264 @ 0x55c9830930c0] mmco: unref short failure
[h264 @ 0x55c9830930c0] mmco: unref short failure
[h264 @ 0x55c9830930c0] mmco: unref short failure
[h264 @ 0x55c9830930c0] mmco: unref short failure
[h264 @ 0x5649e53b4440] mmco: unref short failure
[h264 @ 0x5616b7ed42c0] mmco: unref short failure
[h264 @ 0x5616b7ed42c0] mmco: unref short failure
[h264 @ 0x55c9779e3240] mmco: unref short failure
[h264 @ 0x55c9779e3240] mmco: unref short failure
[h264 @ 0x55c9779e3240] mmco: unref short failure
[h264 @ 0x55c9779e3240] mmco: unref short failure
[h264 @ 0x55c9779e3240] mmco: unref short failure
[h264 @ 0x55c9793bc980] mmco: unref short failure
[h264 @ 0x55c9793bc980] mmco: unref short failure
 73%|███████▎  | 1133/1556 [4:21:13<1:38:49, 14.02s/it][h264 @ 0x5649ec923a40] mmco: unref short failure
[h264 @ 0x5649dd505040] mmco: unref short failure
[h264 @ 0x5649dd505040] mmco: unref short failure
[h264 @ 0x5649dd505040] mmco: unref short failure
[h264 @ 0x5649dd505040] mmco: unref short failure
[h264 @ 0x5616bfa9c380] mmco: unref short failure
[h264 @ 0x5616bfa9c380] mmco: unref short failure
[h264 @ 0x5616b49c0080] mmco: unref short failure
 73%|███████▎  | 1134/1556 [4:21:28<1:40:39, 14.31s/it] 73%|███████▎  | 1135/1556 [4:21:36<1:27:09, 12.42s/it] 73%|███████▎  | 1136/1556 [4:21:41<1:13:11, 10.46s/it][h264 @ 0x55c987388900] mmco: unref short failure
[h264 @ 0x55c987388900] mmco: unref short failure
[h264 @ 0x55e524d45a40] mmco: unref short failure
[h264 @ 0x55e522a90740] mmco: unref short failure
[h264 @ 0x55e522a90740] mmco: unref short failure
[h264 @ 0x5616ac2d6580] mmco: unref short failure
 73%|███████▎  | 1137/1556 [4:21:58<1:26:21, 12.37s/it][h264 @ 0x5616c008cdc0] mmco: unref short failure
[h264 @ 0x5616c008cdc0] mmco: unref short failure
[h264 @ 0x5616c008cdc0] mmco: unref short failure
[h264 @ 0x5616c008cdc0] mmco: unref short failure
[h264 @ 0x5616bcea0680] mmco: unref short failure
 73%|███████▎  | 1138/1556 [4:22:04<1:11:47, 10.31s/it] 73%|███████▎  | 1139/1556 [4:22:09<1:01:06,  8.79s/it][h264 @ 0x5616ae4cce40] mmco: unref short failure
[h264 @ 0x5616ae4cce40] mmco: unref short failure
[h264 @ 0x5649e4c4e3c0] mmco: unref short failure
[h264 @ 0x55e521848b80] mmco: unref short failure
[h264 @ 0x55e521848b80] mmco: unref short failure
 73%|███████▎  | 1140/1556 [4:22:37<1:39:58, 14.42s/it] 73%|███████▎  | 1141/1556 [4:22:51<1:40:40, 14.56s/it][h264 @ 0x55e52d08a580] mmco: unref short failure
 73%|███████▎  | 1142/1556 [4:23:09<1:46:05, 15.37s/it][h264 @ 0x5649eb426f80] mmco: unref short failure
 73%|███████▎  | 1143/1556 [4:23:18<1:33:49, 13.63s/it][h264 @ 0x55c9870fdc00] mmco: unref short failure
[h264 @ 0x55c9870fdc00] mmco: unref short failure
 74%|███████▎  | 1144/1556 [4:23:24<1:17:21, 11.27s/it][h264 @ 0x5616ab8632c0] mmco: unref short failure
[h264 @ 0x5616ab8632c0] mmco: unref short failure
[h264 @ 0x55c974e21b40] mmco: unref short failure
[h264 @ 0x55c974e21b40] mmco: unref short failure
 74%|███████▎  | 1145/1556 [4:23:39<1:24:50, 12.39s/it] 74%|███████▎  | 1146/1556 [4:23:46<1:12:36, 10.63s/it] 74%|███████▎  | 1147/1556 [4:23:51<1:02:01,  9.10s/it][h264 @ 0x5616b4c079c0] mmco: unref short failure
[h264 @ 0x5616b4c079c0] mmco: unref short failure
[h264 @ 0x55e52ed74c40] mmco: unref short failure
[h264 @ 0x55e52ed74c40] mmco: unref short failure
[h264 @ 0x5649dfa86980] mmco: unref short failure
[h264 @ 0x55e526b4b580] mmco: unref short failure
[h264 @ 0x55e526b4b580] mmco: unref short failure
 74%|███████▍  | 1148/1556 [4:24:22<1:46:38, 15.68s/it][h264 @ 0x5616ae4cce40] mmco: unref short failure
[h264 @ 0x5616ab13d580] mmco: unref short failure
[h264 @ 0x5616b51bff00] mmco: unref short failure
[h264 @ 0x5616b51bff00] mmco: unref short failure
[h264 @ 0x55e53539ccc0] mmco: unref short failure
 74%|███████▍  | 1149/1556 [4:24:38<1:46:11, 15.66s/it][h264 @ 0x55c97080d980] mmco: unref short failure
09/07/2024 00:00:26 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 2.8940205574035645, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.041465841233730316, 'loss_ret%tv%ta--finetune_area/loss_area': 2.239091396331787, 'loss_ret%tv%ta--finetune_area/total_loss': 5.174577713012695}
[h264 @ 0x55c971df8a80] mmco: unref short failure
[h264 @ 0x55c971df8a80] mmco: unref short failure
 74%|███████▍  | 1150/1556 [4:24:50<1:39:44, 14.74s/it] 74%|███████▍  | 1151/1556 [4:24:56<1:21:42, 12.11s/it] 74%|███████▍  | 1152/1556 [4:25:02<1:07:57, 10.09s/it][h264 @ 0x55e5331fc200] mmco: unref short failure
[h264 @ 0x55e5331fc200] mmco: unref short failure
[h264 @ 0x55c98052a8c0] mmco: unref short failure
[h264 @ 0x55c98052a8c0] mmco: unref short failure
[h264 @ 0x55c938456580] mmco: unref short failure
[h264 @ 0x55c938456580] mmco: unref short failure
[h264 @ 0x55c97be711c0] mmco: unref short failure
[h264 @ 0x55c97be711c0] mmco: unref short failure
[h264 @ 0x5649de9a6900] mmco: unref short failure
 74%|███████▍  | 1153/1556 [4:25:20<1:24:18, 12.55s/it] 74%|███████▍  | 1154/1556 [4:25:26<1:10:59, 10.59s/it] 74%|███████▍  | 1155/1556 [4:25:31<1:00:11,  9.01s/it][h264 @ 0x5649edc16a40] mmco: unref short failure
[h264 @ 0x55e521a7e100] mmco: unref short failure
[h264 @ 0x55e521a7e100] mmco: unref short failure
[h264 @ 0x5616b4c079c0] mmco: unref short failure
 74%|███████▍  | 1156/1556 [4:26:00<1:39:36, 14.94s/it] 74%|███████▍  | 1157/1556 [4:26:13<1:35:31, 14.36s/it][h264 @ 0x5616b6a0fb40] mmco: unref short failure
[h264 @ 0x5616b6a0fb40] mmco: unref short failure
 74%|███████▍  | 1158/1556 [4:26:18<1:16:03, 11.47s/it] 74%|███████▍  | 1159/1556 [4:26:21<59:20,  8.97s/it]   75%|███████▍  | 1160/1556 [4:26:24<47:48,  7.24s/it] 75%|███████▍  | 1161/1556 [4:26:31<46:16,  7.03s/it] 75%|███████▍  | 1162/1556 [4:26:34<37:52,  5.77s/it][h264 @ 0x5649ee817640] mmco: unref short failure
[h264 @ 0x5649ee817640] mmco: unref short failure
 75%|███████▍  | 1163/1556 [4:26:36<32:06,  4.90s/it] 75%|███████▍  | 1164/1556 [4:26:44<36:58,  5.66s/it] 75%|███████▍  | 1165/1556 [4:26:49<35:56,  5.52s/it] 75%|███████▍  | 1166/1556 [4:26:51<29:38,  4.56s/it]/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e4fa145c80] mmco: unref short failure
[h264 @ 0x55e4fa145c80] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55c9386d7880] mmco: unref short failure
[h264 @ 0x561670df9440] mmco: unref short failure
[h264 @ 0x561670df9440] mmco: unref short failure
[h264 @ 0x5649b8f32b80] mmco: unref short failure
[h264 @ 0x55e4fa174b00] mmco: unref short failure
[h264 @ 0x55e4fa174b00] mmco: unref short failure
[h264 @ 0x5649b906fb80] mmco: unref short failure
[h264 @ 0x55e4fa0f9ec0] mmco: unref short failure
[h264 @ 0x55c938a79540] mmco: unref short failure
[h264 @ 0x55c970623f00] mmco: unref short failure
[h264 @ 0x55c970623f00] mmco: unref short failure
[h264 @ 0x5649b8aea6c0] mmco: unref short failure
[h264 @ 0x561671080780] mmco: unref short failure
[h264 @ 0x55e4fac4df40] mmco: unref short failure
[h264 @ 0x5616aa768ec0] mmco: unref short failure
[h264 @ 0x55e51fed0600] mmco: unref short failure
[h264 @ 0x5649dd6d1a00] mmco: unref short failure
[h264 @ 0x5649dd6d1a00] mmco: unref short failure
not have audios ua_Kowav7hg.20
[h264 @ 0x55c972a7ffc0] mmco: unref short failure
[h264 @ 0x55c972a7ffc0] mmco: unref short failure
 75%|███████▌  | 1167/1556 [4:28:45<4:00:54, 37.16s/it] 75%|███████▌  | 1168/1556 [4:28:50<2:58:05, 27.54s/it] 75%|███████▌  | 1169/1556 [4:28:55<2:13:50, 20.75s/it][h264 @ 0x55c972a82a40] mmco: unref short failure
 75%|███████▌  | 1170/1556 [4:29:00<1:44:44, 16.28s/it][h264 @ 0x5649b9a46000] mmco: unref short failure
[h264 @ 0x5649b9a46000] mmco: unref short failure
[h264 @ 0x55e523b58080] mmco: unref short failure
[h264 @ 0x55e523b58080] mmco: unref short failure
[h264 @ 0x55e523b58080] mmco: unref short failure
[h264 @ 0x55e523b58080] mmco: unref short failure
 75%|███████▌  | 1171/1556 [4:29:06<1:23:28, 13.01s/it][h264 @ 0x5616a9abfa00] mmco: unref short failure
[h264 @ 0x5616a9abfa00] mmco: unref short failure
 75%|███████▌  | 1172/1556 [4:29:11<1:08:32, 10.71s/it] 75%|███████▌  | 1173/1556 [4:29:17<58:43,  9.20s/it]  [h264 @ 0x5616719b7d00] mmco: unref short failure
[h264 @ 0x5616713cb2c0] mmco: unref short failure
 75%|███████▌  | 1174/1556 [4:29:22<50:56,  8.00s/it][h264 @ 0x55c970127580] mmco: unref short failure
[h264 @ 0x55c970127580] mmco: unref short failure
[h264 @ 0x5616a9112f80] mmco: unref short failure
[h264 @ 0x5616a9112f80] mmco: unref short failure
[h264 @ 0x56167137ec40] mmco: unref short failure
[h264 @ 0x55e520826040] mmco: unref short failure
[h264 @ 0x55e5229e23c0] mmco: unref short failure
[h264 @ 0x5616aa949940] mmco: unref short failure
[h264 @ 0x5616aa949940] mmco: unref short failure
[h264 @ 0x55c974cf4940] mmco: unref short failure
[h264 @ 0x55c974cf4940] mmco: unref short failure
[h264 @ 0x5649dad20700] mmco: unref short failure
[h264 @ 0x5616713c6000] mmco: unref short failure
[h264 @ 0x5616713c6000] mmco: unref short failure
[h264 @ 0x5649df75b0c0] mmco: unref short failure
[h264 @ 0x5649df75b0c0] mmco: unref short failure
[h264 @ 0x5649b8d688c0] mmco: unref short failure
[h264 @ 0x5649b8d688c0] mmco: unref short failure
[h264 @ 0x55c974a52440] mmco: unref short failure
[h264 @ 0x5649dccab780] mmco: unref short failure
 76%|███████▌  | 1175/1556 [4:30:28<2:40:28, 25.27s/it] 76%|███████▌  | 1176/1556 [4:30:33<2:02:02, 19.27s/it] 76%|███████▌  | 1177/1556 [4:30:39<1:37:24, 15.42s/it] 76%|███████▌  | 1178/1556 [4:30:44<1:17:25, 12.29s/it] 76%|███████▌  | 1179/1556 [4:30:50<1:04:25, 10.25s/it] 76%|███████▌  | 1180/1556 [4:30:55<54:37,  8.72s/it]  [h264 @ 0x55c938e29c00] mmco: unref short failure
[h264 @ 0x55c938e29c00] mmco: unref short failure
 76%|███████▌  | 1181/1556 [4:31:00<48:26,  7.75s/it] 76%|███████▌  | 1182/1556 [4:31:06<45:07,  7.24s/it][h264 @ 0x5616af88ea00] mmco: unref short failure
[h264 @ 0x5616af88ea00] mmco: unref short failure
[h264 @ 0x5616abe1fcc0] mmco: unref short failure
[h264 @ 0x5649e021c100] mmco: unref short failure
[h264 @ 0x55c970083200] mmco: unref short failure
[h264 @ 0x561670cf5e80] mmco: unref short failure
[h264 @ 0x561670cf5e80] mmco: unref short failure
[h264 @ 0x5649df17df80] mmco: unref short failure
[h264 @ 0x5616aec59480] mmco: unref short failure
[h264 @ 0x5616aec59480] mmco: unref short failure
[h264 @ 0x55e526e2eec0] mmco: unref short failure
[h264 @ 0x55e526e2eec0] mmco: unref short failure
[h264 @ 0x5616a9620a00] mmco: unref short failure
[h264 @ 0x5616a9620a00] mmco: unref short failure
[h264 @ 0x5616b0567100] mmco: unref short failure
[h264 @ 0x55e4faa2b540] mmco: unref short failure
[h264 @ 0x55e4faa2b540] mmco: unref short failure
[h264 @ 0x55c974cea580] mmco: unref short failure
 76%|███████▌  | 1183/1556 [4:32:06<2:23:25, 23.07s/it] 76%|███████▌  | 1184/1556 [4:32:12<1:50:28, 17.82s/it] 76%|███████▌  | 1185/1556 [4:32:18<1:27:23, 14.13s/it][h264 @ 0x5649b92f1e00] mmco: unref short failure
[h264 @ 0x5649b92f1e00] mmco: unref short failure
[h264 @ 0x55c97329c0c0] mmco: unref short failure
 76%|███████▌  | 1186/1556 [4:32:23<1:11:36, 11.61s/it][h264 @ 0x55c938c8a7c0] mmco: unref short failure
[h264 @ 0x55c938c8a7c0] mmco: unref short failure
 76%|███████▋  | 1187/1556 [4:32:29<1:00:32,  9.84s/it] 76%|███████▋  | 1188/1556 [4:32:34<52:12,  8.51s/it]  [h264 @ 0x55e52437f4c0] mmco: unref short failure
[h264 @ 0x55e52437f4c0] mmco: unref short failure
[h264 @ 0x5616702f4080] mmco: unref short failure
 76%|███████▋  | 1189/1556 [4:32:40<46:53,  7.67s/it][h264 @ 0x5649e2ac7800] mmco: unref short failure
 76%|███████▋  | 1190/1556 [4:32:45<41:23,  6.79s/it][h264 @ 0x5616b300f6c0] mmco: unref short failure
[h264 @ 0x5616b300f6c0] mmco: unref short failure
[h264 @ 0x5649dba32580] mmco: unref short failure
[h264 @ 0x5649dba32580] mmco: unref short failure
[h264 @ 0x5616ab3573c0] mmco: unref short failure
[h264 @ 0x5616ab3573c0] mmco: unref short failure
[h264 @ 0x5649e02f0ec0] mmco: unref short failure
[h264 @ 0x5649e02f0ec0] mmco: unref short failure
[h264 @ 0x5649df041100] mmco: unref short failure
[h264 @ 0x5616a87e38c0] mmco: unref short failure
[h264 @ 0x55c976343680] mmco: unref short failure
[h264 @ 0x55c976343680] mmco: unref short failure
[h264 @ 0x55e5270f2440] mmco: unref short failure
[h264 @ 0x55e5270f2440] mmco: unref short failure
[h264 @ 0x5616ac53c880] mmco: unref short failure
[h264 @ 0x55c978fa90c0] mmco: unref short failure
[h264 @ 0x55c978fa90c0] mmco: unref short failure
 77%|███████▋  | 1191/1556 [4:33:45<2:19:16, 22.89s/it][h264 @ 0x55e4fa602c40] mmco: unref short failure
 77%|███████▋  | 1192/1556 [4:33:51<1:47:10, 17.67s/it][h264 @ 0x5649e40ae400] mmco: unref short failure
 77%|███████▋  | 1193/1556 [4:33:56<1:23:53, 13.87s/it] 77%|███████▋  | 1194/1556 [4:34:01<1:07:33, 11.20s/it][h264 @ 0x55e527794700] mmco: unref short failure
[h264 @ 0x55e5242580c0] mmco: unref short failure
[h264 @ 0x55e5242580c0] mmco: unref short failure
[h264 @ 0x5616711f2cc0] mmco: unref short failure
 77%|███████▋  | 1195/1556 [4:34:06<56:19,  9.36s/it]   77%|███████▋  | 1196/1556 [4:34:12<50:15,  8.38s/it] 77%|███████▋  | 1197/1556 [4:34:17<44:56,  7.51s/it] 77%|███████▋  | 1198/1556 [4:34:23<40:43,  6.82s/it][h264 @ 0x5649e0e5e240] mmco: unref short failure
[h264 @ 0x5649e0e5e240] mmco: unref short failure
[h264 @ 0x5649e0e5e240] mmco: unref short failure
[h264 @ 0x5649e0e5e240] mmco: unref short failure
[h264 @ 0x5649e0e5e240] mmco: unref short failure
[h264 @ 0x5649e0e5e240] mmco: unref short failure
[h264 @ 0x55e521ee3680] mmco: unref short failure
[h264 @ 0x55e521ee3680] mmco: unref short failure
[h264 @ 0x55e5244d5980] mmco: unref short failure
[h264 @ 0x55e5244d5980] mmco: unref short failure
[h264 @ 0x55c975bd9c00] mmco: unref short failure
[h264 @ 0x5616b2f31340] mmco: unref short failure
[h264 @ 0x5616b2f31340] mmco: unref short failure
[h264 @ 0x5649dfbbb880] mmco: unref short failure
[h264 @ 0x5649dfbbb880] mmco: unref short failure
[h264 @ 0x55c9788b5c80] mmco: unref short failure
[h264 @ 0x55c9788b5c80] mmco: unref short failure
[h264 @ 0x55c9764f42c0] mmco: unref short failure
[h264 @ 0x55c972016c00] mmco: unref short failure
[h264 @ 0x55c972016c00] mmco: unref short failure
[h264 @ 0x55e525dfcf80] mmco: unref short failure
[h264 @ 0x55e525dfcf80] mmco: unref short failure
[h264 @ 0x55e525dfcf80] mmco: unref short failure
[h264 @ 0x55e528381b80] mmco: unref short failure
[h264 @ 0x55e528381b80] mmco: unref short failure
 77%|███████▋  | 1199/1556 [4:35:24<2:17:38, 23.13s/it]09/07/2024 00:11:03 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/07/2024 00:11:03 - INFO - __main__ -   start running ret%tv validation...
[h264 @ 0x5649dc528140] mmco: unref short failure
[h264 @ 0x5649dc528140] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5649e26b8400] mmco: unref short failure
[h264 @ 0x5649e26b8400] mmco: unref short failure
[h264 @ 0x55e5235e8600] mmco: unref short failure
[h264 @ 0x55e5235e8600] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55c9743ff1c0] mmco: unref short failure
[h264 @ 0x55c9743ff1c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e4f9d003c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e524276040] mmco: unref short failure
[h264 @ 0x55e524276040] mmco: unref short failure
[h264 @ 0x55c974db7e40] mmco: unref short failure
[h264 @ 0x5616a90aeb40] mmco: unref short failure
[h264 @ 0x5616a90aeb40] mmco: unref short failure
[h264 @ 0x55e525537a00] mmco: unref short failure
[h264 @ 0x55c976297fc0] mmco: unref short failure
[h264 @ 0x55c976297fc0] mmco: unref short failure
[h264 @ 0x55c976297fc0] mmco: unref short failure
[h264 @ 0x55c976297fc0] mmco: unref short failure
[h264 @ 0x55c976297fc0] mmco: unref short failure
[h264 @ 0x55e4f9cad980] mmco: unref short failure
[h264 @ 0x55e4f9cad980] mmco: unref short failure
[h264 @ 0x55e527c761c0] mmco: unref short failure
[h264 @ 0x55e527c761c0] mmco: unref short failure
[h264 @ 0x55e5269229c0] mmco: unref short failure
[h264 @ 0x55e526b0e140] mmco: unref short failure
[h264 @ 0x55e526b0e140] mmco: unref short failure
[h264 @ 0x5649e50e5540] mmco: unref short failure
[h264 @ 0x5649e0e94a80] mmco: unref short failure
[h264 @ 0x5649e0e94a80] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:33,  2.35it/s][A[h264 @ 0x5616ac9c1a40] mmco: unref short failure

  1%|          | 2/221 [00:00<01:17,  2.84it/s][A
  1%|▏         | 3/221 [00:01<01:17,  2.81it/s][A
  2%|▏         | 4/221 [00:01<00:55,  3.90it/s][A
  3%|▎         | 7/221 [00:01<00:27,  7.84it/s][A
  4%|▍         | 9/221 [00:01<00:24,  8.62it/s][A
  5%|▍         | 11/221 [00:01<00:21,  9.60it/s][A
  6%|▌         | 13/221 [00:03<01:08,  3.05it/s][A
  6%|▋         | 14/221 [00:03<00:59,  3.49it/s][A
  7%|▋         | 15/221 [00:03<00:50,  4.06it/s][A
  7%|▋         | 16/221 [00:03<00:49,  4.11it/s][A
  8%|▊         | 17/221 [00:04<01:10,  2.90it/s][A
  8%|▊         | 18/221 [00:04<01:01,  3.31it/s][A
  9%|▊         | 19/221 [00:04<00:51,  3.94it/s][A
 10%|▉         | 21/221 [00:04<00:35,  5.64it/s][A
 10%|▉         | 22/221 [00:04<00:34,  5.80it/s][A[h264 @ 0x5649e5595640] mmco: unref short failure
[h264 @ 0x5649e5595640] mmco: unref short failure

 11%|█▏        | 25/221 [00:05<00:21,  8.99it/s][A
 12%|█▏        | 27/221 [00:05<00:21,  9.14it/s][A
 13%|█▎        | 29/221 [00:05<00:24,  7.83it/s][A
 14%|█▎        | 30/221 [00:05<00:27,  7.01it/s][A
 14%|█▍        | 31/221 [00:06<00:28,  6.58it/s][A
 15%|█▍        | 33/221 [00:06<00:25,  7.40it/s][A
 16%|█▌        | 35/221 [00:06<00:20,  8.86it/s][A
 16%|█▋        | 36/221 [00:06<00:25,  7.32it/s][A
 17%|█▋        | 37/221 [00:06<00:32,  5.72it/s][A
 17%|█▋        | 38/221 [00:07<00:55,  3.27it/s][A
 18%|█▊        | 40/221 [00:07<00:41,  4.31it/s][A
 19%|█▉        | 42/221 [00:08<00:57,  3.14it/s][A
 20%|█▉        | 44/221 [00:08<00:40,  4.35it/s][A[h264 @ 0x55c979764700] mmco: unref short failure
[h264 @ 0x55c979764700] mmco: unref short failure

 20%|██        | 45/221 [00:10<01:11,  2.45it/s][A
 21%|██        | 46/221 [00:10<01:02,  2.78it/s][A
 21%|██▏       | 47/221 [00:11<01:27,  1.99it/s][A
 22%|██▏       | 49/221 [00:11<01:01,  2.80it/s][A
 23%|██▎       | 50/221 [00:11<00:51,  3.33it/s][A
 23%|██▎       | 51/221 [00:11<00:42,  3.96it/s][A
 24%|██▍       | 53/221 [00:11<00:31,  5.37it/s][A
 24%|██▍       | 54/221 [00:12<01:03,  2.62it/s][A
 25%|██▍       | 55/221 [00:13<00:58,  2.84it/s][A
 26%|██▌       | 57/221 [00:13<00:40,  4.10it/s][A
 27%|██▋       | 59/221 [00:13<00:29,  5.56it/s][A
 27%|██▋       | 60/221 [00:15<01:21,  1.97it/s][A[h264 @ 0x55c97be31400] mmco: unref short failure

 28%|██▊       | 61/221 [00:15<01:06,  2.39it/s][A
 28%|██▊       | 62/221 [00:15<00:58,  2.71it/s][A
 29%|██▊       | 63/221 [00:15<00:49,  3.19it/s][A
 29%|██▉       | 64/221 [00:16<00:59,  2.63it/s][A
 30%|██▉       | 66/221 [00:17<01:12,  2.14it/s][A
 30%|███       | 67/221 [00:17<01:05,  2.35it/s][A
 31%|███       | 68/221 [00:18<00:55,  2.73it/s][A
 31%|███       | 69/221 [00:19<01:24,  1.80it/s][A
 32%|███▏      | 71/221 [00:19<01:00,  2.48it/s][A
 33%|███▎      | 72/221 [00:19<00:57,  2.59it/s][A
 33%|███▎      | 73/221 [00:20<01:01,  2.42it/s][A
 34%|███▍      | 75/221 [00:20<00:46,  3.13it/s][A
 35%|███▍      | 77/221 [00:21<00:47,  3.04it/s][A
 36%|███▌      | 79/221 [00:21<00:38,  3.69it/s][A
 37%|███▋      | 81/221 [00:22<00:36,  3.81it/s][A
 37%|███▋      | 82/221 [00:22<00:45,  3.08it/s][A
 38%|███▊      | 83/221 [00:23<00:42,  3.28it/s][A
 39%|███▉      | 86/221 [00:23<00:24,  5.59it/s][A
 39%|███▉      | 87/221 [00:23<00:36,  3.69it/s][A
 40%|███▉      | 88/221 [00:24<00:44,  2.97it/s][A
 40%|████      | 89/221 [00:24<00:43,  3.04it/s][A
 41%|████      | 90/221 [00:25<00:43,  3.01it/s][A
 41%|████      | 91/221 [00:25<00:35,  3.65it/s][A
 42%|████▏     | 92/221 [00:25<00:31,  4.13it/s][A
 42%|████▏     | 93/221 [00:25<00:31,  4.08it/s][A
 43%|████▎     | 94/221 [00:25<00:33,  3.84it/s][A
 43%|████▎     | 95/221 [00:26<00:27,  4.56it/s][A
 43%|████▎     | 96/221 [00:26<00:45,  2.75it/s][A
 44%|████▍     | 97/221 [00:26<00:36,  3.42it/s][A
 44%|████▍     | 98/221 [00:27<00:53,  2.30it/s][A
 45%|████▌     | 100/221 [00:27<00:32,  3.68it/s][A
 46%|████▌     | 102/221 [00:29<00:50,  2.34it/s][A
 47%|████▋     | 104/221 [00:29<00:35,  3.29it/s][A
 48%|████▊     | 105/221 [00:29<00:33,  3.45it/s][A
 48%|████▊     | 106/221 [00:30<00:46,  2.45it/s][A
 49%|████▉     | 108/221 [00:30<00:31,  3.54it/s][A
 49%|████▉     | 109/221 [00:30<00:28,  3.87it/s][A
 50%|█████     | 111/221 [00:30<00:22,  4.82it/s][A
 51%|█████     | 112/221 [00:31<00:21,  5.00it/s][A
 51%|█████     | 113/221 [00:31<00:30,  3.51it/s][A
 52%|█████▏    | 116/221 [00:32<00:29,  3.59it/s][A
 53%|█████▎    | 117/221 [00:32<00:32,  3.24it/s][A
 53%|█████▎    | 118/221 [00:33<00:27,  3.78it/s][A
 54%|█████▍    | 119/221 [00:33<00:23,  4.28it/s][A
 54%|█████▍    | 120/221 [00:33<00:21,  4.79it/s][A
 55%|█████▌    | 122/221 [00:33<00:15,  6.57it/s][A
 56%|█████▌    | 123/221 [00:33<00:15,  6.22it/s][A
 57%|█████▋    | 125/221 [00:34<00:21,  4.38it/s][A
 57%|█████▋    | 126/221 [00:34<00:25,  3.74it/s][A
 57%|█████▋    | 127/221 [00:36<00:54,  1.71it/s][A
 58%|█████▊    | 128/221 [00:36<00:47,  1.96it/s][A
 59%|█████▉    | 130/221 [00:36<00:29,  3.08it/s][A
 60%|█████▉    | 132/221 [00:38<00:49,  1.79it/s][A
 60%|██████    | 133/221 [00:38<00:44,  1.99it/s][A
 61%|██████    | 134/221 [00:41<01:35,  1.10s/it][A
 61%|██████    | 135/221 [00:42<01:25,  1.01it/s][A
 62%|██████▏   | 136/221 [00:42<01:10,  1.21it/s][A
 62%|██████▏   | 137/221 [00:43<01:01,  1.37it/s][A
 62%|██████▏   | 138/221 [00:44<00:59,  1.39it/s][A
 63%|██████▎   | 139/221 [00:44<00:56,  1.46it/s][A
 63%|██████▎   | 140/221 [00:45<00:55,  1.45it/s][A
 64%|██████▍   | 141/221 [00:46<00:56,  1.42it/s][A
 64%|██████▍   | 142/221 [00:46<00:50,  1.58it/s][A
 65%|██████▍   | 143/221 [00:47<00:56,  1.38it/s][A
 65%|██████▌   | 144/221 [00:47<00:41,  1.85it/s][A
 66%|██████▌   | 146/221 [00:47<00:24,  3.09it/s][A
 67%|██████▋   | 148/221 [00:48<00:16,  4.34it/s][A
 67%|██████▋   | 149/221 [00:48<00:16,  4.34it/s][A
 68%|██████▊   | 151/221 [00:48<00:16,  4.37it/s][A
 69%|██████▉   | 152/221 [00:49<00:17,  3.84it/s][A
 69%|██████▉   | 153/221 [00:49<00:16,  4.05it/s][A
 70%|██████▉   | 154/221 [00:49<00:15,  4.31it/s][A
 70%|███████   | 155/221 [00:49<00:14,  4.58it/s][A
 71%|███████   | 156/221 [00:49<00:12,  5.21it/s][A
 71%|███████   | 157/221 [00:50<00:24,  2.65it/s][A
 71%|███████▏  | 158/221 [00:50<00:21,  2.97it/s][A
 72%|███████▏  | 159/221 [00:51<00:19,  3.11it/s][A
 73%|███████▎  | 161/221 [00:51<00:12,  4.70it/s][A
 73%|███████▎  | 162/221 [00:51<00:11,  5.24it/s][A
 74%|███████▍  | 163/221 [00:51<00:11,  5.19it/s][A
 74%|███████▍  | 164/221 [00:52<00:16,  3.55it/s][A
 75%|███████▍  | 165/221 [00:52<00:18,  3.08it/s][A
 75%|███████▌  | 166/221 [00:52<00:18,  2.93it/s][A
 76%|███████▌  | 168/221 [00:55<00:35,  1.49it/s][A
 77%|███████▋  | 170/221 [00:55<00:24,  2.12it/s][A
 77%|███████▋  | 171/221 [00:56<00:25,  1.97it/s][A
 78%|███████▊  | 172/221 [00:56<00:20,  2.40it/s][A
 78%|███████▊  | 173/221 [00:56<00:19,  2.41it/s][A
 79%|███████▉  | 175/221 [00:56<00:13,  3.52it/s][A
 80%|███████▉  | 176/221 [00:57<00:11,  3.89it/s][A
 81%|████████  | 178/221 [00:57<00:08,  4.98it/s][A
 81%|████████  | 179/221 [00:58<00:14,  2.90it/s][A
 82%|████████▏ | 181/221 [00:58<00:09,  4.26it/s][A
 82%|████████▏ | 182/221 [00:58<00:09,  4.08it/s][A
 83%|████████▎ | 183/221 [00:58<00:08,  4.25it/s][A
 83%|████████▎ | 184/221 [00:59<00:11,  3.25it/s][A
 84%|████████▍ | 186/221 [00:59<00:10,  3.43it/s][A
 85%|████████▍ | 187/221 [00:59<00:09,  3.59it/s][A
 85%|████████▌ | 188/221 [01:00<00:07,  4.16it/s][A
 86%|████████▌ | 189/221 [01:00<00:07,  4.50it/s][A
 86%|████████▌ | 190/221 [01:00<00:06,  4.45it/s][A
 87%|████████▋ | 192/221 [01:00<00:05,  5.18it/s][A
 88%|████████▊ | 194/221 [01:01<00:06,  4.09it/s][A
 88%|████████▊ | 195/221 [01:01<00:05,  4.68it/s][A
 89%|████████▉ | 197/221 [01:01<00:04,  5.43it/s][A
 90%|█████████ | 199/221 [01:02<00:03,  6.53it/s][A
 90%|█████████ | 200/221 [01:02<00:03,  6.97it/s][A
 91%|█████████ | 201/221 [01:02<00:02,  7.12it/s][A
 92%|█████████▏| 203/221 [01:02<00:02,  7.92it/s][A
 92%|█████████▏| 204/221 [01:02<00:02,  7.46it/s][A
 93%|█████████▎| 206/221 [01:03<00:02,  6.45it/s][A
 94%|█████████▍| 208/221 [01:03<00:01,  7.37it/s][A
 95%|█████████▍| 209/221 [01:03<00:01,  6.50it/s][A
 95%|█████████▌| 211/221 [01:03<00:01,  5.92it/s][A
 96%|█████████▌| 212/221 [01:04<00:01,  5.10it/s][A
 97%|█████████▋| 214/221 [01:04<00:01,  3.55it/s][A
 97%|█████████▋| 215/221 [01:05<00:01,  3.72it/s][A
 98%|█████████▊| 216/221 [01:05<00:01,  4.05it/s][A
 98%|█████████▊| 217/221 [01:07<00:02,  1.60it/s][A
 99%|█████████▊| 218/221 [01:07<00:01,  1.94it/s][A
 99%|█████████▉| 219/221 [01:07<00:00,  2.46it/s][A
100%|█████████▉| 220/221 [01:08<00:00,  2.14it/s][A100%|██████████| 221/221 [01:08<00:00,  3.24it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.79it/s][A
  1%|          | 2/221 [00:00<00:57,  3.79it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.79it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.79it/s][A
  2%|▏         | 5/221 [00:01<00:56,  3.79it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.79it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.79it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.79it/s][A
  4%|▍         | 9/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.79it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.79it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.79it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.79it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.79it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:51,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.78it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.78it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.78it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.78it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.78it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.78it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.78it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.78it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.78it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.78it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.78it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.78it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.78it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.78it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.78it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.78it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.78it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.78it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 115/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.78it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.78it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.78it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.78it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.78it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.78it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.78it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.79it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.79it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.78it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.78it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.78it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.78it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.78it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.78it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.78it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.78it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 159/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.78it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.78it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.78it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.78it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.78it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.78it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.78it/s][A
 76%|███████▌  | 168/221 [00:44<00:14,  3.78it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.79it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.79it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.79it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.79it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.79it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.78it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.78it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.78it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.78it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.78it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.78it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.78it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.78it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [00:56<00:02,  3.78it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.78it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.78it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.78it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.78it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.78it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.78it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.78it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:32,  6.71it/s][A
  1%|          | 2/221 [00:00<00:41,  5.24it/s][A
  1%|▏         | 3/221 [00:00<00:43,  5.03it/s][A
  2%|▏         | 4/221 [00:00<00:36,  5.93it/s][A
  3%|▎         | 6/221 [00:00<00:26,  8.26it/s][A
  3%|▎         | 7/221 [00:01<00:30,  7.02it/s][A
  4%|▎         | 8/221 [00:01<00:30,  6.93it/s][A
  4%|▍         | 9/221 [00:01<00:30,  6.87it/s][A
  5%|▍         | 10/221 [00:01<00:47,  4.44it/s][A
  5%|▍         | 11/221 [00:01<00:41,  5.10it/s][A
  5%|▌         | 12/221 [00:02<00:40,  5.17it/s][A
  6%|▌         | 13/221 [00:02<00:51,  4.04it/s][A
  6%|▋         | 14/221 [00:02<00:42,  4.90it/s][A
  7%|▋         | 15/221 [00:02<00:44,  4.61it/s][A
  7%|▋         | 16/221 [00:03<00:51,  4.00it/s][A
  8%|▊         | 17/221 [00:03<01:14,  2.73it/s][A
  8%|▊         | 18/221 [00:03<01:01,  3.29it/s][A
  9%|▊         | 19/221 [00:04<00:51,  3.94it/s][A
  9%|▉         | 20/221 [00:04<00:42,  4.69it/s][A
 10%|▉         | 21/221 [00:04<00:37,  5.38it/s][A
 10%|▉         | 22/221 [00:04<00:36,  5.50it/s][A
 11%|█         | 24/221 [00:04<00:29,  6.70it/s][A
 11%|█▏        | 25/221 [00:04<00:29,  6.71it/s][A
 12%|█▏        | 26/221 [00:05<00:33,  5.83it/s][A
 13%|█▎        | 28/221 [00:05<00:29,  6.48it/s][A
 13%|█▎        | 29/221 [00:05<00:34,  5.55it/s][A
 14%|█▎        | 30/221 [00:06<00:54,  3.50it/s][A
 14%|█▍        | 31/221 [00:06<00:48,  3.88it/s][A
 14%|█▍        | 32/221 [00:06<00:40,  4.63it/s][A
 15%|█▍        | 33/221 [00:06<00:41,  4.57it/s][A
 16%|█▌        | 35/221 [00:06<00:32,  5.74it/s][A
 16%|█▋        | 36/221 [00:07<00:39,  4.65it/s][A
 17%|█▋        | 37/221 [00:07<00:38,  4.74it/s][A
 17%|█▋        | 38/221 [00:07<00:45,  4.06it/s][A
 18%|█▊        | 39/221 [00:08<00:40,  4.52it/s][A
 18%|█▊        | 40/221 [00:08<00:45,  3.98it/s][A
 19%|█▊        | 41/221 [00:08<00:37,  4.75it/s][A
 19%|█▉        | 42/221 [00:08<00:38,  4.69it/s][A
 19%|█▉        | 43/221 [00:08<00:34,  5.15it/s][A
 20%|█▉        | 44/221 [00:08<00:29,  5.91it/s][A
 20%|██        | 45/221 [00:09<00:36,  4.87it/s][A
 21%|██        | 46/221 [00:09<00:35,  4.92it/s][A
 21%|██▏       | 47/221 [00:09<00:37,  4.68it/s][A
 22%|██▏       | 49/221 [00:09<00:32,  5.34it/s][A
 23%|██▎       | 50/221 [00:10<00:35,  4.85it/s][A
 23%|██▎       | 51/221 [00:10<00:33,  5.02it/s][A
 24%|██▎       | 52/221 [00:10<00:42,  4.01it/s][A
 24%|██▍       | 54/221 [00:11<00:53,  3.14it/s][A
 25%|██▍       | 55/221 [00:11<00:49,  3.34it/s][A
 26%|██▌       | 57/221 [00:12<00:38,  4.24it/s][A
 26%|██▌       | 58/221 [00:12<00:47,  3.43it/s][A
 27%|██▋       | 59/221 [00:12<00:40,  4.01it/s][A
 27%|██▋       | 60/221 [00:13<00:49,  3.22it/s][A
 28%|██▊       | 62/221 [00:13<00:38,  4.12it/s][A
 29%|██▊       | 63/221 [00:13<00:42,  3.70it/s][A
 29%|██▉       | 64/221 [00:14<01:05,  2.40it/s][A
 30%|██▉       | 66/221 [00:15<00:56,  2.74it/s][A
 30%|███       | 67/221 [00:15<01:01,  2.51it/s][A
 31%|███       | 68/221 [00:16<00:53,  2.85it/s][A
 31%|███       | 69/221 [00:17<01:29,  1.70it/s][A
 32%|███▏      | 70/221 [00:17<01:11,  2.12it/s][A
 32%|███▏      | 71/221 [00:17<00:58,  2.56it/s][A
 33%|███▎      | 72/221 [00:18<00:59,  2.51it/s][A
 33%|███▎      | 73/221 [00:18<00:56,  2.64it/s][A
 34%|███▍      | 75/221 [00:18<00:41,  3.54it/s][A
 34%|███▍      | 76/221 [00:18<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:19<00:46,  3.11it/s][A
 36%|███▌      | 79/221 [00:19<00:39,  3.62it/s][A
 36%|███▌      | 80/221 [00:20<00:35,  4.00it/s][A
 37%|███▋      | 81/221 [00:20<00:34,  4.01it/s][A
 37%|███▋      | 82/221 [00:20<00:36,  3.82it/s][A
 38%|███▊      | 83/221 [00:21<00:54,  2.52it/s][A
 38%|███▊      | 84/221 [00:21<00:43,  3.18it/s][A
 39%|███▉      | 86/221 [00:21<00:28,  4.73it/s][A
 39%|███▉      | 87/221 [00:22<00:37,  3.60it/s][A
 40%|███▉      | 88/221 [00:22<00:39,  3.38it/s][A
 40%|████      | 89/221 [00:22<00:35,  3.69it/s][A
 41%|████      | 90/221 [00:23<00:43,  3.01it/s][A
 41%|████      | 91/221 [00:23<00:35,  3.66it/s][A
 42%|████▏     | 92/221 [00:23<00:33,  3.82it/s][A
 42%|████▏     | 93/221 [00:24<00:44,  2.90it/s][A
 43%|████▎     | 94/221 [00:24<00:49,  2.55it/s][A
 43%|████▎     | 95/221 [00:24<00:45,  2.77it/s][A
 43%|████▎     | 96/221 [00:25<00:59,  2.11it/s][A
 44%|████▍     | 97/221 [00:25<00:48,  2.57it/s][A
 44%|████▍     | 98/221 [00:26<01:12,  1.70it/s][A
 45%|████▍     | 99/221 [00:26<00:56,  2.18it/s][A
 45%|████▌     | 100/221 [00:27<00:48,  2.51it/s][A
 46%|████▌     | 101/221 [00:27<00:42,  2.83it/s][A
 46%|████▌     | 102/221 [00:29<01:33,  1.27it/s][A
 47%|████▋     | 103/221 [00:29<01:09,  1.70it/s][A
 47%|████▋     | 104/221 [00:29<00:52,  2.23it/s][A
 48%|████▊     | 105/221 [00:29<00:45,  2.55it/s][A
 48%|████▊     | 106/221 [00:30<00:43,  2.62it/s][A
 48%|████▊     | 107/221 [00:30<00:36,  3.15it/s][A
 49%|████▉     | 108/221 [00:30<00:34,  3.24it/s][A
 49%|████▉     | 109/221 [00:30<00:31,  3.61it/s][A
 50%|████▉     | 110/221 [00:30<00:25,  4.29it/s][A
 50%|█████     | 111/221 [00:31<00:23,  4.66it/s][A
 51%|█████     | 112/221 [00:31<00:27,  3.94it/s][A
 51%|█████     | 113/221 [00:31<00:37,  2.88it/s][A
 52%|█████▏    | 115/221 [00:32<00:25,  4.12it/s][A
 52%|█████▏    | 116/221 [00:32<00:25,  4.16it/s][A
 53%|█████▎    | 117/221 [00:32<00:26,  3.97it/s][A
 53%|█████▎    | 118/221 [00:32<00:24,  4.17it/s][A
 54%|█████▍    | 119/221 [00:33<00:24,  4.19it/s][A
 54%|█████▍    | 120/221 [00:33<00:20,  5.01it/s][A
 55%|█████▍    | 121/221 [00:33<00:18,  5.53it/s][A
 55%|█████▌    | 122/221 [00:33<00:19,  5.05it/s][A
 56%|█████▌    | 123/221 [00:33<00:17,  5.66it/s][A
 56%|█████▌    | 124/221 [00:34<00:19,  4.97it/s][A
 57%|█████▋    | 125/221 [00:34<00:21,  4.38it/s][A
 57%|█████▋    | 126/221 [00:34<00:20,  4.71it/s][A
 57%|█████▋    | 127/221 [00:34<00:26,  3.59it/s][A
 58%|█████▊    | 128/221 [00:35<00:23,  3.88it/s][A
 59%|█████▉    | 130/221 [00:35<00:17,  5.30it/s][A
 59%|█████▉    | 131/221 [00:35<00:15,  5.99it/s][A
 60%|█████▉    | 132/221 [00:36<00:39,  2.24it/s][A
 60%|██████    | 133/221 [00:37<00:35,  2.48it/s][A
 61%|██████    | 134/221 [00:37<00:43,  2.00it/s][A
 61%|██████    | 135/221 [00:38<00:47,  1.81it/s][A
 62%|██████▏   | 136/221 [00:38<00:38,  2.20it/s][A
 62%|██████▏   | 137/221 [00:38<00:32,  2.61it/s][A
 62%|██████▏   | 138/221 [00:39<00:30,  2.69it/s][A
 63%|██████▎   | 139/221 [00:39<00:33,  2.46it/s][A
 63%|██████▎   | 140/221 [00:40<00:33,  2.44it/s][A
 64%|██████▍   | 141/221 [00:40<00:31,  2.53it/s][A
 64%|██████▍   | 142/221 [00:40<00:26,  2.97it/s][A
 65%|██████▍   | 143/221 [00:41<00:37,  2.08it/s][A
 65%|██████▌   | 144/221 [00:42<00:37,  2.04it/s][A
 66%|██████▌   | 146/221 [00:42<00:25,  2.99it/s][A
 67%|██████▋   | 147/221 [00:42<00:23,  3.19it/s][A
 67%|██████▋   | 148/221 [00:43<00:30,  2.39it/s][A
 67%|██████▋   | 149/221 [00:43<00:35,  2.02it/s][A
 68%|██████▊   | 150/221 [00:44<00:30,  2.36it/s][A
 68%|██████▊   | 151/221 [00:44<00:26,  2.68it/s][A
 69%|██████▉   | 152/221 [00:44<00:25,  2.67it/s][A
 69%|██████▉   | 153/221 [00:45<00:21,  3.13it/s][A
 70%|██████▉   | 154/221 [00:45<00:18,  3.57it/s][A
 70%|███████   | 155/221 [00:45<00:21,  3.07it/s][A
 71%|███████   | 156/221 [00:45<00:16,  3.83it/s][A
 71%|███████   | 157/221 [00:46<00:16,  3.86it/s][A
 71%|███████▏  | 158/221 [00:46<00:16,  3.91it/s][A
 72%|███████▏  | 159/221 [00:46<00:14,  4.32it/s][A
 73%|███████▎  | 161/221 [00:47<00:18,  3.18it/s][A
 73%|███████▎  | 162/221 [00:47<00:16,  3.66it/s][A
 74%|███████▍  | 163/221 [00:47<00:15,  3.71it/s][A
 74%|███████▍  | 164/221 [00:47<00:15,  3.63it/s][A
 75%|███████▍  | 165/221 [00:48<00:18,  3.04it/s][A
 75%|███████▌  | 166/221 [00:48<00:15,  3.61it/s][A
 76%|███████▌  | 167/221 [00:48<00:12,  4.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:14,  3.75it/s][A
 77%|███████▋  | 170/221 [00:49<00:12,  4.24it/s][A
 77%|███████▋  | 171/221 [00:49<00:14,  3.50it/s][A
 78%|███████▊  | 172/221 [00:50<00:12,  3.84it/s][A
 78%|███████▊  | 173/221 [00:50<00:15,  3.03it/s][A
 79%|███████▊  | 174/221 [00:51<00:17,  2.72it/s][A
 79%|███████▉  | 175/221 [00:51<00:15,  2.99it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.45it/s][A
 81%|████████  | 178/221 [00:51<00:09,  4.65it/s][A
 81%|████████  | 179/221 [00:51<00:09,  4.48it/s][A
 81%|████████▏ | 180/221 [00:52<00:08,  4.66it/s][A
 82%|████████▏ | 181/221 [00:52<00:07,  5.41it/s][A
 82%|████████▏ | 182/221 [00:52<00:09,  4.20it/s][A
 83%|████████▎ | 183/221 [00:52<00:09,  4.01it/s][A
 83%|████████▎ | 184/221 [00:53<00:09,  3.80it/s][A
 84%|████████▎ | 185/221 [00:53<00:10,  3.53it/s][A
 84%|████████▍ | 186/221 [00:54<00:14,  2.35it/s][A
 85%|████████▍ | 187/221 [00:54<00:12,  2.68it/s][A
 85%|████████▌ | 188/221 [00:54<00:11,  2.90it/s][A
 86%|████████▌ | 189/221 [00:55<00:09,  3.28it/s][A
 86%|████████▌ | 190/221 [00:55<00:09,  3.23it/s][A
 87%|████████▋ | 192/221 [00:55<00:06,  4.30it/s][A
 87%|████████▋ | 193/221 [00:55<00:06,  4.64it/s][A
 88%|████████▊ | 194/221 [00:56<00:07,  3.67it/s][A
 88%|████████▊ | 195/221 [00:56<00:07,  3.46it/s][A
 89%|████████▊ | 196/221 [00:56<00:06,  4.11it/s][A
 89%|████████▉ | 197/221 [00:57<00:06,  3.65it/s][A
 90%|████████▉ | 198/221 [00:57<00:06,  3.76it/s][A
 90%|█████████ | 199/221 [00:57<00:05,  3.82it/s][A
 90%|█████████ | 200/221 [00:57<00:05,  3.88it/s][A
 91%|█████████ | 201/221 [00:57<00:04,  4.59it/s][A
 91%|█████████▏| 202/221 [00:58<00:04,  4.37it/s][A
 92%|█████████▏| 203/221 [00:58<00:03,  5.01it/s][A
 92%|█████████▏| 204/221 [00:58<00:04,  3.55it/s][A
 93%|█████████▎| 205/221 [00:58<00:03,  4.30it/s][A
 93%|█████████▎| 206/221 [00:59<00:03,  3.95it/s][A
 94%|█████████▍| 208/221 [00:59<00:02,  5.33it/s][A
 95%|█████████▍| 209/221 [00:59<00:02,  5.55it/s][A
 95%|█████████▌| 211/221 [00:59<00:01,  5.28it/s][A
 96%|█████████▌| 212/221 [01:00<00:01,  4.58it/s][A
 96%|█████████▋| 213/221 [01:00<00:01,  5.27it/s][A
 97%|█████████▋| 214/221 [01:01<00:02,  2.46it/s][A
 97%|█████████▋| 215/221 [01:01<00:02,  2.80it/s][A
 98%|█████████▊| 216/221 [01:01<00:01,  3.10it/s][A
 98%|█████████▊| 217/221 [01:02<00:01,  2.93it/s][A
 99%|█████████▊| 218/221 [01:02<00:00,  3.16it/s][A
 99%|█████████▉| 219/221 [01:02<00:00,  3.49it/s][A
100%|█████████▉| 220/221 [01:02<00:00,  4.06it/s][A
100%|██████████| 221/221 [01:03<00:00,  4.86it/s][A100%|██████████| 221/221 [01:03<00:00,  3.51it/s]
09/07/2024 00:16:21 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 1199--===========

09/07/2024 00:16:21 - INFO - __main__ -   {'area_r1': 24.8, 'area_recall': '24.8/49.5/60.0', 'area_ravg': 44.8}
09/07/2024 00:16:21 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 1199--===========

09/07/2024 00:16:21 - INFO - __main__ -   {'forward_r1': 37.8, 'forward_recall': '37.8/66.5/75.6', 'forward_ravg': 60.0}
09/07/2024 00:16:21 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 1199--===========

09/07/2024 00:16:21 - INFO - __main__ -   {'area_video_r1': 40.0, 'area_video_recall': '40.0/68.8/78.8', 'area_video_ravg': 62.6}
09/07/2024 00:16:21 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 599=======

09/07/2024 00:16:21 - INFO - __main__ -   {'area_video_r1': 40.3, 'area_video_recall': '40.3/69.1/79.2', 'area_video_ravg': 62.9}
09/07/2024 00:16:21 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 1199--===========

09/07/2024 00:16:21 - INFO - __main__ -   {'area_video_r1': 50.5, 'area_video_recall': '50.5/74.0/80.2', 'area_video_ravg': 68.2, 'area_video_back_r1': 50.1, 'area_video_back_recall': '50.1/73.4/81.6', 'area_video_back_ravg': 68.4}
09/07/2024 00:16:21 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 299=======

09/07/2024 00:16:21 - INFO - __main__ -   {'area_video_r1': 51.0, 'area_video_recall': '51.0/73.4/79.9', 'area_video_ravg': 68.1, 'area_video_back_r1': 51.0, 'area_video_back_recall': '51.0/73.8/81.9', 'area_video_back_ravg': 68.9}
09/07/2024 00:16:21 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 1199--===========

09/07/2024 00:16:21 - INFO - __main__ -   {'video_r1': 40.7, 'video_recall': '40.7/68.9/79.6', 'video_ravg': 63.1}
09/07/2024 00:16:21 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 299=======

09/07/2024 00:16:21 - INFO - __main__ -   {'video_r1': 43.3, 'video_recall': '43.3/70.8/80.2', 'video_ravg': 64.8}
09/07/2024 00:16:21 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 1199--===========

09/07/2024 00:16:21 - INFO - __main__ -   {'video_r1': 51.2, 'video_recall': '51.2/75.2/81.2', 'video_ravg': 69.2}
09/07/2024 00:16:21 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 299=======

09/07/2024 00:16:21 - INFO - __main__ -   {'video_r1': 52.0, 'video_recall': '52.0/75.3/81.8', 'video_ravg': 69.7}
[h264 @ 0x55e52b955cc0] mmco: unref short failure
09/07/2024 00:16:41 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.231778144836426, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04696846008300781, 'loss_ret%tv%ta--finetune_area/loss_area': 2.704197883605957, 'loss_ret%tv%ta--finetune_area/total_loss': 5.982944488525391}
 77%|███████▋  | 1200/1556 [4:41:04<11:42:06, 118.33s/it] 77%|███████▋  | 1201/1556 [4:41:07<8:14:45, 83.62s/it]  [h264 @ 0x5649e6e48240] mmco: unref short failure
[h264 @ 0x5649e6e48240] mmco: unref short failure
 77%|███████▋  | 1202/1556 [4:41:10<5:50:30, 59.41s/it] 77%|███████▋  | 1203/1556 [4:41:13<4:10:34, 42.59s/it][h264 @ 0x5616a8c5a400] mmco: unref short failure
 77%|███████▋  | 1204/1556 [4:41:17<3:01:33, 30.95s/it][h264 @ 0x55c938d080c0] mmco: unref short failure
[h264 @ 0x55c938d080c0] mmco: unref short failure
 77%|███████▋  | 1205/1556 [4:41:21<2:14:20, 22.96s/it][h264 @ 0x55e528369bc0] mmco: unref short failure
[h264 @ 0x55e528369bc0] mmco: unref short failure
[h264 @ 0x5649dcf1b7c0] mmco: unref short failure
[h264 @ 0x5649dcf1b7c0] mmco: unref short failure
 78%|███████▊  | 1206/1556 [4:41:26<1:41:47, 17.45s/it] 78%|███████▊  | 1207/1556 [4:41:31<1:19:36, 13.69s/it][h264 @ 0x5616ad9e1040] mmco: unref short failure
[h264 @ 0x5616ad9e1040] mmco: unref short failure
[h264 @ 0x5649e4bebd80] mmco: unref short failure
 78%|███████▊  | 1208/1556 [4:41:36<1:04:53, 11.19s/it][h264 @ 0x5616ae4fec40] mmco: unref short failure
[h264 @ 0x5616ae4fec40] mmco: unref short failure
 78%|███████▊  | 1209/1556 [4:41:42<55:32,  9.60s/it]   78%|███████▊  | 1210/1556 [4:41:48<48:34,  8.42s/it] 78%|███████▊  | 1211/1556 [4:41:53<43:24,  7.55s/it] 78%|███████▊  | 1212/1556 [4:41:58<38:32,  6.72s/it][h264 @ 0x5649e0953140] mmco: unref short failure
[h264 @ 0x5649e0953140] mmco: unref short failure
[h264 @ 0x55c970b45800] mmco: unref short failure
[h264 @ 0x55e528904fc0] mmco: unref short failure
[h264 @ 0x55e528904fc0] mmco: unref short failure
 78%|███████▊  | 1213/1556 [4:42:04<36:31,  6.39s/it][h264 @ 0x55e529eef400] mmco: unref short failure
[h264 @ 0x55e529eef400] mmco: unref short failure
[h264 @ 0x55e529eef400] mmco: unref short failure
[h264 @ 0x55e529eef400] mmco: unref short failure
 78%|███████▊  | 1214/1556 [4:42:09<33:48,  5.93s/it] 78%|███████▊  | 1215/1556 [4:42:14<32:08,  5.66s/it][h264 @ 0x55e52b190cc0] mmco: unref short failure
[h264 @ 0x55c97aa26900] mmco: unref short failure
[h264 @ 0x55e5239bf480] mmco: unref short failure
[h264 @ 0x55e522c10540] mmco: unref short failure
[h264 @ 0x55e522c10540] mmco: unref short failure
 78%|███████▊  | 1216/1556 [4:42:29<49:29,  8.73s/it][h264 @ 0x5616b0f5fe40] mmco: unref short failure
[h264 @ 0x5616b48cd4c0] mmco: unref short failure
[h264 @ 0x5616b48cd4c0] mmco: unref short failure
 78%|███████▊  | 1217/1556 [4:42:39<50:25,  8.93s/it][h264 @ 0x55e52bb30cc0] mmco: unref short failure
[h264 @ 0x55e52bb30cc0] mmco: unref short failure
 78%|███████▊  | 1218/1556 [4:42:44<44:37,  7.92s/it][h264 @ 0x55e5204e5100] mmco: unref short failure
[h264 @ 0x55e5204e5100] mmco: unref short failure
[h264 @ 0x5649e7fb69c0] mmco: unref short failure
[h264 @ 0x5649e7fb69c0] mmco: unref short failure
 78%|███████▊  | 1219/1556 [4:42:50<41:20,  7.36s/it][h264 @ 0x5649e7508c80] mmco: unref short failure
[h264 @ 0x55e52836f240] mmco: unref short failure
 78%|███████▊  | 1220/1556 [4:43:00<44:36,  7.97s/it][h264 @ 0x5616b1cb7a00] mmco: unref short failure
 78%|███████▊  | 1221/1556 [4:43:05<39:50,  7.14s/it] 79%|███████▊  | 1222/1556 [4:43:10<36:54,  6.63s/it][h264 @ 0x5616aeaad1c0] mmco: unref short failure
 79%|███████▊  | 1223/1556 [4:43:18<38:59,  7.03s/it][h264 @ 0x5649e61b3900] mmco: unref short failure
[h264 @ 0x5649e61b3900] mmco: unref short failure
[h264 @ 0x5649e61b3900] mmco: unref short failure
[h264 @ 0x5649e61b3900] mmco: unref short failure
[h264 @ 0x5649e61b3900] mmco: unref short failure
[h264 @ 0x5649e61b3900] mmco: unref short failure
[h264 @ 0x5649e61b3900] mmco: unref short failure
[h264 @ 0x5649e61b3900] mmco: unref short failure
[h264 @ 0x5616b5c3fb00] mmco: unref short failure
[h264 @ 0x5616b5c3fb00] mmco: unref short failure
[h264 @ 0x5649e71ea300] mmco: unref short failure
[h264 @ 0x55e526a9bc80] mmco: unref short failure
[h264 @ 0x5649dd2c4200] mmco: unref short failure
[h264 @ 0x5649dd2c4200] mmco: unref short failure
[h264 @ 0x55e52c567340] mmco: unref short failure
[h264 @ 0x55c97bc42b00] mmco: unref short failure
[h264 @ 0x55e52595ea40] mmco: unref short failure
[h264 @ 0x55e52595ea40] mmco: unref short failure
[h264 @ 0x55c97bf8a900] mmco: unref short failure
[h264 @ 0x55c97bf8a900] mmco: unref short failure
 79%|███████▊  | 1224/1556 [4:44:11<1:54:39, 20.72s/it] 79%|███████▊  | 1225/1556 [4:44:19<1:32:22, 16.75s/it] 79%|███████▉  | 1226/1556 [4:44:24<1:13:02, 13.28s/it][h264 @ 0x561671808540] mmco: unref short failure
[h264 @ 0x561671808540] mmco: unref short failure
[h264 @ 0x55e520963d80] mmco: unref short failure
 79%|███████▉  | 1227/1556 [4:44:30<1:01:07, 11.15s/it][h264 @ 0x5616b065a080] mmco: unref short failure
[h264 @ 0x5616b065a080] mmco: unref short failure
[h264 @ 0x5616a94d0680] mmco: unref short failure
[h264 @ 0x5616a94d0680] mmco: unref short failure
 79%|███████▉  | 1228/1556 [4:44:38<56:11, 10.28s/it]   79%|███████▉  | 1229/1556 [4:44:43<47:41,  8.75s/it] 79%|███████▉  | 1230/1556 [4:44:49<42:04,  7.74s/it] 79%|███████▉  | 1231/1556 [4:44:54<37:59,  7.01s/it][h264 @ 0x55c97a8ecc40] mmco: unref short failure
[h264 @ 0x55c97a8ecc40] mmco: unref short failure
[h264 @ 0x5616b2a2bb80] mmco: unref short failure
[h264 @ 0x55e52dd0b600] mmco: unref short failure
[h264 @ 0x55e52dd0b600] mmco: unref short failure
[h264 @ 0x5616b3cab940] mmco: unref short failure
[h264 @ 0x5616b3cab940] mmco: unref short failure
[h264 @ 0x55e51f798ec0] mmco: unref short failure
[h264 @ 0x5616ad955480] mmco: unref short failure
[h264 @ 0x55c971172f00] mmco: unref short failure
[h264 @ 0x55c971172f00] mmco: unref short failure
[h264 @ 0x5649e6976ec0] mmco: unref short failure
 79%|███████▉  | 1232/1556 [4:45:43<1:45:31, 19.54s/it][h264 @ 0x55c96f972400] mmco: unref short failure
[h264 @ 0x55c97de991c0] mmco: unref short failure
 79%|███████▉  | 1233/1556 [4:46:00<1:41:49, 18.91s/it] 79%|███████▉  | 1234/1556 [4:46:06<1:19:59, 14.91s/it][h264 @ 0x5616aebf7640] mmco: unref short failure
[h264 @ 0x5616aebf7640] mmco: unref short failure
 79%|███████▉  | 1235/1556 [4:46:11<1:04:38, 12.08s/it][h264 @ 0x55e52b5aeb80] mmco: unref short failure
 79%|███████▉  | 1236/1556 [4:46:17<54:52, 10.29s/it]  [h264 @ 0x5616b3deb300] mmco: unref short failure
[h264 @ 0x55c975fe5740] mmco: unref short failure
 79%|███████▉  | 1237/1556 [4:46:23<47:21,  8.91s/it] 80%|███████▉  | 1238/1556 [4:46:28<40:29,  7.64s/it][h264 @ 0x5649e1fefa80] mmco: unref short failure
[h264 @ 0x55e528e15740] mmco: unref short failure
 80%|███████▉  | 1239/1556 [4:46:35<40:11,  7.61s/it][h264 @ 0x55e52bd764c0] mmco: unref short failure
[h264 @ 0x5649e5a7a580] mmco: unref short failure
[h264 @ 0x5649e5a7a580] mmco: unref short failure
[h264 @ 0x5649e30a5940] mmco: unref short failure
[h264 @ 0x5649e30a5940] mmco: unref short failure
[h264 @ 0x55e5239bf480] mmco: unref short failure
[h264 @ 0x55e5239bf480] mmco: unref short failure
[h264 @ 0x55e5239bf480] mmco: unref short failure
[h264 @ 0x5616b2e1bac0] mmco: unref short failure
[h264 @ 0x5649e7f98b00] mmco: unref short failure
[h264 @ 0x5649e7f98b00] mmco: unref short failure
[h264 @ 0x5649b99ea5c0] mmco: unref short failure
[h264 @ 0x5616afed9340] mmco: unref short failure
[h264 @ 0x5616adbb4240] mmco: unref short failure
[h264 @ 0x5616adbb4240] mmco: unref short failure
[h264 @ 0x55c97af9c6c0] mmco: unref short failure
[h264 @ 0x55c97af9c6c0] mmco: unref short failure
[h264 @ 0x55c97d3aeb80] mmco: unref short failure
 80%|███████▉  | 1240/1556 [4:47:22<1:42:24, 19.44s/it][h264 @ 0x5616ac041a00] mmco: unref short failure
[h264 @ 0x5616ac041a00] mmco: unref short failure
[h264 @ 0x55c97ea63980] mmco: unref short failure
[h264 @ 0x55c97ea63980] mmco: unref short failure
[h264 @ 0x55c97ea63980] mmco: unref short failure
 80%|███████▉  | 1241/1556 [4:47:42<1:41:46, 19.38s/it] 80%|███████▉  | 1242/1556 [4:47:47<1:19:18, 15.15s/it][h264 @ 0x55e52a57a180] mmco: unref short failure
 80%|███████▉  | 1243/1556 [4:47:52<1:03:43, 12.22s/it][h264 @ 0x55e5240309c0] mmco: unref short failure
 80%|███████▉  | 1244/1556 [4:48:02<1:00:07, 11.56s/it] 80%|████████  | 1245/1556 [4:48:08<50:17,  9.70s/it]   80%|████████  | 1246/1556 [4:48:13<44:01,  8.52s/it][h264 @ 0x55c97a2eb140] mmco: unref short failure
 80%|████████  | 1247/1556 [4:48:19<39:21,  7.64s/it][h264 @ 0x5649e3c0bb40] mmco: unref short failure
[h264 @ 0x5616b2dace00] mmco: unref short failure
[h264 @ 0x5616b2dace00] mmco: unref short failure
[h264 @ 0x55c975af7940] mmco: unref short failure
 80%|████████  | 1248/1556 [4:49:00<1:31:05, 17.74s/it][h264 @ 0x5649e6fecb40] mmco: unref short failure
[h264 @ 0x5649e6fecb40] mmco: unref short failure
[h264 @ 0x5616b2cedf00] mmco: unref short failure
[h264 @ 0x55c9745a66c0] mmco: unref short failure
 80%|████████  | 1249/1556 [4:49:21<1:34:40, 18.50s/it]09/07/2024 00:25:02 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.115360736846924, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04701971262693405, 'loss_ret%tv%ta--finetune_area/loss_area': 2.6344738006591797, 'loss_ret%tv%ta--finetune_area/total_loss': 5.796854019165039}
[h264 @ 0x55c979129d00] mmco: unref short failure
[h264 @ 0x55c979129d00] mmco: unref short failure
[h264 @ 0x55c9753a7200] mmco: unref short failure
[h264 @ 0x55c9753a7200] mmco: unref short failure
 80%|████████  | 1250/1556 [4:49:27<1:15:24, 14.79s/it][h264 @ 0x5616b5797000] mmco: unref short failure
 80%|████████  | 1251/1556 [4:49:32<1:00:58, 12.00s/it][h264 @ 0x55c974118f80] mmco: unref short failure
[h264 @ 0x55c97f38d680] mmco: unref short failure
[h264 @ 0x55c97f38d680] mmco: unref short failure
[h264 @ 0x5649dcde4600] mmco: unref short failure
[h264 @ 0x5649dcde4600] mmco: unref short failure
 80%|████████  | 1252/1556 [4:49:45<1:01:14, 12.09s/it][h264 @ 0x5649e2079480] mmco: unref short failure
[h264 @ 0x5649e2079480] mmco: unref short failure
 81%|████████  | 1253/1556 [4:49:50<51:21, 10.17s/it]  [h264 @ 0x55e524a7cdc0] mmco: unref short failure
[h264 @ 0x55e524a7cdc0] mmco: unref short failure
 81%|████████  | 1254/1556 [4:49:56<44:11,  8.78s/it][h264 @ 0x5616a8fa4c80] mmco: unref short failure
[h264 @ 0x5649eab66880] mmco: unref short failure
 81%|████████  | 1255/1556 [4:50:01<38:24,  7.66s/it][h264 @ 0x55e52c940680] mmco: unref short failure
[h264 @ 0x5649ec17e6c0] mmco: unref short failure
[h264 @ 0x5649ec17e6c0] mmco: unref short failure
[h264 @ 0x55e526f145c0] mmco: unref short failure
[h264 @ 0x55e526f145c0] mmco: unref short failure
[h264 @ 0x55e525d6ee40] mmco: unref short failure
[h264 @ 0x55c970606840] mmco: unref short failure
 81%|████████  | 1256/1556 [4:50:39<1:23:42, 16.74s/it][h264 @ 0x5649e4bebb80] mmco: unref short failure
[h264 @ 0x55c979590b40] mmco: unref short failure
[h264 @ 0x5616a95d8b00] mmco: unref short failure
[h264 @ 0x5616a95d8b00] mmco: unref short failure
 81%|████████  | 1257/1556 [4:50:56<1:23:50, 16.83s/it][h264 @ 0x55c97796ea00] mmco: unref short failure
 81%|████████  | 1258/1556 [4:51:01<1:05:42, 13.23s/it] 81%|████████  | 1259/1556 [4:51:06<53:46, 10.87s/it]  [h264 @ 0x5649ebc83d80] mmco: unref short failure
[h264 @ 0x55c97f362640] mmco: unref short failure
[h264 @ 0x55c97f362640] mmco: unref short failure
[h264 @ 0x5649e838e880] mmco: unref short failure
[h264 @ 0x5616b66131c0] mmco: unref short failure
[h264 @ 0x5616b66131c0] mmco: unref short failure
 81%|████████  | 1260/1556 [4:51:23<1:02:54, 12.75s/it] 81%|████████  | 1261/1556 [4:51:29<51:55, 10.56s/it]  [h264 @ 0x55c972049280] mmco: unref short failure
 81%|████████  | 1262/1556 [4:51:34<43:52,  8.96s/it][h264 @ 0x55e52a0d9dc0] mmco: unref short failure
[h264 @ 0x5649e7491b40] mmco: unref short failure
[h264 @ 0x5649e7491b40] mmco: unref short failure
 81%|████████  | 1263/1556 [4:51:39<38:22,  7.86s/it][h264 @ 0x5649e4118600] mmco: unref short failure
[h264 @ 0x55e52d3c41c0] mmco: unref short failure
[h264 @ 0x55e52d3c41c0] mmco: unref short failure
[h264 @ 0x5649de0a5900] mmco: unref short failure
not have audios 8-qwaveiHMM.3
 81%|████████  | 1264/1556 [4:52:18<1:24:07, 17.28s/it][h264 @ 0x55e52db35ac0] mmco: unref short failure
[h264 @ 0x55e52db35ac0] mmco: unref short failure
 81%|████████▏ | 1265/1556 [4:52:30<1:16:09, 15.70s/it][h264 @ 0x55e532511740] mmco: unref short failure
[h264 @ 0x5616b9a18440] mmco: unref short failure
 81%|████████▏ | 1266/1556 [4:52:44<1:12:39, 15.03s/it][h264 @ 0x5616b1612980] mmco: unref short failure
[h264 @ 0x5616b1612980] mmco: unref short failure
[h264 @ 0x5616b1612980] mmco: unref short failure
[h264 @ 0x5616b1612980] mmco: unref short failure
 81%|████████▏ | 1267/1556 [4:52:48<57:13, 11.88s/it]  [h264 @ 0x55e5222b52c0] mmco: unref short failure
[h264 @ 0x55e5222b52c0] mmco: unref short failure
 81%|████████▏ | 1268/1556 [4:53:00<57:10, 11.91s/it] 82%|████████▏ | 1269/1556 [4:53:06<48:00, 10.04s/it][h264 @ 0x55c975030c80] mmco: unref short failure
[h264 @ 0x55c975030c80] mmco: unref short failure
[h264 @ 0x55c971c3eac0] mmco: unref short failure
 82%|████████▏ | 1270/1556 [4:53:12<41:49,  8.77s/it] 82%|████████▏ | 1271/1556 [4:53:17<36:57,  7.78s/it] 82%|████████▏ | 1272/1556 [4:53:49<1:11:31, 15.11s/it][h264 @ 0x55e4fa52a900] mmco: unref short failure
[h264 @ 0x55c97de1f980] mmco: unref short failure
[h264 @ 0x55c97de1f980] mmco: unref short failure
[h264 @ 0x5649e560e600] mmco: unref short failure
[h264 @ 0x5649e560e600] mmco: unref short failure
[h264 @ 0x5616b48cdb80] mmco: unref short failure
[h264 @ 0x5616aa4c3440] mmco: unref short failure
[h264 @ 0x5616aa4c3440] mmco: unref short failure
 82%|████████▏ | 1273/1556 [4:54:07<1:14:27, 15.79s/it] 82%|████████▏ | 1274/1556 [4:54:20<1:10:19, 14.96s/it][h264 @ 0x5649e635c1c0] mmco: unref short failure
[h264 @ 0x5649e635c1c0] mmco: unref short failure
 82%|████████▏ | 1275/1556 [4:54:25<56:26, 12.05s/it]  [h264 @ 0x55e528905240] mmco: unref short failure
[h264 @ 0x55e528905240] mmco: unref short failure
 82%|████████▏ | 1276/1556 [4:54:38<56:59, 12.21s/it] 82%|████████▏ | 1277/1556 [4:54:43<46:22,  9.97s/it] 82%|████████▏ | 1278/1556 [4:54:48<39:39,  8.56s/it][h264 @ 0x55c981220e80] mmco: unref short failure
[h264 @ 0x55c981220e80] mmco: unref short failure
 82%|████████▏ | 1279/1556 [4:54:54<35:55,  7.78s/it][h264 @ 0x5649e71d9e40] mmco: unref short failure
[h264 @ 0x55e52deeb1c0] mmco: unref short failure
[h264 @ 0x55e52deeb1c0] mmco: unref short failure
[h264 @ 0x5649dbee4dc0] mmco: unref short failure
[h264 @ 0x5649dbee4dc0] mmco: unref short failure
[h264 @ 0x55e52282da40] mmco: unref short failure
[h264 @ 0x55e530994380] mmco: unref short failure
 82%|████████▏ | 1280/1556 [4:55:32<1:18:19, 17.03s/it][h264 @ 0x5616ac56e800] mmco: unref short failure
[h264 @ 0x5616ac56e800] mmco: unref short failure
[h264 @ 0x55e5263f4ac0] mmco: unref short failure
[h264 @ 0x5649e8d72cc0] mmco: unref short failure
 82%|████████▏ | 1281/1556 [4:55:56<1:27:33, 19.10s/it][h264 @ 0x5616b886e180] mmco: unref short failure
[h264 @ 0x5616b886e180] mmco: unref short failure
[h264 @ 0x55e5263f43c0] mmco: unref short failure
[h264 @ 0x55e5263f43c0] mmco: unref short failure
[h264 @ 0x55c97f476d40] mmco: unref short failure
 82%|████████▏ | 1282/1556 [4:56:02<1:08:55, 15.09s/it][h264 @ 0x55c9801b4780] mmco: unref short failure
[h264 @ 0x55c9801b4780] mmco: unref short failure
 82%|████████▏ | 1283/1556 [4:56:07<54:56, 12.08s/it]  [h264 @ 0x55c97c115f40] mmco: unref short failure
[h264 @ 0x55c97b093cc0] mmco: unref short failure
 83%|████████▎ | 1284/1556 [4:56:14<47:16, 10.43s/it] 83%|████████▎ | 1285/1556 [4:56:18<39:30,  8.75s/it][h264 @ 0x55c97c4b8ec0] mmco: unref short failure
 83%|████████▎ | 1286/1556 [4:56:24<34:40,  7.71s/it][h264 @ 0x55e525d5eb40] mmco: unref short failure
[h264 @ 0x55e525d5eb40] mmco: unref short failure
 83%|████████▎ | 1287/1556 [4:56:30<32:08,  7.17s/it][h264 @ 0x5616b55397c0] mmco: unref short failure
[h264 @ 0x5616bb72ec80] mmco: unref short failure
not have audios 7wavFXW3AFw.7
[h264 @ 0x55c983d55a00] mmco: unref short failure
[h264 @ 0x55e4fa52a680] mmco: unref short failure
[h264 @ 0x55c9752fb480] mmco: unref short failure
[h264 @ 0x55c9752fb480] mmco: unref short failure
[h264 @ 0x5616be671000] mmco: unref short failure
[h264 @ 0x5616b6e46940] mmco: unref short failure
[h264 @ 0x5616b6e46940] mmco: unref short failure
 83%|████████▎ | 1288/1556 [4:57:13<1:20:54, 18.11s/it][h264 @ 0x55e529f72800] mmco: unref short failure
[h264 @ 0x55e529f72800] mmco: unref short failure
[h264 @ 0x55c973d8ab80] mmco: unref short failure
 83%|████████▎ | 1289/1556 [4:57:34<1:23:57, 18.87s/it] 83%|████████▎ | 1290/1556 [4:57:41<1:08:23, 15.43s/it] 83%|████████▎ | 1291/1556 [4:57:46<54:22, 12.31s/it]  [h264 @ 0x5649e5acffc0] mmco: unref short failure
 83%|████████▎ | 1292/1556 [4:57:55<49:22, 11.22s/it][h264 @ 0x55e52ff0d600] mmco: unref short failure
 83%|████████▎ | 1293/1556 [4:58:00<41:17,  9.42s/it][h264 @ 0x5616ba932c80] mmco: unref short failure
[h264 @ 0x5616ba932c80] mmco: unref short failure
[h264 @ 0x55c970c48740] mmco: unref short failure
[h264 @ 0x55c970c48740] mmco: unref short failure
[h264 @ 0x55c97f94d240] mmco: unref short failure
[h264 @ 0x55c97f94d240] mmco: unref short failure
[h264 @ 0x55e52e72ec40] mmco: unref short failure
[h264 @ 0x55e52e72ec40] mmco: unref short failure
[h264 @ 0x55e52e72ec40] mmco: unref short failure
[h264 @ 0x55e52e72ec40] mmco: unref short failure
 83%|████████▎ | 1294/1556 [4:58:05<35:35,  8.15s/it][h264 @ 0x5649e5087180] mmco: unref short failure
 83%|████████▎ | 1295/1556 [4:58:11<31:44,  7.30s/it][h264 @ 0x55c97e265c40] mmco: unref short failure
[h264 @ 0x55c97e265c40] mmco: unref short failure
[h264 @ 0x55c97e265c40] mmco: unref short failure
[h264 @ 0x55c97e265c40] mmco: unref short failure
[h264 @ 0x55c97e265c40] mmco: unref short failure
[h264 @ 0x55c97e265c40] mmco: unref short failure
[h264 @ 0x55e5339257c0] mmco: unref short failure
[h264 @ 0x55c97ef9aac0] mmco: unref short failure
[h264 @ 0x55c97ef9aac0] mmco: unref short failure
[h264 @ 0x55e52deeb5c0] mmco: unref short failure
[h264 @ 0x55c974007e40] mmco: unref short failure
[h264 @ 0x55c974007e40] mmco: unref short failure
[h264 @ 0x55e51fbf6080] mmco: unref short failure
 83%|████████▎ | 1296/1556 [4:58:53<1:17:30, 17.89s/it][h264 @ 0x5649ddccbec0] mmco: unref short failure
[h264 @ 0x5649ddccbec0] mmco: unref short failure
[h264 @ 0x55c93808b840] mmco: unref short failure
[h264 @ 0x55c93808b840] mmco: unref short failure
 83%|████████▎ | 1297/1556 [4:59:13<1:19:41, 18.46s/it][h264 @ 0x55e520f8e6c0] mmco: unref short failure
[h264 @ 0x55e520f8e6c0] mmco: unref short failure
 83%|████████▎ | 1298/1556 [4:59:19<1:02:38, 14.57s/it][h264 @ 0x5649b99a57c0] mmco: unref short failure
 83%|████████▎ | 1299/1556 [4:59:23<49:36, 11.58s/it]  [h264 @ 0x55e5322c8a40] mmco: unref short failure
[h264 @ 0x55e52d530dc0] mmco: unref short failure
[h264 @ 0x55e52d530dc0] mmco: unref short failure
09/07/2024 00:35:09 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 2.978515148162842, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04593115299940109, 'loss_ret%tv%ta--finetune_area/loss_area': 2.409268379211426, 'loss_ret%tv%ta--finetune_area/total_loss': 5.433714866638184}
 84%|████████▎ | 1300/1556 [4:59:33<47:36, 11.16s/it][h264 @ 0x55e530bddd00] mmco: unref short failure
 84%|████████▎ | 1301/1556 [4:59:39<40:20,  9.49s/it][h264 @ 0x5649efd4d940] mmco: unref short failure
 84%|████████▎ | 1302/1556 [4:59:44<34:51,  8.23s/it][h264 @ 0x55e521bb8ec0] mmco: unref short failure
[h264 @ 0x55e521bb8ec0] mmco: unref short failure
 84%|████████▎ | 1303/1556 [4:59:50<30:57,  7.34s/it][h264 @ 0x5616b7a65800] mmco: unref short failure
[h264 @ 0x5616b7a65800] mmco: unref short failure
[h264 @ 0x55c938080e40] mmco: unref short failure
[h264 @ 0x55c938080e40] mmco: unref short failure
[h264 @ 0x5649dc3e7480] mmco: unref short failure
[h264 @ 0x5649df8c0c00] mmco: unref short failure
[h264 @ 0x5649df8c0c00] mmco: unref short failure
[h264 @ 0x5616ba095680] mmco: unref short failure
[h264 @ 0x55c97fc4f940] mmco: unref short failure
[h264 @ 0x55c97fab9e00] mmco: unref short failure
[h264 @ 0x55c97fab9e00] mmco: unref short failure
[h264 @ 0x5616bbdc2040] mmco: unref short failure
[h264 @ 0x5616bbdc2040] mmco: unref short failure
[h264 @ 0x55c980899980] mmco: unref short failure
[h264 @ 0x55c980899980] mmco: unref short failure
 84%|████████▍ | 1304/1556 [5:00:28<1:09:57, 16.66s/it][h264 @ 0x55e5330ed200] mmco: unref short failure
[h264 @ 0x55e5330ed200] mmco: unref short failure
[h264 @ 0x55e5330ed200] mmco: unref short failure
[h264 @ 0x55e5330ed200] mmco: unref short failure
[h264 @ 0x55e53168ac40] mmco: unref short failure
[h264 @ 0x55e53168ac40] mmco: unref short failure
[h264 @ 0x55e535eff680] mmco: unref short failure
[h264 @ 0x5616b8b2cb80] mmco: unref short failure
 84%|████████▍ | 1305/1556 [5:00:45<1:09:58, 16.73s/it][h264 @ 0x5649ed8bbac0] mmco: unref short failure
 84%|████████▍ | 1306/1556 [5:00:54<1:00:04, 14.42s/it] 84%|████████▍ | 1307/1556 [5:01:00<49:07, 11.84s/it]  [h264 @ 0x5649e7c19a00] mmco: unref short failure
[h264 @ 0x5649e7c19a00] mmco: unref short failure
[h264 @ 0x55c97cb24040] mmco: unref short failure
 84%|████████▍ | 1308/1556 [5:01:13<50:41, 12.26s/it][h264 @ 0x55c97e1e8d40] mmco: unref short failure
 84%|████████▍ | 1309/1556 [5:01:19<42:12, 10.25s/it][h264 @ 0x55c980839d40] mmco: unref short failure
[h264 @ 0x5616bac21c00] mmco: unref short failure
[h264 @ 0x5616bac21c00] mmco: unref short failure
 84%|████████▍ | 1310/1556 [5:01:23<35:30,  8.66s/it] 84%|████████▍ | 1311/1556 [5:01:29<31:20,  7.67s/it][h264 @ 0x55e531957d80] mmco: unref short failure
[h264 @ 0x55e531957d80] mmco: unref short failure
[h264 @ 0x5616b0cf9c40] mmco: unref short failure
[h264 @ 0x55c97326a9c0] mmco: unref short failure
[h264 @ 0x55c974a8d380] mmco: unref short failure
[h264 @ 0x55e520982740] mmco: unref short failure
[h264 @ 0x55e520982740] mmco: unref short failure
[h264 @ 0x55e52844e280] mmco: unref short failure
[h264 @ 0x5649ee0a22c0] mmco: unref short failure
[h264 @ 0x55c981828a00] mmco: unref short failure
[h264 @ 0x5616ba686e40] mmco: unref short failure
[h264 @ 0x5616ba686e40] mmco: unref short failure
[h264 @ 0x55e4fa2dbb80] mmco: unref short failure
[h264 @ 0x55c984b616c0] mmco: unref short failure
[h264 @ 0x55c984b616c0] mmco: unref short failure
 84%|████████▍ | 1312/1556 [5:02:27<1:32:25, 22.73s/it][h264 @ 0x5616a8db69c0] mmco: unref short failure
[h264 @ 0x5616a8db69c0] mmco: unref short failure
[h264 @ 0x55c97eedfcc0] mmco: unref short failure
 84%|████████▍ | 1313/1556 [5:02:32<1:10:59, 17.53s/it][h264 @ 0x5616b56fe600] mmco: unref short failure
[h264 @ 0x5649f17b1640] mmco: unref short failure
[h264 @ 0x55e51f612e40] mmco: unref short failure
 84%|████████▍ | 1314/1556 [5:02:37<56:00, 13.89s/it]   85%|████████▍ | 1315/1556 [5:02:43<45:13, 11.26s/it][h264 @ 0x55e5332112c0] mmco: unref short failure
[h264 @ 0x55e5332112c0] mmco: unref short failure
[h264 @ 0x5616bb06c440] mmco: unref short failure
[h264 @ 0x5616bb06c440] mmco: unref short failure
 85%|████████▍ | 1316/1556 [5:02:48<37:52,  9.47s/it] 85%|████████▍ | 1317/1556 [5:02:54<33:17,  8.36s/it][h264 @ 0x5616ba465f40] mmco: unref short failure
[h264 @ 0x5616ba465f40] mmco: unref short failure
 85%|████████▍ | 1318/1556 [5:03:00<30:21,  7.65s/it][h264 @ 0x55e533a96440] mmco: unref short failure
[h264 @ 0x55e533a96440] mmco: unref short failure
[h264 @ 0x55e533a96440] mmco: unref short failure
[h264 @ 0x55e533a96440] mmco: unref short failure
 85%|████████▍ | 1319/1556 [5:03:05<27:49,  7.04s/it][h264 @ 0x55c975161580] mmco: unref short failure
[h264 @ 0x55c975161580] mmco: unref short failure
[h264 @ 0x55e530ac0dc0] mmco: unref short failure
[h264 @ 0x55e530ac0dc0] mmco: unref short failure
[h264 @ 0x5649ea67b200] mmco: unref short failure
[h264 @ 0x5649ea67b200] mmco: unref short failure
[h264 @ 0x55e532431ac0] mmco: unref short failure
[h264 @ 0x55e53246ac40] mmco: unref short failure
[h264 @ 0x5649dd8d3e00] mmco: unref short failure
[h264 @ 0x5649dd8d3e00] mmco: unref short failure
 85%|████████▍ | 1320/1556 [5:03:59<1:22:44, 21.03s/it][h264 @ 0x55e4fa00fa00] mmco: unref short failure
[h264 @ 0x55e4fa00fa00] mmco: unref short failure
 85%|████████▍ | 1321/1556 [5:04:08<1:08:36, 17.52s/it][h264 @ 0x5616ab825100] mmco: unref short failure
[h264 @ 0x5649e8e88180] mmco: unref short failure
[h264 @ 0x5649e8cac380] mmco: unref short failure
 85%|████████▍ | 1322/1556 [5:04:14<54:37, 14.01s/it]   85%|████████▌ | 1323/1556 [5:04:20<44:22, 11.43s/it][h264 @ 0x5616c0cea7c0] mmco: unref short failure
[h264 @ 0x55c9736f4c80] mmco: unref short failure
[h264 @ 0x55c9736f4c80] mmco: unref short failure
[h264 @ 0x5616aa04b2c0] mmco: unref short failure
 85%|████████▌ | 1324/1556 [5:04:25<37:33,  9.71s/it] 85%|████████▌ | 1325/1556 [5:04:31<33:11,  8.62s/it][h264 @ 0x55e52356af40] mmco: unref short failure
 85%|████████▌ | 1326/1556 [5:04:37<29:47,  7.77s/it][h264 @ 0x561670c06400] mmco: unref short failure
[h264 @ 0x561670c06400] mmco: unref short failure
[h264 @ 0x55e4fa3ef380] mmco: unref short failure
[h264 @ 0x55e4fa3ef380] mmco: unref short failure
 85%|████████▌ | 1327/1556 [5:04:45<29:42,  7.79s/it][h264 @ 0x55c980a5c300] mmco: unref short failure
[h264 @ 0x55e521e77ec0] mmco: unref short failure
[h264 @ 0x5616bede5240] mmco: unref short failure
[h264 @ 0x5616bede5240] mmco: unref short failure
[h264 @ 0x5649b8f68240] mmco: unref short failure
[h264 @ 0x55c97a077840] mmco: unref short failure
[h264 @ 0x5616a9d95e80] mmco: unref short failure
[h264 @ 0x5616a9d95e80] mmco: unref short failure
[h264 @ 0x5649dca4c800] mmco: unref short failure
[h264 @ 0x55c9730adec0] mmco: unref short failure
[h264 @ 0x55c98009ae00] mmco: unref short failure
[h264 @ 0x55e5334e0640] mmco: unref short failure
 85%|████████▌ | 1328/1556 [5:05:39<1:22:34, 21.73s/it] 85%|████████▌ | 1329/1556 [5:05:45<1:04:05, 16.94s/it][h264 @ 0x55e52ec7af40] mmco: unref short failure
[h264 @ 0x5616ab2a6a00] mmco: unref short failure
 85%|████████▌ | 1330/1556 [5:05:50<50:16, 13.35s/it]   86%|████████▌ | 1331/1556 [5:05:55<40:37, 10.83s/it][h264 @ 0x561671aa72c0] mmco: unref short failure
[h264 @ 0x561671aa72c0] mmco: unref short failure
 86%|████████▌ | 1332/1556 [5:06:00<34:29,  9.24s/it] 86%|████████▌ | 1333/1556 [5:06:06<29:57,  8.06s/it][h264 @ 0x55c98010b840] mmco: unref short failure
[h264 @ 0x55c98010b840] mmco: unref short failure
[h264 @ 0x5616716885c0] mmco: unref short failure
[h264 @ 0x5616716885c0] mmco: unref short failure
[h264 @ 0x55e532dac380] mmco: unref short failure
[h264 @ 0x55e532dac380] mmco: unref short failure
[h264 @ 0x5616b1b0c900] mmco: unref short failure
 86%|████████▌ | 1334/1556 [5:06:14<30:11,  8.16s/it][h264 @ 0x561670c06640] mmco: unref short failure
[h264 @ 0x561670c06640] mmco: unref short failure
 86%|████████▌ | 1335/1556 [5:06:26<33:43,  9.16s/it][h264 @ 0x5649e79fe180] mmco: unref short failure
[h264 @ 0x55e533419c00] mmco: unref short failure
[h264 @ 0x55e533419c00] mmco: unref short failure
[h264 @ 0x5649ead0ba80] mmco: unref short failure
[h264 @ 0x55e530836c00] mmco: unref short failure
[h264 @ 0x55e530836c00] mmco: unref short failure
[h264 @ 0x55e51f683640] mmco: unref short failure
[h264 @ 0x561670fb5840] mmco: unref short failure
[h264 @ 0x561670fb5840] mmco: unref short failure
[h264 @ 0x5616abf379c0] mmco: unref short failure
[h264 @ 0x5616abf379c0] mmco: unref short failure
[h264 @ 0x5616b32c7540] mmco: unref short failure
[h264 @ 0x5616b32c7540] mmco: unref short failure
[h264 @ 0x5616bf897f40] mmco: unref short failure
[h264 @ 0x55c9751a5b40] mmco: unref short failure
[h264 @ 0x55c97b253dc0] mmco: unref short failure
[h264 @ 0x55c9807a9d00] mmco: unref short failure
[h264 @ 0x55c9807a9d00] mmco: unref short failure
[h264 @ 0x5616ba7f6b80] mmco: unref short failure
[h264 @ 0x5616ba7f6b80] mmco: unref short failure
[h264 @ 0x5649db862d40] mmco: unref short failure
[h264 @ 0x5649db862d40] mmco: unref short failure
[h264 @ 0x55e5216a9f80] mmco: unref short failure
[h264 @ 0x55e5216a9f80] mmco: unref short failure
[h264 @ 0x55e5216a9f80] mmco: unref short failure
[h264 @ 0x55e5216a9f80] mmco: unref short failure
 86%|████████▌ | 1336/1556 [5:07:26<1:29:25, 24.39s/it] 86%|████████▌ | 1337/1556 [5:07:31<1:07:57, 18.62s/it][h264 @ 0x55e4f9d78380] mmco: unref short failure
[h264 @ 0x55e4f9d78380] mmco: unref short failure
[h264 @ 0x55e4f9d78380] mmco: unref short failure
[h264 @ 0x55e4f9d78380] mmco: unref short failure
[h264 @ 0x55c982e98740] mmco: unref short failure
 86%|████████▌ | 1338/1556 [5:07:36<53:19, 14.68s/it]   86%|████████▌ | 1339/1556 [5:07:42<43:17, 11.97s/it] 86%|████████▌ | 1340/1556 [5:07:47<35:46,  9.94s/it][h264 @ 0x55c97c5db6c0] mmco: unref short failure
[h264 @ 0x55c97c5db6c0] mmco: unref short failure
 86%|████████▌ | 1341/1556 [5:07:52<30:37,  8.55s/it][h264 @ 0x55c9383f23c0] mmco: unref short failure
 86%|████████▌ | 1342/1556 [5:07:58<27:28,  7.70s/it][h264 @ 0x55c9836e2740] mmco: unref short failure
[h264 @ 0x55c9836e2740] mmco: unref short failure
 86%|████████▋ | 1343/1556 [5:08:08<30:07,  8.48s/it][h264 @ 0x561671c61f00] mmco: unref short failure
[h264 @ 0x561671c61f00] mmco: unref short failure
[h264 @ 0x561671c61f00] mmco: unref short failure
[h264 @ 0x561671c61f00] mmco: unref short failure
[h264 @ 0x55c986130040] mmco: unref short failure
[h264 @ 0x55c986130040] mmco: unref short failure
[h264 @ 0x55c97d178300] mmco: unref short failure
[h264 @ 0x55e534e9b680] mmco: unref short failure
[h264 @ 0x55c97d02c100] mmco: unref short failure
[h264 @ 0x55c97d02c100] mmco: unref short failure
[h264 @ 0x5616ad8b8700] mmco: unref short failure
[h264 @ 0x5649e978b300] mmco: unref short failure
 86%|████████▋ | 1344/1556 [5:09:03<1:19:06, 22.39s/it][h264 @ 0x55e5294a8480] mmco: unref short failure
[h264 @ 0x5649df9fdd00] mmco: unref short failure
[h264 @ 0x5649df9fdd00] mmco: unref short failure
 86%|████████▋ | 1345/1556 [5:09:09<1:00:56, 17.33s/it][h264 @ 0x55c9708d1800] mmco: unref short failure
[h264 @ 0x55c9708d1800] mmco: unref short failure
 87%|████████▋ | 1346/1556 [5:09:15<48:36, 13.89s/it]  [h264 @ 0x55c9847b3b40] mmco: unref short failure
[h264 @ 0x55e525b443c0] mmco: unref short failure
[h264 @ 0x55e525b443c0] mmco: unref short failure
[h264 @ 0x55e525b443c0] mmco: unref short failure
[h264 @ 0x55e525b443c0] mmco: unref short failure
 87%|████████▋ | 1347/1556 [5:09:20<39:18, 11.28s/it][h264 @ 0x55e4f9e23580] mmco: unref short failure
[h264 @ 0x55e4f9e23580] mmco: unref short failure
 87%|████████▋ | 1348/1556 [5:09:25<33:07,  9.56s/it][h264 @ 0x5616c0ce7300] mmco: unref short failure
 87%|████████▋ | 1349/1556 [5:09:31<28:51,  8.36s/it][h264 @ 0x5649eebdb5c0] mmco: unref short failure
[h264 @ 0x5649eebdb5c0] mmco: unref short failure
09/07/2024 00:45:12 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.188356876373291, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.05108637735247612, 'loss_ret%tv%ta--finetune_area/loss_area': 2.816412925720215, 'loss_ret%tv%ta--finetune_area/total_loss': 6.055856227874756}
[h264 @ 0x5649eebdae80] mmco: unref short failure
 87%|████████▋ | 1350/1556 [5:09:36<25:54,  7.54s/it][h264 @ 0x5649db08f9c0] mmco: unref short failure
 87%|████████▋ | 1351/1556 [5:09:42<23:43,  6.94s/it][h264 @ 0x55c973e08540] mmco: unref short failure
[h264 @ 0x5616aaa3a2c0] mmco: unref short failure
[h264 @ 0x55e52c5bae00] mmco: unref short failure
[h264 @ 0x5649e8a19c40] mmco: unref short failure
[h264 @ 0x5649e42556c0] mmco: unref short failure
[h264 @ 0x5649e42556c0] mmco: unref short failure
[h264 @ 0x55c97326a340] mmco: unref short failure
[h264 @ 0x55c9748b8d00] mmco: unref short failure
 87%|████████▋ | 1352/1556 [5:10:48<1:23:37, 24.59s/it][h264 @ 0x5649db643780] mmco: unref short failure
[h264 @ 0x5649db643780] mmco: unref short failure
 87%|████████▋ | 1353/1556 [5:10:53<1:03:35, 18.79s/it][h264 @ 0x5649e902cdc0] mmco: unref short failure
 87%|████████▋ | 1354/1556 [5:10:58<49:42, 14.77s/it]  [h264 @ 0x5649e12f51c0] mmco: unref short failure
[h264 @ 0x5649e12f51c0] mmco: unref short failure
 87%|████████▋ | 1355/1556 [5:11:04<40:11, 12.00s/it][h264 @ 0x5616b9ce31c0] mmco: unref short failure
 87%|████████▋ | 1356/1556 [5:11:09<33:21, 10.01s/it] 87%|████████▋ | 1357/1556 [5:11:15<28:45,  8.67s/it] 87%|████████▋ | 1358/1556 [5:11:20<25:10,  7.63s/it][h264 @ 0x561671242280] mmco: unref short failure
[h264 @ 0x561671242280] mmco: unref short failure
[h264 @ 0x561671242280] mmco: unref short failure
[h264 @ 0x561671242280] mmco: unref short failure
[h264 @ 0x55e532a4e240] mmco: unref short failure
[h264 @ 0x55e532a4e240] mmco: unref short failure
 87%|████████▋ | 1359/1556 [5:11:26<23:21,  7.12s/it][h264 @ 0x55c97ef9ed00] mmco: unref short failure
[h264 @ 0x55c97a0e6c40] mmco: unref short failure
[h264 @ 0x55c97a0e6c40] mmco: unref short failure
[h264 @ 0x5616b2598b00] mmco: unref short failure
[h264 @ 0x561670eda540] mmco: unref short failure
[h264 @ 0x55e51f42c5c0] mmco: unref short failure
[h264 @ 0x55e51f42c5c0] mmco: unref short failure
[h264 @ 0x55e525d1ad00] mmco: unref short failure
[h264 @ 0x55c976d29340] mmco: unref short failure
[h264 @ 0x55c976d29340] mmco: unref short failure
[h264 @ 0x5649eeacbc40] mmco: unref short failure
[h264 @ 0x5616b847a1c0] mmco: unref short failure
[h264 @ 0x5616b847a1c0] mmco: unref short failure
[h264 @ 0x55c973dbaa40] mmco: unref short failure
[h264 @ 0x5616af3ca680] mmco: unref short failure
[h264 @ 0x5616af3ca680] mmco: unref short failure
[h264 @ 0x55e535991980] mmco: unref short failure
[h264 @ 0x5649dbd348c0] mmco: unref short failure
[h264 @ 0x5649dbd348c0] mmco: unref short failure
[h264 @ 0x55c9710b9a40] mmco: unref short failure
[h264 @ 0x55c9710b9a40] mmco: unref short failure
[h264 @ 0x56167043ad80] mmco: unref short failure
[h264 @ 0x56167043ad80] mmco: unref short failure
[h264 @ 0x5649dc947740] mmco: unref short failure
[h264 @ 0x5649dc947740] mmco: unref short failure
[h264 @ 0x55c96f862980] mmco: unref short failure
[h264 @ 0x55c96f862980] mmco: unref short failure
 87%|████████▋ | 1360/1556 [5:12:31<1:19:52, 24.45s/it][h264 @ 0x55e52020f4c0] mmco: unref short failure
 87%|████████▋ | 1361/1556 [5:12:36<1:01:03, 18.79s/it][h264 @ 0x55e51f68a240] mmco: unref short failure
[h264 @ 0x55e51f68a240] mmco: unref short failure
 88%|████████▊ | 1362/1556 [5:12:42<47:25, 14.67s/it]  [h264 @ 0x55c938498c00] mmco: unref short failure
[h264 @ 0x55c938498c00] mmco: unref short failure
[h264 @ 0x55e53483dc40] mmco: unref short failure
 88%|████████▊ | 1363/1556 [5:12:47<38:26, 11.95s/it][h264 @ 0x55c977929a00] mmco: unref short failure
[h264 @ 0x55c977929a00] mmco: unref short failure
 88%|████████▊ | 1364/1556 [5:12:53<32:15, 10.08s/it] 88%|████████▊ | 1365/1556 [5:12:59<28:09,  8.84s/it][h264 @ 0x5616af060700] mmco: unref short failure
 88%|████████▊ | 1366/1556 [5:13:05<25:46,  8.14s/it][h264 @ 0x55c938d45740] mmco: unref short failure
[h264 @ 0x55c938d45740] mmco: unref short failure
[h264 @ 0x55c938d45740] mmco: unref short failure
[h264 @ 0x55c938d45740] mmco: unref short failure
 88%|████████▊ | 1367/1556 [5:13:11<23:23,  7.42s/it][h264 @ 0x5649b9a15b00] mmco: unref short failure
[h264 @ 0x55e5289cc500] mmco: unref short failure
[h264 @ 0x55e5289cc500] mmco: unref short failure
[h264 @ 0x55c9708336c0] mmco: unref short failure
[h264 @ 0x55e52814e180] mmco: unref short failure
[h264 @ 0x55e52814e180] mmco: unref short failure
[h264 @ 0x55e52814e180] mmco: unref short failure
[h264 @ 0x55e52814e180] mmco: unref short failure
[h264 @ 0x5616b30ca740] mmco: unref short failure
[h264 @ 0x5616b30ca740] mmco: unref short failure
[h264 @ 0x55e534330400] mmco: unref short failure
[h264 @ 0x5616b9a76e00] mmco: unref short failure
 88%|████████▊ | 1368/1556 [5:14:12<1:13:39, 23.51s/it] 88%|████████▊ | 1369/1556 [5:14:17<55:57, 17.96s/it]   88%|████████▊ | 1370/1556 [5:14:23<44:10, 14.25s/it][h264 @ 0x55e522aa1d40] mmco: unref short failure
[h264 @ 0x55e522aa1d40] mmco: unref short failure
 88%|████████▊ | 1371/1556 [5:14:28<35:35, 11.54s/it] 88%|████████▊ | 1372/1556 [5:14:33<29:42,  9.69s/it] 88%|████████▊ | 1373/1556 [5:14:39<25:33,  8.38s/it] 88%|████████▊ | 1374/1556 [5:14:44<23:04,  7.61s/it][h264 @ 0x55c972600fc0] mmco: unref short failure
[h264 @ 0x55c972600fc0] mmco: unref short failure
[h264 @ 0x5616aec555c0] mmco: unref short failure
 88%|████████▊ | 1375/1556 [5:14:52<22:39,  7.51s/it][h264 @ 0x55c971247440] mmco: unref short failure
[h264 @ 0x5616aeada140] mmco: unref short failure
[h264 @ 0x5616aeada140] mmco: unref short failure
[h264 @ 0x5616aeada140] mmco: unref short failure
[h264 @ 0x5616aeada140] mmco: unref short failure
[h264 @ 0x55c977f77140] mmco: unref short failure
[h264 @ 0x55e4fa2d6ac0] mmco: unref short failure
[h264 @ 0x55e4fa2d6ac0] mmco: unref short failure
[h264 @ 0x55e531a5dfc0] mmco: unref short failure
[h264 @ 0x55c978a41b40] mmco: unref short failure
 88%|████████▊ | 1376/1556 [5:15:47<1:05:07, 21.71s/it][h264 @ 0x55c979e465c0] mmco: unref short failure
[h264 @ 0x55c979e465c0] mmco: unref short failure
[h264 @ 0x55c979e465c0] mmco: unref short failure
[h264 @ 0x55c979e465c0] mmco: unref short failure
 88%|████████▊ | 1377/1556 [5:15:52<49:53, 16.72s/it]  [h264 @ 0x55c979e465c0] mmco: unref short failure
[h264 @ 0x55c979e465c0] mmco: unref short failure
[h264 @ 0x55c97a89e600] mmco: unref short failure
 89%|████████▊ | 1378/1556 [5:15:57<39:14, 13.23s/it] 89%|████████▊ | 1379/1556 [5:16:03<32:39, 11.07s/it][h264 @ 0x55c9390eb2c0] mmco: unref short failure
[h264 @ 0x55c9390eb2c0] mmco: unref short failure
 89%|████████▊ | 1380/1556 [5:16:08<26:59,  9.20s/it][h264 @ 0x56167175d240] mmco: unref short failure
 89%|████████▉ | 1381/1556 [5:16:13<23:25,  8.03s/it] 89%|████████▉ | 1382/1556 [5:16:19<21:14,  7.32s/it] 89%|████████▉ | 1383/1556 [5:16:32<26:40,  9.25s/it][h264 @ 0x5616a9559e40] mmco: unref short failure
[h264 @ 0x5616a9559e40] mmco: unref short failure
[h264 @ 0x5616b1fe6e80] mmco: unref short failure
[h264 @ 0x5616bf496f40] mmco: unref short failure
[h264 @ 0x5616bf496f40] mmco: unref short failure
[h264 @ 0x5616aaf2f440] mmco: unref short failure
[h264 @ 0x5616aaf2f440] mmco: unref short failure
[h264 @ 0x55e525d1ad00] mmco: unref short failure
[h264 @ 0x55e5307aa300] mmco: unref short failure
[h264 @ 0x55e5307aa300] mmco: unref short failure
[h264 @ 0x55e5307aa300] mmco: unref short failure
[h264 @ 0x55e5307aa300] mmco: unref short failure
[h264 @ 0x55e5307aa300] mmco: unref short failure
[h264 @ 0x55e5307aa300] mmco: unref short failure
[h264 @ 0x55e522812600] mmco: unref short failure
[h264 @ 0x55e522812600] mmco: unref short failure
[h264 @ 0x55c971c5e500] mmco: unref short failure
 89%|████████▉ | 1384/1556 [5:17:29<1:07:06, 23.41s/it][h264 @ 0x5649dafb6cc0] mmco: unref short failure
[h264 @ 0x5649dafb6cc0] mmco: unref short failure
[h264 @ 0x5649dee85300] mmco: unref short failure
 89%|████████▉ | 1385/1556 [5:17:34<51:28, 18.06s/it]  [h264 @ 0x55c9843c3400] mmco: unref short failure
 89%|████████▉ | 1386/1556 [5:17:40<40:32, 14.31s/it][h264 @ 0x55e520a92440] mmco: unref short failure
[h264 @ 0x5616b0149580] mmco: unref short failure
 89%|████████▉ | 1387/1556 [5:17:46<33:08, 11.76s/it][h264 @ 0x5616b738bb40] mmco: unref short failure
[h264 @ 0x5616b738bb40] mmco: unref short failure
 89%|████████▉ | 1388/1556 [5:17:51<27:36,  9.86s/it][h264 @ 0x55e53479e880] mmco: unref short failure
 89%|████████▉ | 1389/1556 [5:17:57<23:42,  8.52s/it][h264 @ 0x55c937ff3e40] mmco: unref short failure
 89%|████████▉ | 1390/1556 [5:18:01<20:32,  7.42s/it][h264 @ 0x5649e59a0b80] mmco: unref short failure
[h264 @ 0x5649e59a0b80] mmco: unref short failure
 89%|████████▉ | 1391/1556 [5:18:07<18:33,  6.75s/it][h264 @ 0x5616b814a2c0] mmco: unref short failure
[h264 @ 0x5616b814a2c0] mmco: unref short failure
[h264 @ 0x55c976263ec0] mmco: unref short failure
[h264 @ 0x55c976263ec0] mmco: unref short failure
[h264 @ 0x55c9387e2dc0] mmco: unref short failure
[h264 @ 0x55e5259ca100] mmco: unref short failure
[h264 @ 0x55e5259ca100] mmco: unref short failure
[h264 @ 0x5649e59a1000] mmco: unref short failure
[h264 @ 0x55c972daf7c0] mmco: unref short failure
[h264 @ 0x55c972daf7c0] mmco: unref short failure
[h264 @ 0x5616a9c4ae80] mmco: unref short failure
[h264 @ 0x5616a9c4ae80] mmco: unref short failure
[h264 @ 0x5616a9c4ae80] mmco: unref short failure
[h264 @ 0x55e5307312c0] mmco: unref short failure
[h264 @ 0x55e52bd64c40] mmco: unref short failure
[h264 @ 0x5649e4242480] mmco: unref short failure
[h264 @ 0x5649f15af600] mmco: unref short failure
 89%|████████▉ | 1392/1556 [5:19:08<1:03:26, 23.21s/it] 90%|████████▉ | 1393/1556 [5:19:15<49:23, 18.18s/it]   90%|████████▉ | 1394/1556 [5:19:20<38:41, 14.33s/it][h264 @ 0x55e52c80aa40] mmco: unref short failure
 90%|████████▉ | 1395/1556 [5:19:26<31:23, 11.70s/it][h264 @ 0x55c9383f1c80] mmco: unref short failure
 90%|████████▉ | 1396/1556 [5:19:31<26:31,  9.95s/it] 90%|████████▉ | 1397/1556 [5:19:37<22:32,  8.51s/it][h264 @ 0x55e531bb3c40] mmco: unref short failure
[h264 @ 0x55e531bb3c40] mmco: unref short failure
 90%|████████▉ | 1398/1556 [5:19:42<19:39,  7.47s/it][h264 @ 0x5616b840cf80] mmco: unref short failure
[h264 @ 0x55e524fd0600] mmco: unref short failure
 90%|████████▉ | 1399/1556 [5:19:48<18:28,  7.06s/it][h264 @ 0x55e523b41500] mmco: unref short failure
[h264 @ 0x55e523b41500] mmco: unref short failure
[h264 @ 0x55e532da1cc0] mmco: unref short failure
[h264 @ 0x55e532da1cc0] mmco: unref short failure
[h264 @ 0x55e525f59480] mmco: unref short failure
[h264 @ 0x55e525f59480] mmco: unref short failure
[h264 @ 0x5649eee35300] mmco: unref short failure
[h264 @ 0x5649eee35300] mmco: unref short failure
[h264 @ 0x55e52bd650c0] mmco: unref short failure
[h264 @ 0x5649e96ed740] mmco: unref short failure
[h264 @ 0x5649e96ed740] mmco: unref short failure
[h264 @ 0x55e51fd647c0] mmco: unref short failure
[h264 @ 0x55e51fd647c0] mmco: unref short failure
[h264 @ 0x5616bc484040] mmco: unref short failure
[h264 @ 0x5616bc484040] mmco: unref short failure
[h264 @ 0x5616bc484040] mmco: unref short failure
[h264 @ 0x5616bc484040] mmco: unref short failure
[h264 @ 0x5616b39f87c0] mmco: unref short failure
[h264 @ 0x55e52e1d81c0] mmco: unref short failure
[h264 @ 0x55e52e1d81c0] mmco: unref short failure
[h264 @ 0x5649e8362180] mmco: unref short failure
[h264 @ 0x5649e8362180] mmco: unref short failure
[h264 @ 0x5649e8362180] mmco: unref short failure
[h264 @ 0x5649e8362180] mmco: unref short failure
09/07/2024 00:56:21 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.169114112854004, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.05091765150427818, 'loss_ret%tv%ta--finetune_area/loss_area': 2.852842092514038, 'loss_ret%tv%ta--finetune_area/total_loss': 6.072874069213867}
 90%|████████▉ | 1400/1556 [5:20:46<58:08, 22.36s/it][h264 @ 0x561670314bc0] mmco: unref short failure
[h264 @ 0x5649e1b15f00] mmco: unref short failure
 90%|█████████ | 1401/1556 [5:20:53<46:07, 17.86s/it] 90%|█████████ | 1402/1556 [5:20:59<36:18, 14.14s/it] 90%|█████████ | 1403/1556 [5:21:04<29:22, 11.52s/it] 90%|█████████ | 1404/1556 [5:21:09<24:28,  9.66s/it][h264 @ 0x5616a8f009c0] mmco: unref short failure
[h264 @ 0x5616a8f009c0] mmco: unref short failure
 90%|█████████ | 1405/1556 [5:21:15<21:11,  8.42s/it][h264 @ 0x55e532aa1840] mmco: unref short failure
[h264 @ 0x55e532aa1840] mmco: unref short failure
 90%|█████████ | 1406/1556 [5:21:20<18:33,  7.43s/it][h264 @ 0x55e52f5bcac0] mmco: unref short failure
 90%|█████████ | 1407/1556 [5:21:26<17:15,  6.95s/it][h264 @ 0x55e535fb6400] mmco: unref short failure
[h264 @ 0x5616b4dfdac0] mmco: unref short failure
[h264 @ 0x5616b4dfdac0] mmco: unref short failure
[h264 @ 0x55c97b2e23c0] mmco: unref short failure
[h264 @ 0x55c97b2e23c0] mmco: unref short failure
[h264 @ 0x55c937e4ad40] mmco: unref short failure
[h264 @ 0x55c937e4ad40] mmco: unref short failure
[h264 @ 0x5616b9aec980] mmco: unref short failure
[h264 @ 0x5616b9aec980] mmco: unref short failure
[h264 @ 0x5616bb3f37c0] mmco: unref short failure
[h264 @ 0x55c96f9eff00] mmco: unref short failure
[h264 @ 0x55c96f9eff00] mmco: unref short failure
[h264 @ 0x5649dd09f180] mmco: unref short failure
[h264 @ 0x55e5297d29c0] mmco: unref short failure
[h264 @ 0x55e5297d29c0] mmco: unref short failure
[h264 @ 0x55e5297d29c0] mmco: unref short failure
[h264 @ 0x55e5297d29c0] mmco: unref short failure
[h264 @ 0x5649dad78c40] mmco: unref short failure
[h264 @ 0x5649dad78c40] mmco: unref short failure
[h264 @ 0x5616bcd9b6c0] mmco: unref short failure
 90%|█████████ | 1408/1556 [5:22:27<57:17, 23.23s/it] 91%|█████████ | 1409/1556 [5:22:33<44:21, 18.10s/it] 91%|█████████ | 1410/1556 [5:22:38<34:43, 14.27s/it][h264 @ 0x5616ae36a680] mmco: unref short failure
 91%|█████████ | 1411/1556 [5:22:43<27:42, 11.46s/it] 91%|█████████ | 1412/1556 [5:22:49<23:19,  9.72s/it] 91%|█████████ | 1413/1556 [5:22:55<20:50,  8.74s/it] 91%|█████████ | 1414/1556 [5:23:01<18:12,  7.70s/it][h264 @ 0x55c9709f5d40] mmco: unref short failure
 91%|█████████ | 1415/1556 [5:23:09<18:20,  7.81s/it][h264 @ 0x5649dad787c0] mmco: unref short failure
[h264 @ 0x5649dad787c0] mmco: unref short failure
[h264 @ 0x5649dad787c0] mmco: unref short failure
[h264 @ 0x5649dad787c0] mmco: unref short failure
[h264 @ 0x55c9754c1500] mmco: unref short failure
[h264 @ 0x55c9754c1500] mmco: unref short failure
[h264 @ 0x55c97acba880] mmco: unref short failure
[h264 @ 0x5616a97c6e80] mmco: unref short failure
[h264 @ 0x5616a97c6e80] mmco: unref short failure
 91%|█████████ | 1416/1556 [5:24:10<55:29, 23.78s/it][h264 @ 0x55c97b483c80] mmco: unref short failure
[h264 @ 0x55c97b483c80] mmco: unref short failure
 91%|█████████ | 1417/1556 [5:24:19<44:44, 19.31s/it][h264 @ 0x55e52d7bc100] mmco: unref short failure
[h264 @ 0x55e52d7bc100] mmco: unref short failure
 91%|█████████ | 1418/1556 [5:24:24<34:59, 15.21s/it] 91%|█████████ | 1419/1556 [5:24:30<28:08, 12.32s/it][h264 @ 0x55e535d77400] mmco: unref short failure
 91%|█████████▏| 1420/1556 [5:24:35<22:58, 10.13s/it] 91%|█████████▏| 1421/1556 [5:24:40<19:31,  8.68s/it][h264 @ 0x55e4f9f37cc0] mmco: unref short failure
 91%|█████████▏| 1422/1556 [5:24:46<17:08,  7.68s/it][h264 @ 0x5649de35ca00] mmco: unref short failure
 91%|█████████▏| 1423/1556 [5:24:51<15:35,  7.03s/it][h264 @ 0x5649e59d1ac0] mmco: unref short failure
[h264 @ 0x5649e59d1ac0] mmco: unref short failure
[h264 @ 0x55e530cf5480] mmco: unref short failure
[h264 @ 0x5616b56e3300] mmco: unref short failure
[h264 @ 0x5616b56e3300] mmco: unref short failure
[h264 @ 0x55c9828f5780] mmco: unref short failure
[h264 @ 0x55c938a97300] mmco: unref short failure
[h264 @ 0x5649eea59f80] mmco: unref short failure
[h264 @ 0x55e51f843a80] mmco: unref short failure
[h264 @ 0x55e51f843a80] mmco: unref short failure
[h264 @ 0x5649dd987200] mmco: unref short failure
[h264 @ 0x55c984632700] mmco: unref short failure
 92%|█████████▏| 1424/1556 [5:25:50<49:43, 22.60s/it][h264 @ 0x5616aa56c080] mmco: unref short failure
[h264 @ 0x55e5230324c0] mmco: unref short failure
 92%|█████████▏| 1425/1556 [5:26:00<40:48, 18.69s/it] 92%|█████████▏| 1426/1556 [5:26:05<31:52, 14.71s/it] 92%|█████████▏| 1427/1556 [5:26:10<25:34, 11.90s/it] 92%|█████████▏| 1428/1556 [5:26:16<21:11,  9.94s/it][h264 @ 0x55c983b03500] mmco: unref short failure
[h264 @ 0x55c983b03500] mmco: unref short failure
 92%|█████████▏| 1429/1556 [5:26:21<17:49,  8.43s/it][h264 @ 0x5649e982eb80] mmco: unref short failure
[h264 @ 0x5649e982eb80] mmco: unref short failure
 92%|█████████▏| 1430/1556 [5:26:26<15:39,  7.46s/it] 92%|█████████▏| 1431/1556 [5:26:31<14:20,  6.88s/it][h264 @ 0x55c938abd000] mmco: unref short failure
[h264 @ 0x5616b96be840] mmco: unref short failure
[h264 @ 0x5616b96be840] mmco: unref short failure
[h264 @ 0x5616b32a16c0] mmco: unref short failure
[h264 @ 0x55c977294580] mmco: unref short failure
[h264 @ 0x55c977294580] mmco: unref short failure
[h264 @ 0x55e52dc76640] mmco: unref short failure
[h264 @ 0x55e52dc76640] mmco: unref short failure
[h264 @ 0x5616a904ed40] mmco: unref short failure
[h264 @ 0x5616a904ed40] mmco: unref short failure
[h264 @ 0x55e52166b500] mmco: unref short failure
[h264 @ 0x5616aa907700] mmco: unref short failure
[h264 @ 0x5616aa907700] mmco: unref short failure
[h264 @ 0x5616ab3f5740] mmco: unref short failure
[h264 @ 0x5616ab3f5740] mmco: unref short failure
[h264 @ 0x55e52dbfb440] mmco: unref short failure
[h264 @ 0x55e52dbfb440] mmco: unref short failure
 92%|█████████▏| 1432/1556 [5:27:32<47:39, 23.06s/it] 92%|█████████▏| 1433/1556 [5:27:38<36:21, 17.73s/it] 92%|█████████▏| 1434/1556 [5:27:43<28:39, 14.09s/it] 92%|█████████▏| 1435/1556 [5:27:48<23:01, 11.42s/it] 92%|█████████▏| 1436/1556 [5:27:53<18:59,  9.50s/it] 92%|█████████▏| 1437/1556 [5:27:59<16:22,  8.26s/it][h264 @ 0x55e5313b7a00] mmco: unref short failure
[h264 @ 0x55e5313b7a00] mmco: unref short failure
[h264 @ 0x55e5313b7a00] mmco: unref short failure
[h264 @ 0x55e5313b7a00] mmco: unref short failure
 92%|█████████▏| 1438/1556 [5:28:04<14:35,  7.42s/it] 92%|█████████▏| 1439/1556 [5:28:10<13:27,  6.90s/it][h264 @ 0x55c97b2f3ac0] mmco: unref short failure
[h264 @ 0x55e52f13aec0] mmco: unref short failure
[h264 @ 0x55e52234c9c0] mmco: unref short failure
[h264 @ 0x5616aaeba180] mmco: unref short failure
[h264 @ 0x55c973746300] mmco: unref short failure
[h264 @ 0x55c973746300] mmco: unref short failure
[h264 @ 0x5616b80e8340] mmco: unref short failure
[h264 @ 0x5649e08ea980] mmco: unref short failure
 93%|█████████▎| 1440/1556 [5:29:15<46:56, 24.28s/it][h264 @ 0x5616aba59c80] mmco: unref short failure
 93%|█████████▎| 1441/1556 [5:29:20<35:35, 18.57s/it] 93%|█████████▎| 1442/1556 [5:29:25<27:41, 14.58s/it] 93%|█████████▎| 1443/1556 [5:29:31<22:13, 11.80s/it] 93%|█████████▎| 1444/1556 [5:29:35<17:56,  9.61s/it][h264 @ 0x55c97c644780] mmco: unref short failure
[h264 @ 0x55e52d06cbc0] mmco: unref short failure
[h264 @ 0x55e52d06cbc0] mmco: unref short failure
[h264 @ 0x55e52d06cbc0] mmco: unref short failure
 93%|█████████▎| 1445/1556 [5:29:41<15:40,  8.48s/it][h264 @ 0x55e532dd6bc0] mmco: unref short failure
[h264 @ 0x55e532dd6bc0] mmco: unref short failure
 93%|█████████▎| 1446/1556 [5:29:46<13:53,  7.58s/it][h264 @ 0x5649ee6029c0] mmco: unref short failure
[h264 @ 0x5649ee6029c0] mmco: unref short failure
[h264 @ 0x5649dbd2ff40] mmco: unref short failure
 93%|█████████▎| 1447/1556 [5:29:51<12:21,  6.80s/it][h264 @ 0x5616a8fd7380] mmco: unref short failure
[h264 @ 0x5616a8fd7380] mmco: unref short failure
[h264 @ 0x561670306300] mmco: unref short failure
[h264 @ 0x561670306300] mmco: unref short failure
[h264 @ 0x55e520f92e40] mmco: unref short failure
[h264 @ 0x55e520f92e40] mmco: unref short failure
[h264 @ 0x55c97bc52480] mmco: unref short failure
[h264 @ 0x5616b8e15800] mmco: unref short failure
[h264 @ 0x5616b8e15800] mmco: unref short failure
 93%|█████████▎| 1448/1556 [5:30:57<44:01, 24.46s/it] 93%|█████████▎| 1449/1556 [5:31:02<33:28, 18.77s/it][h264 @ 0x55c97a287000] mmco: unref short failure
[h264 @ 0x55c97a287000] mmco: unref short failure
09/07/2024 01:06:44 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.0100603103637695, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04430466517806053, 'loss_ret%tv%ta--finetune_area/loss_area': 2.420065402984619, 'loss_ret%tv%ta--finetune_area/total_loss': 5.474430084228516}
 93%|█████████▎| 1450/1556 [5:31:08<26:19, 14.90s/it] 93%|█████████▎| 1451/1556 [5:31:14<21:06, 12.07s/it][h264 @ 0x55c98577a600] mmco: unref short failure
[h264 @ 0x55c98577a600] mmco: unref short failure
[h264 @ 0x5649e82b9bc0] mmco: unref short failure
 93%|█████████▎| 1452/1556 [5:31:19<17:18,  9.99s/it] 93%|█████████▎| 1453/1556 [5:31:24<14:45,  8.60s/it] 93%|█████████▎| 1454/1556 [5:31:30<12:59,  7.64s/it][h264 @ 0x5616a8929680] mmco: unref short failure
[h264 @ 0x56167142ef80] mmco: unref short failure
[h264 @ 0x56167142ef80] mmco: unref short failure
 94%|█████████▎| 1455/1556 [5:31:34<11:23,  6.77s/it][h264 @ 0x55c97fab9c00] mmco: unref short failure
[h264 @ 0x5616afaa7f00] mmco: unref short failure
[h264 @ 0x55e526ede380] mmco: unref short failure
[h264 @ 0x55e526ede380] mmco: unref short failure
[h264 @ 0x5649e2114400] mmco: unref short failure
[h264 @ 0x55e533203b80] mmco: unref short failure
[h264 @ 0x55e533203b80] mmco: unref short failure
[h264 @ 0x55e533203b80] mmco: unref short failure
[h264 @ 0x55e533203b80] mmco: unref short failure
 94%|█████████▎| 1456/1556 [5:32:34<37:55, 22.76s/it] 94%|█████████▎| 1457/1556 [5:32:40<28:56, 17.54s/it] 94%|█████████▎| 1458/1556 [5:32:45<22:37, 13.86s/it][h264 @ 0x5649eea03040] mmco: unref short failure
 94%|█████████▍| 1459/1556 [5:32:51<18:31, 11.46s/it][h264 @ 0x55c9835d1040] mmco: unref short failure
[h264 @ 0x55c9835d1040] mmco: unref short failure
[h264 @ 0x55c9835d1040] mmco: unref short failure
[h264 @ 0x55c9835d1040] mmco: unref short failure
[h264 @ 0x55c9835d1040] mmco: unref short failure
[h264 @ 0x55c9835d1040] mmco: unref short failure
 94%|█████████▍| 1460/1556 [5:32:56<15:23,  9.62s/it] 94%|█████████▍| 1461/1556 [5:33:03<13:51,  8.75s/it][h264 @ 0x55c98033d3c0] mmco: unref short failure
[h264 @ 0x55c98033d3c0] mmco: unref short failure
[h264 @ 0x5649dd9f8200] mmco: unref short failure
[h264 @ 0x5649dd9f8200] mmco: unref short failure
[h264 @ 0x5616b01ef600] mmco: unref short failure
 94%|█████████▍| 1462/1556 [5:33:09<12:10,  7.77s/it][h264 @ 0x5649ea488c00] mmco: unref short failure
 94%|█████████▍| 1463/1556 [5:33:13<10:39,  6.87s/it][h264 @ 0x55c97d7cda00] mmco: unref short failure
[h264 @ 0x55e4fa865000] mmco: unref short failure
[h264 @ 0x55c9770fed40] mmco: unref short failure
[h264 @ 0x55c9770fed40] mmco: unref short failure
[h264 @ 0x5616a8de6c40] mmco: unref short failure
[h264 @ 0x5616bb395580] mmco: unref short failure
[h264 @ 0x5616bb395580] mmco: unref short failure
[h264 @ 0x5649dd7f6a80] mmco: unref short failure
[h264 @ 0x5649dd7f6a80] mmco: unref short failure
[h264 @ 0x55e532900880] mmco: unref short failure
[h264 @ 0x55e532900880] mmco: unref short failure
[h264 @ 0x55c97275acc0] mmco: unref short failure
[h264 @ 0x55c97275acc0] mmco: unref short failure
[h264 @ 0x55c972a83c40] mmco: unref short failure
[h264 @ 0x55c972a83c40] mmco: unref short failure
[h264 @ 0x55e52c486240] mmco: unref short failure
[h264 @ 0x5649b8e4bd00] mmco: unref short failure
[h264 @ 0x5649b8e4bd00] mmco: unref short failure
 94%|█████████▍| 1464/1556 [5:34:19<37:23, 24.38s/it][h264 @ 0x5649f01b4b40] mmco: unref short failure
[h264 @ 0x5649f01b4b40] mmco: unref short failure
 94%|█████████▍| 1465/1556 [5:34:24<28:16, 18.65s/it] 94%|█████████▍| 1466/1556 [5:34:30<22:23, 14.93s/it] 94%|█████████▍| 1467/1556 [5:34:35<17:55, 12.08s/it][h264 @ 0x5649dc4effc0] mmco: unref short failure
[h264 @ 0x5649dc4effc0] mmco: unref short failure
 94%|█████████▍| 1468/1556 [5:34:41<14:42, 10.03s/it] 94%|█████████▍| 1469/1556 [5:34:46<12:35,  8.68s/it][h264 @ 0x5649e2ed8c40] mmco: unref short failure
[h264 @ 0x5649e2ed8c40] mmco: unref short failure
[h264 @ 0x55c9383f1f00] mmco: unref short failure
[h264 @ 0x55c9383f1f00] mmco: unref short failure
 94%|█████████▍| 1470/1556 [5:34:52<11:14,  7.84s/it] 95%|█████████▍| 1471/1556 [5:34:58<10:12,  7.20s/it][h264 @ 0x5616abb63b40] mmco: unref short failure
[h264 @ 0x5616abb63b40] mmco: unref short failure
[h264 @ 0x5616b00b3080] mmco: unref short failure
[h264 @ 0x5616b00b3080] mmco: unref short failure
[h264 @ 0x55c9381af840] mmco: unref short failure
[h264 @ 0x55e52fcb1cc0] mmco: unref short failure
[h264 @ 0x5616b148ea00] mmco: unref short failure
[h264 @ 0x55c981fc9300] mmco: unref short failure
[h264 @ 0x55c981fc9300] mmco: unref short failure
[h264 @ 0x5616ae3ffbc0] mmco: unref short failure
[h264 @ 0x5616ae3ffbc0] mmco: unref short failure
[h264 @ 0x5649e8e91a00] mmco: unref short failure
[h264 @ 0x5649e8e91a00] mmco: unref short failure
[h264 @ 0x5616b71a3380] mmco: unref short failure
[h264 @ 0x55c984b46ec0] mmco: unref short failure
[h264 @ 0x5616bd854b40] mmco: unref short failure
[h264 @ 0x5649ee04d880] mmco: unref short failure
[h264 @ 0x5649ee04d880] mmco: unref short failure
 95%|█████████▍| 1472/1556 [5:36:05<35:12, 25.15s/it] 95%|█████████▍| 1473/1556 [5:36:10<26:32, 19.19s/it] 95%|█████████▍| 1474/1556 [5:36:15<20:26, 14.96s/it][h264 @ 0x5616b7780780] mmco: unref short failure
[h264 @ 0x5616b7780780] mmco: unref short failure
 95%|█████████▍| 1475/1556 [5:36:21<16:31, 12.24s/it][h264 @ 0x55e52a681340] mmco: unref short failure
 95%|█████████▍| 1476/1556 [5:36:27<13:35, 10.20s/it] 95%|█████████▍| 1477/1556 [5:36:32<11:38,  8.85s/it][h264 @ 0x5649ebf67340] mmco: unref short failure
[h264 @ 0x5649ebf67340] mmco: unref short failure
 95%|█████████▍| 1478/1556 [5:36:38<10:20,  7.96s/it] 95%|█████████▌| 1479/1556 [5:36:43<09:04,  7.07s/it][h264 @ 0x55e4fa7fdb40] mmco: unref short failure
[h264 @ 0x55e4fa7fdb40] mmco: unref short failure
[h264 @ 0x5649dfcdd2c0] mmco: unref short failure
[h264 @ 0x55e52fb46780] mmco: unref short failure
[h264 @ 0x55e52fb46780] mmco: unref short failure
 95%|█████████▌| 1480/1556 [5:37:47<30:40, 24.22s/it][h264 @ 0x5616717b3440] mmco: unref short failure
[h264 @ 0x5616717b3440] mmco: unref short failure
[h264 @ 0x5616717b3440] mmco: unref short failure
[h264 @ 0x5616717b3440] mmco: unref short failure
 95%|█████████▌| 1481/1556 [5:37:53<23:14, 18.59s/it][h264 @ 0x55e526609d00] mmco: unref short failure
[h264 @ 0x55c97a8970c0] mmco: unref short failure
[h264 @ 0x55c97a8970c0] mmco: unref short failure
 95%|█████████▌| 1482/1556 [5:37:58<17:55, 14.54s/it] 95%|█████████▌| 1483/1556 [5:38:02<14:01, 11.53s/it] 95%|█████████▌| 1484/1556 [5:38:08<11:45,  9.80s/it][h264 @ 0x55e527ec1ec0] mmco: unref short failure
[h264 @ 0x55e527ec1ec0] mmco: unref short failure
[h264 @ 0x55c971e91780] mmco: unref short failure
 95%|█████████▌| 1485/1556 [5:38:13<09:57,  8.42s/it] 96%|█████████▌| 1486/1556 [5:38:19<08:54,  7.64s/it][h264 @ 0x55e5272a1a00] mmco: unref short failure
[h264 @ 0x55e5272a1a00] mmco: unref short failure
 96%|█████████▌| 1487/1556 [5:38:24<07:53,  6.87s/it][h264 @ 0x5649ecead5c0] mmco: unref short failure
[h264 @ 0x55c97e084940] mmco: unref short failure
[h264 @ 0x5616ba3a8080] mmco: unref short failure
[h264 @ 0x5616ba3a8080] mmco: unref short failure
[h264 @ 0x5616ba3a8080] mmco: unref short failure
[h264 @ 0x5616ba3a8080] mmco: unref short failure
[h264 @ 0x5616b273b480] mmco: unref short failure
[h264 @ 0x5649e55d1540] mmco: unref short failure
[h264 @ 0x55e529526f80] mmco: unref short failure
[h264 @ 0x55e529526f80] mmco: unref short failure
[h264 @ 0x55e4fa68a0c0] mmco: unref short failure
[h264 @ 0x55e4fa68a0c0] mmco: unref short failure
[h264 @ 0x55e522a0d300] mmco: unref short failure
[h264 @ 0x55e522a0d300] mmco: unref short failure
[h264 @ 0x5649e5a1c540] mmco: unref short failure
[h264 @ 0x5649e5a1c540] mmco: unref short failure
[h264 @ 0x5649e9922400] mmco: unref short failure
[h264 @ 0x5616bcd9b940] mmco: unref short failure
[h264 @ 0x55e520fcd380] mmco: unref short failure
[h264 @ 0x5649e1f8a6c0] mmco: unref short failure
[h264 @ 0x55e525d5d2c0] mmco: unref short failure
[h264 @ 0x55e525d5d2c0] mmco: unref short failure
[h264 @ 0x55c938dd14c0] mmco: unref short failure
[h264 @ 0x55c938dd14c0] mmco: unref short failure
[h264 @ 0x5616ab9c4300] mmco: unref short failure
[h264 @ 0x5616ab9c4300] mmco: unref short failure
[h264 @ 0x5649de795980] mmco: unref short failure
[h264 @ 0x5649de795980] mmco: unref short failure
 96%|█████████▌| 1488/1556 [5:39:30<27:49, 24.54s/it][h264 @ 0x55c975b55fc0] mmco: unref short failure
[h264 @ 0x55c975b55fc0] mmco: unref short failure
 96%|█████████▌| 1489/1556 [5:39:36<21:04, 18.87s/it] 96%|█████████▌| 1490/1556 [5:39:41<16:07, 14.65s/it][h264 @ 0x55e526d20a40] mmco: unref short failure
[h264 @ 0x55c979de5fc0] mmco: unref short failure
 96%|█████████▌| 1491/1556 [5:39:46<12:50, 11.86s/it] 96%|█████████▌| 1492/1556 [5:39:51<10:30,  9.86s/it] 96%|█████████▌| 1493/1556 [5:39:56<08:47,  8.37s/it] 96%|█████████▌| 1494/1556 [5:40:02<07:50,  7.59s/it][h264 @ 0x5616ab74bcc0] mmco: unref short failure
[h264 @ 0x5616ab74bcc0] mmco: unref short failure
 96%|█████████▌| 1495/1556 [5:40:08<07:13,  7.10s/it][h264 @ 0x55e528125840] mmco: unref short failure
[h264 @ 0x55e528125840] mmco: unref short failure
[h264 @ 0x55c978121740] mmco: unref short failure
[h264 @ 0x55c978121740] mmco: unref short failure
[h264 @ 0x55c97cd72880] mmco: unref short failure
[h264 @ 0x55c97cd72880] mmco: unref short failure
[h264 @ 0x55c97cd72880] mmco: unref short failure
[h264 @ 0x55c97cd72880] mmco: unref short failure
[h264 @ 0x55c97cd72880] mmco: unref short failure
[h264 @ 0x55c97cd72880] mmco: unref short failure
[h264 @ 0x55e52edecbc0] mmco: unref short failure
[h264 @ 0x55e52edecbc0] mmco: unref short failure
[h264 @ 0x5616afe36b40] mmco: unref short failure
[h264 @ 0x5616afe36b40] mmco: unref short failure
[h264 @ 0x5649e662a000] mmco: unref short failure
[h264 @ 0x5616bf112900] mmco: unref short failure
[h264 @ 0x5616bf112900] mmco: unref short failure
[h264 @ 0x5616bf112900] mmco: unref short failure
[h264 @ 0x5616bf112900] mmco: unref short failure
[h264 @ 0x5616bf112900] mmco: unref short failure
[h264 @ 0x5616bf112900] mmco: unref short failure
[h264 @ 0x5649e24c7540] mmco: unref short failure
 96%|█████████▌| 1496/1556 [5:41:06<22:32, 22.54s/it] 96%|█████████▌| 1497/1556 [5:41:12<17:08, 17.43s/it][h264 @ 0x5616c02cbf80] mmco: unref short failure
[h264 @ 0x5616c02cbf80] mmco: unref short failure
 96%|█████████▋| 1498/1556 [5:41:17<13:25, 13.89s/it][h264 @ 0x5616bae57140] mmco: unref short failure
[h264 @ 0x5616bae57140] mmco: unref short failure
 96%|█████████▋| 1499/1556 [5:41:23<10:51, 11.42s/it]09/07/2024 01:17:02 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/07/2024 01:17:02 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5649e55d1540] mmco: unref short failure
[h264 @ 0x55e529c8aa00] mmco: unref short failure
[h264 @ 0x55e52f7e8e80] mmco: unref short failure
[h264 @ 0x55c938f824c0] mmco: unref short failure
[h264 @ 0x55e526372d40] mmco: unref short failure
[h264 @ 0x5649ebcc2880] mmco: unref short failure
[h264 @ 0x5616c02cbf80] mmco: unref short failure
[h264 @ 0x5616c02cbf80] mmco: unref short failure
[h264 @ 0x55c97ed201c0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:44,  2.11it/s][A
  1%|          | 2/221 [00:00<01:14,  2.95it/s][A
  1%|▏         | 3/221 [00:01<01:20,  2.71it/s][A
  2%|▏         | 4/221 [00:01<01:00,  3.56it/s][A
  2%|▏         | 5/221 [00:01<00:46,  4.62it/s][A
  3%|▎         | 7/221 [00:01<00:33,  6.43it/s][A
  4%|▎         | 8/221 [00:01<00:30,  6.94it/s][A
  4%|▍         | 9/221 [00:01<00:28,  7.44it/s][A
  5%|▍         | 10/221 [00:01<00:30,  6.89it/s][A
  5%|▌         | 12/221 [00:03<01:22,  2.54it/s][A
  6%|▌         | 13/221 [00:03<01:09,  3.01it/s][A
  6%|▋         | 14/221 [00:03<01:00,  3.44it/s][A
  7%|▋         | 15/221 [00:03<00:50,  4.10it/s][A
  7%|▋         | 16/221 [00:04<00:48,  4.20it/s][A
  8%|▊         | 17/221 [00:04<01:13,  2.77it/s][A
  8%|▊         | 18/221 [00:04<01:04,  3.16it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.77it/s][A
  9%|▉         | 20/221 [00:05<00:46,  4.36it/s][A
 10%|▉         | 22/221 [00:05<00:36,  5.46it/s][A
 11%|█         | 24/221 [00:05<00:28,  6.90it/s][A
 12%|█▏        | 26/221 [00:05<00:27,  7.04it/s][A
 13%|█▎        | 28/221 [00:06<00:28,  6.87it/s][A
 13%|█▎        | 29/221 [00:06<00:26,  7.28it/s][A
 14%|█▎        | 30/221 [00:06<00:28,  6.63it/s][A
 14%|█▍        | 31/221 [00:06<00:31,  5.95it/s][A
 15%|█▍        | 33/221 [00:06<00:27,  6.85it/s][A
 16%|█▌        | 35/221 [00:07<00:22,  8.13it/s][A
 16%|█▋        | 36/221 [00:07<00:26,  6.91it/s][A
 17%|█▋        | 37/221 [00:07<00:34,  5.33it/s][A
 17%|█▋        | 38/221 [00:08<01:01,  2.99it/s][A
 18%|█▊        | 40/221 [00:08<00:45,  3.98it/s][A[h264 @ 0x55c938dd14c0] mmco: unref short failure
[h264 @ 0x55c938dd14c0] mmco: unref short failure

 19%|█▉        | 42/221 [00:09<01:01,  2.90it/s][A
 20%|█▉        | 44/221 [00:09<00:44,  4.01it/s][A
 20%|██        | 45/221 [00:11<01:17,  2.28it/s][A
 21%|██        | 46/221 [00:11<01:07,  2.58it/s][A
 21%|██▏       | 47/221 [00:12<01:35,  1.82it/s][A
 22%|██▏       | 49/221 [00:12<01:06,  2.58it/s][A
 23%|██▎       | 50/221 [00:12<00:55,  3.06it/s][A
 24%|██▎       | 52/221 [00:12<00:38,  4.34it/s][A
 24%|██▍       | 53/221 [00:13<00:34,  4.85it/s][A
 24%|██▍       | 54/221 [00:14<01:07,  2.49it/s][A
 25%|██▍       | 55/221 [00:14<01:03,  2.61it/s][A
 26%|██▌       | 57/221 [00:14<00:42,  3.85it/s][A
 27%|██▋       | 59/221 [00:14<00:30,  5.34it/s][A
 27%|██▋       | 60/221 [00:16<01:23,  1.92it/s][A
 28%|██▊       | 61/221 [00:16<01:08,  2.34it/s][A
 28%|██▊       | 62/221 [00:16<01:00,  2.64it/s][A
 29%|██▊       | 63/221 [00:16<00:50,  3.12it/s][A
 29%|██▉       | 64/221 [00:17<01:00,  2.60it/s][A
 30%|██▉       | 66/221 [00:18<01:10,  2.19it/s][A
 30%|███       | 67/221 [00:18<01:03,  2.43it/s][A
 31%|███       | 68/221 [00:19<00:53,  2.84it/s][A
 31%|███       | 69/221 [00:20<01:25,  1.79it/s][A
 32%|███▏      | 71/221 [00:20<01:00,  2.47it/s][A
 33%|███▎      | 72/221 [00:20<00:58,  2.56it/s][A
 33%|███▎      | 73/221 [00:21<01:02,  2.37it/s][A
 34%|███▍      | 75/221 [00:21<00:47,  3.09it/s][A
 35%|███▍      | 77/221 [00:22<00:48,  2.96it/s][A
 36%|███▌      | 79/221 [00:22<00:38,  3.67it/s][A
 37%|███▋      | 81/221 [00:23<00:36,  3.81it/s][A
 37%|███▋      | 82/221 [00:23<00:44,  3.12it/s][A
 38%|███▊      | 83/221 [00:24<00:41,  3.32it/s][A
 39%|███▉      | 86/221 [00:24<00:23,  5.67it/s][A
 39%|███▉      | 87/221 [00:24<00:36,  3.64it/s][A
 40%|███▉      | 88/221 [00:25<00:45,  2.93it/s][A
 40%|████      | 89/221 [00:25<00:43,  3.03it/s][A
 41%|████      | 90/221 [00:26<00:44,  2.93it/s][A
 41%|████      | 91/221 [00:26<00:37,  3.51it/s][A
 42%|████▏     | 92/221 [00:26<00:31,  4.16it/s][A
 42%|████▏     | 93/221 [00:26<00:31,  4.07it/s][A
 43%|████▎     | 94/221 [00:27<00:34,  3.70it/s][A
 43%|████▎     | 95/221 [00:27<00:27,  4.52it/s][A
 43%|████▎     | 96/221 [00:27<00:44,  2.81it/s][A
 44%|████▍     | 97/221 [00:27<00:35,  3.48it/s][A
 44%|████▍     | 98/221 [00:28<00:50,  2.44it/s][A
 45%|████▌     | 100/221 [00:28<00:31,  3.89it/s][A
 46%|████▌     | 102/221 [00:30<00:50,  2.34it/s][A
 47%|████▋     | 104/221 [00:30<00:35,  3.28it/s][A
 48%|████▊     | 105/221 [00:30<00:33,  3.48it/s][A
 48%|████▊     | 106/221 [00:31<00:45,  2.55it/s][A
 49%|████▉     | 108/221 [00:31<00:30,  3.71it/s][A
 49%|████▉     | 109/221 [00:31<00:26,  4.17it/s][A
 50%|█████     | 111/221 [00:31<00:21,  5.10it/s][A
 51%|█████     | 112/221 [00:32<00:20,  5.34it/s][A
 51%|█████     | 113/221 [00:32<00:29,  3.70it/s][A
 52%|█████▏    | 116/221 [00:33<00:27,  3.82it/s][A
 53%|█████▎    | 117/221 [00:33<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:33<00:25,  3.98it/s][A
 54%|█████▍    | 119/221 [00:34<00:23,  4.41it/s][A
 54%|█████▍    | 120/221 [00:34<00:21,  4.65it/s][A
 55%|█████▌    | 122/221 [00:34<00:15,  6.49it/s][A
 56%|█████▌    | 123/221 [00:34<00:16,  5.95it/s][A
 57%|█████▋    | 125/221 [00:35<00:22,  4.23it/s][A
 57%|█████▋    | 126/221 [00:35<00:25,  3.74it/s][A
 57%|█████▋    | 127/221 [00:37<00:56,  1.66it/s][A
 58%|█████▊    | 128/221 [00:37<00:48,  1.90it/s][A
 59%|█████▉    | 130/221 [00:37<00:30,  3.00it/s][A
 60%|█████▉    | 132/221 [00:39<00:48,  1.83it/s][A
 60%|██████    | 133/221 [00:39<00:43,  2.03it/s][A
 61%|██████    | 134/221 [00:42<01:33,  1.07s/it][A
 61%|██████    | 135/221 [00:43<01:24,  1.02it/s][A
 62%|██████▏   | 136/221 [00:43<01:08,  1.24it/s][A
 62%|██████▏   | 137/221 [00:44<01:01,  1.37it/s][A
 62%|██████▏   | 138/221 [00:45<01:00,  1.36it/s][A
 63%|██████▎   | 139/221 [00:45<00:57,  1.43it/s][A
 63%|██████▎   | 140/221 [00:46<00:55,  1.46it/s][A
 64%|██████▍   | 141/221 [00:47<00:56,  1.41it/s][A
 64%|██████▍   | 142/221 [00:47<00:49,  1.60it/s][A
 65%|██████▍   | 143/221 [00:48<00:56,  1.39it/s][A
 66%|██████▌   | 145/221 [00:48<00:32,  2.37it/s][A
 67%|██████▋   | 147/221 [00:48<00:21,  3.48it/s][A
 67%|██████▋   | 149/221 [00:49<00:17,  4.22it/s][A
 68%|██████▊   | 151/221 [00:49<00:16,  4.22it/s][A
 69%|██████▉   | 152/221 [00:49<00:18,  3.79it/s][A
 69%|██████▉   | 153/221 [00:50<00:16,  4.04it/s][A
 70%|██████▉   | 154/221 [00:50<00:15,  4.29it/s][A
 70%|███████   | 155/221 [00:50<00:14,  4.51it/s][A
 71%|███████   | 156/221 [00:50<00:12,  5.03it/s][A
 71%|███████   | 157/221 [00:51<00:25,  2.47it/s][A
 71%|███████▏  | 158/221 [00:51<00:22,  2.84it/s][A
 72%|███████▏  | 159/221 [00:52<00:21,  2.94it/s][A
 73%|███████▎  | 161/221 [00:52<00:13,  4.41it/s][A
 73%|███████▎  | 162/221 [00:52<00:11,  4.97it/s][A
 74%|███████▍  | 163/221 [00:52<00:11,  5.14it/s][A
 74%|███████▍  | 164/221 [00:53<00:14,  3.88it/s][A
 75%|███████▍  | 165/221 [00:53<00:17,  3.29it/s][A
 75%|███████▌  | 166/221 [00:53<00:17,  3.09it/s][A
 76%|███████▌  | 168/221 [00:55<00:34,  1.54it/s][A
 77%|███████▋  | 170/221 [00:56<00:23,  2.19it/s][A
 77%|███████▋  | 171/221 [00:56<00:24,  2.07it/s][A
 78%|███████▊  | 172/221 [00:56<00:19,  2.55it/s][A
 78%|███████▊  | 173/221 [00:57<00:18,  2.57it/s][A
 79%|███████▉  | 175/221 [00:57<00:12,  3.65it/s][A
 80%|███████▉  | 176/221 [00:57<00:11,  3.86it/s][A
 81%|████████  | 178/221 [00:57<00:08,  5.07it/s][A
 81%|████████  | 179/221 [00:58<00:15,  2.78it/s][A
 82%|████████▏ | 181/221 [00:58<00:09,  4.11it/s][A
 82%|████████▏ | 182/221 [00:59<00:09,  3.97it/s][A
 83%|████████▎ | 183/221 [00:59<00:09,  4.09it/s][A
 83%|████████▎ | 184/221 [01:00<00:11,  3.13it/s][A
 84%|████████▍ | 186/221 [01:00<00:10,  3.48it/s][A
 85%|████████▍ | 187/221 [01:00<00:09,  3.68it/s][A
 85%|████████▌ | 188/221 [01:00<00:07,  4.15it/s][A
 86%|████████▌ | 189/221 [01:01<00:07,  4.56it/s][A
 86%|████████▌ | 190/221 [01:01<00:06,  4.50it/s][A
 87%|████████▋ | 192/221 [01:01<00:05,  5.30it/s][A
 88%|████████▊ | 194/221 [01:02<00:06,  4.07it/s][A
 88%|████████▊ | 195/221 [01:02<00:05,  4.56it/s][A
 89%|████████▉ | 197/221 [01:02<00:04,  5.39it/s][A
 90%|█████████ | 199/221 [01:02<00:03,  6.56it/s][A
 90%|█████████ | 200/221 [01:02<00:03,  7.00it/s][A
 91%|█████████ | 201/221 [01:03<00:02,  7.19it/s][A
 92%|█████████▏| 203/221 [01:03<00:02,  7.84it/s][A
 92%|█████████▏| 204/221 [01:03<00:02,  7.35it/s][A
 93%|█████████▎| 206/221 [01:03<00:02,  6.10it/s][A
 94%|█████████▍| 208/221 [01:04<00:01,  7.08it/s][A
 95%|█████████▍| 209/221 [01:04<00:02,  5.88it/s][A
 95%|█████████▌| 211/221 [01:04<00:01,  5.56it/s][A
 96%|█████████▌| 212/221 [01:04<00:01,  5.00it/s][A
 97%|█████████▋| 214/221 [01:05<00:02,  3.35it/s][A
 97%|█████████▋| 215/221 [01:06<00:01,  3.58it/s][A
 98%|█████████▊| 216/221 [01:06<00:01,  3.92it/s][A
 98%|█████████▊| 217/221 [01:07<00:02,  1.78it/s][A
 99%|█████████▊| 218/221 [01:07<00:01,  2.15it/s][A
 99%|█████████▉| 219/221 [01:08<00:00,  2.68it/s][A
100%|█████████▉| 220/221 [01:08<00:00,  2.30it/s][A100%|██████████| 221/221 [01:08<00:00,  3.21it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.79it/s][A
  1%|          | 2/221 [00:00<00:57,  3.79it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.79it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.79it/s][A
  2%|▏         | 5/221 [00:01<00:56,  3.79it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.79it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.79it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.79it/s][A
  4%|▍         | 9/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.79it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.79it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.79it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.79it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.79it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:51,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:47,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:46,  3.78it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:37,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:23<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 125/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 130/221 [00:34<00:23,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.79it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.79it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.79it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.79it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.79it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.79it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.79it/s][A
 65%|██████▌   | 144/221 [00:37<00:20,  3.79it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.79it/s][A
 67%|██████▋   | 149/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.79it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.79it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.79it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.79it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.79it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.79it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.79it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 159/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.79it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.79it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 163/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.79it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.79it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.79it/s][A
 76%|███████▌  | 168/221 [00:44<00:13,  3.79it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.79it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.79it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.79it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.79it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.79it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 178/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.79it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 182/221 [00:47<00:10,  3.79it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.79it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.79it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.79it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.79it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.79it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.79it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.79it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.79it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.79it/s][A
 89%|████████▉ | 197/221 [00:51<00:06,  3.79it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.79it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.79it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.79it/s][A
 91%|█████████ | 201/221 [00:52<00:05,  3.79it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.79it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.79it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.79it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.79it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.79it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.79it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.79it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▌| 212/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.79it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.79it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.79it/s][A
 98%|█████████▊| 216/221 [00:56<00:01,  3.79it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.79it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.79it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.79it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.79it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.79it/s][A100%|██████████| 221/221 [00:58<00:00,  3.79it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:34,  6.34it/s][A
  1%|          | 2/221 [00:00<00:40,  5.42it/s][A
  1%|▏         | 3/221 [00:00<00:43,  5.04it/s][A
  2%|▏         | 4/221 [00:00<00:36,  6.00it/s][A
  2%|▏         | 5/221 [00:00<00:31,  6.93it/s][A
  3%|▎         | 7/221 [00:01<00:30,  7.10it/s][A
  4%|▎         | 8/221 [00:01<00:29,  7.18it/s][A
  4%|▍         | 9/221 [00:01<00:30,  7.06it/s][A
  5%|▍         | 10/221 [00:01<00:48,  4.32it/s][A
  5%|▍         | 11/221 [00:01<00:42,  4.94it/s][A
  5%|▌         | 12/221 [00:02<00:40,  5.11it/s][A
  6%|▌         | 13/221 [00:02<00:51,  4.00it/s][A
  6%|▋         | 14/221 [00:02<00:42,  4.85it/s][A
  7%|▋         | 15/221 [00:02<00:43,  4.69it/s][A
  7%|▋         | 16/221 [00:03<00:49,  4.11it/s][A
  8%|▊         | 17/221 [00:03<01:14,  2.74it/s][A
  8%|▊         | 18/221 [00:03<01:00,  3.33it/s][A
  9%|▊         | 19/221 [00:04<00:50,  4.01it/s][A
  9%|▉         | 20/221 [00:04<00:42,  4.77it/s][A
 10%|▉         | 21/221 [00:04<00:36,  5.44it/s][A
 10%|▉         | 22/221 [00:04<00:36,  5.52it/s][A
 11%|█         | 24/221 [00:04<00:29,  6.72it/s][A
 11%|█▏        | 25/221 [00:04<00:29,  6.73it/s][A
 12%|█▏        | 26/221 [00:05<00:33,  5.81it/s][A
 13%|█▎        | 28/221 [00:05<00:31,  6.20it/s][A
 13%|█▎        | 29/221 [00:05<00:36,  5.31it/s][A
 14%|█▎        | 30/221 [00:06<00:54,  3.51it/s][A
 14%|█▍        | 31/221 [00:06<00:48,  3.88it/s][A
 14%|█▍        | 32/221 [00:06<00:40,  4.65it/s][A
 15%|█▍        | 33/221 [00:06<00:41,  4.56it/s][A
 16%|█▌        | 35/221 [00:07<00:33,  5.49it/s][A
 16%|█▋        | 36/221 [00:07<00:41,  4.50it/s][A
 17%|█▋        | 37/221 [00:07<00:39,  4.68it/s][A
 17%|█▋        | 38/221 [00:07<00:47,  3.86it/s][A
 18%|█▊        | 39/221 [00:08<00:41,  4.34it/s][A
 18%|█▊        | 40/221 [00:08<00:47,  3.81it/s][A
 19%|█▊        | 41/221 [00:08<00:39,  4.58it/s][A
 19%|█▉        | 42/221 [00:08<00:39,  4.57it/s][A
 19%|█▉        | 43/221 [00:08<00:35,  5.00it/s][A
 20%|█▉        | 44/221 [00:09<00:30,  5.85it/s][A
 20%|██        | 45/221 [00:09<00:36,  4.84it/s][A
 21%|██        | 46/221 [00:09<00:35,  4.97it/s][A
 21%|██▏       | 47/221 [00:09<00:37,  4.61it/s][A
 22%|██▏       | 49/221 [00:10<00:33,  5.19it/s][A
 23%|██▎       | 50/221 [00:10<00:36,  4.65it/s][A
 23%|██▎       | 51/221 [00:10<00:34,  4.91it/s][A
 24%|██▎       | 52/221 [00:10<00:43,  3.92it/s][A
 24%|██▍       | 54/221 [00:11<00:52,  3.19it/s][A
 25%|██▍       | 55/221 [00:11<00:49,  3.34it/s][A
 25%|██▌       | 56/221 [00:12<00:41,  4.02it/s][A
 26%|██▌       | 57/221 [00:12<00:38,  4.29it/s][A
 26%|██▌       | 58/221 [00:12<00:48,  3.38it/s][A
 27%|██▋       | 59/221 [00:12<00:39,  4.11it/s][A
 27%|██▋       | 60/221 [00:13<00:51,  3.14it/s][A
 28%|██▊       | 61/221 [00:13<00:41,  3.88it/s][A
 28%|██▊       | 62/221 [00:13<00:38,  4.16it/s][A
 29%|██▊       | 63/221 [00:14<00:43,  3.65it/s][A
 29%|██▉       | 64/221 [00:14<01:12,  2.18it/s][A
 30%|██▉       | 66/221 [00:15<01:00,  2.58it/s][A
 30%|███       | 67/221 [00:16<01:04,  2.38it/s][A
 31%|███       | 68/221 [00:16<00:55,  2.75it/s][A
 31%|███       | 69/221 [00:17<01:32,  1.64it/s][A
 32%|███▏      | 70/221 [00:17<01:13,  2.06it/s][A
 32%|███▏      | 71/221 [00:17<00:59,  2.52it/s][A
 33%|███▎      | 72/221 [00:18<01:00,  2.46it/s][A
 33%|███▎      | 73/221 [00:18<00:57,  2.59it/s][A
 34%|███▍      | 75/221 [00:18<00:40,  3.58it/s][A
 34%|███▍      | 76/221 [00:19<00:38,  3.75it/s][A
 35%|███▍      | 77/221 [00:19<00:46,  3.13it/s][A
 36%|███▌      | 79/221 [00:20<00:38,  3.67it/s][A
 36%|███▌      | 80/221 [00:20<00:34,  4.08it/s][A
 37%|███▋      | 81/221 [00:20<00:34,  4.04it/s][A
 37%|███▋      | 82/221 [00:20<00:35,  3.86it/s][A
 38%|███▊      | 83/221 [00:21<00:51,  2.68it/s][A
 38%|███▊      | 84/221 [00:21<00:41,  3.32it/s][A
 39%|███▉      | 86/221 [00:21<00:28,  4.77it/s][A
 39%|███▉      | 87/221 [00:22<00:37,  3.56it/s][A
 40%|███▉      | 88/221 [00:22<00:41,  3.23it/s][A
 40%|████      | 89/221 [00:22<00:37,  3.55it/s][A
 41%|████      | 90/221 [00:23<00:46,  2.80it/s][A
 41%|████      | 91/221 [00:23<00:38,  3.40it/s][A
 42%|████▏     | 92/221 [00:23<00:35,  3.61it/s][A
 42%|████▏     | 93/221 [00:24<00:46,  2.77it/s][A
 43%|████▎     | 94/221 [00:24<00:51,  2.46it/s][A
 43%|████▎     | 95/221 [00:25<00:45,  2.76it/s][A
 43%|████▎     | 96/221 [00:25<00:56,  2.20it/s][A
 44%|████▍     | 97/221 [00:25<00:46,  2.68it/s][A
 44%|████▍     | 98/221 [00:26<01:08,  1.80it/s][A
 45%|████▍     | 99/221 [00:27<00:53,  2.30it/s][A
 45%|████▌     | 100/221 [00:27<00:45,  2.66it/s][A
 46%|████▌     | 101/221 [00:27<00:40,  2.93it/s][A
 46%|████▌     | 102/221 [00:29<01:27,  1.37it/s][A
 47%|████▋     | 103/221 [00:29<01:05,  1.81it/s][A
 47%|████▋     | 104/221 [00:29<00:49,  2.34it/s][A
 48%|████▊     | 105/221 [00:29<00:44,  2.60it/s][A
 48%|████▊     | 106/221 [00:30<00:42,  2.71it/s][A
 48%|████▊     | 107/221 [00:30<00:35,  3.24it/s][A
 49%|████▉     | 108/221 [00:30<00:32,  3.48it/s][A
 49%|████▉     | 109/221 [00:30<00:28,  3.89it/s][A
 50%|████▉     | 110/221 [00:30<00:24,  4.45it/s][A
 50%|█████     | 111/221 [00:31<00:22,  4.82it/s][A
 51%|█████     | 112/221 [00:31<00:25,  4.25it/s][A
 51%|█████     | 113/221 [00:31<00:34,  3.13it/s][A
 52%|█████▏    | 115/221 [00:32<00:23,  4.42it/s][A
 52%|█████▏    | 116/221 [00:32<00:23,  4.40it/s][A
 53%|█████▎    | 117/221 [00:32<00:23,  4.34it/s][A
 53%|█████▎    | 118/221 [00:32<00:22,  4.61it/s][A
 54%|█████▍    | 119/221 [00:32<00:24,  4.23it/s][A
 54%|█████▍    | 120/221 [00:33<00:20,  4.99it/s][A
 55%|█████▍    | 121/221 [00:33<00:18,  5.52it/s][A
 55%|█████▌    | 122/221 [00:33<00:19,  5.05it/s][A
 56%|█████▌    | 123/221 [00:33<00:17,  5.45it/s][A
 56%|█████▌    | 124/221 [00:33<00:19,  4.89it/s][A
 57%|█████▋    | 125/221 [00:34<00:22,  4.29it/s][A
 57%|█████▋    | 126/221 [00:34<00:20,  4.66it/s][A
 57%|█████▋    | 127/221 [00:34<00:27,  3.46it/s][A
 58%|█████▊    | 128/221 [00:35<00:24,  3.72it/s][A
 59%|█████▉    | 130/221 [00:35<00:17,  5.24it/s][A
 60%|█████▉    | 132/221 [00:36<00:31,  2.79it/s][A
 60%|██████    | 133/221 [00:36<00:30,  2.90it/s][A
 61%|██████    | 134/221 [00:37<00:37,  2.30it/s][A
 61%|██████    | 135/221 [00:38<00:42,  2.01it/s][A
 62%|██████▏   | 136/221 [00:38<00:36,  2.36it/s][A
 62%|██████▏   | 137/221 [00:38<00:31,  2.71it/s][A
 62%|██████▏   | 138/221 [00:38<00:30,  2.75it/s][A
 63%|██████▎   | 139/221 [00:39<00:33,  2.45it/s][A
 63%|██████▎   | 140/221 [00:39<00:32,  2.49it/s][A
 64%|██████▍   | 141/221 [00:40<00:32,  2.46it/s][A
 64%|██████▍   | 142/221 [00:40<00:27,  2.90it/s][A
 65%|██████▍   | 143/221 [00:41<00:36,  2.11it/s][A
 65%|██████▌   | 144/221 [00:41<00:37,  2.06it/s][A
 66%|██████▌   | 146/221 [00:42<00:24,  3.08it/s][A
 67%|██████▋   | 147/221 [00:42<00:22,  3.27it/s][A
 67%|██████▋   | 148/221 [00:43<00:30,  2.38it/s][A
 67%|██████▋   | 149/221 [00:43<00:35,  2.05it/s][A
 68%|██████▊   | 150/221 [00:43<00:29,  2.40it/s][A
 68%|██████▊   | 151/221 [00:44<00:26,  2.68it/s][A
 69%|██████▉   | 152/221 [00:44<00:26,  2.64it/s][A
 69%|██████▉   | 153/221 [00:44<00:21,  3.13it/s][A
 70%|██████▉   | 154/221 [00:44<00:19,  3.51it/s][A
 70%|███████   | 155/221 [00:45<00:21,  3.00it/s][A
 71%|███████   | 156/221 [00:45<00:17,  3.75it/s][A
 71%|███████   | 157/221 [00:45<00:16,  3.77it/s][A
 71%|███████▏  | 158/221 [00:46<00:15,  3.94it/s][A
 72%|███████▏  | 159/221 [00:46<00:14,  4.31it/s][A
 73%|███████▎  | 161/221 [00:47<00:19,  3.01it/s][A
 73%|███████▎  | 162/221 [00:47<00:16,  3.52it/s][A
 74%|███████▍  | 163/221 [00:47<00:16,  3.62it/s][A
 74%|███████▍  | 164/221 [00:47<00:15,  3.67it/s][A
 75%|███████▍  | 165/221 [00:48<00:17,  3.11it/s][A
 75%|███████▌  | 166/221 [00:48<00:15,  3.65it/s][A
 76%|███████▌  | 167/221 [00:48<00:12,  4.46it/s][A
 76%|███████▌  | 168/221 [00:48<00:13,  3.86it/s][A
 77%|███████▋  | 170/221 [00:49<00:11,  4.32it/s][A
 77%|███████▋  | 171/221 [00:49<00:13,  3.60it/s][A
 78%|███████▊  | 172/221 [00:49<00:12,  3.97it/s][A
 78%|███████▊  | 173/221 [00:50<00:15,  3.08it/s][A
 79%|███████▊  | 174/221 [00:50<00:17,  2.68it/s][A
 79%|███████▉  | 175/221 [00:51<00:15,  2.97it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.30it/s][A
 81%|████████  | 178/221 [00:51<00:09,  4.53it/s][A
 81%|████████  | 179/221 [00:51<00:09,  4.32it/s][A
 81%|████████▏ | 180/221 [00:51<00:08,  4.59it/s][A
 82%|████████▏ | 181/221 [00:52<00:07,  5.30it/s][A
 82%|████████▏ | 182/221 [00:52<00:09,  4.24it/s][A
 83%|████████▎ | 183/221 [00:52<00:09,  3.95it/s][A
 83%|████████▎ | 184/221 [00:53<00:09,  3.77it/s][A
 84%|████████▎ | 185/221 [00:53<00:10,  3.50it/s][A
 84%|████████▍ | 186/221 [00:54<00:14,  2.38it/s][A
 85%|████████▍ | 187/221 [00:54<00:12,  2.71it/s][A
 85%|████████▌ | 188/221 [00:54<00:11,  2.93it/s][A
 86%|████████▌ | 189/221 [00:54<00:09,  3.32it/s][A
 86%|████████▌ | 190/221 [00:55<00:09,  3.22it/s][A
 87%|████████▋ | 192/221 [00:55<00:06,  4.27it/s][A
 87%|████████▋ | 193/221 [00:55<00:06,  4.59it/s][A
 88%|████████▊ | 194/221 [00:56<00:07,  3.60it/s][A
 88%|████████▊ | 195/221 [00:56<00:07,  3.37it/s][A
 89%|████████▊ | 196/221 [00:56<00:06,  4.05it/s][A
 89%|████████▉ | 197/221 [00:56<00:06,  3.69it/s][A
 90%|████████▉ | 198/221 [00:57<00:06,  3.74it/s][A
 90%|█████████ | 199/221 [00:57<00:05,  3.90it/s][A
 90%|█████████ | 200/221 [00:57<00:05,  3.91it/s][A
 91%|█████████ | 201/221 [00:57<00:04,  4.60it/s][A
 91%|█████████▏| 202/221 [00:58<00:04,  4.33it/s][A
 92%|█████████▏| 203/221 [00:58<00:03,  5.01it/s][A
 92%|█████████▏| 204/221 [00:58<00:04,  3.55it/s][A
 93%|█████████▎| 205/221 [00:58<00:03,  4.30it/s][A
 93%|█████████▎| 206/221 [00:59<00:03,  3.91it/s][A
 94%|█████████▍| 208/221 [00:59<00:02,  5.22it/s][A
 95%|█████████▍| 209/221 [00:59<00:02,  5.26it/s][A
 95%|█████████▌| 211/221 [00:59<00:01,  5.01it/s][A
 96%|█████████▌| 212/221 [01:00<00:02,  4.41it/s][A
 97%|█████████▋| 214/221 [01:01<00:02,  2.71it/s][A
 97%|█████████▋| 215/221 [01:01<00:02,  2.98it/s][A
 98%|█████████▊| 216/221 [01:01<00:01,  3.22it/s][A
 98%|█████████▊| 217/221 [01:02<00:01,  3.05it/s][A
 99%|█████████▊| 218/221 [01:02<00:00,  3.31it/s][A
 99%|█████████▉| 219/221 [01:02<00:00,  3.53it/s][A
100%|█████████▉| 220/221 [01:02<00:00,  4.08it/s][A
100%|██████████| 221/221 [01:02<00:00,  4.79it/s][A100%|██████████| 221/221 [01:02<00:00,  3.51it/s]
09/07/2024 01:22:20 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 1499--===========

09/07/2024 01:22:20 - INFO - __main__ -   {'area_r1': 24.3, 'area_recall': '24.3/48.5/59.4', 'area_ravg': 44.1}
09/07/2024 01:22:20 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 1499--===========

09/07/2024 01:22:20 - INFO - __main__ -   {'forward_r1': 38.8, 'forward_recall': '38.8/66.3/75.8', 'forward_ravg': 60.3}
09/07/2024 01:22:20 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 1499--===========

09/07/2024 01:22:20 - INFO - __main__ -   {'area_video_r1': 40.2, 'area_video_recall': '40.2/68.6/78.6', 'area_video_ravg': 62.4}
09/07/2024 01:22:20 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 599=======

09/07/2024 01:22:20 - INFO - __main__ -   {'area_video_r1': 40.3, 'area_video_recall': '40.3/69.1/79.2', 'area_video_ravg': 62.9}
09/07/2024 01:22:20 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 1499--===========

09/07/2024 01:22:20 - INFO - __main__ -   {'area_video_r1': 50.6, 'area_video_recall': '50.6/74.2/79.9', 'area_video_ravg': 68.2, 'area_video_back_r1': 50.5, 'area_video_back_recall': '50.5/73.3/81.2', 'area_video_back_ravg': 68.3}
09/07/2024 01:22:20 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 299=======

09/07/2024 01:22:20 - INFO - __main__ -   {'area_video_r1': 51.0, 'area_video_recall': '51.0/73.4/79.9', 'area_video_ravg': 68.1, 'area_video_back_r1': 51.0, 'area_video_back_recall': '51.0/73.8/81.9', 'area_video_back_ravg': 68.9}
09/07/2024 01:22:20 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 1499--===========

09/07/2024 01:22:20 - INFO - __main__ -   {'video_r1': 41.1, 'video_recall': '41.1/69.2/79.1', 'video_ravg': 63.1}
09/07/2024 01:22:20 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 299=======

09/07/2024 01:22:20 - INFO - __main__ -   {'video_r1': 43.3, 'video_recall': '43.3/70.8/80.2', 'video_ravg': 64.8}
09/07/2024 01:22:20 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 1499--===========

09/07/2024 01:22:20 - INFO - __main__ -   {'video_r1': 50.9, 'video_recall': '50.9/75.5/81.9', 'video_ravg': 69.4}
09/07/2024 01:22:20 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 299=======

09/07/2024 01:22:20 - INFO - __main__ -   {'video_r1': 52.0, 'video_recall': '52.0/75.3/81.8', 'video_ravg': 69.7}
09/07/2024 01:22:39 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.040153741836548, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04434213787317276, 'loss_ret%tv%ta--finetune_area/loss_area': 2.6302506923675537, 'loss_ret%tv%ta--finetune_area/total_loss': 5.714746475219727}
 96%|█████████▋| 1500/1556 [5:47:02<1:42:20, 109.65s/it][h264 @ 0x5649e46f40c0] mmco: unref short failure
[h264 @ 0x5649e46f40c0] mmco: unref short failure
[h264 @ 0x5649e46f40c0] mmco: unref short failure
[h264 @ 0x5649e46f40c0] mmco: unref short failure
 96%|█████████▋| 1501/1556 [5:47:05<1:11:05, 77.55s/it] [h264 @ 0x55e5319776c0] mmco: unref short failure
[h264 @ 0x55e5319776c0] mmco: unref short failure
[h264 @ 0x55e5319776c0] mmco: unref short failure
[h264 @ 0x55e5319776c0] mmco: unref short failure
 97%|█████████▋| 1502/1556 [5:47:08<49:49, 55.37s/it]   97%|█████████▋| 1503/1556 [5:47:12<35:09, 39.81s/it][h264 @ 0x55e5215182c0] mmco: unref short failure
[h264 @ 0x5616b4882040] mmco: unref short failure
[h264 @ 0x5616b4882040] mmco: unref short failure
 97%|█████████▋| 1504/1556 [5:47:15<25:04, 28.94s/it][h264 @ 0x55e5231c0d40] mmco: unref short failure
 97%|█████████▋| 1505/1556 [5:47:20<18:23, 21.64s/it] 97%|█████████▋| 1506/1556 [5:47:25<13:54, 16.68s/it] 97%|█████████▋| 1507/1556 [5:47:30<10:50, 13.28s/it][h264 @ 0x5649e0ccf1c0] mmco: unref short failure
 97%|█████████▋| 1508/1556 [5:47:35<08:34, 10.73s/it] 97%|█████████▋| 1509/1556 [5:47:40<07:06,  9.07s/it] 97%|█████████▋| 1510/1556 [5:47:46<06:05,  7.94s/it][h264 @ 0x55c97ca967c0] mmco: unref short failure
 97%|█████████▋| 1511/1556 [5:47:51<05:22,  7.17s/it][h264 @ 0x5649e8476640] mmco: unref short failure
[h264 @ 0x55c9848081c0] mmco: unref short failure
[h264 @ 0x55c9709b21c0] mmco: unref short failure
[h264 @ 0x55c9709b21c0] mmco: unref short failure
[h264 @ 0x55e52fd6a240] mmco: unref short failure
[h264 @ 0x55e52fd6a240] mmco: unref short failure
[h264 @ 0x55e52fd6a240] mmco: unref short failure
 97%|█████████▋| 1512/1556 [5:47:56<04:52,  6.65s/it] 97%|█████████▋| 1513/1556 [5:48:02<04:33,  6.37s/it] 97%|█████████▋| 1514/1556 [5:48:08<04:16,  6.11s/it][h264 @ 0x5649df9d4980] mmco: unref short failure
[h264 @ 0x5649df9d4980] mmco: unref short failure
 97%|█████████▋| 1515/1556 [5:48:13<03:59,  5.83s/it][h264 @ 0x5616b75e8d40] mmco: unref short failure
[h264 @ 0x5616b75e8d40] mmco: unref short failure
[h264 @ 0x55c975089040] mmco: unref short failure
[h264 @ 0x55c975089040] mmco: unref short failure
[h264 @ 0x5649e9764f40] mmco: unref short failure
[h264 @ 0x5649e9764f40] mmco: unref short failure
 97%|█████████▋| 1516/1556 [5:48:26<05:17,  7.94s/it][h264 @ 0x5616bd2c3480] mmco: unref short failure
 97%|█████████▋| 1517/1556 [5:48:31<04:38,  7.14s/it][h264 @ 0x5616b90ee9c0] mmco: unref short failure
[h264 @ 0x5616b90ee9c0] mmco: unref short failure
[h264 @ 0x55e5232bf000] mmco: unref short failure
[h264 @ 0x55e5232bf000] mmco: unref short failure
[h264 @ 0x5649e7ea2a80] mmco: unref short failure
[h264 @ 0x5649e7ea2a80] mmco: unref short failure
 98%|█████████▊| 1518/1556 [5:48:45<05:49,  9.20s/it] 98%|█████████▊| 1519/1556 [5:48:50<04:51,  7.88s/it][h264 @ 0x55e52dbf9cc0] mmco: unref short failure
[h264 @ 0x55e52dbf9cc0] mmco: unref short failure
 98%|█████████▊| 1520/1556 [5:48:56<04:23,  7.31s/it] 98%|█████████▊| 1521/1556 [5:49:01<03:53,  6.68s/it] 98%|█████████▊| 1522/1556 [5:49:09<04:01,  7.11s/it] 98%|█████████▊| 1523/1556 [5:49:15<03:38,  6.63s/it][h264 @ 0x5616bd3d0b00] mmco: unref short failure
[h264 @ 0x55e520781400] mmco: unref short failure
[h264 @ 0x55e520781400] mmco: unref short failure
[h264 @ 0x55e4fa9bfe40] mmco: unref short failure
[h264 @ 0x55c97211a240] mmco: unref short failure
[h264 @ 0x5649dca41500] mmco: unref short failure
[h264 @ 0x5649dca41500] mmco: unref short failure
[h264 @ 0x55c938289dc0] mmco: unref short failure
[h264 @ 0x5649e3604340] mmco: unref short failure
[h264 @ 0x55e529798e40] mmco: unref short failure
[h264 @ 0x55e529798e40] mmco: unref short failure
 98%|█████████▊| 1524/1556 [5:50:05<10:28, 19.63s/it] 98%|█████████▊| 1525/1556 [5:50:10<08:00, 15.49s/it][h264 @ 0x55c9740b25c0] mmco: unref short failure
[h264 @ 0x5649ef8828c0] mmco: unref short failure
[h264 @ 0x5649ef8828c0] mmco: unref short failure
[h264 @ 0x5649e162cb40] mmco: unref short failure
[h264 @ 0x5649ef8828c0] mmco: unref short failure
 98%|█████████▊| 1526/1556 [5:50:23<07:18, 14.60s/it] 98%|█████████▊| 1527/1556 [5:50:28<05:40, 11.73s/it] 98%|█████████▊| 1528/1556 [5:50:34<04:38,  9.94s/it][h264 @ 0x55c938f44780] mmco: unref short failure
[h264 @ 0x55c938f44780] mmco: unref short failure
 98%|█████████▊| 1529/1556 [5:50:40<03:55,  8.72s/it] 98%|█████████▊| 1530/1556 [5:50:52<04:13,  9.74s/it] 98%|█████████▊| 1531/1556 [5:50:58<03:39,  8.77s/it][h264 @ 0x55e533c88980] mmco: unref short failure
[h264 @ 0x55c97cd72880] mmco: unref short failure
[h264 @ 0x561671a82d40] mmco: unref short failure
[h264 @ 0x561671a82d40] mmco: unref short failure
[h264 @ 0x5616bbc88240] mmco: unref short failure
[h264 @ 0x5616bbc88240] mmco: unref short failure
slurmstepd: error: *** JOB 7435477 ON lrdn0789 CANCELLED AT 2024-09-07T01:27:05 ***
