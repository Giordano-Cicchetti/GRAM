NODELIST=lrdn0656
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/distributed/launch.py:181: FutureWarning: The module torch.distributed.launch is deprecated
and will be removed in future. Use torchrun.
Note that --use-env is set by default in torchrun.
If your script expects `--local-rank` argument to be set, please
change it to read from `os.environ['LOCAL_RANK']` instead. See 
https://pytorch.org/docs/stable/distributed.html#launch-utility for 
further instructions

  warnings.warn(
WARNING:torch.distributed.run:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
1
023


DEVICE SET
DEVICE SET
DEVICE SET
DEVICE SET
09/07/2024 02:26:39 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 3
09/07/2024 02:26:39 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 1
09/07/2024 02:26:39 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 0
09/07/2024 02:26:39 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 2
09/07/2024 02:26:39 - INFO - torch.distributed.distributed_c10d -   Rank 3: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/07/2024 02:26:39 - INFO - torch.distributed.distributed_c10d -   Rank 0: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/07/2024 02:26:39 - INFO - torch.distributed.distributed_c10d -   Rank 1: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/07/2024 02:26:39 - INFO - torch.distributed.distributed_c10d -   Rank 2: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/07/2024 02:26:39 - INFO - __main__ -   ==================model_configs==================

09/07/2024 02:26:39 - INFO - __main__ -   model_cfg_model_type : vast
09/07/2024 02:26:39 - INFO - __main__ -   model_cfg_itm_ratio : 0.1
09/07/2024 02:26:39 - INFO - __main__ -   model_cfg_frozen_vision : False
09/07/2024 02:26:39 - INFO - __main__ -   model_cfg_frozen_audio : False
09/07/2024 02:26:39 - INFO - __main__ -   model_cfg_checkpointing : True
09/07/2024 02:26:39 - INFO - __main__ -   model_cfg_max_caption_len : 40
09/07/2024 02:26:39 - INFO - __main__ -   model_cfg_max_omni_caption_len : 70
09/07/2024 02:26:39 - INFO - __main__ -   model_cfg_max_subtitle_len : 70
09/07/2024 02:26:39 - INFO - __main__ -   model_cfg_contra_dim : 512
09/07/2024 02:26:39 - INFO - __main__ -   model_cfg_inherit_keys : ['vision_encoder_type', 'audio_encoder_type', 'audio_melbins', 'audio_target_length']
09/07/2024 02:26:39 - INFO - __main__ -   model_cfg_frame_embedding_type : adaptive
09/07/2024 02:26:39 - INFO - __main__ -   model_cfg_vision_resolution : 224
09/07/2024 02:26:39 - INFO - __main__ -   model_cfg_vision_encoder_type : evaclip01_giant
09/07/2024 02:26:39 - INFO - __main__ -   model_cfg_audio_encoder_type : beats
09/07/2024 02:26:39 - INFO - __main__ -   model_cfg_audio_melbins : 64
09/07/2024 02:26:39 - INFO - __main__ -   model_cfg_audio_target_length : 1024
09/07/2024 02:26:39 - INFO - __main__ -   model_cfg_beam_size : 3
09/07/2024 02:26:39 - INFO - __main__ -   model_cfg_captioner_mode : False
09/07/2024 02:26:39 - INFO - __main__ -   model_cfg_generate_nums : 1
09/07/2024 02:26:39 - INFO - __main__ -   model_cfg_ret_bidirection_evaluation : False
09/07/2024 02:26:39 - INFO - __main__ -   model_cfg_itm_rerank_num : 50
09/07/2024 02:26:39 - INFO - __main__ -   model_cfg_evaluation_type : evaluation_mm
09/07/2024 02:26:39 - INFO - __main__ -   model_cfg_default : ./config/vast/default_model_cfg.json
09/07/2024 02:26:39 - INFO - __main__ -   model_cfg_max_vision_sample_num : 1
09/07/2024 02:26:39 - INFO - __main__ -   model_cfg_max_audio_sample_num : 1
09/07/2024 02:26:39 - INFO - __main__ -   ==================run_configs==================

09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_checkpoint : 
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_output_dir : ./output/vast/pretrain_vast/downstream/finetuneArea
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_gradient_accumulation_steps : 1
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_clip_lr : 5e-07
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_optim : adamw
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_learning_rate : 2e-05
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_betas : [0.9, 0.98]
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_weight_decay : 0.01
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_grad_norm : 2.0
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_warmup_ratio : 0.1
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_resume : False
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_seed : 50
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_fp16 : True
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_bf16 : False
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_zero_shot : False
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_scheduler : warmup_linear
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_new_lr : 0
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_new_params_name : []
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_valid_freq : 10
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_dataset_mix_type : random
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_remove_before_ckpt : True
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_first_eval : False
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_pretrain_dir : ./output/vast/pretrain_vast
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_num_train_steps : 0
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_save_best : True
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_pin_mem : True
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_vision_resolution : 224
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_use_ddp : False
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_mode : training
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_log_steps : 100
09/07/2024 02:26:39 - INFO - __main__ -   run_cfg_default : ./config/vast/default_run_cfg.json
09/07/2024 02:26:39 - INFO - __main__ -   ==================data_configs==================

09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_finetune_area_train_type : annoindexed
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_finetune_area_train_training : True
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_finetune_area_train_name : finetune_area
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_finetune_area_train_txt : ../vast27m/annotations100k.json
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_finetune_area_train_vision : ../vast27m/videos/
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_finetune_area_train_audio : ../vast27m/audios
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_finetune_area_train_vision_transforms : crop_flip
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_finetune_area_train_vision_format : video_rawvideo
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_finetune_area_train_vision_sample_num : 1
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_finetune_area_train_audio_sample_num : 1
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_finetune_area_train_task : ret%tv%ta
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_finetune_area_train_epoch : 4
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_finetune_area_train_n_workers : 8
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_finetune_area_train_batch_size : 256
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_msrvtt_ret_val_type : annoindexed
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_msrvtt_ret_val_training : False
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_msrvtt_ret_val_name : msrvtt_ret
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_msrvtt_ret_val_txt : datasets/annotations/msrvtt/descs_ret_test.json
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision : ../MSRVTT/video_test
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_transforms : crop_flip
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_format : video_rawvideo
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_msrvtt_ret_val_audio : ../MSRVTT/audio_test
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_sample_num : 8
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_msrvtt_ret_val_audio_sample_num : 1
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_msrvtt_ret_val_task : ret%tv
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_msrvtt_ret_val_n_workers : 8
09/07/2024 02:26:39 - INFO - __main__ -   data_cfg_msrvtt_ret_val_batch_size : 64
wandb: Tracking run with wandb version 0.17.8
wandb: W&B syncing is set to `offline` in this directory.  
wandb: Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
09/07/2024 02:26:43 - INFO - __main__ -   finetune_area Using clip mean and std.
09/07/2024 02:26:43 - INFO - __main__ -   finetune_area transforms crop_flip
ci sono 99621 labelsci sono 99621 labelsci sono 99621 labels

ci sono 99621 labels

09/07/2024 02:27:23 - INFO - __main__ -   Create Dataset finetune_area Success
09/07/2024 02:27:23 - INFO - __main__ -    loader ret%tv%ta--finetune_area , ratio 1556 , bs_pergpu 64, n_workers 8
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55aad314d080] mmco: unref short failure
[h264 @ 0x55aad314d080] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
09/07/2024 02:27:26 - INFO - __main__ -   msrvtt_ret Using clip mean and std.
09/07/2024 02:27:26 - INFO - __main__ -   msrvtt_ret transforms crop_flip
ci sono 884 labelsci sono 884 labelsci sono 884 labelsci sono 884 labels



09/07/2024 02:27:26 - INFO - __main__ -   Create Dataset msrvtt_ret Success
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
09/07/2024 02:27:29 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
09/07/2024 02:27:29 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
09/07/2024 02:27:29 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
09/07/2024 02:27:30 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5591dae38880] mmco: unref short failure
[h264 @ 0x5596afa5f880] mmco: unref short failure
[h264 @ 0x5596afa5f880] mmco: unref short failure
09/07/2024 02:28:18 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
[h264 @ 0x5591dac67b40] mmco: unref short failure
[h264 @ 0x5596af424640] mmco: unref short failure
[h264 @ 0x55bc0ed73180] mmco: unref short failure
[h264 @ 0x55bc0ed73180] mmco: unref short failure
[h264 @ 0x55bc0ed73180] mmco: unref short failure
[h264 @ 0x55bc0ed73180] mmco: unref short failure
09/07/2024 02:28:25 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
09/07/2024 02:28:27 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
[h264 @ 0x55bc0fcfe400] mmco: unref short failure
[h264 @ 0x5596b270bf40] mmco: unref short failure
09/07/2024 02:28:34 - INFO - root -   incompatible_keys.missing_keys: []
09/07/2024 02:28:36 - INFO - root -   incompatible_keys.missing_keys: []
09/07/2024 02:28:36 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/07/2024 02:28:37 - INFO - root -   incompatible_keys.missing_keys: []
09/07/2024 02:28:38 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/07/2024 02:28:39 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/07/2024 02:28:40 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
[h264 @ 0x5596b3d07440] mmco: unref short failure
[h264 @ 0x5596b3d07440] mmco: unref short failure
09/07/2024 02:28:48 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
[h264 @ 0x55aad4a1fa40] mmco: unref short failure
09/07/2024 02:28:50 - INFO - root -   incompatible_keys.missing_keys: []
09/07/2024 02:28:50 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
09/07/2024 02:28:51 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
09/07/2024 02:28:52 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
[h264 @ 0x5591dfc8c7c0] mmco: unref short failure
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'cls.predictions.bias', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'cls.predictions.transform.dense.bias', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.self.value.bias', 'cls.predictions.transform.dense.weight', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.4.crossattention.self.value.bias', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.3.crossattention.self.key.weight', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.key.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
[h264 @ 0x55bc0edb1100] mmco: unref short failure
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.11.crossattention.output.dense.bias', 'cls.predictions.transform.dense.weight', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'cls.predictions.transform.dense.bias', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'cls.predictions.bias', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.value.bias', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.10.crossattention.output.dense.weight', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.7.crossattention.output.dense.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.output.dense.bias', 'cls.predictions.transform.dense.weight', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.4.crossattention.self.key.bias', 'cls.predictions.bias', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.8.crossattention.self.key.bias', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.self.key.weight', 'cls.predictions.transform.dense.bias', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.self.query.weight', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.7.crossattention.self.value.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
[h264 @ 0x55aad6915680] mmco: unref short failure
09/07/2024 02:29:04 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.self.value.bias', 'cls.predictions.transform.dense.weight', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.11.crossattention.self.query.weight', 'cls.predictions.transform.dense.bias', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.output.dense.weight', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.self.key.weight', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.4.crossattention.self.value.bias', 'cls.predictions.bias', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.self.key.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
09/07/2024 02:29:18 - INFO - __main__ -   load_from_pretrained: ./output/vast/pretrain_vast/ckpt/model_step_204994.pt
09/07/2024 02:29:18 - INFO - __main__ -   Load from pretrained dir ./output/vast/pretrain_vast
09/07/2024 02:29:23 - INFO - __main__ -   Unexpected keys ['vision_encoder.text.logit_scale']
09/07/2024 02:29:23 - INFO - __main__ -   missing_keys  ['vision_encoder.logit_scale']
[h264 @ 0x5591dac9f240] mmco: unref short failure
[h264 @ 0x5591dac9f240] mmco: unref short failure
09/07/2024 02:29:29 - INFO - __main__ -   ==================learning_rate_settings==================

09/07/2024 02:29:29 - INFO - __main__ -     basic_lr : 2e-05
09/07/2024 02:29:29 - INFO - __main__ -     clip_lr_visual : 5e-07
09/07/2024 02:29:29 - INFO - __main__ -     clip_lr_visual_len : 245
09/07/2024 02:29:29 - INFO - __main__ -     new_lr : 0
09/07/2024 02:29:29 - INFO - __main__ -     new_params_name: []
  0%|          | 0/1556 [00:00<?, ?it/s][h264 @ 0x55aad650e3c0] mmco: unref short failure
  0%|          | 1/1556 [00:39<17:15:10, 39.94s/it][h264 @ 0x5591e0990500] mmco: unref short failure
  0%|          | 2/1556 [00:45<8:29:33, 19.67s/it]   0%|          | 3/1556 [00:49<5:27:01, 12.63s/it]  0%|          | 4/1556 [00:53<4:00:07,  9.28s/it][h264 @ 0x55aad7f98540] mmco: unref short failure
[h264 @ 0x5591deddae40] mmco: unref short failure
[h264 @ 0x5591deddae40] mmco: unref short failure
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
[h264 @ 0x5596b24b9d40] mmco: unref short failure
[h264 @ 0x5596b24b9d40] mmco: unref short failure
  0%|          | 5/1556 [00:58<3:18:36,  7.68s/it][h264 @ 0x55bc0f31d600] mmco: unref short failure
[h264 @ 0x55bc0f31d600] mmco: unref short failure
[h264 @ 0x5596afe6c300] mmco: unref short failure
[h264 @ 0x5596afe6c300] mmco: unref short failure
  0%|          | 6/1556 [01:03<2:52:58,  6.70s/it][h264 @ 0x5591e0268d80] mmco: unref short failure
[h264 @ 0x5591e0268d80] mmco: unref short failure
[h264 @ 0x5591e0268d80] mmco: unref short failure
[h264 @ 0x5591e0268d80] mmco: unref short failure
[h264 @ 0x5591e0268d80] mmco: unref short failure
[h264 @ 0x5591e0268d80] mmco: unref short failure
  0%|          | 7/1556 [01:07<2:32:59,  5.93s/it][h264 @ 0x55bc10b5a600] mmco: unref short failure
  1%|          | 8/1556 [01:39<6:04:12, 14.12s/it][h264 @ 0x5591dd50f280] mmco: unref short failure
[h264 @ 0x5591dd50f280] mmco: unref short failure
[h264 @ 0x5591e1e19980] mmco: unref short failure
[h264 @ 0x5591e1e19980] mmco: unref short failure
  1%|          | 9/1556 [01:44<4:48:25, 11.19s/it]  1%|          | 10/1556 [01:49<4:03:45,  9.46s/it]  1%|          | 11/1556 [01:54<3:26:50,  8.03s/it]  1%|          | 12/1556 [01:59<3:01:01,  7.03s/it]  1%|          | 13/1556 [02:04<2:43:06,  6.34s/it][h264 @ 0x55aad9084800] mmco: unref short failure
[h264 @ 0x5596af501440] mmco: unref short failure
not have audios 8-qwaveiHMM.3
  1%|          | 14/1556 [02:09<2:32:20,  5.93s/it][h264 @ 0x55bc0fbd7e00] mmco: unref short failure
[h264 @ 0x55bc0fbd7e00] mmco: unref short failure
[h264 @ 0x5596b2a49180] mmco: unref short failure
  1%|          | 15/1556 [02:14<2:25:03,  5.65s/it][h264 @ 0x55bc1420dd80] mmco: unref short failure
[h264 @ 0x55bc13dec800] mmco: unref short failure
[h264 @ 0x55bc13dec800] mmco: unref short failure
[h264 @ 0x55aad5ced940] mmco: unref short failure
[h264 @ 0x55aadc5bab00] mmco: unref short failure
[h264 @ 0x5596b12f4d00] mmco: unref short failure
[h264 @ 0x5596b12f4d00] mmco: unref short failure
[h264 @ 0x5596b12f4d00] mmco: unref short failure
[h264 @ 0x5596b12f4d00] mmco: unref short failure
[h264 @ 0x5596b3b6fb80] mmco: unref short failure
[h264 @ 0x5591dfe91b80] mmco: unref short failure
[h264 @ 0x5591dfe91b80] mmco: unref short failure
  1%|          | 16/1556 [03:14<9:32:02, 22.29s/it]  1%|          | 17/1556 [03:19<7:15:27, 16.98s/it]  1%|          | 18/1556 [03:24<5:41:56, 13.34s/it]  1%|          | 19/1556 [03:30<4:42:26, 11.03s/it][h264 @ 0x5591e0f9c080] mmco: unref short failure
[h264 @ 0x5591e0f9c080] mmco: unref short failure
  1%|▏         | 20/1556 [03:35<3:59:01,  9.34s/it]  1%|▏         | 21/1556 [03:40<3:24:02,  7.98s/it][h264 @ 0x5591e363cf00] mmco: unref short failure
[h264 @ 0x5591db8ea840] mmco: unref short failure
  1%|▏         | 22/1556 [03:45<2:59:48,  7.03s/it][h264 @ 0x5596b639fbc0] mmco: unref short failure
[h264 @ 0x5596b639fbc0] mmco: unref short failure
  1%|▏         | 23/1556 [03:50<2:43:39,  6.41s/it][h264 @ 0x55aaddfb4cc0] mmco: unref short failure
[h264 @ 0x55aad89fe440] mmco: unref short failure
[h264 @ 0x5591dd662c00] mmco: unref short failure
[h264 @ 0x5591dd662c00] mmco: unref short failure
[h264 @ 0x5596b77c16c0] mmco: unref short failure
[h264 @ 0x5591dd662e80] mmco: unref short failure
[h264 @ 0x5591dd662e80] mmco: unref short failure
[h264 @ 0x55bc0f436d00] mmco: unref short failure
[h264 @ 0x55bc0f436d00] mmco: unref short failure
[h264 @ 0x55bc0ebf1a00] mmco: unref short failure
[h264 @ 0x55bc0ebf1a00] mmco: unref short failure
[h264 @ 0x5596b9e2d380] mmco: unref short failure
[h264 @ 0x5596b9e2d380] mmco: unref short failure
[h264 @ 0x55aad89fec00] mmco: unref short failure
[h264 @ 0x5591ddc7dc80] mmco: unref short failure
[h264 @ 0x5596b2a49dc0] mmco: unref short failure
[h264 @ 0x55aad74a3c80] mmco: unref short failure
[h264 @ 0x55bc10f1e5c0] mmco: unref short failure
[h264 @ 0x55aad4a36540] mmco: unref short failure
  2%|▏         | 24/1556 [04:55<10:17:17, 24.18s/it][h264 @ 0x5591e08d9840] mmco: unref short failure
[h264 @ 0x5591e08d9840] mmco: unref short failure
  2%|▏         | 25/1556 [05:00<7:45:46, 18.25s/it] [h264 @ 0x5596b52e4280] mmco: unref short failure
[h264 @ 0x5596b52e4280] mmco: unref short failure
  2%|▏         | 26/1556 [05:05<6:04:15, 14.28s/it]  2%|▏         | 27/1556 [05:09<4:49:48, 11.37s/it]  2%|▏         | 28/1556 [05:15<4:02:43,  9.53s/it]  2%|▏         | 29/1556 [05:19<3:25:31,  8.08s/it]  2%|▏         | 30/1556 [05:24<3:02:30,  7.18s/it]  2%|▏         | 31/1556 [05:30<2:48:22,  6.62s/it][h264 @ 0x5596b48a03c0] mmco: unref short failure
[h264 @ 0x5596b48a03c0] mmco: unref short failure
[h264 @ 0x5591dcb061c0] mmco: unref short failure
[h264 @ 0x5591dcb061c0] mmco: unref short failure
[h264 @ 0x5596b24f7080] mmco: unref short failure
[h264 @ 0x55aadc32c880] mmco: unref short failure
[h264 @ 0x55aadc32c880] mmco: unref short failure
[h264 @ 0x5591e5ce7e40] mmco: unref short failure
[h264 @ 0x5591e5ce7e40] mmco: unref short failure
[h264 @ 0x55aad6ac0700] mmco: unref short failure
[h264 @ 0x55aad6ac0700] mmco: unref short failure
[h264 @ 0x55bc15149e40] mmco: unref short failure
  2%|▏         | 32/1556 [06:29<9:33:53, 22.59s/it][h264 @ 0x5591e3d1f840] mmco: unref short failure
[h264 @ 0x5591e3d1f840] mmco: unref short failure
[h264 @ 0x5591e3ff8ac0] mmco: unref short failure
[h264 @ 0x5591e3ff8ac0] mmco: unref short failure
  2%|▏         | 33/1556 [06:35<7:20:11, 17.34s/it]  2%|▏         | 34/1556 [06:39<5:44:40, 13.59s/it]  2%|▏         | 35/1556 [06:44<4:38:04, 10.97s/it]  2%|▏         | 36/1556 [06:50<3:54:35,  9.26s/it]  2%|▏         | 37/1556 [06:54<3:20:37,  7.92s/it][h264 @ 0x5596b4332980] mmco: unref short failure
[h264 @ 0x5596b4332980] mmco: unref short failure
  2%|▏         | 38/1556 [06:59<2:52:40,  6.82s/it][h264 @ 0x5591de0c04c0] mmco: unref short failure
[h264 @ 0x5591de0c04c0] mmco: unref short failure
  3%|▎         | 39/1556 [07:04<2:39:36,  6.31s/it][h264 @ 0x5596b11a4f40] mmco: unref short failure
[h264 @ 0x5596b86f1500] mmco: unref short failure
[h264 @ 0x55aad518a200] mmco: unref short failure
[h264 @ 0x55aad518a200] mmco: unref short failure
[h264 @ 0x55aadde5ba80] mmco: unref short failure
[h264 @ 0x55aadde5ba80] mmco: unref short failure
[h264 @ 0x5591dcc058c0] mmco: unref short failure
[h264 @ 0x5591dcc058c0] mmco: unref short failure
[h264 @ 0x5596b56014c0] mmco: unref short failure
[h264 @ 0x5596b2f05840] mmco: unref short failure
[h264 @ 0x5591dd9102c0] mmco: unref short failure
[h264 @ 0x5596b6891700] mmco: unref short failure
[h264 @ 0x55aae0949640] mmco: unref short failure
[h264 @ 0x55aae0949640] mmco: unref short failure
  3%|▎         | 40/1556 [08:05<9:33:26, 22.70s/it][h264 @ 0x55aad7e49080] mmco: unref short failure
[h264 @ 0x55aad7e49080] mmco: unref short failure
[h264 @ 0x55aade09aec0] mmco: unref short failure
[h264 @ 0x55aade09aec0] mmco: unref short failure
  3%|▎         | 41/1556 [08:10<7:22:25, 17.52s/it]  3%|▎         | 42/1556 [08:15<5:43:42, 13.62s/it][h264 @ 0x55aadc271000] mmco: unref short failure
[h264 @ 0x5596b99df280] mmco: unref short failure
[h264 @ 0x5596b99df280] mmco: unref short failure
  3%|▎         | 43/1556 [08:20<4:38:43, 11.05s/it][h264 @ 0x5596aff14f40] mmco: unref short failure
[h264 @ 0x5596aff14f40] mmco: unref short failure
  3%|▎         | 44/1556 [08:24<3:49:41,  9.11s/it]  3%|▎         | 45/1556 [08:29<3:18:40,  7.89s/it][h264 @ 0x55aade01a1c0] mmco: unref short failure
[h264 @ 0x55aade01a1c0] mmco: unref short failure
  3%|▎         | 46/1556 [08:34<2:54:52,  6.95s/it][h264 @ 0x55aad9dd99c0] mmco: unref short failure
  3%|▎         | 47/1556 [08:39<2:39:49,  6.36s/it][h264 @ 0x55bc1a1131c0] mmco: unref short failure
[h264 @ 0x55bc1a1131c0] mmco: unref short failure
[h264 @ 0x5591dcc058c0] mmco: unref short failure
[h264 @ 0x5591dcc058c0] mmco: unref short failure
[h264 @ 0x55aadd8af8c0] mmco: unref short failure
[h264 @ 0x55aadd8af8c0] mmco: unref short failure
[h264 @ 0x55aae0010740] mmco: unref short failure
[h264 @ 0x55aae0010740] mmco: unref short failure
[h264 @ 0x5591dbc41f00] mmco: unref short failure
[h264 @ 0x5591dbc41f00] mmco: unref short failure
[h264 @ 0x5591df673f80] mmco: unref short failure
[h264 @ 0x5591df673f80] mmco: unref short failure
[h264 @ 0x5591df228700] mmco: unref short failure
[h264 @ 0x5591df228700] mmco: unref short failure
[h264 @ 0x55aae1ba0c40] mmco: unref short failure
[h264 @ 0x55aae1ba0c40] mmco: unref short failure
[h264 @ 0x55aadf4eddc0] mmco: unref short failure
[h264 @ 0x5591e8d117c0] mmco: unref short failure
  3%|▎         | 48/1556 [09:37<9:08:33, 21.83s/it][h264 @ 0x55aad3da2740] mmco: unref short failure
  3%|▎         | 49/1556 [09:42<7:02:19, 16.81s/it]09/07/2024 02:39:14 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.549001932144165, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.052947454154491425, 'loss_ret%tv%ta--finetune_area/loss_area': 3.474092483520508, 'loss_ret%tv%ta--finetune_area/total_loss': 7.076042175292969}
  3%|▎         | 50/1556 [09:47<5:34:24, 13.32s/it][h264 @ 0x5596b37a7e80] mmco: unref short failure
  3%|▎         | 51/1556 [09:52<4:31:57, 10.84s/it][h264 @ 0x55bc1c66e280] mmco: unref short failure
  3%|▎         | 52/1556 [09:57<3:44:27,  8.95s/it][h264 @ 0x55bc107e9cc0] mmco: unref short failure
[h264 @ 0x55bc107e9cc0] mmco: unref short failure
  3%|▎         | 53/1556 [10:01<3:12:01,  7.67s/it][h264 @ 0x55aad51740c0] mmco: unref short failure
[h264 @ 0x5596bbeee500] mmco: unref short failure
[h264 @ 0x5596bbeee500] mmco: unref short failure
  3%|▎         | 54/1556 [10:07<2:55:50,  7.02s/it]  4%|▎         | 55/1556 [10:12<2:39:12,  6.36s/it][h264 @ 0x55bc150d84c0] mmco: unref short failure
[h264 @ 0x55bc150d84c0] mmco: unref short failure
[h264 @ 0x55bc150d84c0] mmco: unref short failure
[h264 @ 0x55bc150d84c0] mmco: unref short failure
[h264 @ 0x55bc150d84c0] mmco: unref short failure
[h264 @ 0x55bc150d84c0] mmco: unref short failure
[h264 @ 0x55bc150d84c0] mmco: unref short failure
[h264 @ 0x55bc150d84c0] mmco: unref short failure
[h264 @ 0x55bc150d84c0] mmco: unref short failure
[h264 @ 0x55bc150d84c0] mmco: unref short failure
[h264 @ 0x55bc150d84c0] mmco: unref short failure
[h264 @ 0x55bc150d84c0] mmco: unref short failure
[h264 @ 0x55aadc939f40] mmco: unref short failure
[h264 @ 0x55aadc939f40] mmco: unref short failure
[h264 @ 0x5596bbeed9c0] mmco: unref short failure
[h264 @ 0x5596b00d4f40] mmco: unref short failure
[h264 @ 0x5596b00d4f40] mmco: unref short failure
[h264 @ 0x5591e047b080] mmco: unref short failure
[h264 @ 0x5591e047b080] mmco: unref short failure
[h264 @ 0x5596bc287540] mmco: unref short failure
[h264 @ 0x5596bc287540] mmco: unref short failure
[h264 @ 0x5596b9dd7100] mmco: unref short failure
[h264 @ 0x5596bbd6f200] mmco: unref short failure
  4%|▎         | 56/1556 [11:14<9:37:49, 23.11s/it][h264 @ 0x55aae41e90c0] mmco: unref short failure
[h264 @ 0x55aae41e90c0] mmco: unref short failure
[h264 @ 0x55aad722c900] mmco: unref short failure
[h264 @ 0x55aad722c900] mmco: unref short failure
  4%|▎         | 57/1556 [11:19<7:20:48, 17.64s/it]  4%|▎         | 58/1556 [11:26<6:00:13, 14.43s/it]  4%|▍         | 59/1556 [11:30<4:46:17, 11.47s/it][h264 @ 0x55aae55ce140] mmco: unref short failure
  4%|▍         | 60/1556 [11:35<3:57:37,  9.53s/it][h264 @ 0x55bc1822d780] mmco: unref short failure
[h264 @ 0x55bc1822d780] mmco: unref short failure
[h264 @ 0x55aae17cc680] mmco: unref short failure
[h264 @ 0x55aae17cc680] mmco: unref short failure
  4%|▍         | 61/1556 [11:40<3:22:20,  8.12s/it][h264 @ 0x5596b14d3140] mmco: unref short failure
[h264 @ 0x5596b14d3140] mmco: unref short failure
[h264 @ 0x55bc1ae267c0] mmco: unref short failure
  4%|▍         | 62/1556 [11:45<2:58:37,  7.17s/it][h264 @ 0x55aadf8f2bc0] mmco: unref short failure
  4%|▍         | 63/1556 [11:51<2:46:58,  6.71s/it][h264 @ 0x55aadc2e3a00] mmco: unref short failure
[h264 @ 0x55aadc2e3a00] mmco: unref short failure
[h264 @ 0x55aade01c380] mmco: unref short failure
[h264 @ 0x55aade01c380] mmco: unref short failure
[h264 @ 0x5591dcd67bc0] mmco: unref short failure
[h264 @ 0x5591dcd67bc0] mmco: unref short failure
[h264 @ 0x55aade952f80] mmco: unref short failure
[h264 @ 0x5596bac1b500] mmco: unref short failure
[h264 @ 0x5596bac1b500] mmco: unref short failure
[h264 @ 0x5596b4b98dc0] mmco: unref short failure
[h264 @ 0x5596b4b98dc0] mmco: unref short failure
  4%|▍         | 64/1556 [12:50<9:19:05, 22.48s/it]  4%|▍         | 65/1556 [12:55<7:10:24, 17.32s/it][h264 @ 0x5596be1fa5c0] mmco: unref short failure
[h264 @ 0x55bc1b7aa400] mmco: unref short failure
[h264 @ 0x5596b672de80] mmco: unref short failure
[h264 @ 0x5596b672de80] mmco: unref short failure
[h264 @ 0x5591e538e640] mmco: unref short failure
  4%|▍         | 66/1556 [13:10<6:48:02, 16.43s/it][h264 @ 0x5591db471480] mmco: unref short failure
[h264 @ 0x5591db471480] mmco: unref short failure
  4%|▍         | 67/1556 [13:14<5:17:30, 12.79s/it][h264 @ 0x55aae3e47380] mmco: unref short failure
[h264 @ 0x55aae3e47380] mmco: unref short failure
[h264 @ 0x55aae366b240] mmco: unref short failure
  4%|▍         | 68/1556 [13:19<4:16:19, 10.34s/it][h264 @ 0x5591dcea54c0] mmco: unref short failure
[h264 @ 0x5591dcea54c0] mmco: unref short failure
  4%|▍         | 69/1556 [13:23<3:31:32,  8.54s/it][h264 @ 0x5596c14d6e80] mmco: unref short failure
[h264 @ 0x5596c14d6e80] mmco: unref short failure
  4%|▍         | 70/1556 [13:27<3:00:53,  7.30s/it][h264 @ 0x55aae417dcc0] mmco: unref short failure
[h264 @ 0x55aae417dcc0] mmco: unref short failure
  5%|▍         | 71/1556 [13:32<2:38:26,  6.40s/it][h264 @ 0x5591e09f8280] mmco: unref short failure
[h264 @ 0x5596bc04e700] mmco: unref short failure
[h264 @ 0x5591eb11ad80] mmco: unref short failure
[h264 @ 0x55bc1e52a640] mmco: unref short failure
[h264 @ 0x5591e4f25600] mmco: unref short failure
[h264 @ 0x55bc15bad900] mmco: unref short failure
[h264 @ 0x55bc15bad900] mmco: unref short failure
[h264 @ 0x55aaddbc1100] mmco: unref short failure
[h264 @ 0x55aaddbc1100] mmco: unref short failure
[h264 @ 0x5596bd42d100] mmco: unref short failure
  5%|▍         | 72/1556 [14:26<8:32:38, 20.73s/it]  5%|▍         | 73/1556 [14:31<6:34:58, 15.98s/it][h264 @ 0x55aae1ee8d80] mmco: unref short failure
[h264 @ 0x55aae1ee8d80] mmco: unref short failure
[h264 @ 0x5591e5e96080] mmco: unref short failure
  5%|▍         | 74/1556 [14:44<6:15:41, 15.21s/it]  5%|▍         | 75/1556 [14:49<4:56:25, 12.01s/it]  5%|▍         | 76/1556 [14:53<3:59:46,  9.72s/it][h264 @ 0x55aae3535000] mmco: unref short failure
[h264 @ 0x55bc1c7d36c0] mmco: unref short failure
  5%|▍         | 77/1556 [14:58<3:21:05,  8.16s/it][h264 @ 0x5591e46a2780] mmco: unref short failure
[h264 @ 0x5591e46a2780] mmco: unref short failure
  5%|▌         | 78/1556 [15:02<2:51:17,  6.95s/it][h264 @ 0x55aad9976b00] mmco: unref short failure
  5%|▌         | 79/1556 [15:07<2:36:24,  6.35s/it][h264 @ 0x5596b905d780] mmco: unref short failure
[h264 @ 0x55bc15560480] mmco: unref short failure
[h264 @ 0x55bc15560480] mmco: unref short failure
[h264 @ 0x5591e47e0e40] mmco: unref short failure
[h264 @ 0x5591ea91e9c0] mmco: unref short failure
[h264 @ 0x5591ea91e9c0] mmco: unref short failure
[h264 @ 0x55aad9533a00] mmco: unref short failure
[h264 @ 0x5596bc4b7f80] mmco: unref short failure
[h264 @ 0x55aad6018600] mmco: unref short failure
[h264 @ 0x55aad6018600] mmco: unref short failure
[h264 @ 0x55bc1b15ff40] mmco: unref short failure
[h264 @ 0x55bc1b15ff40] mmco: unref short failure
[h264 @ 0x5596b6edbac0] mmco: unref short failure
[h264 @ 0x5596b6edbac0] mmco: unref short failure
not have audios 7wavFXW3AFw.7
[h264 @ 0x55aadef7ebc0] mmco: unref short failure
[h264 @ 0x5591ec1ceac0] mmco: unref short failure
[h264 @ 0x5591ec1ceac0] mmco: unref short failure
  5%|▌         | 80/1556 [16:02<8:39:21, 21.11s/it][h264 @ 0x5596b722a400] mmco: unref short failure
[h264 @ 0x5596b722a400] mmco: unref short failure
[h264 @ 0x5596bbcb1c00] mmco: unref short failure
  5%|▌         | 81/1556 [16:07<6:40:20, 16.28s/it][h264 @ 0x55bc146372c0] mmco: unref short failure
[h264 @ 0x55bc146372c0] mmco: unref short failure
[h264 @ 0x55aae4245480] mmco: unref short failure
[h264 @ 0x5591e814ed80] mmco: unref short failure
[h264 @ 0x5591e814ed80] mmco: unref short failure
  5%|▌         | 82/1556 [16:24<6:40:20, 16.30s/it]  5%|▌         | 83/1556 [16:29<5:16:51, 12.91s/it]  5%|▌         | 84/1556 [16:34<4:20:15, 10.61s/it][h264 @ 0x55bc15513d80] mmco: unref short failure
[h264 @ 0x55bc15513d80] mmco: unref short failure
  5%|▌         | 85/1556 [16:39<3:38:39,  8.92s/it][h264 @ 0x55bc101225c0] mmco: unref short failure
[h264 @ 0x55bc101225c0] mmco: unref short failure
  6%|▌         | 86/1556 [16:44<3:09:47,  7.75s/it][h264 @ 0x55bc102f1f00] mmco: unref short failure
[h264 @ 0x55bc102f1f00] mmco: unref short failure
[h264 @ 0x5591e06f6380] mmco: unref short failure
  6%|▌         | 87/1556 [16:48<2:44:23,  6.71s/it][h264 @ 0x55aadcbfe580] mmco: unref short failure
[h264 @ 0x55bc10121f00] mmco: unref short failure
[h264 @ 0x55aad774c3c0] mmco: unref short failure
[h264 @ 0x5596baae8900] mmco: unref short failure
[h264 @ 0x5596baae8900] mmco: unref short failure
[h264 @ 0x55aad7a8ec00] mmco: unref short failure
[h264 @ 0x55aad7a8ec00] mmco: unref short failure
[h264 @ 0x55aad7edb400] mmco: unref short failure
[h264 @ 0x5596bc58bf80] mmco: unref short failure
[h264 @ 0x5596bb2c1940] mmco: unref short failure
  6%|▌         | 88/1556 [17:42<8:30:38, 20.87s/it]  6%|▌         | 89/1556 [17:47<6:30:57, 15.99s/it][h264 @ 0x5596bfb89c40] mmco: unref short failure
[h264 @ 0x5596bfb89c40] mmco: unref short failure
[h264 @ 0x55bc14c86880] mmco: unref short failure
[h264 @ 0x55bc14c86880] mmco: unref short failure
  6%|▌         | 90/1556 [18:05<6:45:17, 16.59s/it]  6%|▌         | 91/1556 [18:10<5:19:24, 13.08s/it]  6%|▌         | 92/1556 [18:14<4:17:42, 10.56s/it][h264 @ 0x55aad6681bc0] mmco: unref short failure
[h264 @ 0x55aad6681bc0] mmco: unref short failure
  6%|▌         | 93/1556 [18:19<3:34:05,  8.78s/it]  6%|▌         | 94/1556 [18:24<3:07:17,  7.69s/it][h264 @ 0x5591e3553e80] mmco: unref short failure
  6%|▌         | 95/1556 [18:30<2:51:33,  7.05s/it][h264 @ 0x5591e3553580] mmco: unref short failure
[h264 @ 0x5591e3553580] mmco: unref short failure
[h264 @ 0x5596bf2a0000] mmco: unref short failure
[h264 @ 0x5596bf2a0000] mmco: unref short failure
[h264 @ 0x5596afe581c0] mmco: unref short failure
[h264 @ 0x55bc138542c0] mmco: unref short failure
[h264 @ 0x55bc138542c0] mmco: unref short failure
[h264 @ 0x55aae16bfdc0] mmco: unref short failure
[h264 @ 0x55aae16bfdc0] mmco: unref short failure
[h264 @ 0x55aae16c0700] mmco: unref short failure
[h264 @ 0x55aae16c0700] mmco: unref short failure
[h264 @ 0x5596ba86e000] mmco: unref short failure
[h264 @ 0x5596ba86e000] mmco: unref short failure
[h264 @ 0x5591eb932a40] mmco: unref short failure
[h264 @ 0x5591eb932a40] mmco: unref short failure
[h264 @ 0x55bc12507600] mmco: unref short failure
[h264 @ 0x55bc1a7ff4c0] mmco: unref short failure
[h264 @ 0x55bc1a7ff4c0] mmco: unref short failure
[h264 @ 0x55aadf427280] mmco: unref short failure
[h264 @ 0x55aadf427280] mmco: unref short failure
  6%|▌         | 96/1556 [19:23<8:30:10, 20.97s/it][h264 @ 0x5591dd8d4d00] mmco: unref short failure
[h264 @ 0x5591dd8d4d00] mmco: unref short failure
  6%|▌         | 97/1556 [19:28<6:32:05, 16.12s/it][h264 @ 0x55bc17b08400] mmco: unref short failure
[h264 @ 0x55aad7fb3f40] mmco: unref short failure
[h264 @ 0x5596c28e1d40] mmco: unref short failure
[h264 @ 0x5596c28e1d40] mmco: unref short failure
  6%|▋         | 98/1556 [19:49<7:06:32, 17.55s/it][h264 @ 0x55aad6ac1040] mmco: unref short failure
  6%|▋         | 99/1556 [19:53<5:31:10, 13.64s/it]09/07/2024 02:49:24 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.2340309619903564, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04549640417098999, 'loss_ret%tv%ta--finetune_area/loss_area': 2.92887020111084, 'loss_ret%tv%ta--finetune_area/total_loss': 6.20839786529541}
[h264 @ 0x5591eaefb280] mmco: unref short failure
[h264 @ 0x5591eaefb280] mmco: unref short failure
[h264 @ 0x55bc20054b80] mmco: unref short failure
  6%|▋         | 100/1556 [19:58<4:25:06, 10.92s/it][h264 @ 0x55aae324c880] mmco: unref short failure
[h264 @ 0x55aae2a79ec0] mmco: unref short failure
[h264 @ 0x55aae2a79ec0] mmco: unref short failure
[h264 @ 0x55aae7bd0340] mmco: unref short failure
[h264 @ 0x55aae7bd0340] mmco: unref short failure
[h264 @ 0x55aae7bd0340] mmco: unref short failure
[h264 @ 0x55aae7bd0340] mmco: unref short failure
  6%|▋         | 101/1556 [20:02<3:39:19,  9.04s/it][h264 @ 0x55aae7bd0340] mmco: unref short failure
[h264 @ 0x55aae7bd0340] mmco: unref short failure
  7%|▋         | 102/1556 [20:07<3:07:06,  7.72s/it]  7%|▋         | 103/1556 [20:12<2:44:18,  6.78s/it][h264 @ 0x55aad9b4dd80] mmco: unref short failure
[h264 @ 0x55aad9b4dd80] mmco: unref short failure
[h264 @ 0x55aad9b4dd80] mmco: unref short failure
[h264 @ 0x55aad9b4dd80] mmco: unref short failure
[h264 @ 0x55aad9b4dd80] mmco: unref short failure
[h264 @ 0x55aad9b4dd80] mmco: unref short failure
[h264 @ 0x55aad9b4dd80] mmco: unref short failure
[h264 @ 0x55aad9b4dd80] mmco: unref short failure
[h264 @ 0x5596bdfa6400] mmco: unref short failure
[h264 @ 0x5596afa805c0] mmco: unref short failure
[h264 @ 0x55bc2046ea00] mmco: unref short failure
[h264 @ 0x55bc2046ea00] mmco: unref short failure
[h264 @ 0x5591ed1e5cc0] mmco: unref short failure
[h264 @ 0x5596c02c8c80] mmco: unref short failure
[h264 @ 0x5596c02c8c80] mmco: unref short failure
[h264 @ 0x5596b60cc480] mmco: unref short failure
[h264 @ 0x5596b60cc480] mmco: unref short failure
  7%|▋         | 104/1556 [20:57<7:23:01, 18.31s/it][h264 @ 0x55bc1d47db40] mmco: unref short failure
[h264 @ 0x55bc18880d00] mmco: unref short failure
[h264 @ 0x55bc18880d00] mmco: unref short failure
[h264 @ 0x55bc18880d00] mmco: unref short failure
[h264 @ 0x55bc18880d00] mmco: unref short failure
[h264 @ 0x55bc18880d00] mmco: unref short failure
[h264 @ 0x55bc18880d00] mmco: unref short failure
  7%|▋         | 105/1556 [21:02<5:48:57, 14.43s/it][h264 @ 0x55bc0ee4b880] mmco: unref short failure
[h264 @ 0x55bc0ee4b880] mmco: unref short failure
[h264 @ 0x5591efeaa0c0] mmco: unref short failure
[h264 @ 0x5591efeaa0c0] mmco: unref short failure
[h264 @ 0x5591e0e1cdc0] mmco: unref short failure
[h264 @ 0x5591e0e1cdc0] mmco: unref short failure
  7%|▋         | 106/1556 [21:28<7:14:26, 17.98s/it][h264 @ 0x55aad5d5e7c0] mmco: unref short failure
[h264 @ 0x55aad5d5e7c0] mmco: unref short failure
[h264 @ 0x5596c3cc8900] mmco: unref short failure
[h264 @ 0x5596c3cc8900] mmco: unref short failure
  7%|▋         | 107/1556 [21:33<5:39:34, 14.06s/it][h264 @ 0x5591db3d9880] mmco: unref short failure
[h264 @ 0x5591db3d9880] mmco: unref short failure
  7%|▋         | 108/1556 [21:38<4:28:58, 11.15s/it]  7%|▋         | 109/1556 [21:43<3:45:23,  9.35s/it]  7%|▋         | 110/1556 [21:47<3:10:36,  7.91s/it]  7%|▋         | 111/1556 [21:53<2:55:17,  7.28s/it][h264 @ 0x5591db1bf6c0] mmco: unref short failure
[h264 @ 0x5591db1bf6c0] mmco: unref short failure
[h264 @ 0x5596b4cad480] mmco: unref short failure
[h264 @ 0x5591e1a48280] mmco: unref short failure
[h264 @ 0x5591e1a48280] mmco: unref short failure
[h264 @ 0x5591edc4b000] mmco: unref short failure
[h264 @ 0x55bc10617140] mmco: unref short failure
[h264 @ 0x55bc10617140] mmco: unref short failure
  7%|▋         | 112/1556 [22:35<7:02:44, 17.57s/it][h264 @ 0x55bc11f2ee80] mmco: unref short failure
[h264 @ 0x55bc11f2ee80] mmco: unref short failure
  7%|▋         | 113/1556 [22:40<5:32:29, 13.83s/it]  7%|▋         | 114/1556 [22:59<6:11:48, 15.47s/it]  7%|▋         | 115/1556 [23:04<4:53:22, 12.22s/it]  7%|▋         | 116/1556 [23:08<3:57:09,  9.88s/it][h264 @ 0x5596b60cc240] mmco: unref short failure
[h264 @ 0x5596b60cc240] mmco: unref short failure
  8%|▊         | 117/1556 [23:13<3:18:51,  8.29s/it]  8%|▊         | 118/1556 [23:18<2:53:21,  7.23s/it][h264 @ 0x5591de7d5800] mmco: unref short failure
[h264 @ 0x5591de7d5800] mmco: unref short failure
  8%|▊         | 119/1556 [23:22<2:35:13,  6.48s/it][h264 @ 0x5591ea941fc0] mmco: unref short failure
[h264 @ 0x5591e9dd5480] mmco: unref short failure
[h264 @ 0x5596be73f840] mmco: unref short failure
[h264 @ 0x5596be73f840] mmco: unref short failure
[h264 @ 0x5591e9dd5480] mmco: unref short failure
[h264 @ 0x55aae1128880] mmco: unref short failure
[h264 @ 0x55aae1128880] mmco: unref short failure
[h264 @ 0x5596c4563b40] mmco: unref short failure
[h264 @ 0x5596c4563b40] mmco: unref short failure
[h264 @ 0x55aae39bc1c0] mmco: unref short failure
[h264 @ 0x55aae39bc1c0] mmco: unref short failure
[h264 @ 0x55bc21748680] mmco: unref short failure
[h264 @ 0x5591ee2f8ac0] mmco: unref short failure
[h264 @ 0x55aae0507000] mmco: unref short failure
[h264 @ 0x5596af94f6c0] mmco: unref short failure
[h264 @ 0x5591e3ed9f80] mmco: unref short failure
[h264 @ 0x5591e3ed9f80] mmco: unref short failure
  8%|▊         | 120/1556 [24:21<8:52:27, 22.25s/it]  8%|▊         | 121/1556 [24:26<6:44:57, 16.93s/it][h264 @ 0x5596bf7b7080] mmco: unref short failure
  8%|▊         | 122/1556 [24:31<5:18:34, 13.33s/it]  8%|▊         | 123/1556 [24:36<4:21:22, 10.94s/it]  8%|▊         | 124/1556 [24:42<3:40:51,  9.25s/it][h264 @ 0x5591e9ba85c0] mmco: unref short failure
[h264 @ 0x5591e9ba85c0] mmco: unref short failure
  8%|▊         | 125/1556 [24:46<3:09:14,  7.93s/it]  8%|▊         | 126/1556 [24:51<2:43:52,  6.88s/it][h264 @ 0x55aae67fc240] mmco: unref short failure
[h264 @ 0x5591ee43f6c0] mmco: unref short failure
[h264 @ 0x5591ee43f6c0] mmco: unref short failure
  8%|▊         | 127/1556 [24:55<2:26:34,  6.15s/it][h264 @ 0x5591e50da840] mmco: unref short failure
[h264 @ 0x5591e50da840] mmco: unref short failure
[h264 @ 0x55aad6993e80] mmco: unref short failure
[h264 @ 0x55aae1bf0240] mmco: unref short failure
[h264 @ 0x55aae1bf0240] mmco: unref short failure
[h264 @ 0x5596c2780240] mmco: unref short failure
[h264 @ 0x5596c2780240] mmco: unref short failure
[h264 @ 0x5596ba8f7b80] mmco: unref short failure
[h264 @ 0x55bc18b6a200] mmco: unref short failure
[h264 @ 0x5591e4b8f9c0] mmco: unref short failure
[h264 @ 0x5591e4b8f9c0] mmco: unref short failure
[h264 @ 0x55aad882a980] mmco: unref short failure
[h264 @ 0x55aad882a980] mmco: unref short failure
  8%|▊         | 128/1556 [25:57<9:01:38, 22.76s/it]  8%|▊         | 129/1556 [26:02<6:56:25, 17.51s/it]  8%|▊         | 130/1556 [26:07<5:28:49, 13.84s/it]  8%|▊         | 131/1556 [26:13<4:28:14, 11.29s/it]  8%|▊         | 132/1556 [26:18<3:42:03,  9.36s/it][h264 @ 0x55aae40252c0] mmco: unref short failure
  9%|▊         | 133/1556 [26:24<3:18:12,  8.36s/it][h264 @ 0x5591e3eda880] mmco: unref short failure
[h264 @ 0x5591e3eda880] mmco: unref short failure
  9%|▊         | 134/1556 [26:28<2:50:34,  7.20s/it]  9%|▊         | 135/1556 [26:33<2:35:11,  6.55s/it][h264 @ 0x5596b60cc480] mmco: unref short failure
[h264 @ 0x5596b60cc480] mmco: unref short failure
[h264 @ 0x5591ebb50280] mmco: unref short failure
[h264 @ 0x5591ebb50280] mmco: unref short failure
[h264 @ 0x5591dd4bc580] mmco: unref short failure
[h264 @ 0x55bc23868b00] mmco: unref short failure
[h264 @ 0x55aad7abeec0] mmco: unref short failure
[h264 @ 0x55aad7257800] mmco: unref short failure
[h264 @ 0x55aad7257800] mmco: unref short failure
  9%|▊         | 136/1556 [27:38<9:29:06, 24.05s/it][h264 @ 0x55bc206f3000] mmco: unref short failure
  9%|▉         | 137/1556 [27:43<7:11:18, 18.24s/it][h264 @ 0x55bc225bb800] mmco: unref short failure
[h264 @ 0x55bc225bb800] mmco: unref short failure
[h264 @ 0x55aae3280840] mmco: unref short failure
[h264 @ 0x55bc2248cbc0] mmco: unref short failure
[h264 @ 0x55bc2248cbc0] mmco: unref short failure
  9%|▉         | 138/1556 [27:47<5:36:04, 14.22s/it]  9%|▉         | 139/1556 [27:52<4:27:20, 11.32s/it][h264 @ 0x55aae21cd640] mmco: unref short failure
[h264 @ 0x5591f050f740] mmco: unref short failure
  9%|▉         | 140/1556 [27:57<3:42:55,  9.45s/it]  9%|▉         | 141/1556 [28:02<3:08:17,  7.98s/it]  9%|▉         | 142/1556 [28:07<2:46:42,  7.07s/it][h264 @ 0x55bc0fc285c0] mmco: unref short failure
[h264 @ 0x55bc0fc285c0] mmco: unref short failure
  9%|▉         | 143/1556 [28:11<2:28:58,  6.33s/it][h264 @ 0x5596b0a8dcc0] mmco: unref short failure
[h264 @ 0x5596c2486900] mmco: unref short failure
[h264 @ 0x5596c2486900] mmco: unref short failure
[h264 @ 0x55bc1067a100] mmco: unref short failure
[h264 @ 0x55bc1067a100] mmco: unref short failure
[h264 @ 0x5596b48a0d00] mmco: unref short failure
[h264 @ 0x5596b48a0d00] mmco: unref short failure
[h264 @ 0x55aae7a3bac0] mmco: unref short failure
[h264 @ 0x55aae7a3bac0] mmco: unref short failure
[h264 @ 0x5596bb2ac500] mmco: unref short failure
[h264 @ 0x5591eb8ac400] mmco: unref short failure
[h264 @ 0x5591e1b2b680] mmco: unref short failure
[h264 @ 0x5591e1b2b680] mmco: unref short failure
[h264 @ 0x5596b0202b00] mmco: unref short failure
[h264 @ 0x5596b0202b00] mmco: unref short failure
[h264 @ 0x5591dc243c00] mmco: unref short failure
[h264 @ 0x5591dc243c00] mmco: unref short failure
  9%|▉         | 144/1556 [29:17<9:26:37, 24.08s/it]  9%|▉         | 145/1556 [29:22<7:11:25, 18.35s/it][h264 @ 0x5591e99300c0] mmco: unref short failure
  9%|▉         | 146/1556 [29:27<5:42:29, 14.57s/it][h264 @ 0x5596b6fabec0] mmco: unref short failure
[h264 @ 0x5596b6fabec0] mmco: unref short failure
[h264 @ 0x55aae9832d80] mmco: unref short failure
[h264 @ 0x55aae9832d80] mmco: unref short failure
  9%|▉         | 147/1556 [29:35<4:49:27, 12.33s/it] 10%|▉         | 148/1556 [29:40<3:57:51, 10.14s/it][h264 @ 0x5596af987f40] mmco: unref short failure
[h264 @ 0x5591e34d4400] mmco: unref short failure
[h264 @ 0x5591dcd73dc0] mmco: unref short failure
 10%|▉         | 149/1556 [29:45<3:27:34,  8.85s/it]09/07/2024 02:59:17 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.7162859439849854, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.049891553819179535, 'loss_ret%tv%ta--finetune_area/loss_area': 3.556581974029541, 'loss_ret%tv%ta--finetune_area/total_loss': 7.322759628295898}
[h264 @ 0x55aae1806e80] mmco: unref short failure
[h264 @ 0x55aae1806e80] mmco: unref short failure
 10%|▉         | 150/1556 [29:51<3:05:14,  7.90s/it] 10%|▉         | 151/1556 [29:56<2:43:25,  6.98s/it][h264 @ 0x5596b93cf400] mmco: unref short failure
[h264 @ 0x5596b93cf400] mmco: unref short failure
[h264 @ 0x5591e14d5000] mmco: unref short failure
[h264 @ 0x5591e14d5000] mmco: unref short failure
[h264 @ 0x55bc1aa29f40] mmco: unref short failure
[h264 @ 0x55bc1aa29f40] mmco: unref short failure
[h264 @ 0x5596bbf02cc0] mmco: unref short failure
[h264 @ 0x55bc0e8078c0] mmco: unref short failure
[h264 @ 0x55bc0e8078c0] mmco: unref short failure
[h264 @ 0x55aaea4071c0] mmco: unref short failure
[h264 @ 0x55aaea4071c0] mmco: unref short failure
[h264 @ 0x5596af908100] mmco: unref short failure
[h264 @ 0x5596af908100] mmco: unref short failure
 10%|▉         | 152/1556 [30:58<9:07:13, 23.39s/it] 10%|▉         | 153/1556 [31:02<6:56:16, 17.80s/it][h264 @ 0x55bc0fac4800] mmco: unref short failure
[h264 @ 0x55bc0fac4800] mmco: unref short failure
 10%|▉         | 154/1556 [31:08<5:27:49, 14.03s/it][h264 @ 0x5591f1bce3c0] mmco: unref short failure
[h264 @ 0x5591f1bce3c0] mmco: unref short failure
[h264 @ 0x55bc148206c0] mmco: unref short failure
 10%|▉         | 155/1556 [31:13<4:24:10, 11.31s/it] 10%|█         | 156/1556 [31:17<3:38:36,  9.37s/it][h264 @ 0x5596b00c5540] mmco: unref short failure
 10%|█         | 157/1556 [31:22<3:07:46,  8.05s/it][h264 @ 0x55bc1a080200] mmco: unref short failure
[h264 @ 0x55bc1a080200] mmco: unref short failure
[h264 @ 0x55bc1a080200] mmco: unref short failure
[h264 @ 0x55bc1a080200] mmco: unref short failure
 10%|█         | 158/1556 [31:28<2:47:53,  7.21s/it] 10%|█         | 159/1556 [31:32<2:30:56,  6.48s/it][h264 @ 0x5591f1330b80] mmco: unref short failure
[h264 @ 0x5596bc0e7100] mmco: unref short failure
[h264 @ 0x5591db2257c0] mmco: unref short failure
[h264 @ 0x5591db2257c0] mmco: unref short failure
[h264 @ 0x55aadc00ff40] mmco: unref short failure
[h264 @ 0x55aadc00ff40] mmco: unref short failure
[h264 @ 0x5596c0dc8ec0] mmco: unref short failure
[h264 @ 0x5596c0dc8ec0] mmco: unref short failure
[h264 @ 0x55aae817ec40] mmco: unref short failure
 10%|█         | 160/1556 [32:39<9:30:24, 24.52s/it] 10%|█         | 161/1556 [32:44<7:13:38, 18.65s/it] 10%|█         | 162/1556 [32:49<5:38:05, 14.55s/it] 10%|█         | 163/1556 [32:53<4:25:41, 11.44s/it] 11%|█         | 164/1556 [32:58<3:38:55,  9.44s/it][h264 @ 0x5596b0620240] mmco: unref short failure
[h264 @ 0x5596b0620240] mmco: unref short failure
 11%|█         | 165/1556 [33:03<3:09:30,  8.17s/it][h264 @ 0x5596c0bfdf80] mmco: unref short failure
 11%|█         | 166/1556 [33:08<2:44:09,  7.09s/it][h264 @ 0x55bc2336c040] mmco: unref short failure
[h264 @ 0x55bc2336c040] mmco: unref short failure
 11%|█         | 167/1556 [33:12<2:25:42,  6.29s/it][h264 @ 0x5591dd837300] mmco: unref short failure
[h264 @ 0x5591f2977e00] mmco: unref short failure
[h264 @ 0x5591e98b6940] mmco: unref short failure
[h264 @ 0x55aad5e8a0c0] mmco: unref short failure
[h264 @ 0x55bc1158b240] mmco: unref short failure
[h264 @ 0x55aad88326c0] mmco: unref short failure
[h264 @ 0x55aad88326c0] mmco: unref short failure
[h264 @ 0x55aad88326c0] mmco: unref short failure
[h264 @ 0x55bc2290dc40] mmco: unref short failure
[h264 @ 0x55bc2290dc40] mmco: unref short failure
[h264 @ 0x55bc1a3c1c00] mmco: unref short failure
[h264 @ 0x5591e14979c0] mmco: unref short failure
[h264 @ 0x5591e14979c0] mmco: unref short failure
[h264 @ 0x5591f1cdd040] mmco: unref short failure
[h264 @ 0x5591df0e3940] mmco: unref short failure
 11%|█         | 168/1556 [34:25<10:10:42, 26.40s/it] 11%|█         | 169/1556 [34:30<7:42:18, 20.00s/it]  11%|█         | 170/1556 [34:35<5:54:29, 15.35s/it][h264 @ 0x55bc10edb1c0] mmco: unref short failure
[h264 @ 0x55bc10edb1c0] mmco: unref short failure
 11%|█         | 171/1556 [34:39<4:39:10, 12.09s/it][h264 @ 0x55aad5e8a540] mmco: unref short failure
[h264 @ 0x55aad5e8a540] mmco: unref short failure
 11%|█         | 172/1556 [34:44<3:49:33,  9.95s/it][h264 @ 0x5596b49e2500] mmco: unref short failure
[h264 @ 0x55bc2380b400] mmco: unref short failure
[h264 @ 0x55bc2380b400] mmco: unref short failure
 11%|█         | 173/1556 [34:49<3:14:50,  8.45s/it] 11%|█         | 174/1556 [34:54<2:51:01,  7.43s/it] 11%|█         | 175/1556 [35:00<2:37:15,  6.83s/it][h264 @ 0x5591db20ff40] mmco: unref short failure
[h264 @ 0x5596b690ab00] mmco: unref short failure
[h264 @ 0x5596b690ab00] mmco: unref short failure
[h264 @ 0x5591efbef7c0] mmco: unref short failure
[h264 @ 0x5591efbef7c0] mmco: unref short failure
[h264 @ 0x5596afa64040] mmco: unref short failure
[h264 @ 0x55aad48cf1c0] mmco: unref short failure
[h264 @ 0x55aad48cf1c0] mmco: unref short failure
 11%|█▏        | 176/1556 [36:03<9:07:15, 23.79s/it] 11%|█▏        | 177/1556 [36:07<6:51:34, 17.91s/it][h264 @ 0x55aae1fb9bc0] mmco: unref short failure
 11%|█▏        | 178/1556 [36:12<5:17:03, 13.81s/it][h264 @ 0x5591f10dff80] mmco: unref short failure
 12%|█▏        | 179/1556 [36:16<4:11:46, 10.97s/it] 12%|█▏        | 180/1556 [36:21<3:29:17,  9.13s/it][h264 @ 0x5591e87b1080] mmco: unref short failure
[h264 @ 0x5591e87b1080] mmco: unref short failure
 12%|█▏        | 181/1556 [36:27<3:07:57,  8.20s/it][h264 @ 0x5596b4f6f980] mmco: unref short failure
[h264 @ 0x5596b4f6f980] mmco: unref short failure
 12%|█▏        | 182/1556 [36:32<2:48:02,  7.34s/it] 12%|█▏        | 183/1556 [36:37<2:33:47,  6.72s/it][h264 @ 0x5596afda9900] mmco: unref short failure
[h264 @ 0x5596afda9900] mmco: unref short failure
[h264 @ 0x55bc1fc4e500] mmco: unref short failure
[h264 @ 0x55bc1fc4e500] mmco: unref short failure
[h264 @ 0x55bc143e8000] mmco: unref short failure
[h264 @ 0x55bc143e8000] mmco: unref short failure
[h264 @ 0x5591daccadc0] mmco: unref short failure
[h264 @ 0x5591db326300] mmco: unref short failure
[h264 @ 0x5591db326300] mmco: unref short failure
[h264 @ 0x5596b19a1680] mmco: unref short failure
[h264 @ 0x55aae1b2a900] mmco: unref short failure
[h264 @ 0x55aae8241780] mmco: unref short failure
[h264 @ 0x55bc14aa5c40] mmco: unref short failure
[h264 @ 0x55bc14aa5c40] mmco: unref short failure
[h264 @ 0x5591e102ee80] mmco: unref short failure
 12%|█▏        | 184/1556 [37:41<9:00:17, 23.63s/it][h264 @ 0x55aad4c1d4c0] mmco: unref short failure
[h264 @ 0x55aad4c1d4c0] mmco: unref short failure
 12%|█▏        | 185/1556 [37:45<6:49:24, 17.92s/it][h264 @ 0x5596bac7f4c0] mmco: unref short failure
[h264 @ 0x5596bac7f4c0] mmco: unref short failure
 12%|█▏        | 186/1556 [37:49<5:15:15, 13.81s/it][h264 @ 0x55bc0fe13d40] mmco: unref short failure
[h264 @ 0x55bc0fe13d40] mmco: unref short failure
 12%|█▏        | 187/1556 [37:54<4:15:01, 11.18s/it] 12%|█▏        | 188/1556 [38:00<3:33:41,  9.37s/it] 12%|█▏        | 189/1556 [38:04<3:00:51,  7.94s/it] 12%|█▏        | 190/1556 [38:09<2:39:26,  7.00s/it] 12%|█▏        | 191/1556 [38:14<2:24:43,  6.36s/it][h264 @ 0x5596b747fa40] mmco: unref short failure
[h264 @ 0x5591e87b1300] mmco: unref short failure
[h264 @ 0x5596bbd8a6c0] mmco: unref short failure
[h264 @ 0x5596bbd8a6c0] mmco: unref short failure
[h264 @ 0x55aadc57dfc0] mmco: unref short failure
[h264 @ 0x55bc22a71880] mmco: unref short failure
[h264 @ 0x5596b14d6240] mmco: unref short failure
[h264 @ 0x5596b14d6240] mmco: unref short failure
[h264 @ 0x5596b83b0f40] mmco: unref short failure
[h264 @ 0x5591e08986c0] mmco: unref short failure
[h264 @ 0x55aad50b6900] mmco: unref short failure
[h264 @ 0x55aadae1ce00] mmco: unref short failure
[h264 @ 0x5591dcd73b40] mmco: unref short failure
[h264 @ 0x5591dcd73b40] mmco: unref short failure
[h264 @ 0x5591dcd73b40] mmco: unref short failure
[h264 @ 0x5591dcd73b40] mmco: unref short failure
 12%|█▏        | 192/1556 [39:19<9:06:50, 24.05s/it][h264 @ 0x55aae1813840] mmco: unref short failure
 12%|█▏        | 193/1556 [39:24<6:57:43, 18.39s/it][h264 @ 0x55aadbe092c0] mmco: unref short failure
 12%|█▏        | 194/1556 [39:29<5:25:21, 14.33s/it] 13%|█▎        | 195/1556 [39:35<4:25:22, 11.70s/it] 13%|█▎        | 196/1556 [39:40<3:40:23,  9.72s/it][h264 @ 0x5591de20a080] mmco: unref short failure
 13%|█▎        | 197/1556 [39:45<3:06:31,  8.24s/it] 13%|█▎        | 198/1556 [39:49<2:41:29,  7.14s/it][h264 @ 0x55bc0fe13680] mmco: unref short failure
 13%|█▎        | 199/1556 [39:54<2:28:14,  6.55s/it][h264 @ 0x55aae79c8a40] mmco: unref short failure
[h264 @ 0x55aae79c8a40] mmco: unref short failure
[h264 @ 0x55aad9a8a380] mmco: unref short failure
[h264 @ 0x55aaeb03e680] mmco: unref short failure
[h264 @ 0x55aaeb03e680] mmco: unref short failure
[h264 @ 0x5596c27804c0] mmco: unref short failure
[h264 @ 0x5596c27804c0] mmco: unref short failure
[h264 @ 0x55aaeb50bc00] mmco: unref short failure
[h264 @ 0x5591ee679dc0] mmco: unref short failure
[h264 @ 0x5591ee679dc0] mmco: unref short failure
09/07/2024 03:10:26 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.5287399291992188, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.05067690834403038, 'loss_ret%tv%ta--finetune_area/loss_area': 3.6534271240234375, 'loss_ret%tv%ta--finetune_area/total_loss': 7.23284387588501}
 13%|█▎        | 200/1556 [41:00<9:05:02, 24.12s/it] 13%|█▎        | 201/1556 [41:05<6:56:47, 18.46s/it] 13%|█▎        | 202/1556 [41:09<5:21:48, 14.26s/it][h264 @ 0x5591ececd4c0] mmco: unref short failure
 13%|█▎        | 203/1556 [41:14<4:15:47, 11.34s/it] 13%|█▎        | 204/1556 [41:19<3:34:31,  9.52s/it] 13%|█▎        | 205/1556 [41:25<3:10:48,  8.47s/it][h264 @ 0x55bc227a8a40] mmco: unref short failure
 13%|█▎        | 206/1556 [41:30<2:49:33,  7.54s/it] 13%|█▎        | 207/1556 [41:35<2:31:09,  6.72s/it][h264 @ 0x5591dc1457c0] mmco: unref short failure
[h264 @ 0x5591dc1457c0] mmco: unref short failure
[h264 @ 0x55bc150494c0] mmco: unref short failure
[h264 @ 0x55bc150494c0] mmco: unref short failure
[h264 @ 0x5596c4603780] mmco: unref short failure
[h264 @ 0x5596c4603780] mmco: unref short failure
[h264 @ 0x55aadd4e7840] mmco: unref short failure
[h264 @ 0x5596c5b58080] mmco: unref short failure
[h264 @ 0x5596c5b58080] mmco: unref short failure
[h264 @ 0x55bc0f9d6000] mmco: unref short failure
[h264 @ 0x55bc0f9d6000] mmco: unref short failure
[h264 @ 0x5596c4998c80] mmco: unref short failure
[h264 @ 0x5591dc90d400] mmco: unref short failure
[h264 @ 0x5591dc90d400] mmco: unref short failure
[h264 @ 0x55bc1d1acc80] mmco: unref short failure
[h264 @ 0x55bc1d1acc80] mmco: unref short failure
[h264 @ 0x55bc1d1acc80] mmco: unref short failure
[h264 @ 0x55bc1d1acc80] mmco: unref short failure
 13%|█▎        | 208/1556 [42:46<9:42:00, 25.91s/it][h264 @ 0x5591db1e7a80] mmco: unref short failure
[h264 @ 0x5591db1e7a80] mmco: unref short failure
[h264 @ 0x5596c4998840] mmco: unref short failure
[h264 @ 0x5596c4998840] mmco: unref short failure
 13%|█▎        | 209/1556 [42:51<7:24:38, 19.81s/it] 13%|█▎        | 210/1556 [42:56<5:42:23, 15.26s/it][h264 @ 0x5596b3949100] mmco: unref short failure
[h264 @ 0x5596b3949100] mmco: unref short failure
[h264 @ 0x5596b3949100] mmco: unref short failure
[h264 @ 0x5596b3949100] mmco: unref short failure
 14%|█▎        | 211/1556 [43:03<4:43:45, 12.66s/it] 14%|█▎        | 212/1556 [43:08<3:55:03, 10.49s/it][h264 @ 0x5591dcd43b00] mmco: unref short failure
[h264 @ 0x5591dcd43b00] mmco: unref short failure
[h264 @ 0x5596c160fe40] mmco: unref short failure
[h264 @ 0x5596c160fe40] mmco: unref short failure
 14%|█▎        | 213/1556 [43:14<3:23:13,  9.08s/it][h264 @ 0x5596b19e4f00] mmco: unref short failure
[h264 @ 0x5596b19e4f00] mmco: unref short failure
 14%|█▍        | 214/1556 [43:19<2:52:54,  7.73s/it] 14%|█▍        | 215/1556 [43:23<2:31:49,  6.79s/it][h264 @ 0x5591db0ce100] mmco: unref short failure
[h264 @ 0x5596bf997600] mmco: unref short failure
[h264 @ 0x55bc1317a800] mmco: unref short failure
[h264 @ 0x5596c19ddf40] mmco: unref short failure
[h264 @ 0x5591ef2b7a80] mmco: unref short failure
[h264 @ 0x55aadd5f4680] mmco: unref short failure
[h264 @ 0x55aadd5f4680] mmco: unref short failure
[h264 @ 0x5596c59c8380] mmco: unref short failure
 14%|█▍        | 216/1556 [44:26<8:50:40, 23.76s/it][h264 @ 0x55aaeab45b00] mmco: unref short failure
[h264 @ 0x55aaeab45b00] mmco: unref short failure
 14%|█▍        | 217/1556 [44:31<6:43:35, 18.09s/it] 14%|█▍        | 218/1556 [44:36<5:13:03, 14.04s/it][h264 @ 0x55bc113d6840] mmco: unref short failure
 14%|█▍        | 219/1556 [44:41<4:13:00, 11.35s/it][h264 @ 0x5596b26c4c80] mmco: unref short failure
 14%|█▍        | 220/1556 [44:46<3:31:58,  9.52s/it] 14%|█▍        | 221/1556 [44:51<2:58:42,  8.03s/it] 14%|█▍        | 222/1556 [44:56<2:39:01,  7.15s/it] 14%|█▍        | 223/1556 [45:01<2:25:43,  6.56s/it][h264 @ 0x5596b214d000] mmco: unref short failure
[h264 @ 0x55bc164192c0] mmco: unref short failure
[h264 @ 0x55bc0fdb3140] mmco: unref short failure
[h264 @ 0x55bc1e74fd00] mmco: unref short failure
[h264 @ 0x55bc1e74fd00] mmco: unref short failure
[h264 @ 0x55aae5efe780] mmco: unref short failure
[h264 @ 0x5591e10ab500] mmco: unref short failure
not have audios ua_Kowav7hg.20
[h264 @ 0x5591eff3be40] mmco: unref short failure
[h264 @ 0x5596bb0def40] mmco: unref short failure
[h264 @ 0x5596bb0def40] mmco: unref short failure
[h264 @ 0x55bc1dbd1d00] mmco: unref short failure
[h264 @ 0x5591dd73a840] mmco: unref short failure
[h264 @ 0x5591dd73a840] mmco: unref short failure
 14%|█▍        | 224/1556 [46:06<8:52:17, 23.98s/it] 14%|█▍        | 225/1556 [46:11<6:44:44, 18.25s/it][h264 @ 0x55aad7693b40] mmco: unref short failure
[h264 @ 0x55aad7693b40] mmco: unref short failure
 15%|█▍        | 226/1556 [46:16<5:19:40, 14.42s/it][h264 @ 0x5596afba0f40] mmco: unref short failure
 15%|█▍        | 227/1556 [46:21<4:16:02, 11.56s/it] 15%|█▍        | 228/1556 [46:25<3:28:23,  9.42s/it] 15%|█▍        | 229/1556 [46:30<2:56:41,  7.99s/it][h264 @ 0x55aae33d6480] mmco: unref short failure
 15%|█▍        | 230/1556 [46:35<2:35:46,  7.05s/it] 15%|█▍        | 231/1556 [46:41<2:27:49,  6.69s/it][h264 @ 0x5596b420d080] mmco: unref short failure
[h264 @ 0x5596b420d080] mmco: unref short failure
[h264 @ 0x55aae3dd4cc0] mmco: unref short failure
[h264 @ 0x5596bc8ac1c0] mmco: unref short failure
[h264 @ 0x5596bc8ac1c0] mmco: unref short failure
[h264 @ 0x5591e4b51140] mmco: unref short failure
[h264 @ 0x5591e4b51140] mmco: unref short failure
[h264 @ 0x5591db275d80] mmco: unref short failure
[h264 @ 0x55bc1e74f640] mmco: unref short failure
[h264 @ 0x55bc1e74f640] mmco: unref short failure
[h264 @ 0x55bc20c06040] mmco: unref short failure
[h264 @ 0x55bc20c06040] mmco: unref short failure
[h264 @ 0x5596b0648400] mmco: unref short failure
[h264 @ 0x5596b0648400] mmco: unref short failure
[h264 @ 0x55aae27a48c0] mmco: unref short failure
[h264 @ 0x55aae27a48c0] mmco: unref short failure
 15%|█▍        | 232/1556 [47:41<8:19:49, 22.65s/it][h264 @ 0x55bc1446bf00] mmco: unref short failure
 15%|█▍        | 233/1556 [47:46<6:24:32, 17.44s/it][h264 @ 0x5591e4175b80] mmco: unref short failure
[h264 @ 0x5591e4175b80] mmco: unref short failure
 15%|█▌        | 234/1556 [47:51<5:01:34, 13.69s/it] 15%|█▌        | 235/1556 [47:56<4:01:45, 10.98s/it][h264 @ 0x55aae2fe23c0] mmco: unref short failure
 15%|█▌        | 236/1556 [48:00<3:20:22,  9.11s/it] 15%|█▌        | 237/1556 [48:06<2:54:50,  7.95s/it] 15%|█▌        | 238/1556 [48:10<2:33:06,  6.97s/it] 15%|█▌        | 239/1556 [48:15<2:19:57,  6.38s/it][h264 @ 0x55bc12547c00] mmco: unref short failure
[h264 @ 0x5591e3a44980] mmco: unref short failure
[h264 @ 0x55bc172db040] mmco: unref short failure
[h264 @ 0x5591f259b840] mmco: unref short failure
[h264 @ 0x5591f259b840] mmco: unref short failure
[h264 @ 0x5596c16102c0] mmco: unref short failure
[h264 @ 0x5596c16102c0] mmco: unref short failure
[h264 @ 0x5596c16102c0] mmco: unref short failure
[h264 @ 0x5596c16102c0] mmco: unref short failure
[h264 @ 0x55bc1279c740] mmco: unref short failure
[h264 @ 0x55bc1279c740] mmco: unref short failure
[h264 @ 0x5596c25109c0] mmco: unref short failure
[h264 @ 0x5596c25109c0] mmco: unref short failure
[h264 @ 0x5591dcd441c0] mmco: unref short failure
[h264 @ 0x5591dcd441c0] mmco: unref short failure
[h264 @ 0x55bc0fd9c840] mmco: unref short failure
 15%|█▌        | 240/1556 [49:20<8:46:41, 24.01s/it] 15%|█▌        | 241/1556 [49:26<6:43:08, 18.39s/it][h264 @ 0x55aae2f41280] mmco: unref short failure
[h264 @ 0x5596b01e4b80] mmco: unref short failure
[h264 @ 0x5596b01e4b80] mmco: unref short failure
 16%|█▌        | 242/1556 [49:31<5:15:48, 14.42s/it][h264 @ 0x55aae0b32a80] mmco: unref short failure
[h264 @ 0x55aae0b32a80] mmco: unref short failure
 16%|█▌        | 243/1556 [49:35<4:11:35, 11.50s/it] 16%|█▌        | 244/1556 [49:41<3:32:19,  9.71s/it] 16%|█▌        | 245/1556 [49:46<2:59:27,  8.21s/it][h264 @ 0x55bc1c7e0200] mmco: unref short failure
[h264 @ 0x55bc1c7e0200] mmco: unref short failure
 16%|█▌        | 246/1556 [49:50<2:35:05,  7.10s/it] 16%|█▌        | 247/1556 [49:55<2:21:07,  6.47s/it][h264 @ 0x5591eeac5e40] mmco: unref short failure
[h264 @ 0x5591eeac5e40] mmco: unref short failure
[h264 @ 0x55aad944fb00] mmco: unref short failure
[h264 @ 0x55bc248205c0] mmco: unref short failure
[h264 @ 0x55bc248205c0] mmco: unref short failure
[h264 @ 0x5591e8e56a40] mmco: unref short failure
[h264 @ 0x5591e8e56a40] mmco: unref short failure
[h264 @ 0x55aad4e3dd00] mmco: unref short failure
[h264 @ 0x55aaddcf7f80] mmco: unref short failure
 16%|█▌        | 248/1556 [50:57<8:21:09, 22.99s/it][h264 @ 0x5591e3b61fc0] mmco: unref short failure
[h264 @ 0x5596b358a640] mmco: unref short failure
[h264 @ 0x5596c3c227c0] mmco: unref short failure
[h264 @ 0x5596c3c227c0] mmco: unref short failure
 16%|█▌        | 249/1556 [51:01<6:18:16, 17.36s/it][h264 @ 0x55aae8409100] mmco: unref short failure
09/07/2024 03:20:33 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.50046968460083, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04576371610164642, 'loss_ret%tv%ta--finetune_area/loss_area': 3.1652941703796387, 'loss_ret%tv%ta--finetune_area/total_loss': 6.7115278244018555}
 16%|█▌        | 250/1556 [51:07<5:01:49, 13.87s/it][h264 @ 0x55bc175efd00] mmco: unref short failure
 16%|█▌        | 251/1556 [51:13<4:11:59, 11.59s/it][h264 @ 0x5596c722ab40] mmco: unref short failure
[h264 @ 0x5596c722ab40] mmco: unref short failure
 16%|█▌        | 252/1556 [51:18<3:30:02,  9.66s/it] 16%|█▋        | 253/1556 [51:23<3:00:53,  8.33s/it] 16%|█▋        | 254/1556 [51:29<2:40:21,  7.39s/it] 16%|█▋        | 255/1556 [51:34<2:26:18,  6.75s/it][h264 @ 0x55bc12831d80] mmco: unref short failure
[h264 @ 0x55bc12831d80] mmco: unref short failure
[h264 @ 0x55bc182dc400] mmco: unref short failure
[h264 @ 0x5591e57ab0c0] mmco: unref short failure
[h264 @ 0x5591e57ab0c0] mmco: unref short failure
[h264 @ 0x5596b724fb00] mmco: unref short failure
[h264 @ 0x5591e10a2180] mmco: unref short failure
[h264 @ 0x5591e10a2180] mmco: unref short failure
[h264 @ 0x55aadbdba6c0] mmco: unref short failure
[h264 @ 0x5596b82764c0] mmco: unref short failure
[h264 @ 0x5591eba95940] mmco: unref short failure
[h264 @ 0x5591eba95940] mmco: unref short failure
[h264 @ 0x5596c722afc0] mmco: unref short failure
[h264 @ 0x5596c722afc0] mmco: unref short failure
[h264 @ 0x5591dadeebc0] mmco: unref short failure
[h264 @ 0x5591e22b4500] mmco: unref short failure
[h264 @ 0x5591e22b4500] mmco: unref short failure
 16%|█▋        | 256/1556 [52:37<8:35:55, 23.81s/it] 17%|█▋        | 257/1556 [52:42<6:30:39, 18.04s/it] 17%|█▋        | 258/1556 [52:48<5:10:41, 14.36s/it][h264 @ 0x55bc14455380] mmco: unref short failure
 17%|█▋        | 259/1556 [52:53<4:10:36, 11.59s/it] 17%|█▋        | 260/1556 [52:58<3:25:33,  9.52s/it] 17%|█▋        | 261/1556 [53:03<2:56:36,  8.18s/it][h264 @ 0x55bc0faa46c0] mmco: unref short failure
[h264 @ 0x55bc0faa46c0] mmco: unref short failure
[h264 @ 0x55aae62a8a00] mmco: unref short failure
[h264 @ 0x55aae62a8a00] mmco: unref short failure
 17%|█▋        | 262/1556 [53:08<2:36:16,  7.25s/it] 17%|█▋        | 263/1556 [53:12<2:16:42,  6.34s/it][h264 @ 0x5591ef772640] mmco: unref short failure
[h264 @ 0x5591ef772640] mmco: unref short failure
[h264 @ 0x55bc177d1600] mmco: unref short failure
[h264 @ 0x55bc177d1600] mmco: unref short failure
[h264 @ 0x55aae68ad3c0] mmco: unref short failure
[h264 @ 0x55bc18594380] mmco: unref short failure
[h264 @ 0x55bc18594380] mmco: unref short failure
[h264 @ 0x5591eeb70540] mmco: unref short failure
[h264 @ 0x5591db326780] mmco: unref short failure
[h264 @ 0x5591db326780] mmco: unref short failure
[h264 @ 0x55bc14305000] mmco: unref short failure
[h264 @ 0x55bc14305000] mmco: unref short failure
[h264 @ 0x5596b269fa80] mmco: unref short failure
[h264 @ 0x5596b269fa80] mmco: unref short failure
 17%|█▋        | 264/1556 [54:20<8:55:51, 24.88s/it] 17%|█▋        | 265/1556 [54:25<6:44:00, 18.78s/it] 17%|█▋        | 266/1556 [54:30<5:15:35, 14.68s/it] 17%|█▋        | 267/1556 [54:34<4:11:14, 11.70s/it][h264 @ 0x55bc12064680] mmco: unref short failure
[h264 @ 0x55bc12064680] mmco: unref short failure
 17%|█▋        | 268/1556 [54:40<3:29:58,  9.78s/it] 17%|█▋        | 269/1556 [54:45<2:59:13,  8.36s/it][h264 @ 0x5591ec598ec0] mmco: unref short failure
[h264 @ 0x5591ec598ec0] mmco: unref short failure
 17%|█▋        | 270/1556 [54:49<2:35:19,  7.25s/it][h264 @ 0x55aadf68fac0] mmco: unref short failure
 17%|█▋        | 271/1556 [54:55<2:25:11,  6.78s/it][h264 @ 0x55bc1f7b6c80] mmco: unref short failure
[h264 @ 0x55bc1f7b6c80] mmco: unref short failure
[h264 @ 0x55bc11a73540] mmco: unref short failure
[h264 @ 0x55aae63d4400] mmco: unref short failure
[h264 @ 0x55aad598b280] mmco: unref short failure
[h264 @ 0x55aad598b280] mmco: unref short failure
[h264 @ 0x5591dadeedc0] mmco: unref short failure
[h264 @ 0x5591dadeedc0] mmco: unref short failure
[h264 @ 0x5591df180f00] mmco: unref short failure
[h264 @ 0x5591f1dc1a00] mmco: unref short failure
[h264 @ 0x5591f1dc1a00] mmco: unref short failure
[h264 @ 0x55bc10722700] mmco: unref short failure
[h264 @ 0x55bc10722700] mmco: unref short failure
[h264 @ 0x55bc10722700] mmco: unref short failure
[h264 @ 0x55bc15427600] mmco: unref short failure
[h264 @ 0x55bc11d44e00] mmco: unref short failure
 17%|█▋        | 272/1556 [55:56<8:10:12, 22.91s/it] 18%|█▊        | 273/1556 [56:01<6:13:37, 17.47s/it] 18%|█▊        | 274/1556 [56:06<4:53:41, 13.75s/it] 18%|█▊        | 275/1556 [56:10<3:54:53, 11.00s/it] 18%|█▊        | 276/1556 [56:15<3:12:42,  9.03s/it][h264 @ 0x55bc17813540] mmco: unref short failure
[h264 @ 0x5596badbb240] mmco: unref short failure
[h264 @ 0x5591f3ba0940] mmco: unref short failure
[h264 @ 0x5591f3ba0940] mmco: unref short failure
 18%|█▊        | 277/1556 [56:20<2:50:29,  8.00s/it][h264 @ 0x5591ed7706c0] mmco: unref short failure
[h264 @ 0x5591ed7706c0] mmco: unref short failure
[h264 @ 0x55aae58b4680] mmco: unref short failure
 18%|█▊        | 278/1556 [56:25<2:29:44,  7.03s/it] 18%|█▊        | 279/1556 [56:30<2:14:21,  6.31s/it][h264 @ 0x5591f07f3300] mmco: unref short failure
[h264 @ 0x55bc16fddd00] mmco: unref short failure
[h264 @ 0x55bc0fab14c0] mmco: unref short failure
[h264 @ 0x55bc204d57c0] mmco: unref short failure
[h264 @ 0x5591ee349e00] mmco: unref short failure
[h264 @ 0x5591ee349e00] mmco: unref short failure
 18%|█▊        | 280/1556 [57:34<8:27:42, 23.87s/it] 18%|█▊        | 281/1556 [57:40<6:30:10, 18.36s/it][h264 @ 0x55bc1f9a3cc0] mmco: unref short failure
[h264 @ 0x55bc1f9a3cc0] mmco: unref short failure
[h264 @ 0x5596babba500] mmco: unref short failure
 18%|█▊        | 282/1556 [57:45<5:02:43, 14.26s/it] 18%|█▊        | 283/1556 [57:49<4:00:00, 11.31s/it] 18%|█▊        | 284/1556 [57:54<3:20:06,  9.44s/it][h264 @ 0x5596b19e5700] mmco: unref short failure
 18%|█▊        | 285/1556 [57:59<2:51:05,  8.08s/it] 18%|█▊        | 286/1556 [58:05<2:34:53,  7.32s/it] 18%|█▊        | 287/1556 [58:10<2:23:08,  6.77s/it][h264 @ 0x55aad4c6d300] mmco: unref short failure
[h264 @ 0x55aad4c6d300] mmco: unref short failure
[h264 @ 0x55aae1281bc0] mmco: unref short failure
[h264 @ 0x5591e53018c0] mmco: unref short failure
[h264 @ 0x5591e53018c0] mmco: unref short failure
[h264 @ 0x55bc167be400] mmco: unref short failure
[h264 @ 0x55bc167be400] mmco: unref short failure
[h264 @ 0x55bc1815ba00] mmco: unref short failure
[h264 @ 0x55aad9523b80] mmco: unref short failure
[h264 @ 0x5591e230cbc0] mmco: unref short failure
[h264 @ 0x5591ed9e2700] mmco: unref short failure
[h264 @ 0x5596b8854300] mmco: unref short failure
[h264 @ 0x5596b8854300] mmco: unref short failure
[h264 @ 0x5596bd377c40] mmco: unref short failure
 19%|█▊        | 288/1556 [59:12<8:15:14, 23.43s/it] 19%|█▊        | 289/1556 [59:18<6:20:36, 18.02s/it] 19%|█▊        | 290/1556 [59:23<4:58:44, 14.16s/it][h264 @ 0x5596c7b149c0] mmco: unref short failure
[h264 @ 0x5596c7b149c0] mmco: unref short failure
 19%|█▊        | 291/1556 [59:29<4:08:05, 11.77s/it][h264 @ 0x55bc1d2b6600] mmco: unref short failure
[h264 @ 0x55aae6891bc0] mmco: unref short failure
[h264 @ 0x55aae6891bc0] mmco: unref short failure
 19%|█▉        | 292/1556 [59:34<3:23:43,  9.67s/it] 19%|█▉        | 293/1556 [59:39<2:54:47,  8.30s/it][h264 @ 0x5591ef8a23c0] mmco: unref short failure
 19%|█▉        | 294/1556 [59:44<2:35:53,  7.41s/it] 19%|█▉        | 295/1556 [59:49<2:18:31,  6.59s/it][h264 @ 0x55bc0f3b6480] mmco: unref short failure
[h264 @ 0x55bc0f3b6480] mmco: unref short failure
[h264 @ 0x5596bb1fdc80] mmco: unref short failure
[h264 @ 0x5596bb1fdc80] mmco: unref short failure
[h264 @ 0x55bc204d53c0] mmco: unref short failure
[h264 @ 0x55aad5e79140] mmco: unref short failure
[h264 @ 0x55aad5e79140] mmco: unref short failure
[h264 @ 0x55bc20e8e480] mmco: unref short failure
[h264 @ 0x55bc20e8e480] mmco: unref short failure
[h264 @ 0x55bc1c36aa40] mmco: unref short failure
[h264 @ 0x5596b88b4f80] mmco: unref short failure
[h264 @ 0x55aad9bcf440] mmco: unref short failure
[h264 @ 0x55bc1536c840] mmco: unref short failure
[h264 @ 0x55bc1536c840] mmco: unref short failure
[h264 @ 0x5596c4306d80] mmco: unref short failure
[h264 @ 0x5596c4306d80] mmco: unref short failure
[h264 @ 0x55bc1fc4de80] mmco: unref short failure
[h264 @ 0x5591ece7f900] mmco: unref short failure
[h264 @ 0x5591de353f40] mmco: unref short failure
[h264 @ 0x55bc1d95c0c0] mmco: unref short failure
[h264 @ 0x55bc1d95c0c0] mmco: unref short failure
[h264 @ 0x55aad5554300] mmco: unref short failure
[h264 @ 0x55aad5554300] mmco: unref short failure
[h264 @ 0x55aad460fd80] mmco: unref short failure
[h264 @ 0x55aad460fd80] mmco: unref short failure
 19%|█▉        | 296/1556 [1:00:53<8:22:25, 23.92s/it][h264 @ 0x5596b92f7a00] mmco: unref short failure
[h264 @ 0x5596b92f7a00] mmco: unref short failure
[h264 @ 0x5591dc777b80] mmco: unref short failure
[h264 @ 0x5591dc777b80] mmco: unref short failure
 19%|█▉        | 297/1556 [1:00:59<6:24:29, 18.32s/it] 19%|█▉        | 298/1556 [1:01:03<4:59:08, 14.27s/it][h264 @ 0x5591df313780] mmco: unref short failure
 19%|█▉        | 299/1556 [1:01:08<4:00:29, 11.48s/it]09/07/2024 03:30:38 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/07/2024 03:30:38 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5596b2be3fc0] mmco: unref short failure
[h264 @ 0x5596b2be3fc0] mmco: unref short failure
[h264 @ 0x5591e5472c80] mmco: unref short failure
[h264 @ 0x5591e5472c80] mmco: unref short failure
[h264 @ 0x55aae94ce080] mmco: unref short failure
Traceback (most recent call last):
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/./run.py", line 81, in <module>
    main()
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/./run.py", line 64, in main
    train(model, optimizer, train_loader, val_loaders, args.run_cfg, start_step = start_step, verbose_time=False)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/pipeline.py", line 121, in train
    eval_log = evaluate_fn(model, val_loaders, run_cfg, global_step)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 27, in evaluate_mm
    val_log = evaluate_single(model, loader, task.split('--')[0], run_cfg, global_step,task.split('--')[1])
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 43, in evaluate_single
    ret_dict = evaluate_ret(model, task, val_loader, global_step)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 190, in evaluate_ret
    for i, batch in enumerate(val_loader):
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/data/loader.py", line 101, in __iter__
    self.preload(loader_it)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/data/loader.py", line 112, in preload
    self.batch = next(it)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 633, in __next__
    data = self._next_data()
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1345, in _next_data
    return self._process_data(data)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1371, in _process_data
    data.reraise()
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/_utils.py", line 644, in reraise
    raise exception
UnboundLocalError: Caught UnboundLocalError in DataLoader worker process 0.
Original Traceback (most recent call last):
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/_utils/worker.py", line 308, in _worker_loop
    data = fetcher.fetch(index)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 51, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 51, in <listcomp>
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/data/IndexAnno.py", line 179, in __getitem__
    audio_spectrograms, raw_subtitles, vision_cap, audio_cap
UnboundLocalError: local variable 'vision_cap' referenced before assignment

Traceback (most recent call last):
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/./run.py", line 81, in <module>
    main()
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/./run.py", line 64, in main
    train(model, optimizer, train_loader, val_loaders, args.run_cfg, start_step = start_step, verbose_time=False)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/pipeline.py", line 121, in train
    eval_log = evaluate_fn(model, val_loaders, run_cfg, global_step)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 27, in evaluate_mm
    val_log = evaluate_single(model, loader, task.split('--')[0], run_cfg, global_step,task.split('--')[1])
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 43, in evaluate_single
    ret_dict = evaluate_ret(model, task, val_loader, global_step)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 190, in evaluate_ret
    for i, batch in enumerate(val_loader):
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/data/loader.py", line 101, in __iter__
    self.preload(loader_it)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/data/loader.py", line 112, in preload
    self.batch = next(it)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 633, in __next__
    data = self._next_data()
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1345, in _next_data
    return self._process_data(data)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1371, in _process_data
    data.reraise()
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/_utils.py", line 644, in reraise
    raise exception
UnboundLocalError: Caught UnboundLocalError in DataLoader worker process 0.
Original Traceback (most recent call last):
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/_utils/worker.py", line 308, in _worker_loop
    data = fetcher.fetch(index)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 51, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 51, in <listcomp>
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/data/IndexAnno.py", line 179, in __getitem__
    audio_spectrograms, raw_subtitles, vision_cap, audio_cap
UnboundLocalError: local variable 'vision_cap' referenced before assignment

Traceback (most recent call last):
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/./run.py", line 81, in <module>
    main()
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/./run.py", line 64, in main
    train(model, optimizer, train_loader, val_loaders, args.run_cfg, start_step = start_step, verbose_time=False)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/pipeline.py", line 121, in train
    eval_log = evaluate_fn(model, val_loaders, run_cfg, global_step)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 27, in evaluate_mm
    val_log = evaluate_single(model, loader, task.split('--')[0], run_cfg, global_step,task.split('--')[1])
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 43, in evaluate_single
    ret_dict = evaluate_ret(model, task, val_loader, global_step)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 190, in evaluate_ret
    for i, batch in enumerate(val_loader):
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/data/loader.py", line 101, in __iter__
    self.preload(loader_it)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/data/loader.py", line 112, in preload
    self.batch = next(it)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 633, in __next__
    data = self._next_data()
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1345, in _next_data
    return self._process_data(data)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1371, in _process_data
    data.reraise()
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/_utils.py", line 644, in reraise
    raise exception
UnboundLocalError: Caught UnboundLocalError in DataLoader worker process 0.
Original Traceback (most recent call last):
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/_utils/worker.py", line 308, in _worker_loop
    data = fetcher.fetch(index)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 51, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 51, in <listcomp>
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/data/IndexAnno.py", line 179, in __getitem__
    audio_spectrograms, raw_subtitles, vision_cap, audio_cap
UnboundLocalError: local variable 'vision_cap' referenced before assignment

Traceback (most recent call last):
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/./run.py", line 81, in <module>
    main()
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/./run.py", line 64, in main
    train(model, optimizer, train_loader, val_loaders, args.run_cfg, start_step = start_step, verbose_time=False)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/pipeline.py", line 121, in train
    eval_log = evaluate_fn(model, val_loaders, run_cfg, global_step)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 27, in evaluate_mm
    val_log = evaluate_single(model, loader, task.split('--')[0], run_cfg, global_step,task.split('--')[1])
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 43, in evaluate_single
    ret_dict = evaluate_ret(model, task, val_loader, global_step)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 190, in evaluate_ret
    for i, batch in enumerate(val_loader):
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/data/loader.py", line 101, in __iter__
    self.preload(loader_it)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/data/loader.py", line 112, in preload
    self.batch = next(it)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 633, in __next__
    data = self._next_data()
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1345, in _next_data
    return self._process_data(data)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1371, in _process_data
    data.reraise()
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/_utils.py", line 644, in reraise
    raise exception
UnboundLocalError: Caught UnboundLocalError in DataLoader worker process 0.
Original Traceback (most recent call last):
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/_utils/worker.py", line 308, in _worker_loop
    data = fetcher.fetch(index)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 51, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 51, in <listcomp>
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/data/IndexAnno.py", line 179, in __getitem__
    audio_spectrograms, raw_subtitles, vision_cap, audio_cap
UnboundLocalError: local variable 'vision_cap' referenced before assignment

Traceback (most recent call last):
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/./run.py", line 81, in <module>
    main()
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/./run.py", line 64, in main
    train(model, optimizer, train_loader, val_loaders, args.run_cfg, start_step = start_step, verbose_time=False)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/pipeline.py", line 121, in train
    eval_log = evaluate_fn(model, val_loaders, run_cfg, global_step)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 27, in evaluate_mm
    val_log = evaluate_single(model, loader, task.split('--')[0], run_cfg, global_step,task.split('--')[1])
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 43, in evaluate_single
    ret_dict = evaluate_ret(model, task, val_loader, global_step)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/evaluation/evaluation_mm.py", line 190, in evaluate_ret
    for i, batch in enumerate(val_loader):
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/data/loader.py", line 101, in __iter__
    self.preload(loader_it)
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/data/loader.py", line 112, in preload
    self.batch = next(it)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 633, in __next__
    data = self._next_data()
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1345, in _next_data
    return self._process_data(data)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1371, in _process_data
    data.reraise()
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/_utils.py", line 644, in reraise
    raise exception
UnboundLocalError: Caught UnboundLocalError in DataLoader worker process 0.
Original Traceback (most recent call last):
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/_utils/worker.py", line 308, in _worker_loop
    data = fetcher.fetch(index)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 51, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 51, in <listcomp>
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/data/IndexAnno.py", line 179, in __getitem__
    audio_spectrograms, raw_subtitles, vision_cap, audio_cap
UnboundLocalError: local variable 'vision_cap' referenced before assignment

/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
wandb: 
wandb: Run history:
wandb:  loss_area ▆█▅▅▅▂▃▃▂▃▃▂▂▂▂▂▂▂▁▂▂▂▂▁▃▂▂▃▂▂▁▂▂▂▂▂▁▂▂▂
wandb:   loss_itc ▇█▆▆▆▃▄▄▃▆▅▃▂▂▃▂▅▃▂▃▃▂▃▁▃▃▂▅▁▃▂▃▃▂▂▃▁▄▂▃
wandb:   loss_itm ▅█▄▂▄▂▄▂▂▄▃▃▂▂▂▃▄▃▁▃▃▂▃▂▃▂▂▃▃▃▂▃▂▂▁▃▂▃▂▂
wandb: total_loss ▆█▅▅▅▃▃▃▂▄▃▂▂▂▂▂▃▂▁▂▂▂▂▁▂▂▂▃▁▂▂▂▂▂▂▂▁▃▂▂
wandb: 
wandb: Run summary:
wandb:  loss_area 2.86185
wandb:   loss_itc 3.18138
wandb:   loss_itm 0.04491
wandb: total_loss 6.08815
wandb: 
wandb: You can sync this run to the cloud by running:
wandb: wandb sync /leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/wandb/offline-run-20240907_022640-p5enp7ra
wandb: Find logs at: ./wandb/offline-run-20240907_022640-p5enp7ra/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5591df3ccbc0] mmco: unref short failure
09/07/2024 03:31:15 - WARNING - urllib3.connectionpool -   Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x1545f4fabe20>: Failed to establish a new connection: [Errno 101] Network is unreachable')': /api/4504800232407040/envelope/
09/07/2024 03:31:15 - WARNING - urllib3.connectionpool -   Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x1545f4fad070>: Failed to establish a new connection: [Errno 101] Network is unreachable')': /api/4504800232407040/envelope/
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 3455007 closing signal SIGTERM
ERROR:torch.distributed.elastic.multiprocessing.api:failed (exitcode: 1) local_rank: 1 (pid: 3455008) of binary: /leonardo/home/userexternal/gcicchet/.conda/envs/vast/bin/python3
Traceback (most recent call last):
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/runpy.py", line 197, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/distributed/launch.py", line 196, in <module>
    main()
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/distributed/launch.py", line 192, in main
    launch(args)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/distributed/launch.py", line 177, in launch
    run(args)
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/distributed/run.py", line 785, in run
    elastic_launch(
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 134, in __call__
    return launch_agent(self._config, self._entrypoint, list(args))
  File "/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 250, in launch_agent
    raise ChildFailedError(
torch.distributed.elastic.multiprocessing.errors.ChildFailedError: 
============================================================
./run.py FAILED
------------------------------------------------------------
Failures:
[1]:
  time      : 2024-09-07_03:31:18
  host      : lrdn0656.leonardo.local
  rank      : 2 (local_rank: 2)
  exitcode  : 1 (pid: 3455009)
  error_file: <N/A>
  traceback : To enable traceback see: https://pytorch.org/docs/stable/elastic/errors.html
[2]:
  time      : 2024-09-07_03:31:18
  host      : lrdn0656-net2-3.leonardo.local
  rank      : 3 (local_rank: 3)
  exitcode  : 1 (pid: 3455010)
  error_file: <N/A>
  traceback : To enable traceback see: https://pytorch.org/docs/stable/elastic/errors.html
------------------------------------------------------------
Root Cause (first observed failure):
[0]:
  time      : 2024-09-07_03:31:18
  host      : lrdn0656-net2-3.leonardo.local
  rank      : 1 (local_rank: 1)
  exitcode  : 1 (pid: 3455008)
  error_file: <N/A>
  traceback : To enable traceback see: https://pytorch.org/docs/stable/elastic/errors.html
============================================================
srun: error: lrdn0656: task 0: Exited with exit code 1
