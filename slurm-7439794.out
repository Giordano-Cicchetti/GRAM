NODELIST=lrdn0227
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/distributed/launch.py:181: FutureWarning: The module torch.distributed.launch is deprecated
and will be removed in future. Use torchrun.
Note that --use-env is set by default in torchrun.
If your script expects `--local-rank` argument to be set, please
change it to read from `os.environ['LOCAL_RANK']` instead. See 
https://pytorch.org/docs/stable/distributed.html#launch-utility for 
further instructions

  warnings.warn(
WARNING:torch.distributed.run:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
3120



DEVICE SET
DEVICE SET
DEVICE SET
DEVICE SET
09/07/2024 11:35:26 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 0
09/07/2024 11:35:26 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 1
09/07/2024 11:35:26 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 2
09/07/2024 11:35:26 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 3
09/07/2024 11:35:26 - INFO - torch.distributed.distributed_c10d -   Rank 0: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/07/2024 11:35:26 - INFO - torch.distributed.distributed_c10d -   Rank 2: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/07/2024 11:35:26 - INFO - torch.distributed.distributed_c10d -   Rank 3: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/07/2024 11:35:26 - INFO - torch.distributed.distributed_c10d -   Rank 1: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/07/2024 11:35:26 - INFO - __main__ -   ==================model_configs==================

09/07/2024 11:35:26 - INFO - __main__ -   model_cfg_model_type : vast
09/07/2024 11:35:26 - INFO - __main__ -   model_cfg_itm_ratio : 0.1
09/07/2024 11:35:26 - INFO - __main__ -   model_cfg_frozen_vision : False
09/07/2024 11:35:26 - INFO - __main__ -   model_cfg_frozen_audio : False
09/07/2024 11:35:26 - INFO - __main__ -   model_cfg_checkpointing : True
09/07/2024 11:35:26 - INFO - __main__ -   model_cfg_max_caption_len : 40
09/07/2024 11:35:26 - INFO - __main__ -   model_cfg_max_omni_caption_len : 70
09/07/2024 11:35:26 - INFO - __main__ -   model_cfg_max_subtitle_len : 70
09/07/2024 11:35:26 - INFO - __main__ -   model_cfg_contra_dim : 512
09/07/2024 11:35:26 - INFO - __main__ -   model_cfg_inherit_keys : ['vision_encoder_type', 'audio_encoder_type', 'audio_melbins', 'audio_target_length']
09/07/2024 11:35:26 - INFO - __main__ -   model_cfg_frame_embedding_type : adaptive
09/07/2024 11:35:26 - INFO - __main__ -   model_cfg_vision_resolution : 224
09/07/2024 11:35:26 - INFO - __main__ -   model_cfg_vision_encoder_type : evaclip01_giant
09/07/2024 11:35:26 - INFO - __main__ -   model_cfg_audio_encoder_type : beats
09/07/2024 11:35:26 - INFO - __main__ -   model_cfg_audio_melbins : 64
09/07/2024 11:35:26 - INFO - __main__ -   model_cfg_audio_target_length : 1024
09/07/2024 11:35:26 - INFO - __main__ -   model_cfg_beam_size : 3
09/07/2024 11:35:26 - INFO - __main__ -   model_cfg_captioner_mode : False
09/07/2024 11:35:26 - INFO - __main__ -   model_cfg_generate_nums : 1
09/07/2024 11:35:26 - INFO - __main__ -   model_cfg_ret_bidirection_evaluation : False
09/07/2024 11:35:26 - INFO - __main__ -   model_cfg_itm_rerank_num : 50
09/07/2024 11:35:26 - INFO - __main__ -   model_cfg_evaluation_type : evaluation_mm
09/07/2024 11:35:26 - INFO - __main__ -   model_cfg_default : ./config/vast/default_model_cfg.json
09/07/2024 11:35:26 - INFO - __main__ -   model_cfg_max_vision_sample_num : 1
09/07/2024 11:35:26 - INFO - __main__ -   model_cfg_max_audio_sample_num : 1
09/07/2024 11:35:26 - INFO - __main__ -   ==================run_configs==================

09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_checkpoint : 
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_output_dir : ./output/vast/pretrain_vast/downstream/finetuneArea
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_gradient_accumulation_steps : 1
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_clip_lr : 5e-07
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_optim : adamw
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_learning_rate : 2e-05
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_betas : [0.9, 0.98]
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_weight_decay : 0.01
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_grad_norm : 2.0
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_warmup_ratio : 0.1
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_resume : False
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_seed : 50
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_fp16 : True
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_bf16 : False
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_zero_shot : False
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_scheduler : warmup_linear
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_new_lr : 0
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_new_params_name : []
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_valid_freq : 10
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_dataset_mix_type : random
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_remove_before_ckpt : True
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_first_eval : True
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_pretrain_dir : ./output/vast/pretrain_vast
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_num_train_steps : 0
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_save_best : True
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_pin_mem : True
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_vision_resolution : 224
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_use_ddp : False
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_mode : training
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_log_steps : 100
09/07/2024 11:35:26 - INFO - __main__ -   run_cfg_default : ./config/vast/default_run_cfg.json
09/07/2024 11:35:26 - INFO - __main__ -   ==================data_configs==================

09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_finetune_area_train_type : annoindexed
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_finetune_area_train_training : True
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_finetune_area_train_name : finetune_area
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_finetune_area_train_txt : ../vast27m/annotations100k.json
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_finetune_area_train_vision : ../vast27m/videos/
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_finetune_area_train_audio : ../vast27m/audios
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_finetune_area_train_vision_transforms : crop_flip
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_finetune_area_train_vision_format : video_rawvideo
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_finetune_area_train_vision_sample_num : 1
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_finetune_area_train_audio_sample_num : 1
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_finetune_area_train_task : ret%tv%ta
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_finetune_area_train_epoch : 5
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_finetune_area_train_n_workers : 8
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_finetune_area_train_batch_size : 256
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_msrvtt_ret_val_type : annoindexed
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_msrvtt_ret_val_training : False
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_msrvtt_ret_val_name : msrvtt_ret
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_msrvtt_ret_val_txt : datasets/annotations/msrvtt/descs_ret_test.json
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision : ../MSRVTT/video_test
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_transforms : crop_flip
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_format : video_rawvideo
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_msrvtt_ret_val_audio : ../MSRVTT/audio_test
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_sample_num : 8
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_msrvtt_ret_val_audio_sample_num : 1
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_msrvtt_ret_val_task : ret%tv
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_msrvtt_ret_val_n_workers : 8
09/07/2024 11:35:26 - INFO - __main__ -   data_cfg_msrvtt_ret_val_batch_size : 64
wandb: Tracking run with wandb version 0.17.8
wandb: W&B syncing is set to `offline` in this directory.  
wandb: Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
09/07/2024 11:35:30 - INFO - __main__ -   finetune_area Using clip mean and std.
09/07/2024 11:35:30 - INFO - __main__ -   finetune_area transforms crop_flip
ci sono 99621 labelsci sono 99621 labels
ci sono 99621 labels
ci sono 99621 labels

09/07/2024 11:36:11 - INFO - __main__ -   Create Dataset finetune_area Success
09/07/2024 11:36:11 - INFO - __main__ -    loader ret%tv%ta--finetune_area , ratio 1945 , bs_pergpu 64, n_workers 8
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5565c449ab40] mmco: unref short failure
[h264 @ 0x5565c449ab40] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
09/07/2024 11:36:14 - INFO - __main__ -   msrvtt_ret Using clip mean and std.
09/07/2024 11:36:14 - INFO - __main__ -   msrvtt_ret transforms crop_flip
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
ci sono 884 labels
ci sono 884 labels
09/07/2024 11:36:15 - INFO - __main__ -   Create Dataset msrvtt_ret Success
ci sono 884 labels
ci sono 884 labels
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
09/07/2024 11:36:18 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
09/07/2024 11:36:18 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
09/07/2024 11:36:18 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
09/07/2024 11:36:18 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55fc1da13fc0] mmco: unref short failure
[h264 @ 0x55ed80ccc740] mmco: unref short failure
[h264 @ 0x55ed80ccc740] mmco: unref short failure
[h264 @ 0x55ed82615800] mmco: unref short failure
[h264 @ 0x55fc1d075740] mmco: unref short failure
[h264 @ 0x55b878c62880] mmco: unref short failure
[h264 @ 0x55b878c62880] mmco: unref short failure
[h264 @ 0x55b878c62880] mmco: unref short failure
[h264 @ 0x55b878c62880] mmco: unref short failure
[h264 @ 0x55b87accbc00] mmco: unref short failure
[h264 @ 0x55ed814be780] mmco: unref short failure
09/07/2024 11:37:25 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
09/07/2024 11:37:26 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
09/07/2024 11:37:27 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
[h264 @ 0x55ed8439fb80] mmco: unref short failure
[h264 @ 0x55ed8439fb80] mmco: unref short failure
09/07/2024 11:37:34 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
09/07/2024 11:37:37 - INFO - root -   incompatible_keys.missing_keys: []
09/07/2024 11:37:37 - INFO - root -   incompatible_keys.missing_keys: []
09/07/2024 11:37:37 - INFO - root -   incompatible_keys.missing_keys: []
[h264 @ 0x5565c86fdb80] mmco: unref short failure
09/07/2024 11:37:39 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/07/2024 11:37:39 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/07/2024 11:37:39 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
[h264 @ 0x55b87a0d4400] mmco: unref short failure
[h264 @ 0x55fc20593100] mmco: unref short failure
09/07/2024 11:37:45 - INFO - root -   incompatible_keys.missing_keys: []
09/07/2024 11:37:46 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
[h264 @ 0x5565c6a2ee40] mmco: unref short failure
09/07/2024 11:37:50 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
09/07/2024 11:37:51 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
09/07/2024 11:37:51 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
09/07/2024 11:37:57 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.5.crossattention.self.value.weight', 'cls.predictions.bias', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.query.bias', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.3.crossattention.self.value.bias', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.self.key.bias', 'cls.predictions.transform.dense.bias', 'cls.predictions.transform.dense.weight', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.value.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.output.dense.weight', 'cls.predictions.transform.dense.weight', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.5.crossattention.output.dense.bias', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.9.crossattention.output.dense.weight', 'cls.predictions.bias', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'cls.predictions.transform.dense.bias', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.0.crossattention.self.value.weight', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.query.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.9.crossattention.self.value.weight', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.key.bias', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.output.dense.weight', 'cls.predictions.bias', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'cls.predictions.transform.dense.weight', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'cls.predictions.transform.dense.bias', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.10.crossattention.output.dense.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.1.crossattention.output.dense.weight', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.10.crossattention.output.dense.bias', 'cls.predictions.bias', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.value.bias', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.self.value.weight', 'cls.predictions.transform.dense.bias', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.6.crossattention.output.dense.weight', 'cls.predictions.transform.dense.weight', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.key.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
[h264 @ 0x55fc23496e40] mmco: unref short failure
[h264 @ 0x55fc23496e40] mmco: unref short failure
[h264 @ 0x5565c8f60c00] mmco: unref short failure
09/07/2024 11:38:22 - INFO - __main__ -   load_from_pretrained: ./output/vast/pretrain_vast/ckpt/model_step_204994.pt
09/07/2024 11:38:22 - INFO - __main__ -   Load from pretrained dir ./output/vast/pretrain_vast
09/07/2024 11:38:27 - INFO - __main__ -   Unexpected keys ['vision_encoder.text.logit_scale']
09/07/2024 11:38:27 - INFO - __main__ -   missing_keys  ['vision_encoder.logit_scale']
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
09/07/2024 11:38:35 - INFO - __main__ -   ==================learning_rate_settings==================

09/07/2024 11:38:35 - INFO - __main__ -     basic_lr : 2e-05
09/07/2024 11:38:35 - INFO - __main__ -     clip_lr_visual : 5e-07
09/07/2024 11:38:35 - INFO - __main__ -     clip_lr_visual_len : 245
09/07/2024 11:38:35 - INFO - __main__ -     new_lr : 0
09/07/2024 11:38:35 - INFO - __main__ -     new_params_name: []
09/07/2024 11:38:35 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/07/2024 11:38:35 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55fc20bc1fc0] mmco: unref short failure
[h264 @ 0x55fc1d901840] mmco: unref short failure
[h264 @ 0x55fc1d901840] mmco: unref short failure
[h264 @ 0x5565c8873f00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
[h264 @ 0x55ed85704680] mmco: unref short failure
[h264 @ 0x55ed85704680] mmco: unref short failure
[h264 @ 0x55ed842be840] mmco: unref short failure
[h264 @ 0x55ed842be840] mmco: unref short failure
[h264 @ 0x55b87d400000] mmco: unref short failure
[h264 @ 0x55b87d400000] mmco: unref short failure
[h264 @ 0x55fc21520500] mmco: unref short failure
[h264 @ 0x55fc21520500] mmco: unref short failure
[h264 @ 0x55fc21520500] mmco: unref short failure
[h264 @ 0x55fc21520500] mmco: unref short failure
[h264 @ 0x55fc21520500] mmco: unref short failure
[h264 @ 0x55fc21520500] mmco: unref short failure
  0%|          | 0/221 [00:00<?, ?it/s]  0%|          | 1/221 [00:00<00:30,  7.19it/s]  1%|          | 2/221 [00:00<00:55,  3.95it/s]  1%|▏         | 3/221 [00:00<01:08,  3.18it/s]  2%|▏         | 4/221 [00:01<00:56,  3.86it/s]  3%|▎         | 7/221 [00:01<00:25,  8.30it/s]  4%|▍         | 9/221 [00:01<00:27,  7.66it/s]  5%|▍         | 11/221 [00:01<00:21,  9.72it/s]  6%|▌         | 13/221 [00:02<00:49,  4.18it/s]  6%|▋         | 14/221 [00:02<00:45,  4.60it/s]  7%|▋         | 16/221 [00:02<00:36,  5.57it/s]  8%|▊         | 17/221 [00:03<00:57,  3.54it/s]  8%|▊         | 18/221 [00:03<00:52,  3.83it/s]  9%|▊         | 19/221 [00:03<00:48,  4.20it/s] 10%|▉         | 21/221 [00:04<00:37,  5.35it/s] 10%|▉         | 22/221 [00:05<01:22,  2.42it/s] 11%|█         | 24/221 [00:05<00:53,  3.65it/s] 11%|█▏        | 25/221 [00:05<00:46,  4.20it/s] 12%|█▏        | 26/221 [00:05<00:47,  4.12it/s] 13%|█▎        | 28/221 [00:06<00:43,  4.47it/s] 14%|█▎        | 30/221 [00:06<00:32,  5.86it/s] 14%|█▍        | 31/221 [00:06<00:37,  5.12it/s] 15%|█▍        | 33/221 [00:06<00:27,  6.78it/s] 16%|█▌        | 35/221 [00:07<00:25,  7.29it/s] 16%|█▋        | 36/221 [00:07<00:24,  7.42it/s] 17%|█▋        | 37/221 [00:07<00:32,  5.65it/s] 17%|█▋        | 38/221 [00:07<00:32,  5.56it/s] 18%|█▊        | 39/221 [00:07<00:37,  4.83it/s] 18%|█▊        | 40/221 [00:08<00:36,  4.97it/s] 19%|█▉        | 42/221 [00:08<00:29,  6.10it/s] 20%|█▉        | 44/221 [00:08<00:23,  7.64it/s] 20%|██        | 45/221 [00:09<00:51,  3.45it/s] 21%|██        | 46/221 [00:09<01:00,  2.90it/s] 21%|██▏       | 47/221 [00:11<01:54,  1.53it/s] 22%|██▏       | 49/221 [00:11<01:12,  2.37it/s] 23%|██▎       | 50/221 [00:11<01:03,  2.70it/s] 24%|██▎       | 52/221 [00:12<00:41,  4.09it/s] 24%|██▍       | 53/221 [00:12<00:39,  4.27it/s] 24%|██▍       | 54/221 [00:13<01:30,  1.84it/s] 25%|██▍       | 55/221 [00:14<01:43,  1.61it/s] 25%|██▌       | 56/221 [00:14<01:20,  2.06it/s] 26%|██▌       | 58/221 [00:14<00:48,  3.34it/s] 27%|██▋       | 60/221 [00:15<00:43,  3.69it/s] 28%|██▊       | 61/221 [00:15<00:41,  3.89it/s] 29%|██▊       | 63/221 [00:15<00:29,  5.32it/s] 29%|██▉       | 64/221 [00:15<00:27,  5.78it/s] 30%|██▉       | 66/221 [00:18<01:26,  1.80it/s] 30%|███       | 67/221 [00:18<01:17,  2.00it/s] 31%|███       | 68/221 [00:18<01:02,  2.43it/s] 31%|███       | 69/221 [00:19<01:05,  2.31it/s] 32%|███▏      | 71/221 [00:19<00:46,  3.26it/s] 33%|███▎      | 72/221 [00:19<00:46,  3.18it/s] 33%|███▎      | 73/221 [00:19<00:39,  3.74it/s] 34%|███▍      | 75/221 [00:20<00:31,  4.62it/s] 35%|███▍      | 77/221 [00:20<00:28,  4.98it/s] 36%|███▌      | 79/221 [00:21<00:41,  3.44it/s] 37%|███▋      | 81/221 [00:21<00:31,  4.42it/s] 37%|███▋      | 82/221 [00:22<00:42,  3.29it/s] 38%|███▊      | 84/221 [00:22<00:30,  4.48it/s] 39%|███▉      | 86/221 [00:22<00:23,  5.84it/s] 40%|███▉      | 88/221 [00:23<00:28,  4.70it/s] 40%|████      | 89/221 [00:23<00:38,  3.42it/s] 41%|████      | 91/221 [00:23<00:27,  4.77it/s] 42%|████▏     | 93/221 [00:24<00:33,  3.87it/s] 43%|████▎     | 95/221 [00:24<00:25,  4.98it/s] 43%|████▎     | 96/221 [00:25<00:37,  3.37it/s] 44%|████▍     | 98/221 [00:25<00:30,  4.00it/s] 45%|████▍     | 99/221 [00:25<00:28,  4.26it/s] 45%|████▌     | 100/221 [00:25<00:24,  4.86it/s] 46%|████▌     | 102/221 [00:26<00:26,  4.52it/s] 47%|████▋     | 104/221 [00:26<00:20,  5.72it/s] 48%|████▊     | 105/221 [00:26<00:19,  5.81it/s] 48%|████▊     | 106/221 [00:27<00:29,  3.94it/s] 49%|████▉     | 109/221 [00:27<00:17,  6.29it/s] 50%|████▉     | 110/221 [00:27<00:16,  6.69it/s] 50%|█████     | 111/221 [00:28<00:23,  4.60it/s] 51%|█████     | 112/221 [00:28<00:20,  5.21it/s] 51%|█████     | 113/221 [00:28<00:20,  5.25it/s] 52%|█████▏    | 115/221 [00:28<00:14,  7.31it/s] 52%|█████▏    | 116/221 [00:31<01:28,  1.19it/s] 53%|█████▎    | 117/221 [00:32<01:18,  1.33it/s] 54%|█████▍    | 119/221 [00:32<00:51,  1.99it/s] 54%|█████▍    | 120/221 [00:32<00:44,  2.26it/s] 55%|█████▌    | 122/221 [00:32<00:29,  3.38it/s] 56%|█████▌    | 123/221 [00:33<00:25,  3.84it/s] 56%|█████▌    | 124/221 [00:33<00:23,  4.11it/s] 57%|█████▋    | 125/221 [00:33<00:34,  2.77it/s] 57%|█████▋    | 126/221 [00:34<00:35,  2.65it/s] 57%|█████▋    | 127/221 [00:35<00:43,  2.17it/s] 58%|█████▊    | 128/221 [00:35<00:41,  2.23it/s] 58%|█████▊    | 129/221 [00:35<00:35,  2.58it/s] 59%|█████▉    | 131/221 [00:35<00:21,  4.19it/s] 60%|█████▉    | 132/221 [00:36<00:27,  3.27it/s] 60%|██████    | 133/221 [00:36<00:34,  2.54it/s] 61%|██████    | 134/221 [00:37<00:39,  2.18it/s] 61%|██████    | 135/221 [00:38<00:43,  1.96it/s] 62%|██████▏   | 136/221 [00:38<00:47,  1.79it/s] 62%|██████▏   | 137/221 [00:39<00:50,  1.67it/s] 62%|██████▏   | 138/221 [00:40<00:50,  1.63it/s] 63%|██████▎   | 139/221 [00:40<00:50,  1.63it/s] 63%|██████▎   | 140/221 [00:41<00:49,  1.63it/s] 64%|██████▍   | 141/221 [00:42<00:49,  1.61it/s] 64%|██████▍   | 142/221 [00:42<00:39,  2.02it/s] 65%|██████▍   | 143/221 [00:42<00:33,  2.35it/s] 66%|██████▌   | 146/221 [00:42<00:16,  4.67it/s] 67%|██████▋   | 148/221 [00:42<00:11,  6.37it/s] 68%|██████▊   | 150/221 [00:42<00:09,  7.82it/s] 69%|██████▉   | 152/221 [00:44<00:20,  3.36it/s] 69%|██████▉   | 153/221 [00:44<00:18,  3.63it/s] 70%|██████▉   | 154/221 [00:44<00:17,  3.86it/s] 70%|███████   | 155/221 [00:44<00:14,  4.45it/s] 71%|███████   | 156/221 [00:44<00:14,  4.54it/s] 71%|███████   | 157/221 [00:47<00:50,  1.27it/s] 71%|███████▏  | 158/221 [00:47<00:43,  1.46it/s] 72%|███████▏  | 159/221 [00:47<00:32,  1.89it/s] 72%|███████▏  | 160/221 [00:48<00:25,  2.35it/s] 73%|███████▎  | 162/221 [00:48<00:15,  3.76it/s] 74%|███████▍  | 163/221 [00:48<00:15,  3.68it/s] 74%|███████▍  | 164/221 [00:49<00:20,  2.77it/s] 75%|███████▍  | 165/221 [00:49<00:18,  3.01it/s] 75%|███████▌  | 166/221 [00:51<00:48,  1.14it/s] 76%|███████▌  | 168/221 [00:52<00:39,  1.33it/s] 76%|███████▋  | 169/221 [00:53<00:32,  1.62it/s] 77%|███████▋  | 170/221 [00:53<00:30,  1.67it/s] 77%|███████▋  | 171/221 [00:53<00:27,  1.83it/s] 78%|███████▊  | 173/221 [00:54<00:16,  2.96it/s] 79%|███████▉  | 175/221 [00:54<00:11,  3.86it/s] 80%|███████▉  | 176/221 [00:54<00:10,  4.20it/s] 81%|████████  | 178/221 [00:54<00:09,  4.37it/s] 81%|████████  | 179/221 [00:55<00:14,  2.99it/s] 82%|████████▏ | 182/221 [00:55<00:08,  4.76it/s] 83%|████████▎ | 183/221 [00:56<00:08,  4.46it/s] 83%|████████▎ | 184/221 [00:56<00:08,  4.30it/s] 84%|████████▍ | 186/221 [00:56<00:06,  5.49it/s] 85%|████████▍ | 187/221 [00:56<00:05,  5.68it/s] 85%|████████▌ | 188/221 [00:56<00:05,  6.11it/s] 86%|████████▌ | 189/221 [00:57<00:06,  5.04it/s] 86%|████████▌ | 190/221 [00:57<00:05,  5.27it/s] 87%|████████▋ | 192/221 [00:57<00:04,  7.15it/s] 88%|████████▊ | 194/221 [00:57<00:03,  7.33it/s] 88%|████████▊ | 195/221 [00:57<00:03,  7.55it/s] 90%|████████▉ | 198/221 [00:58<00:02, 10.25it/s] 90%|█████████ | 200/221 [00:58<00:01, 10.65it/s] 91%|█████████▏| 202/221 [00:58<00:01, 10.01it/s] 92%|█████████▏| 204/221 [00:58<00:01,  9.49it/s] 93%|█████████▎| 206/221 [00:59<00:02,  6.72it/s] 94%|█████████▎| 207/221 [00:59<00:02,  5.94it/s] 94%|█████████▍| 208/221 [00:59<00:02,  5.40it/s] 95%|█████████▍| 209/221 [01:00<00:02,  4.36it/s] 95%|█████████▌| 211/221 [01:00<00:02,  4.62it/s] 96%|█████████▌| 212/221 [01:00<00:02,  4.12it/s] 96%|█████████▋| 213/221 [01:01<00:02,  3.75it/s] 97%|█████████▋| 214/221 [01:01<00:02,  2.93it/s] 97%|█████████▋| 215/221 [01:01<00:01,  3.45it/s] 98%|█████████▊| 217/221 [01:02<00:01,  2.52it/s] 99%|█████████▉| 219/221 [01:03<00:00,  3.42it/s]100%|█████████▉| 220/221 [01:05<00:00,  1.26it/s]100%|██████████| 221/221 [01:05<00:00,  3.35it/s]
  0%|          | 0/221 [00:00<?, ?it/s]  0%|          | 1/221 [00:00<00:57,  3.80it/s]  1%|          | 2/221 [00:00<00:57,  3.80it/s]  1%|▏         | 3/221 [00:00<00:57,  3.80it/s]  2%|▏         | 4/221 [00:01<00:57,  3.80it/s]  2%|▏         | 5/221 [00:01<00:56,  3.80it/s]  3%|▎         | 6/221 [00:01<00:56,  3.80it/s]  3%|▎         | 7/221 [00:01<00:56,  3.80it/s]  4%|▎         | 8/221 [00:02<00:56,  3.80it/s]  4%|▍         | 9/221 [00:02<00:55,  3.80it/s]  5%|▍         | 10/221 [00:02<00:55,  3.80it/s]  5%|▍         | 11/221 [00:02<00:55,  3.80it/s]  5%|▌         | 12/221 [00:03<00:55,  3.80it/s]  6%|▌         | 13/221 [00:03<00:54,  3.80it/s]  6%|▋         | 14/221 [00:03<00:54,  3.80it/s]  7%|▋         | 15/221 [00:03<00:54,  3.80it/s]  7%|▋         | 16/221 [00:04<00:53,  3.80it/s]  8%|▊         | 17/221 [00:04<00:53,  3.80it/s]  8%|▊         | 18/221 [00:04<00:53,  3.80it/s]  9%|▊         | 19/221 [00:05<00:53,  3.80it/s]  9%|▉         | 20/221 [00:05<00:52,  3.80it/s] 10%|▉         | 21/221 [00:05<00:52,  3.80it/s] 10%|▉         | 22/221 [00:05<00:52,  3.80it/s] 10%|█         | 23/221 [00:06<00:52,  3.80it/s] 11%|█         | 24/221 [00:06<00:51,  3.80it/s] 11%|█▏        | 25/221 [00:06<00:51,  3.80it/s] 12%|█▏        | 26/221 [00:06<00:51,  3.80it/s] 12%|█▏        | 27/221 [00:07<00:51,  3.80it/s] 13%|█▎        | 28/221 [00:07<00:50,  3.80it/s] 13%|█▎        | 29/221 [00:07<00:50,  3.80it/s] 14%|█▎        | 30/221 [00:07<00:50,  3.80it/s] 14%|█▍        | 31/221 [00:08<00:50,  3.80it/s] 14%|█▍        | 32/221 [00:08<00:49,  3.80it/s] 15%|█▍        | 33/221 [00:08<00:49,  3.80it/s] 15%|█▌        | 34/221 [00:08<00:49,  3.80it/s] 16%|█▌        | 35/221 [00:09<00:48,  3.80it/s] 16%|█▋        | 36/221 [00:09<00:48,  3.80it/s] 17%|█▋        | 37/221 [00:09<00:48,  3.80it/s] 17%|█▋        | 38/221 [00:10<00:48,  3.80it/s] 18%|█▊        | 39/221 [00:10<00:47,  3.80it/s] 18%|█▊        | 40/221 [00:10<00:47,  3.80it/s] 19%|█▊        | 41/221 [00:10<00:47,  3.80it/s] 19%|█▉        | 42/221 [00:11<00:47,  3.80it/s] 19%|█▉        | 43/221 [00:11<00:46,  3.80it/s] 20%|█▉        | 44/221 [00:11<00:46,  3.80it/s] 20%|██        | 45/221 [00:11<00:46,  3.80it/s] 21%|██        | 46/221 [00:12<00:46,  3.80it/s] 21%|██▏       | 47/221 [00:12<00:45,  3.80it/s] 22%|██▏       | 48/221 [00:12<00:45,  3.80it/s] 22%|██▏       | 49/221 [00:12<00:45,  3.80it/s] 23%|██▎       | 50/221 [00:13<00:45,  3.80it/s] 23%|██▎       | 51/221 [00:13<00:44,  3.80it/s] 24%|██▎       | 52/221 [00:13<00:44,  3.80it/s] 24%|██▍       | 53/221 [00:13<00:44,  3.80it/s] 24%|██▍       | 54/221 [00:14<00:43,  3.80it/s] 25%|██▍       | 55/221 [00:14<00:43,  3.80it/s] 25%|██▌       | 56/221 [00:14<00:43,  3.80it/s] 26%|██▌       | 57/221 [00:15<00:43,  3.80it/s] 26%|██▌       | 58/221 [00:15<00:42,  3.80it/s] 27%|██▋       | 59/221 [00:15<00:42,  3.80it/s] 27%|██▋       | 60/221 [00:15<00:42,  3.80it/s] 28%|██▊       | 61/221 [00:16<00:42,  3.80it/s] 28%|██▊       | 62/221 [00:16<00:41,  3.80it/s] 29%|██▊       | 63/221 [00:16<00:41,  3.80it/s] 29%|██▉       | 64/221 [00:16<00:41,  3.80it/s] 29%|██▉       | 65/221 [00:17<00:41,  3.80it/s] 30%|██▉       | 66/221 [00:17<00:40,  3.80it/s] 30%|███       | 67/221 [00:17<00:40,  3.80it/s] 31%|███       | 68/221 [00:17<00:40,  3.80it/s] 31%|███       | 69/221 [00:18<00:40,  3.80it/s] 32%|███▏      | 70/221 [00:18<00:39,  3.80it/s] 32%|███▏      | 71/221 [00:18<00:39,  3.80it/s] 33%|███▎      | 72/221 [00:18<00:39,  3.80it/s] 33%|███▎      | 73/221 [00:19<00:38,  3.80it/s] 33%|███▎      | 74/221 [00:19<00:38,  3.80it/s] 34%|███▍      | 75/221 [00:19<00:38,  3.80it/s] 34%|███▍      | 76/221 [00:20<00:38,  3.80it/s] 35%|███▍      | 77/221 [00:20<00:37,  3.80it/s] 35%|███▌      | 78/221 [00:20<00:37,  3.80it/s] 36%|███▌      | 79/221 [00:20<00:37,  3.80it/s] 36%|███▌      | 80/221 [00:21<00:37,  3.80it/s] 37%|███▋      | 81/221 [00:21<00:36,  3.80it/s] 37%|███▋      | 82/221 [00:21<00:36,  3.80it/s] 38%|███▊      | 83/221 [00:21<00:36,  3.80it/s] 38%|███▊      | 84/221 [00:22<00:36,  3.80it/s] 38%|███▊      | 85/221 [00:22<00:35,  3.80it/s] 39%|███▉      | 86/221 [00:22<00:35,  3.80it/s] 39%|███▉      | 87/221 [00:22<00:35,  3.80it/s] 40%|███▉      | 88/221 [00:23<00:35,  3.80it/s] 40%|████      | 89/221 [00:23<00:34,  3.80it/s] 41%|████      | 90/221 [00:23<00:34,  3.80it/s] 41%|████      | 91/221 [00:23<00:34,  3.80it/s] 42%|████▏     | 92/221 [00:24<00:33,  3.80it/s] 42%|████▏     | 93/221 [00:24<00:33,  3.80it/s] 43%|████▎     | 94/221 [00:24<00:33,  3.80it/s] 43%|████▎     | 95/221 [00:25<00:33,  3.80it/s] 43%|████▎     | 96/221 [00:25<00:32,  3.80it/s] 44%|████▍     | 97/221 [00:25<00:32,  3.80it/s] 44%|████▍     | 98/221 [00:25<00:32,  3.80it/s] 45%|████▍     | 99/221 [00:26<00:32,  3.80it/s] 45%|████▌     | 100/221 [00:26<00:31,  3.80it/s] 46%|████▌     | 101/221 [00:26<00:31,  3.80it/s] 46%|████▌     | 102/221 [00:26<00:31,  3.80it/s] 47%|████▋     | 103/221 [00:27<00:31,  3.80it/s] 47%|████▋     | 104/221 [00:27<00:30,  3.80it/s] 48%|████▊     | 105/221 [00:27<00:30,  3.80it/s] 48%|████▊     | 106/221 [00:27<00:30,  3.80it/s] 48%|████▊     | 107/221 [00:28<00:30,  3.80it/s] 49%|████▉     | 108/221 [00:28<00:29,  3.80it/s] 49%|████▉     | 109/221 [00:28<00:29,  3.80it/s] 50%|████▉     | 110/221 [00:28<00:29,  3.80it/s] 50%|█████     | 111/221 [00:29<00:28,  3.80it/s] 51%|█████     | 112/221 [00:29<00:28,  3.80it/s] 51%|█████     | 113/221 [00:29<00:28,  3.80it/s] 52%|█████▏    | 114/221 [00:30<00:28,  3.80it/s] 52%|█████▏    | 115/221 [00:30<00:27,  3.80it/s] 52%|█████▏    | 116/221 [00:30<00:27,  3.80it/s] 53%|█████▎    | 117/221 [00:30<00:27,  3.80it/s] 53%|█████▎    | 118/221 [00:31<00:27,  3.80it/s] 54%|█████▍    | 119/221 [00:31<00:26,  3.80it/s] 54%|█████▍    | 120/221 [00:31<00:26,  3.80it/s] 55%|█████▍    | 121/221 [00:31<00:26,  3.80it/s] 55%|█████▌    | 122/221 [00:32<00:26,  3.80it/s] 56%|█████▌    | 123/221 [00:32<00:25,  3.80it/s] 56%|█████▌    | 124/221 [00:32<00:25,  3.80it/s] 57%|█████▋    | 125/221 [00:32<00:25,  3.80it/s] 57%|█████▋    | 126/221 [00:33<00:25,  3.80it/s] 57%|█████▋    | 127/221 [00:33<00:24,  3.80it/s] 58%|█████▊    | 128/221 [00:33<00:24,  3.80it/s] 58%|█████▊    | 129/221 [00:33<00:24,  3.80it/s] 59%|█████▉    | 130/221 [00:34<00:23,  3.80it/s] 59%|█████▉    | 131/221 [00:34<00:23,  3.80it/s] 60%|█████▉    | 132/221 [00:34<00:23,  3.80it/s] 60%|██████    | 133/221 [00:35<00:23,  3.80it/s] 61%|██████    | 134/221 [00:35<00:22,  3.80it/s] 61%|██████    | 135/221 [00:35<00:22,  3.80it/s] 62%|██████▏   | 136/221 [00:35<00:22,  3.80it/s] 62%|██████▏   | 137/221 [00:36<00:22,  3.80it/s] 62%|██████▏   | 138/221 [00:36<00:21,  3.80it/s] 63%|██████▎   | 139/221 [00:36<00:21,  3.80it/s] 63%|██████▎   | 140/221 [00:36<00:21,  3.80it/s] 64%|██████▍   | 141/221 [00:37<00:21,  3.80it/s] 64%|██████▍   | 142/221 [00:37<00:20,  3.80it/s] 65%|██████▍   | 143/221 [00:37<00:20,  3.80it/s] 65%|██████▌   | 144/221 [00:37<00:20,  3.80it/s] 66%|██████▌   | 145/221 [00:38<00:20,  3.80it/s] 66%|██████▌   | 146/221 [00:38<00:19,  3.80it/s] 67%|██████▋   | 147/221 [00:38<00:19,  3.80it/s] 67%|██████▋   | 148/221 [00:38<00:19,  3.80it/s] 67%|██████▋   | 149/221 [00:39<00:18,  3.80it/s] 68%|██████▊   | 150/221 [00:39<00:18,  3.80it/s] 68%|██████▊   | 151/221 [00:39<00:18,  3.80it/s] 69%|██████▉   | 152/221 [00:40<00:18,  3.80it/s] 69%|██████▉   | 153/221 [00:40<00:17,  3.80it/s] 70%|██████▉   | 154/221 [00:40<00:17,  3.80it/s] 70%|███████   | 155/221 [00:40<00:17,  3.80it/s] 71%|███████   | 156/221 [00:41<00:17,  3.80it/s] 71%|███████   | 157/221 [00:41<00:16,  3.80it/s] 71%|███████▏  | 158/221 [00:41<00:16,  3.80it/s] 72%|███████▏  | 159/221 [00:41<00:16,  3.80it/s] 72%|███████▏  | 160/221 [00:42<00:16,  3.80it/s] 73%|███████▎  | 161/221 [00:42<00:15,  3.80it/s] 73%|███████▎  | 162/221 [00:42<00:15,  3.80it/s] 74%|███████▍  | 163/221 [00:42<00:15,  3.80it/s] 74%|███████▍  | 164/221 [00:43<00:15,  3.80it/s] 75%|███████▍  | 165/221 [00:43<00:14,  3.80it/s] 75%|███████▌  | 166/221 [00:43<00:14,  3.80it/s] 76%|███████▌  | 167/221 [00:43<00:14,  3.80it/s] 76%|███████▌  | 168/221 [00:44<00:13,  3.80it/s] 76%|███████▋  | 169/221 [00:44<00:13,  3.80it/s] 77%|███████▋  | 170/221 [00:44<00:13,  3.80it/s] 77%|███████▋  | 171/221 [00:45<00:13,  3.80it/s] 78%|███████▊  | 172/221 [00:45<00:12,  3.80it/s] 78%|███████▊  | 173/221 [00:45<00:12,  3.80it/s] 79%|███████▊  | 174/221 [00:45<00:12,  3.80it/s] 79%|███████▉  | 175/221 [00:46<00:12,  3.80it/s] 80%|███████▉  | 176/221 [00:46<00:11,  3.80it/s] 80%|████████  | 177/221 [00:46<00:11,  3.80it/s] 81%|████████  | 178/221 [00:46<00:11,  3.80it/s] 81%|████████  | 179/221 [00:47<00:11,  3.80it/s] 81%|████████▏ | 180/221 [00:47<00:10,  3.80it/s] 82%|████████▏ | 181/221 [00:47<00:10,  3.80it/s] 82%|████████▏ | 182/221 [00:47<00:10,  3.80it/s] 83%|████████▎ | 183/221 [00:48<00:10,  3.80it/s] 83%|████████▎ | 184/221 [00:48<00:09,  3.80it/s] 84%|████████▎ | 185/221 [00:48<00:09,  3.80it/s] 84%|████████▍ | 186/221 [00:48<00:09,  3.80it/s] 85%|████████▍ | 187/221 [00:49<00:08,  3.80it/s] 85%|████████▌ | 188/221 [00:49<00:08,  3.80it/s] 86%|████████▌ | 189/221 [00:49<00:08,  3.80it/s] 86%|████████▌ | 190/221 [00:50<00:08,  3.80it/s] 86%|████████▋ | 191/221 [00:50<00:07,  3.80it/s] 87%|████████▋ | 192/221 [00:50<00:07,  3.80it/s] 87%|████████▋ | 193/221 [00:50<00:07,  3.80it/s] 88%|████████▊ | 194/221 [00:51<00:07,  3.80it/s] 88%|████████▊ | 195/221 [00:51<00:06,  3.80it/s] 89%|████████▊ | 196/221 [00:51<00:06,  3.80it/s] 89%|████████▉ | 197/221 [00:51<00:06,  3.80it/s] 90%|████████▉ | 198/221 [00:52<00:06,  3.80it/s] 90%|█████████ | 199/221 [00:52<00:05,  3.80it/s] 90%|█████████ | 200/221 [00:52<00:05,  3.80it/s] 91%|█████████ | 201/221 [00:52<00:05,  3.80it/s] 91%|█████████▏| 202/221 [00:53<00:05,  3.80it/s] 92%|█████████▏| 203/221 [00:53<00:04,  3.80it/s] 92%|█████████▏| 204/221 [00:53<00:04,  3.80it/s] 93%|█████████▎| 205/221 [00:53<00:04,  3.80it/s] 93%|█████████▎| 206/221 [00:54<00:03,  3.80it/s] 94%|█████████▎| 207/221 [00:54<00:03,  3.80it/s] 94%|█████████▍| 208/221 [00:54<00:03,  3.80it/s] 95%|█████████▍| 209/221 [00:55<00:03,  3.80it/s] 95%|█████████▌| 210/221 [00:55<00:02,  3.80it/s] 95%|█████████▌| 211/221 [00:55<00:02,  3.80it/s] 96%|█████████▌| 212/221 [00:55<00:02,  3.80it/s] 96%|█████████▋| 213/221 [00:56<00:02,  3.80it/s] 97%|█████████▋| 214/221 [00:56<00:01,  3.80it/s] 97%|█████████▋| 215/221 [00:56<00:01,  3.80it/s] 98%|█████████▊| 216/221 [00:56<00:01,  3.80it/s] 98%|█████████▊| 217/221 [00:57<00:01,  3.80it/s] 99%|█████████▊| 218/221 [00:57<00:00,  3.80it/s] 99%|█████████▉| 219/221 [00:57<00:00,  3.80it/s]100%|█████████▉| 220/221 [00:57<00:00,  3.80it/s]100%|██████████| 221/221 [00:58<00:00,  3.80it/s]100%|██████████| 221/221 [00:58<00:00,  3.80it/s]
  0%|          | 0/221 [00:00<?, ?it/s]  1%|          | 2/221 [00:00<00:37,  5.79it/s]  1%|▏         | 3/221 [00:00<00:45,  4.79it/s]  2%|▏         | 4/221 [00:00<00:37,  5.83it/s]  2%|▏         | 5/221 [00:00<00:35,  6.00it/s]  3%|▎         | 7/221 [00:01<00:37,  5.74it/s]  4%|▎         | 8/221 [00:01<00:45,  4.67it/s]  4%|▍         | 9/221 [00:01<00:40,  5.20it/s]  5%|▍         | 10/221 [00:02<00:54,  3.91it/s]  5%|▍         | 11/221 [00:02<00:55,  3.76it/s]  5%|▌         | 12/221 [00:02<00:51,  4.02it/s]  6%|▌         | 13/221 [00:03<01:08,  3.04it/s]  6%|▋         | 14/221 [00:03<01:03,  3.27it/s]  7%|▋         | 15/221 [00:03<00:59,  3.47it/s]  7%|▋         | 16/221 [00:03<01:03,  3.23it/s]  8%|▊         | 17/221 [00:04<01:13,  2.78it/s]  8%|▊         | 18/221 [00:04<01:04,  3.13it/s]  9%|▊         | 19/221 [00:04<01:02,  3.22it/s]  9%|▉         | 20/221 [00:05<00:53,  3.74it/s] 10%|▉         | 21/221 [00:05<00:53,  3.75it/s] 10%|▉         | 22/221 [00:05<00:53,  3.69it/s] 11%|█         | 24/221 [00:06<00:45,  4.34it/s] 11%|█▏        | 25/221 [00:06<00:49,  3.97it/s] 12%|█▏        | 26/221 [00:06<00:51,  3.78it/s] 12%|█▏        | 27/221 [00:06<00:47,  4.12it/s] 13%|█▎        | 28/221 [00:07<01:00,  3.21it/s] 13%|█▎        | 29/221 [00:07<00:58,  3.30it/s] 14%|█▎        | 30/221 [00:07<00:59,  3.22it/s] 14%|█▍        | 31/221 [00:08<00:53,  3.57it/s] 14%|█▍        | 32/221 [00:08<00:45,  4.12it/s] 15%|█▍        | 33/221 [00:08<00:43,  4.31it/s] 15%|█▌        | 34/221 [00:08<00:43,  4.34it/s] 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s] 16%|█▋        | 36/221 [00:09<00:50,  3.68it/s] 17%|█▋        | 37/221 [00:09<00:46,  3.95it/s] 17%|█▋        | 38/221 [00:09<00:45,  4.04it/s] 18%|█▊        | 39/221 [00:10<00:43,  4.15it/s] 18%|█▊        | 40/221 [00:10<00:51,  3.54it/s] 19%|█▊        | 41/221 [00:10<00:53,  3.35it/s] 19%|█▉        | 42/221 [00:10<00:43,  4.07it/s] 19%|█▉        | 43/221 [00:11<00:41,  4.32it/s] 20%|█▉        | 44/221 [00:11<00:39,  4.49it/s] 20%|██        | 45/221 [00:11<00:42,  4.15it/s] 21%|██        | 46/221 [00:11<00:43,  4.04it/s] 21%|██▏       | 47/221 [00:12<00:39,  4.35it/s] 22%|██▏       | 48/221 [00:12<00:34,  4.97it/s] 22%|██▏       | 49/221 [00:12<00:35,  4.91it/s] 23%|██▎       | 50/221 [00:12<00:51,  3.30it/s] 23%|██▎       | 51/221 [00:13<00:45,  3.74it/s] 24%|██▎       | 52/221 [00:13<00:46,  3.64it/s] 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s] 24%|██▍       | 54/221 [00:13<00:46,  3.59it/s] 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s] 25%|██▌       | 56/221 [00:14<00:42,  3.90it/s] 26%|██▌       | 57/221 [00:14<00:40,  4.08it/s] 26%|██▌       | 58/221 [00:14<00:43,  3.76it/s] 27%|██▋       | 59/221 [00:15<00:38,  4.19it/s] 27%|██▋       | 60/221 [00:15<00:35,  4.58it/s] 28%|██▊       | 61/221 [00:15<00:35,  4.49it/s] 28%|██▊       | 62/221 [00:15<00:36,  4.40it/s] 29%|██▊       | 63/221 [00:15<00:35,  4.41it/s] 29%|██▉       | 64/221 [00:16<00:39,  3.98it/s] 29%|██▉       | 65/221 [00:16<00:38,  4.01it/s] 30%|██▉       | 66/221 [00:17<00:49,  3.11it/s] 30%|███       | 67/221 [00:17<00:48,  3.15it/s] 31%|███       | 68/221 [00:17<00:43,  3.55it/s] 31%|███       | 69/221 [00:18<01:00,  2.51it/s] 32%|███▏      | 70/221 [00:18<00:55,  2.73it/s] 32%|███▏      | 71/221 [00:18<00:46,  3.20it/s] 33%|███▎      | 72/221 [00:19<00:48,  3.05it/s] 33%|███▎      | 73/221 [00:19<00:42,  3.50it/s] 33%|███▎      | 74/221 [00:19<00:34,  4.25it/s] 34%|███▍      | 75/221 [00:19<00:35,  4.13it/s] 34%|███▍      | 76/221 [00:19<00:32,  4.48it/s] 35%|███▍      | 77/221 [00:20<00:40,  3.54it/s] 35%|███▌      | 78/221 [00:20<00:37,  3.80it/s] 36%|███▌      | 79/221 [00:21<00:51,  2.74it/s] 36%|███▌      | 80/221 [00:21<00:50,  2.78it/s] 37%|███▋      | 81/221 [00:21<00:40,  3.44it/s] 37%|███▋      | 82/221 [00:21<00:42,  3.30it/s] 38%|███▊      | 83/221 [00:22<00:41,  3.33it/s] 38%|███▊      | 84/221 [00:22<00:38,  3.55it/s] 38%|███▊      | 85/221 [00:22<00:33,  4.02it/s] 39%|███▉      | 86/221 [00:22<00:30,  4.47it/s] 39%|███▉      | 87/221 [00:22<00:28,  4.71it/s] 40%|███▉      | 88/221 [00:23<00:39,  3.34it/s] 40%|████      | 89/221 [00:23<00:42,  3.13it/s] 41%|████      | 90/221 [00:23<00:37,  3.45it/s] 41%|████      | 91/221 [00:24<00:33,  3.87it/s] 42%|████▏     | 92/221 [00:24<00:38,  3.35it/s] 42%|████▏     | 93/221 [00:25<00:45,  2.81it/s] 43%|████▎     | 94/221 [00:25<00:43,  2.94it/s] 43%|████▎     | 95/221 [00:25<00:40,  3.07it/s] 43%|████▎     | 96/221 [00:25<00:36,  3.45it/s] 44%|████▍     | 97/221 [00:26<00:35,  3.45it/s] 44%|████▍     | 98/221 [00:26<00:41,  2.99it/s] 45%|████▍     | 99/221 [00:26<00:41,  2.97it/s] 45%|████▌     | 100/221 [00:27<00:40,  3.02it/s] 46%|████▌     | 101/221 [00:27<00:38,  3.12it/s] 46%|████▌     | 102/221 [00:27<00:41,  2.84it/s] 47%|████▋     | 103/221 [00:28<00:36,  3.27it/s] 47%|████▋     | 104/221 [00:28<00:35,  3.33it/s] 48%|████▊     | 105/221 [00:28<00:40,  2.88it/s] 48%|████▊     | 106/221 [00:29<00:35,  3.22it/s] 48%|████▊     | 107/221 [00:29<00:36,  3.14it/s] 49%|████▉     | 108/221 [00:29<00:35,  3.20it/s] 49%|████▉     | 109/221 [00:29<00:30,  3.69it/s] 50%|████▉     | 110/221 [00:30<00:31,  3.47it/s] 50%|█████     | 111/221 [00:30<00:33,  3.24it/s] 51%|█████     | 112/221 [00:30<00:34,  3.18it/s] 51%|█████     | 113/221 [00:31<00:30,  3.52it/s] 52%|█████▏    | 114/221 [00:31<00:25,  4.24it/s] 52%|█████▏    | 115/221 [00:31<00:28,  3.76it/s] 52%|█████▏    | 116/221 [00:31<00:28,  3.62it/s] 53%|█████▎    | 117/221 [00:32<00:28,  3.69it/s] 53%|█████▎    | 118/221 [00:32<00:27,  3.80it/s] 54%|█████▍    | 119/221 [00:32<00:27,  3.65it/s] 54%|█████▍    | 120/221 [00:32<00:26,  3.76it/s] 55%|█████▍    | 121/221 [00:33<00:23,  4.34it/s] 55%|█████▌    | 122/221 [00:33<00:22,  4.40it/s] 56%|█████▌    | 123/221 [00:33<00:23,  4.13it/s] 56%|█████▌    | 124/221 [00:33<00:24,  4.03it/s] 57%|█████▋    | 125/221 [00:34<00:28,  3.38it/s] 57%|█████▋    | 126/221 [00:34<00:25,  3.72it/s] 57%|█████▋    | 127/221 [00:34<00:30,  3.11it/s] 58%|█████▊    | 128/221 [00:35<00:28,  3.24it/s] 58%|█████▊    | 129/221 [00:35<00:23,  3.96it/s] 59%|█████▉    | 130/221 [00:35<00:23,  3.95it/s] 60%|█████▉    | 132/221 [00:35<00:20,  4.42it/s] 60%|██████    | 133/221 [00:36<00:23,  3.80it/s] 61%|██████    | 134/221 [00:36<00:24,  3.61it/s] 61%|██████    | 135/221 [00:36<00:22,  3.89it/s] 62%|██████▏   | 136/221 [00:37<00:22,  3.72it/s] 62%|██████▏   | 137/221 [00:37<00:23,  3.64it/s] 62%|██████▏   | 138/221 [00:37<00:24,  3.35it/s] 63%|██████▎   | 139/221 [00:38<00:25,  3.21it/s] 63%|██████▎   | 140/221 [00:38<00:24,  3.28it/s] 64%|██████▍   | 141/221 [00:38<00:23,  3.35it/s] 64%|██████▍   | 142/221 [00:38<00:21,  3.70it/s] 65%|██████▍   | 143/221 [00:39<00:21,  3.59it/s] 65%|██████▌   | 144/221 [00:39<00:22,  3.38it/s] 66%|██████▌   | 145/221 [00:39<00:20,  3.75it/s] 66%|██████▌   | 146/221 [00:39<00:17,  4.33it/s] 67%|██████▋   | 147/221 [00:40<00:19,  3.76it/s] 67%|██████▋   | 148/221 [00:40<00:21,  3.33it/s] 67%|██████▋   | 149/221 [00:40<00:21,  3.31it/s] 68%|██████▊   | 150/221 [00:41<00:21,  3.35it/s] 68%|██████▊   | 151/221 [00:41<00:24,  2.92it/s] 69%|██████▉   | 152/221 [00:42<00:26,  2.58it/s] 69%|██████▉   | 153/221 [00:42<00:22,  3.03it/s] 70%|██████▉   | 154/221 [00:42<00:19,  3.47it/s] 70%|███████   | 155/221 [00:42<00:19,  3.43it/s] 71%|███████   | 156/221 [00:43<00:19,  3.27it/s] 71%|███████   | 157/221 [00:43<00:21,  3.04it/s] 71%|███████▏  | 158/221 [00:43<00:19,  3.18it/s] 72%|███████▏  | 159/221 [00:44<00:16,  3.85it/s] 72%|███████▏  | 160/221 [00:44<00:14,  4.28it/s] 73%|███████▎  | 161/221 [00:44<00:13,  4.43it/s] 73%|███████▎  | 162/221 [00:44<00:11,  5.18it/s] 74%|███████▍  | 163/221 [00:44<00:12,  4.47it/s] 74%|███████▍  | 164/221 [00:45<00:12,  4.55it/s] 75%|███████▍  | 165/221 [00:45<00:14,  3.74it/s] 75%|███████▌  | 166/221 [00:45<00:14,  3.89it/s] 76%|███████▌  | 167/221 [00:45<00:12,  4.42it/s] 76%|███████▌  | 168/221 [00:45<00:11,  4.46it/s] 76%|███████▋  | 169/221 [00:46<00:10,  4.92it/s] 77%|███████▋  | 170/221 [00:46<00:16,  3.10it/s] 77%|███████▋  | 171/221 [00:46<00:14,  3.51it/s] 78%|███████▊  | 172/221 [00:47<00:13,  3.69it/s] 78%|███████▊  | 173/221 [00:47<00:14,  3.40it/s] 79%|███████▊  | 174/221 [00:47<00:14,  3.17it/s] 79%|███████▉  | 175/221 [00:48<00:14,  3.19it/s] 80%|███████▉  | 176/221 [00:48<00:13,  3.46it/s] 80%|████████  | 177/221 [00:48<00:11,  3.80it/s] 81%|████████  | 178/221 [00:49<00:13,  3.23it/s] 81%|████████  | 179/221 [00:49<00:12,  3.29it/s] 81%|████████▏ | 180/221 [00:49<00:11,  3.71it/s] 82%|████████▏ | 181/221 [00:49<00:09,  4.19it/s] 82%|████████▏ | 182/221 [00:50<00:11,  3.26it/s] 83%|████████▎ | 183/221 [00:50<00:11,  3.25it/s] 83%|████████▎ | 184/221 [00:50<00:09,  3.72it/s] 84%|████████▎ | 185/221 [00:50<00:09,  3.98it/s] 84%|████████▍ | 186/221 [00:51<00:10,  3.44it/s] 85%|████████▍ | 187/221 [00:51<00:10,  3.25it/s] 85%|████████▌ | 188/221 [00:51<00:10,  3.29it/s] 86%|████████▌ | 189/221 [00:52<00:08,  3.64it/s] 86%|████████▌ | 190/221 [00:52<00:09,  3.41it/s] 86%|████████▋ | 191/221 [00:52<00:07,  3.92it/s] 87%|████████▋ | 192/221 [00:52<00:07,  3.88it/s] 87%|████████▋ | 193/221 [00:53<00:06,  4.42it/s] 88%|████████▊ | 194/221 [00:53<00:05,  4.52it/s] 88%|████████▊ | 195/221 [00:53<00:06,  4.20it/s] 89%|████████▊ | 196/221 [00:53<00:06,  3.90it/s] 89%|████████▉ | 197/221 [00:54<00:05,  4.08it/s] 90%|████████▉ | 198/221 [00:54<00:06,  3.58it/s] 90%|█████████ | 199/221 [00:54<00:06,  3.52it/s] 90%|█████████ | 200/221 [00:55<00:06,  3.07it/s] 91%|█████████ | 201/221 [00:55<00:06,  3.19it/s] 91%|█████████▏| 202/221 [00:55<00:06,  2.89it/s] 92%|█████████▏| 203/221 [00:56<00:05,  3.30it/s] 92%|█████████▏| 204/221 [00:56<00:04,  3.56it/s] 93%|█████████▎| 205/221 [00:56<00:03,  4.11it/s] 93%|█████████▎| 206/221 [00:56<00:04,  3.52it/s] 94%|█████████▎| 207/221 [00:57<00:03,  3.65it/s] 94%|█████████▍| 208/221 [00:57<00:03,  3.29it/s] 95%|█████████▍| 209/221 [00:57<00:03,  3.30it/s] 95%|█████████▌| 210/221 [00:57<00:02,  3.68it/s] 95%|█████████▌| 211/221 [00:58<00:03,  3.28it/s] 96%|█████████▌| 212/221 [00:58<00:02,  3.45it/s] 96%|█████████▋| 213/221 [00:58<00:02,  3.98it/s] 97%|█████████▋| 214/221 [00:59<00:02,  3.42it/s] 97%|█████████▋| 215/221 [00:59<00:01,  3.70it/s] 98%|█████████▊| 216/221 [00:59<00:01,  3.52it/s] 98%|█████████▊| 217/221 [00:59<00:01,  3.25it/s] 99%|█████████▊| 218/221 [01:00<00:00,  3.25it/s] 99%|█████████▉| 219/221 [01:00<00:00,  3.09it/s]100%|█████████▉| 220/221 [01:00<00:00,  3.11it/s]100%|██████████| 221/221 [01:01<00:00,  2.98it/s]100%|██████████| 221/221 [01:01<00:00,  3.60it/s]
09/07/2024 11:43:57 - INFO - __main__ -   ==== evaluation--ret%tv--msrvtt_ret_ret_area_forward========

09/07/2024 11:43:57 - INFO - __main__ -   {'area_r1': 20.2, 'area_recall': '20.2/42.3/52.0', 'area_ravg': 38.2}
09/07/2024 11:43:57 - INFO - __main__ -   ==== evaluation--ret%tv--msrvtt_ret_ret_area_backard========

09/07/2024 11:43:57 - INFO - __main__ -   {'forward_r1': 32.0, 'forward_recall': '32.0/63.1/74.1', 'forward_ravg': 56.4}
09/07/2024 11:43:57 - INFO - __main__ -   ==== evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video========

09/07/2024 11:43:57 - INFO - __main__ -   {'area_video_r1': 32.9, 'area_video_recall': '32.9/65.7/76.0', 'area_video_ravg': 58.2}
09/07/2024 11:43:57 - INFO - __main__ -   ==== evaluation--ret%tv--msrvtt_ret_ret_itm_area========

09/07/2024 11:43:57 - INFO - __main__ -   {'area_video_r1': 49.8, 'area_video_recall': '49.8/71.9/79.0', 'area_video_ravg': 66.9, 'area_video_back_r1': 42.5, 'area_video_back_recall': '42.5/66.5/76.8', 'area_video_back_ravg': 62.0}
09/07/2024 11:43:57 - INFO - __main__ -   ==== evaluation--ret%tv--msrvtt_ret_ret_itc_tv========

09/07/2024 11:43:57 - INFO - __main__ -   {'video_r1': 44.9, 'video_recall': '44.9/72.4/82.5', 'video_ravg': 66.6}
09/07/2024 11:43:57 - INFO - __main__ -   ==== evaluation--ret%tv--msrvtt_ret_ret_itm_tv========

09/07/2024 11:43:57 - INFO - __main__ -   {'video_r1': 50.3, 'video_recall': '50.3/72.4/80.4', 'video_ravg': 67.7}
  0%|          | 0/1945 [00:00<?, ?it/s][h264 @ 0x55b879ba7300] mmco: unref short failure
  0%|          | 1/1945 [00:08<4:28:04,  8.27s/it]  0%|          | 2/1945 [00:11<2:53:20,  5.35s/it]  0%|          | 3/1945 [00:14<2:23:05,  4.42s/it][h264 @ 0x55fc1fbfb5c0] mmco: unref short failure
[h264 @ 0x55fc1fbfb5c0] mmco: unref short failure
[h264 @ 0x5565c5e2f6c0] mmco: unref short failure
  0%|          | 4/1945 [00:19<2:19:23,  4.31s/it][h264 @ 0x55b87cd542c0] mmco: unref short failure
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
  0%|          | 5/1945 [00:23<2:22:17,  4.40s/it][h264 @ 0x55fc1d6decc0] mmco: unref short failure
[h264 @ 0x55fc1d6decc0] mmco: unref short failure
  0%|          | 6/1945 [00:28<2:26:41,  4.54s/it]  0%|          | 7/1945 [00:34<2:38:43,  4.91s/it][h264 @ 0x55b87bd2c640] mmco: unref short failure
[h264 @ 0x55b87bd2c640] mmco: unref short failure
not have audios 8-qwaveiHMM.3
  0%|          | 8/1945 [00:39<2:43:43,  5.07s/it]  0%|          | 9/1945 [00:45<2:48:26,  5.22s/it]  1%|          | 10/1945 [00:50<2:48:26,  5.22s/it]  1%|          | 11/1945 [00:55<2:47:40,  5.20s/it][h264 @ 0x55b878cfea00] mmco: unref short failure
[h264 @ 0x55b878cfea00] mmco: unref short failure
  1%|          | 12/1945 [01:01<2:52:43,  5.36s/it][h264 @ 0x55ed80840080] mmco: unref short failure
  1%|          | 13/1945 [01:06<2:55:17,  5.44s/it][h264 @ 0x55ed85c6da00] mmco: unref short failure
  1%|          | 14/1945 [01:13<3:08:06,  5.84s/it]  1%|          | 15/1945 [01:19<3:06:36,  5.80s/it][h264 @ 0x5565c8fb4000] mmco: unref short failure
[h264 @ 0x5565cae96ac0] mmco: unref short failure
  1%|          | 16/1945 [01:24<3:02:55,  5.69s/it]  1%|          | 17/1945 [01:30<3:02:12,  5.67s/it][h264 @ 0x55ed882f88c0] mmco: unref short failure
[h264 @ 0x55fc27a59240] mmco: unref short failure
[h264 @ 0x55fc226595c0] mmco: unref short failure
[h264 @ 0x55fc226595c0] mmco: unref short failure
[h264 @ 0x55ed83d1bdc0] mmco: unref short failure
[h264 @ 0x55ed83d1bdc0] mmco: unref short failure
[h264 @ 0x55ed83d1bdc0] mmco: unref short failure
[h264 @ 0x55ed83d1bdc0] mmco: unref short failure
[h264 @ 0x55fc1e2fc180] mmco: unref short failure
[h264 @ 0x5565c8e05700] mmco: unref short failure
  1%|          | 18/1945 [01:52<5:36:47, 10.49s/it]  1%|          | 19/1945 [01:57<4:48:04,  8.97s/it]  1%|          | 20/1945 [02:02<4:13:47,  7.91s/it][h264 @ 0x5565cd75bdc0] mmco: unref short failure
  1%|          | 21/1945 [02:08<3:55:28,  7.34s/it]  1%|          | 22/1945 [02:14<3:42:15,  6.93s/it][h264 @ 0x55fc1d6e0a80] mmco: unref short failure
[h264 @ 0x55fc1d6e0a80] mmco: unref short failure
  1%|          | 23/1945 [02:20<3:33:26,  6.66s/it][h264 @ 0x55ed87959080] mmco: unref short failure
[h264 @ 0x55ed87959080] mmco: unref short failure
[h264 @ 0x55fc22414880] mmco: unref short failure
[h264 @ 0x55fc22414880] mmco: unref short failure
[h264 @ 0x5565c7866980] mmco: unref short failure
[h264 @ 0x55b879497a00] mmco: unref short failure
[h264 @ 0x55b879497a00] mmco: unref short failure
[h264 @ 0x55fc25791a80] mmco: unref short failure
[h264 @ 0x55fc25791a80] mmco: unref short failure
[h264 @ 0x55b880529900] mmco: unref short failure
[h264 @ 0x55b880529900] mmco: unref short failure
  1%|          | 24/1945 [03:01<8:54:23, 16.69s/it]  1%|▏         | 25/1945 [03:06<7:09:10, 13.41s/it][h264 @ 0x55ed80d91f00] mmco: unref short failure
[h264 @ 0x55ed8485fdc0] mmco: unref short failure
[h264 @ 0x5565c8bc1540] mmco: unref short failure
[h264 @ 0x55b8779953c0] mmco: unref short failure
[h264 @ 0x55ed816fcc40] mmco: unref short failure
[h264 @ 0x55ed816fcc40] mmco: unref short failure
[h264 @ 0x55fc20df72c0] mmco: unref short failure
[h264 @ 0x55fc20df72c0] mmco: unref short failure
[h264 @ 0x55fc20455200] mmco: unref short failure
  1%|▏         | 26/1945 [03:31<9:00:03, 16.89s/it]  1%|▏         | 27/1945 [03:37<7:17:26, 13.68s/it]  1%|▏         | 28/1945 [03:43<5:59:14, 11.24s/it]  1%|▏         | 29/1945 [03:49<5:05:33,  9.57s/it]  2%|▏         | 30/1945 [03:54<4:26:12,  8.34s/it][h264 @ 0x5565c7ffaf40] mmco: unref short failure
  2%|▏         | 31/1945 [04:00<4:00:31,  7.54s/it][h264 @ 0x55ed83e87600] mmco: unref short failure
[h264 @ 0x55ed83e87600] mmco: unref short failure
[h264 @ 0x55fc27a2bf80] mmco: unref short failure
[h264 @ 0x55fc27a2bf80] mmco: unref short failure
[h264 @ 0x55ed843bb740] mmco: unref short failure
[h264 @ 0x55ed843bb740] mmco: unref short failure
[h264 @ 0x5565c9c2ad40] mmco: unref short failure
[h264 @ 0x5565c9c2ad40] mmco: unref short failure
  2%|▏         | 32/1945 [04:43<9:38:15, 18.14s/it]  2%|▏         | 33/1945 [04:48<7:40:02, 14.44s/it][h264 @ 0x55fc20f52440] mmco: unref short failure
[h264 @ 0x55fc20f52440] mmco: unref short failure
[h264 @ 0x55ed83d1b280] mmco: unref short failure
  2%|▏         | 34/1945 [05:06<8:10:09, 15.39s/it][h264 @ 0x55b87d4dfe00] mmco: unref short failure
[h264 @ 0x5565c62fe280] mmco: unref short failure
[h264 @ 0x5565c62fe280] mmco: unref short failure
  2%|▏         | 35/1945 [05:12<6:36:39, 12.46s/it]  2%|▏         | 36/1945 [05:18<5:33:12, 10.47s/it][h264 @ 0x55fc26434b00] mmco: unref short failure
[h264 @ 0x55fc26434b00] mmco: unref short failure
[h264 @ 0x55fc26418780] mmco: unref short failure
[h264 @ 0x55fc26418780] mmco: unref short failure
  2%|▏         | 37/1945 [05:26<5:16:18,  9.95s/it][h264 @ 0x55ed89cfab00] mmco: unref short failure
  2%|▏         | 38/1945 [05:32<4:38:13,  8.75s/it][h264 @ 0x55ed89c6e700] mmco: unref short failure
[h264 @ 0x55ed89c6e700] mmco: unref short failure
  2%|▏         | 39/1945 [05:38<4:11:42,  7.92s/it][h264 @ 0x55fc298980c0] mmco: unref short failure
[h264 @ 0x55fc298980c0] mmco: unref short failure
[h264 @ 0x55ed85a21e80] mmco: unref short failure
[h264 @ 0x5565cf5cb040] mmco: unref short failure
[h264 @ 0x5565cf5cb040] mmco: unref short failure
[h264 @ 0x55ed824d8140] mmco: unref short failure
[h264 @ 0x55fc2768ed40] mmco: unref short failure
[h264 @ 0x55fc2768ed40] mmco: unref short failure
  2%|▏         | 40/1945 [06:21<9:41:56, 18.33s/it][h264 @ 0x5565c94a7d00] mmco: unref short failure
[h264 @ 0x5565c94a7d00] mmco: unref short failure
  2%|▏         | 41/1945 [06:27<7:44:01, 14.62s/it][h264 @ 0x55ed8a5eb540] mmco: unref short failure
[h264 @ 0x55ed8a5eb540] mmco: unref short failure
[h264 @ 0x55ed857fbf80] mmco: unref short failure
[h264 @ 0x5565c8bafd00] mmco: unref short failure
[h264 @ 0x5565c8bafd00] mmco: unref short failure
[h264 @ 0x55ed8d1d4f80] mmco: unref short failure
[h264 @ 0x5565c8d84640] mmco: unref short failure
[h264 @ 0x5565c8d84640] mmco: unref short failure
[h264 @ 0x5565cdb5a900] mmco: unref short failure
[h264 @ 0x5565cdb5a900] mmco: unref short failure
  2%|▏         | 42/1945 [06:45<8:18:58, 15.73s/it][h264 @ 0x55fc22b78000] mmco: unref short failure
  2%|▏         | 43/1945 [06:50<6:39:44, 12.61s/it][h264 @ 0x5565cf93f900] mmco: unref short failure
  2%|▏         | 44/1945 [06:57<5:38:51, 10.70s/it][h264 @ 0x55b882832900] mmco: unref short failure
[h264 @ 0x55b882832900] mmco: unref short failure
[h264 @ 0x55ed857fb900] mmco: unref short failure
[h264 @ 0x55ed857fb900] mmco: unref short failure
  2%|▏         | 45/1945 [07:07<5:31:28, 10.47s/it]  2%|▏         | 46/1945 [07:12<4:43:09,  8.95s/it][h264 @ 0x5565c9679500] mmco: unref short failure
[h264 @ 0x5565c9679500] mmco: unref short failure
  2%|▏         | 47/1945 [07:18<4:10:22,  7.92s/it][h264 @ 0x5565cf5c68c0] mmco: unref short failure
[h264 @ 0x55fc203353c0] mmco: unref short failure
[h264 @ 0x55fc203353c0] mmco: unref short failure
[h264 @ 0x55fc26333bc0] mmco: unref short failure
[h264 @ 0x55fc26333bc0] mmco: unref short failure
[h264 @ 0x5565c8d1fc00] mmco: unref short failure
[h264 @ 0x5565c8d1fc00] mmco: unref short failure
  2%|▏         | 48/1945 [07:55<8:53:20, 16.87s/it][h264 @ 0x55fc27914880] mmco: unref short failure
[h264 @ 0x55fc27914880] mmco: unref short failure
  3%|▎         | 49/1945 [08:02<7:12:42, 13.69s/it][h264 @ 0x55ed88f9fd80] mmco: unref short failure
[h264 @ 0x5565d158c7c0] mmco: unref short failure
[h264 @ 0x5565d158c7c0] mmco: unref short failure
[h264 @ 0x55fc26c190c0] mmco: unref short failure
[h264 @ 0x55fc26c190c0] mmco: unref short failure
09/07/2024 11:52:19 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.62943696975708, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.05230037868022919, 'loss_ret%tv%ta--finetune_area/loss_area': 3.629058361053467, 'loss_ret%tv%ta--finetune_area/total_loss': 7.310795783996582}
[h264 @ 0x5565cdb560c0] mmco: unref short failure
  3%|▎         | 50/1945 [08:25<8:44:32, 16.61s/it][h264 @ 0x55fc2a338780] mmco: unref short failure
  3%|▎         | 51/1945 [08:30<6:56:21, 13.19s/it]  3%|▎         | 52/1945 [08:36<5:46:03, 10.97s/it][h264 @ 0x5565d237bbc0] mmco: unref short failure
[h264 @ 0x5565d237bbc0] mmco: unref short failure
[h264 @ 0x5565d47a9840] mmco: unref short failure
[h264 @ 0x55ed8c823b40] mmco: unref short failure
[h264 @ 0x55ed8c823b40] mmco: unref short failure
  3%|▎         | 53/1945 [08:45<5:27:08, 10.37s/it][h264 @ 0x55b881aab980] mmco: unref short failure
[h264 @ 0x55b881aab980] mmco: unref short failure
[h264 @ 0x55b87fd2b2c0] mmco: unref short failure
[h264 @ 0x55b87fd2b2c0] mmco: unref short failure
[h264 @ 0x55b87fd2b2c0] mmco: unref short failure
[h264 @ 0x55b87fd2b2c0] mmco: unref short failure
[h264 @ 0x55b87fd2b2c0] mmco: unref short failure
[h264 @ 0x55b87fd2b2c0] mmco: unref short failure
[h264 @ 0x55b87fd2b2c0] mmco: unref short failure
[h264 @ 0x55b87fd2b2c0] mmco: unref short failure
[h264 @ 0x55b87fd2b2c0] mmco: unref short failure
[h264 @ 0x55b87fd2b2c0] mmco: unref short failure
[h264 @ 0x55b87fd2b2c0] mmco: unref short failure
[h264 @ 0x55b87fd2b2c0] mmco: unref short failure
[h264 @ 0x5565d3eb68c0] mmco: unref short failure
[h264 @ 0x5565d3eb68c0] mmco: unref short failure
  3%|▎         | 54/1945 [08:51<4:41:32,  8.93s/it][h264 @ 0x55fc21642b00] mmco: unref short failure
[h264 @ 0x55fc21642b00] mmco: unref short failure
  3%|▎         | 55/1945 [08:56<4:11:16,  7.98s/it][h264 @ 0x55ed833e8080] mmco: unref short failure
[h264 @ 0x55ed833e8080] mmco: unref short failure
[h264 @ 0x55b88793fa40] mmco: unref short failure
[h264 @ 0x5565ce5a7380] mmco: unref short failure
[h264 @ 0x55ed80ed39c0] mmco: unref short failure
[h264 @ 0x55ed881bd540] mmco: unref short failure
  3%|▎         | 56/1945 [09:35<8:57:44, 17.08s/it][h264 @ 0x5565cc8e93c0] mmco: unref short failure
[h264 @ 0x5565cc8e93c0] mmco: unref short failure
[h264 @ 0x55ed861f6bc0] mmco: unref short failure
[h264 @ 0x55ed861f6bc0] mmco: unref short failure
[h264 @ 0x55ed8c0d9480] mmco: unref short failure
  3%|▎         | 57/1945 [09:41<7:13:06, 13.76s/it][h264 @ 0x5565d3eb6680] mmco: unref short failure
[h264 @ 0x55ed8639db40] mmco: unref short failure
[h264 @ 0x55ed8639db40] mmco: unref short failure
  3%|▎         | 58/1945 [10:07<9:13:09, 17.59s/it][h264 @ 0x5565d0ad4dc0] mmco: unref short failure
[h264 @ 0x5565d0ad4dc0] mmco: unref short failure
  3%|▎         | 59/1945 [10:13<7:18:46, 13.96s/it]  3%|▎         | 60/1945 [10:18<5:59:50, 11.45s/it]  3%|▎         | 61/1945 [10:24<5:04:57,  9.71s/it][h264 @ 0x55b8895e1d40] mmco: unref short failure
[h264 @ 0x55b8895e1d40] mmco: unref short failure
  3%|▎         | 62/1945 [10:29<4:23:18,  8.39s/it][h264 @ 0x5565d573d340] mmco: unref short failure
[h264 @ 0x5565d573d340] mmco: unref short failure
[h264 @ 0x55ed8dca40c0] mmco: unref short failure
[h264 @ 0x55ed8dca40c0] mmco: unref short failure
[h264 @ 0x55b882e06740] mmco: unref short failure
  3%|▎         | 63/1945 [10:35<3:55:06,  7.50s/it][h264 @ 0x5565d5715940] mmco: unref short failure
[h264 @ 0x5565c9c17c80] mmco: unref short failure
[h264 @ 0x5565c9c17c80] mmco: unref short failure
[h264 @ 0x5565d23e0b40] mmco: unref short failure
[h264 @ 0x5565d23e0b40] mmco: unref short failure
[h264 @ 0x55fc27432100] mmco: unref short failure
[h264 @ 0x55fc27432100] mmco: unref short failure
  3%|▎         | 64/1945 [11:11<8:24:01, 16.08s/it][h264 @ 0x55ed8f32fd00] mmco: unref short failure
[h264 @ 0x55ed8f32fd00] mmco: unref short failure
  3%|▎         | 65/1945 [11:17<6:52:52, 13.18s/it][h264 @ 0x5565d2f9b800] mmco: unref short failure
[h264 @ 0x5565cb0174c0] mmco: unref short failure
[h264 @ 0x5565cb0174c0] mmco: unref short failure
  3%|▎         | 66/1945 [11:42<8:46:56, 16.83s/it]  3%|▎         | 67/1945 [11:48<7:04:44, 13.57s/it]  3%|▎         | 68/1945 [11:54<5:51:53, 11.25s/it][h264 @ 0x5565d571b2c0] mmco: unref short failure
[h264 @ 0x5565d571b2c0] mmco: unref short failure
[h264 @ 0x55fc2c0aa640] mmco: unref short failure
  4%|▎         | 69/1945 [12:00<4:58:39,  9.55s/it][h264 @ 0x55b8868a9140] mmco: unref short failure
[h264 @ 0x55fc230430c0] mmco: unref short failure
  4%|▎         | 70/1945 [12:06<4:31:00,  8.67s/it][h264 @ 0x55ed8eed2940] mmco: unref short failure
[h264 @ 0x55fc219f8dc0] mmco: unref short failure
[h264 @ 0x55fc219f8dc0] mmco: unref short failure
  4%|▎         | 71/1945 [12:14<4:17:42,  8.25s/it][h264 @ 0x55fc26637dc0] mmco: unref short failure
[h264 @ 0x55fc26637dc0] mmco: unref short failure
[h264 @ 0x55ed9006e400] mmco: unref short failure
[h264 @ 0x55ed9006e400] mmco: unref short failure
[h264 @ 0x55ed89ab1540] mmco: unref short failure
[h264 @ 0x55ed89ab1540] mmco: unref short failure
[h264 @ 0x5565cf10ec00] mmco: unref short failure
[h264 @ 0x55ed8ec28d40] mmco: unref short failure
[h264 @ 0x55fc23350f40] mmco: unref short failure
[h264 @ 0x5565cdf5a380] mmco: unref short failure
[h264 @ 0x5565cdf5a380] mmco: unref short failure
  4%|▎         | 72/1945 [12:47<8:11:55, 15.76s/it][h264 @ 0x55fc20e7ff80] mmco: unref short failure
[h264 @ 0x55b886f43b80] mmco: unref short failure
  4%|▍         | 73/1945 [12:52<6:35:01, 12.66s/it][h264 @ 0x55fc2bbaf700] mmco: unref short failure
[h264 @ 0x55ed8a52a6c0] mmco: unref short failure
[h264 @ 0x55b886f730c0] mmco: unref short failure
[h264 @ 0x55b886f730c0] mmco: unref short failure
[h264 @ 0x55b87d99f140] mmco: unref short failure
  4%|▍         | 74/1945 [13:22<9:13:46, 17.76s/it]  4%|▍         | 75/1945 [13:28<7:21:44, 14.17s/it]  4%|▍         | 76/1945 [13:34<6:07:35, 11.80s/it]  4%|▍         | 77/1945 [13:40<5:11:19, 10.00s/it][h264 @ 0x55ed82cfa980] mmco: unref short failure
[h264 @ 0x55fc23543a80] mmco: unref short failure
[h264 @ 0x55fc1ff19b00] mmco: unref short failure
[h264 @ 0x55fc1ff19b00] mmco: unref short failure
[h264 @ 0x5565d43f78c0] mmco: unref short failure
  4%|▍         | 78/1945 [13:46<4:30:51,  8.70s/it][h264 @ 0x5565d5c55980] mmco: unref short failure
[h264 @ 0x5565d5c55980] mmco: unref short failure
  4%|▍         | 79/1945 [13:51<4:03:32,  7.83s/it][h264 @ 0x5565d44362c0] mmco: unref short failure
[h264 @ 0x5565d0ab3600] mmco: unref short failure
[h264 @ 0x55ed836c2600] mmco: unref short failure
[h264 @ 0x55ed836c2600] mmco: unref short failure
[h264 @ 0x55b8868d9080] mmco: unref short failure
[h264 @ 0x55b8868d9080] mmco: unref short failure
[h264 @ 0x55ed836c3140] mmco: unref short failure
[h264 @ 0x55ed836c3140] mmco: unref short failure
[h264 @ 0x55fc1fcc6300] mmco: unref short failure
[h264 @ 0x55fc1fcc6300] mmco: unref short failure
  4%|▍         | 80/1945 [14:21<7:26:45, 14.37s/it][h264 @ 0x55ed82175c40] mmco: unref short failure
  4%|▍         | 81/1945 [14:33<7:01:31, 13.57s/it][h264 @ 0x55fc29a5e200] mmco: unref short failure
[h264 @ 0x55fc29a5e200] mmco: unref short failure
[h264 @ 0x55fc1eb0e140] mmco: unref short failure
[h264 @ 0x55fc1eb0e140] mmco: unref short failure
not have audios 7wavFXW3AFw.7
[h264 @ 0x55b882d37100] mmco: unref short failure
[h264 @ 0x55b882d37100] mmco: unref short failure
[h264 @ 0x5565d2142bc0] mmco: unref short failure
[h264 @ 0x5565d2142bc0] mmco: unref short failure
  4%|▍         | 82/1945 [15:01<9:17:01, 17.94s/it][h264 @ 0x55ed902b1a80] mmco: unref short failure
[h264 @ 0x55b888bff4c0] mmco: unref short failure
[h264 @ 0x55b888bff4c0] mmco: unref short failure
  4%|▍         | 83/1945 [15:07<7:24:17, 14.32s/it][h264 @ 0x5565cd180380] mmco: unref short failure
[h264 @ 0x5565cf052480] mmco: unref short failure
[h264 @ 0x55b8810b7480] mmco: unref short failure
[h264 @ 0x55b8810b7480] mmco: unref short failure
  4%|▍         | 84/1945 [15:13<6:11:52, 11.99s/it]  4%|▍         | 85/1945 [15:19<5:14:38, 10.15s/it]  4%|▍         | 86/1945 [15:25<4:33:38,  8.83s/it]  4%|▍         | 87/1945 [15:32<4:13:51,  8.20s/it][h264 @ 0x55fc25822f40] mmco: unref short failure
[h264 @ 0x5565d37d5340] mmco: unref short failure
[h264 @ 0x55b8868d9080] mmco: unref short failure
[h264 @ 0x55b8868d9080] mmco: unref short failure
  5%|▍         | 88/1945 [16:03<7:45:34, 15.04s/it][h264 @ 0x5565cf9f8700] mmco: unref short failure
[h264 @ 0x5565cf9f8700] mmco: unref short failure
[h264 @ 0x55b879cd0640] mmco: unref short failure
[h264 @ 0x55b879cd0640] mmco: unref short failure
[h264 @ 0x55ed906647c0] mmco: unref short failure
[h264 @ 0x55ed906647c0] mmco: unref short failure
[h264 @ 0x5565d224dc40] mmco: unref short failure
[h264 @ 0x55ed8e15a900] mmco: unref short failure
  5%|▍         | 89/1945 [16:13<7:01:55, 13.64s/it][h264 @ 0x5565cd1672c0] mmco: unref short failure
[h264 @ 0x55b8831e6640] mmco: unref short failure
[h264 @ 0x55b8831e6640] mmco: unref short failure
[h264 @ 0x55b87a80bf00] mmco: unref short failure
  5%|▍         | 90/1945 [16:35<8:21:18, 16.21s/it]  5%|▍         | 91/1945 [16:41<6:46:13, 13.15s/it][h264 @ 0x55ed82440c80] mmco: unref short failure
[h264 @ 0x55ed82440c80] mmco: unref short failure
  5%|▍         | 92/1945 [16:47<5:35:43, 10.87s/it][h264 @ 0x55ed85f15e80] mmco: unref short failure
  5%|▍         | 93/1945 [16:55<5:08:54, 10.01s/it][h264 @ 0x55ed8c43c640] mmco: unref short failure
[h264 @ 0x55fc2f835800] mmco: unref short failure
  5%|▍         | 94/1945 [17:09<5:43:10, 11.12s/it][h264 @ 0x5565cc34a500] mmco: unref short failure
[h264 @ 0x5565cc34a500] mmco: unref short failure
  5%|▍         | 95/1945 [17:14<4:46:52,  9.30s/it][h264 @ 0x55fc2dc40500] mmco: unref short failure
[h264 @ 0x55fc2dc40500] mmco: unref short failure
[h264 @ 0x55ed904b79c0] mmco: unref short failure
[h264 @ 0x55ed904b79c0] mmco: unref short failure
[h264 @ 0x55ed8e6ff480] mmco: unref short failure
[h264 @ 0x55ed8e6ff480] mmco: unref short failure
[h264 @ 0x55fc2e256200] mmco: unref short failure
[h264 @ 0x55fc2e256200] mmco: unref short failure
[h264 @ 0x55b881c8e600] mmco: unref short failure
[h264 @ 0x55b888bfe980] mmco: unref short failure
[h264 @ 0x55b888bfe980] mmco: unref short failure
  5%|▍         | 96/1945 [17:48<8:38:44, 16.83s/it]  5%|▍         | 97/1945 [17:53<6:51:32, 13.36s/it][h264 @ 0x5565d6cf7240] mmco: unref short failure
[h264 @ 0x5565d6cf7240] mmco: unref short failure
[h264 @ 0x5565cd6c8040] mmco: unref short failure
[h264 @ 0x5565cd6c8040] mmco: unref short failure
[h264 @ 0x55fc27efae40] mmco: unref short failure
[h264 @ 0x55fc27efae40] mmco: unref short failure
[h264 @ 0x5565cd6c82c0] mmco: unref short failure
[h264 @ 0x5565cd6c82c0] mmco: unref short failure
[h264 @ 0x55b88a968340] mmco: unref short failure
  5%|▌         | 98/1945 [18:23<9:26:00, 18.39s/it][h264 @ 0x55b8825e0140] mmco: unref short failure
[h264 @ 0x55b8825e0140] mmco: unref short failure
  5%|▌         | 99/1945 [18:29<7:23:31, 14.42s/it]09/07/2024 12:02:28 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.3227462768554688, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04537363350391388, 'loss_ret%tv%ta--finetune_area/loss_area': 3.0380115509033203, 'loss_ret%tv%ta--finetune_area/total_loss': 6.406131744384766}
[h264 @ 0x55b879e29f00] mmco: unref short failure
  5%|▌         | 100/1945 [18:34<5:59:51, 11.70s/it]  5%|▌         | 101/1945 [18:40<5:05:06,  9.93s/it][h264 @ 0x55fc22dd3440] mmco: unref short failure
[h264 @ 0x55fc22dd3440] mmco: unref short failure
[h264 @ 0x55ed83fb2a80] mmco: unref short failure
[h264 @ 0x55ed83fb2a80] mmco: unref short failure
  5%|▌         | 102/1945 [18:53<5:35:44, 10.93s/it]  5%|▌         | 103/1945 [18:58<4:45:24,  9.30s/it][h264 @ 0x5565d8bc0940] mmco: unref short failure
[h264 @ 0x5565d331b840] mmco: unref short failure
[h264 @ 0x5565d331b840] mmco: unref short failure
[h264 @ 0x5565d331b840] mmco: unref short failure
[h264 @ 0x5565d331b840] mmco: unref short failure
[h264 @ 0x5565c61c4cc0] mmco: unref short failure
[h264 @ 0x5565d331b840] mmco: unref short failure
[h264 @ 0x5565d331b840] mmco: unref short failure
[h264 @ 0x55ed92a58600] mmco: unref short failure
[h264 @ 0x55ed92a58600] mmco: unref short failure
[h264 @ 0x5565d601c440] mmco: unref short failure
[h264 @ 0x5565d023d8c0] mmco: unref short failure
[h264 @ 0x5565d023d8c0] mmco: unref short failure
[h264 @ 0x55ed92443680] mmco: unref short failure
[h264 @ 0x55fc1f520580] mmco: unref short failure
[h264 @ 0x5565cb22cc00] mmco: unref short failure
[h264 @ 0x5565cb22cc00] mmco: unref short failure
[h264 @ 0x5565cb22cc00] mmco: unref short failure
[h264 @ 0x5565cb22cc00] mmco: unref short failure
[h264 @ 0x5565cb22cc00] mmco: unref short failure
[h264 @ 0x5565cb22cc00] mmco: unref short failure
[h264 @ 0x5565cb22cc00] mmco: unref short failure
[h264 @ 0x5565cb22cc00] mmco: unref short failure
  5%|▌         | 104/1945 [19:22<6:58:35, 13.64s/it][h264 @ 0x55ed8c74e180] mmco: unref short failure
[h264 @ 0x55ed8c74e180] mmco: unref short failure
[h264 @ 0x55b88ab79200] mmco: unref short failure
[h264 @ 0x55b88ab79200] mmco: unref short failure
[h264 @ 0x55b88ab79200] mmco: unref short failure
[h264 @ 0x55b88ab79200] mmco: unref short failure
[h264 @ 0x55b88ab79200] mmco: unref short failure
[h264 @ 0x55b88ab79200] mmco: unref short failure
[h264 @ 0x55ed8b8c4880] mmco: unref short failure
  5%|▌         | 105/1945 [19:28<5:47:28, 11.33s/it][h264 @ 0x55fc2f0c5780] mmco: unref short failure
[h264 @ 0x55fc2f0c5780] mmco: unref short failure
[h264 @ 0x55b87e4de000] mmco: unref short failure
[h264 @ 0x55b87e4de000] mmco: unref short failure
  5%|▌         | 106/1945 [20:01<9:01:35, 17.67s/it]  6%|▌         | 107/1945 [20:06<7:07:56, 13.97s/it]  6%|▌         | 108/1945 [20:11<5:49:04, 11.40s/it][h264 @ 0x55b886910080] mmco: unref short failure
[h264 @ 0x55b882c43b40] mmco: unref short failure
[h264 @ 0x55b882c43b40] mmco: unref short failure
  6%|▌         | 109/1945 [20:16<4:50:57,  9.51s/it][h264 @ 0x55fc2a976900] mmco: unref short failure
[h264 @ 0x55fc2a976900] mmco: unref short failure
[h264 @ 0x55ed8e31bb40] mmco: unref short failure
[h264 @ 0x55ed8e31bb40] mmco: unref short failure
[h264 @ 0x5565c8e243c0] mmco: unref short failure
[h264 @ 0x5565c8e243c0] mmco: unref short failure
  6%|▌         | 110/1945 [20:37<6:27:15, 12.66s/it][h264 @ 0x55ed93d90c00] mmco: unref short failure
  6%|▌         | 111/1945 [20:42<5:19:26, 10.45s/it][h264 @ 0x55fc20e4d9c0] mmco: unref short failure
[h264 @ 0x55fc2165ef00] mmco: unref short failure
[h264 @ 0x55fc2165ef00] mmco: unref short failure
[h264 @ 0x55fc2f21f140] mmco: unref short failure
[h264 @ 0x55fc2f21f140] mmco: unref short failure
  6%|▌         | 112/1945 [21:03<6:56:03, 13.62s/it][h264 @ 0x55b887176880] mmco: unref short failure
[h264 @ 0x55b887176880] mmco: unref short failure
  6%|▌         | 113/1945 [21:08<5:41:12, 11.17s/it][h264 @ 0x55fc2f21f5c0] mmco: unref short failure
[h264 @ 0x55fc2f21f5c0] mmco: unref short failure
[h264 @ 0x55ed836c2600] mmco: unref short failure
[h264 @ 0x55ed836c2600] mmco: unref short failure
  6%|▌         | 114/1945 [21:35<8:03:12, 15.83s/it]  6%|▌         | 115/1945 [21:41<6:36:48, 13.01s/it][h264 @ 0x55fc295fcbc0] mmco: unref short failure
[h264 @ 0x55fc30701080] mmco: unref short failure
[h264 @ 0x55fc30701080] mmco: unref short failure
  6%|▌         | 116/1945 [21:47<5:30:29, 10.84s/it]  6%|▌         | 117/1945 [21:52<4:35:56,  9.06s/it][h264 @ 0x55ed965f1500] mmco: unref short failure
[h264 @ 0x55ed965f1500] mmco: unref short failure
[h264 @ 0x55b887f16440] mmco: unref short failure
[h264 @ 0x55b887f16440] mmco: unref short failure
  6%|▌         | 118/1945 [22:16<6:54:59, 13.63s/it][h264 @ 0x55fc1f883900] mmco: unref short failure
[h264 @ 0x55fc1f883900] mmco: unref short failure
  6%|▌         | 119/1945 [22:22<5:42:31, 11.26s/it][h264 @ 0x55ed933a8440] mmco: unref short failure
[h264 @ 0x55ed93c31640] mmco: unref short failure
[h264 @ 0x55ed93c31640] mmco: unref short failure
[h264 @ 0x55b886c1a0c0] mmco: unref short failure
[h264 @ 0x55ed95004c40] mmco: unref short failure
[h264 @ 0x55fc1f0b5540] mmco: unref short failure
  6%|▌         | 120/1945 [22:48<7:55:24, 15.63s/it][h264 @ 0x5565d13fc400] mmco: unref short failure
[h264 @ 0x5565d13fc400] mmco: unref short failure
  6%|▌         | 121/1945 [22:54<6:25:56, 12.70s/it][h264 @ 0x55fc2d07d240] mmco: unref short failure
[h264 @ 0x55fc2d07d240] mmco: unref short failure
[h264 @ 0x5565d11ed4c0] mmco: unref short failure
[h264 @ 0x5565d11ed4c0] mmco: unref short failure
  6%|▋         | 122/1945 [23:14<7:30:26, 14.83s/it]  6%|▋         | 123/1945 [23:19<6:07:05, 12.09s/it]  6%|▋         | 124/1945 [23:24<5:04:08, 10.02s/it]  6%|▋         | 125/1945 [23:30<4:26:07,  8.77s/it][h264 @ 0x5565d02b9840] mmco: unref short failure
[h264 @ 0x5565d712fe40] mmco: unref short failure
[h264 @ 0x55fc20c76100] mmco: unref short failure
[h264 @ 0x55fc20c76100] mmco: unref short failure
[h264 @ 0x5565c8ccc680] mmco: unref short failure
[h264 @ 0x5565c8ccc680] mmco: unref short failure
[h264 @ 0x55fc269db340] mmco: unref short failure
[h264 @ 0x55fc269db340] mmco: unref short failure
  6%|▋         | 126/1945 [23:52<6:25:35, 12.72s/it][h264 @ 0x55fc259b9d40] mmco: unref short failure
[h264 @ 0x55fc259b9d40] mmco: unref short failure
  7%|▋         | 127/1945 [23:58<5:22:52, 10.66s/it][h264 @ 0x5565caa45c80] mmco: unref short failure
[h264 @ 0x55b8831e6400] mmco: unref short failure
[h264 @ 0x55ed8453fc80] mmco: unref short failure
  7%|▋         | 128/1945 [24:22<7:24:09, 14.67s/it]  7%|▋         | 129/1945 [24:28<6:04:45, 12.05s/it][h264 @ 0x55fc2db85340] mmco: unref short failure
[h264 @ 0x55fc2db85340] mmco: unref short failure
[h264 @ 0x55ed8883a2c0] mmco: unref short failure
[h264 @ 0x55ed8883a2c0] mmco: unref short failure
  7%|▋         | 130/1945 [24:52<7:56:07, 15.74s/it]  7%|▋         | 131/1945 [24:58<6:19:38, 12.56s/it][h264 @ 0x55ed84e8bb80] mmco: unref short failure
[h264 @ 0x55ed84e8bb80] mmco: unref short failure
  7%|▋         | 132/1945 [25:05<5:32:52, 11.02s/it][h264 @ 0x5565d5501000] mmco: unref short failure
[h264 @ 0x5565d5501000] mmco: unref short failure
  7%|▋         | 133/1945 [25:11<4:43:04,  9.37s/it][h264 @ 0x55fc2167e200] mmco: unref short failure
[h264 @ 0x55fc2167e200] mmco: unref short failure
  7%|▋         | 134/1945 [25:38<7:30:09, 14.91s/it][h264 @ 0x55fc1ca43f80] mmco: unref short failure
[h264 @ 0x5565d9e6cc40] mmco: unref short failure
  7%|▋         | 135/1945 [25:44<6:05:20, 12.11s/it][h264 @ 0x55b88b707600] mmco: unref short failure
[h264 @ 0x55fc20512900] mmco: unref short failure
[h264 @ 0x55fc20512900] mmco: unref short failure
  7%|▋         | 136/1945 [26:00<6:44:43, 13.42s/it]  7%|▋         | 137/1945 [26:07<5:46:36, 11.50s/it][h264 @ 0x55b88f4fabc0] mmco: unref short failure
[h264 @ 0x5565c5d41a40] mmco: unref short failure
[h264 @ 0x5565c5d41a40] mmco: unref short failure
[h264 @ 0x5565d3b6ce00] mmco: unref short failure
  7%|▋         | 138/1945 [26:32<7:48:46, 15.57s/it][h264 @ 0x5565d1604bc0] mmco: unref short failure
  7%|▋         | 139/1945 [26:40<6:33:35, 13.08s/it][h264 @ 0x5565dd0549c0] mmco: unref short failure
[h264 @ 0x55ed8bcc0940] mmco: unref short failure
[h264 @ 0x55ed8bcc0940] mmco: unref short failure
  7%|▋         | 140/1945 [26:50<6:08:32, 12.25s/it]  7%|▋         | 141/1945 [26:56<5:09:25, 10.29s/it][h264 @ 0x55fc31886040] mmco: unref short failure
[h264 @ 0x55ed90417c00] mmco: unref short failure
[h264 @ 0x55ed90417c00] mmco: unref short failure
[h264 @ 0x55ed938ebd80] mmco: unref short failure
[h264 @ 0x55b888fd09c0] mmco: unref short failure
[h264 @ 0x55b888fd09c0] mmco: unref short failure
[h264 @ 0x55b881609c80] mmco: unref short failure
[h264 @ 0x55b881609c80] mmco: unref short failure
  7%|▋         | 142/1945 [27:23<7:45:48, 15.50s/it][h264 @ 0x55b88ea31980] mmco: unref short failure
[h264 @ 0x55b88ea31980] mmco: unref short failure
[h264 @ 0x5565cba02340] mmco: unref short failure
[h264 @ 0x5565cba02340] mmco: unref short failure
  7%|▋         | 143/1945 [27:29<6:17:51, 12.58s/it][h264 @ 0x55ed96480f80] mmco: unref short failure
[h264 @ 0x55fc1e29b240] mmco: unref short failure
  7%|▋         | 144/1945 [27:40<6:05:12, 12.17s/it]  7%|▋         | 145/1945 [27:46<5:07:24, 10.25s/it][h264 @ 0x55ed8b31e340] mmco: unref short failure
[h264 @ 0x55ed8b31e340] mmco: unref short failure
[h264 @ 0x55b885bee980] mmco: unref short failure
[h264 @ 0x55b885bee980] mmco: unref short failure
[h264 @ 0x55fc27d13c40] mmco: unref short failure
[h264 @ 0x55fc27d13c40] mmco: unref short failure
[h264 @ 0x55ed8639df40] mmco: unref short failure
[h264 @ 0x55ed8639df40] mmco: unref short failure
  8%|▊         | 146/1945 [28:14<7:48:42, 15.63s/it][h264 @ 0x55fc1d557280] mmco: unref short failure
  8%|▊         | 147/1945 [28:20<6:22:10, 12.75s/it][h264 @ 0x55fc31087dc0] mmco: unref short failure
[h264 @ 0x55fc31087dc0] mmco: unref short failure
  8%|▊         | 148/1945 [28:28<5:37:37, 11.27s/it]  8%|▊         | 149/1945 [28:33<4:42:21,  9.43s/it][h264 @ 0x55fc2d664e00] mmco: unref short failure
[h264 @ 0x55b87890c800] mmco: unref short failure
[h264 @ 0x55b87890c800] mmco: unref short failure
[h264 @ 0x55ed8a45e980] mmco: unref short failure
[h264 @ 0x55ed808a9b40] mmco: unref short failure
[h264 @ 0x55ed808a9b40] mmco: unref short failure
[h264 @ 0x55ed94a40a00] mmco: unref short failure
[h264 @ 0x55fc1e00eb80] mmco: unref short failure
[h264 @ 0x5565d7bbed80] mmco: unref short failure
[h264 @ 0x5565d7bbed80] mmco: unref short failure
09/07/2024 12:12:59 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.7073442935943604, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.05259352922439575, 'loss_ret%tv%ta--finetune_area/loss_area': 3.6680192947387695, 'loss_ret%tv%ta--finetune_area/total_loss': 7.427957057952881}
  8%|▊         | 150/1945 [29:05<7:56:52, 15.94s/it]  8%|▊         | 151/1945 [29:10<6:26:21, 12.92s/it][h264 @ 0x55ed82a55a40] mmco: unref short failure
[h264 @ 0x55ed82a55a40] mmco: unref short failure
[h264 @ 0x5565cd8e0700] mmco: unref short failure
[h264 @ 0x5565cd8e0700] mmco: unref short failure
[h264 @ 0x55fc1dd40280] mmco: unref short failure
[h264 @ 0x55fc1dd40280] mmco: unref short failure
  8%|▊         | 152/1945 [29:24<6:36:10, 13.26s/it]  8%|▊         | 153/1945 [29:30<5:26:23, 10.93s/it][h264 @ 0x55b87da46540] mmco: unref short failure
[h264 @ 0x55b87da46540] mmco: unref short failure
[h264 @ 0x5565d9968600] mmco: unref short failure
[h264 @ 0x5565d9968600] mmco: unref short failure
[h264 @ 0x55b88a987000] mmco: unref short failure
[h264 @ 0x55b88a987000] mmco: unref short failure
  8%|▊         | 154/1945 [29:56<7:44:02, 15.55s/it][h264 @ 0x55fc26b24d40] mmco: unref short failure
[h264 @ 0x55fc26b24d40] mmco: unref short failure
  8%|▊         | 155/1945 [30:02<6:16:27, 12.62s/it][h264 @ 0x55b88451cc40] mmco: unref short failure
[h264 @ 0x55b88451cc40] mmco: unref short failure
  8%|▊         | 156/1945 [30:08<5:15:28, 10.58s/it][h264 @ 0x55b88451cc40] mmco: unref short failure
[h264 @ 0x55b88451cc40] mmco: unref short failure
  8%|▊         | 157/1945 [30:13<4:29:52,  9.06s/it][h264 @ 0x55ed93e9d380] mmco: unref short failure
[h264 @ 0x55fc1cb54e40] mmco: unref short failure
[h264 @ 0x55fc1cb54e40] mmco: unref short failure
[h264 @ 0x55ed8427a680] mmco: unref short failure
[h264 @ 0x55b885bee700] mmco: unref short failure
  8%|▊         | 158/1945 [30:41<7:16:13, 14.65s/it]  8%|▊         | 159/1945 [30:47<5:59:39, 12.08s/it][h264 @ 0x55fc2a7dfc40] mmco: unref short failure
  8%|▊         | 160/1945 [31:06<7:04:08, 14.26s/it][h264 @ 0x55ed81d3df40] mmco: unref short failure
[h264 @ 0x55ed81d3df40] mmco: unref short failure
  8%|▊         | 161/1945 [31:12<5:42:52, 11.53s/it][h264 @ 0x5565da657440] mmco: unref short failure
[h264 @ 0x5565da657440] mmco: unref short failure
  8%|▊         | 162/1945 [31:38<7:51:14, 15.86s/it]  8%|▊         | 163/1945 [31:44<6:22:19, 12.87s/it]  8%|▊         | 164/1945 [31:50<5:21:45, 10.84s/it][h264 @ 0x55ed82465080] mmco: unref short failure
  8%|▊         | 165/1945 [31:55<4:28:54,  9.06s/it][h264 @ 0x5565ce7f0900] mmco: unref short failure
[h264 @ 0x55ed8f6c4840] mmco: unref short failure
[h264 @ 0x55ed8f6c4840] mmco: unref short failure
[h264 @ 0x55b87edd2440] mmco: unref short failure
[h264 @ 0x55b87edd2440] mmco: unref short failure
  9%|▊         | 166/1945 [32:30<8:25:30, 17.05s/it][h264 @ 0x55fc2b7ed940] mmco: unref short failure
  9%|▊         | 167/1945 [32:36<6:42:39, 13.59s/it][h264 @ 0x55b8803b8b40] mmco: unref short failure
[h264 @ 0x55b8803b8b40] mmco: unref short failure
[h264 @ 0x55fc22935240] mmco: unref short failure
[h264 @ 0x55fc1cfd4dc0] mmco: unref short failure
  9%|▊         | 168/1945 [32:50<6:45:13, 13.68s/it]  9%|▊         | 169/1945 [32:55<5:32:04, 11.22s/it][h264 @ 0x5565dd448fc0] mmco: unref short failure
[h264 @ 0x55b88911e4c0] mmco: unref short failure
[h264 @ 0x55b87896a300] mmco: unref short failure
[h264 @ 0x55b87896a300] mmco: unref short failure
[h264 @ 0x55fc1f36abc0] mmco: unref short failure
[h264 @ 0x55fc1f36abc0] mmco: unref short failure
  9%|▊         | 170/1945 [33:14<6:42:24, 13.60s/it]  9%|▉         | 171/1945 [33:20<5:28:49, 11.12s/it][h264 @ 0x5565c8065700] mmco: unref short failure
[h264 @ 0x5565c8065700] mmco: unref short failure
[h264 @ 0x5565c8065700] mmco: unref short failure
[h264 @ 0x55b87ac62d80] mmco: unref short failure
  9%|▉         | 172/1945 [33:28<5:02:20, 10.23s/it][h264 @ 0x55fc23044100] mmco: unref short failure
  9%|▉         | 173/1945 [33:34<4:23:54,  8.94s/it][h264 @ 0x55fc1ec77240] mmco: unref short failure
[h264 @ 0x55ed884a3cc0] mmco: unref short failure
[h264 @ 0x55ed884a3cc0] mmco: unref short failure
[h264 @ 0x55ed8fe22ac0] mmco: unref short failure
[h264 @ 0x5565dbe09080] mmco: unref short failure
[h264 @ 0x5565dbe09080] mmco: unref short failure
[h264 @ 0x55fc1e0f2f00] mmco: unref short failure
[h264 @ 0x55fc1e0f2f00] mmco: unref short failure
  9%|▉         | 174/1945 [34:16<9:17:40, 18.89s/it]  9%|▉         | 175/1945 [34:21<7:18:16, 14.86s/it][h264 @ 0x55fc35076940] mmco: unref short failure
  9%|▉         | 176/1945 [34:27<5:55:24, 12.05s/it][h264 @ 0x55b878e63440] mmco: unref short failure
[h264 @ 0x55b878e63440] mmco: unref short failure
  9%|▉         | 177/1945 [34:32<4:54:23,  9.99s/it]  9%|▉         | 178/1945 [34:53<6:29:42, 13.23s/it]  9%|▉         | 179/1945 [34:59<5:30:34, 11.23s/it][h264 @ 0x55ed854e8540] mmco: unref short failure
[h264 @ 0x55ed854e8540] mmco: unref short failure
  9%|▉         | 180/1945 [35:07<5:02:20, 10.28s/it][h264 @ 0x55ed8dff8ac0] mmco: unref short failure
  9%|▉         | 181/1945 [35:13<4:24:36,  9.00s/it][h264 @ 0x5565d8901500] mmco: unref short failure
[h264 @ 0x5565d8901500] mmco: unref short failure
[h264 @ 0x55ed84c59a00] mmco: unref short failure
[h264 @ 0x55ed84c59a00] mmco: unref short failure
[h264 @ 0x55fc2e84b900] mmco: unref short failure
[h264 @ 0x55fc2e84b900] mmco: unref short failure
[h264 @ 0x55fc2b7ee200] mmco: unref short failure
[h264 @ 0x5565c63b6a80] mmco: unref short failure
  9%|▉         | 182/1945 [35:58<9:36:00, 19.60s/it][h264 @ 0x55fc1d8ec680] mmco: unref short failure
  9%|▉         | 183/1945 [36:03<7:31:04, 15.36s/it][h264 @ 0x55fc1c3c9480] mmco: unref short failure
[h264 @ 0x55fc1c3c9480] mmco: unref short failure
  9%|▉         | 184/1945 [36:08<6:02:29, 12.35s/it][h264 @ 0x55b87d2ec200] mmco: unref short failure
[h264 @ 0x55b87d2ec200] mmco: unref short failure
 10%|▉         | 185/1945 [36:15<5:10:38, 10.59s/it][h264 @ 0x55b882db7880] mmco: unref short failure
[h264 @ 0x55b882db7880] mmco: unref short failure
[h264 @ 0x55ed91a10680] mmco: unref short failure
 10%|▉         | 186/1945 [36:40<7:14:33, 14.82s/it] 10%|▉         | 187/1945 [36:45<5:51:06, 11.98s/it] 10%|▉         | 188/1945 [36:50<4:51:11,  9.94s/it][h264 @ 0x5565cbb98b00] mmco: unref short failure
 10%|▉         | 189/1945 [36:56<4:14:05,  8.68s/it][h264 @ 0x55fc26a42800] mmco: unref short failure
[h264 @ 0x55ed84b18a00] mmco: unref short failure
[h264 @ 0x55ed84b18a00] mmco: unref short failure
[h264 @ 0x5565cc637240] mmco: unref short failure
[h264 @ 0x5565d5c56280] mmco: unref short failure
[h264 @ 0x5565d5c56280] mmco: unref short failure
[h264 @ 0x55ed814baac0] mmco: unref short failure
[h264 @ 0x55b881423180] mmco: unref short failure
[h264 @ 0x55b881423180] mmco: unref short failure
[h264 @ 0x5565ca5260c0] mmco: unref short failure
 10%|▉         | 190/1945 [37:35<8:42:44, 17.87s/it][h264 @ 0x55b88c050140] mmco: unref short failure
[h264 @ 0x55b88c050140] mmco: unref short failure
[h264 @ 0x55fc22294b80] mmco: unref short failure
 10%|▉         | 191/1945 [37:41<6:52:34, 14.11s/it] 10%|▉         | 192/1945 [37:46<5:39:06, 11.61s/it][h264 @ 0x55ed94a40580] mmco: unref short failure
[h264 @ 0x55ed94a40580] mmco: unref short failure
 10%|▉         | 193/1945 [37:53<4:58:10, 10.21s/it][h264 @ 0x55ed864d4640] mmco: unref short failure
[h264 @ 0x55ed82e07740] mmco: unref short failure
[h264 @ 0x55ed82e07740] mmco: unref short failure
[h264 @ 0x55fc223e3a40] mmco: unref short failure
[h264 @ 0x55fc1d79bb80] mmco: unref short failure
[h264 @ 0x55fc1d79bb80] mmco: unref short failure
[h264 @ 0x55fc1d79bb80] mmco: unref short failure
[h264 @ 0x55fc1d79bb80] mmco: unref short failure
 10%|▉         | 194/1945 [38:19<7:16:25, 14.95s/it][h264 @ 0x55b87a57a340] mmco: unref short failure
 10%|█         | 195/1945 [38:25<5:51:09, 12.04s/it][h264 @ 0x5565cc637240] mmco: unref short failure
[h264 @ 0x5565c99f2a00] mmco: unref short failure
 10%|█         | 196/1945 [38:34<5:25:12, 11.16s/it] 10%|█         | 197/1945 [38:39<4:32:29,  9.35s/it][h264 @ 0x55fc1cf4ca00] mmco: unref short failure
[h264 @ 0x5565c9e60ec0] mmco: unref short failure
[h264 @ 0x5565d5055a80] mmco: unref short failure
[h264 @ 0x5565d2978340] mmco: unref short failure
 10%|█         | 198/1945 [39:20<9:14:01, 19.03s/it][h264 @ 0x5565c5c95c40] mmco: unref short failure
[h264 @ 0x5565c5c95c40] mmco: unref short failure
 10%|█         | 199/1945 [39:26<7:15:17, 14.96s/it]09/07/2024 12:23:26 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.570023775100708, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.0508999228477478, 'loss_ret%tv%ta--finetune_area/loss_area': 3.6818580627441406, 'loss_ret%tv%ta--finetune_area/total_loss': 7.30278205871582}
 10%|█         | 200/1945 [39:31<5:51:06, 12.07s/it][h264 @ 0x5565d3a49d80] mmco: unref short failure
[h264 @ 0x5565d3a49d80] mmco: unref short failure
[h264 @ 0x55b884f55a40] mmco: unref short failure
 10%|█         | 201/1945 [39:37<4:52:31, 10.06s/it][h264 @ 0x55ed81ddc1c0] mmco: unref short failure
[h264 @ 0x55ed81ddc1c0] mmco: unref short failure
[h264 @ 0x5565cebafa80] mmco: unref short failure
 10%|█         | 202/1945 [40:04<7:23:48, 15.28s/it][h264 @ 0x55fc2617ae80] mmco: unref short failure
 10%|█         | 203/1945 [40:10<6:00:12, 12.41s/it][h264 @ 0x55fc3374db40] mmco: unref short failure
[h264 @ 0x55fc3374db40] mmco: unref short failure
 10%|█         | 204/1945 [40:24<6:16:12, 12.97s/it][h264 @ 0x55b87ceed300] mmco: unref short failure
[h264 @ 0x55b87ceed300] mmco: unref short failure
 11%|█         | 205/1945 [40:29<5:10:13, 10.70s/it][h264 @ 0x55fc1da747c0] mmco: unref short failure
[h264 @ 0x55fc1da747c0] mmco: unref short failure
[h264 @ 0x55ed89fb3cc0] mmco: unref short failure
[h264 @ 0x55ed89fb3cc0] mmco: unref short failure
[h264 @ 0x5565de3f6e40] mmco: unref short failure
[h264 @ 0x55b88e22ac40] mmco: unref short failure
 11%|█         | 206/1945 [41:08<9:13:37, 19.10s/it] 11%|█         | 207/1945 [41:14<7:14:50, 15.01s/it] 11%|█         | 208/1945 [41:19<5:51:04, 12.13s/it] 11%|█         | 209/1945 [41:25<4:54:02, 10.16s/it][h264 @ 0x55fc216699c0] mmco: unref short failure
[h264 @ 0x55fc216699c0] mmco: unref short failure
[h264 @ 0x55ed856f4a40] mmco: unref short failure
[h264 @ 0x55ed856f4a40] mmco: unref short failure
[h264 @ 0x55ed88c23380] mmco: unref short failure
 11%|█         | 210/1945 [41:40<5:41:33, 11.81s/it][h264 @ 0x55b87b4fc500] mmco: unref short failure
[h264 @ 0x55b87b4fc500] mmco: unref short failure
 11%|█         | 211/1945 [41:46<4:51:51, 10.10s/it][h264 @ 0x55ed88c22a40] mmco: unref short failure
[h264 @ 0x55ed88c22a40] mmco: unref short failure
[h264 @ 0x55fc22b1fb80] mmco: unref short failure
[h264 @ 0x55fc22b1fb80] mmco: unref short failure
 11%|█         | 212/1945 [42:06<6:14:17, 12.96s/it][h264 @ 0x55fc32780380] mmco: unref short failure
[h264 @ 0x55fc32780380] mmco: unref short failure
[h264 @ 0x55ed8b3fd500] mmco: unref short failure
[h264 @ 0x55ed8b3fd500] mmco: unref short failure
[h264 @ 0x55ed8291d3c0] mmco: unref short failure
[h264 @ 0x55ed8291d3c0] mmco: unref short failure
[h264 @ 0x55ed89109280] mmco: unref short failure
[h264 @ 0x55ed89109280] mmco: unref short failure
[h264 @ 0x55ed89109280] mmco: unref short failure
[h264 @ 0x55ed89109280] mmco: unref short failure
 11%|█         | 213/1945 [42:14<5:30:00, 11.43s/it][h264 @ 0x55b87e595100] mmco: unref short failure
[h264 @ 0x55b87e595100] mmco: unref short failure
[h264 @ 0x55b87e595100] mmco: unref short failure
[h264 @ 0x55b87e595100] mmco: unref short failure
 11%|█         | 214/1945 [42:46<8:28:38, 17.63s/it] 11%|█         | 215/1945 [42:52<6:49:31, 14.20s/it][h264 @ 0x55fc27f5eac0] mmco: unref short failure
 11%|█         | 216/1945 [42:58<5:33:03, 11.56s/it] 11%|█         | 217/1945 [43:05<4:54:16, 10.22s/it][h264 @ 0x55b878ae0340] mmco: unref short failure
[h264 @ 0x55fc27b89080] mmco: unref short failure
[h264 @ 0x55ed94a475c0] mmco: unref short failure
[h264 @ 0x5565ca357c00] mmco: unref short failure
[h264 @ 0x5565ca357c00] mmco: unref short failure
 11%|█         | 218/1945 [43:26<6:30:57, 13.58s/it][h264 @ 0x55b878957780] mmco: unref short failure
 11%|█▏        | 219/1945 [43:32<5:21:38, 11.18s/it][h264 @ 0x55ed80d269c0] mmco: unref short failure
[h264 @ 0x55ed87957880] mmco: unref short failure
[h264 @ 0x55ed8fbc7e00] mmco: unref short failure
[h264 @ 0x55b878ee1cc0] mmco: unref short failure
 11%|█▏        | 220/1945 [43:51<6:33:52, 13.70s/it] 11%|█▏        | 221/1945 [43:59<5:38:41, 11.79s/it][h264 @ 0x5565d3a49900] mmco: unref short failure
[h264 @ 0x5565d3a49900] mmco: unref short failure
[h264 @ 0x55ed82995340] mmco: unref short failure
 11%|█▏        | 222/1945 [44:28<8:14:30, 17.22s/it] 11%|█▏        | 223/1945 [44:36<6:54:14, 14.43s/it] 12%|█▏        | 224/1945 [44:42<5:39:06, 11.82s/it][h264 @ 0x55fc1f638dc0] mmco: unref short failure
 12%|█▏        | 225/1945 [44:48<4:46:32, 10.00s/it][h264 @ 0x55fc2265a1c0] mmco: unref short failure
[h264 @ 0x55fc2265a1c0] mmco: unref short failure
[h264 @ 0x55ed85ddd240] mmco: unref short failure
[h264 @ 0x55ed85ddd240] mmco: unref short failure
[h264 @ 0x55fc23763e00] mmco: unref short failure
[h264 @ 0x55b879441fc0] mmco: unref short failure
[h264 @ 0x55b879441fc0] mmco: unref short failure
[h264 @ 0x55b8803def80] mmco: unref short failure
 12%|█▏        | 226/1945 [45:09<6:18:27, 13.21s/it] 12%|█▏        | 227/1945 [45:15<5:17:11, 11.08s/it][h264 @ 0x55ed8be87000] mmco: unref short failure
[h264 @ 0x55ed8be87000] mmco: unref short failure
[h264 @ 0x5565ccdb0340] mmco: unref short failure
[h264 @ 0x55ed80c0ab80] mmco: unref short failure
[h264 @ 0x5565cb757180] mmco: unref short failure
not have audios ua_Kowav7hg.20
 12%|█▏        | 228/1945 [45:31<5:59:22, 12.56s/it] 12%|█▏        | 229/1945 [45:37<5:03:36, 10.62s/it][h264 @ 0x55b880ca7d00] mmco: unref short failure
[h264 @ 0x5565d18c80c0] mmco: unref short failure
[h264 @ 0x5565d18c80c0] mmco: unref short failure
 12%|█▏        | 230/1945 [46:10<8:13:42, 17.27s/it][h264 @ 0x55fc2f94b500] mmco: unref short failure
[h264 @ 0x55fc2f94b500] mmco: unref short failure
[h264 @ 0x5565cb96bcc0] mmco: unref short failure
 12%|█▏        | 231/1945 [46:16<6:38:55, 13.96s/it][h264 @ 0x55ed83616380] mmco: unref short failure
[h264 @ 0x55ed83616380] mmco: unref short failure
[h264 @ 0x55b87dd58f40] mmco: unref short failure
 12%|█▏        | 232/1945 [46:22<5:34:41, 11.72s/it][h264 @ 0x55b88f67d940] mmco: unref short failure
[h264 @ 0x55b88f67d940] mmco: unref short failure
 12%|█▏        | 233/1945 [46:28<4:43:33,  9.94s/it][h264 @ 0x55ed8b9cb740] mmco: unref short failure
[h264 @ 0x55ed8b9cb740] mmco: unref short failure
[h264 @ 0x55fc1d0a3b40] mmco: unref short failure
[h264 @ 0x55fc2c1a1e80] mmco: unref short failure
[h264 @ 0x55fc2c1a1e80] mmco: unref short failure
[h264 @ 0x55b8783524c0] mmco: unref short failure
[h264 @ 0x55b8783524c0] mmco: unref short failure
[h264 @ 0x5565d4a2e7c0] mmco: unref short failure
 12%|█▏        | 234/1945 [46:59<7:43:23, 16.25s/it][h264 @ 0x55b87f9892c0] mmco: unref short failure
[h264 @ 0x5565c8ae1900] mmco: unref short failure
[h264 @ 0x5565c8ae1900] mmco: unref short failure
 12%|█▏        | 235/1945 [47:04<6:07:36, 12.90s/it][h264 @ 0x55fc28f8ee40] mmco: unref short failure
 12%|█▏        | 236/1945 [47:11<5:19:36, 11.22s/it] 12%|█▏        | 237/1945 [47:17<4:28:40,  9.44s/it] 12%|█▏        | 238/1945 [47:49<7:46:35, 16.40s/it] 12%|█▏        | 239/1945 [47:54<6:08:37, 12.96s/it][h264 @ 0x55b879f21d00] mmco: unref short failure
[h264 @ 0x55b879f21d00] mmco: unref short failure
 12%|█▏        | 240/1945 [48:00<5:06:27, 10.78s/it][h264 @ 0x55b8821904c0] mmco: unref short failure
[h264 @ 0x55ed82e023c0] mmco: unref short failure
[h264 @ 0x55ed82e023c0] mmco: unref short failure
[h264 @ 0x55ed82e023c0] mmco: unref short failure
[h264 @ 0x55ed82e023c0] mmco: unref short failure
 12%|█▏        | 241/1945 [48:05<4:16:47,  9.04s/it][h264 @ 0x55fc2e738fc0] mmco: unref short failure
[h264 @ 0x55fc2e738fc0] mmco: unref short failure
[h264 @ 0x55ed92f54e80] mmco: unref short failure
[h264 @ 0x55ed92f54e80] mmco: unref short failure
[h264 @ 0x55b87e8b7880] mmco: unref short failure
[h264 @ 0x55b87e8b7880] mmco: unref short failure
[h264 @ 0x55fc2bf507c0] mmco: unref short failure
[h264 @ 0x55fc2bf507c0] mmco: unref short failure
[h264 @ 0x55fc209871c0] mmco: unref short failure
[h264 @ 0x55fc209871c0] mmco: unref short failure
 12%|█▏        | 242/1945 [48:42<8:11:48, 17.33s/it] 12%|█▏        | 243/1945 [48:50<6:53:42, 14.58s/it] 13%|█▎        | 244/1945 [48:56<5:39:46, 11.98s/it][h264 @ 0x55b87f064600] mmco: unref short failure
[h264 @ 0x55ed850ab840] mmco: unref short failure
[h264 @ 0x55ed850ab840] mmco: unref short failure
 13%|█▎        | 245/1945 [49:02<4:49:20, 10.21s/it][h264 @ 0x55b88579d840] mmco: unref short failure
[h264 @ 0x55b88579d840] mmco: unref short failure
[h264 @ 0x5565cf086180] mmco: unref short failure
[h264 @ 0x5565cf086180] mmco: unref short failure
[h264 @ 0x5565ca78e640] mmco: unref short failure
 13%|█▎        | 246/1945 [49:36<8:16:33, 17.54s/it] 13%|█▎        | 247/1945 [49:41<6:29:54, 13.78s/it] 13%|█▎        | 248/1945 [49:48<5:24:38, 11.48s/it] 13%|█▎        | 249/1945 [49:54<4:41:31,  9.96s/it][h264 @ 0x5565ce75f540] mmco: unref short failure
[h264 @ 0x55fc2db2ac80] mmco: unref short failure
[h264 @ 0x55fc2db2ac80] mmco: unref short failure
[h264 @ 0x55b87aca83c0] mmco: unref short failure
[h264 @ 0x55ed96f52540] mmco: unref short failure
[h264 @ 0x55ed96f52540] mmco: unref short failure
[h264 @ 0x55ed82ad0300] mmco: unref short failure
09/07/2024 12:34:22 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.5276193618774414, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04935766011476517, 'loss_ret%tv%ta--finetune_area/loss_area': 3.293621063232422, 'loss_ret%tv%ta--finetune_area/total_loss': 6.870597839355469}
 13%|█▎        | 250/1945 [50:28<8:05:49, 17.20s/it][h264 @ 0x55b8870561c0] mmco: unref short failure
 13%|█▎        | 251/1945 [50:34<6:32:12, 13.89s/it][h264 @ 0x55ed834acb40] mmco: unref short failure
[h264 @ 0x55ed834acb40] mmco: unref short failure
[h264 @ 0x55ed89a3a300] mmco: unref short failure
[h264 @ 0x55fc280a76c0] mmco: unref short failure
 13%|█▎        | 252/1945 [50:40<5:25:24, 11.53s/it][h264 @ 0x5565cdb83640] mmco: unref short failure
[h264 @ 0x5565d3c8be00] mmco: unref short failure
[h264 @ 0x5565dc21f240] mmco: unref short failure
 13%|█▎        | 253/1945 [50:46<4:38:04,  9.86s/it][h264 @ 0x55fc1f28c980] mmco: unref short failure
[h264 @ 0x55fc1f28c980] mmco: unref short failure
[h264 @ 0x55fc20c7c380] mmco: unref short failure
[h264 @ 0x55fc20c7c380] mmco: unref short failure
[h264 @ 0x55ed97afddc0] mmco: unref short failure
 13%|█▎        | 254/1945 [51:16<7:26:27, 15.84s/it][h264 @ 0x55b87eae0dc0] mmco: unref short failure
[h264 @ 0x55b87eae0dc0] mmco: unref short failure
 13%|█▎        | 255/1945 [51:22<6:00:49, 12.81s/it][h264 @ 0x55fc20100e40] mmco: unref short failure
 13%|█▎        | 256/1945 [51:28<5:02:00, 10.73s/it] 13%|█▎        | 257/1945 [51:33<4:15:03,  9.07s/it][h264 @ 0x55fc242a4e40] mmco: unref short failure
[h264 @ 0x55fc242a4e40] mmco: unref short failure
[h264 @ 0x55ed817f61c0] mmco: unref short failure
[h264 @ 0x55ed817f61c0] mmco: unref short failure
[h264 @ 0x5565c5eeda80] mmco: unref short failure
[h264 @ 0x55b88976ff00] mmco: unref short failure
[h264 @ 0x55b88976ff00] mmco: unref short failure
 13%|█▎        | 258/1945 [52:09<8:03:07, 17.18s/it] 13%|█▎        | 259/1945 [52:14<6:24:35, 13.69s/it] 13%|█▎        | 260/1945 [52:21<5:22:58, 11.50s/it][h264 @ 0x55fc223e3a40] mmco: unref short failure
[h264 @ 0x55fc223e3a40] mmco: unref short failure
 13%|█▎        | 261/1945 [52:26<4:31:59,  9.69s/it][h264 @ 0x55fc2b4a7680] mmco: unref short failure
[h264 @ 0x55fc2b4a7680] mmco: unref short failure
[h264 @ 0x55fc20268a40] mmco: unref short failure
[h264 @ 0x55fc20268a40] mmco: unref short failure
[h264 @ 0x55b87ca9a180] mmco: unref short failure
 13%|█▎        | 262/1945 [52:54<7:06:34, 15.21s/it][h264 @ 0x5565d88afbc0] mmco: unref short failure
[h264 @ 0x5565d88afbc0] mmco: unref short failure
 14%|█▎        | 263/1945 [53:01<5:53:36, 12.61s/it] 14%|█▎        | 264/1945 [53:06<4:51:39, 10.41s/it][h264 @ 0x55b884d77900] mmco: unref short failure
[h264 @ 0x55b884d77900] mmco: unref short failure
[h264 @ 0x55fc2d80a780] mmco: unref short failure
 14%|█▎        | 265/1945 [53:14<4:32:30,  9.73s/it][h264 @ 0x55ed808e2780] mmco: unref short failure
[h264 @ 0x55ed808e2780] mmco: unref short failure
[h264 @ 0x55fc214180c0] mmco: unref short failure
[h264 @ 0x55fc214180c0] mmco: unref short failure
[h264 @ 0x5565d3ffcec0] mmco: unref short failure
[h264 @ 0x55b8804e4ec0] mmco: unref short failure
[h264 @ 0x55b8804e4ec0] mmco: unref short failure
[h264 @ 0x55b8804e4ec0] mmco: unref short failure
[h264 @ 0x55b8804e4ec0] mmco: unref short failure
 14%|█▎        | 266/1945 [53:51<8:14:57, 17.69s/it] 14%|█▎        | 267/1945 [53:56<6:34:10, 14.09s/it] 14%|█▍        | 268/1945 [54:02<5:26:18, 11.67s/it] 14%|█▍        | 269/1945 [54:08<4:38:03,  9.95s/it][h264 @ 0x55b88537eb00] mmco: unref short failure
[h264 @ 0x55b88537eb00] mmco: unref short failure
[h264 @ 0x55b88537eb00] mmco: unref short failure
[h264 @ 0x55fc26bc9a80] mmco: unref short failure
[h264 @ 0x55fc26bc9a80] mmco: unref short failure
[h264 @ 0x55fc25389180] mmco: unref short failure
[h264 @ 0x55b87eae0bc0] mmco: unref short failure
[h264 @ 0x55b87eae0bc0] mmco: unref short failure
 14%|█▍        | 270/1945 [54:34<6:53:44, 14.82s/it][h264 @ 0x5565d3a49e40] mmco: unref short failure
 14%|█▍        | 271/1945 [54:40<5:39:44, 12.18s/it][h264 @ 0x55b88befa400] mmco: unref short failure
[h264 @ 0x55b88befa400] mmco: unref short failure
 14%|█▍        | 272/1945 [54:46<4:46:39, 10.28s/it][h264 @ 0x55b889944080] mmco: unref short failure
[h264 @ 0x5565cea2e500] mmco: unref short failure
 14%|█▍        | 273/1945 [55:00<5:17:51, 11.41s/it][h264 @ 0x55fc2bda5540] mmco: unref short failure
[h264 @ 0x55fc2bda5540] mmco: unref short failure
[h264 @ 0x55b8853d47c0] mmco: unref short failure
[h264 @ 0x5565d0b47840] mmco: unref short failure
[h264 @ 0x5565d0b47840] mmco: unref short failure
 14%|█▍        | 274/1945 [55:30<7:52:29, 16.97s/it][h264 @ 0x55ed8a9bc040] mmco: unref short failure
 14%|█▍        | 275/1945 [55:37<6:25:53, 13.86s/it] 14%|█▍        | 276/1945 [55:43<5:21:00, 11.54s/it][h264 @ 0x55fc242a4e40] mmco: unref short failure
[h264 @ 0x55fc242a4e40] mmco: unref short failure
 14%|█▍        | 277/1945 [55:49<4:33:36,  9.84s/it][h264 @ 0x55b88b90b980] mmco: unref short failure
[h264 @ 0x55fc2e296c00] mmco: unref short failure
[h264 @ 0x55fc2fb24a40] mmco: unref short failure
[h264 @ 0x55fc2fb24a40] mmco: unref short failure
[h264 @ 0x55b889943e00] mmco: unref short failure
[h264 @ 0x55ed94004900] mmco: unref short failure
[h264 @ 0x5565d7b76f00] mmco: unref short failure
 14%|█▍        | 278/1945 [56:11<6:17:35, 13.59s/it] 14%|█▍        | 279/1945 [56:18<5:17:04, 11.42s/it][h264 @ 0x55fc20268a40] mmco: unref short failure
[h264 @ 0x55fc20268a40] mmco: unref short failure
 14%|█▍        | 280/1945 [56:23<4:28:57,  9.69s/it][h264 @ 0x55b88befa400] mmco: unref short failure
[h264 @ 0x55b87db69f80] mmco: unref short failure
 14%|█▍        | 281/1945 [56:48<6:34:47, 14.24s/it][h264 @ 0x55ed898cc180] mmco: unref short failure
[h264 @ 0x55fc2285af40] mmco: unref short failure
[h264 @ 0x55fc2285af40] mmco: unref short failure
[h264 @ 0x55b883a198c0] mmco: unref short failure
 14%|█▍        | 282/1945 [57:15<8:16:04, 17.90s/it][h264 @ 0x5565d5936ec0] mmco: unref short failure
[h264 @ 0x5565d5936ec0] mmco: unref short failure
 15%|█▍        | 283/1945 [57:20<6:32:41, 14.18s/it][h264 @ 0x55b88fc90b80] mmco: unref short failure
[h264 @ 0x55fc1fc96040] mmco: unref short failure
 15%|█▍        | 284/1945 [57:26<5:20:53, 11.59s/it] 15%|█▍        | 285/1945 [57:31<4:32:36,  9.85s/it][h264 @ 0x55b87f08e4c0] mmco: unref short failure
[h264 @ 0x55b87f08e4c0] mmco: unref short failure
 15%|█▍        | 286/1945 [57:49<5:35:37, 12.14s/it] 15%|█▍        | 287/1945 [57:55<4:42:17, 10.22s/it][h264 @ 0x55ed88e7c4c0] mmco: unref short failure
[h264 @ 0x55ed88e7c4c0] mmco: unref short failure
 15%|█▍        | 288/1945 [58:01<4:12:59,  9.16s/it][h264 @ 0x55fc1defeec0] mmco: unref short failure
[h264 @ 0x5565d7b3cec0] mmco: unref short failure
[h264 @ 0x5565d3e31980] mmco: unref short failure
[h264 @ 0x55ed88e7c040] mmco: unref short failure
[h264 @ 0x55b888d4f3c0] mmco: unref short failure
[h264 @ 0x55b888d4f3c0] mmco: unref short failure
[h264 @ 0x55b8786e0780] mmco: unref short failure
[h264 @ 0x55b8786e0780] mmco: unref short failure
 15%|█▍        | 289/1945 [58:35<7:39:12, 16.64s/it][h264 @ 0x5565cc3705c0] mmco: unref short failure
[h264 @ 0x5565cc3705c0] mmco: unref short failure
[h264 @ 0x55b88fc90d80] mmco: unref short failure
[h264 @ 0x55b88fc90d80] mmco: unref short failure
 15%|█▍        | 290/1945 [59:00<8:41:12, 18.90s/it][h264 @ 0x55b87a97e800] mmco: unref short failure
[h264 @ 0x55fc2e52b280] mmco: unref short failure
 15%|█▍        | 291/1945 [59:05<6:53:42, 15.01s/it] 15%|█▌        | 292/1945 [59:11<5:37:00, 12.23s/it][h264 @ 0x55ed94201700] mmco: unref short failure
[h264 @ 0x55ed94201700] mmco: unref short failure
[h264 @ 0x55ed81770040] mmco: unref short failure
[h264 @ 0x55ed81770040] mmco: unref short failure
 15%|█▌        | 293/1945 [59:17<4:39:07, 10.14s/it][h264 @ 0x55b880170a40] mmco: unref short failure
[h264 @ 0x55ed932f6f40] mmco: unref short failure
[h264 @ 0x55fc2f6f5700] mmco: unref short failure
 15%|█▌        | 294/1945 [59:32<5:23:04, 11.74s/it] 15%|█▌        | 295/1945 [59:38<4:33:36,  9.95s/it][h264 @ 0x55ed8130b880] mmco: unref short failure
[h264 @ 0x55ed8130b880] mmco: unref short failure
[h264 @ 0x55b88a95acc0] mmco: unref short failure
 15%|█▌        | 296/1945 [59:44<4:02:53,  8.84s/it][h264 @ 0x5565ccf4c500] mmco: unref short failure
[h264 @ 0x5565ccf4c500] mmco: unref short failure
[h264 @ 0x5565cb51d480] mmco: unref short failure
[h264 @ 0x5565cb51d480] mmco: unref short failure
[h264 @ 0x55b881f12880] mmco: unref short failure
[h264 @ 0x55b881f12880] mmco: unref short failure
[h264 @ 0x55fc322bcac0] mmco: unref short failure
[h264 @ 0x55fc322bcac0] mmco: unref short failure
[h264 @ 0x5565d7b77040] mmco: unref short failure
[h264 @ 0x55ed924242c0] mmco: unref short failure
[h264 @ 0x55ed924242c0] mmco: unref short failure
 15%|█▌        | 297/1945 [1:00:23<8:07:46, 17.76s/it][h264 @ 0x55fc2d2f4940] mmco: unref short failure
[h264 @ 0x55fc2bc69700] mmco: unref short failure
[h264 @ 0x55b884323900] mmco: unref short failure
[h264 @ 0x55b883a198c0] mmco: unref short failure
[h264 @ 0x55b883a198c0] mmco: unref short failure
[h264 @ 0x5565ccf45a80] mmco: unref short failure
[h264 @ 0x5565ccf45a80] mmco: unref short failure
[h264 @ 0x55fc31c16900] mmco: unref short failure
[h264 @ 0x55fc31c16900] mmco: unref short failure
[h264 @ 0x55fc1d03f980] mmco: unref short failure
[h264 @ 0x55fc1d03f980] mmco: unref short failure
 15%|█▌        | 298/1945 [1:00:46<8:54:06, 19.46s/it] 15%|█▌        | 299/1945 [1:00:52<7:01:03, 15.35s/it]09/07/2024 12:44:50 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/07/2024 12:44:50 - INFO - __main__ -   start running ret%tv validation...
[h264 @ 0x55ed92be7200] mmco: unref short failure
[h264 @ 0x55ed92be7200] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5565c8ae1840] mmco: unref short failure
[h264 @ 0x55ed8329cc40] mmco: unref short failure
[h264 @ 0x55ed8329cc40] mmco: unref short failure
[h264 @ 0x55fc2aa1a400] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5565d0cd2b80] mmco: unref short failure
[h264 @ 0x5565d0cd2b80] mmco: unref short failure
[h264 @ 0x55ed80ebd280] mmco: unref short failure
[h264 @ 0x55ed80ebd280] mmco: unref short failure
[h264 @ 0x55ed80ebd280] mmco: unref short failure
[h264 @ 0x55ed80ebd280] mmco: unref short failure
[h264 @ 0x55ed80ebd280] mmco: unref short failure
[h264 @ 0x55ed80ebd280] mmco: unref short failure
[h264 @ 0x55b87cc87900] mmco: unref short failure
[h264 @ 0x55b87cc87900] mmco: unref short failure
[h264 @ 0x55b888243c40] mmco: unref short failure
[h264 @ 0x55b888243c40] mmco: unref short failure
[h264 @ 0x55b888243c40] mmco: unref short failure
[h264 @ 0x55b888243c40] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  1%|          | 2/221 [00:00<00:33,  6.57it/s][A
  1%|▏         | 3/221 [00:00<01:08,  3.19it/s][A
  2%|▏         | 4/221 [00:00<00:52,  4.13it/s][A
  3%|▎         | 7/221 [00:01<00:25,  8.31it/s][A
  4%|▍         | 9/221 [00:01<00:22,  9.44it/s][A
  5%|▍         | 11/221 [00:01<00:29,  7.11it/s][A
  5%|▌         | 12/221 [00:01<00:32,  6.44it/s][A
  6%|▋         | 14/221 [00:02<00:29,  7.12it/s][A
  7%|▋         | 16/221 [00:02<00:29,  6.98it/s][A
  8%|▊         | 17/221 [00:03<00:52,  3.91it/s][A
  8%|▊         | 18/221 [00:03<00:45,  4.46it/s][A
  9%|▊         | 19/221 [00:03<00:41,  4.89it/s][A
 10%|▉         | 21/221 [00:03<00:28,  7.03it/s][A
 10%|█         | 23/221 [00:03<00:27,  7.16it/s][A
 11%|█▏        | 25/221 [00:03<00:21,  8.99it/s][A
 12%|█▏        | 27/221 [00:04<00:39,  4.91it/s][A
 13%|█▎        | 29/221 [00:04<00:30,  6.23it/s][A
 14%|█▍        | 31/221 [00:05<00:27,  6.89it/s][A
 15%|█▍        | 33/221 [00:05<00:23,  7.97it/s][A
 16%|█▌        | 35/221 [00:05<00:26,  7.01it/s][A
 16%|█▋        | 36/221 [00:05<00:26,  7.04it/s][A
 17%|█▋        | 37/221 [00:06<00:57,  3.21it/s][A
 18%|█▊        | 39/221 [00:06<00:46,  3.92it/s][A
 19%|█▊        | 41/221 [00:07<00:35,  5.02it/s][A
 20%|█▉        | 44/221 [00:08<01:06,  2.67it/s][A
 20%|██        | 45/221 [00:09<00:58,  3.01it/s][A
 21%|██        | 46/221 [00:09<01:01,  2.84it/s][A
 22%|██▏       | 48/221 [00:09<00:43,  4.00it/s][A
 23%|██▎       | 50/221 [00:09<00:32,  5.18it/s][A
 24%|██▍       | 53/221 [00:11<00:47,  3.55it/s][A
 24%|██▍       | 54/221 [00:11<00:51,  3.26it/s][A
 25%|██▌       | 56/221 [00:11<00:39,  4.20it/s][A
 27%|██▋       | 59/221 [00:12<00:50,  3.24it/s][A
 28%|██▊       | 61/221 [00:13<00:43,  3.69it/s][A
 29%|██▊       | 63/221 [00:14<01:02,  2.51it/s][A
 29%|██▉       | 65/221 [00:16<01:18,  1.98it/s][A
 30%|███       | 67/221 [00:16<00:58,  2.62it/s][A
 31%|███       | 68/221 [00:17<01:05,  2.32it/s][A
 32%|███▏      | 70/221 [00:17<01:02,  2.42it/s][A
 32%|███▏      | 71/221 [00:18<00:59,  2.54it/s][A
 33%|███▎      | 72/221 [00:18<01:01,  2.41it/s][A
 33%|███▎      | 74/221 [00:18<00:46,  3.13it/s][A
 34%|███▍      | 76/221 [00:19<00:52,  2.77it/s][A
 35%|███▌      | 78/221 [00:20<00:45,  3.13it/s][A
 36%|███▌      | 80/221 [00:20<00:33,  4.20it/s][A
 37%|███▋      | 81/221 [00:20<00:35,  3.96it/s][A
 37%|███▋      | 82/221 [00:20<00:34,  4.07it/s][A
 38%|███▊      | 85/221 [00:21<00:20,  6.54it/s][A
 39%|███▉      | 86/221 [00:22<00:46,  2.88it/s][A
 39%|███▉      | 87/221 [00:22<00:52,  2.55it/s][A
 40%|███▉      | 88/221 [00:23<00:51,  2.57it/s][A
 40%|████      | 89/221 [00:23<00:51,  2.58it/s][A
 41%|████      | 91/221 [00:23<00:34,  3.75it/s][A
 42%|████▏     | 92/221 [00:23<00:31,  4.14it/s][A
 42%|████▏     | 93/221 [00:24<00:26,  4.83it/s][A
 43%|████▎     | 95/221 [00:26<01:19,  1.58it/s][A
 43%|████▎     | 96/221 [00:26<01:04,  1.93it/s][A
 44%|████▍     | 97/221 [00:28<01:34,  1.32it/s][A
 45%|████▍     | 99/221 [00:28<00:57,  2.12it/s][A
 45%|████▌     | 100/221 [00:29<01:03,  1.91it/s][A
 46%|████▌     | 102/221 [00:29<00:41,  2.89it/s][A
 47%|████▋     | 103/221 [00:29<00:41,  2.82it/s][A
 47%|████▋     | 104/221 [00:30<00:59,  1.95it/s][A
 48%|████▊     | 106/221 [00:30<00:38,  3.00it/s][A
 49%|████▉     | 109/221 [00:30<00:23,  4.82it/s][A
 50%|█████     | 111/221 [00:31<00:21,  5.12it/s][A
 52%|█████▏    | 114/221 [00:31<00:21,  4.98it/s][A
 52%|█████▏    | 115/221 [00:32<00:23,  4.60it/s][A
 52%|█████▏    | 116/221 [00:32<00:20,  5.10it/s][A
 53%|█████▎    | 118/221 [00:32<00:16,  6.41it/s][A
 54%|█████▍    | 120/221 [00:32<00:12,  8.04it/s][A
 55%|█████▌    | 122/221 [00:32<00:11,  8.33it/s][A
 56%|█████▌    | 124/221 [00:33<00:14,  6.83it/s][A
 57%|█████▋    | 125/221 [00:33<00:23,  4.09it/s][A
 57%|█████▋    | 126/221 [00:34<00:23,  4.08it/s][A
 58%|█████▊    | 129/221 [00:34<00:13,  6.65it/s][A
 59%|█████▉    | 131/221 [00:38<01:12,  1.25it/s][A
 60%|█████▉    | 132/221 [00:42<02:06,  1.42s/it][A
 60%|██████    | 133/221 [00:44<02:12,  1.51s/it][A
 61%|██████    | 134/221 [00:45<01:45,  1.22s/it][A
 61%|██████    | 135/221 [00:45<01:23,  1.02it/s][A
 62%|██████▏   | 136/221 [00:45<01:10,  1.21it/s][A
 62%|██████▏   | 137/221 [00:46<00:59,  1.42it/s][A
 62%|██████▏   | 138/221 [00:46<00:55,  1.49it/s][A
 63%|██████▎   | 139/221 [00:47<01:03,  1.30it/s][A
 63%|██████▎   | 140/221 [00:47<00:51,  1.56it/s][A
 64%|██████▍   | 141/221 [00:48<00:56,  1.41it/s][A
 66%|██████▌   | 145/221 [00:48<00:21,  3.52it/s][A
 67%|██████▋   | 147/221 [00:49<00:22,  3.31it/s][A
 67%|██████▋   | 148/221 [00:49<00:19,  3.72it/s][A
 67%|██████▋   | 149/221 [00:50<00:19,  3.76it/s][A
 68%|██████▊   | 150/221 [00:50<00:22,  3.14it/s][A
 69%|██████▉   | 152/221 [00:50<00:17,  3.88it/s][A
 70%|██████▉   | 154/221 [00:51<00:14,  4.48it/s][A
 70%|███████   | 155/221 [00:52<00:29,  2.24it/s][A
 71%|███████   | 156/221 [00:52<00:25,  2.57it/s][A
 71%|███████▏  | 158/221 [00:52<00:16,  3.72it/s][A
 73%|███████▎  | 161/221 [00:53<00:11,  5.44it/s][A
 73%|███████▎  | 162/221 [00:53<00:10,  5.87it/s][A
 74%|███████▍  | 163/221 [00:53<00:10,  5.67it/s][A
 74%|███████▍  | 164/221 [00:53<00:11,  5.13it/s][A
 75%|███████▌  | 166/221 [00:54<00:12,  4.27it/s][A
 76%|███████▌  | 168/221 [00:54<00:10,  5.17it/s][A
 76%|███████▋  | 169/221 [00:56<00:31,  1.64it/s][A
 77%|███████▋  | 170/221 [00:56<00:26,  1.93it/s][A
 77%|███████▋  | 171/221 [00:57<00:22,  2.19it/s][A
 78%|███████▊  | 173/221 [00:57<00:16,  2.89it/s][A
 79%|███████▊  | 174/221 [00:57<00:14,  3.23it/s][A
 79%|███████▉  | 175/221 [00:57<00:12,  3.78it/s][A
 80%|███████▉  | 176/221 [00:58<00:13,  3.46it/s][A
 80%|████████  | 177/221 [00:58<00:13,  3.18it/s][A
 81%|████████▏ | 180/221 [00:58<00:07,  5.33it/s][A
 82%|████████▏ | 181/221 [00:59<00:07,  5.32it/s][A
 82%|████████▏ | 182/221 [01:00<00:18,  2.07it/s][A
 83%|████████▎ | 184/221 [01:00<00:12,  3.02it/s][A
 84%|████████▎ | 185/221 [01:00<00:10,  3.30it/s][A
 85%|████████▍ | 187/221 [01:01<00:07,  4.53it/s][A
 86%|████████▌ | 189/221 [01:01<00:05,  6.11it/s][A
 86%|████████▋ | 191/221 [01:01<00:03,  7.57it/s][A
 87%|████████▋ | 193/221 [01:02<00:05,  5.10it/s][A
 88%|████████▊ | 195/221 [01:02<00:04,  6.19it/s][A
 89%|████████▉ | 197/221 [01:02<00:03,  7.69it/s][A
 90%|█████████ | 199/221 [01:02<00:02,  8.00it/s][A
 91%|█████████ | 201/221 [01:03<00:03,  5.52it/s][A
 92%|█████████▏| 204/221 [01:03<00:02,  6.24it/s][A
 93%|█████████▎| 206/221 [01:03<00:02,  6.59it/s][A
 94%|█████████▎| 207/221 [01:04<00:02,  5.40it/s][A
 95%|█████████▍| 209/221 [01:04<00:02,  5.23it/s][A
 95%|█████████▌| 210/221 [01:04<00:02,  4.67it/s][A
 96%|█████████▌| 212/221 [01:05<00:01,  4.92it/s][A
 97%|█████████▋| 214/221 [01:05<00:01,  6.04it/s][A
 97%|█████████▋| 215/221 [01:07<00:02,  2.23it/s][A
 98%|█████████▊| 216/221 [01:07<00:02,  2.41it/s][A
 98%|█████████▊| 217/221 [01:07<00:01,  2.80it/s][A
 99%|█████████▊| 218/221 [01:07<00:00,  3.01it/s][A 99%|█████████▉| 219/221 [01:07<00:00,  3.23it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.79it/s][A
  1%|          | 2/221 [00:00<00:57,  3.79it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.79it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.79it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.79it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.79it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.79it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.79it/s][A
  4%|▍         | 9/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.79it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.79it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.79it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.79it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.79it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.78it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.78it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.79it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.79it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.79it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.79it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.79it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.79it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.79it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.79it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.79it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.79it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.79it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.79it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.79it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.79it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.79it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.79it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 159/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.79it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.79it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.79it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.79it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.79it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.79it/s][A
 76%|███████▌  | 168/221 [00:44<00:13,  3.79it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.79it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.79it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.79it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.79it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.79it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 178/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.79it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.79it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.79it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.79it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.79it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.79it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.79it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.79it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.79it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.79it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.79it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.79it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.79it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.79it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.79it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.79it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.79it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.79it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.79it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.79it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.79it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.79it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▌| 212/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.79it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.79it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.79it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.79it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.79it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.79it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.79it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.79it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.79it/s][A100%|██████████| 221/221 [00:58<00:00,  3.79it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  1%|          | 2/221 [00:00<00:21, 10.00it/s][A
  2%|▏         | 4/221 [00:00<00:28,  7.55it/s][A
  2%|▏         | 5/221 [00:00<00:29,  7.29it/s][A
  3%|▎         | 7/221 [00:00<00:30,  6.98it/s][A
  4%|▎         | 8/221 [00:01<00:29,  7.20it/s][A
  4%|▍         | 9/221 [00:01<00:28,  7.32it/s][A
  5%|▍         | 10/221 [00:01<00:49,  4.27it/s][A
  5%|▍         | 11/221 [00:01<00:46,  4.53it/s][A
  5%|▌         | 12/221 [00:02<00:42,  4.93it/s][A
  6%|▌         | 13/221 [00:02<00:56,  3.67it/s][A
  6%|▋         | 14/221 [00:02<00:47,  4.36it/s][A
  7%|▋         | 15/221 [00:02<00:44,  4.65it/s][A
  7%|▋         | 16/221 [00:03<00:45,  4.53it/s][A
  8%|▊         | 17/221 [00:03<01:08,  2.97it/s][A
  8%|▊         | 18/221 [00:03<00:57,  3.53it/s][A
  9%|▊         | 19/221 [00:03<00:51,  3.92it/s][A
  9%|▉         | 20/221 [00:04<00:45,  4.44it/s][A
 10%|▉         | 22/221 [00:04<00:35,  5.62it/s][A
 11%|█         | 24/221 [00:04<00:29,  6.73it/s][A
 11%|█▏        | 25/221 [00:04<00:28,  6.92it/s][A
 12%|█▏        | 26/221 [00:04<00:32,  6.09it/s][A
 13%|█▎        | 28/221 [00:05<00:32,  5.91it/s][A
 13%|█▎        | 29/221 [00:05<00:40,  4.79it/s][A
 14%|█▎        | 30/221 [00:06<00:46,  4.09it/s][A
 14%|█▍        | 31/221 [00:06<00:39,  4.80it/s][A
 15%|█▍        | 33/221 [00:06<00:32,  5.74it/s][A
 15%|█▌        | 34/221 [00:06<00:31,  5.94it/s][A
 16%|█▌        | 35/221 [00:06<00:39,  4.65it/s][A
 16%|█▋        | 36/221 [00:07<00:48,  3.84it/s][A
 17%|█▋        | 37/221 [00:07<00:41,  4.42it/s][A
 17%|█▋        | 38/221 [00:07<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:07<00:43,  4.20it/s][A
 18%|█▊        | 40/221 [00:08<00:54,  3.32it/s][A
 19%|█▊        | 41/221 [00:08<00:55,  3.24it/s][A
 19%|█▉        | 42/221 [00:08<00:51,  3.50it/s][A
 19%|█▉        | 43/221 [00:09<00:47,  3.75it/s][A
 20%|█▉        | 44/221 [00:09<00:52,  3.35it/s][A
 20%|██        | 45/221 [00:09<00:54,  3.23it/s][A
 21%|██        | 46/221 [00:10<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:10<00:41,  4.23it/s][A
 22%|██▏       | 48/221 [00:10<00:35,  4.86it/s][A
 22%|██▏       | 49/221 [00:10<00:35,  4.79it/s][A
 23%|██▎       | 50/221 [00:10<00:36,  4.67it/s][A
 23%|██▎       | 51/221 [00:10<00:31,  5.36it/s][A
 24%|██▎       | 52/221 [00:11<00:44,  3.78it/s][A
 24%|██▍       | 54/221 [00:12<00:56,  2.94it/s][A
 25%|██▍       | 55/221 [00:12<00:54,  3.06it/s][A
 25%|██▌       | 56/221 [00:12<00:46,  3.51it/s][A
 26%|██▌       | 57/221 [00:12<00:45,  3.60it/s][A
 26%|██▌       | 58/221 [00:13<00:44,  3.69it/s][A
 27%|██▋       | 59/221 [00:13<00:39,  4.10it/s][A
 27%|██▋       | 60/221 [00:14<01:17,  2.09it/s][A
 28%|██▊       | 61/221 [00:14<01:01,  2.59it/s][A
 28%|██▊       | 62/221 [00:14<00:56,  2.80it/s][A
 29%|██▊       | 63/221 [00:15<00:51,  3.06it/s][A
 29%|██▉       | 64/221 [00:15<01:05,  2.41it/s][A
 30%|██▉       | 66/221 [00:16<01:04,  2.40it/s][A
 30%|███       | 67/221 [00:16<01:04,  2.40it/s][A
 31%|███       | 68/221 [00:17<00:54,  2.82it/s][A
 31%|███       | 69/221 [00:18<01:25,  1.77it/s][A
 32%|███▏      | 70/221 [00:18<01:07,  2.22it/s][A
 32%|███▏      | 71/221 [00:18<00:57,  2.61it/s][A
 33%|███▎      | 72/221 [00:19<00:55,  2.70it/s][A
 33%|███▎      | 73/221 [00:19<00:49,  3.01it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.76it/s][A
 34%|███▍      | 76/221 [00:19<00:35,  4.06it/s][A
 35%|███▍      | 77/221 [00:20<01:05,  2.19it/s][A
 35%|███▌      | 78/221 [00:20<00:52,  2.73it/s][A
 36%|███▌      | 79/221 [00:21<00:55,  2.54it/s][A
 36%|███▌      | 80/221 [00:21<00:47,  2.94it/s][A
 37%|███▋      | 81/221 [00:21<00:38,  3.66it/s][A
 37%|███▋      | 82/221 [00:22<00:39,  3.53it/s][A
 38%|███▊      | 83/221 [00:23<01:06,  2.08it/s][A
 38%|███▊      | 84/221 [00:23<00:52,  2.62it/s][A
 38%|███▊      | 85/221 [00:23<00:41,  3.25it/s][A
 39%|███▉      | 86/221 [00:23<00:34,  3.95it/s][A
 39%|███▉      | 87/221 [00:24<00:50,  2.66it/s][A
 40%|███▉      | 88/221 [00:24<00:50,  2.65it/s][A
 40%|████      | 89/221 [00:24<00:45,  2.91it/s][A
 41%|████      | 90/221 [00:25<00:52,  2.50it/s][A
 41%|████      | 91/221 [00:25<00:40,  3.20it/s][A
 42%|████▏     | 92/221 [00:25<00:39,  3.27it/s][A
 42%|████▏     | 93/221 [00:26<00:48,  2.65it/s][A
 43%|████▎     | 94/221 [00:26<00:49,  2.57it/s][A
 43%|████▎     | 95/221 [00:26<00:43,  2.91it/s][A
 43%|████▎     | 96/221 [00:27<00:58,  2.12it/s][A
 44%|████▍     | 97/221 [00:27<00:46,  2.66it/s][A
 44%|████▍     | 98/221 [00:28<01:09,  1.76it/s][A
 45%|████▌     | 100/221 [00:29<00:45,  2.64it/s][A
 46%|████▌     | 101/221 [00:29<00:40,  2.99it/s][A
 46%|████▌     | 102/221 [00:30<00:55,  2.13it/s][A
 47%|████▋     | 103/221 [00:30<00:44,  2.65it/s][A
 47%|████▋     | 104/221 [00:30<00:35,  3.30it/s][A
 48%|████▊     | 105/221 [00:30<00:39,  2.92it/s][A
 48%|████▊     | 106/221 [00:31<00:44,  2.60it/s][A
 48%|████▊     | 107/221 [00:31<00:36,  3.15it/s][A
 49%|████▉     | 108/221 [00:31<00:35,  3.21it/s][A
 49%|████▉     | 109/221 [00:31<00:28,  3.94it/s][A
 50%|████▉     | 110/221 [00:32<00:29,  3.70it/s][A
 50%|█████     | 111/221 [00:32<00:27,  4.06it/s][A
 51%|█████     | 112/221 [00:32<00:27,  3.92it/s][A
 51%|█████     | 113/221 [00:33<00:38,  2.80it/s][A
 52%|█████▏    | 114/221 [00:33<00:30,  3.56it/s][A
 52%|█████▏    | 115/221 [00:33<00:27,  3.90it/s][A
 52%|█████▏    | 116/221 [00:33<00:26,  3.91it/s][A
 53%|█████▎    | 117/221 [00:34<00:24,  4.17it/s][A
 53%|█████▎    | 118/221 [00:34<00:23,  4.45it/s][A
 54%|█████▍    | 119/221 [00:34<00:23,  4.30it/s][A
 54%|█████▍    | 120/221 [00:34<00:21,  4.61it/s][A
 55%|█████▌    | 122/221 [00:34<00:17,  5.81it/s][A
 56%|█████▌    | 123/221 [00:35<00:17,  5.69it/s][A
 56%|█████▌    | 124/221 [00:35<00:21,  4.53it/s][A
 57%|█████▋    | 125/221 [00:35<00:22,  4.30it/s][A
 57%|█████▋    | 126/221 [00:35<00:20,  4.74it/s][A
 57%|█████▋    | 127/221 [00:36<00:26,  3.56it/s][A
 58%|█████▊    | 128/221 [00:36<00:24,  3.87it/s][A
 59%|█████▉    | 130/221 [00:36<00:17,  5.11it/s][A
 59%|█████▉    | 131/221 [00:36<00:16,  5.43it/s][A
 60%|█████▉    | 132/221 [00:37<00:36,  2.41it/s][A
 60%|██████    | 133/221 [00:38<00:34,  2.57it/s][A
 61%|██████    | 134/221 [00:39<00:50,  1.73it/s][A
 61%|██████    | 135/221 [00:40<00:53,  1.60it/s][A
 62%|██████▏   | 136/221 [00:40<00:42,  1.98it/s][A
 62%|██████▏   | 137/221 [00:40<00:34,  2.44it/s][A
 62%|██████▏   | 138/221 [00:40<00:31,  2.64it/s][A
 63%|██████▎   | 139/221 [00:41<00:32,  2.51it/s][A
 63%|██████▎   | 140/221 [00:41<00:29,  2.76it/s][A
 64%|██████▍   | 141/221 [00:41<00:25,  3.19it/s][A
 64%|██████▍   | 142/221 [00:41<00:20,  3.89it/s][A
 65%|██████▍   | 143/221 [00:42<00:32,  2.37it/s][A
 65%|██████▌   | 144/221 [00:43<00:38,  1.99it/s][A
 66%|██████▌   | 145/221 [00:43<00:29,  2.54it/s][A
 67%|██████▋   | 147/221 [00:43<00:20,  3.57it/s][A
 67%|██████▋   | 148/221 [00:44<00:24,  2.94it/s][A
 67%|██████▋   | 149/221 [00:45<00:36,  1.97it/s][A
 68%|██████▊   | 150/221 [00:45<00:30,  2.29it/s][A
 68%|██████▊   | 151/221 [00:45<00:28,  2.44it/s][A
 69%|██████▉   | 152/221 [00:46<00:31,  2.17it/s][A
 69%|██████▉   | 153/221 [00:46<00:27,  2.49it/s][A
 70%|██████▉   | 154/221 [00:46<00:23,  2.89it/s][A
 70%|███████   | 155/221 [00:47<00:21,  3.11it/s][A
 71%|███████   | 156/221 [00:47<00:20,  3.16it/s][A
 71%|███████   | 157/221 [00:47<00:19,  3.22it/s][A
 71%|███████▏  | 158/221 [00:48<00:18,  3.48it/s][A
 72%|███████▏  | 159/221 [00:48<00:15,  3.88it/s][A
 72%|███████▏  | 160/221 [00:48<00:13,  4.36it/s][A
 73%|███████▎  | 161/221 [00:48<00:14,  4.26it/s][A
 73%|███████▎  | 162/221 [00:48<00:11,  4.92it/s][A
 74%|███████▍  | 163/221 [00:48<00:11,  4.87it/s][A
 74%|███████▍  | 164/221 [00:49<00:10,  5.54it/s][A
 75%|███████▍  | 165/221 [00:49<00:13,  4.03it/s][A
 75%|███████▌  | 166/221 [00:49<00:11,  4.73it/s][A
 76%|███████▌  | 167/221 [00:49<00:09,  5.45it/s][A
 76%|███████▌  | 168/221 [00:49<00:09,  5.53it/s][A
 76%|███████▋  | 169/221 [00:50<00:08,  5.98it/s][A
 77%|███████▋  | 170/221 [00:50<00:10,  4.73it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.56it/s][A
 78%|███████▊  | 172/221 [00:51<00:12,  3.88it/s][A
 78%|███████▊  | 173/221 [00:51<00:16,  2.89it/s][A
 79%|███████▊  | 174/221 [00:52<00:18,  2.58it/s][A
 79%|███████▉  | 175/221 [00:52<00:18,  2.49it/s][A
 80%|███████▉  | 176/221 [00:52<00:15,  2.96it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.65it/s][A
 81%|████████  | 178/221 [00:53<00:14,  2.87it/s][A
 81%|████████  | 179/221 [00:53<00:13,  3.13it/s][A
 81%|████████▏ | 180/221 [00:53<00:11,  3.58it/s][A
 82%|████████▏ | 181/221 [00:53<00:09,  4.26it/s][A
 82%|████████▏ | 182/221 [00:54<00:10,  3.69it/s][A
 83%|████████▎ | 183/221 [00:54<00:09,  4.01it/s][A
 83%|████████▎ | 184/221 [00:54<00:09,  3.80it/s][A
 84%|████████▎ | 185/221 [00:54<00:09,  3.87it/s][A
 84%|████████▍ | 186/221 [00:55<00:13,  2.67it/s][A
 85%|████████▍ | 187/221 [00:55<00:11,  3.05it/s][A
 85%|████████▌ | 188/221 [00:56<00:09,  3.33it/s][A
 86%|████████▌ | 189/221 [00:56<00:08,  3.76it/s][A
 86%|████████▌ | 190/221 [00:56<00:08,  3.61it/s][A
 86%|████████▋ | 191/221 [00:56<00:06,  4.32it/s][A
 87%|████████▋ | 192/221 [00:56<00:07,  4.03it/s][A
 87%|████████▋ | 193/221 [00:57<00:05,  4.78it/s][A
 88%|████████▊ | 194/221 [00:57<00:06,  4.25it/s][A
 88%|████████▊ | 195/221 [00:57<00:05,  4.46it/s][A
 89%|████████▊ | 196/221 [00:57<00:05,  4.74it/s][A
 89%|████████▉ | 197/221 [00:58<00:05,  4.41it/s][A
 90%|████████▉ | 198/221 [00:58<00:04,  5.02it/s][A
 90%|█████████ | 199/221 [00:58<00:04,  4.44it/s][A
 90%|█████████ | 200/221 [00:58<00:05,  4.08it/s][A
 91%|█████████ | 201/221 [00:58<00:04,  4.78it/s][A
 91%|█████████▏| 202/221 [00:59<00:04,  4.46it/s][A
 92%|█████████▏| 203/221 [00:59<00:03,  4.83it/s][A
 92%|█████████▏| 204/221 [00:59<00:04,  4.21it/s][A
 93%|█████████▎| 205/221 [00:59<00:03,  4.93it/s][A
 93%|█████████▎| 206/221 [00:59<00:03,  4.55it/s][A
 94%|█████████▎| 207/221 [01:00<00:02,  5.14it/s][A
 94%|█████████▍| 208/221 [01:00<00:02,  5.08it/s][A
 95%|█████████▍| 209/221 [01:00<00:02,  4.15it/s][A
 95%|█████████▌| 210/221 [01:00<00:02,  4.81it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  3.97it/s][A
 96%|█████████▌| 212/221 [01:01<00:02,  3.69it/s][A
 96%|█████████▋| 213/221 [01:01<00:01,  4.27it/s][A
 97%|█████████▋| 214/221 [01:02<00:03,  2.18it/s][A
 97%|█████████▋| 215/221 [01:02<00:02,  2.77it/s][A
 98%|█████████▊| 216/221 [01:02<00:01,  3.06it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  2.93it/s][A
 99%|█████████▊| 218/221 [01:03<00:00,  3.17it/s][A
 99%|█████████▉| 219/221 [01:03<00:00,  3.46it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.80it/s][A
100%|██████████| 221/221 [01:04<00:00,  4.20it/s][A100%|██████████| 221/221 [01:04<00:00,  3.44it/s]
09/07/2024 12:50:10 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 299--===========

09/07/2024 12:50:10 - INFO - __main__ -   {'area_r1': 18.9, 'area_recall': '18.9/35.7/44.5', 'area_ravg': 33.0}
09/07/2024 12:50:10 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 299--===========

09/07/2024 12:50:10 - INFO - __main__ -   {'forward_r1': 36.5, 'forward_recall': '36.5/63.7/72.4', 'forward_ravg': 57.5}
09/07/2024 12:50:10 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 299--===========

09/07/2024 12:50:10 - INFO - __main__ -   {'area_video_r1': 38.1, 'area_video_recall': '38.1/65.5/76.0', 'area_video_ravg': 59.9}
09/07/2024 12:50:10 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 299=======

09/07/2024 12:50:10 - INFO - __main__ -   {'area_video_r1': 38.1, 'area_video_recall': '38.1/65.5/76.0', 'area_video_ravg': 59.9}
09/07/2024 12:50:10 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 299--===========

09/07/2024 12:50:10 - INFO - __main__ -   {'area_video_r1': 51.0, 'area_video_recall': '51.0/72.7/79.3', 'area_video_ravg': 67.7, 'area_video_back_r1': 50.1, 'area_video_back_recall': '50.1/73.3/81.3', 'area_video_back_ravg': 68.3}
09/07/2024 12:50:10 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 299=======

09/07/2024 12:50:10 - INFO - __main__ -   {'area_video_r1': 51.0, 'area_video_recall': '51.0/72.7/79.3', 'area_video_ravg': 67.7, 'area_video_back_r1': 50.1, 'area_video_back_recall': '50.1/73.3/81.3', 'area_video_back_ravg': 68.3}
09/07/2024 12:50:10 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 299--===========

09/07/2024 12:50:10 - INFO - __main__ -   {'video_r1': 42.3, 'video_recall': '42.3/71.2/80.8', 'video_ravg': 64.7}
09/07/2024 12:50:10 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 299=======

09/07/2024 12:50:10 - INFO - __main__ -   {'video_r1': 42.3, 'video_recall': '42.3/71.2/80.8', 'video_ravg': 64.7}
09/07/2024 12:50:10 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 299--===========

09/07/2024 12:50:10 - INFO - __main__ -   {'video_r1': 51.4, 'video_recall': '51.4/74.9/82.9', 'video_ravg': 69.7}
09/07/2024 12:50:10 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 299=======

09/07/2024 12:50:10 - INFO - __main__ -   {'video_r1': 51.4, 'video_recall': '51.4/74.9/82.9', 'video_ravg': 69.7}
09/07/2024 12:50:47 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.1878232955932617, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.042868178337812424, 'loss_ret%tv%ta--finetune_area/loss_area': 2.6319940090179443, 'loss_ret%tv%ta--finetune_area/total_loss': 5.862685203552246}
[h264 @ 0x5565d7134e40] mmco: unref short failure
[h264 @ 0x5565d7134e40] mmco: unref short failure
[h264 @ 0x5565d7134e40] mmco: unref short failure
[h264 @ 0x5565d7134e40] mmco: unref short failure
 15%|█▌        | 300/1945 [1:06:51<54:12:44, 118.64s/it] 15%|█▌        | 301/1945 [1:06:54<38:17:39, 83.86s/it]  16%|█▌        | 302/1945 [1:06:57<27:14:09, 59.68s/it] 16%|█▌        | 303/1945 [1:07:01<19:33:29, 42.88s/it] 16%|█▌        | 304/1945 [1:07:05<14:14:45, 31.25s/it][h264 @ 0x55fc23ff4100] mmco: unref short failure
 16%|█▌        | 305/1945 [1:07:10<10:38:30, 23.36s/it] 16%|█▌        | 306/1945 [1:07:16<8:15:49, 18.15s/it] [h264 @ 0x55ed8c8f1540] mmco: unref short failure
[h264 @ 0x55ed8c8f1540] mmco: unref short failure
[h264 @ 0x55ed8c8f1540] mmco: unref short failure
[h264 @ 0x55fc1defeec0] mmco: unref short failure
[h264 @ 0x55fc1defeec0] mmco: unref short failure
[h264 @ 0x55fc330c25c0] mmco: unref short failure
 16%|█▌        | 307/1945 [1:07:22<6:36:35, 14.53s/it][h264 @ 0x5565d68cc6c0] mmco: unref short failure
 16%|█▌        | 308/1945 [1:07:29<5:29:14, 12.07s/it][h264 @ 0x55ed92be7200] mmco: unref short failure
[h264 @ 0x55ed92be7200] mmco: unref short failure
 16%|█▌        | 309/1945 [1:07:34<4:35:35, 10.11s/it] 16%|█▌        | 310/1945 [1:07:41<4:11:03,  9.21s/it] 16%|█▌        | 311/1945 [1:07:46<3:37:15,  7.98s/it][h264 @ 0x55b8858941c0] mmco: unref short failure
 16%|█▌        | 312/1945 [1:07:51<3:13:51,  7.12s/it][h264 @ 0x5565cc6b4b40] mmco: unref short failure
[h264 @ 0x5565cc6b4b40] mmco: unref short failure
[h264 @ 0x55fc302cee80] mmco: unref short failure
[h264 @ 0x55ed946be500] mmco: unref short failure
[h264 @ 0x55ed946be500] mmco: unref short failure
 16%|█▌        | 313/1945 [1:07:57<2:59:44,  6.61s/it][h264 @ 0x5565d208b000] mmco: unref short failure
[h264 @ 0x5565d2904f80] mmco: unref short failure
[h264 @ 0x55fc2af8d500] mmco: unref short failure
 16%|█▌        | 314/1945 [1:08:02<2:46:21,  6.12s/it][h264 @ 0x55ed92e82280] mmco: unref short failure
 16%|█▌        | 315/1945 [1:08:08<2:46:58,  6.15s/it][h264 @ 0x5565c71e5980] mmco: unref short failure
 16%|█▌        | 316/1945 [1:08:14<2:43:41,  6.03s/it][h264 @ 0x55ed86a1c580] mmco: unref short failure
[h264 @ 0x55ed86a1c580] mmco: unref short failure
 16%|█▋        | 317/1945 [1:08:29<3:56:06,  8.70s/it][h264 @ 0x55fc342fdc40] mmco: unref short failure
[h264 @ 0x55fc342fdc40] mmco: unref short failure
[h264 @ 0x55fc2b884440] mmco: unref short failure
[h264 @ 0x55fc2b884440] mmco: unref short failure
 16%|█▋        | 318/1945 [1:08:35<3:34:32,  7.91s/it] 16%|█▋        | 319/1945 [1:08:40<3:12:04,  7.09s/it][h264 @ 0x5565cb806500] mmco: unref short failure
[h264 @ 0x5565cb806500] mmco: unref short failure
 16%|█▋        | 320/1945 [1:08:47<3:14:51,  7.19s/it][h264 @ 0x55ed8fc316c0] mmco: unref short failure
 17%|█▋        | 321/1945 [1:08:52<2:57:46,  6.57s/it][h264 @ 0x55b8899995c0] mmco: unref short failure
 17%|█▋        | 322/1945 [1:09:02<3:22:32,  7.49s/it][h264 @ 0x55b87f2a1180] mmco: unref short failure
 17%|█▋        | 323/1945 [1:09:08<3:08:06,  6.96s/it][h264 @ 0x55b88048c000] mmco: unref short failure
[h264 @ 0x5565d99857c0] mmco: unref short failure
[h264 @ 0x5565d99857c0] mmco: unref short failure
[h264 @ 0x55b88e15ef40] mmco: unref short failure
[h264 @ 0x55b88e15ef40] mmco: unref short failure
[h264 @ 0x55b887ec9500] mmco: unref short failure
[h264 @ 0x55b887ec9500] mmco: unref short failure
[h264 @ 0x5565cfe5fb40] mmco: unref short failure
[h264 @ 0x55b879f49d40] mmco: unref short failure
[h264 @ 0x55b88e5aadc0] mmco: unref short failure
[h264 @ 0x55ed83bc8800] mmco: unref short failure
[h264 @ 0x55b88befa8c0] mmco: unref short failure
[h264 @ 0x55fc1f6a7040] mmco: unref short failure
[h264 @ 0x55fc1d0feec0] mmco: unref short failure
[h264 @ 0x55fc1d0feec0] mmco: unref short failure
 17%|█▋        | 324/1945 [1:09:54<8:25:44, 18.72s/it][h264 @ 0x55ed88e1b280] mmco: unref short failure
[h264 @ 0x55b877135800] mmco: unref short failure
[h264 @ 0x55fc216e7940] mmco: unref short failure
[h264 @ 0x55b87f09e180] mmco: unref short failure
[h264 @ 0x55b87f09e180] mmco: unref short failure
[h264 @ 0x5565ce1a89c0] mmco: unref short failure
[h264 @ 0x5565ce1a89c0] mmco: unref short failure
 17%|█▋        | 325/1945 [1:10:14<8:33:18, 19.01s/it][h264 @ 0x55ed93957440] mmco: unref short failure
[h264 @ 0x55fc1d3c1a00] mmco: unref short failure
 17%|█▋        | 326/1945 [1:10:19<6:40:42, 14.85s/it] 17%|█▋        | 327/1945 [1:10:25<5:26:49, 12.12s/it] 17%|█▋        | 328/1945 [1:10:30<4:31:19, 10.07s/it][h264 @ 0x55b887686e80] mmco: unref short failure
[h264 @ 0x55b887686e80] mmco: unref short failure
[h264 @ 0x5565cd797200] mmco: unref short failure
 17%|█▋        | 329/1945 [1:10:35<3:50:32,  8.56s/it][h264 @ 0x55ed93df5f40] mmco: unref short failure
[h264 @ 0x55ed93df5f40] mmco: unref short failure
 17%|█▋        | 330/1945 [1:10:40<3:26:01,  7.65s/it][h264 @ 0x55ed969a9080] mmco: unref short failure
 17%|█▋        | 331/1945 [1:10:46<3:11:06,  7.10s/it][h264 @ 0x55fc1f7aa140] mmco: unref short failure
[h264 @ 0x55fc1fc9f500] mmco: unref short failure
[h264 @ 0x55fc1fc9f500] mmco: unref short failure
[h264 @ 0x5565d2b3f5c0] mmco: unref short failure
[h264 @ 0x5565cf719280] mmco: unref short failure
 17%|█▋        | 332/1945 [1:11:39<9:17:37, 20.74s/it] 17%|█▋        | 333/1945 [1:11:53<8:23:05, 18.73s/it] 17%|█▋        | 334/1945 [1:11:59<6:39:34, 14.88s/it] 17%|█▋        | 335/1945 [1:12:04<5:25:02, 12.11s/it][h264 @ 0x55ed874b5ec0] mmco: unref short failure
[h264 @ 0x55b88030af80] mmco: unref short failure
 17%|█▋        | 336/1945 [1:12:13<4:57:10, 11.08s/it][h264 @ 0x5565c674e440] mmco: unref short failure
[h264 @ 0x5565c674e440] mmco: unref short failure
 17%|█▋        | 337/1945 [1:12:19<4:18:55,  9.66s/it] 17%|█▋        | 338/1945 [1:12:25<3:44:00,  8.36s/it][h264 @ 0x55b878da6980] mmco: unref short failure
[h264 @ 0x55b88c4ee780] mmco: unref short failure
[h264 @ 0x55b88c4ee780] mmco: unref short failure
 17%|█▋        | 339/1945 [1:12:31<3:24:29,  7.64s/it][h264 @ 0x55ed931f9680] mmco: unref short failure
[h264 @ 0x55b88c38d140] mmco: unref short failure
[h264 @ 0x55b88c38d140] mmco: unref short failure
[h264 @ 0x55ed93e3f7c0] mmco: unref short failure
[h264 @ 0x55ed93e3f7c0] mmco: unref short failure
[h264 @ 0x55fc221faa40] mmco: unref short failure
[h264 @ 0x55ed92a41900] mmco: unref short failure
[h264 @ 0x55b882e45840] mmco: unref short failure
[h264 @ 0x55b882e45840] mmco: unref short failure
[h264 @ 0x55b882e45840] mmco: unref short failure
[h264 @ 0x55b882e45840] mmco: unref short failure
[h264 @ 0x55ed88e1b280] mmco: unref short failure
[h264 @ 0x55fc1e33dd80] mmco: unref short failure
[h264 @ 0x55fc1e33dd80] mmco: unref short failure
[h264 @ 0x5565d5148800] mmco: unref short failure
[h264 @ 0x5565d5148800] mmco: unref short failure
 17%|█▋        | 340/1945 [1:13:14<8:13:07, 18.43s/it][h264 @ 0x55b8792f81c0] mmco: unref short failure
[h264 @ 0x55b8792f81c0] mmco: unref short failure
[h264 @ 0x5565d3bf58c0] mmco: unref short failure
[h264 @ 0x5565d3bf58c0] mmco: unref short failure
[h264 @ 0x5565d3bf58c0] mmco: unref short failure
 18%|█▊        | 341/1945 [1:13:28<7:36:50, 17.09s/it][h264 @ 0x55fc29262ec0] mmco: unref short failure
[h264 @ 0x55b88c38d140] mmco: unref short failure
 18%|█▊        | 342/1945 [1:13:34<6:02:57, 13.59s/it] 18%|█▊        | 343/1945 [1:13:39<4:55:30, 11.07s/it][h264 @ 0x55ed8bb93580] mmco: unref short failure
[h264 @ 0x55ed8bb93580] mmco: unref short failure
[h264 @ 0x55fc2f826e00] mmco: unref short failure
 18%|█▊        | 344/1945 [1:13:50<4:55:25, 11.07s/it] 18%|█▊        | 345/1945 [1:13:56<4:13:18,  9.50s/it] 18%|█▊        | 346/1945 [1:14:01<3:40:43,  8.28s/it][h264 @ 0x5565d50cba00] mmco: unref short failure
[h264 @ 0x5565d50cba00] mmco: unref short failure
[h264 @ 0x55ed88e1b280] mmco: unref short failure
[h264 @ 0x55ed88e1b280] mmco: unref short failure
 18%|█▊        | 347/1945 [1:14:07<3:21:15,  7.56s/it][h264 @ 0x5565cec62b40] mmco: unref short failure
[h264 @ 0x5565cec62b40] mmco: unref short failure
[h264 @ 0x55ed9688db80] mmco: unref short failure
[h264 @ 0x55ed9688db80] mmco: unref short failure
[h264 @ 0x55ed884893c0] mmco: unref short failure
[h264 @ 0x5565cc91e780] mmco: unref short failure
[h264 @ 0x55fc2e186a40] mmco: unref short failure
[h264 @ 0x55fc2e186a40] mmco: unref short failure
[h264 @ 0x55b88e535d40] mmco: unref short failure
[h264 @ 0x55b88e535d40] mmco: unref short failure
[h264 @ 0x55fc1d16f700] mmco: unref short failure
[h264 @ 0x55fc1d16f700] mmco: unref short failure
[h264 @ 0x55fc20b66380] mmco: unref short failure
[h264 @ 0x5565c6ebf280] mmco: unref short failure
[h264 @ 0x5565c6ebf280] mmco: unref short failure
 18%|█▊        | 348/1945 [1:14:55<8:41:03, 19.58s/it][h264 @ 0x5565d8260e80] mmco: unref short failure
 18%|█▊        | 349/1945 [1:15:03<7:10:12, 16.17s/it][h264 @ 0x5565c5a46000] mmco: unref short failure
[h264 @ 0x5565c5a46000] mmco: unref short failure
09/07/2024 12:59:06 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.3290133476257324, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04679924249649048, 'loss_ret%tv%ta--finetune_area/loss_area': 2.9557621479034424, 'loss_ret%tv%ta--finetune_area/total_loss': 6.331574440002441}
[h264 @ 0x55fc1e446900] mmco: unref short failure
[h264 @ 0x55fc1e446900] mmco: unref short failure
[h264 @ 0x55fc1d6dfa80] mmco: unref short failure
[h264 @ 0x55fc2132edc0] mmco: unref short failure
[h264 @ 0x55fc2132edc0] mmco: unref short failure
 18%|█▊        | 350/1945 [1:15:11<6:07:41, 13.83s/it] 18%|█▊        | 351/1945 [1:15:17<4:58:40, 11.24s/it][h264 @ 0x55b87efd9a40] mmco: unref short failure
[h264 @ 0x55b87efd9a40] mmco: unref short failure
[h264 @ 0x55b87efd9a40] mmco: unref short failure
[h264 @ 0x55b87efd9a40] mmco: unref short failure
[h264 @ 0x55ed8781f040] mmco: unref short failure
 18%|█▊        | 352/1945 [1:15:28<5:00:55, 11.33s/it][h264 @ 0x5565da119880] mmco: unref short failure
[h264 @ 0x5565dd04d980] mmco: unref short failure
[h264 @ 0x5565dd04d980] mmco: unref short failure
 18%|█▊        | 353/1945 [1:15:34<4:17:14,  9.69s/it][h264 @ 0x55ed863f1d00] mmco: unref short failure
 18%|█▊        | 354/1945 [1:15:39<3:41:25,  8.35s/it][h264 @ 0x55ed87078940] mmco: unref short failure
[h264 @ 0x55ed87078940] mmco: unref short failure
 18%|█▊        | 355/1945 [1:15:45<3:25:05,  7.74s/it][h264 @ 0x55ed85013ac0] mmco: unref short failure
[h264 @ 0x55fc1c288980] mmco: unref short failure
[h264 @ 0x55fc1c288980] mmco: unref short failure
 18%|█▊        | 356/1945 [1:16:30<8:13:32, 18.64s/it][h264 @ 0x55fc23ff4100] mmco: unref short failure
[h264 @ 0x55fc23ff4100] mmco: unref short failure
[h264 @ 0x55fc23ff4100] mmco: unref short failure
[h264 @ 0x55fc23ff4100] mmco: unref short failure
[h264 @ 0x55fc23ff4100] mmco: unref short failure
[h264 @ 0x55fc23ff4100] mmco: unref short failure
[h264 @ 0x5565c801bc80] mmco: unref short failure
[h264 @ 0x55fc1d1041c0] mmco: unref short failure
[h264 @ 0x55fc1d1041c0] mmco: unref short failure
 18%|█▊        | 357/1945 [1:16:42<7:25:43, 16.84s/it][h264 @ 0x55b882572ec0] mmco: unref short failure
[h264 @ 0x55ed93e16000] mmco: unref short failure
[h264 @ 0x55ed93e16000] mmco: unref short failure
 18%|█▊        | 358/1945 [1:16:47<5:53:43, 13.37s/it][h264 @ 0x55fc22434240] mmco: unref short failure
[h264 @ 0x55fc22434240] mmco: unref short failure
[h264 @ 0x55ed809c1680] mmco: unref short failure
[h264 @ 0x55ed8c8f1540] mmco: unref short failure
 18%|█▊        | 359/1945 [1:16:55<5:09:24, 11.71s/it][h264 @ 0x5565d7724840] mmco: unref short failure
[h264 @ 0x55ed92a41900] mmco: unref short failure
[h264 @ 0x55ed92a41900] mmco: unref short failure
 19%|█▊        | 360/1945 [1:17:03<4:37:27, 10.50s/it] 19%|█▊        | 361/1945 [1:17:09<4:04:19,  9.25s/it][h264 @ 0x55fc34fa0600] mmco: unref short failure
[h264 @ 0x55fc34fa0600] mmco: unref short failure
 19%|█▊        | 362/1945 [1:17:15<3:35:49,  8.18s/it][h264 @ 0x55fc3187c780] mmco: unref short failure
[h264 @ 0x55fc3187c780] mmco: unref short failure
 19%|█▊        | 363/1945 [1:17:24<3:43:58,  8.49s/it][h264 @ 0x5565c770c100] mmco: unref short failure
[h264 @ 0x5565c770c100] mmco: unref short failure
[h264 @ 0x5565c770c100] mmco: unref short failure
[h264 @ 0x5565c770c100] mmco: unref short failure
[h264 @ 0x55b87a0b7280] mmco: unref short failure
[h264 @ 0x55b87a9849c0] mmco: unref short failure
[h264 @ 0x55b87a9849c0] mmco: unref short failure
[h264 @ 0x55b87ac59ac0] mmco: unref short failure
[h264 @ 0x5565cd3b6240] mmco: unref short failure
 19%|█▊        | 364/1945 [1:18:05<7:57:10, 18.11s/it][h264 @ 0x55ed8b82fd40] mmco: unref short failure
[h264 @ 0x55ed8b82fd40] mmco: unref short failure
 19%|█▉        | 365/1945 [1:18:23<7:56:34, 18.10s/it] 19%|█▉        | 366/1945 [1:18:29<6:20:21, 14.45s/it][h264 @ 0x5565da6f9a00] mmco: unref short failure
[h264 @ 0x5565da6f9a00] mmco: unref short failure
 19%|█▉        | 367/1945 [1:18:36<5:24:53, 12.35s/it] 19%|█▉        | 368/1945 [1:18:42<4:33:01, 10.39s/it][h264 @ 0x5565d3b77b00] mmco: unref short failure
 19%|█▉        | 369/1945 [1:18:49<4:04:05,  9.29s/it][h264 @ 0x55ed809c1680] mmco: unref short failure
[h264 @ 0x55fc20af28c0] mmco: unref short failure
[h264 @ 0x55fc20af28c0] mmco: unref short failure
[h264 @ 0x55b87a0346c0] mmco: unref short failure
[h264 @ 0x55b87a0346c0] mmco: unref short failure
 19%|█▉        | 370/1945 [1:18:55<3:37:04,  8.27s/it] 19%|█▉        | 371/1945 [1:19:03<3:36:10,  8.24s/it][h264 @ 0x55fc34fa0600] mmco: unref short failure
[h264 @ 0x55fc34fa0600] mmco: unref short failure
[h264 @ 0x55b88d2c7d00] mmco: unref short failure
[h264 @ 0x55fc20af28c0] mmco: unref short failure
[h264 @ 0x55ed92a41900] mmco: unref short failure
[h264 @ 0x55ed92a41900] mmco: unref short failure
[h264 @ 0x55fc261a4740] mmco: unref short failure
[h264 @ 0x55fc261a4740] mmco: unref short failure
 19%|█▉        | 372/1945 [1:19:42<7:39:13, 17.52s/it][h264 @ 0x5565d8e087c0] mmco: unref short failure
[h264 @ 0x5565d8e087c0] mmco: unref short failure
[h264 @ 0x55fc1fe1ad40] mmco: unref short failure
[h264 @ 0x55fc1fe1ad40] mmco: unref short failure
[h264 @ 0x55fc1fe1ad40] mmco: unref short failure
[h264 @ 0x55fc1fe1ad40] mmco: unref short failure
 19%|█▉        | 373/1945 [1:20:06<8:28:49, 19.42s/it][h264 @ 0x55fc1f2cd6c0] mmco: unref short failure
[h264 @ 0x55fc1f2cd6c0] mmco: unref short failure
[h264 @ 0x55ed82aa5dc0] mmco: unref short failure
[h264 @ 0x55ed82aa5dc0] mmco: unref short failure
 19%|█▉        | 374/1945 [1:20:12<6:41:17, 15.33s/it][h264 @ 0x5565ceb84740] mmco: unref short failure
[h264 @ 0x55ed97744b80] mmco: unref short failure
 19%|█▉        | 375/1945 [1:20:21<5:55:47, 13.60s/it][h264 @ 0x55fc1e4f31c0] mmco: unref short failure
[h264 @ 0x55fc1e4f31c0] mmco: unref short failure
[h264 @ 0x55b8842b41c0] mmco: unref short failure
[h264 @ 0x55b8842b41c0] mmco: unref short failure
 19%|█▉        | 376/1945 [1:20:26<4:48:31, 11.03s/it][h264 @ 0x5565d8260e80] mmco: unref short failure
[h264 @ 0x5565d308a200] mmco: unref short failure
[h264 @ 0x5565d308a200] mmco: unref short failure
 19%|█▉        | 377/1945 [1:20:32<4:08:14,  9.50s/it] 19%|█▉        | 378/1945 [1:20:37<3:33:03,  8.16s/it][h264 @ 0x55b87dc6c080] mmco: unref short failure
[h264 @ 0x55b87dc6c080] mmco: unref short failure
[h264 @ 0x55fc298e8840] mmco: unref short failure
[h264 @ 0x55fc298e8840] mmco: unref short failure
[h264 @ 0x5565c77e61c0] mmco: unref short failure
[h264 @ 0x5565c77e61c0] mmco: unref short failure
 19%|█▉        | 379/1945 [1:20:43<3:14:32,  7.45s/it][h264 @ 0x55b87e3b9100] mmco: unref short failure
[h264 @ 0x55b87e3b9100] mmco: unref short failure
[h264 @ 0x55ed9468ca00] mmco: unref short failure
[h264 @ 0x55ed9468ca00] mmco: unref short failure
[h264 @ 0x5565c60111c0] mmco: unref short failure
[h264 @ 0x5565c60111c0] mmco: unref short failure
[h264 @ 0x55fc211ce100] mmco: unref short failure
[h264 @ 0x55fc211ce100] mmco: unref short failure
[h264 @ 0x55fc2d80dc80] mmco: unref short failure
[h264 @ 0x55b87e598cc0] mmco: unref short failure
[h264 @ 0x55b87e598cc0] mmco: unref short failure
[h264 @ 0x55b87e598cc0] mmco: unref short failure
[h264 @ 0x55b87e598cc0] mmco: unref short failure
[h264 @ 0x55b87a0346c0] mmco: unref short failure
 20%|█▉        | 380/1945 [1:21:19<6:54:24, 15.89s/it][h264 @ 0x55fc2e3d8800] mmco: unref short failure
[h264 @ 0x55ed93ddef40] mmco: unref short failure
[h264 @ 0x55ed93ddef40] mmco: unref short failure
[h264 @ 0x55b882bf0980] mmco: unref short failure
[h264 @ 0x55ed94a2adc0] mmco: unref short failure
[h264 @ 0x55fc2f1ff340] mmco: unref short failure
 20%|█▉        | 381/1945 [1:21:40<7:37:53, 17.57s/it] 20%|█▉        | 382/1945 [1:21:44<5:50:09, 13.44s/it] 20%|█▉        | 383/1945 [1:21:47<4:26:31, 10.24s/it] 20%|█▉        | 384/1945 [1:21:49<3:26:51,  7.95s/it] 20%|█▉        | 385/1945 [1:21:52<2:44:07,  6.31s/it] 20%|█▉        | 386/1945 [1:21:54<2:14:08,  5.16s/it] 20%|█▉        | 387/1945 [1:21:57<1:53:03,  4.35s/it] 20%|█▉        | 388/1945 [1:22:00<1:43:17,  3.98s/it]/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55ee04006600] mmco: unref short failure
[h264 @ 0x55ee03e97a40] mmco: unref short failure
[h264 @ 0x55ee03e97a40] mmco: unref short failure
[h264 @ 0x55ee03db8240] mmco: unref short failure
[h264 @ 0x55ee03db8240] mmco: unref short failure
[h264 @ 0x556647329fc0] mmco: unref short failure
[h264 @ 0x55b90aea5a40] mmco: unref short failure
[h264 @ 0x55b90adebbc0] mmco: unref short failure
[h264 @ 0x55b90adebbc0] mmco: unref short failure
[h264 @ 0x556647e95780] mmco: unref short failure
[h264 @ 0x556647e95780] mmco: unref short failure
[h264 @ 0x55b90a8f6fc0] mmco: unref short failure
[h264 @ 0x55b90a8f6fc0] mmco: unref short failure
[h264 @ 0x55fc8d188380] mmco: unref short failure
[h264 @ 0x55fc8d52dcc0] mmco: unref short failure
[h264 @ 0x55fc8d52dcc0] mmco: unref short failure
[h264 @ 0x55fc8d52dcc0] mmco: unref short failure
[h264 @ 0x55fc8d52dcc0] mmco: unref short failure
[h264 @ 0x55fc8d52dcc0] mmco: unref short failure
[h264 @ 0x55fc8d52dcc0] mmco: unref short failure
[h264 @ 0x55b90b181900] mmco: unref short failure
[h264 @ 0x55b90b181900] mmco: unref short failure
[h264 @ 0x55ee2fb1a7c0] mmco: unref short failure
[h264 @ 0x5566748527c0] mmco: unref short failure
[h264 @ 0x5566748527c0] mmco: unref short failure
[h264 @ 0x5566778dadc0] mmco: unref short failure
[h264 @ 0x55fccadd0100] mmco: unref short failure
[h264 @ 0x55fccadd0100] mmco: unref short failure
 20%|██        | 389/1945 [1:23:56<16:14:26, 37.57s/it] 20%|██        | 390/1945 [1:24:02<12:07:43, 28.08s/it][h264 @ 0x55fccb92a500] mmco: unref short failure
 20%|██        | 391/1945 [1:24:07<9:13:57, 21.39s/it]  20%|██        | 392/1945 [1:24:13<7:12:15, 16.70s/it][h264 @ 0x55667741b700] mmco: unref short failure
[h264 @ 0x55fc8d406440] mmco: unref short failure
[h264 @ 0x55fc8d406440] mmco: unref short failure
 20%|██        | 393/1945 [1:24:19<5:44:31, 13.32s/it][h264 @ 0x55ee2f6c95c0] mmco: unref short failure
 20%|██        | 394/1945 [1:24:24<4:42:54, 10.94s/it][h264 @ 0x556678c0b5c0] mmco: unref short failure
[h264 @ 0x556678c0b5c0] mmco: unref short failure
 20%|██        | 395/1945 [1:24:30<4:04:22,  9.46s/it][h264 @ 0x55fccd360680] mmco: unref short failure
[h264 @ 0x55ee041bc280] mmco: unref short failure
 20%|██        | 396/1945 [1:24:35<3:29:57,  8.13s/it][h264 @ 0x55b8edcdfdc0] mmco: unref short failure
[h264 @ 0x55b8edcdfdc0] mmco: unref short failure
[h264 @ 0x556648031500] mmco: unref short failure
[h264 @ 0x556648031500] mmco: unref short failure
[h264 @ 0x55b8ebc7c480] mmco: unref short failure
[h264 @ 0x55b8ebc7c480] mmco: unref short failure
[h264 @ 0x556674de7180] mmco: unref short failure
[h264 @ 0x556674de7180] mmco: unref short failure
[h264 @ 0x55b8ee3cdb00] mmco: unref short failure
[h264 @ 0x55fccabe1400] mmco: unref short failure
[h264 @ 0x55fc8d4aaa80] mmco: unref short failure
[h264 @ 0x55fc8d4aaa80] mmco: unref short failure
 20%|██        | 397/1945 [1:25:34<10:05:03, 23.45s/it] 20%|██        | 398/1945 [1:25:40<7:50:07, 18.23s/it] [h264 @ 0x55ee33d9b800] mmco: unref short failure
[h264 @ 0x55ee33d9b800] mmco: unref short failure
 21%|██        | 399/1945 [1:25:47<6:18:39, 14.70s/it]09/07/2024 13:09:46 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.2830770015716553, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04575137048959732, 'loss_ret%tv%ta--finetune_area/loss_area': 2.8849475383758545, 'loss_ret%tv%ta--finetune_area/total_loss': 6.213775634765625}
 21%|██        | 400/1945 [1:25:52<5:07:15, 11.93s/it][h264 @ 0x55b90c491f00] mmco: unref short failure
[h264 @ 0x55b90c121b80] mmco: unref short failure
[h264 @ 0x55b90c121b80] mmco: unref short failure
[h264 @ 0x55ee35b3ac40] mmco: unref short failure
 21%|██        | 401/1945 [1:25:59<4:24:08, 10.26s/it][h264 @ 0x55ee371c0380] mmco: unref short failure
[h264 @ 0x55ee371c0380] mmco: unref short failure
 21%|██        | 402/1945 [1:26:04<3:44:42,  8.74s/it][h264 @ 0x55fcd115b1c0] mmco: unref short failure
[h264 @ 0x55fcd115b1c0] mmco: unref short failure
 21%|██        | 403/1945 [1:26:12<3:38:27,  8.50s/it][h264 @ 0x556675002640] mmco: unref short failure
 21%|██        | 404/1945 [1:26:17<3:14:34,  7.58s/it][h264 @ 0x556677404a80] mmco: unref short failure
[h264 @ 0x556677404a80] mmco: unref short failure
[h264 @ 0x55b8ee7d6a40] mmco: unref short failure
[h264 @ 0x55fccff5dac0] mmco: unref short failure
[h264 @ 0x55fcce6d1bc0] mmco: unref short failure
[h264 @ 0x55ee2f921340] mmco: unref short failure
[h264 @ 0x55ee2f921340] mmco: unref short failure
[h264 @ 0x556646de9380] mmco: unref short failure
[h264 @ 0x55fccc1a4f80] mmco: unref short failure
[h264 @ 0x55fccbd67a00] mmco: unref short failure
[h264 @ 0x55fccbd67a00] mmco: unref short failure
[h264 @ 0x55b8ee76c900] mmco: unref short failure
[h264 @ 0x55b8ee76c900] mmco: unref short failure
[h264 @ 0x55ee33438040] mmco: unref short failure
 21%|██        | 405/1945 [1:27:18<10:03:10, 23.50s/it][h264 @ 0x55fccf0fcec0] mmco: unref short failure
[h264 @ 0x55fccf0fcec0] mmco: unref short failure
 21%|██        | 406/1945 [1:27:23<7:44:51, 18.12s/it] [h264 @ 0x556677757a80] mmco: unref short failure
 21%|██        | 407/1945 [1:27:29<6:08:36, 14.38s/it] 21%|██        | 408/1945 [1:27:35<5:00:18, 11.72s/it] 21%|██        | 409/1945 [1:27:40<4:13:05,  9.89s/it] 21%|██        | 410/1945 [1:27:46<3:38:51,  8.55s/it] 21%|██        | 411/1945 [1:27:51<3:14:36,  7.61s/it] 21%|██        | 412/1945 [1:27:56<2:57:43,  6.96s/it][h264 @ 0x55b8eb13f240] mmco: unref short failure
[h264 @ 0x55b8eb13f240] mmco: unref short failure
[h264 @ 0x55667d9f2000] mmco: unref short failure
[h264 @ 0x55667674bd00] mmco: unref short failure
[h264 @ 0x55667674bd00] mmco: unref short failure
[h264 @ 0x55ee33fcfa00] mmco: unref short failure
[h264 @ 0x55ee33fcfa00] mmco: unref short failure
[h264 @ 0x55ee3406a680] mmco: unref short failure
 21%|██        | 413/1945 [1:28:52<9:09:07, 21.51s/it][h264 @ 0x55667c3820c0] mmco: unref short failure
[h264 @ 0x556673f7b700] mmco: unref short failure
[h264 @ 0x556679b54b40] mmco: unref short failure
[h264 @ 0x556679b54b40] mmco: unref short failure
 21%|██▏       | 414/1945 [1:28:58<7:09:21, 16.83s/it][h264 @ 0x55ee38601640] mmco: unref short failure
[h264 @ 0x55ee38601640] mmco: unref short failure
 21%|██▏       | 415/1945 [1:29:04<5:45:45, 13.56s/it] 21%|██▏       | 416/1945 [1:29:09<4:43:47, 11.14s/it] 21%|██▏       | 417/1945 [1:29:14<3:58:13,  9.35s/it][h264 @ 0x55fcca30a9c0] mmco: unref short failure
[h264 @ 0x55fcca30a9c0] mmco: unref short failure
 21%|██▏       | 418/1945 [1:29:20<3:28:51,  8.21s/it] 22%|██▏       | 419/1945 [1:29:26<3:10:09,  7.48s/it][h264 @ 0x55b8f1512580] mmco: unref short failure
 22%|██▏       | 420/1945 [1:29:31<2:55:59,  6.92s/it][h264 @ 0x55b9295e6c80] mmco: unref short failure
[h264 @ 0x55b9295e6c80] mmco: unref short failure
[h264 @ 0x55b9295e6c80] mmco: unref short failure
[h264 @ 0x55b9295e6c80] mmco: unref short failure
[h264 @ 0x55b9295e6c80] mmco: unref short failure
[h264 @ 0x55b9295e6c80] mmco: unref short failure
[h264 @ 0x55fccf211c80] mmco: unref short failure
[h264 @ 0x55fccf211c80] mmco: unref short failure
[h264 @ 0x55ee3843bd40] mmco: unref short failure
[h264 @ 0x55ee3843bd40] mmco: unref short failure
[h264 @ 0x55ee2ff68c80] mmco: unref short failure
[h264 @ 0x5566761afb00] mmco: unref short failure
[h264 @ 0x5566761afb00] mmco: unref short failure
[h264 @ 0x55667d78fdc0] mmco: unref short failure
[h264 @ 0x55667d78fdc0] mmco: unref short failure
[h264 @ 0x55ee35471540] mmco: unref short failure
[h264 @ 0x55ee35471540] mmco: unref short failure
[h264 @ 0x55ee04809e80] mmco: unref short failure
 22%|██▏       | 421/1945 [1:30:31<9:35:13, 22.65s/it][h264 @ 0x55ee31361b80] mmco: unref short failure
 22%|██▏       | 422/1945 [1:30:36<7:24:58, 17.53s/it][h264 @ 0x55667583cbc0] mmco: unref short failure
 22%|██▏       | 423/1945 [1:30:42<5:51:22, 13.85s/it] 22%|██▏       | 424/1945 [1:30:47<4:49:27, 11.42s/it][h264 @ 0x556676836040] mmco: unref short failure
[h264 @ 0x556676836040] mmco: unref short failure
[h264 @ 0x55b9289818c0] mmco: unref short failure
 22%|██▏       | 425/1945 [1:30:53<4:06:44,  9.74s/it][h264 @ 0x55ee35d78840] mmco: unref short failure
[h264 @ 0x55ee35d78840] mmco: unref short failure
[h264 @ 0x55667a5c6b40] mmco: unref short failure
[h264 @ 0x55fcce6d1e00] mmco: unref short failure
[h264 @ 0x55fcce6d1e00] mmco: unref short failure
 22%|██▏       | 426/1945 [1:30:59<3:34:24,  8.47s/it] 22%|██▏       | 427/1945 [1:31:04<3:07:59,  7.43s/it] 22%|██▏       | 428/1945 [1:31:10<2:56:16,  6.97s/it][h264 @ 0x55fcca500400] mmco: unref short failure
[h264 @ 0x55fc8cd6c100] mmco: unref short failure
[h264 @ 0x55fccc7e0d80] mmco: unref short failure
[h264 @ 0x55fccc7e0d80] mmco: unref short failure
[h264 @ 0x55ee36ea0b00] mmco: unref short failure
[h264 @ 0x55b8f19b5f80] mmco: unref short failure
[h264 @ 0x55b8f19b5f80] mmco: unref short failure
[h264 @ 0x55fccd8ba300] mmco: unref short failure
[h264 @ 0x55ee34d48e40] mmco: unref short failure
[h264 @ 0x55b8efc83d40] mmco: unref short failure
[h264 @ 0x55ee30cc3a00] mmco: unref short failure
[h264 @ 0x55ee30cc3a00] mmco: unref short failure
 22%|██▏       | 429/1945 [1:32:10<9:40:09, 22.96s/it] 22%|██▏       | 430/1945 [1:32:15<7:28:02, 17.74s/it] 22%|██▏       | 431/1945 [1:32:22<6:01:46, 14.34s/it][h264 @ 0x55ee04759e00] mmco: unref short failure
 22%|██▏       | 432/1945 [1:32:27<4:53:10, 11.63s/it] 22%|██▏       | 433/1945 [1:32:33<4:08:42,  9.87s/it] 22%|██▏       | 434/1945 [1:32:38<3:33:46,  8.49s/it][h264 @ 0x55fccaf599c0] mmco: unref short failure
[h264 @ 0x55667555fdc0] mmco: unref short failure
[h264 @ 0x55667555fdc0] mmco: unref short failure
 22%|██▏       | 435/1945 [1:32:43<3:09:47,  7.54s/it] 22%|██▏       | 436/1945 [1:32:49<2:52:47,  6.87s/it][h264 @ 0x55fcd4865000] mmco: unref short failure
[h264 @ 0x55fcd4865000] mmco: unref short failure
[h264 @ 0x55ee39de8240] mmco: unref short failure
[h264 @ 0x55ee39de8240] mmco: unref short failure
[h264 @ 0x55ee394df740] mmco: unref short failure
[h264 @ 0x55fcd27ef480] mmco: unref short failure
[h264 @ 0x55fcd27ef480] mmco: unref short failure
[h264 @ 0x55667412fa40] mmco: unref short failure
[h264 @ 0x55667412fa40] mmco: unref short failure
[h264 @ 0x55ee39aa9ec0] mmco: unref short failure
[h264 @ 0x55ee39aa9ec0] mmco: unref short failure
[h264 @ 0x55b8f1e543c0] mmco: unref short failure
[h264 @ 0x55ee3281c8c0] mmco: unref short failure
[h264 @ 0x55ee3281c8c0] mmco: unref short failure
[h264 @ 0x55667c17a080] mmco: unref short failure
[h264 @ 0x55667c17a080] mmco: unref short failure
[h264 @ 0x55ee3c2266c0] mmco: unref short failure
[h264 @ 0x55ee3c2266c0] mmco: unref short failure
 22%|██▏       | 437/1945 [1:33:56<10:26:02, 24.91s/it] 23%|██▎       | 438/1945 [1:34:01<8:00:45, 19.14s/it]  23%|██▎       | 439/1945 [1:34:07<6:20:25, 15.16s/it][h264 @ 0x55b8eb799ec0] mmco: unref short failure
[h264 @ 0x55b929548c00] mmco: unref short failure
 23%|██▎       | 440/1945 [1:34:12<5:04:52, 12.15s/it] 23%|██▎       | 441/1945 [1:34:18<4:17:15, 10.26s/it] 23%|██▎       | 442/1945 [1:34:24<3:41:29,  8.84s/it][h264 @ 0x55ee37428140] mmco: unref short failure
[h264 @ 0x55ee37428140] mmco: unref short failure
 23%|██▎       | 443/1945 [1:34:30<3:22:31,  8.09s/it][h264 @ 0x55b8f02f4600] mmco: unref short failure
[h264 @ 0x55b8f02f4600] mmco: unref short failure
[h264 @ 0x55fcd14591c0] mmco: unref short failure
[h264 @ 0x55fcd14591c0] mmco: unref short failure
[h264 @ 0x55b92c7b3bc0] mmco: unref short failure
[h264 @ 0x55b92c7b3bc0] mmco: unref short failure
[h264 @ 0x55b92c7b3bc0] mmco: unref short failure
[h264 @ 0x55b92c7b3bc0] mmco: unref short failure
[h264 @ 0x55b92c7b3bc0] mmco: unref short failure
[h264 @ 0x55b92c7b3bc0] mmco: unref short failure
[h264 @ 0x55fcd798df00] mmco: unref short failure
 23%|██▎       | 444/1945 [1:34:36<3:07:34,  7.50s/it][h264 @ 0x556676a3dac0] mmco: unref short failure
[h264 @ 0x55fcd1306a80] mmco: unref short failure
[h264 @ 0x55fcd1306a80] mmco: unref short failure
[h264 @ 0x55b8ea588140] mmco: unref short failure
[h264 @ 0x55fcd1a20940] mmco: unref short failure
[h264 @ 0x55fcd1a20940] mmco: unref short failure
 23%|██▎       | 445/1945 [1:35:33<9:15:57, 22.24s/it] 23%|██▎       | 446/1945 [1:35:39<7:11:54, 17.29s/it] 23%|██▎       | 447/1945 [1:35:45<5:48:15, 13.95s/it] 23%|██▎       | 448/1945 [1:35:50<4:43:20, 11.36s/it][h264 @ 0x55b92ce57880] mmco: unref short failure
[h264 @ 0x55b92ce57880] mmco: unref short failure
 23%|██▎       | 449/1945 [1:35:56<3:59:29,  9.60s/it][h264 @ 0x55667c392640] mmco: unref short failure
[h264 @ 0x55667c392640] mmco: unref short failure
09/07/2024 13:19:56 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.3868355751037598, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04434254392981529, 'loss_ret%tv%ta--finetune_area/loss_area': 3.205491542816162, 'loss_ret%tv%ta--finetune_area/total_loss': 6.636669635772705}
[h264 @ 0x55ee3bafbec0] mmco: unref short failure
[h264 @ 0x55ee3bafbec0] mmco: unref short failure
 23%|██▎       | 450/1945 [1:36:01<3:26:59,  8.31s/it][h264 @ 0x55ee33169440] mmco: unref short failure
[h264 @ 0x55ee33169440] mmco: unref short failure
 23%|██▎       | 451/1945 [1:36:07<3:09:12,  7.60s/it] 23%|██▎       | 452/1945 [1:36:13<2:55:01,  7.03s/it][h264 @ 0x55fcd582d7c0] mmco: unref short failure
[h264 @ 0x55fcd582d7c0] mmco: unref short failure
[h264 @ 0x55fcd7e1a680] mmco: unref short failure
[h264 @ 0x55fcd6cec200] mmco: unref short failure
[h264 @ 0x55fcd6cec200] mmco: unref short failure
[h264 @ 0x55b92c276f40] mmco: unref short failure
[h264 @ 0x55b92c276f40] mmco: unref short failure
[h264 @ 0x55b92c276f40] mmco: unref short failure
[h264 @ 0x55b92c276f40] mmco: unref short failure
[h264 @ 0x55b92c276f40] mmco: unref short failure
[h264 @ 0x55b92c276f40] mmco: unref short failure
[h264 @ 0x55b92c276f40] mmco: unref short failure
[h264 @ 0x55b92c276f40] mmco: unref short failure
[h264 @ 0x55b92c276f40] mmco: unref short failure
[h264 @ 0x55b92c276f40] mmco: unref short failure
[h264 @ 0x55fcd7613300] mmco: unref short failure
[h264 @ 0x55fcd44fe7c0] mmco: unref short failure
[h264 @ 0x55fcd44fe7c0] mmco: unref short failure
[h264 @ 0x55b8efc21340] mmco: unref short failure
[h264 @ 0x55b8efd7ab80] mmco: unref short failure
[h264 @ 0x55b8efd7ab80] mmco: unref short failure
[h264 @ 0x556677bb03c0] mmco: unref short failure
[h264 @ 0x5566757c7240] mmco: unref short failure
[h264 @ 0x55ee3e66cd40] mmco: unref short failure
[h264 @ 0x55ee3e66cd40] mmco: unref short failure
[h264 @ 0x55fcd0224c00] mmco: unref short failure
 23%|██▎       | 453/1945 [1:37:20<10:25:52, 25.17s/it][h264 @ 0x55667f017a40] mmco: unref short failure
[h264 @ 0x55667980f1c0] mmco: unref short failure
[h264 @ 0x55667980f1c0] mmco: unref short failure
 23%|██▎       | 454/1945 [1:37:26<8:03:23, 19.45s/it] [h264 @ 0x55b90a7d91c0] mmco: unref short failure
not have audios 7wavFXW3AFw.7
 23%|██▎       | 455/1945 [1:37:32<6:20:12, 15.31s/it][h264 @ 0x55ee36edd440] mmco: unref short failure
 23%|██▎       | 456/1945 [1:37:37<5:02:33, 12.19s/it] 23%|██▎       | 457/1945 [1:37:42<4:10:30, 10.10s/it] 24%|██▎       | 458/1945 [1:37:48<3:38:17,  8.81s/it] 24%|██▎       | 459/1945 [1:37:54<3:20:03,  8.08s/it] 24%|██▎       | 460/1945 [1:38:00<3:01:16,  7.32s/it][h264 @ 0x55ee386605c0] mmco: unref short failure
[h264 @ 0x55ee386605c0] mmco: unref short failure
[h264 @ 0x556680a1dd00] mmco: unref short failure
[h264 @ 0x55ee3c4611c0] mmco: unref short failure
[h264 @ 0x55ee3c4611c0] mmco: unref short failure
[h264 @ 0x55ee3c4611c0] mmco: unref short failure
[h264 @ 0x55ee3c4611c0] mmco: unref short failure
[h264 @ 0x55ee3c4611c0] mmco: unref short failure
[h264 @ 0x55ee3401fc80] mmco: unref short failure
[h264 @ 0x55ee3401fc80] mmco: unref short failure
[h264 @ 0x55ee34fb0cc0] mmco: unref short failure
[h264 @ 0x55ee34fb0cc0] mmco: unref short failure
[h264 @ 0x55b92d3382c0] mmco: unref short failure
[h264 @ 0x55b8f080c900] mmco: unref short failure
[h264 @ 0x55b8f080c900] mmco: unref short failure
[h264 @ 0x55fcd2b90140] mmco: unref short failure
 24%|██▎       | 461/1945 [1:39:01<9:44:48, 23.64s/it][h264 @ 0x55667fd489c0] mmco: unref short failure
[h264 @ 0x55667fd489c0] mmco: unref short failure
[h264 @ 0x55668304a500] mmco: unref short failure
[h264 @ 0x55668304a500] mmco: unref short failure
[h264 @ 0x55b929b67740] mmco: unref short failure
 24%|██▍       | 462/1945 [1:39:08<7:38:21, 18.54s/it] 24%|██▍       | 463/1945 [1:39:14<6:05:01, 14.78s/it] 24%|██▍       | 464/1945 [1:39:20<4:56:58, 12.03s/it] 24%|██▍       | 465/1945 [1:39:25<4:10:06, 10.14s/it][h264 @ 0x55ee35a76140] mmco: unref short failure
 24%|██▍       | 466/1945 [1:39:31<3:35:37,  8.75s/it][h264 @ 0x55fccd88b8c0] mmco: unref short failure
 24%|██▍       | 467/1945 [1:39:36<3:12:02,  7.80s/it] 24%|██▍       | 468/1945 [1:39:45<3:15:33,  7.94s/it][h264 @ 0x55fcd15264c0] mmco: unref short failure
[h264 @ 0x55ee3d4a9b00] mmco: unref short failure
[h264 @ 0x55ee3d4a9b00] mmco: unref short failure
[h264 @ 0x55ee3c531780] mmco: unref short failure
[h264 @ 0x55ee3c531780] mmco: unref short failure
[h264 @ 0x55fcd0741d80] mmco: unref short failure
[h264 @ 0x55fcd0741d80] mmco: unref short failure
[h264 @ 0x55fcd0741d80] mmco: unref short failure
[h264 @ 0x55fcd0741d80] mmco: unref short failure
[h264 @ 0x55fcd0741d80] mmco: unref short failure
[h264 @ 0x55fcd0741d80] mmco: unref short failure
[h264 @ 0x55fcd0741d80] mmco: unref short failure
[h264 @ 0x55fcd0741d80] mmco: unref short failure
[h264 @ 0x5566842e7400] mmco: unref short failure
[h264 @ 0x5566842e7400] mmco: unref short failure
[h264 @ 0x55ee377203c0] mmco: unref short failure
[h264 @ 0x55fcd1c575c0] mmco: unref short failure
[h264 @ 0x55ee3dae2e00] mmco: unref short failure
[h264 @ 0x55ee3dae2e00] mmco: unref short failure
[h264 @ 0x55ee3dae2e00] mmco: unref short failure
[h264 @ 0x55ee3dae2e00] mmco: unref short failure
[h264 @ 0x55fcd2b6ff00] mmco: unref short failure
[h264 @ 0x55fcd2b6ff00] mmco: unref short failure
 24%|██▍       | 469/1945 [1:40:39<8:54:04, 21.71s/it][h264 @ 0x55fccae108c0] mmco: unref short failure
 24%|██▍       | 470/1945 [1:40:44<6:55:26, 16.90s/it][h264 @ 0x55ee41da08c0] mmco: unref short failure
[h264 @ 0x55ee41da08c0] mmco: unref short failure
 24%|██▍       | 471/1945 [1:40:49<5:28:33, 13.37s/it] 24%|██▍       | 472/1945 [1:40:56<4:37:52, 11.32s/it] 24%|██▍       | 473/1945 [1:41:02<3:58:31,  9.72s/it][h264 @ 0x5566480f10c0] mmco: unref short failure
 24%|██▍       | 474/1945 [1:41:07<3:22:22,  8.25s/it][h264 @ 0x55b92dec0940] mmco: unref short failure
[h264 @ 0x55b92dec0940] mmco: unref short failure
 24%|██▍       | 475/1945 [1:41:13<3:03:48,  7.50s/it] 24%|██▍       | 476/1945 [1:41:18<2:48:34,  6.89s/it][h264 @ 0x55ee2f5a9880] mmco: unref short failure
[h264 @ 0x55b92e4d7e40] mmco: unref short failure
[h264 @ 0x55fcd2562840] mmco: unref short failure
[h264 @ 0x55fcd0d7cbc0] mmco: unref short failure
[h264 @ 0x55fcd0d7cbc0] mmco: unref short failure
[h264 @ 0x55fcdbab7880] mmco: unref short failure
[h264 @ 0x55fcdbab7880] mmco: unref short failure
[h264 @ 0x556683666b80] mmco: unref short failure
[h264 @ 0x556683666b80] mmco: unref short failure
[h264 @ 0x55fcd8f802c0] mmco: unref short failure
[h264 @ 0x55fcd8f802c0] mmco: unref short failure
[h264 @ 0x55ee37dda100] mmco: unref short failure
[h264 @ 0x556675e622c0] mmco: unref short failure
 25%|██▍       | 477/1945 [1:42:18<9:17:29, 22.79s/it] 25%|██▍       | 478/1945 [1:42:23<7:07:34, 17.49s/it] 25%|██▍       | 479/1945 [1:42:28<5:39:28, 13.89s/it][h264 @ 0x55ee3c9eb300] mmco: unref short failure
[h264 @ 0x55ee3c9eb300] mmco: unref short failure
 25%|██▍       | 480/1945 [1:42:34<4:39:14, 11.44s/it][h264 @ 0x55ee03ab2f00] mmco: unref short failure
[h264 @ 0x55ee31f1cf40] mmco: unref short failure
[h264 @ 0x55ee31f1cf40] mmco: unref short failure
[h264 @ 0x5566789ccdc0] mmco: unref short failure
[h264 @ 0x5566789ccdc0] mmco: unref short failure
 25%|██▍       | 481/1945 [1:42:40<3:58:00,  9.75s/it] 25%|██▍       | 482/1945 [1:42:46<3:29:40,  8.60s/it][h264 @ 0x55fcccdcb440] mmco: unref short failure
[h264 @ 0x55fcd3fe4b40] mmco: unref short failure
[h264 @ 0x55fcd3fe4b40] mmco: unref short failure
[h264 @ 0x55b930ee9c40] mmco: unref short failure
[h264 @ 0x55b930ee9c40] mmco: unref short failure
 25%|██▍       | 483/1945 [1:42:52<3:07:46,  7.71s/it][h264 @ 0x55b90b6d5440] mmco: unref short failure
[h264 @ 0x55b90b6d5440] mmco: unref short failure
[h264 @ 0x55fcd004a580] mmco: unref short failure
 25%|██▍       | 484/1945 [1:42:58<2:56:22,  7.24s/it][h264 @ 0x55ee3636d580] mmco: unref short failure
[h264 @ 0x55ee3636d580] mmco: unref short failure
[h264 @ 0x55ee3fc0d780] mmco: unref short failure
[h264 @ 0x55ee3fc0d780] mmco: unref short failure
[h264 @ 0x5566836e1640] mmco: unref short failure
[h264 @ 0x55fcd59b8d80] mmco: unref short failure
[h264 @ 0x5566743b2980] mmco: unref short failure
[h264 @ 0x5566743b2980] mmco: unref short failure
[h264 @ 0x55b8f151de00] mmco: unref short failure
[h264 @ 0x55b8f151de00] mmco: unref short failure
[h264 @ 0x55fcdb41bfc0] mmco: unref short failure
[h264 @ 0x55fcdb41bfc0] mmco: unref short failure
[h264 @ 0x55668641a080] mmco: unref short failure
[h264 @ 0x55b8f0353a40] mmco: unref short failure
[h264 @ 0x55b8f0353a40] mmco: unref short failure
[h264 @ 0x556680167580] mmco: unref short failure
 25%|██▍       | 485/1945 [1:43:57<9:18:14, 22.94s/it][h264 @ 0x55ee3df6a940] mmco: unref short failure
[h264 @ 0x55ee3df6a940] mmco: unref short failure
 25%|██▍       | 486/1945 [1:44:03<7:14:04, 17.85s/it][h264 @ 0x5566818cc380] mmco: unref short failure
[h264 @ 0x55ee3a217c80] mmco: unref short failure
[h264 @ 0x55ee3a217c80] mmco: unref short failure
[h264 @ 0x55fcceb1ea80] mmco: unref short failure
 25%|██▌       | 487/1945 [1:44:10<5:50:08, 14.41s/it][h264 @ 0x55b92a33c0c0] mmco: unref short failure
[h264 @ 0x55b92a33c0c0] mmco: unref short failure
[h264 @ 0x55ee3f127f00] mmco: unref short failure
[h264 @ 0x55ee3f127f00] mmco: unref short failure
[h264 @ 0x55ee3f127f00] mmco: unref short failure
[h264 @ 0x55ee3f127f00] mmco: unref short failure
 25%|██▌       | 488/1945 [1:44:16<4:51:08, 11.99s/it] 25%|██▌       | 489/1945 [1:44:22<4:10:30, 10.32s/it] 25%|██▌       | 490/1945 [1:44:28<3:35:15,  8.88s/it][h264 @ 0x55fcdcba6680] mmco: unref short failure
[h264 @ 0x55fcdcba6680] mmco: unref short failure
 25%|██▌       | 491/1945 [1:44:34<3:15:21,  8.06s/it] 25%|██▌       | 492/1945 [1:44:39<2:54:56,  7.22s/it][h264 @ 0x55668374f3c0] mmco: unref short failure
[h264 @ 0x55668374f3c0] mmco: unref short failure
[h264 @ 0x55b8ebe1e100] mmco: unref short failure
[h264 @ 0x556648461ec0] mmco: unref short failure
[h264 @ 0x556648461ec0] mmco: unref short failure
[h264 @ 0x556675a1b900] mmco: unref short failure
[h264 @ 0x55ee304233c0] mmco: unref short failure
[h264 @ 0x55ee304233c0] mmco: unref short failure
[h264 @ 0x55fcca500400] mmco: unref short failure
[h264 @ 0x556687dfb100] mmco: unref short failure
[h264 @ 0x55ee3fc290c0] mmco: unref short failure
[h264 @ 0x55ee3fc290c0] mmco: unref short failure
[h264 @ 0x55ee3c6950c0] mmco: unref short failure
[h264 @ 0x55ee3c6950c0] mmco: unref short failure
 25%|██▌       | 493/1945 [1:45:37<8:59:36, 22.30s/it][h264 @ 0x55ee40c8f240] mmco: unref short failure
[h264 @ 0x55ee40c8f240] mmco: unref short failure
[h264 @ 0x55ee36cc3480] mmco: unref short failure
 25%|██▌       | 494/1945 [1:45:42<6:57:46, 17.28s/it] 25%|██▌       | 495/1945 [1:45:48<5:34:25, 13.84s/it] 26%|██▌       | 496/1945 [1:45:54<4:35:11, 11.39s/it][h264 @ 0x55b8ed143940] mmco: unref short failure
 26%|██▌       | 497/1945 [1:46:00<3:54:07,  9.70s/it][h264 @ 0x55ee3f3e60c0] mmco: unref short failure
[h264 @ 0x55fcd5ebb880] mmco: unref short failure
[h264 @ 0x55fcd5ebb880] mmco: unref short failure
[h264 @ 0x55fcd5ebb880] mmco: unref short failure
[h264 @ 0x55fcd5ebb880] mmco: unref short failure
[h264 @ 0x55667a8ab400] mmco: unref short failure
[h264 @ 0x55667a8ab400] mmco: unref short failure
 26%|██▌       | 498/1945 [1:46:05<3:25:25,  8.52s/it][h264 @ 0x556685625100] mmco: unref short failure
[h264 @ 0x556685625100] mmco: unref short failure
 26%|██▌       | 499/1945 [1:46:11<3:06:31,  7.74s/it]09/07/2024 13:30:11 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.700780153274536, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.05050916224718094, 'loss_ret%tv%ta--finetune_area/loss_area': 3.533893346786499, 'loss_ret%tv%ta--finetune_area/total_loss': 7.285182952880859}
 26%|██▌       | 500/1945 [1:46:17<2:50:15,  7.07s/it][h264 @ 0x55fcd87e9040] mmco: unref short failure
[h264 @ 0x55fcd87e9040] mmco: unref short failure
[h264 @ 0x55ee42071580] mmco: unref short failure
[h264 @ 0x55ee42071580] mmco: unref short failure
[h264 @ 0x55b928833c00] mmco: unref short failure
[h264 @ 0x55b928833c00] mmco: unref short failure
[h264 @ 0x55ee41af5b00] mmco: unref short failure
[h264 @ 0x55ee41af5b00] mmco: unref short failure
[h264 @ 0x55ee41af5b00] mmco: unref short failure
[h264 @ 0x556682466a80] mmco: unref short failure
 26%|██▌       | 501/1945 [1:47:11<8:31:32, 21.26s/it][h264 @ 0x55fcd7f2c780] mmco: unref short failure
[h264 @ 0x55fcd7f2c780] mmco: unref short failure
 26%|██▌       | 502/1945 [1:47:17<6:39:10, 16.60s/it] 26%|██▌       | 503/1945 [1:47:22<5:16:12, 13.16s/it][h264 @ 0x55b92ec03ac0] mmco: unref short failure
[h264 @ 0x55b92ec03ac0] mmco: unref short failure
[h264 @ 0x55fcdb5e8340] mmco: unref short failure
 26%|██▌       | 504/1945 [1:47:29<4:29:36, 11.23s/it][h264 @ 0x556679664f00] mmco: unref short failure
[h264 @ 0x55fcde506580] mmco: unref short failure
[h264 @ 0x55fcde506580] mmco: unref short failure
 26%|██▌       | 505/1945 [1:47:34<3:44:36,  9.36s/it] 26%|██▌       | 506/1945 [1:47:39<3:17:00,  8.21s/it] 26%|██▌       | 507/1945 [1:47:47<3:12:15,  8.02s/it] 26%|██▌       | 508/1945 [1:47:53<3:00:21,  7.53s/it][h264 @ 0x55ee31c6fd40] mmco: unref short failure
[h264 @ 0x55ee3b3559c0] mmco: unref short failure
[h264 @ 0x55ee3e9c02c0] mmco: unref short failure
[h264 @ 0x55ee3b3559c0] mmco: unref short failure
[h264 @ 0x556684324740] mmco: unref short failure
[h264 @ 0x556684324740] mmco: unref short failure
[h264 @ 0x55ee3a4c4480] mmco: unref short failure
[h264 @ 0x55ee3a4c4480] mmco: unref short failure
[h264 @ 0x5566751ed100] mmco: unref short failure
[h264 @ 0x5566751ed100] mmco: unref short failure
 26%|██▌       | 509/1945 [1:48:53<9:15:51, 23.23s/it] 26%|██▌       | 510/1945 [1:48:59<7:10:38, 18.01s/it][h264 @ 0x55b8ef075540] mmco: unref short failure
[h264 @ 0x55b8ef075540] mmco: unref short failure
 26%|██▋       | 511/1945 [1:49:06<5:50:12, 14.65s/it] 26%|██▋       | 512/1945 [1:49:12<4:48:25, 12.08s/it] 26%|██▋       | 513/1945 [1:49:18<4:05:42, 10.29s/it][h264 @ 0x55ee321a4b40] mmco: unref short failure
 26%|██▋       | 514/1945 [1:49:24<3:35:43,  9.04s/it] 26%|██▋       | 515/1945 [1:49:29<3:09:42,  7.96s/it] 27%|██▋       | 516/1945 [1:49:35<2:52:29,  7.24s/it][h264 @ 0x55b92d26bd40] mmco: unref short failure
[h264 @ 0x55b92d26bd40] mmco: unref short failure
[h264 @ 0x55fcdb1f0a00] mmco: unref short failure
[h264 @ 0x55fcdb1f0a00] mmco: unref short failure
[h264 @ 0x55b8eeedcc00] mmco: unref short failure
[h264 @ 0x55fcd04cefc0] mmco: unref short failure
[h264 @ 0x55667855bb40] mmco: unref short failure
[h264 @ 0x55667855bb40] mmco: unref short failure
[h264 @ 0x55fc8dd13500] mmco: unref short failure
[h264 @ 0x55fc8dd13500] mmco: unref short failure
[h264 @ 0x55ee0466f8c0] mmco: unref short failure
[h264 @ 0x55b92a383740] mmco: unref short failure
[h264 @ 0x55b92a383740] mmco: unref short failure
[h264 @ 0x55fcdd424f40] mmco: unref short failure
[h264 @ 0x55668129e9c0] mmco: unref short failure
[h264 @ 0x55fc8d4a9cc0] mmco: unref short failure
[h264 @ 0x55fc8d4a9cc0] mmco: unref short failure
[h264 @ 0x55ee40117180] mmco: unref short failure
[h264 @ 0x55ee40117180] mmco: unref short failure
 27%|██▋       | 517/1945 [1:50:34<9:01:31, 22.75s/it][h264 @ 0x55b8eead01c0] mmco: unref short failure
[h264 @ 0x5566831772c0] mmco: unref short failure
[h264 @ 0x5566831772c0] mmco: unref short failure
[h264 @ 0x5566831772c0] mmco: unref short failure
 27%|██▋       | 518/1945 [1:50:40<7:04:19, 17.84s/it] 27%|██▋       | 519/1945 [1:50:46<5:35:59, 14.14s/it][h264 @ 0x55667fb756c0] mmco: unref short failure
[h264 @ 0x55667fb756c0] mmco: unref short failure
 27%|██▋       | 520/1945 [1:50:52<4:40:40, 11.82s/it][h264 @ 0x55fce1732a40] mmco: unref short failure
 27%|██▋       | 521/1945 [1:50:58<3:58:07, 10.03s/it][h264 @ 0x55ee3b3c5900] mmco: unref short failure
[h264 @ 0x55fcccaacf00] mmco: unref short failure
 27%|██▋       | 522/1945 [1:51:05<3:32:43,  8.97s/it][h264 @ 0x556680778180] mmco: unref short failure
 27%|██▋       | 523/1945 [1:51:11<3:14:37,  8.21s/it] 27%|██▋       | 524/1945 [1:51:19<3:08:53,  7.98s/it][h264 @ 0x55fcd093d4c0] mmco: unref short failure
[h264 @ 0x55fcd093d4c0] mmco: unref short failure
[h264 @ 0x55b92d725840] mmco: unref short failure
[h264 @ 0x556684390e40] mmco: unref short failure
[h264 @ 0x55ee3b323b40] mmco: unref short failure
[h264 @ 0x55ee3b323b40] mmco: unref short failure
 27%|██▋       | 525/1945 [1:52:10<8:18:06, 21.05s/it][h264 @ 0x55ee41b720c0] mmco: unref short failure
[h264 @ 0x55ee41b720c0] mmco: unref short failure
 27%|██▋       | 526/1945 [1:52:17<6:34:45, 16.69s/it] 27%|██▋       | 527/1945 [1:52:22<5:16:17, 13.38s/it][h264 @ 0x55b90a8936c0] mmco: unref short failure
 27%|██▋       | 528/1945 [1:52:28<4:18:55, 10.96s/it][h264 @ 0x5566859f0300] mmco: unref short failure
[h264 @ 0x5566859f0300] mmco: unref short failure
[h264 @ 0x556677cccac0] mmco: unref short failure
[h264 @ 0x55ee2fbbc3c0] mmco: unref short failure
[h264 @ 0x55ee2fbbc3c0] mmco: unref short failure
[h264 @ 0x55ee2fbbc3c0] mmco: unref short failure
[h264 @ 0x55ee2fbbc3c0] mmco: unref short failure
 27%|██▋       | 529/1945 [1:52:33<3:38:07,  9.24s/it][h264 @ 0x55ee390ffcc0] mmco: unref short failure
[h264 @ 0x55ee390ffcc0] mmco: unref short failure
 27%|██▋       | 530/1945 [1:52:39<3:14:28,  8.25s/it][h264 @ 0x55b8ec036780] mmco: unref short failure
 27%|██▋       | 531/1945 [1:52:45<3:02:22,  7.74s/it] 27%|██▋       | 532/1945 [1:52:51<2:49:42,  7.21s/it][h264 @ 0x55fcddbd0d40] mmco: unref short failure
[h264 @ 0x55fcd1048300] mmco: unref short failure
[h264 @ 0x55fcda30a280] mmco: unref short failure
[h264 @ 0x55fcdf437180] mmco: unref short failure
[h264 @ 0x55fcdf437180] mmco: unref short failure
[h264 @ 0x55b90bb07b80] mmco: unref short failure
[h264 @ 0x55b90bb07b80] mmco: unref short failure
[h264 @ 0x556646d3d340] mmco: unref short failure
[h264 @ 0x55fcd55dd500] mmco: unref short failure
[h264 @ 0x55668aef5f40] mmco: unref short failure
[h264 @ 0x55668aef5f40] mmco: unref short failure
[h264 @ 0x55668aef5f40] mmco: unref short failure
[h264 @ 0x55668aef5f40] mmco: unref short failure
[h264 @ 0x556683af3080] mmco: unref short failure
[h264 @ 0x55b93201ba80] mmco: unref short failure
 27%|██▋       | 533/1945 [1:53:51<9:02:28, 23.05s/it][h264 @ 0x55fcd98f0100] mmco: unref short failure
[h264 @ 0x55ee3c3a7740] mmco: unref short failure
[h264 @ 0x55ee3c3a7740] mmco: unref short failure
 27%|██▋       | 534/1945 [1:53:57<7:00:30, 17.88s/it] 28%|██▊       | 535/1945 [1:54:03<5:34:43, 14.24s/it][h264 @ 0x55ee41a4b9c0] mmco: unref short failure
[h264 @ 0x55ee41a4b9c0] mmco: unref short failure
[h264 @ 0x55ee41a4b9c0] mmco: unref short failure
[h264 @ 0x55ee41a4b9c0] mmco: unref short failure
 28%|██▊       | 536/1945 [1:54:08<4:30:24, 11.52s/it][h264 @ 0x55b92f4a1d80] mmco: unref short failure
[h264 @ 0x55b92f4a1d80] mmco: unref short failure
[h264 @ 0x5566866ac4c0] mmco: unref short failure
[h264 @ 0x5566866ac4c0] mmco: unref short failure
 28%|██▊       | 537/1945 [1:54:15<3:56:25, 10.07s/it][h264 @ 0x55fccfcd7d00] mmco: unref short failure
[h264 @ 0x55fccfcd7d00] mmco: unref short failure
 28%|██▊       | 538/1945 [1:54:20<3:26:00,  8.78s/it] 28%|██▊       | 539/1945 [1:54:26<3:05:04,  7.90s/it][h264 @ 0x55ee3ba71c80] mmco: unref short failure
[h264 @ 0x55ee3ba71c80] mmco: unref short failure
 28%|██▊       | 540/1945 [1:54:33<2:56:51,  7.55s/it][h264 @ 0x55fcdcf44980] mmco: unref short failure
[h264 @ 0x556688c00d80] mmco: unref short failure
[h264 @ 0x55fcd0f4eb40] mmco: unref short failure
[h264 @ 0x55fcd0f4eb40] mmco: unref short failure
[h264 @ 0x556647eb6340] mmco: unref short failure
 28%|██▊       | 541/1945 [1:55:26<8:16:06, 21.20s/it][h264 @ 0x55b92d1e2900] mmco: unref short failure
[h264 @ 0x55ee35fe1580] mmco: unref short failure
 28%|██▊       | 542/1945 [1:55:32<6:25:06, 16.47s/it] 28%|██▊       | 543/1945 [1:55:37<5:06:28, 13.12s/it][h264 @ 0x556680c12300] mmco: unref short failure
[h264 @ 0x556680c12300] mmco: unref short failure
 28%|██▊       | 544/1945 [1:55:43<4:14:54, 10.92s/it][h264 @ 0x55fccd819540] mmco: unref short failure
[h264 @ 0x55fccd819540] mmco: unref short failure
 28%|██▊       | 545/1945 [1:55:49<3:39:42,  9.42s/it][h264 @ 0x55b9347d5d80] mmco: unref short failure
[h264 @ 0x55b9347d5d80] mmco: unref short failure
 28%|██▊       | 546/1945 [1:55:55<3:15:50,  8.40s/it][h264 @ 0x556674c91540] mmco: unref short failure
 28%|██▊       | 547/1945 [1:56:01<3:01:33,  7.79s/it][h264 @ 0x556676055880] mmco: unref short failure
 28%|██▊       | 548/1945 [1:56:07<2:46:41,  7.16s/it][h264 @ 0x55fcdea02400] mmco: unref short failure
[h264 @ 0x55fcdea02400] mmco: unref short failure
[h264 @ 0x55ee43e18bc0] mmco: unref short failure
[h264 @ 0x55b8efce0540] mmco: unref short failure
[h264 @ 0x55b8efce0540] mmco: unref short failure
[h264 @ 0x55fcccabea80] mmco: unref short failure
[h264 @ 0x55ee04848ac0] mmco: unref short failure
[h264 @ 0x55ee04848ac0] mmco: unref short failure
[h264 @ 0x55b928a5ab40] mmco: unref short failure
[h264 @ 0x55b928a5ab40] mmco: unref short failure
[h264 @ 0x55b92d725380] mmco: unref short failure
[h264 @ 0x55b92d725380] mmco: unref short failure
[h264 @ 0x556683804c40] mmco: unref short failure
[h264 @ 0x556683804c40] mmco: unref short failure
[h264 @ 0x556683804c40] mmco: unref short failure
[h264 @ 0x556683804c40] mmco: unref short failure
 28%|██▊       | 549/1945 [1:57:04<8:36:57, 22.22s/it]09/07/2024 13:41:04 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.397411823272705, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.046044349670410156, 'loss_ret%tv%ta--finetune_area/loss_area': 3.031259298324585, 'loss_ret%tv%ta--finetune_area/total_loss': 6.474715232849121}
[h264 @ 0x55ee2f408280] mmco: unref short failure
[h264 @ 0x55ee2f408280] mmco: unref short failure
 28%|██▊       | 550/1945 [1:57:09<6:39:08, 17.17s/it] 28%|██▊       | 551/1945 [1:57:15<5:18:44, 13.72s/it] 28%|██▊       | 552/1945 [1:57:22<4:29:48, 11.62s/it] 28%|██▊       | 553/1945 [1:57:29<3:57:48, 10.25s/it][h264 @ 0x5566471ff2c0] mmco: unref short failure
[h264 @ 0x556680897100] mmco: unref short failure
[h264 @ 0x556680897100] mmco: unref short failure
 28%|██▊       | 554/1945 [1:57:34<3:21:26,  8.69s/it] 29%|██▊       | 555/1945 [1:57:39<2:56:53,  7.64s/it] 29%|██▊       | 556/1945 [1:57:45<2:43:00,  7.04s/it][h264 @ 0x55fccda3d340] mmco: unref short failure
[h264 @ 0x55b935008e00] mmco: unref short failure
[h264 @ 0x55b929ffae40] mmco: unref short failure
[h264 @ 0x55ee435c4d40] mmco: unref short failure
[h264 @ 0x55ee435c4d40] mmco: unref short failure
[h264 @ 0x55664820e900] mmco: unref short failure
[h264 @ 0x55664820e900] mmco: unref short failure
[h264 @ 0x55fcdab4a580] mmco: unref short failure
[h264 @ 0x55fcdab4a580] mmco: unref short failure
[h264 @ 0x55b8f1c9d580] mmco: unref short failure
[h264 @ 0x55fccb8b1f00] mmco: unref short failure
 29%|██▊       | 557/1945 [1:58:38<8:07:23, 21.07s/it][h264 @ 0x55fc8cc19740] mmco: unref short failure
 29%|██▊       | 558/1945 [1:58:44<6:21:14, 16.49s/it] 29%|██▊       | 559/1945 [1:58:50<5:09:14, 13.39s/it][h264 @ 0x55b90b226340] mmco: unref short failure
[h264 @ 0x55b90b226340] mmco: unref short failure
 29%|██▉       | 560/1945 [1:58:57<4:19:52, 11.26s/it] 29%|██▉       | 561/1945 [1:59:02<3:40:22,  9.55s/it][h264 @ 0x556688dfe980] mmco: unref short failure
[h264 @ 0x556688dfe980] mmco: unref short failure
 29%|██▉       | 562/1945 [1:59:08<3:13:21,  8.39s/it][h264 @ 0x55b92d26b200] mmco: unref short failure
[h264 @ 0x55fcdd032d00] mmco: unref short failure
[h264 @ 0x55fcdd032d00] mmco: unref short failure
 29%|██▉       | 563/1945 [1:59:13<2:52:33,  7.49s/it][h264 @ 0x55fce0cef940] mmco: unref short failure
[h264 @ 0x55fce0cef940] mmco: unref short failure
 29%|██▉       | 564/1945 [1:59:19<2:42:48,  7.07s/it][h264 @ 0x55ee38cadb00] mmco: unref short failure
[h264 @ 0x5566853612c0] mmco: unref short failure
[h264 @ 0x556689ca7100] mmco: unref short failure
[h264 @ 0x556689ca7100] mmco: unref short failure
[h264 @ 0x55b90ac5dd40] mmco: unref short failure
[h264 @ 0x55fccaad5080] mmco: unref short failure
[h264 @ 0x55fccaad5080] mmco: unref short failure
[h264 @ 0x55b8ef7748c0] mmco: unref short failure
[h264 @ 0x55b8ece803c0] mmco: unref short failure
[h264 @ 0x556679ed6740] mmco: unref short failure
[h264 @ 0x556679ed6740] mmco: unref short failure
 29%|██▉       | 565/1945 [2:00:18<8:40:11, 22.62s/it][h264 @ 0x55ee368a6340] mmco: unref short failure
[h264 @ 0x55ee368a6340] mmco: unref short failure
 29%|██▉       | 566/1945 [2:00:24<6:42:38, 17.52s/it] 29%|██▉       | 567/1945 [2:00:29<5:18:57, 13.89s/it][h264 @ 0x55ee03f1c880] mmco: unref short failure
[h264 @ 0x55ee03f1c880] mmco: unref short failure
 29%|██▉       | 568/1945 [2:00:36<4:25:32, 11.57s/it] 29%|██▉       | 569/1945 [2:00:41<3:44:00,  9.77s/it] 29%|██▉       | 570/1945 [2:00:47<3:14:43,  8.50s/it] 29%|██▉       | 571/1945 [2:00:53<3:00:12,  7.87s/it] 29%|██▉       | 572/1945 [2:00:59<2:44:46,  7.20s/it][h264 @ 0x55b8ebe261c0] mmco: unref short failure
[h264 @ 0x55b8ebe261c0] mmco: unref short failure
[h264 @ 0x55fc8d5c2300] mmco: unref short failure
[h264 @ 0x55b929ffac00] mmco: unref short failure
[h264 @ 0x55b929ffac00] mmco: unref short failure
[h264 @ 0x55ee30675b40] mmco: unref short failure
[h264 @ 0x55ee30675b40] mmco: unref short failure
[h264 @ 0x55b8f05dca00] mmco: unref short failure
[h264 @ 0x55b8f05dca00] mmco: unref short failure
[h264 @ 0x556676b51540] mmco: unref short failure
[h264 @ 0x55b92aff0e00] mmco: unref short failure
[h264 @ 0x55fccaad5300] mmco: unref short failure
[h264 @ 0x55fccaad5300] mmco: unref short failure
[h264 @ 0x55b90bb07b80] mmco: unref short failure
[h264 @ 0x55b90bb07b80] mmco: unref short failure
[h264 @ 0x55b8ec78f680] mmco: unref short failure
[h264 @ 0x55ee400d3480] mmco: unref short failure
[h264 @ 0x55fc8cc19340] mmco: unref short failure
[h264 @ 0x55fc8cc19340] mmco: unref short failure
[h264 @ 0x55667442f040] mmco: unref short failure
[h264 @ 0x55667442f040] mmco: unref short failure
[h264 @ 0x5566755a50c0] mmco: unref short failure
[h264 @ 0x5566755a50c0] mmco: unref short failure
 29%|██▉       | 573/1945 [2:01:55<8:21:02, 21.91s/it] 30%|██▉       | 574/1945 [2:02:01<6:30:02, 17.07s/it][h264 @ 0x55fccee7e4c0] mmco: unref short failure
[h264 @ 0x55fccee7e4c0] mmco: unref short failure
[h264 @ 0x55ee04199380] mmco: unref short failure
[h264 @ 0x55ee375afb40] mmco: unref short failure
[h264 @ 0x55ee375afb40] mmco: unref short failure
 30%|██▉       | 575/1945 [2:02:07<5:16:52, 13.88s/it][h264 @ 0x55ee2fad7180] mmco: unref short failure
 30%|██▉       | 576/1945 [2:02:13<4:23:42, 11.56s/it] 30%|██▉       | 577/1945 [2:02:19<3:41:29,  9.71s/it] 30%|██▉       | 578/1945 [2:02:24<3:10:51,  8.38s/it] 30%|██▉       | 579/1945 [2:02:29<2:47:46,  7.37s/it][h264 @ 0x556674416340] mmco: unref short failure
[h264 @ 0x556674416340] mmco: unref short failure
 30%|██▉       | 580/1945 [2:02:35<2:41:08,  7.08s/it][h264 @ 0x55667812a340] mmco: unref short failure
[h264 @ 0x55fccbaad5c0] mmco: unref short failure
[h264 @ 0x55fccbaad5c0] mmco: unref short failure
[h264 @ 0x55b93398a1c0] mmco: unref short failure
[h264 @ 0x55fc8d173a00] mmco: unref short failure
[h264 @ 0x55ee2ff1f380] mmco: unref short failure
[h264 @ 0x556685cfb200] mmco: unref short failure
[h264 @ 0x556685cfb200] mmco: unref short failure
[h264 @ 0x55fccd919200] mmco: unref short failure
 30%|██▉       | 581/1945 [2:03:40<9:15:07, 24.42s/it][h264 @ 0x55b8ed5f5640] mmco: unref short failure
 30%|██▉       | 582/1945 [2:03:45<7:03:58, 18.66s/it] 30%|██▉       | 583/1945 [2:03:51<5:32:46, 14.66s/it][h264 @ 0x5566481ef480] mmco: unref short failure
[h264 @ 0x5566481ef480] mmco: unref short failure
 30%|███       | 584/1945 [2:03:57<4:31:38, 11.98s/it][h264 @ 0x556689d27140] mmco: unref short failure
 30%|███       | 585/1945 [2:04:02<3:49:31, 10.13s/it][h264 @ 0x55b929453480] mmco: unref short failure
[h264 @ 0x55b929453480] mmco: unref short failure
[h264 @ 0x55b929453480] mmco: unref short failure
 30%|███       | 586/1945 [2:04:07<3:13:36,  8.55s/it] 30%|███       | 587/1945 [2:04:14<2:59:52,  7.95s/it][h264 @ 0x55fcdea49840] mmco: unref short failure
[h264 @ 0x55fcdea49840] mmco: unref short failure
 30%|███       | 588/1945 [2:04:20<2:46:16,  7.35s/it][h264 @ 0x55ee32e35980] mmco: unref short failure
[h264 @ 0x55ee32e35980] mmco: unref short failure
[h264 @ 0x55667771f280] mmco: unref short failure
[h264 @ 0x55ee3d55e740] mmco: unref short failure
[h264 @ 0x55ee3d55e740] mmco: unref short failure
[h264 @ 0x55668a652b80] mmco: unref short failure
[h264 @ 0x55668a652b80] mmco: unref short failure
[h264 @ 0x5566744167c0] mmco: unref short failure
[h264 @ 0x5566744167c0] mmco: unref short failure
[h264 @ 0x55ee3032c9c0] mmco: unref short failure
 30%|███       | 589/1945 [2:05:17<8:26:38, 22.42s/it][h264 @ 0x556677370940] mmco: unref short failure
[h264 @ 0x556677370940] mmco: unref short failure
 30%|███       | 590/1945 [2:05:22<6:29:46, 17.26s/it][h264 @ 0x55b92a601280] mmco: unref short failure
[h264 @ 0x55b92a601280] mmco: unref short failure
[h264 @ 0x55ee33f04a80] mmco: unref short failure
not have audios ua_Kowav7hg.20
 30%|███       | 591/1945 [2:05:29<5:15:48, 13.99s/it] 30%|███       | 592/1945 [2:05:35<4:23:28, 11.68s/it][h264 @ 0x55fccbe65500] mmco: unref short failure
[h264 @ 0x55fccbe65500] mmco: unref short failure
 30%|███       | 593/1945 [2:05:40<3:38:02,  9.68s/it] 31%|███       | 594/1945 [2:05:46<3:11:03,  8.48s/it] 31%|███       | 595/1945 [2:05:52<2:55:28,  7.80s/it][h264 @ 0x556678d73740] mmco: unref short failure
[h264 @ 0x556646bbc440] mmco: unref short failure
[h264 @ 0x556646bbc440] mmco: unref short failure
 31%|███       | 596/1945 [2:05:57<2:38:48,  7.06s/it][h264 @ 0x55b8f13d6f80] mmco: unref short failure
[h264 @ 0x55b8f13d6f80] mmco: unref short failure
[h264 @ 0x55667ea7acc0] mmco: unref short failure
[h264 @ 0x55fc8d6ac280] mmco: unref short failure
[h264 @ 0x55fccb5cb3c0] mmco: unref short failure
[h264 @ 0x55fccb5cb3c0] mmco: unref short failure
[h264 @ 0x55ee03895000] mmco: unref short failure
[h264 @ 0x55fccc835000] mmco: unref short failure
[h264 @ 0x55fccc835000] mmco: unref short failure
[h264 @ 0x55fcd8137e40] mmco: unref short failure
[h264 @ 0x55fcd8137e40] mmco: unref short failure
[h264 @ 0x55ee328a9440] mmco: unref short failure
 31%|███       | 597/1945 [2:06:55<8:19:16, 22.22s/it][h264 @ 0x55ee3283f980] mmco: unref short failure
[h264 @ 0x55ee3283f980] mmco: unref short failure
[h264 @ 0x55b90bfd2300] mmco: unref short failure
[h264 @ 0x55b90bfd2300] mmco: unref short failure
 31%|███       | 598/1945 [2:07:01<6:27:29, 17.26s/it][h264 @ 0x55b932ce66c0] mmco: unref short failure
[h264 @ 0x55b932ce66c0] mmco: unref short failure
[h264 @ 0x55b8f1e29dc0] mmco: unref short failure
[h264 @ 0x55b8f1e29dc0] mmco: unref short failure
[h264 @ 0x55b929db1e00] mmco: unref short failure
 31%|███       | 599/1945 [2:07:07<5:11:16, 13.88s/it]09/07/2024 13:51:04 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/07/2024 13:51:04 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55ee35e8b380] mmco: unref short failure
[h264 @ 0x55ee3c221940] mmco: unref short failure
[h264 @ 0x55ee3c221940] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5566835ae700] mmco: unref short failure
[h264 @ 0x5566835ae700] mmco: unref short failure
[h264 @ 0x55b90aeca780] mmco: unref short failure
[h264 @ 0x55fccd9a9480] mmco: unref short failure
[h264 @ 0x55fccd9a9480] mmco: unref short failure
[h264 @ 0x556673c10400] mmco: unref short failure
[h264 @ 0x556673c10400] mmco: unref short failure
[h264 @ 0x55fccff84c80] mmco: unref short failure
[h264 @ 0x556676574140] mmco: unref short failure
[h264 @ 0x556676574140] mmco: unref short failure
[h264 @ 0x55b8f1cf5840] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:54,  4.04it/s][A
  1%|          | 2/221 [00:00<00:56,  3.85it/s][A
  1%|▏         | 3/221 [00:01<02:22,  1.53it/s][A
  2%|▏         | 5/221 [00:01<01:11,  3.02it/s][A
  3%|▎         | 7/221 [00:02<00:48,  4.45it/s][A
  4%|▍         | 9/221 [00:02<00:39,  5.41it/s][A
  5%|▍         | 10/221 [00:02<00:38,  5.49it/s][A
  5%|▌         | 12/221 [00:02<00:41,  5.02it/s][A
  6%|▋         | 14/221 [00:03<00:33,  6.22it/s][A
  7%|▋         | 16/221 [00:03<00:32,  6.30it/s][A[h264 @ 0x55ee39df3080] mmco: unref short failure

  8%|▊         | 17/221 [00:04<00:53,  3.81it/s][A
  8%|▊         | 18/221 [00:04<00:47,  4.29it/s][A
  9%|▊         | 19/221 [00:04<00:42,  4.73it/s][A
 10%|▉         | 21/221 [00:04<00:31,  6.29it/s][A
 10%|▉         | 22/221 [00:04<00:39,  5.07it/s][A
 11%|█         | 24/221 [00:04<00:27,  7.11it/s][A
 12%|█▏        | 26/221 [00:05<00:26,  7.23it/s][A
 13%|█▎        | 28/221 [00:05<00:29,  6.64it/s][A
 13%|█▎        | 29/221 [00:05<00:27,  6.92it/s][A
 14%|█▍        | 31/221 [00:06<00:29,  6.43it/s][A
 15%|█▍        | 33/221 [00:06<00:25,  7.25it/s][A
 16%|█▌        | 35/221 [00:06<00:22,  8.42it/s][A
 16%|█▋        | 36/221 [00:06<00:26,  6.96it/s][A
 17%|█▋        | 37/221 [00:06<00:29,  6.14it/s][A
 17%|█▋        | 38/221 [00:07<01:10,  2.58it/s][A
 18%|█▊        | 40/221 [00:08<00:53,  3.40it/s][A
 19%|█▉        | 42/221 [00:08<00:47,  3.75it/s][A
 20%|██        | 45/221 [00:09<00:58,  3.02it/s][A
 21%|██        | 46/221 [00:10<00:54,  3.21it/s][A
 21%|██▏       | 47/221 [00:11<01:15,  2.32it/s][A
 22%|██▏       | 49/221 [00:11<00:54,  3.15it/s][A
 23%|██▎       | 51/221 [00:11<00:42,  4.02it/s][A
 24%|██▍       | 53/221 [00:11<00:31,  5.41it/s][A
 24%|██▍       | 54/221 [00:12<00:49,  3.38it/s][A
 25%|██▍       | 55/221 [00:12<00:53,  3.12it/s][A
 26%|██▌       | 57/221 [00:13<00:38,  4.27it/s][A
 27%|██▋       | 59/221 [00:13<00:28,  5.64it/s][A
 27%|██▋       | 60/221 [00:14<00:57,  2.82it/s][A
 28%|██▊       | 61/221 [00:14<00:47,  3.35it/s][A
 28%|██▊       | 62/221 [00:14<00:42,  3.74it/s][A
 29%|██▊       | 63/221 [00:14<00:38,  4.08it/s][A
 29%|██▉       | 64/221 [00:15<00:48,  3.22it/s][A
 30%|██▉       | 66/221 [00:16<01:01,  2.50it/s][A
 30%|███       | 67/221 [00:16<00:50,  3.02it/s][A
 31%|███       | 68/221 [00:16<00:47,  3.21it/s][A
 31%|███       | 69/221 [00:17<01:15,  2.01it/s][A
 32%|███▏      | 71/221 [00:17<00:52,  2.86it/s][A
 33%|███▎      | 72/221 [00:18<00:49,  2.99it/s][A
 33%|███▎      | 73/221 [00:18<00:59,  2.48it/s][A
 34%|███▍      | 75/221 [00:19<00:46,  3.17it/s][A
 35%|███▍      | 77/221 [00:19<00:44,  3.21it/s][A
 36%|███▌      | 79/221 [00:20<00:36,  3.89it/s][A
 37%|███▋      | 81/221 [00:20<00:40,  3.48it/s][A
 37%|███▋      | 82/221 [00:21<00:40,  3.46it/s][A
 38%|███▊      | 83/221 [00:21<00:37,  3.67it/s][A
 39%|███▉      | 86/221 [00:21<00:21,  6.17it/s][A
 39%|███▉      | 87/221 [00:21<00:27,  4.79it/s][A
 40%|███▉      | 88/221 [00:22<00:36,  3.69it/s][A
 40%|████      | 89/221 [00:22<00:38,  3.39it/s][A
 41%|████      | 90/221 [00:23<00:39,  3.29it/s][A
 42%|████▏     | 92/221 [00:23<00:27,  4.75it/s][A
 42%|████▏     | 93/221 [00:23<00:28,  4.54it/s][A
 43%|████▎     | 94/221 [00:23<00:27,  4.60it/s][A
 43%|████▎     | 95/221 [00:23<00:23,  5.34it/s][A
 43%|████▎     | 96/221 [00:24<00:42,  2.95it/s][A
 44%|████▍     | 98/221 [00:25<00:44,  2.74it/s][A
 45%|████▌     | 100/221 [00:25<00:29,  4.04it/s][A
 46%|████▌     | 102/221 [00:26<00:38,  3.11it/s][A
 47%|████▋     | 104/221 [00:26<00:27,  4.18it/s][A
 48%|████▊     | 105/221 [00:26<00:29,  3.88it/s][A
 48%|████▊     | 106/221 [00:27<00:41,  2.78it/s][A
 49%|████▉     | 108/221 [00:27<00:27,  4.07it/s][A
 50%|████▉     | 110/221 [00:27<00:19,  5.62it/s][A
 51%|█████     | 112/221 [00:28<00:19,  5.67it/s][A
 51%|█████     | 113/221 [00:28<00:23,  4.63it/s][A
 52%|█████▏    | 116/221 [00:29<00:23,  4.40it/s][A
 53%|█████▎    | 117/221 [00:29<00:28,  3.66it/s][A
 53%|█████▎    | 118/221 [00:29<00:25,  4.10it/s][A
 54%|█████▍    | 119/221 [00:29<00:21,  4.70it/s][A
 55%|█████▍    | 121/221 [00:30<00:15,  6.64it/s][A
 56%|█████▌    | 123/221 [00:30<00:14,  6.75it/s][A
 56%|█████▌    | 124/221 [00:30<00:13,  7.18it/s][A
 57%|█████▋    | 125/221 [00:31<00:30,  3.17it/s][A
 57%|█████▋    | 126/221 [00:31<00:29,  3.22it/s][A
 57%|█████▋    | 127/221 [00:34<01:19,  1.18it/s][A
 58%|█████▊    | 128/221 [00:34<01:03,  1.47it/s][A
 59%|█████▉    | 130/221 [00:34<00:37,  2.44it/s][A
 60%|█████▉    | 132/221 [00:36<00:56,  1.59it/s][A
 60%|██████    | 133/221 [00:36<00:49,  1.79it/s][A
 61%|██████    | 134/221 [00:39<01:38,  1.14s/it][A
 61%|██████    | 135/221 [00:40<01:33,  1.08s/it][A
 62%|██████▏   | 136/221 [00:40<01:14,  1.14it/s][A
 62%|██████▏   | 137/221 [00:41<01:03,  1.33it/s][A
 62%|██████▏   | 138/221 [00:42<01:10,  1.18it/s][A
 63%|██████▎   | 139/221 [00:43<01:03,  1.29it/s][A
 63%|██████▎   | 140/221 [00:44<01:07,  1.21it/s][A
 64%|██████▍   | 141/221 [00:45<01:17,  1.03it/s][A
 64%|██████▍   | 142/221 [00:46<01:22,  1.04s/it][A
 65%|██████▍   | 143/221 [00:46<01:06,  1.16it/s][A
 66%|██████▌   | 146/221 [00:47<00:30,  2.48it/s][A
 67%|██████▋   | 148/221 [00:47<00:21,  3.45it/s][A
 67%|██████▋   | 149/221 [00:47<00:21,  3.41it/s][A
 68%|██████▊   | 150/221 [00:47<00:18,  3.90it/s][A
 68%|██████▊   | 151/221 [00:48<00:19,  3.56it/s][A
 69%|██████▉   | 152/221 [00:48<00:17,  3.94it/s][A
 69%|██████▉   | 153/221 [00:48<00:15,  4.33it/s][A
 70%|██████▉   | 154/221 [00:48<00:14,  4.72it/s][A
 70%|███████   | 155/221 [00:48<00:12,  5.16it/s][A
 71%|███████   | 156/221 [00:48<00:10,  5.97it/s][A
 71%|███████   | 157/221 [00:49<00:26,  2.46it/s][A
 71%|███████▏  | 158/221 [00:50<00:23,  2.71it/s][A
 72%|███████▏  | 159/221 [00:50<00:18,  3.35it/s][A
 73%|███████▎  | 161/221 [00:50<00:11,  5.11it/s][A
 74%|███████▍  | 163/221 [00:50<00:10,  5.69it/s][A
 74%|███████▍  | 164/221 [00:50<00:12,  4.63it/s][A
 75%|███████▍  | 165/221 [00:51<00:12,  4.51it/s][A
 75%|███████▌  | 166/221 [00:51<00:17,  3.09it/s][A
 76%|███████▌  | 168/221 [00:53<00:29,  1.81it/s][A
 77%|███████▋  | 170/221 [00:53<00:19,  2.57it/s][A
 77%|███████▋  | 171/221 [00:55<00:35,  1.42it/s][A
 78%|███████▊  | 172/221 [00:55<00:28,  1.70it/s][A
 78%|███████▊  | 173/221 [00:56<00:23,  2.02it/s][A
 79%|███████▉  | 175/221 [00:56<00:15,  3.05it/s][A
 80%|███████▉  | 176/221 [00:56<00:12,  3.47it/s][A
 80%|████████  | 177/221 [00:56<00:10,  4.11it/s][A
 81%|████████  | 178/221 [00:56<00:10,  3.93it/s][A
 81%|████████  | 179/221 [00:57<00:16,  2.55it/s][A
 82%|████████▏ | 181/221 [00:57<00:09,  4.07it/s][A
 82%|████████▏ | 182/221 [00:57<00:08,  4.59it/s][A
 83%|████████▎ | 183/221 [00:58<00:08,  4.60it/s][A
 83%|████████▎ | 184/221 [00:59<00:16,  2.26it/s][A
 84%|████████▍ | 186/221 [00:59<00:11,  3.06it/s][A
 85%|████████▍ | 187/221 [00:59<00:10,  3.13it/s][A
 85%|████████▌ | 188/221 [00:59<00:08,  3.72it/s][A
 86%|████████▌ | 189/221 [01:00<00:07,  4.19it/s][A
 86%|████████▌ | 190/221 [01:00<00:06,  4.44it/s][A
 87%|████████▋ | 192/221 [01:00<00:05,  5.75it/s][A
 88%|████████▊ | 194/221 [01:00<00:05,  4.76it/s][A
 89%|████████▊ | 196/221 [01:01<00:03,  6.50it/s][A
 89%|████████▉ | 197/221 [01:01<00:03,  6.47it/s][A
 90%|█████████ | 199/221 [01:01<00:02,  7.71it/s][A
 90%|█████████ | 200/221 [01:01<00:02,  8.03it/s][A
 91%|█████████ | 201/221 [01:01<00:02,  7.45it/s][A
 92%|█████████▏| 203/221 [01:01<00:02,  7.73it/s][A
 93%|█████████▎| 205/221 [01:02<00:01,  9.09it/s][A
 93%|█████████▎| 206/221 [01:02<00:02,  5.73it/s][A
 94%|█████████▍| 208/221 [01:02<00:02,  6.15it/s][A
 95%|█████████▍| 209/221 [01:02<00:01,  6.08it/s][A
 95%|█████████▌| 211/221 [01:03<00:01,  5.57it/s][A
 96%|█████████▌| 212/221 [01:03<00:01,  4.60it/s][A
 96%|█████████▋| 213/221 [01:03<00:01,  4.93it/s][A
 97%|█████████▋| 214/221 [01:04<00:01,  3.55it/s][A
 97%|█████████▋| 215/221 [01:04<00:01,  4.13it/s][A
 98%|█████████▊| 216/221 [01:04<00:01,  4.51it/s][A
 98%|█████████▊| 217/221 [01:07<00:03,  1.12it/s][A
 99%|█████████▊| 218/221 [01:07<00:02,  1.42it/s][A
 99%|█████████▉| 219/221 [01:07<00:01,  1.87it/s][A
100%|█████████▉| 220/221 [01:08<00:00,  1.85it/s][A100%|██████████| 221/221 [01:08<00:00,  3.24it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.79it/s][A
  1%|          | 2/221 [00:00<00:57,  3.79it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.79it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.79it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.79it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.79it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.79it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.79it/s][A
  4%|▍         | 9/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.79it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.79it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.79it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.79it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.79it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 125/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.79it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.79it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.79it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.79it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.79it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.79it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.79it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.79it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.79it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.79it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.79it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.79it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.79it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.79it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.79it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.79it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 159/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.78it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.79it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.79it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.79it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.79it/s][A
 76%|███████▌  | 168/221 [00:44<00:13,  3.79it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.79it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.79it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.79it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.79it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.79it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 178/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.79it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.79it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.79it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.79it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.79it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.79it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.79it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.79it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.79it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.79it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.79it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.79it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.79it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.79it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.79it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.79it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.79it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.79it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.79it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.79it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.79it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.79it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▌| 212/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.79it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.79it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.79it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.79it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.79it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.79it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.79it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.79it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.79it/s][A100%|██████████| 221/221 [00:58<00:00,  3.79it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:24,  9.10it/s][A
  1%|          | 2/221 [00:00<00:29,  7.33it/s][A
  1%|▏         | 3/221 [00:00<00:37,  5.79it/s][A
  2%|▏         | 4/221 [00:00<00:32,  6.62it/s][A
  3%|▎         | 6/221 [00:00<00:22,  9.51it/s][A
  4%|▎         | 8/221 [00:01<00:31,  6.67it/s][A
  4%|▍         | 9/221 [00:01<00:32,  6.50it/s][A
  5%|▍         | 10/221 [00:01<00:51,  4.10it/s][A
  5%|▍         | 11/221 [00:01<00:45,  4.57it/s][A
  5%|▌         | 12/221 [00:02<00:42,  4.89it/s][A
  6%|▌         | 13/221 [00:02<00:50,  4.10it/s][A
  7%|▋         | 15/221 [00:02<00:41,  4.97it/s][A
  7%|▋         | 16/221 [00:03<00:45,  4.48it/s][A
  8%|▊         | 17/221 [00:03<01:12,  2.81it/s][A
  8%|▊         | 18/221 [00:03<01:01,  3.31it/s][A
  9%|▊         | 19/221 [00:04<00:55,  3.66it/s][A
  9%|▉         | 20/221 [00:04<00:46,  4.32it/s][A
 10%|▉         | 21/221 [00:04<00:40,  4.99it/s][A
 10%|▉         | 22/221 [00:04<00:41,  4.76it/s][A
 11%|█         | 24/221 [00:04<00:31,  6.26it/s][A
 11%|█▏        | 25/221 [00:04<00:29,  6.60it/s][A
 12%|█▏        | 26/221 [00:05<00:33,  5.85it/s][A
 12%|█▏        | 27/221 [00:05<00:31,  6.25it/s][A
 13%|█▎        | 28/221 [00:05<00:40,  4.81it/s][A
 13%|█▎        | 29/221 [00:06<00:48,  3.98it/s][A
 14%|█▎        | 30/221 [00:06<00:57,  3.33it/s][A
 14%|█▍        | 31/221 [00:06<00:50,  3.75it/s][A
 14%|█▍        | 32/221 [00:06<00:42,  4.46it/s][A
 15%|█▍        | 33/221 [00:06<00:40,  4.68it/s][A
 16%|█▌        | 35/221 [00:07<00:37,  4.98it/s][A
 16%|█▋        | 36/221 [00:07<00:42,  4.37it/s][A
 17%|█▋        | 37/221 [00:07<00:38,  4.77it/s][A
 17%|█▋        | 38/221 [00:08<00:45,  3.98it/s][A
 18%|█▊        | 39/221 [00:08<00:41,  4.39it/s][A
 18%|█▊        | 40/221 [00:08<00:54,  3.30it/s][A
 19%|█▊        | 41/221 [00:08<00:44,  4.01it/s][A
 19%|█▉        | 42/221 [00:09<00:37,  4.83it/s][A
 19%|█▉        | 43/221 [00:09<00:31,  5.68it/s][A
 20%|█▉        | 44/221 [00:09<00:27,  6.46it/s][A
 20%|██        | 45/221 [00:09<00:36,  4.77it/s][A
 21%|██        | 46/221 [00:09<00:35,  4.98it/s][A
 21%|██▏       | 47/221 [00:09<00:30,  5.76it/s][A
 22%|██▏       | 48/221 [00:09<00:26,  6.57it/s][A
 22%|██▏       | 49/221 [00:10<00:29,  5.93it/s][A
 23%|██▎       | 50/221 [00:10<00:29,  5.75it/s][A
 23%|██▎       | 51/221 [00:10<00:29,  5.82it/s][A
 24%|██▎       | 52/221 [00:10<00:34,  4.85it/s][A
 24%|██▍       | 54/221 [00:11<00:51,  3.23it/s][A
 25%|██▍       | 55/221 [00:12<00:53,  3.11it/s][A
 26%|██▌       | 57/221 [00:12<00:40,  4.06it/s][A
 26%|██▌       | 58/221 [00:12<00:45,  3.61it/s][A
 27%|██▋       | 59/221 [00:12<00:38,  4.19it/s][A
 27%|██▋       | 60/221 [00:13<00:48,  3.34it/s][A
 28%|██▊       | 61/221 [00:13<00:39,  4.05it/s][A
 28%|██▊       | 62/221 [00:13<00:37,  4.24it/s][A
 29%|██▊       | 63/221 [00:13<00:42,  3.75it/s][A
 29%|██▉       | 64/221 [00:14<01:03,  2.48it/s][A
 29%|██▉       | 65/221 [00:14<00:50,  3.08it/s][A
 30%|██▉       | 66/221 [00:15<01:00,  2.54it/s][A
 30%|███       | 67/221 [00:15<00:58,  2.63it/s][A
 31%|███       | 68/221 [00:15<00:51,  2.98it/s][A
 31%|███       | 69/221 [00:17<01:30,  1.69it/s][A
 32%|███▏      | 70/221 [00:17<01:10,  2.14it/s][A
 32%|███▏      | 71/221 [00:17<00:56,  2.67it/s][A
 33%|███▎      | 72/221 [00:17<00:56,  2.63it/s][A
 33%|███▎      | 73/221 [00:18<00:53,  2.75it/s][A
 34%|███▍      | 75/221 [00:18<00:39,  3.66it/s][A
 34%|███▍      | 76/221 [00:18<00:39,  3.63it/s][A
 35%|███▍      | 77/221 [00:19<00:50,  2.83it/s][A
 36%|███▌      | 79/221 [00:19<00:44,  3.21it/s][A
 36%|███▌      | 80/221 [00:20<00:41,  3.39it/s][A
 37%|███▋      | 81/221 [00:20<00:38,  3.66it/s][A
 37%|███▋      | 82/221 [00:20<00:39,  3.51it/s][A
 38%|███▊      | 83/221 [00:21<00:54,  2.53it/s][A
 38%|███▊      | 84/221 [00:21<00:43,  3.11it/s][A
 39%|███▉      | 86/221 [00:21<00:29,  4.53it/s][A
 39%|███▉      | 87/221 [00:22<00:36,  3.69it/s][A
 40%|███▉      | 88/221 [00:22<00:36,  3.62it/s][A
 40%|████      | 89/221 [00:22<00:36,  3.66it/s][A
 41%|████      | 90/221 [00:23<00:42,  3.06it/s][A
 41%|████      | 91/221 [00:23<00:34,  3.77it/s][A
 42%|████▏     | 92/221 [00:23<00:33,  3.88it/s][A
 42%|████▏     | 93/221 [00:24<00:47,  2.72it/s][A
 43%|████▎     | 94/221 [00:24<00:48,  2.60it/s][A
 43%|████▎     | 95/221 [00:24<00:43,  2.90it/s][A
 43%|████▎     | 96/221 [00:25<00:55,  2.24it/s][A
 44%|████▍     | 97/221 [00:25<00:46,  2.67it/s][A
 44%|████▍     | 98/221 [00:26<01:07,  1.83it/s][A
 45%|████▍     | 99/221 [00:26<00:52,  2.33it/s][A
 45%|████▌     | 100/221 [00:27<00:45,  2.66it/s][A
 46%|████▌     | 101/221 [00:27<00:39,  3.02it/s][A
 46%|████▌     | 102/221 [00:28<01:09,  1.72it/s][A
 47%|████▋     | 103/221 [00:28<00:54,  2.16it/s][A
 47%|████▋     | 104/221 [00:28<00:42,  2.76it/s][A
 48%|████▊     | 105/221 [00:29<00:41,  2.79it/s][A
 48%|████▊     | 106/221 [00:29<00:40,  2.81it/s][A
 48%|████▊     | 107/221 [00:29<00:33,  3.41it/s][A
 49%|████▉     | 108/221 [00:29<00:31,  3.63it/s][A
 50%|████▉     | 110/221 [00:30<00:24,  4.53it/s][A
 50%|█████     | 111/221 [00:30<00:23,  4.60it/s][A
 51%|█████     | 112/221 [00:30<00:26,  4.12it/s][A
 51%|█████     | 113/221 [00:31<00:30,  3.57it/s][A
 52%|█████▏    | 115/221 [00:31<00:22,  4.66it/s][A
 52%|█████▏    | 116/221 [00:31<00:23,  4.50it/s][A
 53%|█████▎    | 117/221 [00:31<00:23,  4.47it/s][A
 53%|█████▎    | 118/221 [00:31<00:22,  4.61it/s][A
 54%|█████▍    | 119/221 [00:32<00:26,  3.89it/s][A
 54%|█████▍    | 120/221 [00:32<00:21,  4.67it/s][A
 55%|█████▍    | 121/221 [00:32<00:19,  5.05it/s][A
 55%|█████▌    | 122/221 [00:32<00:21,  4.68it/s][A
 56%|█████▌    | 123/221 [00:33<00:19,  4.95it/s][A
 56%|█████▌    | 124/221 [00:33<00:24,  3.95it/s][A
 57%|█████▋    | 125/221 [00:33<00:27,  3.44it/s][A
 57%|█████▋    | 126/221 [00:33<00:23,  3.98it/s][A
 57%|█████▋    | 127/221 [00:34<00:29,  3.20it/s][A
 58%|█████▊    | 128/221 [00:34<00:25,  3.66it/s][A
 59%|█████▉    | 130/221 [00:34<00:19,  4.68it/s][A
 59%|█████▉    | 131/221 [00:34<00:16,  5.37it/s][A
 60%|█████▉    | 132/221 [00:36<00:43,  2.04it/s][A
 60%|██████    | 133/221 [00:36<00:40,  2.19it/s][A
 61%|██████    | 134/221 [00:37<00:49,  1.76it/s][A
 61%|██████    | 135/221 [00:38<00:55,  1.55it/s][A
 62%|██████▏   | 136/221 [00:38<00:44,  1.92it/s][A
 62%|██████▏   | 137/221 [00:38<00:36,  2.33it/s][A
 62%|██████▏   | 138/221 [00:39<00:33,  2.47it/s][A
 63%|██████▎   | 139/221 [00:39<00:36,  2.27it/s][A
 63%|██████▎   | 140/221 [00:40<00:34,  2.36it/s][A
 64%|██████▍   | 141/221 [00:40<00:34,  2.35it/s][A
 64%|██████▍   | 142/221 [00:40<00:27,  2.84it/s][A
 65%|██████▍   | 143/221 [00:41<00:36,  2.16it/s][A
 65%|██████▌   | 144/221 [00:41<00:36,  2.12it/s][A
 66%|██████▌   | 146/221 [00:42<00:22,  3.37it/s][A
 67%|██████▋   | 147/221 [00:42<00:21,  3.40it/s][A
 67%|██████▋   | 148/221 [00:42<00:26,  2.72it/s][A
 67%|██████▋   | 149/221 [00:43<00:35,  2.03it/s][A
 68%|██████▊   | 150/221 [00:43<00:29,  2.38it/s][A
 68%|██████▊   | 151/221 [00:44<00:25,  2.70it/s][A
 69%|██████▉   | 152/221 [00:44<00:24,  2.78it/s][A
 69%|██████▉   | 153/221 [00:44<00:20,  3.31it/s][A
 70%|██████▉   | 154/221 [00:44<00:18,  3.62it/s][A
 70%|███████   | 155/221 [00:45<00:21,  3.03it/s][A
 71%|███████   | 156/221 [00:45<00:17,  3.75it/s][A
 71%|███████   | 157/221 [00:45<00:17,  3.67it/s][A
 71%|███████▏  | 158/221 [00:46<00:17,  3.61it/s][A
 72%|███████▏  | 159/221 [00:46<00:14,  4.29it/s][A
 73%|███████▎  | 161/221 [00:46<00:16,  3.65it/s][A
 73%|███████▎  | 162/221 [00:46<00:13,  4.31it/s][A
 74%|███████▍  | 163/221 [00:47<00:13,  4.22it/s][A
 74%|███████▍  | 164/221 [00:47<00:12,  4.59it/s][A
 75%|███████▍  | 165/221 [00:47<00:13,  4.02it/s][A
 75%|███████▌  | 166/221 [00:47<00:12,  4.33it/s][A
 76%|███████▌  | 167/221 [00:48<00:10,  5.11it/s][A
 76%|███████▌  | 168/221 [00:48<00:10,  5.18it/s][A
 77%|███████▋  | 170/221 [00:48<00:10,  5.09it/s][A
 77%|███████▋  | 171/221 [00:49<00:14,  3.50it/s][A
 78%|███████▊  | 172/221 [00:49<00:13,  3.68it/s][A
 78%|███████▊  | 173/221 [00:49<00:15,  3.08it/s][A
 79%|███████▊  | 174/221 [00:50<00:20,  2.34it/s][A
 79%|███████▉  | 175/221 [00:50<00:17,  2.59it/s][A
 80%|███████▉  | 176/221 [00:51<00:14,  3.08it/s][A
 81%|████████  | 178/221 [00:51<00:11,  3.72it/s][A
 81%|████████  | 179/221 [00:51<00:11,  3.78it/s][A
 81%|████████▏ | 180/221 [00:51<00:10,  4.08it/s][A
 82%|████████▏ | 182/221 [00:52<00:09,  4.04it/s][A
 83%|████████▎ | 183/221 [00:52<00:09,  4.01it/s][A
 83%|████████▎ | 184/221 [00:52<00:09,  3.72it/s][A
 84%|████████▎ | 185/221 [00:53<00:09,  3.83it/s][A
 84%|████████▍ | 186/221 [00:53<00:13,  2.65it/s][A
 85%|████████▍ | 187/221 [00:54<00:11,  2.92it/s][A
 85%|████████▌ | 188/221 [00:54<00:10,  3.05it/s][A
 86%|████████▌ | 189/221 [00:54<00:09,  3.51it/s][A
 86%|████████▌ | 190/221 [00:54<00:09,  3.35it/s][A
 87%|████████▋ | 192/221 [00:55<00:06,  4.36it/s][A
 87%|████████▋ | 193/221 [00:55<00:05,  4.93it/s][A
 88%|████████▊ | 194/221 [00:55<00:06,  4.10it/s][A
 88%|████████▊ | 195/221 [00:55<00:06,  4.15it/s][A
 89%|████████▊ | 196/221 [00:56<00:05,  4.34it/s][A
 89%|████████▉ | 197/221 [00:56<00:05,  4.49it/s][A
 90%|████████▉ | 198/221 [00:56<00:05,  4.58it/s][A
 90%|█████████ | 199/221 [00:56<00:05,  4.37it/s][A
 90%|█████████ | 200/221 [00:57<00:05,  4.18it/s][A
 91%|█████████ | 201/221 [00:57<00:04,  4.54it/s][A
 91%|█████████▏| 202/221 [00:57<00:04,  4.18it/s][A
 92%|█████████▏| 203/221 [00:57<00:03,  5.02it/s][A
 92%|█████████▏| 204/221 [00:58<00:04,  3.45it/s][A
 93%|█████████▎| 205/221 [00:58<00:03,  4.23it/s][A
 93%|█████████▎| 206/221 [00:58<00:04,  3.72it/s][A
 94%|█████████▎| 207/221 [00:58<00:03,  4.58it/s][A
 94%|█████████▍| 208/221 [00:58<00:02,  4.96it/s][A
 95%|█████████▍| 209/221 [00:59<00:02,  5.19it/s][A
 95%|█████████▌| 211/221 [00:59<00:02,  4.91it/s][A
 96%|█████████▌| 212/221 [00:59<00:02,  4.32it/s][A
 96%|█████████▋| 213/221 [00:59<00:01,  4.72it/s][A
 97%|█████████▋| 214/221 [01:00<00:03,  2.30it/s][A
 97%|█████████▋| 215/221 [01:01<00:02,  2.80it/s][A
 98%|█████████▊| 216/221 [01:01<00:01,  3.10it/s][A
 98%|█████████▊| 217/221 [01:01<00:01,  2.87it/s][A
 99%|█████████▊| 218/221 [01:02<00:01,  2.91it/s][A
 99%|█████████▉| 219/221 [01:02<00:00,  3.23it/s][A
100%|█████████▉| 220/221 [01:02<00:00,  3.76it/s][A
100%|██████████| 221/221 [01:02<00:00,  4.23it/s][A100%|██████████| 221/221 [01:02<00:00,  3.53it/s]
09/07/2024 13:56:27 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 599--===========

09/07/2024 13:56:27 - INFO - __main__ -   {'area_r1': 22.3, 'area_recall': '22.3/45.4/56.3', 'area_ravg': 41.3}
09/07/2024 13:56:27 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 599--===========

09/07/2024 13:56:27 - INFO - __main__ -   {'forward_r1': 36.1, 'forward_recall': '36.1/60.9/70.1', 'forward_ravg': 55.7}
09/07/2024 13:56:27 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 599--===========

09/07/2024 13:56:27 - INFO - __main__ -   {'area_video_r1': 38.5, 'area_video_recall': '38.5/64.7/73.4', 'area_video_ravg': 58.9}
09/07/2024 13:56:27 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 599=======

09/07/2024 13:56:27 - INFO - __main__ -   {'area_video_r1': 38.5, 'area_video_recall': '38.5/64.7/73.4', 'area_video_ravg': 58.9}
09/07/2024 13:56:27 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 599--===========

09/07/2024 13:56:27 - INFO - __main__ -   {'area_video_r1': 51.1, 'area_video_recall': '51.1/74.4/80.2', 'area_video_ravg': 68.6, 'area_video_back_r1': 49.1, 'area_video_back_recall': '49.1/72.5/80.4', 'area_video_back_ravg': 67.3}
09/07/2024 13:56:27 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 599=======

09/07/2024 13:56:27 - INFO - __main__ -   {'area_video_r1': 51.1, 'area_video_recall': '51.1/74.4/80.2', 'area_video_ravg': 68.6, 'area_video_back_r1': 49.1, 'area_video_back_recall': '49.1/72.5/80.4', 'area_video_back_ravg': 67.3}
09/07/2024 13:56:27 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 599--===========

09/07/2024 13:56:27 - INFO - __main__ -   {'video_r1': 41.1, 'video_recall': '41.1/70.9/80.8', 'video_ravg': 64.3}
09/07/2024 13:56:27 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 299=======

09/07/2024 13:56:27 - INFO - __main__ -   {'video_r1': 42.3, 'video_recall': '42.3/71.2/80.8', 'video_ravg': 64.7}
09/07/2024 13:56:27 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 599--===========

09/07/2024 13:56:27 - INFO - __main__ -   {'video_r1': 51.8, 'video_recall': '51.8/75.5/82.9', 'video_ravg': 70.1}
09/07/2024 13:56:27 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 599=======

09/07/2024 13:56:27 - INFO - __main__ -   {'video_r1': 51.8, 'video_recall': '51.8/75.5/82.9', 'video_ravg': 70.1}
09/07/2024 13:57:00 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.1689820289611816, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04667586833238602, 'loss_ret%tv%ta--finetune_area/loss_area': 2.656032085418701, 'loss_ret%tv%ta--finetune_area/total_loss': 5.871689796447754}
 31%|███       | 600/1945 [2:13:04<43:42:38, 117.00s/it] 31%|███       | 601/1945 [2:13:07<30:53:27, 82.74s/it]  31%|███       | 602/1945 [2:13:10<21:58:59, 58.93s/it] 31%|███       | 603/1945 [2:13:14<15:47:50, 42.38s/it][h264 @ 0x55fcd44f2e80] mmco: unref short failure
[h264 @ 0x55fcd44f2e80] mmco: unref short failure
 31%|███       | 604/1945 [2:13:18<11:31:26, 30.94s/it][h264 @ 0x55fcd0949b80] mmco: unref short failure
[h264 @ 0x55fcd0949b80] mmco: unref short failure
 31%|███       | 605/1945 [2:13:23<8:33:48, 23.01s/it] [h264 @ 0x556676f0e040] mmco: unref short failure
[h264 @ 0x556676f0e040] mmco: unref short failure
[h264 @ 0x55b8ed06e080] mmco: unref short failure
 31%|███       | 606/1945 [2:13:29<6:37:57, 17.83s/it][h264 @ 0x55b90b719640] mmco: unref short failure
 31%|███       | 607/1945 [2:13:34<5:15:18, 14.14s/it][h264 @ 0x556646e59b80] mmco: unref short failure
[h264 @ 0x5566859b3d00] mmco: unref short failure
[h264 @ 0x5566859b3d00] mmco: unref short failure
 31%|███▏      | 608/1945 [2:13:39<4:15:35, 11.47s/it] 31%|███▏      | 609/1945 [2:13:47<3:50:44, 10.36s/it][h264 @ 0x55ee423fac80] mmco: unref short failure
 31%|███▏      | 610/1945 [2:13:53<3:17:45,  8.89s/it] 31%|███▏      | 611/1945 [2:13:58<2:55:24,  7.89s/it][h264 @ 0x55fcd25c2bc0] mmco: unref short failure
[h264 @ 0x55b92d93aec0] mmco: unref short failure
[h264 @ 0x55b92d93aec0] mmco: unref short failure
 31%|███▏      | 612/1945 [2:14:05<2:45:12,  7.44s/it] 32%|███▏      | 613/1945 [2:14:10<2:31:00,  6.80s/it][h264 @ 0x5566743d0040] mmco: unref short failure
[h264 @ 0x5566743d0040] mmco: unref short failure
[h264 @ 0x55b92b910780] mmco: unref short failure
 32%|███▏      | 614/1945 [2:14:16<2:23:11,  6.45s/it][h264 @ 0x55b93082ae80] mmco: unref short failure
 32%|███▏      | 615/1945 [2:14:22<2:20:43,  6.35s/it][h264 @ 0x55668860e540] mmco: unref short failure
 32%|███▏      | 616/1945 [2:14:29<2:24:03,  6.50s/it][h264 @ 0x55ee32f42f00] mmco: unref short failure
[h264 @ 0x55ee32f42f00] mmco: unref short failure
[h264 @ 0x556679ed6dc0] mmco: unref short failure
 32%|███▏      | 617/1945 [2:14:37<2:35:50,  7.04s/it][h264 @ 0x55b932ce8040] mmco: unref short failure
[h264 @ 0x55b932ce8040] mmco: unref short failure
[h264 @ 0x55b932ce8040] mmco: unref short failure
[h264 @ 0x55b932ce8040] mmco: unref short failure
 32%|███▏      | 618/1945 [2:14:48<3:04:53,  8.36s/it][h264 @ 0x55b92e5aea00] mmco: unref short failure
[h264 @ 0x55b92e5aea00] mmco: unref short failure
 32%|███▏      | 619/1945 [2:14:55<2:52:25,  7.80s/it][h264 @ 0x55fcda2d3c00] mmco: unref short failure
 32%|███▏      | 620/1945 [2:15:00<2:37:49,  7.15s/it][h264 @ 0x55ee337a5080] mmco: unref short failure
[h264 @ 0x55ee337a5080] mmco: unref short failure
[h264 @ 0x5566804f2280] mmco: unref short failure
[h264 @ 0x5566804f2280] mmco: unref short failure
[h264 @ 0x55ee43eb2500] mmco: unref short failure
 32%|███▏      | 621/1945 [2:15:11<3:03:36,  8.32s/it][h264 @ 0x55ee3993c740] mmco: unref short failure
 32%|███▏      | 622/1945 [2:15:16<2:40:47,  7.29s/it][h264 @ 0x55b928988dc0] mmco: unref short failure
[h264 @ 0x55b92d780e80] mmco: unref short failure
 32%|███▏      | 623/1945 [2:15:22<2:30:45,  6.84s/it][h264 @ 0x55fcdd827300] mmco: unref short failure
[h264 @ 0x55b90c2c6d40] mmco: unref short failure
[h264 @ 0x55667a6fd740] mmco: unref short failure
[h264 @ 0x55667a6fd740] mmco: unref short failure
not have audios 8-qwaveiHMM.3
[h264 @ 0x55ee36d142c0] mmco: unref short failure
[h264 @ 0x55ee343e2080] mmco: unref short failure
[h264 @ 0x55ee343e2080] mmco: unref short failure
[h264 @ 0x55b8eb487900] mmco: unref short failure
[h264 @ 0x55b8eb487900] mmco: unref short failure
 32%|███▏      | 624/1945 [2:16:06<6:35:29, 17.96s/it][h264 @ 0x55fccbc06b40] mmco: unref short failure
[h264 @ 0x55fccbc06b40] mmco: unref short failure
[h264 @ 0x55ee2f613540] mmco: unref short failure
[h264 @ 0x55ee2f613540] mmco: unref short failure
 32%|███▏      | 625/1945 [2:16:18<5:52:33, 16.03s/it][h264 @ 0x55b9308008c0] mmco: unref short failure
[h264 @ 0x55b9308008c0] mmco: unref short failure
[h264 @ 0x55667dfb2e80] mmco: unref short failure
[h264 @ 0x55667dfb2e80] mmco: unref short failure
 32%|███▏      | 626/1945 [2:16:27<5:09:22, 14.07s/it][h264 @ 0x55b92c9aba00] mmco: unref short failure
 32%|███▏      | 627/1945 [2:16:33<4:18:20, 11.76s/it] 32%|███▏      | 628/1945 [2:16:42<3:54:39, 10.69s/it][h264 @ 0x55fcd427b600] mmco: unref short failure
 32%|███▏      | 629/1945 [2:16:48<3:25:58,  9.39s/it][h264 @ 0x55ee331f8d80] mmco: unref short failure
[h264 @ 0x55ee3c221940] mmco: unref short failure
 32%|███▏      | 630/1945 [2:16:55<3:07:40,  8.56s/it][h264 @ 0x55ee03967c40] mmco: unref short failure
[h264 @ 0x55fcde04ccc0] mmco: unref short failure
 32%|███▏      | 631/1945 [2:17:00<2:48:29,  7.69s/it][h264 @ 0x55fcd9f312c0] mmco: unref short failure
[h264 @ 0x5566807943c0] mmco: unref short failure
[h264 @ 0x5566807943c0] mmco: unref short failure
[h264 @ 0x5566807943c0] mmco: unref short failure
[h264 @ 0x55b90ca44940] mmco: unref short failure
 32%|███▏      | 632/1945 [2:17:44<6:42:58, 18.42s/it][h264 @ 0x55b933c89b00] mmco: unref short failure
[h264 @ 0x55b933c89b00] mmco: unref short failure
 33%|███▎      | 633/1945 [2:17:56<6:02:30, 16.58s/it] 33%|███▎      | 634/1945 [2:18:07<5:27:23, 14.98s/it][h264 @ 0x55fcd9f312c0] mmco: unref short failure
[h264 @ 0x55fcd9f312c0] mmco: unref short failure
 33%|███▎      | 635/1945 [2:18:13<4:25:56, 12.18s/it] 33%|███▎      | 636/1945 [2:18:19<3:42:37, 10.20s/it] 33%|███▎      | 637/1945 [2:18:27<3:31:11,  9.69s/it][h264 @ 0x55ee390cb240] mmco: unref short failure
[h264 @ 0x55ee390cb240] mmco: unref short failure
 33%|███▎      | 638/1945 [2:18:36<3:25:13,  9.42s/it] 33%|███▎      | 639/1945 [2:18:41<2:57:57,  8.18s/it][h264 @ 0x55fcd8805f40] mmco: unref short failure
[h264 @ 0x55b90bf87b40] mmco: unref short failure
[h264 @ 0x55b90bf87b40] mmco: unref short failure
[h264 @ 0x55b8ef5ed280] mmco: unref short failure
[h264 @ 0x55b930336500] mmco: unref short failure
[h264 @ 0x55b930336500] mmco: unref short failure
[h264 @ 0x55b92f4fca40] mmco: unref short failure
[h264 @ 0x55b92f4fca40] mmco: unref short failure
[h264 @ 0x55ee41b71ec0] mmco: unref short failure
[h264 @ 0x55ee41b71ec0] mmco: unref short failure
[h264 @ 0x55fcd20b93c0] mmco: unref short failure
[h264 @ 0x556648242ac0] mmco: unref short failure
[h264 @ 0x556648242ac0] mmco: unref short failure
 33%|███▎      | 640/1945 [2:19:30<7:20:33, 20.26s/it][h264 @ 0x55fcd308ea00] mmco: unref short failure
[h264 @ 0x55fcd308ea00] mmco: unref short failure
[h264 @ 0x55b928c63e00] mmco: unref short failure
[h264 @ 0x55ee30677200] mmco: unref short failure
[h264 @ 0x55ee30677200] mmco: unref short failure
[h264 @ 0x55ee30677200] mmco: unref short failure
[h264 @ 0x55ee30677200] mmco: unref short failure
 33%|███▎      | 641/1945 [2:19:36<5:51:48, 16.19s/it][h264 @ 0x55ee2ff8ebc0] mmco: unref short failure
[h264 @ 0x55ee2ff8ebc0] mmco: unref short failure
[h264 @ 0x556680019340] mmco: unref short failure
[h264 @ 0x556680019340] mmco: unref short failure
[h264 @ 0x55b8ec8cd3c0] mmco: unref short failure
[h264 @ 0x55b8ec8cd3c0] mmco: unref short failure
 33%|███▎      | 642/1945 [2:19:50<5:35:42, 15.46s/it] 33%|███▎      | 643/1945 [2:19:55<4:28:25, 12.37s/it] 33%|███▎      | 644/1945 [2:20:09<4:35:51, 12.72s/it] 33%|███▎      | 645/1945 [2:20:15<3:51:29, 10.68s/it][h264 @ 0x55fcd67559c0] mmco: unref short failure
[h264 @ 0x55fcd67559c0] mmco: unref short failure
 33%|███▎      | 646/1945 [2:20:20<3:15:39,  9.04s/it] 33%|███▎      | 647/1945 [2:20:25<2:52:31,  7.97s/it][h264 @ 0x55ee3862e240] mmco: unref short failure
[h264 @ 0x55ee3862e240] mmco: unref short failure
[h264 @ 0x55ee3a9b0440] mmco: unref short failure
[h264 @ 0x55ee3a9b0440] mmco: unref short failure
[h264 @ 0x556678a4db00] mmco: unref short failure
[h264 @ 0x556678a4db00] mmco: unref short failure
[h264 @ 0x55fccc26b040] mmco: unref short failure
[h264 @ 0x55fccc26b040] mmco: unref short failure
[h264 @ 0x55b8ebcc0c00] mmco: unref short failure
[h264 @ 0x556688822ec0] mmco: unref short failure
[h264 @ 0x556688822ec0] mmco: unref short failure
[h264 @ 0x55ee3cffa200] mmco: unref short failure
[h264 @ 0x55ee3cffa200] mmco: unref short failure
[h264 @ 0x55ee3cffa200] mmco: unref short failure
[h264 @ 0x55ee3cffa200] mmco: unref short failure
[h264 @ 0x55ee0398bb80] mmco: unref short failure
[h264 @ 0x55b92a444580] mmco: unref short failure
[h264 @ 0x55b92a444580] mmco: unref short failure
 33%|███▎      | 648/1945 [2:21:02<6:01:40, 16.73s/it][h264 @ 0x55b8f1ed05c0] mmco: unref short failure
[h264 @ 0x55b8f1ed05c0] mmco: unref short failure
 33%|███▎      | 649/1945 [2:21:15<5:37:02, 15.60s/it][h264 @ 0x5566809920c0] mmco: unref short failure
[h264 @ 0x55fcdf07a640] mmco: unref short failure
[h264 @ 0x55fcdf07a640] mmco: unref short failure
09/07/2024 14:05:24 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.2650914192199707, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.046557389199733734, 'loss_ret%tv%ta--finetune_area/loss_area': 2.727541208267212, 'loss_ret%tv%ta--finetune_area/total_loss': 6.039190292358398}
[h264 @ 0x55668726ad80] mmco: unref short failure
[h264 @ 0x55668726ad80] mmco: unref short failure
 33%|███▎      | 650/1945 [2:21:30<5:31:03, 15.34s/it] 33%|███▎      | 651/1945 [2:21:37<4:35:04, 12.75s/it][h264 @ 0x55b8ecca8a00] mmco: unref short failure
 34%|███▎      | 652/1945 [2:21:48<4:21:26, 12.13s/it][h264 @ 0x5566801a7ec0] mmco: unref short failure
[h264 @ 0x5566801a7ec0] mmco: unref short failure
 34%|███▎      | 653/1945 [2:21:53<3:39:32, 10.20s/it][h264 @ 0x55fcd15b4940] mmco: unref short failure
 34%|███▎      | 654/1945 [2:21:59<3:12:19,  8.94s/it] 34%|███▎      | 655/1945 [2:22:05<2:48:37,  7.84s/it][h264 @ 0x55667f634b80] mmco: unref short failure
[h264 @ 0x55667f634b80] mmco: unref short failure
[h264 @ 0x556687ffe980] mmco: unref short failure
[h264 @ 0x556687ffe980] mmco: unref short failure
[h264 @ 0x55fc8d2ccf80] mmco: unref short failure
[h264 @ 0x55fc8d2ccf80] mmco: unref short failure
[h264 @ 0x55b92cf33480] mmco: unref short failure
[h264 @ 0x55b92cf33480] mmco: unref short failure
[h264 @ 0x55fcde03ce80] mmco: unref short failure
[h264 @ 0x55fcde03ce80] mmco: unref short failure
[h264 @ 0x556682952600] mmco: unref short failure
[h264 @ 0x556682952600] mmco: unref short failure
 34%|███▎      | 656/1945 [2:22:43<6:03:54, 16.94s/it][h264 @ 0x55ee34e2d840] mmco: unref short failure
[h264 @ 0x55ee34e2d840] mmco: unref short failure
[h264 @ 0x55b92a05b740] mmco: unref short failure
[h264 @ 0x55b92a05b740] mmco: unref short failure
 34%|███▍      | 657/1945 [2:22:53<5:21:59, 15.00s/it][h264 @ 0x55667d183900] mmco: unref short failure
[h264 @ 0x55667d183900] mmco: unref short failure
 34%|███▍      | 658/1945 [2:23:10<5:30:26, 15.40s/it] 34%|███▍      | 659/1945 [2:23:16<4:35:30, 12.85s/it][h264 @ 0x55fcce884d80] mmco: unref short failure
[h264 @ 0x55fcce884d80] mmco: unref short failure
 34%|███▍      | 660/1945 [2:23:28<4:28:04, 12.52s/it][h264 @ 0x55fcce884f80] mmco: unref short failure
[h264 @ 0x55fccc834940] mmco: unref short failure
[h264 @ 0x55fccc834940] mmco: unref short failure
 34%|███▍      | 661/1945 [2:23:34<3:44:30, 10.49s/it][h264 @ 0x55fcca8db940] mmco: unref short failure
 34%|███▍      | 662/1945 [2:23:40<3:16:07,  9.17s/it] 34%|███▍      | 663/1945 [2:23:46<2:54:51,  8.18s/it][h264 @ 0x55ee41324b80] mmco: unref short failure
[h264 @ 0x55ee3ac79840] mmco: unref short failure
[h264 @ 0x55fc8dd99000] mmco: unref short failure
[h264 @ 0x55fc8dd99000] mmco: unref short failure
[h264 @ 0x55fc8dd99000] mmco: unref short failure
[h264 @ 0x55fc8dd99000] mmco: unref short failure
[h264 @ 0x55fcce5b4e40] mmco: unref short failure
[h264 @ 0x55b92ca4ac40] mmco: unref short failure
 34%|███▍      | 664/1945 [2:24:27<6:24:03, 17.99s/it][h264 @ 0x55fcd11d7740] mmco: unref short failure
[h264 @ 0x55ee3b8d7d00] mmco: unref short failure
[h264 @ 0x55ee3b8d7d00] mmco: unref short failure
 34%|███▍      | 665/1945 [2:24:37<5:36:54, 15.79s/it][h264 @ 0x55b90bce6d80] mmco: unref short failure
[h264 @ 0x55b90bce6d80] mmco: unref short failure
[h264 @ 0x55fcdbd8ea80] mmco: unref short failure
[h264 @ 0x55fcdbd8ea80] mmco: unref short failure
[h264 @ 0x556673f57500] mmco: unref short failure
[h264 @ 0x556673f57500] mmco: unref short failure
 34%|███▍      | 666/1945 [2:24:49<5:06:46, 14.39s/it][h264 @ 0x55b92ef05440] mmco: unref short failure
[h264 @ 0x55b92ef05440] mmco: unref short failure
 34%|███▍      | 667/1945 [2:24:54<4:10:13, 11.75s/it][h264 @ 0x55b8eee31880] mmco: unref short failure
[h264 @ 0x55b8eee31880] mmco: unref short failure
[h264 @ 0x55fcd90675c0] mmco: unref short failure
[h264 @ 0x55fcd90675c0] mmco: unref short failure
 34%|███▍      | 668/1945 [2:25:12<4:47:59, 13.53s/it][h264 @ 0x55fc8cfdbbc0] mmco: unref short failure
 34%|███▍      | 669/1945 [2:25:17<3:56:26, 11.12s/it] 34%|███▍      | 670/1945 [2:25:25<3:33:49, 10.06s/it] 34%|███▍      | 671/1945 [2:25:31<3:07:38,  8.84s/it][h264 @ 0x55fccc511700] mmco: unref short failure
[h264 @ 0x55fccc511700] mmco: unref short failure
[h264 @ 0x556674416140] mmco: unref short failure
[h264 @ 0x556674416140] mmco: unref short failure
[h264 @ 0x5566847b6f00] mmco: unref short failure
[h264 @ 0x5566847b6f00] mmco: unref short failure
[h264 @ 0x55fcd0932b80] mmco: unref short failure
[h264 @ 0x55ee0412c900] mmco: unref short failure
[h264 @ 0x55ee0412c900] mmco: unref short failure
[h264 @ 0x55ee40301d40] mmco: unref short failure
[h264 @ 0x556683504d80] mmco: unref short failure
[h264 @ 0x556683504d80] mmco: unref short failure
 35%|███▍      | 672/1945 [2:26:03<5:34:25, 15.76s/it][h264 @ 0x55ee3c3829c0] mmco: unref short failure
[h264 @ 0x55ee3c3829c0] mmco: unref short failure
 35%|███▍      | 673/1945 [2:26:16<5:18:43, 15.03s/it] 35%|███▍      | 674/1945 [2:26:28<5:00:24, 14.18s/it] 35%|███▍      | 675/1945 [2:26:34<4:04:35, 11.56s/it] 35%|███▍      | 676/1945 [2:26:54<5:01:18, 14.25s/it] 35%|███▍      | 677/1945 [2:27:00<4:09:48, 11.82s/it] 35%|███▍      | 678/1945 [2:27:06<3:29:13,  9.91s/it] 35%|███▍      | 679/1945 [2:27:12<3:03:13,  8.68s/it][h264 @ 0x55b92ca4a9c0] mmco: unref short failure
[h264 @ 0x55b92ca4a9c0] mmco: unref short failure
[h264 @ 0x55b8f0c0afc0] mmco: unref short failure
[h264 @ 0x55b8f0c0afc0] mmco: unref short failure
 35%|███▍      | 680/1945 [2:27:41<5:10:24, 14.72s/it][h264 @ 0x55fcde5d2580] mmco: unref short failure
[h264 @ 0x55fcde5d2580] mmco: unref short failure
[h264 @ 0x55b92ca4ac40] mmco: unref short failure
[h264 @ 0x55b92ca4ac40] mmco: unref short failure
[h264 @ 0x55b90bfd3080] mmco: unref short failure
 35%|███▌      | 681/1945 [2:27:57<5:19:49, 15.18s/it][h264 @ 0x55ee306e6580] mmco: unref short failure
[h264 @ 0x55fcd9b81900] mmco: unref short failure
[h264 @ 0x55fcd9b81900] mmco: unref short failure
 35%|███▌      | 682/1945 [2:28:11<5:16:02, 15.01s/it] 35%|███▌      | 683/1945 [2:28:17<4:14:56, 12.12s/it][h264 @ 0x55b90c749d40] mmco: unref short failure
 35%|███▌      | 684/1945 [2:28:33<4:38:35, 13.26s/it][h264 @ 0x55fccaa845c0] mmco: unref short failure
 35%|███▌      | 685/1945 [2:28:37<3:45:12, 10.72s/it] 35%|███▌      | 686/1945 [2:28:43<3:13:09,  9.20s/it] 35%|███▌      | 687/1945 [2:28:49<2:49:16,  8.07s/it][h264 @ 0x55668698ea40] mmco: unref short failure
[h264 @ 0x55668698ea40] mmco: unref short failure
[h264 @ 0x55667497bc80] mmco: unref short failure
[h264 @ 0x55ee43545900] mmco: unref short failure
[h264 @ 0x55fccaa845c0] mmco: unref short failure
[h264 @ 0x556647eb2800] mmco: unref short failure
[h264 @ 0x55fcde3b3240] mmco: unref short failure
[h264 @ 0x55fcdca22880] mmco: unref short failure
[h264 @ 0x55fcdca22880] mmco: unref short failure
[h264 @ 0x55ee3effd580] mmco: unref short failure
[h264 @ 0x55ee3effd580] mmco: unref short failure
[h264 @ 0x55b92b98cf80] mmco: unref short failure
[h264 @ 0x556680594400] mmco: unref short failure
[h264 @ 0x556680594400] mmco: unref short failure
[h264 @ 0x55b8eb45c600] mmco: unref short failure
 35%|███▌      | 688/1945 [2:29:21<5:24:26, 15.49s/it] 35%|███▌      | 689/1945 [2:29:37<5:23:58, 15.48s/it][h264 @ 0x55ee42994c80] mmco: unref short failure
[h264 @ 0x556647c01140] mmco: unref short failure
[h264 @ 0x556647c01140] mmco: unref short failure
[h264 @ 0x55ee3b855e40] mmco: unref short failure
[h264 @ 0x55ee3b855e40] mmco: unref short failure
[h264 @ 0x55ee3df76500] mmco: unref short failure
[h264 @ 0x55ee3df76500] mmco: unref short failure
 35%|███▌      | 690/1945 [2:29:51<5:12:58, 14.96s/it] 36%|███▌      | 691/1945 [2:29:56<4:14:32, 12.18s/it][h264 @ 0x55b92e73b1c0] mmco: unref short failure
[h264 @ 0x55b929f1e700] mmco: unref short failure
[h264 @ 0x55ee3cca7840] mmco: unref short failure
[h264 @ 0x55ee3b855e40] mmco: unref short failure
[h264 @ 0x55b930b15740] mmco: unref short failure
 36%|███▌      | 692/1945 [2:30:16<5:03:26, 14.53s/it][h264 @ 0x55ee04402e80] mmco: unref short failure
[h264 @ 0x55ee04402e80] mmco: unref short failure
 36%|███▌      | 693/1945 [2:30:22<4:06:36, 11.82s/it][h264 @ 0x55ee410986c0] mmco: unref short failure
[h264 @ 0x55ee410986c0] mmco: unref short failure
 36%|███▌      | 694/1945 [2:30:28<3:29:17, 10.04s/it] 36%|███▌      | 695/1945 [2:30:33<3:02:22,  8.75s/it][h264 @ 0x55b8ee29b300] mmco: unref short failure
[h264 @ 0x55b8ee29b300] mmco: unref short failure
[h264 @ 0x55ee300fa100] mmco: unref short failure
[h264 @ 0x55ee300fa100] mmco: unref short failure
[h264 @ 0x55b92d7a3b00] mmco: unref short failure
[h264 @ 0x55b92d7a3b00] mmco: unref short failure
[h264 @ 0x556682220a00] mmco: unref short failure
[h264 @ 0x556682220a00] mmco: unref short failure
 36%|███▌      | 696/1945 [2:31:06<5:28:02, 15.76s/it][h264 @ 0x55667e585980] mmco: unref short failure
[h264 @ 0x55667e585980] mmco: unref short failure
[h264 @ 0x55b929745300] mmco: unref short failure
[h264 @ 0x55b929745300] mmco: unref short failure
[h264 @ 0x55fcd5b7d000] mmco: unref short failure
[h264 @ 0x55fcd5b7d000] mmco: unref short failure
[h264 @ 0x55667f8e3640] mmco: unref short failure
 36%|███▌      | 697/1945 [2:31:16<4:54:35, 14.16s/it] 36%|███▌      | 698/1945 [2:31:33<5:14:46, 15.15s/it][h264 @ 0x55fcd4a23680] mmco: unref short failure
[h264 @ 0x55fcd4a23680] mmco: unref short failure
[h264 @ 0x55fce133c040] mmco: unref short failure
[h264 @ 0x55fce133c040] mmco: unref short failure
 36%|███▌      | 699/1945 [2:31:39<4:13:31, 12.21s/it][h264 @ 0x55b92a42bbc0] mmco: unref short failure
09/07/2024 14:15:48 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.2001090049743652, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.042063158005476, 'loss_ret%tv%ta--finetune_area/loss_area': 2.6186680793762207, 'loss_ret%tv%ta--finetune_area/total_loss': 5.860840320587158}
 36%|███▌      | 700/1945 [2:31:54<4:30:27, 13.03s/it] 36%|███▌      | 701/1945 [2:31:59<3:42:14, 10.72s/it][h264 @ 0x55ee32271a80] mmco: unref short failure
 36%|███▌      | 702/1945 [2:32:04<3:09:00,  9.12s/it] 36%|███▌      | 703/1945 [2:32:10<2:46:41,  8.05s/it][h264 @ 0x55ee3bb83a40] mmco: unref short failure
[h264 @ 0x55ee3bb83a40] mmco: unref short failure
[h264 @ 0x55ee4113be80] mmco: unref short failure
[h264 @ 0x55ee4113be80] mmco: unref short failure
[h264 @ 0x55b8f0db8000] mmco: unref short failure
[h264 @ 0x55ee30792480] mmco: unref short failure
[h264 @ 0x55ee30792480] mmco: unref short failure
[h264 @ 0x55ee3493d7c0] mmco: unref short failure
[h264 @ 0x55b92c8f8c80] mmco: unref short failure
[h264 @ 0x55b92c8f8c80] mmco: unref short failure
[h264 @ 0x55b92d7902c0] mmco: unref short failure
[h264 @ 0x55b92d7902c0] mmco: unref short failure
 36%|███▌      | 704/1945 [2:32:44<5:29:58, 15.95s/it][h264 @ 0x556675149640] mmco: unref short failure
[h264 @ 0x5566773cc6c0] mmco: unref short failure
[h264 @ 0x5566773cc6c0] mmco: unref short failure
[h264 @ 0x5566773cc6c0] mmco: unref short failure
 36%|███▌      | 705/1945 [2:32:54<4:48:52, 13.98s/it][h264 @ 0x55fcdc2b18c0] mmco: unref short failure
[h264 @ 0x5566892c7dc0] mmco: unref short failure
[h264 @ 0x55fcdec17200] mmco: unref short failure
 36%|███▋      | 706/1945 [2:33:08<4:53:07, 14.20s/it] 36%|███▋      | 707/1945 [2:33:15<4:03:06, 11.78s/it][h264 @ 0x55ee38aaf840] mmco: unref short failure
[h264 @ 0x55ee38aaf840] mmco: unref short failure
[h264 @ 0x556686d78f40] mmco: unref short failure
[h264 @ 0x556686d78f40] mmco: unref short failure
 36%|███▋      | 708/1945 [2:33:33<4:41:18, 13.64s/it][h264 @ 0x55fcd3569b80] mmco: unref short failure
[h264 @ 0x55fcd3569b80] mmco: unref short failure
 36%|███▋      | 709/1945 [2:33:38<3:52:05, 11.27s/it][h264 @ 0x5566872ee540] mmco: unref short failure
[h264 @ 0x5566872ee540] mmco: unref short failure
 37%|███▋      | 710/1945 [2:33:44<3:15:59,  9.52s/it] 37%|███▋      | 711/1945 [2:33:49<2:51:50,  8.36s/it][h264 @ 0x55b8ec544b00] mmco: unref short failure
[h264 @ 0x55b8ec544b00] mmco: unref short failure
[h264 @ 0x55b8ea536f00] mmco: unref short failure
[h264 @ 0x55668779b600] mmco: unref short failure
 37%|███▋      | 712/1945 [2:34:20<5:08:35, 15.02s/it][h264 @ 0x5566818f08c0] mmco: unref short failure
[h264 @ 0x5566818f08c0] mmco: unref short failure
 37%|███▋      | 713/1945 [2:34:34<5:03:29, 14.78s/it][h264 @ 0x55ee46c739c0] mmco: unref short failure
[h264 @ 0x55ee46c739c0] mmco: unref short failure
[h264 @ 0x55fccbe26700] mmco: unref short failure
[h264 @ 0x55fccbe26700] mmco: unref short failure
 37%|███▋      | 714/1945 [2:34:53<5:27:20, 15.96s/it] 37%|███▋      | 715/1945 [2:34:58<4:22:55, 12.83s/it][h264 @ 0x55fccec8ee00] mmco: unref short failure
[h264 @ 0x55fcd8d24480] mmco: unref short failure
[h264 @ 0x55fcca48da80] mmco: unref short failure
[h264 @ 0x55fcca48da80] mmco: unref short failure
 37%|███▋      | 716/1945 [2:35:11<4:22:07, 12.80s/it] 37%|███▋      | 717/1945 [2:35:18<3:45:43, 11.03s/it][h264 @ 0x55667d589180] mmco: unref short failure
[h264 @ 0x55ee3cec3900] mmco: unref short failure
[h264 @ 0x55ee3cec3900] mmco: unref short failure
 37%|███▋      | 718/1945 [2:35:24<3:15:19,  9.55s/it] 37%|███▋      | 719/1945 [2:35:30<2:50:07,  8.33s/it][h264 @ 0x55b8f08b3780] mmco: unref short failure
[h264 @ 0x55b8f08b3780] mmco: unref short failure
[h264 @ 0x55ee03a22e40] mmco: unref short failure
[h264 @ 0x55ee2ff00e80] mmco: unref short failure
[h264 @ 0x55ee2ff00e80] mmco: unref short failure
[h264 @ 0x556680a42d40] mmco: unref short failure
[h264 @ 0x5566872ee540] mmco: unref short failure
[h264 @ 0x5566872ee540] mmco: unref short failure
[h264 @ 0x5566872ee540] mmco: unref short failure
[h264 @ 0x5566872ee540] mmco: unref short failure
[h264 @ 0x55fcd55dc700] mmco: unref short failure
[h264 @ 0x55fcd55dc700] mmco: unref short failure
 37%|███▋      | 720/1945 [2:36:01<5:08:38, 15.12s/it] 37%|███▋      | 721/1945 [2:36:14<4:58:15, 14.62s/it][h264 @ 0x55ee39d18040] mmco: unref short failure
[h264 @ 0x55ee39d18040] mmco: unref short failure
[h264 @ 0x55ee3c03bb80] mmco: unref short failure
[h264 @ 0x55ee3c03bb80] mmco: unref short failure
[h264 @ 0x55667eb56140] mmco: unref short failure
 37%|███▋      | 722/1945 [2:36:34<5:33:40, 16.37s/it][h264 @ 0x55ee3c382d40] mmco: unref short failure
[h264 @ 0x55ee3c382d40] mmco: unref short failure
 37%|███▋      | 723/1945 [2:36:41<4:31:02, 13.31s/it][h264 @ 0x55ee3170db80] mmco: unref short failure
[h264 @ 0x55ee3170db80] mmco: unref short failure
[h264 @ 0x55fccb5d71c0] mmco: unref short failure
 37%|███▋      | 724/1945 [2:36:49<4:03:22, 11.96s/it][h264 @ 0x55b9329bdcc0] mmco: unref short failure
 37%|███▋      | 725/1945 [2:36:55<3:26:30, 10.16s/it][h264 @ 0x55b8f09b3700] mmco: unref short failure
[h264 @ 0x55b8f09b3700] mmco: unref short failure
 37%|███▋      | 726/1945 [2:37:05<3:22:36,  9.97s/it] 37%|███▋      | 727/1945 [2:37:11<2:58:31,  8.79s/it][h264 @ 0x55fcd47de600] mmco: unref short failure
[h264 @ 0x55ee308c7a00] mmco: unref short failure
[h264 @ 0x55ee308c7a00] mmco: unref short failure
[h264 @ 0x55ee3af65cc0] mmco: unref short failure
[h264 @ 0x55b930afd880] mmco: unref short failure
[h264 @ 0x55b930afd880] mmco: unref short failure
[h264 @ 0x55ee31f9f340] mmco: unref short failure
 37%|███▋      | 728/1945 [2:37:42<5:15:00, 15.53s/it][h264 @ 0x55667a0376c0] mmco: unref short failure
[h264 @ 0x55b90bb18dc0] mmco: unref short failure
 37%|███▋      | 729/1945 [2:37:54<4:52:17, 14.42s/it][h264 @ 0x55ee4027ad00] mmco: unref short failure
[h264 @ 0x55b92cfdfe40] mmco: unref short failure
[h264 @ 0x55b92cfdfe40] mmco: unref short failure
[h264 @ 0x55b8ed278900] mmco: unref short failure
 38%|███▊      | 730/1945 [2:38:14<5:26:56, 16.14s/it] 38%|███▊      | 731/1945 [2:38:21<4:27:48, 13.24s/it][h264 @ 0x55668622c440] mmco: unref short failure
[h264 @ 0x55668622c440] mmco: unref short failure
 38%|███▊      | 732/1945 [2:38:32<4:14:49, 12.60s/it][h264 @ 0x55b8eaa27ec0] mmco: unref short failure
[h264 @ 0x55668a652d80] mmco: unref short failure
[h264 @ 0x55668a652d80] mmco: unref short failure
 38%|███▊      | 733/1945 [2:38:38<3:35:39, 10.68s/it] 38%|███▊      | 734/1945 [2:38:44<3:04:31,  9.14s/it][h264 @ 0x55fc8cc242c0] mmco: unref short failure
[h264 @ 0x55fc8cc242c0] mmco: unref short failure
 38%|███▊      | 735/1945 [2:38:50<2:45:56,  8.23s/it][h264 @ 0x55b8ed6018c0] mmco: unref short failure
[h264 @ 0x55b8ed6018c0] mmco: unref short failure
[h264 @ 0x55fcdd886440] mmco: unref short failure
[h264 @ 0x55fcdd886440] mmco: unref short failure
[h264 @ 0x556677f60f00] mmco: unref short failure
[h264 @ 0x556677f60f00] mmco: unref short failure
[h264 @ 0x55fcd6a06640] mmco: unref short failure
[h264 @ 0x55fcd6a06640] mmco: unref short failure
[h264 @ 0x55ee463ea9c0] mmco: unref short failure
[h264 @ 0x55ee38b76700] mmco: unref short failure
 38%|███▊      | 736/1945 [2:39:22<5:11:04, 15.44s/it][h264 @ 0x55b8ebfeea00] mmco: unref short failure
[h264 @ 0x55b8ebfeea00] mmco: unref short failure
 38%|███▊      | 737/1945 [2:39:37<5:06:39, 15.23s/it][h264 @ 0x55b8ed6018c0] mmco: unref short failure
[h264 @ 0x55b8ed6018c0] mmco: unref short failure
[h264 @ 0x55ee3af8b140] mmco: unref short failure
[h264 @ 0x55ee3af8b140] mmco: unref short failure
[h264 @ 0x55b8ea6021c0] mmco: unref short failure
[h264 @ 0x55ee32deb280] mmco: unref short failure
[h264 @ 0x55ee32deb280] mmco: unref short failure
[h264 @ 0x55667de69b00] mmco: unref short failure
 38%|███▊      | 738/1945 [2:39:55<5:22:20, 16.02s/it][h264 @ 0x55ee3296da00] mmco: unref short failure
[h264 @ 0x55ee3296da00] mmco: unref short failure
 38%|███▊      | 739/1945 [2:40:00<4:18:58, 12.88s/it][h264 @ 0x556685d07e80] mmco: unref short failure
[h264 @ 0x55b929fb2ac0] mmco: unref short failure
[h264 @ 0x55b90a9ada00] mmco: unref short failure
[h264 @ 0x55b90a9ada00] mmco: unref short failure
 38%|███▊      | 740/1945 [2:40:11<4:08:33, 12.38s/it] 38%|███▊      | 741/1945 [2:40:18<3:36:01, 10.77s/it] 38%|███▊      | 742/1945 [2:40:25<3:11:26,  9.55s/it][h264 @ 0x556680c5eb80] mmco: unref short failure
[h264 @ 0x556680c5eb80] mmco: unref short failure
 38%|███▊      | 743/1945 [2:40:31<2:47:13,  8.35s/it][h264 @ 0x556673fe6dc0] mmco: unref short failure
[h264 @ 0x556673fe6dc0] mmco: unref short failure
[h264 @ 0x55ee44389fc0] mmco: unref short failure
[h264 @ 0x55ee44389fc0] mmco: unref short failure
[h264 @ 0x55668759c300] mmco: unref short failure
[h264 @ 0x55668759c300] mmco: unref short failure
[h264 @ 0x55ee31a3b280] mmco: unref short failure
[h264 @ 0x55ee31a3b280] mmco: unref short failure
[h264 @ 0x55b8f1774c00] mmco: unref short failure
[h264 @ 0x55fcd184c800] mmco: unref short failure
[h264 @ 0x55fccf466c00] mmco: unref short failure
[h264 @ 0x55fccf466c00] mmco: unref short failure
[h264 @ 0x55fccf466c00] mmco: unref short failure
[h264 @ 0x55fccf466c00] mmco: unref short failure
 38%|███▊      | 744/1945 [2:40:59<4:47:53, 14.38s/it][h264 @ 0x55ee34ffdec0] mmco: unref short failure
[h264 @ 0x55ee34ffdec0] mmco: unref short failure
 38%|███▊      | 745/1945 [2:41:14<4:53:37, 14.68s/it][h264 @ 0x55fccb5d71c0] mmco: unref short failure
[h264 @ 0x55fccb5d71c0] mmco: unref short failure
[h264 @ 0x55ee47835200] mmco: unref short failure
[h264 @ 0x55ee47835200] mmco: unref short failure
[h264 @ 0x556685d34600] mmco: unref short failure
[h264 @ 0x556685d34600] mmco: unref short failure
[h264 @ 0x55fcd1c218c0] mmco: unref short failure
[h264 @ 0x55fcd1c218c0] mmco: unref short failure
[h264 @ 0x556675149640] mmco: unref short failure
[h264 @ 0x556675149640] mmco: unref short failure
[h264 @ 0x55fc8d3d09c0] mmco: unref short failure
[h264 @ 0x55fc8d3d09c0] mmco: unref short failure
[h264 @ 0x55ee3667b0c0] mmco: unref short failure
[h264 @ 0x55ee3667b0c0] mmco: unref short failure
 38%|███▊      | 746/1945 [2:41:36<5:32:55, 16.66s/it] 38%|███▊      | 747/1945 [2:41:41<4:25:45, 13.31s/it][h264 @ 0x55ee43a32c40] mmco: unref short failure
[h264 @ 0x55ee43a32c40] mmco: unref short failure
[h264 @ 0x55fcceab7b80] mmco: unref short failure
[h264 @ 0x55fcceab7b80] mmco: unref short failure
 38%|███▊      | 748/1945 [2:41:51<4:02:01, 12.13s/it][h264 @ 0x55fcd78dc000] mmco: unref short failure
[h264 @ 0x55fcd78dc000] mmco: unref short failure
 39%|███▊      | 749/1945 [2:41:56<3:21:25, 10.10s/it]09/07/2024 14:25:56 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.1228041648864746, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04293496534228325, 'loss_ret%tv%ta--finetune_area/loss_area': 2.7500803470611572, 'loss_ret%tv%ta--finetune_area/total_loss': 5.91581916809082}
 39%|███▊      | 750/1945 [2:42:01<2:51:12,  8.60s/it][h264 @ 0x55667534d640] mmco: unref short failure
[h264 @ 0x55667534d640] mmco: unref short failure
[h264 @ 0x55fcd9151b00] mmco: unref short failure
[h264 @ 0x55fcd9151b00] mmco: unref short failure
[h264 @ 0x55ee40f52040] mmco: unref short failure
[h264 @ 0x55ee40f52040] mmco: unref short failure
[h264 @ 0x556675758280] mmco: unref short failure
[h264 @ 0x55667c65b3c0] mmco: unref short failure
[h264 @ 0x55667c65b3c0] mmco: unref short failure
 39%|███▊      | 751/1945 [2:42:07<2:33:32,  7.72s/it][h264 @ 0x55fc8d519640] mmco: unref short failure
 39%|███▊      | 752/1945 [2:42:34<4:30:30, 13.60s/it][h264 @ 0x55ee30eb9580] mmco: unref short failure
[h264 @ 0x55ee30eb9580] mmco: unref short failure
[h264 @ 0x55ee41cf9400] mmco: unref short failure
[h264 @ 0x55ee41cf9400] mmco: unref short failure
[h264 @ 0x55ee3f8db280] mmco: unref short failure
[h264 @ 0x55ee3f8db280] mmco: unref short failure
[h264 @ 0x55ee430cac80] mmco: unref short failure
 39%|███▊      | 753/1945 [2:42:59<5:36:21, 16.93s/it][h264 @ 0x55b930c1f140] mmco: unref short failure
[h264 @ 0x55b930c1f140] mmco: unref short failure
[h264 @ 0x55668684a300] mmco: unref short failure
[h264 @ 0x55668684a300] mmco: unref short failure
[h264 @ 0x55ee321bb540] mmco: unref short failure
 39%|███▉      | 754/1945 [2:43:17<5:43:45, 17.32s/it][h264 @ 0x55ee33e6f4c0] mmco: unref short failure
 39%|███▉      | 755/1945 [2:43:23<4:36:21, 13.93s/it][h264 @ 0x55667fbbb580] mmco: unref short failure
[h264 @ 0x55667fbbb580] mmco: unref short failure
 39%|███▉      | 756/1945 [2:43:31<4:02:48, 12.25s/it][h264 @ 0x55fcdae32f40] mmco: unref short failure
[h264 @ 0x55fcdae32f40] mmco: unref short failure
 39%|███▉      | 757/1945 [2:43:37<3:24:36, 10.33s/it][h264 @ 0x55fcd1cbb800] mmco: unref short failure
[h264 @ 0x55fcd1cbb800] mmco: unref short failure
[h264 @ 0x55fcd114c3c0] mmco: unref short failure
[h264 @ 0x55fcd114c3c0] mmco: unref short failure
 39%|███▉      | 758/1945 [2:43:43<2:57:44,  8.98s/it][h264 @ 0x55b90b2ab1c0] mmco: unref short failure
[h264 @ 0x55b90b2ab1c0] mmco: unref short failure
 39%|███▉      | 759/1945 [2:43:49<2:39:36,  8.07s/it][h264 @ 0x55b92fad63c0] mmco: unref short failure
[h264 @ 0x55b8edc18780] mmco: unref short failure
[h264 @ 0x55ee3805d200] mmco: unref short failure
[h264 @ 0x55b8f0d4f2c0] mmco: unref short failure
[h264 @ 0x55b8f0d4f2c0] mmco: unref short failure
[h264 @ 0x55ee39754d40] mmco: unref short failure
[h264 @ 0x55ee39754d40] mmco: unref short failure
[h264 @ 0x55b9345d9540] mmco: unref short failure
 39%|███▉      | 760/1945 [2:44:15<4:24:28, 13.39s/it][h264 @ 0x55ee324b3e40] mmco: unref short failure
[h264 @ 0x55ee324b3e40] mmco: unref short failure
[h264 @ 0x55b8f05b01c0] mmco: unref short failure
[h264 @ 0x55b8f05b01c0] mmco: unref short failure
[h264 @ 0x55fcd0b2ac40] mmco: unref short failure
[h264 @ 0x55fcd0b2ac40] mmco: unref short failure
[h264 @ 0x55fccc33d9c0] mmco: unref short failure
[h264 @ 0x55fccc33d9c0] mmco: unref short failure
 39%|███▉      | 761/1945 [2:44:36<5:08:28, 15.63s/it][h264 @ 0x55ee2fc99e80] mmco: unref short failure
[h264 @ 0x55ee478178c0] mmco: unref short failure
[h264 @ 0x55ee478178c0] mmco: unref short failure
[h264 @ 0x55b8efbca040] mmco: unref short failure
[h264 @ 0x556674145e00] mmco: unref short failure
[h264 @ 0x556674145e00] mmco: unref short failure
[h264 @ 0x55ee308c7a00] mmco: unref short failure
 39%|███▉      | 762/1945 [2:44:57<5:43:49, 17.44s/it][h264 @ 0x55b8ee175ec0] mmco: unref short failure
[h264 @ 0x55b8ee175ec0] mmco: unref short failure
[h264 @ 0x55b8f0957a40] mmco: unref short failure
 39%|███▉      | 763/1945 [2:45:02<4:30:58, 13.76s/it][h264 @ 0x55fcdb156340] mmco: unref short failure
 39%|███▉      | 764/1945 [2:45:15<4:22:08, 13.32s/it] 39%|███▉      | 765/1945 [2:45:20<3:34:16, 10.90s/it][h264 @ 0x55fccde9dcc0] mmco: unref short failure
[h264 @ 0x55fccde9dcc0] mmco: unref short failure
[h264 @ 0x55fcdd006ec0] mmco: unref short failure
[h264 @ 0x55fcdd006ec0] mmco: unref short failure
 39%|███▉      | 766/1945 [2:45:25<3:01:14,  9.22s/it][h264 @ 0x55ee32ae6940] mmco: unref short failure
 39%|███▉      | 767/1945 [2:45:32<2:45:41,  8.44s/it][h264 @ 0x55ee3460ac40] mmco: unref short failure
[h264 @ 0x55ee3460ac40] mmco: unref short failure
[h264 @ 0x55b8ef9c2ac0] mmco: unref short failure
[h264 @ 0x55b8ef9c2ac0] mmco: unref short failure
[h264 @ 0x55fccf66b740] mmco: unref short failure
[h264 @ 0x55fccf66b740] mmco: unref short failure
[h264 @ 0x55ee3f80ffc0] mmco: unref short failure
[h264 @ 0x55ee3f80ffc0] mmco: unref short failure
[h264 @ 0x55b8ed128340] mmco: unref short failure
[h264 @ 0x55b8ed128340] mmco: unref short failure
 39%|███▉      | 768/1945 [2:45:55<4:12:08, 12.85s/it] 40%|███▉      | 769/1945 [2:46:10<4:24:44, 13.51s/it][h264 @ 0x55667d156700] mmco: unref short failure
[h264 @ 0x55b8ec498b40] mmco: unref short failure
[h264 @ 0x55ee41cf9200] mmco: unref short failure
[h264 @ 0x55fcd3d7a040] mmco: unref short failure
[h264 @ 0x55ee35003580] mmco: unref short failure
[h264 @ 0x55ee35003580] mmco: unref short failure
 40%|███▉      | 770/1945 [2:46:30<5:01:34, 15.40s/it] 40%|███▉      | 771/1945 [2:46:33<3:52:01, 11.86s/it][h264 @ 0x55b8efc38e80] mmco: unref short failure
 40%|███▉      | 772/1945 [2:46:39<3:13:31,  9.90s/it][h264 @ 0x55b8f1521900] mmco: unref short failure
[h264 @ 0x55b8f1521900] mmco: unref short failure
[h264 @ 0x55fccd74d240] mmco: unref short failure
[h264 @ 0x55b8ee06e000] mmco: unref short failure
[h264 @ 0x55b8ee06e000] mmco: unref short failure
[h264 @ 0x55b8ee06e000] mmco: unref short failure
[h264 @ 0x55b8ee06e000] mmco: unref short failure
[h264 @ 0x55b8f08b3780] mmco: unref short failure
[h264 @ 0x55b8f08b3780] mmco: unref short failure
 40%|███▉      | 773/1945 [2:46:42<2:35:33,  7.96s/it] 40%|███▉      | 774/1945 [2:46:45<2:04:34,  6.38s/it][h264 @ 0x55fccf0fa300] mmco: unref short failure
[h264 @ 0x55fccf0fa300] mmco: unref short failure
 40%|███▉      | 775/1945 [2:46:48<1:42:07,  5.24s/it] 40%|███▉      | 776/1945 [2:46:51<1:31:26,  4.69s/it] 40%|███▉      | 777/1945 [2:46:54<1:23:51,  4.31s/it]/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55ee03e4fb00] mmco: unref short failure
[h264 @ 0x55ee0404f9c0] mmco: unref short failure
[h264 @ 0x55ee0404f9c0] mmco: unref short failure
[h264 @ 0x55ee03e4f680] mmco: unref short failure
[h264 @ 0x55ee03e18600] mmco: unref short failure
[h264 @ 0x55ee03f1af80] mmco: unref short failure
[h264 @ 0x55ee03f1af80] mmco: unref short failure
[h264 @ 0x556646e89bc0] mmco: unref short failure
[h264 @ 0x55fc8caa3c40] mmco: unref short failure
[h264 @ 0x55ee040899c0] mmco: unref short failure
[h264 @ 0x5566471b5d40] mmco: unref short failure
[h264 @ 0x5566471b5d40] mmco: unref short failure
[h264 @ 0x55ee0418b8c0] mmco: unref short failure
[h264 @ 0x55ee0418b8c0] mmco: unref short failure
[h264 @ 0x55b90caceb00] mmco: unref short failure
[h264 @ 0x556673dc5380] mmco: unref short failure
[h264 @ 0x556673dc5380] mmco: unref short failure
[h264 @ 0x55fc8cf7e880] mmco: unref short failure
[h264 @ 0x55fc8cf7e880] mmco: unref short failure
[h264 @ 0x55b90c970d00] mmco: unref short failure
 40%|████      | 778/1945 [2:48:53<12:29:24, 38.53s/it] 40%|████      | 779/1945 [2:48:58<9:17:42, 28.70s/it] [h264 @ 0x556674a387c0] mmco: unref short failure
[h264 @ 0x556674a387c0] mmco: unref short failure
[h264 @ 0x55b909ec7640] mmco: unref short failure
[h264 @ 0x55b909ec7640] mmco: unref short failure
 40%|████      | 780/1945 [2:49:04<7:02:40, 21.77s/it] 40%|████      | 781/1945 [2:49:10<5:27:42, 16.89s/it] 40%|████      | 782/1945 [2:49:16<4:24:04, 13.62s/it][h264 @ 0x55b8ee016600] mmco: unref short failure
[h264 @ 0x55ee30cb7e40] mmco: unref short failure
 40%|████      | 783/1945 [2:49:21<3:37:32, 11.23s/it] 40%|████      | 784/1945 [2:49:27<3:06:46,  9.65s/it] 40%|████      | 785/1945 [2:49:33<2:44:57,  8.53s/it][h264 @ 0x55ee04b628c0] mmco: unref short failure
[h264 @ 0x55b8eb08e700] mmco: unref short failure
[h264 @ 0x55b8eb08e700] mmco: unref short failure
[h264 @ 0x55fcce665580] mmco: unref short failure
[h264 @ 0x5566476bc4c0] mmco: unref short failure
[h264 @ 0x55fcd0cc1080] mmco: unref short failure
[h264 @ 0x55ee33af8780] mmco: unref short failure
[h264 @ 0x55ee33af8780] mmco: unref short failure
[h264 @ 0x556674a501c0] mmco: unref short failure
 40%|████      | 786/1945 [2:50:28<7:10:44, 22.30s/it] 40%|████      | 787/1945 [2:50:33<5:33:16, 17.27s/it][h264 @ 0x55ee0499dc80] mmco: unref short failure
 41%|████      | 788/1945 [2:50:39<4:30:08, 14.01s/it][h264 @ 0x55fccf1a8080] mmco: unref short failure
 41%|████      | 789/1945 [2:50:46<3:45:45, 11.72s/it][h264 @ 0x55b8eb293240] mmco: unref short failure
[h264 @ 0x55b8eb293240] mmco: unref short failure
[h264 @ 0x55fccb7895c0] mmco: unref short failure
[h264 @ 0x55fccb7895c0] mmco: unref short failure
[h264 @ 0x55b90b623ec0] mmco: unref short failure
[h264 @ 0x55b90b623ec0] mmco: unref short failure
 41%|████      | 790/1945 [2:50:51<3:09:12,  9.83s/it][h264 @ 0x55fcd14c3200] mmco: unref short failure
[h264 @ 0x55fcd14c3200] mmco: unref short failure
 41%|████      | 791/1945 [2:50:58<2:49:30,  8.81s/it] 41%|████      | 792/1945 [2:51:03<2:31:02,  7.86s/it] 41%|████      | 793/1945 [2:51:09<2:16:12,  7.09s/it][h264 @ 0x556647142ec0] mmco: unref short failure
[h264 @ 0x556647142ec0] mmco: unref short failure
[h264 @ 0x556647142ec0] mmco: unref short failure
[h264 @ 0x556647142ec0] mmco: unref short failure
[h264 @ 0x55b8f0e9edc0] mmco: unref short failure
[h264 @ 0x55b8f0e9edc0] mmco: unref short failure
[h264 @ 0x55667427d7c0] mmco: unref short failure
[h264 @ 0x55667b9d04c0] mmco: unref short failure
[h264 @ 0x55667b9d04c0] mmco: unref short failure
[h264 @ 0x55fcd2ebce80] mmco: unref short failure
[h264 @ 0x5566790d5900] mmco: unref short failure
[h264 @ 0x5566790d5900] mmco: unref short failure
not have audios 8-qwaveiHMM.3
 41%|████      | 794/1945 [2:52:01<6:36:53, 20.69s/it] 41%|████      | 795/1945 [2:52:06<5:08:35, 16.10s/it] 41%|████      | 796/1945 [2:52:12<4:08:15, 12.96s/it] 41%|████      | 797/1945 [2:52:18<3:27:42, 10.86s/it][h264 @ 0x556676efa280] mmco: unref short failure
 41%|████      | 798/1945 [2:52:24<2:57:09,  9.27s/it][h264 @ 0x55b90c246f40] mmco: unref short failure
[h264 @ 0x55b90c246f40] mmco: unref short failure
 41%|████      | 799/1945 [2:52:30<2:38:41,  8.31s/it]09/07/2024 14:36:29 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.2726075649261475, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.044198907911777496, 'loss_ret%tv%ta--finetune_area/loss_area': 2.4036643505096436, 'loss_ret%tv%ta--finetune_area/total_loss': 5.720470905303955}
[h264 @ 0x55b90b457e40] mmco: unref short failure
 41%|████      | 800/1945 [2:52:35<2:23:20,  7.51s/it][h264 @ 0x55fccd719240] mmco: unref short failure
[h264 @ 0x55fccd719240] mmco: unref short failure
[h264 @ 0x556679b165c0] mmco: unref short failure
[h264 @ 0x556679b165c0] mmco: unref short failure
 41%|████      | 801/1945 [2:52:41<2:10:40,  6.85s/it][h264 @ 0x55b8edd9b8c0] mmco: unref short failure
[h264 @ 0x55b8edd9b8c0] mmco: unref short failure
[h264 @ 0x55b8eb16b700] mmco: unref short failure
[h264 @ 0x556677af8480] mmco: unref short failure
[h264 @ 0x556677af8480] mmco: unref short failure
[h264 @ 0x55b8f0493c40] mmco: unref short failure
[h264 @ 0x55fccfe9b740] mmco: unref short failure
[h264 @ 0x55fccfe9b740] mmco: unref short failure
[h264 @ 0x55ee0427dd00] mmco: unref short failure
[h264 @ 0x55b8ed234a80] mmco: unref short failure
[h264 @ 0x55b8ed234a80] mmco: unref short failure
[h264 @ 0x55fccd45e6c0] mmco: unref short failure
[h264 @ 0x55fccd45e6c0] mmco: unref short failure
[h264 @ 0x55b8efe016c0] mmco: unref short failure
[h264 @ 0x55b8efe016c0] mmco: unref short failure
 41%|████      | 802/1945 [2:53:42<7:21:46, 23.19s/it] 41%|████▏     | 803/1945 [2:53:50<5:52:49, 18.54s/it] 41%|████▏     | 804/1945 [2:54:00<5:07:42, 16.18s/it] 41%|████▏     | 805/1945 [2:54:06<4:05:34, 12.92s/it][h264 @ 0x55ee38012200] mmco: unref short failure
[h264 @ 0x556676748cc0] mmco: unref short failure
[h264 @ 0x556676748cc0] mmco: unref short failure
 41%|████▏     | 806/1945 [2:54:11<3:23:05, 10.70s/it] 41%|████▏     | 807/1945 [2:54:18<3:00:43,  9.53s/it] 42%|████▏     | 808/1945 [2:54:24<2:38:59,  8.39s/it] 42%|████▏     | 809/1945 [2:54:29<2:20:01,  7.40s/it][h264 @ 0x55fcd1ae3440] mmco: unref short failure
[h264 @ 0x55fccc1a8080] mmco: unref short failure
[h264 @ 0x55fccc1a8080] mmco: unref short failure
[h264 @ 0x55ee303f2e80] mmco: unref short failure
[h264 @ 0x55b8eb16b040] mmco: unref short failure
[h264 @ 0x55b8eb16b040] mmco: unref short failure
[h264 @ 0x55fcd447e700] mmco: unref short failure
[h264 @ 0x55b8ef194080] mmco: unref short failure
[h264 @ 0x55b8ef194080] mmco: unref short failure
[h264 @ 0x55667c2e6200] mmco: unref short failure
[h264 @ 0x55ee356d99c0] mmco: unref short failure
[h264 @ 0x55ee356d99c0] mmco: unref short failure
not have audios ua_Kowav7hg.20
 42%|████▏     | 810/1945 [2:55:16<6:05:17, 19.31s/it][h264 @ 0x55ee33c525c0] mmco: unref short failure
 42%|████▏     | 811/1945 [2:55:24<5:03:57, 16.08s/it][h264 @ 0x5566479f9dc0] mmco: unref short failure
[h264 @ 0x55b8ef25e5c0] mmco: unref short failure
[h264 @ 0x55b8ef25e5c0] mmco: unref short failure
[h264 @ 0x55ee2fb96040] mmco: unref short failure
[h264 @ 0x55ee2fb96040] mmco: unref short failure
[h264 @ 0x55667f3c8840] mmco: unref short failure
[h264 @ 0x55667f3c8840] mmco: unref short failure
 42%|████▏     | 812/1945 [2:55:36<4:36:11, 14.63s/it] 42%|████▏     | 813/1945 [2:55:41<3:43:29, 11.85s/it] 42%|████▏     | 814/1945 [2:55:46<3:04:45,  9.80s/it] 42%|████▏     | 815/1945 [2:55:52<2:40:04,  8.50s/it] 42%|████▏     | 816/1945 [2:55:57<2:22:36,  7.58s/it] 42%|████▏     | 817/1945 [2:56:03<2:14:24,  7.15s/it][h264 @ 0x55ee372caf40] mmco: unref short failure
[h264 @ 0x556678509fc0] mmco: unref short failure
[h264 @ 0x556678509fc0] mmco: unref short failure
[h264 @ 0x55667c1b3f40] mmco: unref short failure
[h264 @ 0x55667c1b3f40] mmco: unref short failure
[h264 @ 0x55667bd1b740] mmco: unref short failure
[h264 @ 0x55667bd1b740] mmco: unref short failure
[h264 @ 0x55667bd1b740] mmco: unref short failure
 42%|████▏     | 818/1945 [2:56:53<6:16:39, 20.05s/it] 42%|████▏     | 819/1945 [2:56:59<4:55:33, 15.75s/it] 42%|████▏     | 820/1945 [2:57:11<4:36:23, 14.74s/it][h264 @ 0x55fcd14553c0] mmco: unref short failure
 42%|████▏     | 821/1945 [2:57:17<3:45:09, 12.02s/it][h264 @ 0x55b92b521b80] mmco: unref short failure
[h264 @ 0x55b92ae98380] mmco: unref short failure
 42%|████▏     | 822/1945 [2:57:23<3:09:44, 10.14s/it][h264 @ 0x55ee04a343c0] mmco: unref short failure
[h264 @ 0x55ee04a343c0] mmco: unref short failure
[h264 @ 0x55ee3c6d3fc0] mmco: unref short failure
[h264 @ 0x55ee3c6d3fc0] mmco: unref short failure
 42%|████▏     | 823/1945 [2:57:28<2:41:21,  8.63s/it][h264 @ 0x55667ccdefc0] mmco: unref short failure
[h264 @ 0x55667ccdefc0] mmco: unref short failure
 42%|████▏     | 824/1945 [2:57:33<2:24:12,  7.72s/it] 42%|████▏     | 825/1945 [2:57:39<2:10:30,  6.99s/it][h264 @ 0x55b8f129edc0] mmco: unref short failure
[h264 @ 0x55fcd3c8d180] mmco: unref short failure
[h264 @ 0x55b8eb0088c0] mmco: unref short failure
[h264 @ 0x556680812380] mmco: unref short failure
[h264 @ 0x55fcd80a0800] mmco: unref short failure
 42%|████▏     | 826/1945 [2:58:26<5:53:03, 18.93s/it] 43%|████▎     | 827/1945 [2:58:35<5:00:40, 16.14s/it][h264 @ 0x55fcd542bc80] mmco: unref short failure
[h264 @ 0x55fcd542bc80] mmco: unref short failure
[h264 @ 0x55b8ec246a80] mmco: unref short failure
[h264 @ 0x55b8ec246a80] mmco: unref short failure
[h264 @ 0x55b8eb15d780] mmco: unref short failure
[h264 @ 0x55b8eb15d780] mmco: unref short failure
 43%|████▎     | 828/1945 [2:58:46<4:30:23, 14.52s/it][h264 @ 0x5566779d9940] mmco: unref short failure
 43%|████▎     | 829/1945 [2:58:51<3:37:55, 11.72s/it][h264 @ 0x55b92d09f280] mmco: unref short failure
[h264 @ 0x55b92d09f280] mmco: unref short failure
 43%|████▎     | 830/1945 [2:58:56<3:01:53,  9.79s/it][h264 @ 0x556673880100] mmco: unref short failure
 43%|████▎     | 831/1945 [2:59:02<2:38:20,  8.53s/it][h264 @ 0x55ee347c73c0] mmco: unref short failure
[h264 @ 0x55ee347c73c0] mmco: unref short failure
[h264 @ 0x556681114b00] mmco: unref short failure
[h264 @ 0x556681114b00] mmco: unref short failure
 43%|████▎     | 832/1945 [2:59:07<2:18:39,  7.47s/it][h264 @ 0x55fccf597d40] mmco: unref short failure
 43%|████▎     | 833/1945 [2:59:12<2:04:07,  6.70s/it][h264 @ 0x5566821dd9c0] mmco: unref short failure
[h264 @ 0x55fcd6b6df00] mmco: unref short failure
[h264 @ 0x55fcd6b6df00] mmco: unref short failure
[h264 @ 0x55fcd7bfe700] mmco: unref short failure
[h264 @ 0x55b92c3b5700] mmco: unref short failure
[h264 @ 0x556674a51d80] mmco: unref short failure
[h264 @ 0x556674a51d80] mmco: unref short failure
[h264 @ 0x5566791280c0] mmco: unref short failure
[h264 @ 0x5566817b5840] mmco: unref short failure
 43%|████▎     | 834/1945 [3:00:06<6:24:44, 20.78s/it][h264 @ 0x55ee3a9ec840] mmco: unref short failure
[h264 @ 0x55ee3a9ec840] mmco: unref short failure
[h264 @ 0x55b92bd5be40] mmco: unref short failure
[h264 @ 0x55b92bd5be40] mmco: unref short failure
[h264 @ 0x55ee3a9ec840] mmco: unref short failure
[h264 @ 0x55ee3a9ec840] mmco: unref short failure
[h264 @ 0x55b8ea4fad40] mmco: unref short failure
[h264 @ 0x55b8ea4fad40] mmco: unref short failure
[h264 @ 0x55ee3a9ec840] mmco: unref short failure
[h264 @ 0x55ee3a9ec840] mmco: unref short failure
 43%|████▎     | 835/1945 [3:00:19<5:45:18, 18.67s/it][h264 @ 0x55668227e740] mmco: unref short failure
[h264 @ 0x55b928a9de40] mmco: unref short failure
[h264 @ 0x55fcd07d4cc0] mmco: unref short failure
[h264 @ 0x55fc8cb48000] mmco: unref short failure
 43%|████▎     | 836/1945 [3:00:27<4:43:38, 15.35s/it][h264 @ 0x55ee3cc73380] mmco: unref short failure
 43%|████▎     | 837/1945 [3:00:33<3:51:39, 12.54s/it][h264 @ 0x556680694fc0] mmco: unref short failure
 43%|████▎     | 838/1945 [3:00:38<3:13:10, 10.47s/it][h264 @ 0x55b8f06d4fc0] mmco: unref short failure
[h264 @ 0x55ee3605dec0] mmco: unref short failure
[h264 @ 0x55fcd072c040] mmco: unref short failure
[h264 @ 0x55fcd072c040] mmco: unref short failure
[h264 @ 0x55667e58be40] mmco: unref short failure
[h264 @ 0x55ee315c2880] mmco: unref short failure
[h264 @ 0x55ee315c2880] mmco: unref short failure
 43%|████▎     | 839/1945 [3:00:44<2:47:27,  9.08s/it][h264 @ 0x55ee3ae05f40] mmco: unref short failure
[h264 @ 0x55ee3ae05f40] mmco: unref short failure
 43%|████▎     | 840/1945 [3:00:51<2:31:19,  8.22s/it][h264 @ 0x55ee3ea09e40] mmco: unref short failure
[h264 @ 0x55ee3ea09e40] mmco: unref short failure
[h264 @ 0x55b92c0bd6c0] mmco: unref short failure
[h264 @ 0x55b92c0bd6c0] mmco: unref short failure
 43%|████▎     | 841/1945 [3:00:56<2:17:03,  7.45s/it][h264 @ 0x55b90b1820c0] mmco: unref short failure
[h264 @ 0x55ee3a9eca40] mmco: unref short failure
[h264 @ 0x55b8ef0b77c0] mmco: unref short failure
[h264 @ 0x55b92f2b5d00] mmco: unref short failure
[h264 @ 0x55ee3f5c8680] mmco: unref short failure
 43%|████▎     | 842/1945 [3:01:42<5:50:47, 19.08s/it][h264 @ 0x55b8efbbbc00] mmco: unref short failure
[h264 @ 0x55b8efbbbc00] mmco: unref short failure
 43%|████▎     | 843/1945 [3:01:54<5:10:15, 16.89s/it] 43%|████▎     | 844/1945 [3:02:08<4:53:52, 16.02s/it][h264 @ 0x55b92bf2f140] mmco: unref short failure
 43%|████▎     | 845/1945 [3:02:14<3:57:14, 12.94s/it][h264 @ 0x55b92893fb40] mmco: unref short failure
[h264 @ 0x55b92893fb40] mmco: unref short failure
[h264 @ 0x55667358a640] mmco: unref short failure
[h264 @ 0x55667358a640] mmco: unref short failure
 43%|████▎     | 846/1945 [3:02:20<3:17:15, 10.77s/it] 44%|████▎     | 847/1945 [3:02:25<2:49:25,  9.26s/it] 44%|████▎     | 848/1945 [3:02:31<2:31:47,  8.30s/it] 44%|████▎     | 849/1945 [3:02:37<2:15:34,  7.42s/it][h264 @ 0x55ee37275c40] mmco: unref short failure
[h264 @ 0x55ee39dd5bc0] mmco: unref short failure
[h264 @ 0x55ee39dd5bc0] mmco: unref short failure
[h264 @ 0x55667bc7e7c0] mmco: unref short failure
[h264 @ 0x55fcd675dd40] mmco: unref short failure
[h264 @ 0x55fcd675dd40] mmco: unref short failure
[h264 @ 0x55b929c99b00] mmco: unref short failure
[h264 @ 0x55b929c99b00] mmco: unref short failure
[h264 @ 0x55ee36872740] mmco: unref short failure
[h264 @ 0x55ee36872740] mmco: unref short failure
[h264 @ 0x55fcd3581680] mmco: unref short failure
[h264 @ 0x55fcd3581680] mmco: unref short failure
[h264 @ 0x55ee3a5abd40] mmco: unref short failure
[h264 @ 0x55ee33c15900] mmco: unref short failure
[h264 @ 0x55fcd4161380] mmco: unref short failure
[h264 @ 0x55fcd4161380] mmco: unref short failure
09/07/2024 14:47:18 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.248377799987793, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.044843997806310654, 'loss_ret%tv%ta--finetune_area/loss_area': 2.669038772583008, 'loss_ret%tv%ta--finetune_area/total_loss': 5.9622602462768555}
[h264 @ 0x55fccf07f380] mmco: unref short failure
[h264 @ 0x55fccf07f380] mmco: unref short failure
 44%|████▎     | 850/1945 [3:03:25<5:56:35, 19.54s/it] 44%|████▍     | 851/1945 [3:03:32<4:47:14, 15.75s/it] 44%|████▍     | 852/1945 [3:03:42<4:19:31, 14.25s/it][h264 @ 0x55ee3c47ab40] mmco: unref short failure
[h264 @ 0x55ee3c47ab40] mmco: unref short failure
 44%|████▍     | 853/1945 [3:03:48<3:30:41, 11.58s/it] 44%|████▍     | 854/1945 [3:03:54<3:03:04, 10.07s/it] 44%|████▍     | 855/1945 [3:04:00<2:40:30,  8.83s/it] 44%|████▍     | 856/1945 [3:04:06<2:26:39,  8.08s/it] 44%|████▍     | 857/1945 [3:04:12<2:12:06,  7.28s/it][h264 @ 0x556681d306c0] mmco: unref short failure
[h264 @ 0x55667d224a00] mmco: unref short failure
[h264 @ 0x55667d224a00] mmco: unref short failure
[h264 @ 0x55667cb0bec0] mmco: unref short failure
[h264 @ 0x55ee046bb380] mmco: unref short failure
[h264 @ 0x556674ba9040] mmco: unref short failure
[h264 @ 0x55b92db55380] mmco: unref short failure
[h264 @ 0x55664788d840] mmco: unref short failure
[h264 @ 0x55664788d840] mmco: unref short failure
[h264 @ 0x55ee3eaf0900] mmco: unref short failure
[h264 @ 0x55fcd7c00b80] mmco: unref short failure
[h264 @ 0x55ee046bcb00] mmco: unref short failure
[h264 @ 0x55fcd43c2980] mmco: unref short failure
[h264 @ 0x55fcd43c2980] mmco: unref short failure
[h264 @ 0x55ee376b2200] mmco: unref short failure
[h264 @ 0x55ee30583c80] mmco: unref short failure
 44%|████▍     | 858/1945 [3:04:59<5:49:38, 19.30s/it][h264 @ 0x55b92e5a7440] mmco: unref short failure
[h264 @ 0x556682e60980] mmco: unref short failure
[h264 @ 0x556682e60980] mmco: unref short failure
 44%|████▍     | 859/1945 [3:05:10<5:04:37, 16.83s/it][h264 @ 0x55ee379cb280] mmco: unref short failure
[h264 @ 0x55667fc12740] mmco: unref short failure
 44%|████▍     | 860/1945 [3:05:23<4:44:36, 15.74s/it][h264 @ 0x55668235a500] mmco: unref short failure
 44%|████▍     | 861/1945 [3:05:28<3:45:57, 12.51s/it][h264 @ 0x55b8ec0d7a80] mmco: unref short failure
 44%|████▍     | 862/1945 [3:05:34<3:09:06, 10.48s/it] 44%|████▍     | 863/1945 [3:05:40<2:44:22,  9.12s/it][h264 @ 0x55fcd7bff040] mmco: unref short failure
 44%|████▍     | 864/1945 [3:05:47<2:30:28,  8.35s/it] 44%|████▍     | 865/1945 [3:05:53<2:18:14,  7.68s/it][h264 @ 0x55ee36af4b00] mmco: unref short failure
[h264 @ 0x55ee36af4b00] mmco: unref short failure
[h264 @ 0x55b92d8e21c0] mmco: unref short failure
[h264 @ 0x55b92d8e21c0] mmco: unref short failure
[h264 @ 0x55ee31014740] mmco: unref short failure
[h264 @ 0x55ee31014740] mmco: unref short failure
[h264 @ 0x556681ad0780] mmco: unref short failure
[h264 @ 0x55b92d8e1fc0] mmco: unref short failure
[h264 @ 0x55fcdae42740] mmco: unref short failure
[h264 @ 0x55fcdae42740] mmco: unref short failure
[h264 @ 0x55ee36c35000] mmco: unref short failure
[h264 @ 0x55ee36c35000] mmco: unref short failure
[h264 @ 0x5566742ed2c0] mmco: unref short failure
[h264 @ 0x55fcd9fd07c0] mmco: unref short failure
[h264 @ 0x55fcd9fd07c0] mmco: unref short failure
[h264 @ 0x55ee37275c40] mmco: unref short failure
[h264 @ 0x55ee37275c40] mmco: unref short failure
[h264 @ 0x55667751f0c0] mmco: unref short failure
 45%|████▍     | 866/1945 [3:06:37<5:34:05, 18.58s/it][h264 @ 0x55b9286a3140] mmco: unref short failure
[h264 @ 0x556677361a40] mmco: unref short failure
 45%|████▍     | 867/1945 [3:06:45<4:36:43, 15.40s/it][h264 @ 0x55ee03fd97c0] mmco: unref short failure
 45%|████▍     | 868/1945 [3:07:03<4:53:55, 16.37s/it][h264 @ 0x55fcd52bd800] mmco: unref short failure
[h264 @ 0x55fcd52bd800] mmco: unref short failure
 45%|████▍     | 869/1945 [3:07:09<3:53:31, 13.02s/it][h264 @ 0x55fccd36c400] mmco: unref short failure
[h264 @ 0x55fccd36c400] mmco: unref short failure
 45%|████▍     | 870/1945 [3:07:14<3:14:10, 10.84s/it] 45%|████▍     | 871/1945 [3:07:20<2:47:01,  9.33s/it] 45%|████▍     | 872/1945 [3:07:25<2:23:26,  8.02s/it] 45%|████▍     | 873/1945 [3:07:31<2:13:12,  7.46s/it][h264 @ 0x55667566d040] mmco: unref short failure
[h264 @ 0x55667566d040] mmco: unref short failure
[h264 @ 0x55fcd8cfbac0] mmco: unref short failure
[h264 @ 0x55fcd8cfbac0] mmco: unref short failure
[h264 @ 0x55b8ed18a8c0] mmco: unref short failure
[h264 @ 0x55b8ed18a8c0] mmco: unref short failure
[h264 @ 0x55fcd236aac0] mmco: unref short failure
[h264 @ 0x55fcd236aac0] mmco: unref short failure
[h264 @ 0x55ee04548000] mmco: unref short failure
[h264 @ 0x55ee04548000] mmco: unref short failure
[h264 @ 0x55fcd6453840] mmco: unref short failure
[h264 @ 0x55fcd6453840] mmco: unref short failure
[h264 @ 0x55ee3a60f9c0] mmco: unref short failure
[h264 @ 0x55ee3534b100] mmco: unref short failure
 45%|████▍     | 874/1945 [3:08:16<5:32:20, 18.62s/it][h264 @ 0x556683fef100] mmco: unref short failure
 45%|████▍     | 875/1945 [3:08:29<5:04:33, 17.08s/it][h264 @ 0x55fcd7bfedc0] mmco: unref short failure
[h264 @ 0x55ee35518ac0] mmco: unref short failure
 45%|████▌     | 876/1945 [3:08:44<4:48:41, 16.20s/it] 45%|████▌     | 877/1945 [3:08:51<3:59:32, 13.46s/it][h264 @ 0x556682f11e80] mmco: unref short failure
[h264 @ 0x556682f11e80] mmco: unref short failure
[h264 @ 0x556682f11e80] mmco: unref short failure
[h264 @ 0x556682f11e80] mmco: unref short failure
 45%|████▌     | 878/1945 [3:08:56<3:15:50, 11.01s/it] 45%|████▌     | 879/1945 [3:09:01<2:45:41,  9.33s/it] 45%|████▌     | 880/1945 [3:09:07<2:28:12,  8.35s/it][h264 @ 0x55ee3ed4f200] mmco: unref short failure
[h264 @ 0x55ee3ed4f200] mmco: unref short failure
 45%|████▌     | 881/1945 [3:09:13<2:13:41,  7.54s/it][h264 @ 0x5566739cde80] mmco: unref short failure
[h264 @ 0x5566739cde80] mmco: unref short failure
[h264 @ 0x55ee3e603000] mmco: unref short failure
[h264 @ 0x55667fe56f80] mmco: unref short failure
[h264 @ 0x55667ced8480] mmco: unref short failure
 45%|████▌     | 882/1945 [3:09:53<5:04:51, 17.21s/it][h264 @ 0x55b9319c2740] mmco: unref short failure
[h264 @ 0x55b92f2c7dc0] mmco: unref short failure
[h264 @ 0x55b92f2c7dc0] mmco: unref short failure
 45%|████▌     | 883/1945 [3:10:08<4:51:11, 16.45s/it][h264 @ 0x55fcdceb1cc0] mmco: unref short failure
[h264 @ 0x55fcdceb1cc0] mmco: unref short failure
[h264 @ 0x556677ee8ac0] mmco: unref short failure
[h264 @ 0x556677ee8ac0] mmco: unref short failure
 45%|████▌     | 884/1945 [3:10:20<4:30:51, 15.32s/it][h264 @ 0x556683353580] mmco: unref short failure
 46%|████▌     | 885/1945 [3:10:27<3:43:08, 12.63s/it] 46%|████▌     | 886/1945 [3:10:32<3:05:03, 10.48s/it] 46%|████▌     | 887/1945 [3:10:38<2:39:38,  9.05s/it][h264 @ 0x55ee421cf680] mmco: unref short failure
[h264 @ 0x55b92f2c7dc0] mmco: unref short failure
[h264 @ 0x55b92f2c7dc0] mmco: unref short failure
 46%|████▌     | 888/1945 [3:10:44<2:23:29,  8.15s/it][h264 @ 0x556681c836c0] mmco: unref short failure
 46%|████▌     | 889/1945 [3:10:50<2:12:48,  7.55s/it][h264 @ 0x5566790f7ac0] mmco: unref short failure
[h264 @ 0x55667d616340] mmco: unref short failure
[h264 @ 0x55667a3a1a40] mmco: unref short failure
[h264 @ 0x55ee393fc4c0] mmco: unref short failure
[h264 @ 0x556684618b40] mmco: unref short failure
[h264 @ 0x556684618b40] mmco: unref short failure
[h264 @ 0x55b8ed9c1740] mmco: unref short failure
[h264 @ 0x55b8ed9c1740] mmco: unref short failure
[h264 @ 0x55ee457ef9c0] mmco: unref short failure
[h264 @ 0x55ee457ef9c0] mmco: unref short failure
[h264 @ 0x55ee457ef9c0] mmco: unref short failure
[h264 @ 0x55ee457ef9c0] mmco: unref short failure
[h264 @ 0x55ee457ef9c0] mmco: unref short failure
[h264 @ 0x55ee457ef9c0] mmco: unref short failure
[h264 @ 0x55ee457ef9c0] mmco: unref short failure
[h264 @ 0x55ee457ef9c0] mmco: unref short failure
[h264 @ 0x55fcda3a9f80] mmco: unref short failure
 46%|████▌     | 890/1945 [3:11:31<5:10:42, 17.67s/it][h264 @ 0x55b9099cfc00] mmco: unref short failure
[h264 @ 0x55b92f5ae300] mmco: unref short failure
[h264 @ 0x55b92f5ae300] mmco: unref short failure
[h264 @ 0x55fcd399fc80] mmco: unref short failure
[h264 @ 0x55fcd399fc80] mmco: unref short failure
 46%|████▌     | 891/1945 [3:11:45<4:51:11, 16.58s/it][h264 @ 0x55ee2f4dce80] mmco: unref short failure
[h264 @ 0x55ee2f4dce80] mmco: unref short failure
[h264 @ 0x55fcdccee9c0] mmco: unref short failure
 46%|████▌     | 892/1945 [3:12:04<5:04:14, 17.34s/it][h264 @ 0x5566767d9cc0] mmco: unref short failure
[h264 @ 0x5566767d9cc0] mmco: unref short failure
[h264 @ 0x55ee42256480] mmco: unref short failure
[h264 @ 0x55fccb2e0880] mmco: unref short failure
[h264 @ 0x55fccb2e0880] mmco: unref short failure
 46%|████▌     | 893/1945 [3:12:10<4:03:14, 13.87s/it][h264 @ 0x55fccb2e0880] mmco: unref short failure
[h264 @ 0x55fccb2e0880] mmco: unref short failure
[h264 @ 0x55fcd21a8180] mmco: unref short failure
[h264 @ 0x55fcd21a8180] mmco: unref short failure
 46%|████▌     | 894/1945 [3:12:16<3:18:54, 11.36s/it] 46%|████▌     | 895/1945 [3:12:22<2:51:01,  9.77s/it] 46%|████▌     | 896/1945 [3:12:27<2:28:44,  8.51s/it][h264 @ 0x55b92dd4afc0] mmco: unref short failure
[h264 @ 0x55fcdd543780] mmco: unref short failure
 46%|████▌     | 897/1945 [3:12:33<2:14:19,  7.69s/it][h264 @ 0x55ee3bf45e40] mmco: unref short failure
[h264 @ 0x55ee3bf45e40] mmco: unref short failure
[h264 @ 0x55668478de40] mmco: unref short failure
 46%|████▌     | 898/1945 [3:13:11<4:52:33, 16.77s/it][h264 @ 0x55b8ef63a080] mmco: unref short failure
 46%|████▌     | 899/1945 [3:13:26<4:44:28, 16.32s/it]09/07/2024 14:57:24 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/07/2024 14:57:24 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55ee32249980] mmco: unref short failure
[h264 @ 0x55ee32249980] mmco: unref short failure
[h264 @ 0x5566864ef640] mmco: unref short failure
[h264 @ 0x55b8f055d600] mmco: unref short failure
[h264 @ 0x55b8f055d600] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55fcd3745ac0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55fccf7862c0] mmco: unref short failure
[h264 @ 0x5566889998c0] mmco: unref short failure
[h264 @ 0x55b931402b40] mmco: unref short failure
[h264 @ 0x55b931402b40] mmco: unref short failure
[h264 @ 0x55b931402b40] mmco: unref short failure
[h264 @ 0x55b931402b40] mmco: unref short failure
[h264 @ 0x55ee3d384940] mmco: unref short failure
[h264 @ 0x55ee3d384940] mmco: unref short failure
[h264 @ 0x55fccefc1640] mmco: unref short failure
[h264 @ 0x55fccefc1640] mmco: unref short failure
[h264 @ 0x55b8f05801c0] mmco: unref short failure
[h264 @ 0x55b8f05801c0] mmco: unref short failure
[h264 @ 0x55fcd2278740] mmco: unref short failure
[h264 @ 0x55fcd2278740] mmco: unref short failure
[h264 @ 0x55fcd33ab580] mmco: unref short failure
[h264 @ 0x55fcd33ab580] mmco: unref short failure
[h264 @ 0x55fcce643d80] mmco: unref short failure
[h264 @ 0x556678e63c00] mmco: unref short failure
[h264 @ 0x556679d39600] mmco: unref short failure
[h264 @ 0x55ee3963e9c0] mmco: unref short failure
[h264 @ 0x55fccdb51100] mmco: unref short failure
[h264 @ 0x55fccdb51100] mmco: unref short failure
[h264 @ 0x55fcdb1d3140] mmco: unref short failure
[h264 @ 0x55fcdb1d3140] mmco: unref short failure
[h264 @ 0x55fcdf93d9c0] mmco: unref short failure
[h264 @ 0x55fcdf93d9c0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:16,  2.86it/s][A
  1%|          | 2/221 [00:00<00:57,  3.78it/s][A
  1%|▏         | 3/221 [00:01<01:23,  2.61it/s][A
  2%|▏         | 5/221 [00:01<00:45,  4.79it/s][A
  3%|▎         | 6/221 [00:01<00:39,  5.47it/s][A
  3%|▎         | 7/221 [00:01<00:37,  5.74it/s][A
  4%|▍         | 9/221 [00:01<00:31,  6.75it/s][A
  5%|▍         | 10/221 [00:01<00:32,  6.59it/s][A
  5%|▌         | 12/221 [00:02<00:59,  3.54it/s][A
  6%|▌         | 13/221 [00:02<00:50,  4.14it/s][A
  6%|▋         | 14/221 [00:03<00:45,  4.56it/s][A
  7%|▋         | 16/221 [00:03<00:35,  5.70it/s][A
  8%|▊         | 17/221 [00:04<01:07,  3.03it/s][A
  8%|▊         | 18/221 [00:04<00:59,  3.44it/s][A
  9%|▊         | 19/221 [00:04<00:54,  3.73it/s][A
 10%|▉         | 21/221 [00:04<00:38,  5.14it/s][A
 10%|▉         | 22/221 [00:05<00:41,  4.80it/s][A
 11%|█         | 24/221 [00:05<00:29,  6.74it/s][A
 11%|█▏        | 25/221 [00:05<00:27,  7.23it/s][A
 12%|█▏        | 26/221 [00:05<00:29,  6.62it/s][A
 13%|█▎        | 28/221 [00:05<00:34,  5.60it/s][A
 13%|█▎        | 29/221 [00:06<00:33,  5.69it/s][A
 14%|█▎        | 30/221 [00:06<00:30,  6.33it/s][A
 14%|█▍        | 31/221 [00:06<00:31,  6.09it/s][A[h264 @ 0x55ee3cccc400] mmco: unref short failure
[h264 @ 0x55ee3cccc400] mmco: unref short failure

 15%|█▍        | 33/221 [00:06<00:24,  7.80it/s][A
 16%|█▌        | 35/221 [00:06<00:19,  9.37it/s][A
 17%|█▋        | 37/221 [00:07<00:27,  6.65it/s][A
 17%|█▋        | 38/221 [00:08<00:59,  3.07it/s][A
 18%|█▊        | 39/221 [00:08<00:50,  3.62it/s][A
 18%|█▊        | 40/221 [00:08<00:48,  3.77it/s][A
 19%|█▉        | 42/221 [00:09<00:50,  3.55it/s][A
 20%|█▉        | 44/221 [00:09<00:35,  5.06it/s][A
 20%|██        | 45/221 [00:11<01:39,  1.78it/s][A
 21%|██        | 46/221 [00:11<01:26,  2.01it/s][A
 21%|██▏       | 47/221 [00:12<02:04,  1.40it/s][A
 22%|██▏       | 49/221 [00:12<01:21,  2.12it/s][A
 23%|██▎       | 51/221 [00:13<00:55,  3.05it/s][A
 24%|██▍       | 53/221 [00:13<00:41,  4.04it/s][A
 24%|██▍       | 54/221 [00:14<00:57,  2.88it/s][A
 25%|██▍       | 55/221 [00:14<00:59,  2.80it/s][A
 25%|██▌       | 56/221 [00:14<00:49,  3.36it/s][A
 26%|██▌       | 58/221 [00:14<00:32,  4.95it/s][A
 27%|██▋       | 60/221 [00:15<00:47,  3.40it/s][A
 28%|██▊       | 61/221 [00:15<00:40,  3.91it/s][A
 28%|██▊       | 62/221 [00:15<00:37,  4.22it/s][A
 29%|██▊       | 63/221 [00:16<00:32,  4.86it/s][A
 29%|██▉       | 64/221 [00:16<00:37,  4.16it/s][A
 30%|██▉       | 66/221 [00:17<00:52,  2.93it/s][A
 30%|███       | 67/221 [00:17<00:44,  3.50it/s][A
 31%|███       | 68/221 [00:17<00:42,  3.62it/s][A
 31%|███       | 69/221 [00:19<01:34,  1.60it/s][A
 32%|███▏      | 71/221 [00:19<01:03,  2.36it/s][A
 33%|███▎      | 72/221 [00:19<00:59,  2.51it/s][A
 33%|███▎      | 73/221 [00:20<01:00,  2.45it/s][A
 34%|███▍      | 75/221 [00:20<00:45,  3.19it/s][A
 35%|███▍      | 77/221 [00:21<00:44,  3.23it/s][A
 36%|███▌      | 79/221 [00:21<00:38,  3.73it/s][A
 37%|███▋      | 81/221 [00:22<00:38,  3.61it/s][A
 37%|███▋      | 82/221 [00:22<00:45,  3.08it/s][A
 38%|███▊      | 83/221 [00:22<00:40,  3.42it/s][A
 39%|███▉      | 86/221 [00:23<00:23,  5.77it/s][A
 39%|███▉      | 87/221 [00:23<00:37,  3.57it/s][A
 40%|███▉      | 88/221 [00:24<00:47,  2.81it/s][A
 40%|████      | 89/221 [00:24<00:47,  2.79it/s][A
 41%|████      | 90/221 [00:25<00:47,  2.74it/s][A
 42%|████▏     | 92/221 [00:25<00:32,  3.94it/s][A
 42%|████▏     | 93/221 [00:25<00:32,  3.99it/s][A
 43%|████▎     | 94/221 [00:25<00:30,  4.16it/s][A
 43%|████▎     | 95/221 [00:25<00:25,  4.88it/s][A
 43%|████▎     | 96/221 [00:26<00:37,  3.35it/s][A
 44%|████▍     | 98/221 [00:27<00:37,  3.30it/s][A
 45%|████▌     | 100/221 [00:27<00:24,  4.85it/s][A
 46%|████▌     | 102/221 [00:27<00:28,  4.14it/s][A
 47%|████▋     | 104/221 [00:28<00:21,  5.35it/s][A
 48%|████▊     | 105/221 [00:28<00:22,  5.16it/s][A
 48%|████▊     | 106/221 [00:29<00:45,  2.54it/s][A
 49%|████▉     | 108/221 [00:29<00:30,  3.70it/s][A
 49%|████▉     | 109/221 [00:29<00:26,  4.19it/s][A
 50%|█████     | 111/221 [00:29<00:22,  4.98it/s][A
 51%|█████     | 112/221 [00:30<00:20,  5.43it/s][A
 51%|█████     | 113/221 [00:30<00:27,  3.95it/s][A
 52%|█████▏    | 115/221 [00:30<00:18,  5.76it/s][A
 52%|█████▏    | 116/221 [00:31<00:28,  3.62it/s][A
 53%|█████▎    | 117/221 [00:31<00:31,  3.35it/s][A
 53%|█████▎    | 118/221 [00:31<00:25,  4.03it/s][A
 54%|█████▍    | 119/221 [00:31<00:21,  4.68it/s][A
 54%|█████▍    | 120/221 [00:32<00:20,  4.98it/s][A[h264 @ 0x55fcd2dde040] mmco: unref short failure
[h264 @ 0x55fcd2dde040] mmco: unref short failure
[h264 @ 0x55fcd2dde040] mmco: unref short failure

 55%|█████▌    | 122/221 [00:32<00:13,  7.24it/s][A
 56%|█████▌    | 124/221 [00:32<00:14,  6.58it/s][A
 57%|█████▋    | 125/221 [00:33<00:26,  3.64it/s][A
 57%|█████▋    | 126/221 [00:33<00:26,  3.60it/s][A
 57%|█████▋    | 127/221 [00:35<01:06,  1.41it/s][A
 58%|█████▊    | 128/221 [00:35<00:56,  1.65it/s][A
 59%|█████▉    | 130/221 [00:35<00:34,  2.67it/s][A
 60%|█████▉    | 132/221 [00:37<00:42,  2.11it/s][A
 60%|██████    | 133/221 [00:37<00:37,  2.38it/s][A
 61%|██████    | 134/221 [00:39<01:13,  1.19it/s][A
 61%|██████    | 135/221 [00:40<01:03,  1.35it/s][A
 62%|██████▏   | 136/221 [00:40<00:55,  1.54it/s][A
 62%|██████▏   | 137/221 [00:40<00:49,  1.69it/s][A
 62%|██████▏   | 138/221 [00:42<01:14,  1.11it/s][A
 63%|██████▎   | 139/221 [00:43<01:15,  1.09it/s][A
 63%|██████▎   | 140/221 [00:44<01:12,  1.11it/s][A
 64%|██████▍   | 141/221 [00:45<01:09,  1.16it/s][A
 64%|██████▍   | 142/221 [00:45<00:58,  1.34it/s][A
 65%|██████▍   | 143/221 [00:46<00:53,  1.45it/s][A
 65%|██████▌   | 144/221 [00:46<00:39,  1.93it/s][A
 67%|██████▋   | 147/221 [00:46<00:19,  3.83it/s][A
 67%|██████▋   | 149/221 [00:46<00:14,  4.97it/s][A
 68%|██████▊   | 150/221 [00:46<00:13,  5.35it/s][A
 68%|██████▊   | 151/221 [00:47<00:16,  4.34it/s][A
 69%|██████▉   | 152/221 [00:47<00:17,  3.88it/s][A
 69%|██████▉   | 153/221 [00:47<00:17,  3.95it/s][A
 70%|██████▉   | 154/221 [00:47<00:15,  4.44it/s][A
 70%|███████   | 155/221 [00:48<00:12,  5.08it/s][A
 71%|███████   | 156/221 [00:48<00:13,  4.74it/s][A
 71%|███████   | 157/221 [00:50<00:43,  1.47it/s][A
 71%|███████▏  | 158/221 [00:50<00:34,  1.82it/s][A
 72%|███████▏  | 159/221 [00:50<00:28,  2.17it/s][A
 73%|███████▎  | 161/221 [00:50<00:16,  3.58it/s][A
 74%|███████▍  | 163/221 [00:50<00:12,  4.59it/s][A
 74%|███████▍  | 164/221 [00:51<00:12,  4.46it/s][A
 75%|███████▍  | 165/221 [00:51<00:13,  4.05it/s][A
 75%|███████▌  | 166/221 [00:52<00:19,  2.88it/s][A
 76%|███████▌  | 168/221 [00:54<00:40,  1.31it/s][A
 77%|███████▋  | 170/221 [00:55<00:26,  1.89it/s][A
 77%|███████▋  | 171/221 [00:55<00:29,  1.70it/s][A
 78%|███████▊  | 172/221 [00:56<00:23,  2.08it/s][A
 78%|███████▊  | 173/221 [00:56<00:20,  2.37it/s][A
 79%|███████▉  | 175/221 [00:56<00:13,  3.38it/s][A
 80%|███████▉  | 176/221 [00:56<00:12,  3.52it/s][A
 80%|████████  | 177/221 [00:56<00:10,  4.11it/s][A
 81%|████████  | 178/221 [00:57<00:09,  4.38it/s][A
 81%|████████  | 179/221 [00:58<00:23,  1.82it/s][A
 82%|████████▏ | 182/221 [00:58<00:11,  3.29it/s][A
 83%|████████▎ | 183/221 [00:59<00:10,  3.48it/s][A
 83%|████████▎ | 184/221 [00:59<00:12,  2.89it/s][A
 84%|████████▍ | 186/221 [01:00<00:10,  3.25it/s][A
 85%|████████▍ | 187/221 [01:00<00:09,  3.51it/s][A
 85%|████████▌ | 188/221 [01:00<00:07,  4.13it/s][A
 86%|████████▌ | 189/221 [01:00<00:07,  4.51it/s][A
 86%|████████▌ | 190/221 [01:00<00:07,  4.31it/s][A
 87%|████████▋ | 192/221 [01:01<00:06,  4.56it/s][A
 88%|████████▊ | 194/221 [01:01<00:06,  3.87it/s][A
 89%|████████▊ | 196/221 [01:01<00:04,  5.28it/s][A
 89%|████████▉ | 197/221 [01:02<00:04,  5.41it/s][A
 90%|█████████ | 199/221 [01:02<00:03,  7.06it/s][A
 90%|█████████ | 200/221 [01:02<00:02,  7.23it/s][A
 91%|█████████ | 201/221 [01:02<00:02,  7.48it/s][A
 92%|█████████▏| 203/221 [01:02<00:02,  8.25it/s][A
 93%|█████████▎| 205/221 [01:02<00:01, 10.08it/s][A
 94%|█████████▎| 207/221 [01:03<00:02,  6.56it/s][A
 94%|█████████▍| 208/221 [01:03<00:02,  6.04it/s][A
 95%|█████████▍| 209/221 [01:03<00:02,  5.70it/s][A
 95%|█████████▌| 211/221 [01:04<00:01,  5.08it/s][A
 96%|█████████▌| 212/221 [01:04<00:01,  4.63it/s][A
 96%|█████████▋| 213/221 [01:04<00:01,  4.99it/s][A
 97%|█████████▋| 214/221 [01:05<00:02,  2.52it/s][A
 97%|█████████▋| 215/221 [01:05<00:02,  2.99it/s][A
 98%|█████████▊| 216/221 [01:06<00:01,  3.39it/s][A
 98%|█████████▊| 217/221 [01:08<00:03,  1.10it/s][A
 99%|█████████▊| 218/221 [01:08<00:02,  1.42it/s][A
 99%|█████████▉| 219/221 [01:08<00:01,  1.88it/s][A
100%|█████████▉| 220/221 [01:09<00:00,  1.71it/s][A100%|██████████| 221/221 [01:09<00:00,  3.18it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.79it/s][A
  1%|          | 2/221 [00:00<00:57,  3.79it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.79it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.79it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.79it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.79it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.79it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.79it/s][A
  4%|▍         | 9/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.79it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.79it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.79it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.79it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.79it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.78it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:31,  2.93it/s][A
 59%|█████▉    | 130/221 [00:34<00:28,  3.14it/s][A
 59%|█████▉    | 131/221 [00:34<00:27,  3.31it/s][A
 60%|█████▉    | 132/221 [00:35<00:25,  3.44it/s][A
 60%|██████    | 133/221 [00:35<00:24,  3.54it/s][A
 61%|██████    | 134/221 [00:35<00:24,  3.60it/s][A
 61%|██████    | 135/221 [00:35<00:23,  3.66it/s][A
 62%|██████▏   | 136/221 [00:36<00:23,  3.69it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.72it/s][A
 62%|██████▏   | 138/221 [00:36<00:22,  3.74it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.76it/s][A
 63%|██████▎   | 140/221 [00:37<00:21,  3.76it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.77it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.78it/s][A
 65%|██████▍   | 143/221 [00:38<00:20,  3.78it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 147/221 [00:39<00:19,  3.79it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.79it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.79it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 151/221 [00:40<00:18,  3.79it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.79it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.79it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.79it/s][A
 70%|███████   | 155/221 [00:41<00:17,  3.79it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.79it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.79it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.79it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.79it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.79it/s][A
 73%|███████▎  | 162/221 [00:43<00:15,  3.79it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.79it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.79it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:44<00:14,  3.79it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.79it/s][A
 76%|███████▌  | 168/221 [00:44<00:13,  3.79it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:45<00:13,  3.79it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.79it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.79it/s][A
 79%|███████▊  | 174/221 [00:46<00:12,  3.79it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.79it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.79it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.79it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.79it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 181/221 [00:48<00:10,  3.79it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.79it/s][A
 84%|████████▎ | 185/221 [00:49<00:09,  3.79it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.79it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.79it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 189/221 [00:50<00:08,  3.79it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.79it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 193/221 [00:51<00:07,  3.79it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.79it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.79it/s][A
 89%|████████▊ | 196/221 [00:52<00:06,  3.79it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.79it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.79it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.79it/s][A
 90%|█████████ | 200/221 [00:53<00:05,  3.79it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.79it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.79it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.79it/s][A
 92%|█████████▏| 204/221 [00:54<00:04,  3.79it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.79it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▍| 208/221 [00:55<00:03,  3.79it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.79it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.79it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▌| 212/221 [00:56<00:02,  3.79it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.79it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.79it/s][A
 97%|█████████▋| 215/221 [00:57<00:01,  3.79it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.79it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.79it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.79it/s][A
 99%|█████████▉| 219/221 [00:58<00:00,  3.79it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.79it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.79it/s][A100%|██████████| 221/221 [00:58<00:00,  3.77it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:22,  9.82it/s][A
  1%|          | 2/221 [00:00<00:33,  6.60it/s][A
  1%|▏         | 3/221 [00:00<00:37,  5.78it/s][A
  2%|▏         | 4/221 [00:00<00:32,  6.75it/s][A
  3%|▎         | 6/221 [00:00<00:22,  9.47it/s][A
  4%|▎         | 8/221 [00:01<00:32,  6.46it/s][A
  4%|▍         | 9/221 [00:01<00:33,  6.30it/s][A
  5%|▍         | 10/221 [00:01<00:48,  4.37it/s][A
  5%|▍         | 11/221 [00:01<00:43,  4.78it/s][A
  5%|▌         | 12/221 [00:02<00:41,  5.06it/s][A
  6%|▌         | 13/221 [00:02<00:55,  3.75it/s][A
  6%|▋         | 14/221 [00:02<00:46,  4.46it/s][A
  7%|▋         | 15/221 [00:02<00:44,  4.58it/s][A
  7%|▋         | 16/221 [00:03<00:49,  4.15it/s][A
  8%|▊         | 17/221 [00:04<01:27,  2.34it/s][A
  8%|▊         | 18/221 [00:04<01:10,  2.86it/s][A
  9%|▊         | 19/221 [00:04<01:02,  3.21it/s][A
  9%|▉         | 20/221 [00:04<00:51,  3.92it/s][A
 10%|▉         | 21/221 [00:04<00:44,  4.48it/s][A
 10%|▉         | 22/221 [00:04<00:45,  4.39it/s][A
 11%|█         | 24/221 [00:05<00:32,  5.98it/s][A
 11%|█▏        | 25/221 [00:05<00:33,  5.87it/s][A
 12%|█▏        | 26/221 [00:05<00:37,  5.20it/s][A
 12%|█▏        | 27/221 [00:05<00:39,  4.93it/s][A
 13%|█▎        | 28/221 [00:06<00:44,  4.30it/s][A
 13%|█▎        | 29/221 [00:06<00:50,  3.80it/s][A
 14%|█▎        | 30/221 [00:06<00:59,  3.19it/s][A
 14%|█▍        | 31/221 [00:07<00:51,  3.69it/s][A
 15%|█▍        | 33/221 [00:07<00:38,  4.94it/s][A
 16%|█▌        | 35/221 [00:07<00:33,  5.63it/s][A
 16%|█▋        | 36/221 [00:07<00:37,  4.93it/s][A
 17%|█▋        | 37/221 [00:08<00:35,  5.18it/s][A
 17%|█▋        | 38/221 [00:08<00:42,  4.32it/s][A
 18%|█▊        | 39/221 [00:08<00:44,  4.07it/s][A
 18%|█▊        | 40/221 [00:09<00:59,  3.05it/s][A
 19%|█▉        | 42/221 [00:09<00:40,  4.40it/s][A
 20%|█▉        | 44/221 [00:09<00:30,  5.75it/s][A
 20%|██        | 45/221 [00:09<00:35,  4.89it/s][A
 21%|██        | 46/221 [00:10<00:35,  4.93it/s][A
 21%|██▏       | 47/221 [00:10<00:33,  5.16it/s][A
 22%|██▏       | 49/221 [00:10<00:29,  5.89it/s][A
 23%|██▎       | 50/221 [00:10<00:32,  5.30it/s][A
 23%|██▎       | 51/221 [00:10<00:30,  5.55it/s][A
 24%|██▎       | 52/221 [00:11<00:37,  4.46it/s][A
 24%|██▍       | 54/221 [00:11<00:44,  3.73it/s][A
 25%|██▍       | 55/221 [00:12<00:45,  3.68it/s][A
 25%|██▌       | 56/221 [00:12<00:38,  4.33it/s][A
 26%|██▌       | 57/221 [00:12<00:35,  4.64it/s][A
 26%|██▌       | 58/221 [00:12<00:39,  4.12it/s][A
 27%|██▋       | 59/221 [00:12<00:33,  4.87it/s][A
 27%|██▋       | 60/221 [00:13<00:38,  4.22it/s][A
 28%|██▊       | 61/221 [00:13<00:33,  4.83it/s][A
 28%|██▊       | 62/221 [00:13<00:31,  5.12it/s][A
 29%|██▊       | 63/221 [00:13<00:43,  3.65it/s][A
 29%|██▉       | 64/221 [00:14<01:00,  2.60it/s][A
 29%|██▉       | 65/221 [00:14<00:49,  3.17it/s][A
 30%|██▉       | 66/221 [00:15<00:58,  2.66it/s][A
 30%|███       | 67/221 [00:15<00:54,  2.84it/s][A
 31%|███       | 68/221 [00:15<00:47,  3.23it/s][A
 31%|███       | 69/221 [00:17<01:36,  1.57it/s][A
 32%|███▏      | 70/221 [00:17<01:13,  2.06it/s][A
 32%|███▏      | 71/221 [00:17<00:58,  2.56it/s][A
 33%|███▎      | 72/221 [00:17<01:00,  2.48it/s][A
 33%|███▎      | 73/221 [00:18<00:54,  2.70it/s][A
 34%|███▍      | 75/221 [00:18<00:39,  3.73it/s][A
 34%|███▍      | 76/221 [00:18<00:36,  3.94it/s][A
 35%|███▍      | 77/221 [00:19<00:45,  3.13it/s][A
 35%|███▌      | 78/221 [00:19<00:37,  3.83it/s][A
 36%|███▌      | 79/221 [00:19<00:40,  3.47it/s][A
 36%|███▌      | 80/221 [00:19<00:37,  3.77it/s][A
 37%|███▋      | 81/221 [00:20<00:35,  3.93it/s][A
 37%|███▋      | 82/221 [00:20<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:20<00:48,  2.86it/s][A
 38%|███▊      | 84/221 [00:21<00:42,  3.26it/s][A
 39%|███▉      | 86/221 [00:21<00:28,  4.80it/s][A
 39%|███▉      | 87/221 [00:21<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:22<00:36,  3.61it/s][A
 40%|████      | 89/221 [00:22<00:35,  3.67it/s][A
 41%|████      | 90/221 [00:22<00:47,  2.76it/s][A
 41%|████      | 91/221 [00:23<00:38,  3.42it/s][A
 42%|████▏     | 92/221 [00:23<00:34,  3.73it/s][A
 42%|████▏     | 93/221 [00:23<00:45,  2.83it/s][A
 43%|████▎     | 94/221 [00:24<00:51,  2.49it/s][A
 43%|████▎     | 95/221 [00:24<00:44,  2.85it/s][A
 43%|████▎     | 96/221 [00:25<00:57,  2.17it/s][A
 44%|████▍     | 97/221 [00:25<00:46,  2.69it/s][A
 44%|████▍     | 98/221 [00:26<01:04,  1.91it/s][A
 45%|████▍     | 99/221 [00:26<00:49,  2.45it/s][A
 45%|████▌     | 100/221 [00:26<00:42,  2.83it/s][A
 46%|████▌     | 101/221 [00:27<00:38,  3.10it/s][A
 46%|████▌     | 102/221 [00:28<01:03,  1.87it/s][A
 47%|████▋     | 103/221 [00:28<00:47,  2.47it/s][A
 47%|████▋     | 104/221 [00:28<00:37,  3.14it/s][A
 48%|████▊     | 105/221 [00:28<00:36,  3.21it/s][A
 48%|████▊     | 106/221 [00:28<00:39,  2.88it/s][A
 48%|████▊     | 107/221 [00:29<00:34,  3.34it/s][A
 49%|████▉     | 108/221 [00:29<00:30,  3.68it/s][A
 49%|████▉     | 109/221 [00:29<00:25,  4.43it/s][A
 50%|████▉     | 110/221 [00:29<00:22,  5.03it/s][A
 50%|█████     | 111/221 [00:29<00:21,  5.00it/s][A
 51%|█████     | 112/221 [00:30<00:24,  4.42it/s][A
 51%|█████     | 113/221 [00:30<00:32,  3.36it/s][A
 52%|█████▏    | 115/221 [00:30<00:23,  4.59it/s][A
 52%|█████▏    | 116/221 [00:31<00:23,  4.51it/s][A
 53%|█████▎    | 117/221 [00:31<00:23,  4.42it/s][A
 53%|█████▎    | 118/221 [00:31<00:22,  4.68it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.86it/s][A
 54%|█████▍    | 120/221 [00:31<00:21,  4.62it/s][A
 55%|█████▍    | 121/221 [00:32<00:18,  5.39it/s][A
 55%|█████▌    | 122/221 [00:32<00:20,  4.86it/s][A
 56%|█████▌    | 123/221 [00:32<00:17,  5.45it/s][A
 56%|█████▌    | 124/221 [00:32<00:24,  4.01it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.72it/s][A
 57%|█████▋    | 126/221 [00:33<00:22,  4.15it/s][A
 57%|█████▋    | 127/221 [00:33<00:28,  3.31it/s][A
 58%|█████▊    | 128/221 [00:34<00:25,  3.60it/s][A
 59%|█████▉    | 130/221 [00:34<00:20,  4.39it/s][A
 59%|█████▉    | 131/221 [00:34<00:17,  5.07it/s][A
 60%|█████▉    | 132/221 [00:35<00:40,  2.19it/s][A
 60%|██████    | 133/221 [00:35<00:35,  2.50it/s][A
 61%|██████    | 134/221 [00:36<00:42,  2.05it/s][A
 61%|██████    | 135/221 [00:37<00:43,  1.98it/s][A
 62%|██████▏   | 136/221 [00:37<00:36,  2.35it/s][A
 62%|██████▏   | 137/221 [00:37<00:30,  2.76it/s][A
 62%|██████▏   | 138/221 [00:37<00:30,  2.77it/s][A
 63%|██████▎   | 139/221 [00:38<00:35,  2.30it/s][A
 63%|██████▎   | 140/221 [00:38<00:34,  2.33it/s][A
 64%|██████▍   | 141/221 [00:39<00:32,  2.44it/s][A
 64%|██████▍   | 142/221 [00:39<00:27,  2.90it/s][A
 65%|██████▍   | 143/221 [00:40<00:35,  2.17it/s][A
 65%|██████▌   | 144/221 [00:40<00:36,  2.13it/s][A
 66%|██████▌   | 145/221 [00:40<00:27,  2.76it/s][A
 66%|██████▌   | 146/221 [00:40<00:21,  3.52it/s][A
 67%|██████▋   | 147/221 [00:41<00:21,  3.52it/s][A
 67%|██████▋   | 148/221 [00:41<00:24,  2.95it/s][A
 67%|██████▋   | 149/221 [00:42<00:30,  2.34it/s][A
 68%|██████▊   | 150/221 [00:42<00:27,  2.59it/s][A
 68%|██████▊   | 151/221 [00:42<00:25,  2.77it/s][A
 69%|██████▉   | 152/221 [00:43<00:26,  2.62it/s][A
 69%|██████▉   | 153/221 [00:43<00:22,  3.02it/s][A
 70%|██████▉   | 154/221 [00:43<00:19,  3.43it/s][A
 70%|███████   | 155/221 [00:44<00:19,  3.37it/s][A
 71%|███████   | 156/221 [00:44<00:17,  3.72it/s][A
 71%|███████   | 157/221 [00:44<00:17,  3.66it/s][A
 71%|███████▏  | 158/221 [00:44<00:16,  3.72it/s][A
 72%|███████▏  | 159/221 [00:45<00:14,  4.26it/s][A
 72%|███████▏  | 160/221 [00:45<00:12,  5.07it/s][A
 73%|███████▎  | 161/221 [00:45<00:17,  3.44it/s][A
 74%|███████▍  | 163/221 [00:45<00:13,  4.42it/s][A
 74%|███████▍  | 164/221 [00:46<00:12,  4.66it/s][A
 75%|███████▍  | 165/221 [00:46<00:14,  3.89it/s][A
 75%|███████▌  | 166/221 [00:46<00:13,  4.02it/s][A
 76%|███████▌  | 167/221 [00:46<00:11,  4.69it/s][A
 76%|███████▌  | 168/221 [00:47<00:10,  4.86it/s][A
 77%|███████▋  | 170/221 [00:47<00:10,  4.71it/s][A
 77%|███████▋  | 171/221 [00:47<00:13,  3.72it/s][A
 78%|███████▊  | 172/221 [00:48<00:12,  3.79it/s][A
 78%|███████▊  | 173/221 [00:48<00:15,  3.15it/s][A
 79%|███████▊  | 174/221 [00:49<00:18,  2.55it/s][A
 79%|███████▉  | 175/221 [00:49<00:16,  2.75it/s][A
 80%|███████▉  | 176/221 [00:49<00:14,  3.14it/s][A
 81%|████████  | 178/221 [00:50<00:10,  3.98it/s][A
 81%|████████  | 179/221 [00:50<00:10,  3.83it/s][A
 81%|████████▏ | 180/221 [00:50<00:09,  4.38it/s][A
 82%|████████▏ | 181/221 [00:50<00:07,  5.09it/s][A
 82%|████████▏ | 182/221 [00:50<00:09,  3.98it/s][A
 83%|████████▎ | 183/221 [00:51<00:09,  3.87it/s][A
 83%|████████▎ | 184/221 [00:51<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:51<00:09,  3.85it/s][A
 84%|████████▍ | 186/221 [00:52<00:15,  2.26it/s][A
 85%|████████▍ | 187/221 [00:52<00:12,  2.66it/s][A
 85%|████████▌ | 188/221 [00:53<00:11,  2.85it/s][A
 86%|████████▌ | 189/221 [00:53<00:09,  3.25it/s][A
 86%|████████▌ | 190/221 [00:53<00:10,  3.09it/s][A
 87%|████████▋ | 192/221 [00:54<00:07,  3.81it/s][A
 87%|████████▋ | 193/221 [00:54<00:06,  4.45it/s][A
 88%|████████▊ | 194/221 [00:54<00:06,  3.96it/s][A
 88%|████████▊ | 195/221 [00:54<00:06,  3.93it/s][A
 89%|████████▊ | 196/221 [00:55<00:06,  4.13it/s][A
 89%|████████▉ | 197/221 [00:55<00:05,  4.42it/s][A
 90%|████████▉ | 198/221 [00:55<00:05,  4.46it/s][A
 90%|█████████ | 199/221 [00:55<00:05,  4.38it/s][A
 90%|█████████ | 200/221 [00:56<00:05,  3.88it/s][A
 91%|█████████ | 201/221 [00:56<00:04,  4.59it/s][A
 91%|█████████▏| 202/221 [00:56<00:04,  4.13it/s][A
 92%|█████████▏| 203/221 [00:56<00:03,  4.87it/s][A
 92%|█████████▏| 204/221 [00:56<00:04,  3.90it/s][A
 93%|█████████▎| 205/221 [00:57<00:03,  4.74it/s][A
 93%|█████████▎| 206/221 [00:57<00:04,  3.56it/s][A
 94%|█████████▎| 207/221 [00:57<00:03,  4.24it/s][A
 94%|█████████▍| 208/221 [00:57<00:02,  4.45it/s][A
 95%|█████████▍| 209/221 [00:58<00:02,  4.73it/s][A
 95%|█████████▌| 211/221 [00:58<00:02,  4.69it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  4.07it/s][A
 96%|█████████▋| 213/221 [00:58<00:01,  4.50it/s][A
 97%|█████████▋| 214/221 [00:59<00:02,  2.40it/s][A
 97%|█████████▋| 215/221 [01:00<00:02,  2.91it/s][A
 98%|█████████▊| 216/221 [01:00<00:01,  3.22it/s][A
 98%|█████████▊| 217/221 [01:00<00:01,  3.02it/s][A
 99%|█████████▊| 218/221 [01:00<00:00,  3.27it/s][A
 99%|█████████▉| 219/221 [01:01<00:00,  3.33it/s][A
100%|█████████▉| 220/221 [01:01<00:00,  3.89it/s][A
100%|██████████| 221/221 [01:01<00:00,  4.56it/s][A100%|██████████| 221/221 [01:01<00:00,  3.60it/s]
09/07/2024 15:02:46 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 899--===========

09/07/2024 15:02:46 - INFO - __main__ -   {'area_r1': 21.9, 'area_recall': '21.9/46.6/55.9', 'area_ravg': 41.5}
09/07/2024 15:02:46 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 899--===========

09/07/2024 15:02:46 - INFO - __main__ -   {'forward_r1': 36.3, 'forward_recall': '36.3/62.7/71.7', 'forward_ravg': 56.9}
09/07/2024 15:02:46 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 899--===========

09/07/2024 15:02:46 - INFO - __main__ -   {'area_video_r1': 38.5, 'area_video_recall': '38.5/65.6/75.9', 'area_video_ravg': 60.0}
09/07/2024 15:02:46 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 899=======

09/07/2024 15:02:46 - INFO - __main__ -   {'area_video_r1': 38.5, 'area_video_recall': '38.5/65.6/75.9', 'area_video_ravg': 60.0}
09/07/2024 15:02:46 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 899--===========

09/07/2024 15:02:46 - INFO - __main__ -   {'area_video_r1': 50.7, 'area_video_recall': '50.7/74.0/81.0', 'area_video_ravg': 68.6, 'area_video_back_r1': 50.1, 'area_video_back_recall': '50.1/73.3/80.9', 'area_video_back_ravg': 68.1}
09/07/2024 15:02:46 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 599=======

09/07/2024 15:02:46 - INFO - __main__ -   {'area_video_r1': 51.1, 'area_video_recall': '51.1/74.4/80.2', 'area_video_ravg': 68.6, 'area_video_back_r1': 49.1, 'area_video_back_recall': '49.1/72.5/80.4', 'area_video_back_ravg': 67.3}
09/07/2024 15:02:46 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 899--===========

09/07/2024 15:02:46 - INFO - __main__ -   {'video_r1': 41.5, 'video_recall': '41.5/70.2/80.9', 'video_ravg': 64.2}
09/07/2024 15:02:46 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 299=======

09/07/2024 15:02:46 - INFO - __main__ -   {'video_r1': 42.3, 'video_recall': '42.3/71.2/80.8', 'video_ravg': 64.7}
09/07/2024 15:02:46 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 899--===========

09/07/2024 15:02:46 - INFO - __main__ -   {'video_r1': 50.9, 'video_recall': '50.9/74.7/82.1', 'video_ravg': 69.2}
09/07/2024 15:02:46 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 599=======

09/07/2024 15:02:46 - INFO - __main__ -   {'video_r1': 51.8, 'video_recall': '51.8/75.5/82.9', 'video_ravg': 70.1}
09/07/2024 15:03:09 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.2955026626586914, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04599560797214508, 'loss_ret%tv%ta--finetune_area/loss_area': 2.5826869010925293, 'loss_ret%tv%ta--finetune_area/total_loss': 5.924185276031494}
 46%|████▋     | 900/1945 [3:19:13<33:32:33, 115.55s/it] 46%|████▋     | 901/1945 [3:19:16<23:41:23, 81.69s/it]  46%|████▋     | 902/1945 [3:19:19<16:51:23, 58.18s/it] 46%|████▋     | 903/1945 [3:19:23<12:06:19, 41.82s/it][h264 @ 0x55fcd79781c0] mmco: unref short failure
 46%|████▋     | 904/1945 [3:19:27<8:50:38, 30.58s/it] [h264 @ 0x556676749d40] mmco: unref short failure
[h264 @ 0x55b936516180] mmco: unref short failure
[h264 @ 0x55b936516180] mmco: unref short failure
 47%|████▋     | 905/1945 [3:19:32<6:35:07, 22.80s/it] 47%|████▋     | 906/1945 [3:19:37<5:00:04, 17.33s/it] 47%|████▋     | 907/1945 [3:19:42<3:58:20, 13.78s/it] 47%|████▋     | 908/1945 [3:19:48<3:16:34, 11.37s/it][h264 @ 0x55fcdf2aeb00] mmco: unref short failure
[h264 @ 0x55fcdf2aeb00] mmco: unref short failure
 47%|████▋     | 909/1945 [3:19:54<2:48:24,  9.75s/it] 47%|████▋     | 910/1945 [3:20:00<2:27:32,  8.55s/it] 47%|████▋     | 911/1945 [3:20:05<2:12:19,  7.68s/it][h264 @ 0x55ee3fa534c0] mmco: unref short failure
 47%|████▋     | 912/1945 [3:20:13<2:11:41,  7.65s/it] 47%|████▋     | 913/1945 [3:20:19<2:04:22,  7.23s/it][h264 @ 0x55fcd6767780] mmco: unref short failure
[h264 @ 0x55fcd6767780] mmco: unref short failure
[h264 @ 0x55fcd390ebc0] mmco: unref short failure
[h264 @ 0x55fcd390ebc0] mmco: unref short failure
 47%|████▋     | 914/1945 [3:20:25<1:56:32,  6.78s/it][h264 @ 0x55ee3cbe8cc0] mmco: unref short failure
[h264 @ 0x55ee3cbe8cc0] mmco: unref short failure
[h264 @ 0x55fcdb9aa540] mmco: unref short failure
[h264 @ 0x55fcdb9aa540] mmco: unref short failure
 47%|████▋     | 915/1945 [3:20:31<1:52:09,  6.53s/it][h264 @ 0x55667bced9c0] mmco: unref short failure
 47%|████▋     | 916/1945 [3:20:36<1:48:01,  6.30s/it][h264 @ 0x55fcdc31c740] mmco: unref short failure
 47%|████▋     | 917/1945 [3:20:45<1:58:01,  6.89s/it][h264 @ 0x55667edc0a40] mmco: unref short failure
[h264 @ 0x55ee32be7700] mmco: unref short failure
 47%|████▋     | 918/1945 [3:20:53<2:05:41,  7.34s/it] 47%|████▋     | 919/1945 [3:20:59<1:57:26,  6.87s/it][h264 @ 0x55ee41cd8f00] mmco: unref short failure
 47%|████▋     | 920/1945 [3:21:11<2:24:06,  8.44s/it][h264 @ 0x55667389da00] mmco: unref short failure
[h264 @ 0x55667389da00] mmco: unref short failure
[h264 @ 0x55ee4158dc40] mmco: unref short failure
[h264 @ 0x55ee4158dc40] mmco: unref short failure
 47%|████▋     | 921/1945 [3:21:17<2:09:41,  7.60s/it][h264 @ 0x556680e9d100] mmco: unref short failure
[h264 @ 0x556680e9d100] mmco: unref short failure
[h264 @ 0x556680e9d100] mmco: unref short failure
[h264 @ 0x556680e9d100] mmco: unref short failure
 47%|████▋     | 922/1945 [3:21:22<1:59:54,  7.03s/it][h264 @ 0x55ee43f97b00] mmco: unref short failure
[h264 @ 0x556646d85b40] mmco: unref short failure
[h264 @ 0x55b9306adf80] mmco: unref short failure
[h264 @ 0x55b9306adf80] mmco: unref short failure
 47%|████▋     | 923/1945 [3:21:29<1:57:18,  6.89s/it][h264 @ 0x55b8eae85400] mmco: unref short failure
[h264 @ 0x55ee40b27900] mmco: unref short failure
[h264 @ 0x55ee44096c00] mmco: unref short failure
[h264 @ 0x55ee44096c00] mmco: unref short failure
[h264 @ 0x55fcdec69680] mmco: unref short failure
[h264 @ 0x55ee2f73bb80] mmco: unref short failure
[h264 @ 0x55ee2f73bb80] mmco: unref short failure
[h264 @ 0x55ee43dda000] mmco: unref short failure
[h264 @ 0x55ee36a03d40] mmco: unref short failure
 48%|████▊     | 924/1945 [3:22:17<5:25:52, 19.15s/it] 48%|████▊     | 925/1945 [3:22:22<4:17:34, 15.15s/it][h264 @ 0x55b92e4c9780] mmco: unref short failure
 48%|████▊     | 926/1945 [3:22:28<3:27:47, 12.23s/it][h264 @ 0x556689ea9880] mmco: unref short failure
 48%|████▊     | 927/1945 [3:22:40<3:28:15, 12.28s/it][h264 @ 0x55fcd9fcc280] mmco: unref short failure
[h264 @ 0x55fcdfe03180] mmco: unref short failure
[h264 @ 0x55fcdfe03180] mmco: unref short failure
 48%|████▊     | 928/1945 [3:22:54<3:35:45, 12.73s/it][h264 @ 0x55b932ee1880] mmco: unref short failure
[h264 @ 0x55ee3cc9df00] mmco: unref short failure
[h264 @ 0x55ee3cc9df00] mmco: unref short failure
 48%|████▊     | 929/1945 [3:23:01<3:04:00, 10.87s/it][h264 @ 0x55ee439988c0] mmco: unref short failure
[h264 @ 0x55ee439988c0] mmco: unref short failure
[h264 @ 0x55ee439988c0] mmco: unref short failure
[h264 @ 0x55ee439988c0] mmco: unref short failure
 48%|████▊     | 930/1945 [3:23:06<2:38:36,  9.38s/it] 48%|████▊     | 931/1945 [3:23:13<2:22:24,  8.43s/it][h264 @ 0x55b90a211880] mmco: unref short failure
[h264 @ 0x55ee41e3a3c0] mmco: unref short failure
[h264 @ 0x55667bcf7ec0] mmco: unref short failure
[h264 @ 0x55667bcf7ec0] mmco: unref short failure
[h264 @ 0x55fccbc172c0] mmco: unref short failure
[h264 @ 0x55fcdccdc8c0] mmco: unref short failure
[h264 @ 0x55fcd79c16c0] mmco: unref short failure
[h264 @ 0x55fcd79c16c0] mmco: unref short failure
[h264 @ 0x55ee042f4180] mmco: unref short failure
[h264 @ 0x55fccfd9a480] mmco: unref short failure
[h264 @ 0x55b90a0b9980] mmco: unref short failure
[h264 @ 0x556646f936c0] mmco: unref short failure
[h264 @ 0x556646f936c0] mmco: unref short failure
 48%|████▊     | 932/1945 [3:23:52<4:58:56, 17.71s/it][h264 @ 0x556682042dc0] mmco: unref short failure
[h264 @ 0x55fccfd5c6c0] mmco: unref short failure
 48%|████▊     | 933/1945 [3:24:06<4:40:55, 16.66s/it] 48%|████▊     | 934/1945 [3:24:12<3:45:05, 13.36s/it][h264 @ 0x55fcdc5da6c0] mmco: unref short failure
[h264 @ 0x55fcdc5da6c0] mmco: unref short failure
[h264 @ 0x55fce120d040] mmco: unref short failure
[h264 @ 0x55fce120d040] mmco: unref short failure
[h264 @ 0x55b92f1a5340] mmco: unref short failure
[h264 @ 0x556646d08980] mmco: unref short failure
 48%|████▊     | 935/1945 [3:24:21<3:24:22, 12.14s/it] 48%|████▊     | 936/1945 [3:24:33<3:24:48, 12.18s/it] 48%|████▊     | 937/1945 [3:24:39<2:52:53, 10.29s/it] 48%|████▊     | 938/1945 [3:24:46<2:33:17,  9.13s/it][h264 @ 0x55b93364fa00] mmco: unref short failure
[h264 @ 0x55b93364fa00] mmco: unref short failure
 48%|████▊     | 939/1945 [3:24:52<2:18:03,  8.23s/it][h264 @ 0x55fcd2c4b180] mmco: unref short failure
[h264 @ 0x55b90b507e80] mmco: unref short failure
[h264 @ 0x55ee30cb1880] mmco: unref short failure
[h264 @ 0x55ee30cb1880] mmco: unref short failure
[h264 @ 0x55b93330f940] mmco: unref short failure
[h264 @ 0x55b93330f940] mmco: unref short failure
[h264 @ 0x55ee37d5cbc0] mmco: unref short failure
[h264 @ 0x55ee3320eac0] mmco: unref short failure
[h264 @ 0x55ee3320eac0] mmco: unref short failure
[h264 @ 0x55ee3320eac0] mmco: unref short failure
[h264 @ 0x55ee3104c140] mmco: unref short failure
[h264 @ 0x556646f5dac0] mmco: unref short failure
[h264 @ 0x55b8ee22be00] mmco: unref short failure
[h264 @ 0x55ee31e87640] mmco: unref short failure
[h264 @ 0x55ee31e87640] mmco: unref short failure
 48%|████▊     | 940/1945 [3:25:32<4:59:27, 17.88s/it][h264 @ 0x55b8ed1c1e00] mmco: unref short failure
 48%|████▊     | 941/1945 [3:25:44<4:27:25, 15.98s/it] 48%|████▊     | 942/1945 [3:25:49<3:33:18, 12.76s/it] 48%|████▊     | 943/1945 [3:25:55<2:59:17, 10.74s/it][h264 @ 0x55fcca5ee7c0] mmco: unref short failure
 49%|████▊     | 944/1945 [3:26:14<3:38:39, 13.11s/it] 49%|████▊     | 945/1945 [3:26:19<3:00:44, 10.84s/it][h264 @ 0x55b8eb9d8fc0] mmco: unref short failure
[h264 @ 0x55ee37fcb1c0] mmco: unref short failure
[h264 @ 0x55ee37fcb1c0] mmco: unref short failure
 49%|████▊     | 946/1945 [3:26:26<2:40:16,  9.63s/it][h264 @ 0x55b90cb4fe40] mmco: unref short failure
 49%|████▊     | 947/1945 [3:26:32<2:19:12,  8.37s/it][h264 @ 0x55ee3179adc0] mmco: unref short failure
[h264 @ 0x55ee3179adc0] mmco: unref short failure
[h264 @ 0x5566899c0fc0] mmco: unref short failure
[h264 @ 0x55667bd8ed80] mmco: unref short failure
[h264 @ 0x55667bd8ed80] mmco: unref short failure
 49%|████▊     | 948/1945 [3:27:11<4:55:36, 17.79s/it][h264 @ 0x55b8eb44aa40] mmco: unref short failure
 49%|████▉     | 949/1945 [3:27:20<4:11:50, 15.17s/it][h264 @ 0x556646ec4b80] mmco: unref short failure
09/07/2024 15:11:20 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.372224807739258, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.044069863855838776, 'loss_ret%tv%ta--finetune_area/loss_area': 2.9020533561706543, 'loss_ret%tv%ta--finetune_area/total_loss': 6.318347930908203}
 49%|████▉     | 950/1945 [3:27:26<3:23:46, 12.29s/it][h264 @ 0x556676f5a400] mmco: unref short failure
[h264 @ 0x556676f5a400] mmco: unref short failure
 49%|████▉     | 951/1945 [3:27:37<3:19:00, 12.01s/it][h264 @ 0x55b90b2aee80] mmco: unref short failure
[h264 @ 0x55b90b2aee80] mmco: unref short failure
[h264 @ 0x55b90b2aee80] mmco: unref short failure
[h264 @ 0x55b90b2aee80] mmco: unref short failure
[h264 @ 0x55667389e2c0] mmco: unref short failure
[h264 @ 0x55667389e2c0] mmco: unref short failure
 49%|████▉     | 952/1945 [3:27:51<3:26:01, 12.45s/it][h264 @ 0x55b8ec2ea500] mmco: unref short failure
[h264 @ 0x55b8ec2ea500] mmco: unref short failure
[h264 @ 0x55ee42c70e80] mmco: unref short failure
 49%|████▉     | 953/1945 [3:27:58<3:00:36, 10.92s/it] 49%|████▉     | 954/1945 [3:28:04<2:33:39,  9.30s/it][h264 @ 0x55ee4394dac0] mmco: unref short failure
 49%|████▉     | 955/1945 [3:28:10<2:20:31,  8.52s/it][h264 @ 0x55fcddf8c740] mmco: unref short failure
[h264 @ 0x55fcddf8c740] mmco: unref short failure
[h264 @ 0x55fcdae72600] mmco: unref short failure
[h264 @ 0x55fcdae72600] mmco: unref short failure
 49%|████▉     | 956/1945 [3:28:48<4:42:40, 17.15s/it] 49%|████▉     | 957/1945 [3:29:02<4:28:53, 16.33s/it][h264 @ 0x55ee32555ec0] mmco: unref short failure
 49%|████▉     | 958/1945 [3:29:08<3:39:05, 13.32s/it][h264 @ 0x55ee3cbed800] mmco: unref short failure
[h264 @ 0x55ee3cbed800] mmco: unref short failure
[h264 @ 0x5566736fd380] mmco: unref short failure
[h264 @ 0x5566471e7e00] mmco: unref short failure
[h264 @ 0x5566471e7e00] mmco: unref short failure
 49%|████▉     | 959/1945 [3:29:15<3:04:17, 11.21s/it][h264 @ 0x556684f911c0] mmco: unref short failure
[h264 @ 0x556684f911c0] mmco: unref short failure
[h264 @ 0x556684f911c0] mmco: unref short failure
[h264 @ 0x556684f911c0] mmco: unref short failure
 49%|████▉     | 960/1945 [3:29:32<3:33:15, 12.99s/it][h264 @ 0x55b90c4f6140] mmco: unref short failure
[h264 @ 0x55b90c4f6140] mmco: unref short failure
 49%|████▉     | 961/1945 [3:29:38<2:58:22, 10.88s/it] 49%|████▉     | 962/1945 [3:29:44<2:33:51,  9.39s/it][h264 @ 0x556673ed0c80] mmco: unref short failure
[h264 @ 0x556673ed0c80] mmco: unref short failure
[h264 @ 0x556673ed0c80] mmco: unref short failure
[h264 @ 0x556673ed0c80] mmco: unref short failure
[h264 @ 0x556673ed0c80] mmco: unref short failure
[h264 @ 0x556673ed0c80] mmco: unref short failure
 50%|████▉     | 963/1945 [3:29:51<2:21:57,  8.67s/it][h264 @ 0x55fcdafd8940] mmco: unref short failure
[h264 @ 0x55fccc1c6e80] mmco: unref short failure
[h264 @ 0x55fccc1c6e80] mmco: unref short failure
[h264 @ 0x55ee31036f80] mmco: unref short failure
[h264 @ 0x55ee31036f80] mmco: unref short failure
[h264 @ 0x55ee31036f80] mmco: unref short failure
[h264 @ 0x55ee31036f80] mmco: unref short failure
[h264 @ 0x556646f82a00] mmco: unref short failure
 50%|████▉     | 964/1945 [3:30:26<4:32:28, 16.67s/it][h264 @ 0x55b8ef0b3500] mmco: unref short failure
[h264 @ 0x55b8ef0b3500] mmco: unref short failure
[h264 @ 0x556647adfec0] mmco: unref short failure
[h264 @ 0x556646f2e9c0] mmco: unref short failure
 50%|████▉     | 965/1945 [3:30:41<4:25:21, 16.25s/it][h264 @ 0x55b93456e540] mmco: unref short failure
 50%|████▉     | 966/1945 [3:30:47<3:32:12, 13.01s/it][h264 @ 0x55ee4067cf00] mmco: unref short failure
[h264 @ 0x55ee4067cf00] mmco: unref short failure
 50%|████▉     | 967/1945 [3:30:58<3:22:57, 12.45s/it][h264 @ 0x55fcdf81a780] mmco: unref short failure
[h264 @ 0x55fcdf81a780] mmco: unref short failure
[h264 @ 0x55ee039ecbc0] mmco: unref short failure
[h264 @ 0x55ee436362c0] mmco: unref short failure
 50%|████▉     | 968/1945 [3:31:12<3:29:09, 12.84s/it][h264 @ 0x55ee39974fc0] mmco: unref short failure
[h264 @ 0x55ee40a7a4c0] mmco: unref short failure
 50%|████▉     | 969/1945 [3:31:18<2:56:09, 10.83s/it][h264 @ 0x55fccaad1080] mmco: unref short failure
[h264 @ 0x55fccaad1080] mmco: unref short failure
 50%|████▉     | 970/1945 [3:31:23<2:30:25,  9.26s/it][h264 @ 0x55fcca923780] mmco: unref short failure
[h264 @ 0x55fcca923780] mmco: unref short failure
 50%|████▉     | 971/1945 [3:31:29<2:13:06,  8.20s/it][h264 @ 0x55fcde0b0240] mmco: unref short failure
[h264 @ 0x55fcde0b0240] mmco: unref short failure
[h264 @ 0x556646f82540] mmco: unref short failure
[h264 @ 0x55fccea00380] mmco: unref short failure
[h264 @ 0x55fccea00380] mmco: unref short failure
 50%|████▉     | 972/1945 [3:32:05<4:25:59, 16.40s/it][h264 @ 0x55ee04ad1b80] mmco: unref short failure
[h264 @ 0x55ee04ad1b80] mmco: unref short failure
[h264 @ 0x5566853aea40] mmco: unref short failure
[h264 @ 0x55ee04ad1b80] mmco: unref short failure
[h264 @ 0x55ee04ad1b80] mmco: unref short failure
[h264 @ 0x55ee04ad1b80] mmco: unref short failure
[h264 @ 0x55ee04ad1b80] mmco: unref short failure
 50%|█████     | 973/1945 [3:32:26<4:48:14, 17.79s/it][h264 @ 0x55b909e1be80] mmco: unref short failure
[h264 @ 0x55b909e1be80] mmco: unref short failure
 50%|█████     | 974/1945 [3:32:31<3:48:25, 14.11s/it][h264 @ 0x55b93317f380] mmco: unref short failure
[h264 @ 0x55b93317f380] mmco: unref short failure
[h264 @ 0x55667d225c00] mmco: unref short failure
[h264 @ 0x55667d225c00] mmco: unref short failure
 50%|█████     | 975/1945 [3:32:38<3:10:40, 11.79s/it][h264 @ 0x55fce01c7940] mmco: unref short failure
 50%|█████     | 976/1945 [3:32:54<3:35:10, 13.32s/it] 50%|█████     | 977/1945 [3:33:00<2:56:11, 10.92s/it][h264 @ 0x55b92aa54480] mmco: unref short failure
 50%|█████     | 978/1945 [3:33:05<2:29:24,  9.27s/it][h264 @ 0x55fc8d93e740] mmco: unref short failure
[h264 @ 0x55667fc89b80] mmco: unref short failure
 50%|█████     | 979/1945 [3:33:11<2:11:10,  8.15s/it][h264 @ 0x556646f8a7c0] mmco: unref short failure
[h264 @ 0x55b8eb363f40] mmco: unref short failure
[h264 @ 0x556682042500] mmco: unref short failure
[h264 @ 0x55b92a7cb4c0] mmco: unref short failure
[h264 @ 0x55ee2ff0ddc0] mmco: unref short failure
[h264 @ 0x55ee2ff0ddc0] mmco: unref short failure
[h264 @ 0x55ee41091b40] mmco: unref short failure
[h264 @ 0x55ee41091b40] mmco: unref short failure
 50%|█████     | 980/1945 [3:33:42<4:02:28, 15.08s/it] 50%|█████     | 981/1945 [3:34:05<4:38:37, 17.34s/it][h264 @ 0x55ee309feb40] mmco: unref short failure
 50%|█████     | 982/1945 [3:34:11<3:43:58, 13.95s/it] 51%|█████     | 983/1945 [3:34:16<3:01:40, 11.33s/it][h264 @ 0x55b90b2e8c40] mmco: unref short failure
[h264 @ 0x55ee38b21a80] mmco: unref short failure
[h264 @ 0x5566800aa5c0] mmco: unref short failure
[h264 @ 0x5566800aa5c0] mmco: unref short failure
 51%|█████     | 984/1945 [3:34:35<3:39:26, 13.70s/it][h264 @ 0x55fcd7a360c0] mmco: unref short failure
[h264 @ 0x55fcd7a360c0] mmco: unref short failure
 51%|█████     | 985/1945 [3:34:41<3:02:31, 11.41s/it] 51%|█████     | 986/1945 [3:34:47<2:35:03,  9.70s/it][h264 @ 0x55ee33deac40] mmco: unref short failure
 51%|█████     | 987/1945 [3:34:52<2:12:30,  8.30s/it][h264 @ 0x55ee394f3840] mmco: unref short failure
 51%|█████     | 988/1945 [3:35:25<4:09:49, 15.66s/it] 51%|█████     | 989/1945 [3:35:43<4:23:10, 16.52s/it] 51%|█████     | 990/1945 [3:35:49<3:30:24, 13.22s/it][h264 @ 0x5566847f36c0] mmco: unref short failure
[h264 @ 0x5566847f36c0] mmco: unref short failure
 51%|█████     | 991/1945 [3:35:54<2:53:43, 10.93s/it][h264 @ 0x556675b9b480] mmco: unref short failure
 51%|█████     | 992/1945 [3:36:11<3:20:46, 12.64s/it][h264 @ 0x55b8ece94880] mmco: unref short failure
[h264 @ 0x55b8ece94880] mmco: unref short failure
[h264 @ 0x55b8ece94880] mmco: unref short failure
[h264 @ 0x55ee309fed40] mmco: unref short failure
[h264 @ 0x55ee309fed40] mmco: unref short failure
 51%|█████     | 993/1945 [3:36:17<2:49:21, 10.67s/it][h264 @ 0x556687f87b00] mmco: unref short failure
[h264 @ 0x556687f87b00] mmco: unref short failure
 51%|█████     | 994/1945 [3:36:23<2:26:18,  9.23s/it][h264 @ 0x5566735870c0] mmco: unref short failure
[h264 @ 0x55667d2eb700] mmco: unref short failure
[h264 @ 0x55667d2eb700] mmco: unref short failure
 51%|█████     | 995/1945 [3:36:28<2:05:33,  7.93s/it][h264 @ 0x55667a016040] mmco: unref short failure
[h264 @ 0x55667a016040] mmco: unref short failure
not have audios 7wavFXW3AFw.7
[h264 @ 0x55b93446b780] mmco: unref short failure
[h264 @ 0x55b93446b780] mmco: unref short failure
[h264 @ 0x556688a8f4c0] mmco: unref short failure
 51%|█████     | 996/1945 [3:37:03<4:13:53, 16.05s/it][h264 @ 0x55ee33deaec0] mmco: unref short failure
[h264 @ 0x55fcd362ea00] mmco: unref short failure
[h264 @ 0x55fcde44ab00] mmco: unref short failure
[h264 @ 0x55667a485e40] mmco: unref short failure
[h264 @ 0x55667a485e40] mmco: unref short failure
 51%|█████▏    | 997/1945 [3:37:22<4:29:11, 17.04s/it][h264 @ 0x55fce05754c0] mmco: unref short failure
[h264 @ 0x55fce05754c0] mmco: unref short failure
[h264 @ 0x55fce05754c0] mmco: unref short failure
[h264 @ 0x55fce05754c0] mmco: unref short failure
[h264 @ 0x55fccff66300] mmco: unref short failure
[h264 @ 0x55fccff66300] mmco: unref short failure
[h264 @ 0x55fcd0606dc0] mmco: unref short failure
[h264 @ 0x55fcd0606dc0] mmco: unref short failure
 51%|█████▏    | 998/1945 [3:37:29<3:39:51, 13.93s/it] 51%|█████▏    | 999/1945 [3:37:35<3:01:26, 11.51s/it][h264 @ 0x55fccecddd40] mmco: unref short failure
[h264 @ 0x55fccecddd40] mmco: unref short failure
[h264 @ 0x55ee33b17780] mmco: unref short failure
09/07/2024 15:21:38 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.323476552963257, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04749135300517082, 'loss_ret%tv%ta--finetune_area/loss_area': 2.759758234024048, 'loss_ret%tv%ta--finetune_area/total_loss': 6.130725860595703}
[h264 @ 0x55b8f1193f40] mmco: unref short failure
[h264 @ 0x55b8f1193f40] mmco: unref short failure
 51%|█████▏    | 1000/1945 [3:37:43<2:48:20, 10.69s/it][h264 @ 0x55b8ebeb8780] mmco: unref short failure
 51%|█████▏    | 1001/1945 [3:37:49<2:25:01,  9.22s/it] 52%|█████▏    | 1002/1945 [3:37:54<2:05:02,  7.96s/it][h264 @ 0x55b8eeac84c0] mmco: unref short failure
[h264 @ 0x55ee3ee4fb00] mmco: unref short failure
[h264 @ 0x55ee3ee4fb00] mmco: unref short failure
 52%|█████▏    | 1003/1945 [3:38:01<1:58:19,  7.54s/it][h264 @ 0x55667d0edcc0] mmco: unref short failure
[h264 @ 0x55667d0edcc0] mmco: unref short failure
[h264 @ 0x55b8edfbcc80] mmco: unref short failure
[h264 @ 0x55b8edfbcc80] mmco: unref short failure
 52%|█████▏    | 1004/1945 [3:38:40<4:28:10, 17.10s/it][h264 @ 0x55fcdf66a940] mmco: unref short failure
[h264 @ 0x55fcdf66a940] mmco: unref short failure
[h264 @ 0x55b8f0612540] mmco: unref short failure
 52%|█████▏    | 1005/1945 [3:39:04<4:57:56, 19.02s/it][h264 @ 0x55ee3cf4c880] mmco: unref short failure
[h264 @ 0x55ee3cf4c880] mmco: unref short failure
[h264 @ 0x55b8f12f9040] mmco: unref short failure
[h264 @ 0x55b8f12f9040] mmco: unref short failure
[h264 @ 0x55667d0edcc0] mmco: unref short failure
[h264 @ 0x55667d0edcc0] mmco: unref short failure
 52%|█████▏    | 1006/1945 [3:39:09<3:51:35, 14.80s/it] 52%|█████▏    | 1007/1945 [3:39:15<3:10:26, 12.18s/it] 52%|█████▏    | 1008/1945 [3:39:22<2:46:35, 10.67s/it][h264 @ 0x55667a7cee40] mmco: unref short failure
[h264 @ 0x55fccf4dcdc0] mmco: unref short failure
 52%|█████▏    | 1009/1945 [3:39:29<2:28:16,  9.50s/it][h264 @ 0x55ee3f06a140] mmco: unref short failure
[h264 @ 0x55ee3f06a140] mmco: unref short failure
[h264 @ 0x55ee3f06a140] mmco: unref short failure
[h264 @ 0x55ee3f06a140] mmco: unref short failure
[h264 @ 0x55ee31e3d880] mmco: unref short failure
[h264 @ 0x55ee31e3d880] mmco: unref short failure
 52%|█████▏    | 1010/1945 [3:39:35<2:11:03,  8.41s/it] 52%|█████▏    | 1011/1945 [3:39:40<1:57:06,  7.52s/it][h264 @ 0x55fccf0f5680] mmco: unref short failure
[h264 @ 0x55fce05754c0] mmco: unref short failure
[h264 @ 0x55fce05754c0] mmco: unref short failure
[h264 @ 0x5566794a5180] mmco: unref short failure
[h264 @ 0x5566794a5180] mmco: unref short failure
[h264 @ 0x5566740fc480] mmco: unref short failure
[h264 @ 0x5566740fc480] mmco: unref short failure
[h264 @ 0x5566819bd280] mmco: unref short failure
[h264 @ 0x5566819bd280] mmco: unref short failure
 52%|█████▏    | 1012/1945 [3:40:23<4:42:16, 18.15s/it][h264 @ 0x55ee31a55640] mmco: unref short failure
[h264 @ 0x55b8f01a5f40] mmco: unref short failure
[h264 @ 0x55b8f01a5f40] mmco: unref short failure
 52%|█████▏    | 1013/1945 [3:40:44<4:53:30, 18.90s/it][h264 @ 0x55b92efac580] mmco: unref short failure
[h264 @ 0x55b92efac580] mmco: unref short failure
 52%|█████▏    | 1014/1945 [3:40:49<3:49:33, 14.79s/it][h264 @ 0x55ee322e5b40] mmco: unref short failure
[h264 @ 0x55ee322e5b40] mmco: unref short failure
[h264 @ 0x55b8f06120c0] mmco: unref short failure
 52%|█████▏    | 1015/1945 [3:40:59<3:29:38, 13.53s/it][h264 @ 0x55ee46edb9c0] mmco: unref short failure
 52%|█████▏    | 1016/1945 [3:41:05<2:51:57, 11.11s/it][h264 @ 0x55ee4075cdc0] mmco: unref short failure
[h264 @ 0x55ee4075cdc0] mmco: unref short failure
[h264 @ 0x55ee4075cdc0] mmco: unref short failure
[h264 @ 0x55ee4075cdc0] mmco: unref short failure
 52%|█████▏    | 1017/1945 [3:41:10<2:25:18,  9.39s/it][h264 @ 0x55b8ea8f51c0] mmco: unref short failure
[h264 @ 0x55b8ea8f51c0] mmco: unref short failure
[h264 @ 0x556688fa00c0] mmco: unref short failure
[h264 @ 0x556688fa00c0] mmco: unref short failure
[h264 @ 0x55ee310520c0] mmco: unref short failure
 52%|█████▏    | 1018/1945 [3:41:17<2:11:46,  8.53s/it][h264 @ 0x55fcd154b080] mmco: unref short failure
[h264 @ 0x55fcd154b080] mmco: unref short failure
 52%|█████▏    | 1019/1945 [3:41:22<1:58:35,  7.68s/it][h264 @ 0x55667f6c9880] mmco: unref short failure
[h264 @ 0x55ee37922980] mmco: unref short failure
[h264 @ 0x55ee37922980] mmco: unref short failure
[h264 @ 0x55fcd67ffd40] mmco: unref short failure
[h264 @ 0x55fcd67ffd40] mmco: unref short failure
[h264 @ 0x556678e8be40] mmco: unref short failure
[h264 @ 0x556678e8be40] mmco: unref short failure
[h264 @ 0x556681fec540] mmco: unref short failure
[h264 @ 0x556681fec540] mmco: unref short failure
[h264 @ 0x556681fec340] mmco: unref short failure
[h264 @ 0x55ee03f244c0] mmco: unref short failure
[h264 @ 0x55ee03f244c0] mmco: unref short failure
[h264 @ 0x55ee438e3ac0] mmco: unref short failure
[h264 @ 0x55ee438e3ac0] mmco: unref short failure
[h264 @ 0x55b92ac5a240] mmco: unref short failure
 52%|█████▏    | 1020/1945 [3:42:01<4:21:04, 16.93s/it][h264 @ 0x55b90bd7b640] mmco: unref short failure
[h264 @ 0x55b90bd7b640] mmco: unref short failure
[h264 @ 0x55b8ea8b48c0] mmco: unref short failure
[h264 @ 0x55b8ea8b48c0] mmco: unref short failure
[h264 @ 0x55fccc7a9700] mmco: unref short failure
[h264 @ 0x55667dfbe7c0] mmco: unref short failure
[h264 @ 0x55ee3a9ab7c0] mmco: unref short failure
 52%|█████▏    | 1021/1945 [3:42:26<5:00:31, 19.51s/it][h264 @ 0x55fcdf66b240] mmco: unref short failure
[h264 @ 0x55fcdf66b240] mmco: unref short failure
 53%|█████▎    | 1022/1945 [3:42:32<3:54:29, 15.24s/it] 53%|█████▎    | 1023/1945 [3:42:38<3:10:52, 12.42s/it][h264 @ 0x55fc8d0e4880] mmco: unref short failure
 53%|█████▎    | 1024/1945 [3:42:43<2:39:11, 10.37s/it][h264 @ 0x5566475433c0] mmco: unref short failure
[h264 @ 0x5566475433c0] mmco: unref short failure
 53%|█████▎    | 1025/1945 [3:42:51<2:26:47,  9.57s/it][h264 @ 0x55ee372a4c00] mmco: unref short failure
[h264 @ 0x55ee372a4c00] mmco: unref short failure
 53%|█████▎    | 1026/1945 [3:42:57<2:10:55,  8.55s/it] 53%|█████▎    | 1027/1945 [3:43:03<1:58:13,  7.73s/it][h264 @ 0x556678b6ac40] mmco: unref short failure
[h264 @ 0x5566471760c0] mmco: unref short failure
[h264 @ 0x55fcdcb4d2c0] mmco: unref short failure
[h264 @ 0x55fcdcb4d2c0] mmco: unref short failure
[h264 @ 0x55ee2f559d80] mmco: unref short failure
[h264 @ 0x55ee2f559d80] mmco: unref short failure
[h264 @ 0x55fccf873100] mmco: unref short failure
[h264 @ 0x55fccf873100] mmco: unref short failure
[h264 @ 0x55b90bbed100] mmco: unref short failure
[h264 @ 0x55b90bbed100] mmco: unref short failure
 53%|█████▎    | 1028/1945 [3:43:43<4:24:46, 17.32s/it][h264 @ 0x55fccf21ed80] mmco: unref short failure
[h264 @ 0x55fcd97985c0] mmco: unref short failure
[h264 @ 0x55fcd97985c0] mmco: unref short failure
 53%|█████▎    | 1029/1945 [3:44:10<5:11:38, 20.41s/it][h264 @ 0x55fc8dd47640] mmco: unref short failure
[h264 @ 0x55fc8dd47640] mmco: unref short failure
[h264 @ 0x55ee3a0c0840] mmco: unref short failure
[h264 @ 0x55667f6c9a80] mmco: unref short failure
 53%|█████▎    | 1030/1945 [3:44:17<4:08:14, 16.28s/it][h264 @ 0x55ee041a6c00] mmco: unref short failure
[h264 @ 0x55ee041a6c00] mmco: unref short failure
 53%|█████▎    | 1031/1945 [3:44:23<3:20:26, 13.16s/it][h264 @ 0x55ee372cf6c0] mmco: unref short failure
[h264 @ 0x55fce17f9200] mmco: unref short failure
[h264 @ 0x55fce17f9200] mmco: unref short failure
[h264 @ 0x55fce17f9200] mmco: unref short failure
[h264 @ 0x55fce17f9200] mmco: unref short failure
 53%|█████▎    | 1032/1945 [3:44:28<2:45:23, 10.87s/it][h264 @ 0x55ee309ff480] mmco: unref short failure
[h264 @ 0x55ee309ff480] mmco: unref short failure
 53%|█████▎    | 1033/1945 [3:44:34<2:22:25,  9.37s/it][h264 @ 0x55ee3cf97240] mmco: unref short failure
 53%|█████▎    | 1034/1945 [3:44:40<2:05:16,  8.25s/it][h264 @ 0x55b930330cc0] mmco: unref short failure
 53%|█████▎    | 1035/1945 [3:44:45<1:52:01,  7.39s/it][h264 @ 0x55ee30d90600] mmco: unref short failure
[h264 @ 0x55ee30d90600] mmco: unref short failure
[h264 @ 0x5566478963c0] mmco: unref short failure
[h264 @ 0x5566478963c0] mmco: unref short failure
[h264 @ 0x556676800100] mmco: unref short failure
[h264 @ 0x55ee3232b040] mmco: unref short failure
[h264 @ 0x55ee3232b040] mmco: unref short failure
[h264 @ 0x55fcd0297c80] mmco: unref short failure
[h264 @ 0x55fcd0297c80] mmco: unref short failure
[h264 @ 0x55b90cb7df80] mmco: unref short failure
[h264 @ 0x55b90cb7df80] mmco: unref short failure
[h264 @ 0x55b8ebb15a40] mmco: unref short failure
[h264 @ 0x55b8ebb15a40] mmco: unref short failure
[h264 @ 0x55667fd4af40] mmco: unref short failure
[h264 @ 0x55667fd4af40] mmco: unref short failure
[h264 @ 0x556686ae5440] mmco: unref short failure
[h264 @ 0x556686ae5440] mmco: unref short failure
 53%|█████▎    | 1036/1945 [3:45:22<4:05:53, 16.23s/it][h264 @ 0x55ee4582fe00] mmco: unref short failure
[h264 @ 0x55ee4582fe00] mmco: unref short failure
 53%|█████▎    | 1037/1945 [3:45:50<4:59:15, 19.77s/it][h264 @ 0x55b90a0f8bc0] mmco: unref short failure
[h264 @ 0x556674bf0940] mmco: unref short failure
[h264 @ 0x556674bf0940] mmco: unref short failure
 53%|█████▎    | 1038/1945 [3:45:56<3:58:20, 15.77s/it] 53%|█████▎    | 1039/1945 [3:46:02<3:10:33, 12.62s/it][h264 @ 0x55fcd74cb440] mmco: unref short failure
[h264 @ 0x55fcd74cb440] mmco: unref short failure
 53%|█████▎    | 1040/1945 [3:46:07<2:39:00, 10.54s/it][h264 @ 0x55ee32291580] mmco: unref short failure
 54%|█████▎    | 1041/1945 [3:46:13<2:15:55,  9.02s/it] 54%|█████▎    | 1042/1945 [3:46:19<2:00:59,  8.04s/it][h264 @ 0x55b9294152c0] mmco: unref short failure
[h264 @ 0x55b9355c3740] mmco: unref short failure
 54%|█████▎    | 1043/1945 [3:46:24<1:48:17,  7.20s/it][h264 @ 0x55b934d58a80] mmco: unref short failure
[h264 @ 0x55b934d58a80] mmco: unref short failure
[h264 @ 0x55ee472c23c0] mmco: unref short failure
[h264 @ 0x55fcd86d7140] mmco: unref short failure
[h264 @ 0x55ee4582f980] mmco: unref short failure
 54%|█████▎    | 1044/1945 [3:47:03<4:13:14, 16.86s/it][h264 @ 0x55667cea0cc0] mmco: unref short failure
[h264 @ 0x5566867a2300] mmco: unref short failure
[h264 @ 0x55664724e4c0] mmco: unref short failure
[h264 @ 0x55664724e4c0] mmco: unref short failure
[h264 @ 0x556677581ac0] mmco: unref short failure
[h264 @ 0x55667369d3c0] mmco: unref short failure
 54%|█████▎    | 1045/1945 [3:47:29<4:53:26, 19.56s/it] 54%|█████▍    | 1046/1945 [3:47:35<3:49:59, 15.35s/it] 54%|█████▍    | 1047/1945 [3:47:40<3:06:30, 12.46s/it] 54%|█████▍    | 1048/1945 [3:47:46<2:34:55, 10.36s/it] 54%|█████▍    | 1049/1945 [3:47:52<2:13:40,  8.95s/it]09/07/2024 15:31:51 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.249873399734497, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.045754238963127136, 'loss_ret%tv%ta--finetune_area/loss_area': 2.8026375770568848, 'loss_ret%tv%ta--finetune_area/total_loss': 6.098265171051025}
 54%|█████▍    | 1050/1945 [3:47:58<2:03:51,  8.30s/it] 54%|█████▍    | 1051/1945 [3:48:05<1:57:27,  7.88s/it][h264 @ 0x55b9283c4f00] mmco: unref short failure
[h264 @ 0x55ee34722c40] mmco: unref short failure
[h264 @ 0x55b8eeefe040] mmco: unref short failure
[h264 @ 0x55b8eeefe040] mmco: unref short failure
[h264 @ 0x556678a7a440] mmco: unref short failure
[h264 @ 0x556678a7a440] mmco: unref short failure
[h264 @ 0x55667369da40] mmco: unref short failure
 54%|█████▍    | 1052/1945 [3:48:43<4:12:16, 16.95s/it][h264 @ 0x556682aadd80] mmco: unref short failure
[h264 @ 0x55fc8d465a00] mmco: unref short failure
 54%|█████▍    | 1053/1945 [3:49:10<4:53:42, 19.76s/it][h264 @ 0x55fcccbe0d00] mmco: unref short failure
 54%|█████▍    | 1054/1945 [3:49:15<3:48:52, 15.41s/it][h264 @ 0x55fce1762200] mmco: unref short failure
 54%|█████▍    | 1055/1945 [3:49:22<3:11:19, 12.90s/it] 54%|█████▍    | 1056/1945 [3:49:28<2:38:37, 10.71s/it][h264 @ 0x55fc8cf8e440] mmco: unref short failure
[h264 @ 0x556675645680] mmco: unref short failure
[h264 @ 0x556675645680] mmco: unref short failure
[h264 @ 0x55667c62b180] mmco: unref short failure
[h264 @ 0x55b933e4f5c0] mmco: unref short failure
 54%|█████▍    | 1057/1945 [3:49:33<2:15:28,  9.15s/it] 54%|█████▍    | 1058/1945 [3:49:38<1:58:38,  8.03s/it][h264 @ 0x55ee3634fa80] mmco: unref short failure
[h264 @ 0x55ee3634fa80] mmco: unref short failure
 54%|█████▍    | 1059/1945 [3:49:46<1:54:14,  7.74s/it][h264 @ 0x55ee3e2d4a00] mmco: unref short failure
[h264 @ 0x55ee3e2d4a00] mmco: unref short failure
[h264 @ 0x55ee35384ec0] mmco: unref short failure
[h264 @ 0x55ee35384ec0] mmco: unref short failure
[h264 @ 0x55ee40b6f480] mmco: unref short failure
[h264 @ 0x55ee40b6f480] mmco: unref short failure
[h264 @ 0x55fcd3735a40] mmco: unref short failure
[h264 @ 0x55ee30769980] mmco: unref short failure
[h264 @ 0x55fc8d7c5980] mmco: unref short failure
[h264 @ 0x55fccf2313c0] mmco: unref short failure
[h264 @ 0x55fccf2313c0] mmco: unref short failure
 54%|█████▍    | 1060/1945 [3:50:27<4:21:52, 17.75s/it] 55%|█████▍    | 1061/1945 [3:50:50<4:47:46, 19.53s/it][h264 @ 0x55b8eebc9680] mmco: unref short failure
 55%|█████▍    | 1062/1945 [3:50:55<3:43:09, 15.16s/it] 55%|█████▍    | 1063/1945 [3:51:02<3:04:06, 12.52s/it][h264 @ 0x55ee3f1fc000] mmco: unref short failure
 55%|█████▍    | 1064/1945 [3:51:07<2:33:53, 10.48s/it][h264 @ 0x55fcd4350480] mmco: unref short failure
[h264 @ 0x55fcd4350480] mmco: unref short failure
[h264 @ 0x55ee425d11c0] mmco: unref short failure
 55%|█████▍    | 1065/1945 [3:51:13<2:11:28,  8.96s/it][h264 @ 0x55b92c139cc0] mmco: unref short failure
[h264 @ 0x55b92c139cc0] mmco: unref short failure
[h264 @ 0x55fce0f585c0] mmco: unref short failure
[h264 @ 0x55fce0f585c0] mmco: unref short failure
[h264 @ 0x55668538ca80] mmco: unref short failure
 55%|█████▍    | 1066/1945 [3:51:18<1:55:27,  7.88s/it][h264 @ 0x55ee40699e80] mmco: unref short failure
[h264 @ 0x55ee40699e80] mmco: unref short failure
[h264 @ 0x5566471e7b80] mmco: unref short failure
 55%|█████▍    | 1067/1945 [3:51:24<1:48:03,  7.38s/it][h264 @ 0x55ee369a9640] mmco: unref short failure
[h264 @ 0x55ee369a9640] mmco: unref short failure
[h264 @ 0x55ee3d201080] mmco: unref short failure
[h264 @ 0x55fcccbe0d00] mmco: unref short failure
[h264 @ 0x55fcccbe0d00] mmco: unref short failure
[h264 @ 0x55ee36570800] mmco: unref short failure
 55%|█████▍    | 1068/1945 [3:52:07<4:24:05, 18.07s/it][h264 @ 0x55b929335540] mmco: unref short failure
[h264 @ 0x55b929335540] mmco: unref short failure
 55%|█████▍    | 1069/1945 [3:52:26<4:26:04, 18.22s/it] 55%|█████▌    | 1070/1945 [3:52:32<3:30:16, 14.42s/it][h264 @ 0x556683df9800] mmco: unref short failure
[h264 @ 0x556683df9800] mmco: unref short failure
 55%|█████▌    | 1071/1945 [3:52:37<2:50:49, 11.73s/it] 55%|█████▌    | 1072/1945 [3:52:43<2:24:40,  9.94s/it] 55%|█████▌    | 1073/1945 [3:52:48<2:05:16,  8.62s/it][h264 @ 0x55ee3e19a6c0] mmco: unref short failure
[h264 @ 0x55b92db5b380] mmco: unref short failure
[h264 @ 0x55fc8d3eda80] mmco: unref short failure
[h264 @ 0x55fc8d3eda80] mmco: unref short failure
 55%|█████▌    | 1074/1945 [3:52:54<1:53:18,  7.81s/it] 55%|█████▌    | 1075/1945 [3:53:00<1:44:34,  7.21s/it][h264 @ 0x55667ea0ec00] mmco: unref short failure
[h264 @ 0x55ee32432780] mmco: unref short failure
[h264 @ 0x55ee32432780] mmco: unref short failure
[h264 @ 0x55667ea0ee00] mmco: unref short failure
[h264 @ 0x55667608b540] mmco: unref short failure
 55%|█████▌    | 1076/1945 [3:53:48<4:43:06, 19.55s/it][h264 @ 0x55b9315e4bc0] mmco: unref short failure
[h264 @ 0x55667b946a80] mmco: unref short failure
[h264 @ 0x55667b946a80] mmco: unref short failure
[h264 @ 0x556676bee9c0] mmco: unref short failure
[h264 @ 0x556676bee9c0] mmco: unref short failure
 55%|█████▌    | 1077/1945 [3:54:08<4:45:26, 19.73s/it][h264 @ 0x55b90caf7840] mmco: unref short failure
[h264 @ 0x55b90caf7840] mmco: unref short failure
 55%|█████▌    | 1078/1945 [3:54:15<3:45:45, 15.62s/it][h264 @ 0x55b9316ccf00] mmco: unref short failure
[h264 @ 0x55b9316ccf00] mmco: unref short failure
 55%|█████▌    | 1079/1945 [3:54:20<3:01:55, 12.60s/it] 56%|█████▌    | 1080/1945 [3:54:26<2:30:58, 10.47s/it][h264 @ 0x55fcca26cd00] mmco: unref short failure
 56%|█████▌    | 1081/1945 [3:54:31<2:11:01,  9.10s/it] 56%|█████▌    | 1082/1945 [3:54:37<1:55:39,  8.04s/it][h264 @ 0x55b90c51c680] mmco: unref short failure
 56%|█████▌    | 1083/1945 [3:54:43<1:47:46,  7.50s/it][h264 @ 0x55fcd9780700] mmco: unref short failure
[h264 @ 0x55fcd9780700] mmco: unref short failure
[h264 @ 0x55b933a68680] mmco: unref short failure
[h264 @ 0x55b933176400] mmco: unref short failure
[h264 @ 0x55b933176400] mmco: unref short failure
[h264 @ 0x55b93162f3c0] mmco: unref short failure
 56%|█████▌    | 1084/1945 [3:55:27<4:23:14, 18.34s/it][h264 @ 0x55ee406aa180] mmco: unref short failure
[h264 @ 0x55b909d94600] mmco: unref short failure
[h264 @ 0x55b909d94600] mmco: unref short failure
[h264 @ 0x55fcdb146b80] mmco: unref short failure
[h264 @ 0x55668197abc0] mmco: unref short failure
[h264 @ 0x55b92e6ef600] mmco: unref short failure
[h264 @ 0x55b92e6ef600] mmco: unref short failure
 56%|█████▌    | 1085/1945 [3:55:51<4:48:41, 20.14s/it][h264 @ 0x55ee3214cbc0] mmco: unref short failure
 56%|█████▌    | 1086/1945 [3:55:57<3:45:48, 15.77s/it][h264 @ 0x55b936e53840] mmco: unref short failure
 56%|█████▌    | 1087/1945 [3:56:03<3:02:09, 12.74s/it][h264 @ 0x55ee3e65b2c0] mmco: unref short failure
[h264 @ 0x55ee3e65b2c0] mmco: unref short failure
 56%|█████▌    | 1088/1945 [3:56:08<2:32:57, 10.71s/it][h264 @ 0x55ee303ee000] mmco: unref short failure
[h264 @ 0x55ee303ee000] mmco: unref short failure
[h264 @ 0x55667bcf2200] mmco: unref short failure
[h264 @ 0x55667bcf2200] mmco: unref short failure
 56%|█████▌    | 1089/1945 [3:56:14<2:09:02,  9.05s/it] 56%|█████▌    | 1090/1945 [3:56:19<1:54:27,  8.03s/it][h264 @ 0x55ee3329f280] mmco: unref short failure
 56%|█████▌    | 1091/1945 [3:56:25<1:42:33,  7.21s/it][h264 @ 0x55b8ecd67a00] mmco: unref short failure
[h264 @ 0x55fcdf319180] mmco: unref short failure
[h264 @ 0x55fcdf319180] mmco: unref short failure
[h264 @ 0x55ee457cda00] mmco: unref short failure
[h264 @ 0x55ee368be5c0] mmco: unref short failure
[h264 @ 0x55ee368be5c0] mmco: unref short failure
[h264 @ 0x556676622880] mmco: unref short failure
[h264 @ 0x556676622880] mmco: unref short failure
 56%|█████▌    | 1092/1945 [3:57:03<3:56:10, 16.61s/it][h264 @ 0x55ee45fa80c0] mmco: unref short failure
[h264 @ 0x556680e114c0] mmco: unref short failure
[h264 @ 0x556680e114c0] mmco: unref short failure
 56%|█████▌    | 1093/1945 [3:57:31<4:44:23, 20.03s/it] 56%|█████▌    | 1094/1945 [3:57:36<3:41:31, 15.62s/it] 56%|█████▋    | 1095/1945 [3:57:42<2:57:09, 12.50s/it][h264 @ 0x55ee04594a40] mmco: unref short failure
[h264 @ 0x55ee04594a40] mmco: unref short failure
 56%|█████▋    | 1096/1945 [3:57:47<2:28:05, 10.47s/it] 56%|█████▋    | 1097/1945 [3:57:55<2:16:31,  9.66s/it][h264 @ 0x55b90a0ad8c0] mmco: unref short failure
[h264 @ 0x55b90a0ad8c0] mmco: unref short failure
 56%|█████▋    | 1098/1945 [3:58:00<1:57:41,  8.34s/it] 57%|█████▋    | 1099/1945 [3:58:06<1:45:32,  7.49s/it][h264 @ 0x55b92b0bc9c0] mmco: unref short failure
[h264 @ 0x55b92b0bc9c0] mmco: unref short failure
[h264 @ 0x55fce203acc0] mmco: unref short failure
[h264 @ 0x55fce203acc0] mmco: unref short failure
09/07/2024 15:42:38 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.279074192047119, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.0399782657623291, 'loss_ret%tv%ta--finetune_area/loss_area': 2.482529640197754, 'loss_ret%tv%ta--finetune_area/total_loss': 5.801582336425781}
 57%|█████▋    | 1100/1945 [3:58:44<3:53:35, 16.59s/it][h264 @ 0x55b92a6bbdc0] mmco: unref short failure
[h264 @ 0x55ee3784a400] mmco: unref short failure
[h264 @ 0x55ee3784a400] mmco: unref short failure
[h264 @ 0x55fccd470540] mmco: unref short failure
[h264 @ 0x55fccd470540] mmco: unref short failure
[h264 @ 0x556676cfb880] mmco: unref short failure
[h264 @ 0x556676cfb880] mmco: unref short failure
[h264 @ 0x55667b750fc0] mmco: unref short failure
[h264 @ 0x55fcd3f49a00] mmco: unref short failure
[h264 @ 0x55fcd3f49a00] mmco: unref short failure
 57%|█████▋    | 1101/1945 [3:59:13<4:45:25, 20.29s/it] 57%|█████▋    | 1102/1945 [3:59:18<3:41:44, 15.78s/it] 57%|█████▋    | 1103/1945 [3:59:24<2:59:02, 12.76s/it][h264 @ 0x55668401b780] mmco: unref short failure
[h264 @ 0x55ee40d12f40] mmco: unref short failure
 57%|█████▋    | 1104/1945 [3:59:29<2:25:40, 10.39s/it][h264 @ 0x5566871846c0] mmco: unref short failure
[h264 @ 0x55b92c095840] mmco: unref short failure
[h264 @ 0x55b92c095840] mmco: unref short failure
 57%|█████▋    | 1105/1945 [3:59:34<2:02:49,  8.77s/it][h264 @ 0x55b8eabc5d80] mmco: unref short failure
[h264 @ 0x55b8eabc5d80] mmco: unref short failure
 57%|█████▋    | 1106/1945 [3:59:39<1:48:02,  7.73s/it] 57%|█████▋    | 1107/1945 [3:59:46<1:45:29,  7.55s/it][h264 @ 0x55664829fc00] mmco: unref short failure
[h264 @ 0x55fc8d5769c0] mmco: unref short failure
[h264 @ 0x55667f8b4e80] mmco: unref short failure
[h264 @ 0x55667f8b4e80] mmco: unref short failure
[h264 @ 0x55664829fc00] mmco: unref short failure
[h264 @ 0x55664829fc00] mmco: unref short failure
[h264 @ 0x55fccdc55dc0] mmco: unref short failure
[h264 @ 0x55fccdc55dc0] mmco: unref short failure
[h264 @ 0x55fcd28d0100] mmco: unref short failure
[h264 @ 0x55fcd28d0100] mmco: unref short failure
[h264 @ 0x5566471c5140] mmco: unref short failure
[h264 @ 0x55ee38b9c3c0] mmco: unref short failure
[h264 @ 0x556673e01b00] mmco: unref short failure
[h264 @ 0x556677cfa580] mmco: unref short failure
[h264 @ 0x556677cfa580] mmco: unref short failure
 57%|█████▋    | 1108/1945 [4:00:25<3:58:02, 17.06s/it][h264 @ 0x55fcdbd198c0] mmco: unref short failure
[h264 @ 0x55ee33532680] mmco: unref short failure
[h264 @ 0x55ee44141b00] mmco: unref short failure
[h264 @ 0x55ee44141b00] mmco: unref short failure
[h264 @ 0x55fcceb03e40] mmco: unref short failure
[h264 @ 0x55667408a880] mmco: unref short failure
[h264 @ 0x55b92b7d5140] mmco: unref short failure
 57%|█████▋    | 1109/1945 [4:00:53<4:43:59, 20.38s/it][h264 @ 0x55ee03b52980] mmco: unref short failure
[h264 @ 0x55ee03b52980] mmco: unref short failure
 57%|█████▋    | 1110/1945 [4:01:00<3:44:30, 16.13s/it][h264 @ 0x55fcd28d0100] mmco: unref short failure
[h264 @ 0x55fcd28d0100] mmco: unref short failure
 57%|█████▋    | 1111/1945 [4:01:06<3:02:38, 13.14s/it][h264 @ 0x55667408a880] mmco: unref short failure
[h264 @ 0x55667408a880] mmco: unref short failure
[h264 @ 0x556678a73e80] mmco: unref short failure
[h264 @ 0x556678a73e80] mmco: unref short failure
 57%|█████▋    | 1112/1945 [4:01:11<2:28:30, 10.70s/it][h264 @ 0x55fccdbef600] mmco: unref short failure
[h264 @ 0x55fccdbef600] mmco: unref short failure
 57%|█████▋    | 1113/1945 [4:01:16<2:07:23,  9.19s/it] 57%|█████▋    | 1114/1945 [4:01:23<1:56:43,  8.43s/it][h264 @ 0x55667a7b9a00] mmco: unref short failure
[h264 @ 0x55b90bbfeac0] mmco: unref short failure
[h264 @ 0x55b90bbfeac0] mmco: unref short failure
[h264 @ 0x5566740c50c0] mmco: unref short failure
[h264 @ 0x5566740c50c0] mmco: unref short failure
 57%|█████▋    | 1115/1945 [4:01:32<2:00:24,  8.70s/it][h264 @ 0x55fcd3c4fe00] mmco: unref short failure
[h264 @ 0x556677a47740] mmco: unref short failure
[h264 @ 0x5566848d5500] mmco: unref short failure
[h264 @ 0x55668054e8c0] mmco: unref short failure
[h264 @ 0x55668054e8c0] mmco: unref short failure
[h264 @ 0x55b92a991980] mmco: unref short failure
 57%|█████▋    | 1116/1945 [4:02:10<4:01:41, 17.49s/it][h264 @ 0x55667b1b49c0] mmco: unref short failure
[h264 @ 0x55ee34208140] mmco: unref short failure
[h264 @ 0x55ee34208140] mmco: unref short failure
[h264 @ 0x55ee34208140] mmco: unref short failure
[h264 @ 0x55ee34208140] mmco: unref short failure
[h264 @ 0x55667b9118c0] mmco: unref short failure
[h264 @ 0x55667b9118c0] mmco: unref short failure
[h264 @ 0x55ee0414ddc0] mmco: unref short failure
[h264 @ 0x55ee0414ddc0] mmco: unref short failure
 57%|█████▋    | 1117/1945 [4:02:42<5:01:08, 21.82s/it][h264 @ 0x55b9286b4a40] mmco: unref short failure
[h264 @ 0x5566788aa2c0] mmco: unref short failure
[h264 @ 0x55fcd9dfcd00] mmco: unref short failure
 57%|█████▋    | 1118/1945 [4:02:49<3:56:58, 17.19s/it] 58%|█████▊    | 1119/1945 [4:02:55<3:12:34, 13.99s/it][h264 @ 0x55fcd28d0100] mmco: unref short failure
[h264 @ 0x55fcd28d0100] mmco: unref short failure
[h264 @ 0x55b92ada3c80] mmco: unref short failure
[h264 @ 0x55fcd9dfcd00] mmco: unref short failure
 58%|█████▊    | 1120/1945 [4:03:01<2:38:19, 11.51s/it][h264 @ 0x55ee43f71f80] mmco: unref short failure
[h264 @ 0x55ee43f71f80] mmco: unref short failure
 58%|█████▊    | 1121/1945 [4:03:06<2:12:11,  9.63s/it][h264 @ 0x55ee0414ddc0] mmco: unref short failure
 58%|█████▊    | 1122/1945 [4:03:13<2:02:23,  8.92s/it] 58%|█████▊    | 1123/1945 [4:03:19<1:50:05,  8.04s/it][h264 @ 0x55fcd8dee100] mmco: unref short failure
[h264 @ 0x55fcd22aaa80] mmco: unref short failure
 58%|█████▊    | 1124/1945 [4:03:49<3:17:38, 14.44s/it][h264 @ 0x55fccf4610c0] mmco: unref short failure
[h264 @ 0x55fcce7bfcc0] mmco: unref short failure
[h264 @ 0x55fcce7bfcc0] mmco: unref short failure
[h264 @ 0x55fcd30e2400] mmco: unref short failure
[h264 @ 0x55fcd30e2400] mmco: unref short failure
 58%|█████▊    | 1125/1945 [4:04:22<4:34:57, 20.12s/it][h264 @ 0x55b92de56980] mmco: unref short failure
[h264 @ 0x55b92de56980] mmco: unref short failure
 58%|█████▊    | 1126/1945 [4:04:28<3:35:14, 15.77s/it] 58%|█████▊    | 1127/1945 [4:04:33<2:52:55, 12.68s/it] 58%|█████▊    | 1128/1945 [4:04:39<2:24:45, 10.63s/it][h264 @ 0x55ee044f4840] mmco: unref short failure
[h264 @ 0x55ee044f4840] mmco: unref short failure
 58%|█████▊    | 1129/1945 [4:04:45<2:04:49,  9.18s/it][h264 @ 0x55b8ecd4dbc0] mmco: unref short failure
[h264 @ 0x55b8ecd4dbc0] mmco: unref short failure
[h264 @ 0x55664786a300] mmco: unref short failure
[h264 @ 0x55664786a300] mmco: unref short failure
 58%|█████▊    | 1130/1945 [4:04:51<1:52:09,  8.26s/it][h264 @ 0x5566836bf0c0] mmco: unref short failure
[h264 @ 0x5566836bf0c0] mmco: unref short failure
 58%|█████▊    | 1131/1945 [4:04:57<1:40:39,  7.42s/it][h264 @ 0x55ee46081980] mmco: unref short failure
[h264 @ 0x55667f0fe400] mmco: unref short failure
[h264 @ 0x55fcd326de00] mmco: unref short failure
[h264 @ 0x55fcd326de00] mmco: unref short failure
[h264 @ 0x55ee362c4980] mmco: unref short failure
[h264 @ 0x55ee362c4980] mmco: unref short failure
[h264 @ 0x55fce222b2c0] mmco: unref short failure
[h264 @ 0x55fce222b2c0] mmco: unref short failure
[h264 @ 0x55fce222b2c0] mmco: unref short failure
[h264 @ 0x55fce222b2c0] mmco: unref short failure
[h264 @ 0x55fcd3c2c840] mmco: unref short failure
 58%|█████▊    | 1132/1945 [4:05:27<3:15:02, 14.39s/it][h264 @ 0x55b92b0bc9c0] mmco: unref short failure
[h264 @ 0x55ee369660c0] mmco: unref short failure
[h264 @ 0x55ee369660c0] mmco: unref short failure
[h264 @ 0x55b90c19f440] mmco: unref short failure
[h264 @ 0x556689a07dc0] mmco: unref short failure
[h264 @ 0x55667c72edc0] mmco: unref short failure
 58%|█████▊    | 1133/1945 [4:06:00<4:30:50, 20.01s/it][h264 @ 0x55b90c435500] mmco: unref short failure
 58%|█████▊    | 1134/1945 [4:06:06<3:31:00, 15.61s/it][h264 @ 0x5566747347c0] mmco: unref short failure
[h264 @ 0x5566747347c0] mmco: unref short failure
 58%|█████▊    | 1135/1945 [4:06:11<2:49:25, 12.55s/it][h264 @ 0x556677b4ad00] mmco: unref short failure
[h264 @ 0x556677b4ad00] mmco: unref short failure
 58%|█████▊    | 1136/1945 [4:06:17<2:22:01, 10.53s/it][h264 @ 0x55b8f1cb5940] mmco: unref short failure
[h264 @ 0x55b8f1cb5940] mmco: unref short failure
[h264 @ 0x55667969be40] mmco: unref short failure
[h264 @ 0x55667969be40] mmco: unref short failure
 58%|█████▊    | 1137/1945 [4:06:22<2:00:34,  8.95s/it] 59%|█████▊    | 1138/1945 [4:06:29<1:51:44,  8.31s/it][h264 @ 0x55ee3b7dcc40] mmco: unref short failure
[h264 @ 0x55ee3b7dcc40] mmco: unref short failure
[h264 @ 0x55fcd2f56140] mmco: unref short failure
[h264 @ 0x55fcd2f56140] mmco: unref short failure
 59%|█████▊    | 1139/1945 [4:06:35<1:42:01,  7.60s/it][h264 @ 0x55b90c435500] mmco: unref short failure
[h264 @ 0x55b90c435500] mmco: unref short failure
[h264 @ 0x55fcdeb86f40] mmco: unref short failure
[h264 @ 0x55fcdeb86f40] mmco: unref short failure
[h264 @ 0x55fcd5d07780] mmco: unref short failure
 59%|█████▊    | 1140/1945 [4:07:06<3:17:44, 14.74s/it][h264 @ 0x55667a96fd40] mmco: unref short failure
[h264 @ 0x55b9307bb040] mmco: unref short failure
[h264 @ 0x55b9286b4a40] mmco: unref short failure
[h264 @ 0x55b9286b4a40] mmco: unref short failure
[h264 @ 0x5566474d0a40] mmco: unref short failure
[h264 @ 0x5566474d0a40] mmco: unref short failure
 59%|█████▊    | 1141/1945 [4:07:43<4:45:50, 21.33s/it][h264 @ 0x55668742ec80] mmco: unref short failure
[h264 @ 0x55668742ec80] mmco: unref short failure
 59%|█████▊    | 1142/1945 [4:07:49<3:43:02, 16.67s/it] 59%|█████▉    | 1143/1945 [4:07:55<2:59:49, 13.45s/it][h264 @ 0x55667b48d380] mmco: unref short failure
[h264 @ 0x55667b48d380] mmco: unref short failure
 59%|█████▉    | 1144/1945 [4:08:01<2:31:01, 11.31s/it] 59%|█████▉    | 1145/1945 [4:08:07<2:09:10,  9.69s/it][h264 @ 0x55fc8caf3200] mmco: unref short failure
[h264 @ 0x55b90ba0cbc0] mmco: unref short failure
 59%|█████▉    | 1146/1945 [4:08:12<1:52:25,  8.44s/it] 59%|█████▉    | 1147/1945 [4:08:18<1:40:42,  7.57s/it][h264 @ 0x556675243fc0] mmco: unref short failure
[h264 @ 0x556675243fc0] mmco: unref short failure
[h264 @ 0x55ee32649a80] mmco: unref short failure
[h264 @ 0x55fcd6de5240] mmco: unref short failure
[h264 @ 0x55fcd6de5240] mmco: unref short failure
[h264 @ 0x55667f0fe400] mmco: unref short failure
[h264 @ 0x55667f0fe400] mmco: unref short failure
 59%|█████▉    | 1148/1945 [4:08:50<3:16:23, 14.78s/it][h264 @ 0x556673b04fc0] mmco: unref short failure
[h264 @ 0x55b934d434c0] mmco: unref short failure
[h264 @ 0x55b934d434c0] mmco: unref short failure
[h264 @ 0x55ee36688f00] mmco: unref short failure
[h264 @ 0x55ee36688f00] mmco: unref short failure
[h264 @ 0x55667ca22040] mmco: unref short failure
[h264 @ 0x55667ca22040] mmco: unref short failure
[h264 @ 0x55fcccbd3100] mmco: unref short failure
[h264 @ 0x55fcccbd3100] mmco: unref short failure
 59%|█████▉    | 1149/1945 [4:09:27<4:44:46, 21.47s/it]09/07/2024 15:53:26 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.209304094314575, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.03954562172293663, 'loss_ret%tv%ta--finetune_area/loss_area': 2.2995495796203613, 'loss_ret%tv%ta--finetune_area/total_loss': 5.548398971557617}
[h264 @ 0x55fcd9e285c0] mmco: unref short failure
[h264 @ 0x55fcd9e285c0] mmco: unref short failure
 59%|█████▉    | 1150/1945 [4:09:32<3:40:27, 16.64s/it] 59%|█████▉    | 1151/1945 [4:09:38<2:58:49, 13.51s/it] 59%|█████▉    | 1152/1945 [4:09:44<2:28:03, 11.20s/it] 59%|█████▉    | 1153/1945 [4:09:50<2:08:00,  9.70s/it][h264 @ 0x55fcd772af80] mmco: unref short failure
[h264 @ 0x55fcd772af80] mmco: unref short failure
 59%|█████▉    | 1154/1945 [4:09:56<1:53:37,  8.62s/it] 59%|█████▉    | 1155/1945 [4:10:02<1:42:27,  7.78s/it][h264 @ 0x556683318900] mmco: unref short failure
 59%|█████▉    | 1156/1945 [4:10:32<3:08:11, 14.31s/it][h264 @ 0x55ee37782cc0] mmco: unref short failure
[h264 @ 0x55ee37782cc0] mmco: unref short failure
 59%|█████▉    | 1157/1945 [4:10:52<3:29:55, 15.98s/it] 60%|█████▉    | 1158/1945 [4:10:55<2:40:14, 12.22s/it][h264 @ 0x55668514a2c0] mmco: unref short failure
[h264 @ 0x55668514a2c0] mmco: unref short failure
 60%|█████▉    | 1159/1945 [4:10:59<2:05:35,  9.59s/it][h264 @ 0x55b932f563c0] mmco: unref short failure
 60%|█████▉    | 1160/1945 [4:11:02<1:42:31,  7.84s/it] 60%|█████▉    | 1161/1945 [4:11:06<1:25:46,  6.56s/it] 60%|█████▉    | 1162/1945 [4:11:09<1:12:30,  5.56s/it] 60%|█████▉    | 1163/1945 [4:11:12<1:02:24,  4.79s/it][h264 @ 0x55b8eb2f6680] mmco: unref short failure
[h264 @ 0x55b8eb2f6680] mmco: unref short failure
 60%|█████▉    | 1164/1945 [4:11:20<1:15:38,  5.81s/it] 60%|█████▉    | 1165/1945 [4:11:25<1:12:50,  5.60s/it] 60%|█████▉    | 1166/1945 [4:11:28<1:00:24,  4.65s/it]/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55ee03ef3380] mmco: unref short failure
[h264 @ 0x55b90b0e65c0] mmco: unref short failure
[h264 @ 0x55b90b0e65c0] mmco: unref short failure
[h264 @ 0x556647189880] mmco: unref short failure
[h264 @ 0x55ee2f3d33c0] mmco: unref short failure
[h264 @ 0x55fcca7063c0] mmco: unref short failure
[h264 @ 0x55b90a37bf00] mmco: unref short failure
[h264 @ 0x55b90a37bf00] mmco: unref short failure
[h264 @ 0x55ee31a5dd80] mmco: unref short failure
[h264 @ 0x55ee31a5dd80] mmco: unref short failure
[h264 @ 0x55ee3194b040] mmco: unref short failure
[h264 @ 0x55fc8d809a40] mmco: unref short failure
[h264 @ 0x55fc8d809a40] mmco: unref short failure
[h264 @ 0x55ee31cc48c0] mmco: unref short failure
[h264 @ 0x556675e5d980] mmco: unref short failure
[h264 @ 0x556675e5d980] mmco: unref short failure
[h264 @ 0x55ee0404b1c0] mmco: unref short failure
[h264 @ 0x55ee0404b1c0] mmco: unref short failure
[h264 @ 0x5566772a6c80] mmco: unref short failure
[h264 @ 0x5566772a6c80] mmco: unref short failure
[h264 @ 0x55fcca8e9a40] mmco: unref short failure
[h264 @ 0x55fc8d5de1c0] mmco: unref short failure
[h264 @ 0x55fc8d5de1c0] mmco: unref short failure
[h264 @ 0x556674a2a5c0] mmco: unref short failure
not have audios ua_Kowav7hg.20
 60%|██████    | 1167/1945 [4:13:24<8:14:33, 38.14s/it] 60%|██████    | 1168/1945 [4:13:29<6:05:36, 28.23s/it] 60%|██████    | 1169/1945 [4:13:35<4:36:42, 21.40s/it][h264 @ 0x55fccb345180] mmco: unref short failure
[h264 @ 0x55fccb345180] mmco: unref short failure
[h264 @ 0x55fccb345180] mmco: unref short failure
 60%|██████    | 1170/1945 [4:13:41<3:36:29, 16.76s/it][h264 @ 0x55ee03fc19c0] mmco: unref short failure
[h264 @ 0x55ee049ab600] mmco: unref short failure
 60%|██████    | 1171/1945 [4:13:47<2:55:10, 13.58s/it][h264 @ 0x55fccf78a280] mmco: unref short failure
[h264 @ 0x55fccf78a280] mmco: unref short failure
 60%|██████    | 1172/1945 [4:13:52<2:24:02, 11.18s/it] 60%|██████    | 1173/1945 [4:13:59<2:05:36,  9.76s/it][h264 @ 0x55ee31532e80] mmco: unref short failure
 60%|██████    | 1174/1945 [4:14:05<1:51:01,  8.64s/it][h264 @ 0x556646c56ec0] mmco: unref short failure
[h264 @ 0x556646c56ec0] mmco: unref short failure
[h264 @ 0x55ee2fbec9c0] mmco: unref short failure
[h264 @ 0x55fccf613100] mmco: unref short failure
[h264 @ 0x55fccf613100] mmco: unref short failure
[h264 @ 0x55ee33d63dc0] mmco: unref short failure
[h264 @ 0x55b8edc8e4c0] mmco: unref short failure
[h264 @ 0x55b8edc8e4c0] mmco: unref short failure
[h264 @ 0x556675707880] mmco: unref short failure
[h264 @ 0x556675707880] mmco: unref short failure
[h264 @ 0x556674f6b2c0] mmco: unref short failure
[h264 @ 0x55b90bfd4400] mmco: unref short failure
[h264 @ 0x55b8ed1c7640] mmco: unref short failure
[h264 @ 0x55b8edc7fa80] mmco: unref short failure
[h264 @ 0x556676142ac0] mmco: unref short failure
[h264 @ 0x556676142ac0] mmco: unref short failure
[h264 @ 0x556676142ac0] mmco: unref short failure
[h264 @ 0x556676142ac0] mmco: unref short failure
[h264 @ 0x55fcca20cb00] mmco: unref short failure
[h264 @ 0x556673547740] mmco: unref short failure
[h264 @ 0x55ee355fcc00] mmco: unref short failure
[h264 @ 0x55b8ed117040] mmco: unref short failure
[h264 @ 0x556674416280] mmco: unref short failure
[h264 @ 0x556674416280] mmco: unref short failure
[h264 @ 0x55b8edf205c0] mmco: unref short failure
[h264 @ 0x55fccf1f8e00] mmco: unref short failure
[h264 @ 0x556675dd7780] mmco: unref short failure
[h264 @ 0x55b8ebbc4e00] mmco: unref short failure
[h264 @ 0x55b8ebbc4e00] mmco: unref short failure
 60%|██████    | 1175/1945 [4:15:11<5:33:17, 25.97s/it] 60%|██████    | 1176/1945 [4:15:18<4:20:40, 20.34s/it] 61%|██████    | 1177/1945 [4:15:24<3:23:32, 15.90s/it][h264 @ 0x55b8eaa0b980] mmco: unref short failure
[h264 @ 0x55b8eaa0b980] mmco: unref short failure
 61%|██████    | 1178/1945 [4:15:31<2:49:42, 13.28s/it][h264 @ 0x55ee31e3cb40] mmco: unref short failure
[h264 @ 0x55ee31e3cb40] mmco: unref short failure
 61%|██████    | 1179/1945 [4:15:38<2:24:50, 11.34s/it] 61%|██████    | 1180/1945 [4:15:44<2:05:25,  9.84s/it][h264 @ 0x55fcca2da200] mmco: unref short failure
 61%|██████    | 1181/1945 [4:15:50<1:49:23,  8.59s/it][h264 @ 0x5566476feb40] mmco: unref short failure
[h264 @ 0x5566476feb40] mmco: unref short failure
[h264 @ 0x55fccd794880] mmco: unref short failure
[h264 @ 0x55b8ea691a00] mmco: unref short failure
 61%|██████    | 1182/1945 [4:15:56<1:41:17,  7.97s/it][h264 @ 0x55fc8cc8f240] mmco: unref short failure
[h264 @ 0x556674e4ab80] mmco: unref short failure
[h264 @ 0x556674e4ab80] mmco: unref short failure
[h264 @ 0x556674e4ab80] mmco: unref short failure
[h264 @ 0x556674e4ab80] mmco: unref short failure
[h264 @ 0x556674e4ab80] mmco: unref short failure
[h264 @ 0x556674e4ab80] mmco: unref short failure
[h264 @ 0x556674e4ab80] mmco: unref short failure
[h264 @ 0x556674e4ab80] mmco: unref short failure
[h264 @ 0x55fcd052a500] mmco: unref short failure
[h264 @ 0x55fcd052a500] mmco: unref short failure
[h264 @ 0x55fcd2743580] mmco: unref short failure
[h264 @ 0x55fcd2743580] mmco: unref short failure
[h264 @ 0x55ee3311e440] mmco: unref short failure
 61%|██████    | 1183/1945 [4:16:49<4:30:09, 21.27s/it] 61%|██████    | 1184/1945 [4:16:54<3:29:18, 16.50s/it][h264 @ 0x556673a45e80] mmco: unref short failure
[h264 @ 0x55ee307b62c0] mmco: unref short failure
[h264 @ 0x55ee307b62c0] mmco: unref short failure
[h264 @ 0x5566477144c0] mmco: unref short failure
[h264 @ 0x5566477144c0] mmco: unref short failure
 61%|██████    | 1185/1945 [4:17:02<2:57:44, 14.03s/it][h264 @ 0x55b8f0f38300] mmco: unref short failure
[h264 @ 0x55b8f0f38300] mmco: unref short failure
 61%|██████    | 1186/1945 [4:17:08<2:25:19, 11.49s/it][h264 @ 0x55fcd28c4300] mmco: unref short failure
[h264 @ 0x55fcd28c4300] mmco: unref short failure
 61%|██████    | 1187/1945 [4:17:14<2:02:34,  9.70s/it][h264 @ 0x55fccf51ed00] mmco: unref short failure
 61%|██████    | 1188/1945 [4:17:19<1:46:43,  8.46s/it][h264 @ 0x55fccb381e80] mmco: unref short failure
[h264 @ 0x55fccb381e80] mmco: unref short failure
 61%|██████    | 1189/1945 [4:17:25<1:35:19,  7.57s/it][h264 @ 0x55b8f1201a40] mmco: unref short failure
[h264 @ 0x55b8f1201a40] mmco: unref short failure
 61%|██████    | 1190/1945 [4:17:30<1:28:39,  7.05s/it][h264 @ 0x55667c86cec0] mmco: unref short failure
[h264 @ 0x55667c86cec0] mmco: unref short failure
[h264 @ 0x55b8ed0695c0] mmco: unref short failure
[h264 @ 0x55b8ed0695c0] mmco: unref short failure
[h264 @ 0x55fccf7e1980] mmco: unref short failure
[h264 @ 0x55fc8db09e00] mmco: unref short failure
[h264 @ 0x55667ae78c80] mmco: unref short failure
[h264 @ 0x55667ae78c80] mmco: unref short failure
[h264 @ 0x55b8ec1923c0] mmco: unref short failure
[h264 @ 0x55b8ec1923c0] mmco: unref short failure
[h264 @ 0x556679f77840] mmco: unref short failure
[h264 @ 0x556679f77840] mmco: unref short failure
[h264 @ 0x556676477c00] mmco: unref short failure
[h264 @ 0x55fcd2c3a600] mmco: unref short failure
[h264 @ 0x55ee353a2080] mmco: unref short failure
 61%|██████    | 1191/1945 [4:18:26<4:32:19, 21.67s/it] 61%|██████▏   | 1192/1945 [4:18:32<3:31:46, 16.87s/it][h264 @ 0x55b929e91780] mmco: unref short failure
 61%|██████▏   | 1193/1945 [4:18:38<2:49:39, 13.54s/it] 61%|██████▏   | 1194/1945 [4:18:43<2:19:47, 11.17s/it] 61%|██████▏   | 1195/1945 [4:18:49<2:00:48,  9.66s/it] 61%|██████▏   | 1196/1945 [4:18:55<1:46:22,  8.52s/it] 62%|██████▏   | 1197/1945 [4:19:01<1:35:20,  7.65s/it] 62%|██████▏   | 1198/1945 [4:19:07<1:28:26,  7.10s/it][h264 @ 0x55ee37d48b00] mmco: unref short failure
[h264 @ 0x55ee37d48b00] mmco: unref short failure
[h264 @ 0x55667dfed5c0] mmco: unref short failure
[h264 @ 0x55667dfed5c0] mmco: unref short failure
[h264 @ 0x55fcd37f0b40] mmco: unref short failure
[h264 @ 0x55fcd37f0b40] mmco: unref short failure
[h264 @ 0x55b8ec178500] mmco: unref short failure
[h264 @ 0x55fcd3453d80] mmco: unref short failure
[h264 @ 0x55fcd3453d80] mmco: unref short failure
[h264 @ 0x55b8ec9d9f40] mmco: unref short failure
[h264 @ 0x55b8ec9d9f40] mmco: unref short failure
[h264 @ 0x55b8ea690040] mmco: unref short failure
[h264 @ 0x55b8ea690040] mmco: unref short failure
 62%|██████▏   | 1199/1945 [4:20:10<4:58:26, 24.00s/it]09/07/2024 16:04:08 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/07/2024 16:04:08 - INFO - __main__ -   start running ret%tv validation...
[h264 @ 0x55ee045abd40] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55fc8dcfd880] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55ee38a897c0] mmco: unref short failure
[h264 @ 0x55ee38a897c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b8ef5d6a00] mmco: unref short failure
[h264 @ 0x55b8ef5d6a00] mmco: unref short failure
[h264 @ 0x55ee31076b80] mmco: unref short failure
[h264 @ 0x556674829c00] mmco: unref short failure
[h264 @ 0x556674829c00] mmco: unref short failure
[h264 @ 0x55fcd4724f00] mmco: unref short failure
[h264 @ 0x55fcd4724f00] mmco: unref short failure
[h264 @ 0x55fcd4724f00] mmco: unref short failure
[h264 @ 0x55fcd4724f00] mmco: unref short failure
[h264 @ 0x55fcd4724f00] mmco: unref short failure
[h264 @ 0x55ee3425c900] mmco: unref short failure
[h264 @ 0x55ee3425c900] mmco: unref short failure
[h264 @ 0x55b8ee201d00] mmco: unref short failure
[h264 @ 0x55b8ee201d00] mmco: unref short failure
[h264 @ 0x55b928397d00] mmco: unref short failure
[h264 @ 0x55b928397d00] mmco: unref short failure
[h264 @ 0x55fcce84a800] mmco: unref short failure
[h264 @ 0x55fcce84a800] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:02,  3.51it/s][A
  1%|          | 2/221 [00:00<00:46,  4.68it/s][A
  1%|▏         | 3/221 [00:00<01:20,  2.72it/s][A
  2%|▏         | 4/221 [00:01<00:59,  3.67it/s][A
  3%|▎         | 7/221 [00:01<00:30,  7.12it/s][A
  4%|▍         | 9/221 [00:01<00:27,  7.77it/s][A
  5%|▍         | 10/221 [00:01<00:27,  7.72it/s][A
  5%|▌         | 12/221 [00:02<00:48,  4.32it/s][A
  6%|▌         | 13/221 [00:02<00:43,  4.79it/s][A
  6%|▋         | 14/221 [00:02<00:39,  5.27it/s][A
  7%|▋         | 15/221 [00:02<00:34,  5.94it/s][A
  7%|▋         | 16/221 [00:02<00:32,  6.25it/s][A
  8%|▊         | 17/221 [00:03<01:05,  3.12it/s][A
  8%|▊         | 18/221 [00:03<00:58,  3.47it/s][A
  9%|▊         | 19/221 [00:04<00:51,  3.91it/s][A
 10%|▉         | 21/221 [00:04<00:36,  5.52it/s][A[h264 @ 0x55fc8da5fd00] mmco: unref short failure
[h264 @ 0x55fc8da5fd00] mmco: unref short failure

 10%|▉         | 22/221 [00:04<00:41,  4.78it/s][A
 11%|█▏        | 25/221 [00:04<00:26,  7.49it/s][A
 12%|█▏        | 26/221 [00:04<00:28,  6.78it/s][A
 13%|█▎        | 28/221 [00:05<00:29,  6.49it/s][A
 13%|█▎        | 29/221 [00:05<00:27,  6.96it/s][A
 14%|█▎        | 30/221 [00:05<00:26,  7.33it/s][A
 14%|█▍        | 31/221 [00:05<00:31,  5.94it/s][A
 15%|█▍        | 33/221 [00:05<00:24,  7.63it/s][A
 16%|█▌        | 35/221 [00:06<00:21,  8.74it/s][A
 16%|█▋        | 36/221 [00:06<00:23,  7.78it/s][A
 17%|█▋        | 37/221 [00:06<00:32,  5.73it/s][A
 17%|█▋        | 38/221 [00:07<01:03,  2.87it/s][A
 18%|█▊        | 40/221 [00:07<00:48,  3.77it/s][A
 19%|█▉        | 42/221 [00:08<00:55,  3.21it/s][A
 20%|█▉        | 44/221 [00:08<00:39,  4.51it/s][A
 20%|██        | 45/221 [00:10<01:38,  1.80it/s][A
 21%|██        | 46/221 [00:10<01:25,  2.04it/s][A
 21%|██▏       | 47/221 [00:12<02:12,  1.31it/s][A
 22%|██▏       | 49/221 [00:12<01:27,  1.98it/s][A
 23%|██▎       | 50/221 [00:12<01:11,  2.41it/s][A
 24%|██▎       | 52/221 [00:12<00:47,  3.57it/s][A
 24%|██▍       | 53/221 [00:13<00:42,  3.94it/s][A
 24%|██▍       | 54/221 [00:13<01:04,  2.60it/s][A
 25%|██▍       | 55/221 [00:14<01:05,  2.55it/s][A
 25%|██▌       | 56/221 [00:14<00:52,  3.16it/s][A
 26%|██▌       | 58/221 [00:14<00:33,  4.84it/s][A
 27%|██▋       | 60/221 [00:15<00:48,  3.30it/s][A
 28%|██▊       | 61/221 [00:15<00:42,  3.78it/s][A
 28%|██▊       | 62/221 [00:15<00:38,  4.10it/s][A
 29%|██▊       | 63/221 [00:15<00:33,  4.68it/s][A
 29%|██▉       | 64/221 [00:16<00:37,  4.15it/s][A
 30%|██▉       | 66/221 [00:17<01:06,  2.33it/s][A
 30%|███       | 67/221 [00:17<00:57,  2.68it/s][A
 31%|███       | 68/221 [00:17<00:51,  3.00it/s][A
 31%|███       | 69/221 [00:19<01:28,  1.71it/s][A
 32%|███▏      | 71/221 [00:19<01:03,  2.35it/s][A
 33%|███▎      | 72/221 [00:19<00:57,  2.58it/s][A
 33%|███▎      | 73/221 [00:20<01:00,  2.46it/s][A
 34%|███▍      | 75/221 [00:20<00:45,  3.23it/s][A
 35%|███▍      | 77/221 [00:21<00:52,  2.75it/s][A
 36%|███▌      | 79/221 [00:22<00:42,  3.34it/s][A
 37%|███▋      | 81/221 [00:22<00:38,  3.67it/s][A
 37%|███▋      | 82/221 [00:23<00:50,  2.75it/s][A
 38%|███▊      | 83/221 [00:23<00:44,  3.11it/s][A
 39%|███▉      | 86/221 [00:23<00:25,  5.23it/s][A
 39%|███▉      | 87/221 [00:24<00:44,  2.99it/s][A
 40%|███▉      | 88/221 [00:25<00:49,  2.69it/s][A
 40%|████      | 89/221 [00:25<00:52,  2.52it/s][A
 41%|████      | 90/221 [00:25<00:50,  2.58it/s][A
 42%|████▏     | 92/221 [00:26<00:35,  3.66it/s][A
 42%|████▏     | 93/221 [00:26<00:35,  3.57it/s][A
 43%|████▎     | 94/221 [00:26<00:33,  3.83it/s][A
 43%|████▎     | 96/221 [00:27<00:34,  3.58it/s][A
 44%|████▍     | 97/221 [00:27<00:29,  4.18it/s][A
 44%|████▍     | 98/221 [00:27<00:35,  3.51it/s][A
 45%|████▌     | 100/221 [00:27<00:23,  5.22it/s][A
 46%|████▌     | 102/221 [00:28<00:30,  3.85it/s][A
 47%|████▋     | 104/221 [00:28<00:23,  4.92it/s][A
 48%|████▊     | 105/221 [00:28<00:23,  4.90it/s][A
 48%|████▊     | 106/221 [00:29<00:34,  3.32it/s][A
 49%|████▉     | 108/221 [00:29<00:24,  4.68it/s][A
 50%|████▉     | 110/221 [00:29<00:17,  6.26it/s][A
 51%|█████     | 112/221 [00:30<00:19,  5.49it/s][A
 51%|█████     | 113/221 [00:30<00:23,  4.52it/s][A
 52%|█████▏    | 115/221 [00:30<00:17,  6.19it/s][A
 53%|█████▎    | 117/221 [00:31<00:31,  3.35it/s][A
 53%|█████▎    | 118/221 [00:32<00:26,  3.84it/s][A
 54%|█████▍    | 119/221 [00:32<00:23,  4.39it/s][A
 54%|█████▍    | 120/221 [00:32<00:21,  4.71it/s][A
 55%|█████▌    | 122/221 [00:32<00:14,  6.74it/s][A
 56%|█████▌    | 124/221 [00:32<00:16,  5.87it/s][A
 57%|█████▋    | 125/221 [00:34<00:36,  2.61it/s][A
 57%|█████▋    | 126/221 [00:34<00:34,  2.73it/s][A
 57%|█████▋    | 127/221 [00:36<01:05,  1.43it/s][A
 58%|█████▊    | 128/221 [00:36<00:55,  1.67it/s][A
 58%|█████▊    | 129/221 [00:36<00:43,  2.13it/s][A
 59%|█████▉    | 131/221 [00:36<00:27,  3.33it/s][A
 60%|█████▉    | 132/221 [00:37<00:43,  2.06it/s][A
 60%|██████    | 133/221 [00:38<00:38,  2.31it/s][A
 61%|██████    | 134/221 [00:39<01:07,  1.29it/s][A
 61%|██████    | 135/221 [00:40<00:55,  1.55it/s][A
 62%|██████▏   | 136/221 [00:40<00:48,  1.75it/s][A
 62%|██████▏   | 137/221 [00:40<00:45,  1.84it/s][A
 62%|██████▏   | 138/221 [00:42<01:19,  1.04it/s][A
 63%|██████▎   | 139/221 [00:43<01:16,  1.07it/s][A
 63%|██████▎   | 140/221 [00:44<01:09,  1.16it/s][A
 64%|██████▍   | 141/221 [00:45<01:00,  1.32it/s][A
 64%|██████▍   | 142/221 [00:45<00:50,  1.56it/s][A
 65%|██████▍   | 143/221 [00:46<00:52,  1.47it/s][A
 65%|██████▌   | 144/221 [00:46<00:39,  1.96it/s][A
 66%|██████▌   | 146/221 [00:46<00:22,  3.34it/s][A
 67%|██████▋   | 148/221 [00:46<00:15,  4.81it/s][A
 68%|██████▊   | 150/221 [00:46<00:12,  5.56it/s][A
 68%|██████▊   | 151/221 [00:47<00:16,  4.19it/s][A
 69%|██████▉   | 152/221 [00:47<00:21,  3.19it/s][A
 69%|██████▉   | 153/221 [00:47<00:19,  3.50it/s][A
 70%|██████▉   | 154/221 [00:48<00:16,  4.00it/s][A
 70%|███████   | 155/221 [00:48<00:14,  4.42it/s][A
 71%|███████   | 156/221 [00:48<00:15,  4.16it/s][A
 71%|███████   | 157/221 [00:50<00:46,  1.37it/s][A
 71%|███████▏  | 158/221 [00:50<00:36,  1.73it/s][A
 72%|███████▏  | 159/221 [00:50<00:29,  2.10it/s][A
 73%|███████▎  | 161/221 [00:51<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:51<00:13,  4.33it/s][A
 74%|███████▍  | 164/221 [00:51<00:14,  3.95it/s][A
 75%|███████▍  | 165/221 [00:52<00:15,  3.59it/s][A
 75%|███████▌  | 166/221 [00:52<00:20,  2.70it/s][A
 76%|███████▌  | 168/221 [00:56<00:47,  1.11it/s][A
 77%|███████▋  | 170/221 [00:56<00:31,  1.61it/s][A
 77%|███████▋  | 171/221 [00:57<00:32,  1.54it/s][A
 78%|███████▊  | 172/221 [00:57<00:26,  1.87it/s][A
 78%|███████▊  | 173/221 [00:57<00:23,  2.04it/s][A
 79%|███████▉  | 175/221 [00:57<00:15,  2.96it/s][A
 80%|███████▉  | 176/221 [00:58<00:13,  3.24it/s][A
 80%|████████  | 177/221 [00:58<00:11,  3.76it/s][A
 81%|████████  | 178/221 [00:58<00:10,  3.97it/s][A
 81%|████████  | 179/221 [00:59<00:22,  1.90it/s][A
 82%|████████▏ | 181/221 [00:59<00:12,  3.11it/s][A
 82%|████████▏ | 182/221 [01:00<00:12,  3.12it/s][A
 83%|████████▎ | 183/221 [01:00<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [01:00<00:11,  3.22it/s][A
 84%|████████▍ | 186/221 [01:01<00:10,  3.33it/s][A
 85%|████████▍ | 187/221 [01:01<00:09,  3.59it/s][A
 85%|████████▌ | 188/221 [01:01<00:07,  4.18it/s][A
 86%|████████▌ | 189/221 [01:01<00:07,  4.50it/s][A
 86%|████████▌ | 190/221 [01:02<00:07,  4.10it/s][A
 87%|████████▋ | 192/221 [01:02<00:06,  4.51it/s][A
 88%|████████▊ | 194/221 [01:03<00:07,  3.78it/s][A
 89%|████████▊ | 196/221 [01:03<00:04,  5.24it/s][A
 89%|████████▉ | 197/221 [01:03<00:04,  5.65it/s][A
 90%|█████████ | 199/221 [01:03<00:03,  7.10it/s][A
 90%|█████████ | 200/221 [01:03<00:02,  7.16it/s][A
 91%|█████████ | 201/221 [01:03<00:02,  7.37it/s][A
 92%|█████████▏| 203/221 [01:03<00:02,  8.34it/s][A
 93%|█████████▎| 205/221 [01:04<00:01,  9.84it/s][A
 94%|█████████▎| 207/221 [01:04<00:02,  6.19it/s][A
 94%|█████████▍| 208/221 [01:04<00:02,  5.74it/s][A
 95%|█████████▍| 209/221 [01:05<00:02,  5.46it/s][A
 95%|█████████▌| 211/221 [01:05<00:02,  4.90it/s][A
 96%|█████████▌| 212/221 [01:05<00:01,  4.52it/s][A
 96%|█████████▋| 213/221 [01:05<00:01,  5.00it/s][A
 97%|█████████▋| 214/221 [01:07<00:03,  2.30it/s][A
 97%|█████████▋| 215/221 [01:07<00:02,  2.68it/s][A
 98%|█████████▊| 216/221 [01:07<00:01,  3.00it/s][A
 98%|█████████▊| 217/221 [01:09<00:03,  1.22it/s][A
 99%|█████████▊| 218/221 [01:09<00:02,  1.50it/s][A
 99%|█████████▉| 219/221 [01:09<00:01,  1.97it/s][A
100%|█████████▉| 220/221 [01:10<00:00,  1.58it/s][A100%|██████████| 221/221 [01:10<00:00,  3.11it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.79it/s][A
  1%|          | 2/221 [00:00<00:57,  3.79it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.79it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.79it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.79it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.79it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.79it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.79it/s][A
  4%|▍         | 9/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.79it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.79it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.79it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.79it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.79it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.78it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.78it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.79it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.79it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.79it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.79it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.79it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.79it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.79it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.79it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.79it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.79it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.79it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.79it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.79it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.79it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.79it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.79it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 159/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.79it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.79it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.79it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.79it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.79it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.79it/s][A
 76%|███████▌  | 168/221 [00:44<00:13,  3.79it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.79it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.79it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.79it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.79it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.79it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 178/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.79it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.79it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.79it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.79it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.79it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.79it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.79it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.79it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.79it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.79it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.79it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.79it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.79it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.79it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.79it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.79it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.79it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.79it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.79it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.79it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.79it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.79it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▌| 212/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.79it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.79it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.79it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.79it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.79it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.79it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.79it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.79it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.79it/s][A100%|██████████| 221/221 [00:58<00:00,  3.79it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:22,  9.82it/s][A
  1%|          | 2/221 [00:00<00:33,  6.53it/s][A
  1%|▏         | 3/221 [00:00<00:38,  5.68it/s][A
  2%|▏         | 4/221 [00:00<00:33,  6.46it/s][A
  3%|▎         | 6/221 [00:00<00:24,  8.79it/s][A
  3%|▎         | 7/221 [00:01<00:33,  6.45it/s][A
  4%|▎         | 8/221 [00:01<00:33,  6.31it/s][A
  4%|▍         | 9/221 [00:01<00:33,  6.35it/s][A
  5%|▍         | 10/221 [00:01<00:51,  4.07it/s][A
  5%|▍         | 11/221 [00:01<00:46,  4.52it/s][A
  5%|▌         | 12/221 [00:02<00:42,  4.91it/s][A
  6%|▌         | 13/221 [00:02<01:00,  3.44it/s][A
  6%|▋         | 14/221 [00:02<00:49,  4.18it/s][A
  7%|▋         | 15/221 [00:02<00:46,  4.46it/s][A
  7%|▋         | 16/221 [00:03<00:49,  4.13it/s][A
  8%|▊         | 17/221 [00:03<01:20,  2.55it/s][A
  8%|▊         | 18/221 [00:04<01:05,  3.10it/s][A
  9%|▊         | 19/221 [00:04<00:56,  3.59it/s][A
  9%|▉         | 20/221 [00:04<00:46,  4.34it/s][A
 10%|▉         | 21/221 [00:04<00:42,  4.70it/s][A
 10%|▉         | 22/221 [00:04<00:45,  4.38it/s][A
 11%|█         | 24/221 [00:05<00:33,  5.92it/s][A
 11%|█▏        | 25/221 [00:05<00:36,  5.43it/s][A
 12%|█▏        | 26/221 [00:05<00:38,  5.07it/s][A
 12%|█▏        | 27/221 [00:05<00:40,  4.85it/s][A
 13%|█▎        | 28/221 [00:06<00:43,  4.39it/s][A
 13%|█▎        | 29/221 [00:06<00:47,  4.01it/s][A
 14%|█▎        | 30/221 [00:06<00:55,  3.47it/s][A
 14%|█▍        | 31/221 [00:06<00:49,  3.87it/s][A
 15%|█▍        | 33/221 [00:07<00:36,  5.15it/s][A
 16%|█▌        | 35/221 [00:07<00:33,  5.59it/s][A
 16%|█▋        | 36/221 [00:07<00:38,  4.84it/s][A
 17%|█▋        | 37/221 [00:07<00:37,  4.94it/s][A
 17%|█▋        | 38/221 [00:08<00:42,  4.32it/s][A
 18%|█▊        | 39/221 [00:08<00:39,  4.56it/s][A
 18%|█▊        | 40/221 [00:08<00:54,  3.30it/s][A
 19%|█▊        | 41/221 [00:09<00:46,  3.83it/s][A
 19%|█▉        | 42/221 [00:09<00:39,  4.55it/s][A
 19%|█▉        | 43/221 [00:09<00:33,  5.39it/s][A
 20%|█▉        | 44/221 [00:09<00:28,  6.13it/s][A
 20%|██        | 45/221 [00:09<00:35,  4.94it/s][A
 21%|██        | 46/221 [00:09<00:35,  4.91it/s][A
 21%|██▏       | 47/221 [00:10<00:35,  4.94it/s][A
 22%|██▏       | 48/221 [00:10<00:29,  5.80it/s][A
 22%|██▏       | 49/221 [00:10<00:30,  5.73it/s][A
 23%|██▎       | 50/221 [00:10<00:35,  4.87it/s][A
 23%|██▎       | 51/221 [00:10<00:33,  5.01it/s][A
 24%|██▎       | 52/221 [00:11<00:41,  4.09it/s][A
 24%|██▍       | 53/221 [00:11<00:34,  4.94it/s][A
 24%|██▍       | 54/221 [00:11<00:51,  3.26it/s][A
 25%|██▍       | 55/221 [00:12<00:48,  3.45it/s][A
 25%|██▌       | 56/221 [00:12<00:38,  4.26it/s][A
 26%|██▌       | 57/221 [00:12<00:37,  4.37it/s][A
 26%|██▌       | 58/221 [00:12<00:38,  4.27it/s][A
 27%|██▋       | 59/221 [00:12<00:34,  4.70it/s][A
 27%|██▋       | 60/221 [00:13<00:36,  4.44it/s][A
 28%|██▊       | 61/221 [00:13<00:31,  5.08it/s][A
 28%|██▊       | 62/221 [00:13<00:30,  5.26it/s][A
 29%|██▊       | 63/221 [00:13<00:42,  3.74it/s][A
 29%|██▉       | 64/221 [00:14<00:58,  2.69it/s][A
 29%|██▉       | 65/221 [00:14<00:48,  3.23it/s][A
 30%|██▉       | 66/221 [00:15<01:01,  2.53it/s][A
 30%|███       | 67/221 [00:15<01:01,  2.49it/s][A
 31%|███       | 68/221 [00:15<00:52,  2.91it/s][A
 31%|███       | 69/221 [00:17<01:29,  1.70it/s][A
 32%|███▏      | 70/221 [00:17<01:09,  2.16it/s][A
 32%|███▏      | 71/221 [00:17<00:56,  2.66it/s][A
 33%|███▎      | 72/221 [00:17<00:59,  2.52it/s][A
 33%|███▎      | 73/221 [00:18<00:52,  2.82it/s][A
 34%|███▍      | 75/221 [00:18<00:38,  3.80it/s][A
 34%|███▍      | 76/221 [00:18<00:35,  4.10it/s][A
 35%|███▍      | 77/221 [00:19<00:49,  2.93it/s][A
 35%|███▌      | 78/221 [00:19<00:39,  3.61it/s][A
 36%|███▌      | 79/221 [00:19<00:45,  3.14it/s][A
 36%|███▌      | 80/221 [00:19<00:41,  3.42it/s][A
 37%|███▋      | 81/221 [00:20<00:37,  3.77it/s][A
 37%|███▋      | 82/221 [00:20<00:40,  3.43it/s][A
 38%|███▊      | 83/221 [00:21<00:49,  2.79it/s][A
 38%|███▊      | 84/221 [00:21<00:39,  3.46it/s][A
 39%|███▉      | 86/221 [00:21<00:27,  4.85it/s][A
 39%|███▉      | 87/221 [00:21<00:35,  3.82it/s][A
 40%|███▉      | 88/221 [00:22<00:37,  3.58it/s][A
 40%|████      | 89/221 [00:22<00:36,  3.59it/s][A
 41%|████      | 90/221 [00:22<00:46,  2.80it/s][A
 41%|████      | 91/221 [00:23<00:37,  3.48it/s][A
 42%|████▏     | 92/221 [00:23<00:35,  3.61it/s][A
 42%|████▏     | 93/221 [00:23<00:48,  2.62it/s][A
 43%|████▎     | 94/221 [00:24<00:52,  2.42it/s][A
 43%|████▎     | 95/221 [00:24<00:46,  2.74it/s][A
 43%|████▎     | 96/221 [00:25<00:59,  2.10it/s][A
 44%|████▍     | 97/221 [00:25<00:47,  2.61it/s][A
 44%|████▍     | 98/221 [00:26<01:04,  1.91it/s][A
 45%|████▍     | 99/221 [00:26<00:49,  2.47it/s][A
 45%|████▌     | 100/221 [00:26<00:42,  2.83it/s][A
 46%|████▌     | 101/221 [00:27<00:40,  3.00it/s][A
 46%|████▌     | 102/221 [00:28<01:03,  1.88it/s][A
 47%|████▋     | 103/221 [00:28<00:48,  2.43it/s][A
 47%|████▋     | 104/221 [00:28<00:39,  2.98it/s][A
 48%|████▊     | 105/221 [00:28<00:38,  2.99it/s][A
 48%|████▊     | 106/221 [00:29<00:39,  2.94it/s][A
 48%|████▊     | 107/221 [00:29<00:35,  3.23it/s][A
 49%|████▉     | 108/221 [00:29<00:31,  3.61it/s][A
 50%|████▉     | 110/221 [00:29<00:24,  4.51it/s][A
 50%|█████     | 111/221 [00:30<00:24,  4.45it/s][A
 51%|█████     | 112/221 [00:30<00:26,  4.11it/s][A
 51%|█████     | 113/221 [00:30<00:30,  3.54it/s][A
 52%|█████▏    | 115/221 [00:31<00:23,  4.54it/s][A
 52%|█████▏    | 116/221 [00:31<00:23,  4.41it/s][A
 53%|█████▎    | 117/221 [00:31<00:24,  4.29it/s][A
 53%|█████▎    | 118/221 [00:31<00:23,  4.47it/s][A
 54%|█████▍    | 119/221 [00:32<00:25,  4.05it/s][A
 54%|█████▍    | 120/221 [00:32<00:21,  4.72it/s][A
 55%|█████▍    | 121/221 [00:32<00:18,  5.40it/s][A
 55%|█████▌    | 122/221 [00:32<00:19,  5.02it/s][A
 56%|█████▌    | 123/221 [00:32<00:17,  5.59it/s][A
 56%|█████▌    | 124/221 [00:33<00:23,  4.06it/s][A
 57%|█████▋    | 125/221 [00:33<00:28,  3.38it/s][A
 57%|█████▋    | 126/221 [00:33<00:24,  3.87it/s][A
 57%|█████▋    | 127/221 [00:34<00:30,  3.10it/s][A
 58%|█████▊    | 128/221 [00:34<00:26,  3.45it/s][A
 59%|█████▉    | 130/221 [00:34<00:21,  4.31it/s][A
 59%|█████▉    | 131/221 [00:34<00:18,  4.99it/s][A
 60%|█████▉    | 132/221 [00:35<00:39,  2.24it/s][A
 60%|██████    | 133/221 [00:36<00:35,  2.49it/s][A
 61%|██████    | 134/221 [00:36<00:40,  2.13it/s][A
 61%|██████    | 135/221 [00:37<00:41,  2.06it/s][A
 62%|██████▏   | 136/221 [00:37<00:34,  2.47it/s][A
 62%|██████▏   | 137/221 [00:37<00:29,  2.85it/s][A
 62%|██████▏   | 138/221 [00:38<00:28,  2.89it/s][A
 63%|██████▎   | 139/221 [00:38<00:33,  2.44it/s][A
 63%|██████▎   | 140/221 [00:39<00:31,  2.59it/s][A
 64%|██████▍   | 141/221 [00:39<00:28,  2.79it/s][A
 64%|██████▍   | 142/221 [00:39<00:24,  3.25it/s][A
 65%|██████▍   | 143/221 [00:40<00:34,  2.29it/s][A
 65%|██████▌   | 144/221 [00:40<00:32,  2.34it/s][A
 66%|██████▌   | 145/221 [00:40<00:25,  2.95it/s][A
 66%|██████▌   | 146/221 [00:40<00:20,  3.60it/s][A
 67%|██████▋   | 147/221 [00:41<00:20,  3.58it/s][A
 67%|██████▋   | 148/221 [00:41<00:24,  2.96it/s][A
 67%|██████▋   | 149/221 [00:42<00:30,  2.34it/s][A
 68%|██████▊   | 150/221 [00:42<00:26,  2.64it/s][A
 68%|██████▊   | 151/221 [00:42<00:26,  2.61it/s][A
 69%|██████▉   | 152/221 [00:43<00:27,  2.49it/s][A
 69%|██████▉   | 153/221 [00:43<00:22,  2.98it/s][A
 70%|██████▉   | 154/221 [00:43<00:20,  3.32it/s][A
 70%|███████   | 155/221 [00:44<00:20,  3.17it/s][A
 71%|███████   | 156/221 [00:44<00:17,  3.64it/s][A
 71%|███████   | 157/221 [00:44<00:17,  3.57it/s][A
 71%|███████▏  | 158/221 [00:44<00:17,  3.55it/s][A
 72%|███████▏  | 159/221 [00:45<00:15,  4.10it/s][A
 72%|███████▏  | 160/221 [00:45<00:12,  4.97it/s][A
 73%|███████▎  | 161/221 [00:45<00:17,  3.45it/s][A
 74%|███████▍  | 163/221 [00:45<00:13,  4.41it/s][A
 74%|███████▍  | 164/221 [00:46<00:12,  4.51it/s][A
 75%|███████▍  | 165/221 [00:46<00:15,  3.64it/s][A
 75%|███████▌  | 166/221 [00:46<00:14,  3.89it/s][A
 76%|███████▌  | 167/221 [00:46<00:11,  4.55it/s][A
 76%|███████▌  | 168/221 [00:47<00:13,  4.04it/s][A
 77%|███████▋  | 170/221 [00:47<00:11,  4.30it/s][A
 77%|███████▋  | 171/221 [00:48<00:13,  3.64it/s][A
 78%|███████▊  | 172/221 [00:48<00:13,  3.72it/s][A
 78%|███████▊  | 173/221 [00:48<00:17,  2.82it/s][A
 79%|███████▊  | 174/221 [00:49<00:20,  2.26it/s][A
 79%|███████▉  | 175/221 [00:49<00:17,  2.56it/s][A
 80%|███████▉  | 176/221 [00:50<00:14,  3.02it/s][A
 81%|████████  | 178/221 [00:50<00:11,  3.66it/s][A
 81%|████████  | 179/221 [00:50<00:11,  3.70it/s][A
 81%|████████▏ | 180/221 [00:50<00:09,  4.13it/s][A
 82%|████████▏ | 181/221 [00:51<00:08,  4.72it/s][A
 82%|████████▏ | 182/221 [00:51<00:12,  3.19it/s][A
 83%|████████▎ | 183/221 [00:51<00:10,  3.61it/s][A
 83%|████████▎ | 184/221 [00:52<00:10,  3.52it/s][A
 84%|████████▎ | 185/221 [00:52<00:08,  4.01it/s][A
 84%|████████▍ | 186/221 [00:53<00:15,  2.26it/s][A
 85%|████████▍ | 187/221 [00:53<00:13,  2.59it/s][A
 85%|████████▌ | 188/221 [00:53<00:11,  2.82it/s][A
 86%|████████▌ | 189/221 [00:53<00:10,  3.18it/s][A
 86%|████████▌ | 190/221 [00:54<00:10,  2.90it/s][A
 87%|████████▋ | 192/221 [00:54<00:07,  3.78it/s][A
 88%|████████▊ | 194/221 [00:55<00:06,  4.11it/s][A
 88%|████████▊ | 195/221 [00:55<00:06,  4.27it/s][A
 89%|████████▊ | 196/221 [00:55<00:05,  4.19it/s][A
 89%|████████▉ | 197/221 [00:55<00:05,  4.38it/s][A
 90%|████████▉ | 198/221 [00:55<00:05,  4.37it/s][A
 90%|█████████ | 199/221 [00:56<00:05,  4.34it/s][A
 90%|█████████ | 200/221 [00:56<00:05,  3.93it/s][A
 91%|█████████ | 201/221 [00:56<00:04,  4.62it/s][A
 91%|█████████▏| 202/221 [00:56<00:04,  4.18it/s][A
 92%|█████████▏| 203/221 [00:57<00:03,  4.97it/s][A
 92%|█████████▏| 204/221 [00:57<00:04,  4.02it/s][A
 93%|█████████▎| 205/221 [00:57<00:03,  4.85it/s][A
 93%|█████████▎| 206/221 [00:57<00:03,  4.18it/s][A
 94%|█████████▎| 207/221 [00:57<00:02,  4.67it/s][A
 94%|█████████▍| 208/221 [00:58<00:02,  4.69it/s][A
 95%|█████████▍| 209/221 [00:58<00:02,  4.98it/s][A
 95%|█████████▌| 211/221 [00:58<00:02,  4.97it/s][A
 96%|█████████▌| 212/221 [00:59<00:02,  4.21it/s][A
 96%|█████████▋| 213/221 [00:59<00:01,  4.66it/s][A
 97%|█████████▋| 214/221 [01:00<00:03,  2.19it/s][A
 97%|█████████▋| 215/221 [01:00<00:02,  2.61it/s][A
 98%|█████████▊| 216/221 [01:00<00:01,  2.91it/s][A
 98%|█████████▊| 217/221 [01:01<00:01,  2.85it/s][A
 99%|█████████▊| 218/221 [01:01<00:01,  2.83it/s][A
 99%|█████████▉| 219/221 [01:01<00:00,  2.95it/s][A
100%|█████████▉| 220/221 [01:02<00:00,  3.43it/s][A
100%|██████████| 221/221 [01:02<00:00,  4.08it/s][A100%|██████████| 221/221 [01:02<00:00,  3.56it/s]
09/07/2024 16:09:28 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 1199--===========

09/07/2024 16:09:28 - INFO - __main__ -   {'area_r1': 23.2, 'area_recall': '23.2/45.5/56.1', 'area_ravg': 41.6}
09/07/2024 16:09:28 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 1199--===========

09/07/2024 16:09:28 - INFO - __main__ -   {'forward_r1': 37.8, 'forward_recall': '37.8/64.7/73.0', 'forward_ravg': 58.5}
09/07/2024 16:09:28 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 1199--===========

09/07/2024 16:09:28 - INFO - __main__ -   {'area_video_r1': 38.6, 'area_video_recall': '38.6/67.5/76.6', 'area_video_ravg': 60.9}
09/07/2024 16:09:28 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 1199=======

09/07/2024 16:09:28 - INFO - __main__ -   {'area_video_r1': 38.6, 'area_video_recall': '38.6/67.5/76.6', 'area_video_ravg': 60.9}
09/07/2024 16:09:28 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 1199--===========

09/07/2024 16:09:28 - INFO - __main__ -   {'area_video_r1': 50.7, 'area_video_recall': '50.7/73.4/81.4', 'area_video_ravg': 68.5, 'area_video_back_r1': 50.5, 'area_video_back_recall': '50.5/74.2/81.4', 'area_video_back_ravg': 68.7}
09/07/2024 16:09:28 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 599=======

09/07/2024 16:09:28 - INFO - __main__ -   {'area_video_r1': 51.1, 'area_video_recall': '51.1/74.4/80.2', 'area_video_ravg': 68.6, 'area_video_back_r1': 49.1, 'area_video_back_recall': '49.1/72.5/80.4', 'area_video_back_ravg': 67.3}
09/07/2024 16:09:28 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 1199--===========

09/07/2024 16:09:28 - INFO - __main__ -   {'video_r1': 41.9, 'video_recall': '41.9/69.8/80.8', 'video_ravg': 64.1}
09/07/2024 16:09:28 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 299=======

09/07/2024 16:09:28 - INFO - __main__ -   {'video_r1': 42.3, 'video_recall': '42.3/71.2/80.8', 'video_ravg': 64.7}
09/07/2024 16:09:28 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 1199--===========

09/07/2024 16:09:28 - INFO - __main__ -   {'video_r1': 50.7, 'video_recall': '50.7/74.1/82.4', 'video_ravg': 69.0}
09/07/2024 16:09:28 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 599=======

09/07/2024 16:09:28 - INFO - __main__ -   {'video_r1': 51.8, 'video_recall': '51.8/75.5/82.9', 'video_ravg': 70.1}
[h264 @ 0x55ee311e6400] mmco: unref short failure
09/07/2024 16:09:53 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.0617449283599854, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04073454067111015, 'loss_ret%tv%ta--finetune_area/loss_area': 2.399778366088867, 'loss_ret%tv%ta--finetune_area/total_loss': 5.502257823944092}
 62%|██████▏   | 1200/1945 [4:25:57<25:01:30, 120.93s/it] 62%|██████▏   | 1201/1945 [4:26:00<17:40:11, 85.50s/it]  62%|██████▏   | 1202/1945 [4:26:03<12:32:48, 60.79s/it][h264 @ 0x55fccd3470c0] mmco: unref short failure
[h264 @ 0x55fccd3470c0] mmco: unref short failure
[h264 @ 0x55667f047940] mmco: unref short failure
[h264 @ 0x55667f047940] mmco: unref short failure
 62%|██████▏   | 1203/1945 [4:26:07<9:00:15, 43.69s/it]  62%|██████▏   | 1204/1945 [4:26:11<6:33:09, 31.83s/it] 62%|██████▏   | 1205/1945 [4:26:16<4:52:40, 23.73s/it][h264 @ 0x55b90c5ac340] mmco: unref short failure
[h264 @ 0x55b90c5ac340] mmco: unref short failure
 62%|██████▏   | 1206/1945 [4:26:22<3:45:21, 18.30s/it] 62%|██████▏   | 1207/1945 [4:26:28<3:00:51, 14.70s/it][h264 @ 0x55b8f08cd800] mmco: unref short failure
[h264 @ 0x55b90b0d7900] mmco: unref short failure
[h264 @ 0x55b90b0d7900] mmco: unref short failure
[h264 @ 0x55667cc6ccc0] mmco: unref short failure
[h264 @ 0x55667cc6ccc0] mmco: unref short failure
 62%|██████▏   | 1208/1945 [4:26:33<2:25:35, 11.85s/it] 62%|██████▏   | 1209/1945 [4:26:39<2:03:59, 10.11s/it] 62%|██████▏   | 1210/1945 [4:26:44<1:46:11,  8.67s/it] 62%|██████▏   | 1211/1945 [4:26:50<1:35:33,  7.81s/it] 62%|██████▏   | 1212/1945 [4:26:56<1:26:10,  7.05s/it][h264 @ 0x55ee34eec280] mmco: unref short failure
[h264 @ 0x55fcd6f5ffc0] mmco: unref short failure
[h264 @ 0x55fcd6f5ffc0] mmco: unref short failure
 62%|██████▏   | 1213/1945 [4:27:01<1:20:24,  6.59s/it] 62%|██████▏   | 1214/1945 [4:27:07<1:18:14,  6.42s/it][h264 @ 0x55ee3495ff80] mmco: unref short failure
[h264 @ 0x55ee3495ff80] mmco: unref short failure
 62%|██████▏   | 1215/1945 [4:27:14<1:20:25,  6.61s/it][h264 @ 0x55ee397ad6c0] mmco: unref short failure
[h264 @ 0x55ee397ad6c0] mmco: unref short failure
[h264 @ 0x55ee397ad6c0] mmco: unref short failure
 63%|██████▎   | 1216/1945 [4:27:21<1:21:04,  6.67s/it] 63%|██████▎   | 1217/1945 [4:27:29<1:25:01,  7.01s/it][h264 @ 0x55667896acc0] mmco: unref short failure
[h264 @ 0x55667f6c2ac0] mmco: unref short failure
[h264 @ 0x55667f6c2ac0] mmco: unref short failure
 63%|██████▎   | 1218/1945 [4:27:37<1:30:37,  7.48s/it] 63%|██████▎   | 1219/1945 [4:27:43<1:25:35,  7.07s/it][h264 @ 0x55ee373e4200] mmco: unref short failure
[h264 @ 0x55ee373e4200] mmco: unref short failure
[h264 @ 0x55ee373e4200] mmco: unref short failure
[h264 @ 0x55ee373e4200] mmco: unref short failure
[h264 @ 0x55ee3e0849c0] mmco: unref short failure
[h264 @ 0x55b8edb5be40] mmco: unref short failure
 63%|██████▎   | 1220/1945 [4:27:57<1:50:41,  9.16s/it] 63%|██████▎   | 1221/1945 [4:28:02<1:34:51,  7.86s/it] 63%|██████▎   | 1222/1945 [4:28:08<1:26:38,  7.19s/it] 63%|██████▎   | 1223/1945 [4:28:15<1:24:50,  7.05s/it][h264 @ 0x55b92ca03840] mmco: unref short failure
[h264 @ 0x55b92ca03840] mmco: unref short failure
[h264 @ 0x55b929e91ec0] mmco: unref short failure
[h264 @ 0x55b929e91ec0] mmco: unref short failure
[h264 @ 0x556680bd30c0] mmco: unref short failure
[h264 @ 0x556680bd30c0] mmco: unref short failure
[h264 @ 0x55b8ebe62e80] mmco: unref short failure
 63%|██████▎   | 1224/1945 [4:28:58<3:35:36, 17.94s/it][h264 @ 0x55ee3932d180] mmco: unref short failure
[h264 @ 0x55ee3932d180] mmco: unref short failure
 63%|██████▎   | 1225/1945 [4:29:08<3:06:03, 15.51s/it] 63%|██████▎   | 1226/1945 [4:29:18<2:45:43, 13.83s/it][h264 @ 0x55667ffb6780] mmco: unref short failure
[h264 @ 0x55667ffb6780] mmco: unref short failure
 63%|██████▎   | 1227/1945 [4:29:25<2:21:06, 11.79s/it] 63%|██████▎   | 1228/1945 [4:29:37<2:21:02, 11.80s/it][h264 @ 0x55b8ec671540] mmco: unref short failure
[h264 @ 0x55b8ec671540] mmco: unref short failure
 63%|██████▎   | 1229/1945 [4:29:43<2:01:06, 10.15s/it][h264 @ 0x55fcca3053c0] mmco: unref short failure
[h264 @ 0x55fcca3053c0] mmco: unref short failure
 63%|██████▎   | 1230/1945 [4:29:49<1:44:35,  8.78s/it][h264 @ 0x55fccdd12480] mmco: unref short failure
[h264 @ 0x55b928a4ab40] mmco: unref short failure
 63%|██████▎   | 1231/1945 [4:29:54<1:32:17,  7.76s/it][h264 @ 0x55fcd6f31800] mmco: unref short failure
[h264 @ 0x55fcd6f31800] mmco: unref short failure
[h264 @ 0x55b8ed514cc0] mmco: unref short failure
[h264 @ 0x55fcca236080] mmco: unref short failure
[h264 @ 0x556680b20bc0] mmco: unref short failure
[h264 @ 0x556680b20bc0] mmco: unref short failure
[h264 @ 0x55ee3d2abc00] mmco: unref short failure
[h264 @ 0x55ee3d2abc00] mmco: unref short failure
[h264 @ 0x55b928a4c500] mmco: unref short failure
[h264 @ 0x55b928a4c500] mmco: unref short failure
[h264 @ 0x55b928a4c500] mmco: unref short failure
[h264 @ 0x5566809c74c0] mmco: unref short failure
[h264 @ 0x5566809c74c0] mmco: unref short failure
[h264 @ 0x55ee322922c0] mmco: unref short failure
 63%|██████▎   | 1232/1945 [4:30:36<3:34:55, 18.09s/it][h264 @ 0x55fcd5125500] mmco: unref short failure
[h264 @ 0x55ee390d11c0] mmco: unref short failure
[h264 @ 0x55ee390d11c0] mmco: unref short failure
[h264 @ 0x55667369cac0] mmco: unref short failure
[h264 @ 0x556680b25600] mmco: unref short failure
 63%|██████▎   | 1233/1945 [4:30:45<3:01:59, 15.34s/it][h264 @ 0x55ee33d14000] mmco: unref short failure
[h264 @ 0x5566795d86c0] mmco: unref short failure
[h264 @ 0x55b92931abc0] mmco: unref short failure
[h264 @ 0x55b92931abc0] mmco: unref short failure
 63%|██████▎   | 1234/1945 [4:31:04<3:14:59, 16.45s/it][h264 @ 0x55ee3d58f2c0] mmco: unref short failure
[h264 @ 0x55ee3d58f2c0] mmco: unref short failure
[h264 @ 0x556683b628c0] mmco: unref short failure
[h264 @ 0x556683b628c0] mmco: unref short failure
 63%|██████▎   | 1235/1945 [4:31:10<2:37:50, 13.34s/it][h264 @ 0x55fcd3ec4600] mmco: unref short failure
[h264 @ 0x5566473e5ec0] mmco: unref short failure
[h264 @ 0x5566473e5ec0] mmco: unref short failure
[h264 @ 0x55b8efcfd8c0] mmco: unref short failure
[h264 @ 0x55b8efcfd8c0] mmco: unref short failure
[h264 @ 0x55ee35203cc0] mmco: unref short failure
[h264 @ 0x55ee36c310c0] mmco: unref short failure
[h264 @ 0x556679f6cb40] mmco: unref short failure
 64%|██████▎   | 1236/1945 [4:31:17<2:15:58, 11.51s/it][h264 @ 0x55667f5e3740] mmco: unref short failure
[h264 @ 0x55fcd8cb9680] mmco: unref short failure
 64%|██████▎   | 1237/1945 [4:31:23<1:54:07,  9.67s/it][h264 @ 0x55b8eb8c80c0] mmco: unref short failure
 64%|██████▎   | 1238/1945 [4:31:29<1:42:55,  8.74s/it][h264 @ 0x55ee34018940] mmco: unref short failure
[h264 @ 0x55ee34018940] mmco: unref short failure
[h264 @ 0x55ee343e1f80] mmco: unref short failure
[h264 @ 0x55ee34018940] mmco: unref short failure
 64%|██████▎   | 1239/1945 [4:31:35<1:31:28,  7.77s/it][h264 @ 0x55667f6c1d40] mmco: unref short failure
[h264 @ 0x55667f6c1d40] mmco: unref short failure
[h264 @ 0x55fcd4f59300] mmco: unref short failure
[h264 @ 0x55fcd4f59300] mmco: unref short failure
[h264 @ 0x55b8ed030480] mmco: unref short failure
[h264 @ 0x55667639d800] mmco: unref short failure
[h264 @ 0x55667639d800] mmco: unref short failure
 64%|██████▍   | 1240/1945 [4:32:16<3:30:36, 17.92s/it][h264 @ 0x55fcccb78dc0] mmco: unref short failure
[h264 @ 0x55fcccb78dc0] mmco: unref short failure
 64%|██████▍   | 1241/1945 [4:32:23<2:50:03, 14.49s/it][h264 @ 0x55ee3c283240] mmco: unref short failure
 64%|██████▍   | 1242/1945 [4:32:45<3:15:18, 16.67s/it] 64%|██████▍   | 1243/1945 [4:32:50<2:36:46, 13.40s/it] 64%|██████▍   | 1244/1945 [4:32:56<2:07:41, 10.93s/it][h264 @ 0x55b8eee2f780] mmco: unref short failure
 64%|██████▍   | 1245/1945 [4:33:01<1:48:38,  9.31s/it] 64%|██████▍   | 1246/1945 [4:33:07<1:37:14,  8.35s/it][h264 @ 0x55fcd7e63a40] mmco: unref short failure
[h264 @ 0x55fcd7e63a40] mmco: unref short failure
 64%|██████▍   | 1247/1945 [4:33:13<1:27:42,  7.54s/it][h264 @ 0x55b92b8364c0] mmco: unref short failure
[h264 @ 0x55fcd6417740] mmco: unref short failure
[h264 @ 0x55fcd6417740] mmco: unref short failure
[h264 @ 0x55ee2f4d2140] mmco: unref short failure
[h264 @ 0x55fcd6416e40] mmco: unref short failure
[h264 @ 0x55fcd6416e40] mmco: unref short failure
[h264 @ 0x55b8ec12ad40] mmco: unref short failure
[h264 @ 0x55b8ec12ad40] mmco: unref short failure
[h264 @ 0x55b8ec12ad40] mmco: unref short failure
[h264 @ 0x55b8ec12ad40] mmco: unref short failure
[h264 @ 0x55b8ec12ad40] mmco: unref short failure
[h264 @ 0x55667f5e3740] mmco: unref short failure
 64%|██████▍   | 1248/1945 [4:33:51<3:14:33, 16.75s/it] 64%|██████▍   | 1249/1945 [4:34:04<3:02:09, 15.70s/it][h264 @ 0x556682b56b80] mmco: unref short failure
[h264 @ 0x55fcce11ce80] mmco: unref short failure
[h264 @ 0x55ee341364c0] mmco: unref short failure
[h264 @ 0x55ee341364c0] mmco: unref short failure
[h264 @ 0x55fc8dc9ca00] mmco: unref short failure
[h264 @ 0x55fc8dc9ca00] mmco: unref short failure
[h264 @ 0x556677067e80] mmco: unref short failure
[h264 @ 0x556677067e80] mmco: unref short failure
[h264 @ 0x55fcceaad680] mmco: unref short failure
[h264 @ 0x55fcceaad680] mmco: unref short failure
09/07/2024 16:18:22 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.1669912338256836, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.043012671172618866, 'loss_ret%tv%ta--finetune_area/loss_area': 2.6403348445892334, 'loss_ret%tv%ta--finetune_area/total_loss': 5.850338935852051}
 64%|██████▍   | 1250/1945 [4:34:27<3:27:19, 17.90s/it] 64%|██████▍   | 1251/1945 [4:34:33<2:44:57, 14.26s/it][h264 @ 0x55fcd5002480] mmco: unref short failure
[h264 @ 0x55fcd5002480] mmco: unref short failure
[h264 @ 0x55fcccd14c80] mmco: unref short failure
[h264 @ 0x55fcccd14c80] mmco: unref short failure
[h264 @ 0x55ee048cf700] mmco: unref short failure
[h264 @ 0x55b92efe2d40] mmco: unref short failure
[h264 @ 0x55b90a8c1140] mmco: unref short failure
[h264 @ 0x55b90a8c1140] mmco: unref short failure
 64%|██████▍   | 1252/1945 [4:34:38<2:12:55, 11.51s/it][h264 @ 0x55ee33e68600] mmco: unref short failure
[h264 @ 0x55ee33e68600] mmco: unref short failure
 64%|██████▍   | 1253/1945 [4:34:45<1:55:31, 10.02s/it][h264 @ 0x55668270f300] mmco: unref short failure
[h264 @ 0x55668270f300] mmco: unref short failure
[h264 @ 0x55fc8d2d4640] mmco: unref short failure
[h264 @ 0x55fc8d2d4640] mmco: unref short failure
 64%|██████▍   | 1254/1945 [4:34:50<1:40:03,  8.69s/it] 65%|██████▍   | 1255/1945 [4:34:57<1:32:55,  8.08s/it][h264 @ 0x556685860e80] mmco: unref short failure
[h264 @ 0x556685860e80] mmco: unref short failure
[h264 @ 0x55ee39e15dc0] mmco: unref short failure
[h264 @ 0x55ee39e15dc0] mmco: unref short failure
[h264 @ 0x55b92a39cb00] mmco: unref short failure
[h264 @ 0x55b92a39cb00] mmco: unref short failure
 65%|██████▍   | 1256/1945 [4:35:26<2:45:50, 14.44s/it] 65%|██████▍   | 1257/1945 [4:35:40<2:41:38, 14.10s/it][h264 @ 0x55ee35c99940] mmco: unref short failure
[h264 @ 0x55ee35c99940] mmco: unref short failure
[h264 @ 0x55ee3f77d4c0] mmco: unref short failure
[h264 @ 0x55668209a4c0] mmco: unref short failure
[h264 @ 0x55b8ed547300] mmco: unref short failure
[h264 @ 0x55667be50800] mmco: unref short failure
[h264 @ 0x55667be50800] mmco: unref short failure
[h264 @ 0x55b8ecef3dc0] mmco: unref short failure
[h264 @ 0x55ee40468900] mmco: unref short failure
[h264 @ 0x55ee40468900] mmco: unref short failure
[h264 @ 0x556678d47600] mmco: unref short failure
[h264 @ 0x556678d47600] mmco: unref short failure
 65%|██████▍   | 1258/1945 [4:36:01<3:06:19, 16.27s/it][h264 @ 0x55ee0448a1c0] mmco: unref short failure
[h264 @ 0x55ee0448a1c0] mmco: unref short failure
 65%|██████▍   | 1259/1945 [4:36:11<2:43:53, 14.34s/it][h264 @ 0x55fcd5dc98c0] mmco: unref short failure
[h264 @ 0x55fcd5dc98c0] mmco: unref short failure
 65%|██████▍   | 1260/1945 [4:36:17<2:15:04, 11.83s/it] 65%|██████▍   | 1261/1945 [4:36:22<1:52:29,  9.87s/it] 65%|██████▍   | 1262/1945 [4:36:27<1:37:03,  8.53s/it] 65%|██████▍   | 1263/1945 [4:36:37<1:39:00,  8.71s/it][h264 @ 0x55b92b0287c0] mmco: unref short failure
[h264 @ 0x55b92b0287c0] mmco: unref short failure
[h264 @ 0x55ee3f001cc0] mmco: unref short failure
not have audios 8-qwaveiHMM.3
 65%|██████▍   | 1264/1945 [4:37:10<3:04:22, 16.24s/it] 65%|██████▌   | 1265/1945 [4:37:17<2:29:55, 13.23s/it][h264 @ 0x55b92bad8b40] mmco: unref short failure
[h264 @ 0x55ee3c933340] mmco: unref short failure
[h264 @ 0x55ee33b7db80] mmco: unref short failure
 65%|██████▌   | 1266/1945 [4:37:44<3:16:17, 17.34s/it][h264 @ 0x55667b4e6a00] mmco: unref short failure
 65%|██████▌   | 1267/1945 [4:37:49<2:36:48, 13.88s/it][h264 @ 0x55fc8da39a40] mmco: unref short failure
[h264 @ 0x55fccf085b00] mmco: unref short failure
[h264 @ 0x55fccf085b00] mmco: unref short failure
 65%|██████▌   | 1268/1945 [4:37:55<2:10:05, 11.53s/it][h264 @ 0x55fc8da39580] mmco: unref short failure
 65%|██████▌   | 1269/1945 [4:38:01<1:48:14,  9.61s/it] 65%|██████▌   | 1270/1945 [4:38:06<1:32:42,  8.24s/it][h264 @ 0x55fc8d2ff440] mmco: unref short failure
 65%|██████▌   | 1271/1945 [4:38:12<1:26:19,  7.68s/it][h264 @ 0x55ee40f5fb80] mmco: unref short failure
[h264 @ 0x55667b228c00] mmco: unref short failure
 65%|██████▌   | 1272/1945 [4:38:53<3:16:57, 17.56s/it] 65%|██████▌   | 1273/1945 [4:38:58<2:37:16, 14.04s/it][h264 @ 0x55b8ef8b6b00] mmco: unref short failure
[h264 @ 0x55667b009240] mmco: unref short failure
[h264 @ 0x55667b009240] mmco: unref short failure
 66%|██████▌   | 1274/1945 [4:39:23<3:12:46, 17.24s/it][h264 @ 0x55667ffb6500] mmco: unref short failure
[h264 @ 0x55667ffb6500] mmco: unref short failure
 66%|██████▌   | 1275/1945 [4:39:29<2:33:15, 13.72s/it][h264 @ 0x55b92dbed600] mmco: unref short failure
 66%|██████▌   | 1276/1945 [4:39:34<2:06:31, 11.35s/it][h264 @ 0x55ee3ed73200] mmco: unref short failure
[h264 @ 0x55fccb4f5ec0] mmco: unref short failure
[h264 @ 0x55fccb4f5ec0] mmco: unref short failure
[h264 @ 0x55ee3e90a180] mmco: unref short failure
[h264 @ 0x55fcd01e1d40] mmco: unref short failure
[h264 @ 0x55fcd01e1d40] mmco: unref short failure
 66%|██████▌   | 1277/1945 [4:39:40<1:47:00,  9.61s/it][h264 @ 0x556685a7a280] mmco: unref short failure
[h264 @ 0x556685a7a280] mmco: unref short failure
 66%|██████▌   | 1278/1945 [4:39:45<1:33:09,  8.38s/it] 66%|██████▌   | 1279/1945 [4:39:51<1:22:42,  7.45s/it][h264 @ 0x55fcdbb65bc0] mmco: unref short failure
[h264 @ 0x55ee307721c0] mmco: unref short failure
[h264 @ 0x55ee307721c0] mmco: unref short failure
[h264 @ 0x55b92a9fa680] mmco: unref short failure
[h264 @ 0x55ee3e1b2880] mmco: unref short failure
[h264 @ 0x55fcd422cfc0] mmco: unref short failure
[h264 @ 0x55fcd422cfc0] mmco: unref short failure
 66%|██████▌   | 1280/1945 [4:40:30<3:06:42, 16.85s/it][h264 @ 0x55ee36903500] mmco: unref short failure
[h264 @ 0x55ee40418dc0] mmco: unref short failure
[h264 @ 0x55ee40418dc0] mmco: unref short failure
[h264 @ 0x55ee35d88f40] mmco: unref short failure
 66%|██████▌   | 1281/1945 [4:40:36<2:30:22, 13.59s/it][h264 @ 0x55ee37f88dc0] mmco: unref short failure
[h264 @ 0x55ee37f88dc0] mmco: unref short failure
[h264 @ 0x55fcd22d0740] mmco: unref short failure
 66%|██████▌   | 1282/1945 [4:41:05<3:23:28, 18.41s/it][h264 @ 0x55b92d919640] mmco: unref short failure
[h264 @ 0x55b92d919640] mmco: unref short failure
 66%|██████▌   | 1283/1945 [4:41:11<2:41:20, 14.62s/it] 66%|██████▌   | 1284/1945 [4:41:16<2:10:47, 11.87s/it] 66%|██████▌   | 1285/1945 [4:41:22<1:49:04,  9.92s/it][h264 @ 0x55ee34482680] mmco: unref short failure
[h264 @ 0x55ee34482680] mmco: unref short failure
[h264 @ 0x55b92b077e00] mmco: unref short failure
 66%|██████▌   | 1286/1945 [4:41:28<1:35:43,  8.72s/it][h264 @ 0x556679b1a040] mmco: unref short failure
[h264 @ 0x556679b1a040] mmco: unref short failure
 66%|██████▌   | 1287/1945 [4:41:33<1:24:07,  7.67s/it][h264 @ 0x55fcdc0e2340] mmco: unref short failure
[h264 @ 0x55fcdc0e2340] mmco: unref short failure
not have audios 7wavFXW3AFw.7
[h264 @ 0x55ee3c77c700] mmco: unref short failure
[h264 @ 0x556676bae100] mmco: unref short failure
[h264 @ 0x55668230ee40] mmco: unref short failure
[h264 @ 0x55b9351075c0] mmco: unref short failure
 66%|██████▌   | 1288/1945 [4:42:10<2:59:22, 16.38s/it] 66%|██████▋   | 1289/1945 [4:42:15<2:23:27, 13.12s/it][h264 @ 0x55ee3e0ea800] mmco: unref short failure
[h264 @ 0x55ee3e0ea800] mmco: unref short failure
[h264 @ 0x55ee41283700] mmco: unref short failure
 66%|██████▋   | 1290/1945 [4:42:44<3:15:45, 17.93s/it][h264 @ 0x55b931d7ff40] mmco: unref short failure
[h264 @ 0x55b931d7ff40] mmco: unref short failure
 66%|██████▋   | 1291/1945 [4:42:50<2:36:03, 14.32s/it] 66%|██████▋   | 1292/1945 [4:42:55<2:06:03, 11.58s/it] 66%|██████▋   | 1293/1945 [4:43:01<1:47:03,  9.85s/it][h264 @ 0x55667e1ed400] mmco: unref short failure
[h264 @ 0x55b9360b0ec0] mmco: unref short failure
[h264 @ 0x55b9360b0ec0] mmco: unref short failure
[h264 @ 0x55b92cd3d980] mmco: unref short failure
[h264 @ 0x55b92cd3d980] mmco: unref short failure
 67%|██████▋   | 1294/1945 [4:43:07<1:33:30,  8.62s/it][h264 @ 0x5566759f9700] mmco: unref short failure
[h264 @ 0x5566759f9700] mmco: unref short failure
 67%|██████▋   | 1295/1945 [4:43:13<1:24:44,  7.82s/it][h264 @ 0x55fcddb8bc00] mmco: unref short failure
[h264 @ 0x55fcddb8bc00] mmco: unref short failure
[h264 @ 0x55fcdd178b40] mmco: unref short failure
 67%|██████▋   | 1296/1945 [4:43:46<2:47:40, 15.50s/it] 67%|██████▋   | 1297/1945 [4:43:52<2:14:47, 12.48s/it][h264 @ 0x55b9283b2500] mmco: unref short failure
[h264 @ 0x556676744300] mmco: unref short failure
 67%|██████▋   | 1298/1945 [4:44:20<3:05:05, 17.16s/it][h264 @ 0x55ee3fbd99c0] mmco: unref short failure
[h264 @ 0x5566857b6d80] mmco: unref short failure
 67%|██████▋   | 1299/1945 [4:44:25<2:27:01, 13.66s/it]09/07/2024 16:28:25 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.21677827835083, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.043801240622997284, 'loss_ret%tv%ta--finetune_area/loss_area': 2.3500328063964844, 'loss_ret%tv%ta--finetune_area/total_loss': 5.610612392425537}
 67%|██████▋   | 1300/1945 [4:44:31<2:00:04, 11.17s/it] 67%|██████▋   | 1301/1945 [4:44:36<1:41:09,  9.42s/it][h264 @ 0x55b92de8a780] mmco: unref short failure
[h264 @ 0x55b92de8a780] mmco: unref short failure
 67%|██████▋   | 1302/1945 [4:44:43<1:33:54,  8.76s/it] 67%|██████▋   | 1303/1945 [4:44:49<1:23:39,  7.82s/it][h264 @ 0x55fcd3c27340] mmco: unref short failure
[h264 @ 0x55fcd3c27340] mmco: unref short failure
[h264 @ 0x55fcd7063700] mmco: unref short failure
[h264 @ 0x55b931fb4c00] mmco: unref short failure
[h264 @ 0x55b931fb4c00] mmco: unref short failure
[h264 @ 0x556684ee4b00] mmco: unref short failure
[h264 @ 0x55ee3303ff40] mmco: unref short failure
[h264 @ 0x55fcdb504200] mmco: unref short failure
[h264 @ 0x55fcdb504200] mmco: unref short failure
[h264 @ 0x55b92f531100] mmco: unref short failure
 67%|██████▋   | 1304/1945 [4:45:29<3:07:02, 17.51s/it][h264 @ 0x55ee43738dc0] mmco: unref short failure
[h264 @ 0x55ee43738dc0] mmco: unref short failure
 67%|██████▋   | 1305/1945 [4:45:35<2:31:27, 14.20s/it][h264 @ 0x55ee31d0f900] mmco: unref short failure
 67%|██████▋   | 1306/1945 [4:45:56<2:51:03, 16.06s/it] 67%|██████▋   | 1307/1945 [4:46:03<2:23:06, 13.46s/it] 67%|██████▋   | 1308/1945 [4:46:09<1:57:42, 11.09s/it] 67%|██████▋   | 1309/1945 [4:46:14<1:40:14,  9.46s/it][h264 @ 0x55b8ed512c40] mmco: unref short failure
[h264 @ 0x55b8ed512c40] mmco: unref short failure
 67%|██████▋   | 1310/1945 [4:46:20<1:29:04,  8.42s/it][h264 @ 0x55b933e5df40] mmco: unref short failure
 67%|██████▋   | 1311/1945 [4:46:26<1:20:27,  7.61s/it][h264 @ 0x5566876e5280] mmco: unref short failure
[h264 @ 0x55ee31903f80] mmco: unref short failure
[h264 @ 0x55ee31903f80] mmco: unref short failure
[h264 @ 0x55fccb11fa00] mmco: unref short failure
[h264 @ 0x55b933a58140] mmco: unref short failure
[h264 @ 0x55fccd070b40] mmco: unref short failure
[h264 @ 0x55ee41096c40] mmco: unref short failure
[h264 @ 0x55b92f25c980] mmco: unref short failure
[h264 @ 0x55b92f25c980] mmco: unref short failure
[h264 @ 0x55ee0491e680] mmco: unref short failure
 67%|██████▋   | 1312/1945 [4:47:04<2:55:56, 16.68s/it] 68%|██████▊   | 1313/1945 [4:47:10<2:21:02, 13.39s/it][h264 @ 0x556674a06580] mmco: unref short failure
[h264 @ 0x556674a06580] mmco: unref short failure
 68%|██████▊   | 1314/1945 [4:47:32<2:48:14, 16.00s/it][h264 @ 0x556680e2f300] mmco: unref short failure
[h264 @ 0x556680e2f300] mmco: unref short failure
 68%|██████▊   | 1315/1945 [4:47:37<2:14:58, 12.85s/it] 68%|██████▊   | 1316/1945 [4:47:44<1:54:04, 10.88s/it][h264 @ 0x5566472b3200] mmco: unref short failure
[h264 @ 0x5566472b3200] mmco: unref short failure
 68%|██████▊   | 1317/1945 [4:47:51<1:42:11,  9.76s/it][h264 @ 0x55fcdb5a3140] mmco: unref short failure
 68%|██████▊   | 1318/1945 [4:47:57<1:30:46,  8.69s/it][h264 @ 0x55667e5c1e00] mmco: unref short failure
 68%|██████▊   | 1319/1945 [4:48:03<1:21:05,  7.77s/it][h264 @ 0x55ee319bcf80] mmco: unref short failure
[h264 @ 0x55ee319bcf80] mmco: unref short failure
[h264 @ 0x55ee319bcf80] mmco: unref short failure
[h264 @ 0x55ee319bcf80] mmco: unref short failure
[h264 @ 0x55b8ef4a0fc0] mmco: unref short failure
[h264 @ 0x55b8ef4a0fc0] mmco: unref short failure
 68%|██████▊   | 1320/1945 [4:48:43<3:04:11, 17.68s/it] 68%|██████▊   | 1321/1945 [4:48:50<2:28:12, 14.25s/it][h264 @ 0x55667705ae40] mmco: unref short failure
[h264 @ 0x55667705ae40] mmco: unref short failure
[h264 @ 0x55b932aeeb00] mmco: unref short failure
[h264 @ 0x55b932aeeb00] mmco: unref short failure
[h264 @ 0x55b932aeeb00] mmco: unref short failure
[h264 @ 0x55b932aeeb00] mmco: unref short failure
[h264 @ 0x55667c07ab00] mmco: unref short failure
 68%|██████▊   | 1322/1945 [4:49:12<2:53:47, 16.74s/it] 68%|██████▊   | 1323/1945 [4:49:18<2:18:11, 13.33s/it][h264 @ 0x556677c63900] mmco: unref short failure
 68%|██████▊   | 1324/1945 [4:49:23<1:54:09, 11.03s/it][h264 @ 0x55fcdd829940] mmco: unref short failure
[h264 @ 0x55fcdd829940] mmco: unref short failure
 68%|██████▊   | 1325/1945 [4:49:29<1:38:59,  9.58s/it][h264 @ 0x55fcd648fe40] mmco: unref short failure
[h264 @ 0x55ee32ac9f40] mmco: unref short failure
[h264 @ 0x55b92f531100] mmco: unref short failure
 68%|██████▊   | 1326/1945 [4:49:39<1:38:04,  9.51s/it][h264 @ 0x55fcde79fd00] mmco: unref short failure
[h264 @ 0x55ee42c52540] mmco: unref short failure
 68%|██████▊   | 1327/1945 [4:49:46<1:30:19,  8.77s/it][h264 @ 0x55ee4350dc80] mmco: unref short failure
[h264 @ 0x55ee4350dc80] mmco: unref short failure
[h264 @ 0x55b90bcf0c80] mmco: unref short failure
[h264 @ 0x55b90a7b1040] mmco: unref short failure
[h264 @ 0x55fc8d72f680] mmco: unref short failure
[h264 @ 0x55fcde06f140] mmco: unref short failure
[h264 @ 0x55fcde06f140] mmco: unref short failure
[h264 @ 0x55668b099d80] mmco: unref short failure
[h264 @ 0x55668b099d80] mmco: unref short failure
[h264 @ 0x55b9307ef680] mmco: unref short failure
[h264 @ 0x556686fa9f80] mmco: unref short failure
[h264 @ 0x55ee43b10880] mmco: unref short failure
[h264 @ 0x55ee43b10880] mmco: unref short failure
[h264 @ 0x55ee040c2000] mmco: unref short failure
[h264 @ 0x55ee040c2000] mmco: unref short failure
 68%|██████▊   | 1328/1945 [4:50:25<3:02:46, 17.77s/it] 68%|██████▊   | 1329/1945 [4:50:30<2:25:37, 14.18s/it][h264 @ 0x55ee300fbb40] mmco: unref short failure
[h264 @ 0x5566833957c0] mmco: unref short failure
[h264 @ 0x5566833957c0] mmco: unref short failure
 68%|██████▊   | 1330/1945 [4:50:47<2:33:20, 14.96s/it] 68%|██████▊   | 1331/1945 [4:50:53<2:05:04, 12.22s/it][h264 @ 0x55b8ec771b40] mmco: unref short failure
[h264 @ 0x55b8ec771b40] mmco: unref short failure
 68%|██████▊   | 1332/1945 [4:50:58<1:41:44,  9.96s/it][h264 @ 0x55667e401700] mmco: unref short failure
[h264 @ 0x55667e401700] mmco: unref short failure
[h264 @ 0x55fcd3b62900] mmco: unref short failure
[h264 @ 0x55fcd3b62900] mmco: unref short failure
 69%|██████▊   | 1333/1945 [4:51:04<1:29:50,  8.81s/it][h264 @ 0x55ee3c8cb4c0] mmco: unref short failure
 69%|██████▊   | 1334/1945 [4:51:27<2:12:10, 12.98s/it] 69%|██████▊   | 1335/1945 [4:51:32<1:48:25, 10.66s/it][h264 @ 0x55ee355a1a00] mmco: unref short failure
[h264 @ 0x55ee355a1a00] mmco: unref short failure
[h264 @ 0x55b8f1b77880] mmco: unref short failure
[h264 @ 0x556676e31f80] mmco: unref short failure
[h264 @ 0x556686b922c0] mmco: unref short failure
[h264 @ 0x55b92b08c700] mmco: unref short failure
[h264 @ 0x556685d8d000] mmco: unref short failure
[h264 @ 0x556685d8d000] mmco: unref short failure
[h264 @ 0x55b92fbc03c0] mmco: unref short failure
[h264 @ 0x556646bae4c0] mmco: unref short failure
 69%|██████▊   | 1336/1945 [4:51:58<2:34:56, 15.26s/it][h264 @ 0x55fcd1337d40] mmco: unref short failure
[h264 @ 0x55fcd1337d40] mmco: unref short failure
 69%|██████▊   | 1337/1945 [4:52:13<2:34:06, 15.21s/it][h264 @ 0x55ee04738a40] mmco: unref short failure
[h264 @ 0x55ee04738a40] mmco: unref short failure
[h264 @ 0x55ee33c20c00] mmco: unref short failure
[h264 @ 0x55fcd84fc640] mmco: unref short failure
[h264 @ 0x55fcce646800] mmco: unref short failure
[h264 @ 0x55fcce646800] mmco: unref short failure
 69%|██████▉   | 1338/1945 [4:52:29<2:37:36, 15.58s/it][h264 @ 0x55b92b8cbe00] mmco: unref short failure
[h264 @ 0x55b92b8cbe00] mmco: unref short failure
[h264 @ 0x55b92b8cbe00] mmco: unref short failure
 69%|██████▉   | 1339/1945 [4:52:35<2:07:02, 12.58s/it][h264 @ 0x55fcce570c80] mmco: unref short failure
 69%|██████▉   | 1340/1945 [4:52:41<1:48:36, 10.77s/it] 69%|██████▉   | 1341/1945 [4:52:47<1:32:01,  9.14s/it][h264 @ 0x55b90bef3840] mmco: unref short failure
[h264 @ 0x55b90bef3840] mmco: unref short failure
[h264 @ 0x55b90bef3840] mmco: unref short failure
[h264 @ 0x55ee41242200] mmco: unref short failure
[h264 @ 0x55ee41242200] mmco: unref short failure
 69%|██████▉   | 1342/1945 [4:53:04<1:54:59, 11.44s/it][h264 @ 0x55fcd61dad40] mmco: unref short failure
[h264 @ 0x55fcd61dad40] mmco: unref short failure
[h264 @ 0x5566757cc180] mmco: unref short failure
[h264 @ 0x5566757cc180] mmco: unref short failure
 69%|██████▉   | 1343/1945 [4:53:09<1:36:28,  9.62s/it][h264 @ 0x5566763f9dc0] mmco: unref short failure
[h264 @ 0x5566763f9dc0] mmco: unref short failure
[h264 @ 0x55b8f1b77680] mmco: unref short failure
[h264 @ 0x55b8f1b77680] mmco: unref short failure
[h264 @ 0x55ee04047680] mmco: unref short failure
[h264 @ 0x55ee04047680] mmco: unref short failure
 69%|██████▉   | 1344/1945 [4:53:43<2:48:56, 16.87s/it][h264 @ 0x55b8eb034b80] mmco: unref short failure
[h264 @ 0x55b8eb034b80] mmco: unref short failure
 69%|██████▉   | 1345/1945 [4:53:52<2:26:51, 14.69s/it][h264 @ 0x5566741ef9c0] mmco: unref short failure
[h264 @ 0x5566741ef9c0] mmco: unref short failure
[h264 @ 0x55b934c85e80] mmco: unref short failure
 69%|██████▉   | 1346/1945 [4:54:07<2:27:20, 14.76s/it][h264 @ 0x55fcdb09e740] mmco: unref short failure
[h264 @ 0x55fccc7786c0] mmco: unref short failure
 69%|██████▉   | 1347/1945 [4:54:13<2:01:31, 12.19s/it][h264 @ 0x556674b0fec0] mmco: unref short failure
 69%|██████▉   | 1348/1945 [4:54:19<1:42:01, 10.25s/it] 69%|██████▉   | 1349/1945 [4:54:25<1:27:18,  8.79s/it][h264 @ 0x55ee32c4b200] mmco: unref short failure
09/07/2024 16:38:33 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.2315101623535156, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.047078605741262436, 'loss_ret%tv%ta--finetune_area/loss_area': 2.6927809715270996, 'loss_ret%tv%ta--finetune_area/total_loss': 5.971369743347168}
[h264 @ 0x55fcde574f80] mmco: unref short failure
[h264 @ 0x55fcde574f80] mmco: unref short failure
 69%|██████▉   | 1350/1945 [4:54:38<1:41:48, 10.27s/it] 69%|██████▉   | 1351/1945 [4:54:44<1:27:37,  8.85s/it][h264 @ 0x55b92874c800] mmco: unref short failure
[h264 @ 0x55b92874c800] mmco: unref short failure
[h264 @ 0x55fccc7012c0] mmco: unref short failure
[h264 @ 0x55ee3fbd9bc0] mmco: unref short failure
[h264 @ 0x55667c010ec0] mmco: unref short failure
[h264 @ 0x55667c010ec0] mmco: unref short failure
[h264 @ 0x55667be88840] mmco: unref short failure
[h264 @ 0x556647e12a40] mmco: unref short failure
 70%|██████▉   | 1352/1945 [4:55:22<2:54:33, 17.66s/it] 70%|██████▉   | 1353/1945 [4:55:29<2:22:47, 14.47s/it][h264 @ 0x55fc8d171bc0] mmco: unref short failure
[h264 @ 0x55fc8d171bc0] mmco: unref short failure
[h264 @ 0x55b9288ab700] mmco: unref short failure
[h264 @ 0x55b9288ab700] mmco: unref short failure
 70%|██████▉   | 1354/1945 [4:55:43<2:20:18, 14.25s/it][h264 @ 0x55667e1b42c0] mmco: unref short failure
[h264 @ 0x55667e1b42c0] mmco: unref short failure
[h264 @ 0x55667e1b42c0] mmco: unref short failure
[h264 @ 0x55667e1b42c0] mmco: unref short failure
[h264 @ 0x55667e1b42c0] mmco: unref short failure
[h264 @ 0x55667e1b42c0] mmco: unref short failure
[h264 @ 0x55fccb527ec0] mmco: unref short failure
[h264 @ 0x55fccb527ec0] mmco: unref short failure
 70%|██████▉   | 1355/1945 [4:55:48<1:54:13, 11.62s/it][h264 @ 0x55fcca36f5c0] mmco: unref short failure
 70%|██████▉   | 1356/1945 [4:55:55<1:40:03, 10.19s/it][h264 @ 0x5566770de600] mmco: unref short failure
[h264 @ 0x5566770de600] mmco: unref short failure
 70%|██████▉   | 1357/1945 [4:56:01<1:26:17,  8.81s/it][h264 @ 0x55fccd7dfe40] mmco: unref short failure
[h264 @ 0x55fccd7dfe40] mmco: unref short failure
[h264 @ 0x55ee32d77140] mmco: unref short failure
[h264 @ 0x556677517a80] mmco: unref short failure
 70%|██████▉   | 1358/1945 [4:56:18<1:49:36, 11.20s/it][h264 @ 0x55667a2f3580] mmco: unref short failure
 70%|██████▉   | 1359/1945 [4:56:23<1:32:24,  9.46s/it][h264 @ 0x55ee31277540] mmco: unref short failure
[h264 @ 0x55ee31277540] mmco: unref short failure
[h264 @ 0x55667f7620c0] mmco: unref short failure
[h264 @ 0x55667f7620c0] mmco: unref short failure
 70%|██████▉   | 1360/1945 [4:57:04<3:03:18, 18.80s/it] 70%|██████▉   | 1361/1945 [4:57:09<2:24:42, 14.87s/it][h264 @ 0x55fccf4d9740] mmco: unref short failure
[h264 @ 0x55fccf4d9740] mmco: unref short failure
[h264 @ 0x5566869f3bc0] mmco: unref short failure
[h264 @ 0x55ee3b19e240] mmco: unref short failure
 70%|███████   | 1362/1945 [4:57:22<2:19:01, 14.31s/it][h264 @ 0x55b9331f7880] mmco: unref short failure
[h264 @ 0x55b9331f7880] mmco: unref short failure
[h264 @ 0x55b9331f7880] mmco: unref short failure
[h264 @ 0x55b9331f7880] mmco: unref short failure
[h264 @ 0x55b9331f7880] mmco: unref short failure
[h264 @ 0x55b9331f7880] mmco: unref short failure
 70%|███████   | 1363/1945 [4:57:28<1:54:17, 11.78s/it][h264 @ 0x55fccc97d500] mmco: unref short failure
[h264 @ 0x55fccc97d500] mmco: unref short failure
 70%|███████   | 1364/1945 [4:57:34<1:36:30,  9.97s/it][h264 @ 0x55ee44d6eec0] mmco: unref short failure
 70%|███████   | 1365/1945 [4:57:40<1:24:18,  8.72s/it][h264 @ 0x556685a93f00] mmco: unref short failure
[h264 @ 0x556685a93f00] mmco: unref short failure
[h264 @ 0x55ee3a370800] mmco: unref short failure
[h264 @ 0x55fcce5eae80] mmco: unref short failure
[h264 @ 0x55fcce5eae80] mmco: unref short failure
[h264 @ 0x55fcce5eae80] mmco: unref short failure
[h264 @ 0x55fcce5eae80] mmco: unref short failure
 70%|███████   | 1366/1945 [4:58:00<1:57:39, 12.19s/it] 70%|███████   | 1367/1945 [4:58:06<1:40:19, 10.41s/it][h264 @ 0x5566819a4140] mmco: unref short failure
[h264 @ 0x5566819a4140] mmco: unref short failure
[h264 @ 0x55b9307d6880] mmco: unref short failure
[h264 @ 0x55667f7620c0] mmco: unref short failure
[h264 @ 0x55667f7620c0] mmco: unref short failure
[h264 @ 0x5566742b18c0] mmco: unref short failure
[h264 @ 0x55ee428f4c80] mmco: unref short failure
[h264 @ 0x55ee428f4c80] mmco: unref short failure
[h264 @ 0x55ee0457fd40] mmco: unref short failure
[h264 @ 0x55ee0457fd40] mmco: unref short failure
[h264 @ 0x55fcdc5f5100] mmco: unref short failure
 70%|███████   | 1368/1945 [4:58:43<2:57:22, 18.45s/it] 70%|███████   | 1369/1945 [4:58:49<2:19:15, 14.51s/it][h264 @ 0x55fccbc4d640] mmco: unref short failure
[h264 @ 0x5566757d4900] mmco: unref short failure
 70%|███████   | 1370/1945 [4:59:01<2:13:23, 13.92s/it] 70%|███████   | 1371/1945 [4:59:07<1:49:36, 11.46s/it] 71%|███████   | 1372/1945 [4:59:13<1:33:07,  9.75s/it][h264 @ 0x55fcd9bb6e40] mmco: unref short failure
 71%|███████   | 1373/1945 [4:59:20<1:26:29,  9.07s/it][h264 @ 0x55ee3a8017c0] mmco: unref short failure
[h264 @ 0x55ee3a8017c0] mmco: unref short failure
[h264 @ 0x55b8ef6ad280] mmco: unref short failure
[h264 @ 0x55fc8da71780] mmco: unref short failure
[h264 @ 0x55fc8da71780] mmco: unref short failure
[h264 @ 0x55ee31a6e900] mmco: unref short failure
[h264 @ 0x55ee31a6e900] mmco: unref short failure
[h264 @ 0x556647339bc0] mmco: unref short failure
[h264 @ 0x55b8efe2be00] mmco: unref short failure
[h264 @ 0x55b8efe2be00] mmco: unref short failure
 71%|███████   | 1374/1945 [4:59:40<1:56:16, 12.22s/it] 71%|███████   | 1375/1945 [4:59:46<1:38:24, 10.36s/it][h264 @ 0x55ee43b0fd40] mmco: unref short failure
[h264 @ 0x55fc8dd947c0] mmco: unref short failure
[h264 @ 0x55fcd2ab72c0] mmco: unref short failure
[h264 @ 0x55fcd2ab72c0] mmco: unref short failure
[h264 @ 0x55fcd2ab72c0] mmco: unref short failure
[h264 @ 0x55fcd2ab72c0] mmco: unref short failure
[h264 @ 0x55fcd2ab72c0] mmco: unref short failure
[h264 @ 0x55fcd2ab72c0] mmco: unref short failure
[h264 @ 0x55fcd907ed00] mmco: unref short failure
 71%|███████   | 1376/1945 [5:00:24<2:57:16, 18.69s/it] 71%|███████   | 1377/1945 [5:00:30<2:20:15, 14.82s/it][h264 @ 0x55fccc72ae40] mmco: unref short failure
[h264 @ 0x55ee331cd100] mmco: unref short failure
[h264 @ 0x55ee331cd100] mmco: unref short failure
 71%|███████   | 1378/1945 [5:00:37<1:59:48, 12.68s/it][h264 @ 0x55fcdbc6dd00] mmco: unref short failure
[h264 @ 0x55fcdbc6dd00] mmco: unref short failure
[h264 @ 0x55fc8d94b2c0] mmco: unref short failure
[h264 @ 0x55ee33cf1300] mmco: unref short failure
[h264 @ 0x55ee33cf1300] mmco: unref short failure
 71%|███████   | 1379/1945 [5:00:43<1:38:36, 10.45s/it][h264 @ 0x556647339bc0] mmco: unref short failure
[h264 @ 0x55fc8d539f40] mmco: unref short failure
 71%|███████   | 1380/1945 [5:00:48<1:25:15,  9.05s/it][h264 @ 0x55fcd793e1c0] mmco: unref short failure
[h264 @ 0x55fcd793e1c0] mmco: unref short failure
 71%|███████   | 1381/1945 [5:00:54<1:14:38,  7.94s/it][h264 @ 0x55667b6aed00] mmco: unref short failure
[h264 @ 0x55667b6aed00] mmco: unref short failure
 71%|███████   | 1382/1945 [5:01:16<1:53:58, 12.15s/it][h264 @ 0x55667570d2c0] mmco: unref short failure
[h264 @ 0x55667570d2c0] mmco: unref short failure
 71%|███████   | 1383/1945 [5:01:21<1:34:32, 10.09s/it][h264 @ 0x55b90b885440] mmco: unref short failure
[h264 @ 0x5566747ba580] mmco: unref short failure
[h264 @ 0x5566747ba580] mmco: unref short failure
[h264 @ 0x55b90c915400] mmco: unref short failure
[h264 @ 0x55b90c915400] mmco: unref short failure
[h264 @ 0x55ee34c5fa80] mmco: unref short failure
[h264 @ 0x55b90b6bdac0] mmco: unref short failure
[h264 @ 0x55b90b6bdac0] mmco: unref short failure
[h264 @ 0x55ee39654e40] mmco: unref short failure
[h264 @ 0x55ee39654e40] mmco: unref short failure
 71%|███████   | 1384/1945 [5:02:06<3:11:00, 20.43s/it] 71%|███████   | 1385/1945 [5:02:13<2:33:25, 16.44s/it] 71%|███████▏  | 1386/1945 [5:02:18<2:02:04, 13.10s/it][h264 @ 0x5566770e2880] mmco: unref short failure
[h264 @ 0x5566770e2880] mmco: unref short failure
 71%|███████▏  | 1387/1945 [5:02:23<1:40:27, 10.80s/it][h264 @ 0x55ee42880cc0] mmco: unref short failure
[h264 @ 0x55ee42880cc0] mmco: unref short failure
 71%|███████▏  | 1388/1945 [5:02:30<1:28:44,  9.56s/it] 71%|███████▏  | 1389/1945 [5:02:36<1:18:45,  8.50s/it][h264 @ 0x55fccbb2e6c0] mmco: unref short failure
[h264 @ 0x55fccbb2e6c0] mmco: unref short failure
[h264 @ 0x55fc8d126480] mmco: unref short failure
[h264 @ 0x5566865a8cc0] mmco: unref short failure
[h264 @ 0x5566865a8cc0] mmco: unref short failure
[h264 @ 0x55ee383870c0] mmco: unref short failure
[h264 @ 0x55ee383870c0] mmco: unref short failure
 71%|███████▏  | 1390/1945 [5:02:54<1:44:48, 11.33s/it] 72%|███████▏  | 1391/1945 [5:03:06<1:45:22, 11.41s/it][h264 @ 0x55fcdb04eb80] mmco: unref short failure
[h264 @ 0x55fcdb04eb80] mmco: unref short failure
[h264 @ 0x55ee34acdcc0] mmco: unref short failure
[h264 @ 0x55ee3c995b00] mmco: unref short failure
[h264 @ 0x55ee3c995b00] mmco: unref short failure
 72%|███████▏  | 1392/1945 [5:03:45<3:01:20, 19.67s/it][h264 @ 0x55ee2fff2f00] mmco: unref short failure
[h264 @ 0x55667d52bd40] mmco: unref short failure
[h264 @ 0x55667d52bd40] mmco: unref short failure
 72%|███████▏  | 1393/1945 [5:03:54<2:31:23, 16.45s/it] 72%|███████▏  | 1394/1945 [5:04:00<2:02:46, 13.37s/it] 72%|███████▏  | 1395/1945 [5:04:05<1:41:24, 11.06s/it] 72%|███████▏  | 1396/1945 [5:04:11<1:26:20,  9.44s/it][h264 @ 0x55b8ee235940] mmco: unref short failure
 72%|███████▏  | 1397/1945 [5:04:16<1:14:18,  8.14s/it][h264 @ 0x55ee40617240] mmco: unref short failure
[h264 @ 0x55ee32067dc0] mmco: unref short failure
[h264 @ 0x55ee3476d280] mmco: unref short failure
[h264 @ 0x55ee457c6140] mmco: unref short failure
[h264 @ 0x55ee457c6140] mmco: unref short failure
 72%|███████▏  | 1398/1945 [5:04:39<1:54:31, 12.56s/it] 72%|███████▏  | 1399/1945 [5:04:44<1:33:51, 10.32s/it][h264 @ 0x55fccdb9e240] mmco: unref short failure
[h264 @ 0x55fccdb9e240] mmco: unref short failure
[h264 @ 0x55b8f0931c00] mmco: unref short failure
[h264 @ 0x55b8f0931c00] mmco: unref short failure
[h264 @ 0x556689e8ea40] mmco: unref short failure
09/07/2024 16:49:17 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.411653518676758, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04522155225276947, 'loss_ret%tv%ta--finetune_area/loss_area': 2.986496925354004, 'loss_ret%tv%ta--finetune_area/total_loss': 6.443371772766113}
 72%|███████▏  | 1400/1945 [5:05:23<2:50:38, 18.79s/it][h264 @ 0x55b90c18d180] mmco: unref short failure
[h264 @ 0x5566470cc8c0] mmco: unref short failure
[h264 @ 0x5566470cc8c0] mmco: unref short failure
 72%|███████▏  | 1401/1945 [5:05:33<2:26:24, 16.15s/it] 72%|███████▏  | 1402/1945 [5:05:38<1:58:02, 13.04s/it][h264 @ 0x55b92fa6b500] mmco: unref short failure
[h264 @ 0x55ee31aec040] mmco: unref short failure
[h264 @ 0x55ee31aec040] mmco: unref short failure
[h264 @ 0x55ee42881140] mmco: unref short failure
[h264 @ 0x55ee42881140] mmco: unref short failure
 72%|███████▏  | 1403/1945 [5:05:44<1:37:38, 10.81s/it] 72%|███████▏  | 1404/1945 [5:05:50<1:23:12,  9.23s/it][h264 @ 0x55b8eb171840] mmco: unref short failure
[h264 @ 0x55b8eb171840] mmco: unref short failure
 72%|███████▏  | 1405/1945 [5:05:55<1:13:45,  8.19s/it][h264 @ 0x5566775dcd80] mmco: unref short failure
 72%|███████▏  | 1406/1945 [5:06:17<1:49:52, 12.23s/it][h264 @ 0x55b8eda85d00] mmco: unref short failure
[h264 @ 0x55b8eda85d00] mmco: unref short failure
 72%|███████▏  | 1407/1945 [5:06:23<1:32:35, 10.33s/it][h264 @ 0x55fcd7a2b780] mmco: unref short failure
[h264 @ 0x55fcd7a2b780] mmco: unref short failure
[h264 @ 0x55ee03e52180] mmco: unref short failure
[h264 @ 0x55fcdc42b280] mmco: unref short failure
[h264 @ 0x5566824c7800] mmco: unref short failure
[h264 @ 0x5566824c7800] mmco: unref short failure
[h264 @ 0x556684a69280] mmco: unref short failure
[h264 @ 0x556684a69280] mmco: unref short failure
[h264 @ 0x55ee047ddfc0] mmco: unref short failure
[h264 @ 0x55ee3faea4c0] mmco: unref short failure
[h264 @ 0x55ee3faea4c0] mmco: unref short failure
[h264 @ 0x556646e0b340] mmco: unref short failure
[h264 @ 0x556646e0b340] mmco: unref short failure
 72%|███████▏  | 1408/1945 [5:07:00<2:45:17, 18.47s/it][h264 @ 0x5566743f7800] mmco: unref short failure
[h264 @ 0x5566743f7800] mmco: unref short failure
[h264 @ 0x55b9324ea000] mmco: unref short failure
[h264 @ 0x55b9324ea000] mmco: unref short failure
[h264 @ 0x55b92874c800] mmco: unref short failure
[h264 @ 0x55b92874c800] mmco: unref short failure
 72%|███████▏  | 1409/1945 [5:07:10<2:20:24, 15.72s/it][h264 @ 0x55b8ed0f0c40] mmco: unref short failure
[h264 @ 0x55667e9a2340] mmco: unref short failure
 72%|███████▏  | 1410/1945 [5:07:15<1:53:22, 12.71s/it] 73%|███████▎  | 1411/1945 [5:07:22<1:36:31, 10.84s/it] 73%|███████▎  | 1412/1945 [5:07:28<1:22:26,  9.28s/it] 73%|███████▎  | 1413/1945 [5:07:37<1:21:37,  9.21s/it][h264 @ 0x55ee413ecd80] mmco: unref short failure
 73%|███████▎  | 1414/1945 [5:07:57<1:51:51, 12.64s/it] 73%|███████▎  | 1415/1945 [5:08:03<1:32:55, 10.52s/it][h264 @ 0x55b9334fd8c0] mmco: unref short failure
[h264 @ 0x55fccc7012c0] mmco: unref short failure
[h264 @ 0x55fccc7012c0] mmco: unref short failure
[h264 @ 0x55b90c2b2340] mmco: unref short failure
[h264 @ 0x55b90c2b2340] mmco: unref short failure
[h264 @ 0x5566866f8cc0] mmco: unref short failure
[h264 @ 0x5566866f8cc0] mmco: unref short failure
[h264 @ 0x5566762f1b00] mmco: unref short failure
[h264 @ 0x556686a9c3c0] mmco: unref short failure
[h264 @ 0x556686a9c3c0] mmco: unref short failure
[h264 @ 0x55fc8d1f5e00] mmco: unref short failure
 73%|███████▎  | 1416/1945 [5:08:45<2:55:26, 19.90s/it][h264 @ 0x55fcd0d36740] mmco: unref short failure
[h264 @ 0x55fcd0d36740] mmco: unref short failure
[h264 @ 0x55fcd0d36740] mmco: unref short failure
 73%|███████▎  | 1417/1945 [5:08:54<2:26:48, 16.68s/it] 73%|███████▎  | 1418/1945 [5:09:00<1:57:46, 13.41s/it] 73%|███████▎  | 1419/1945 [5:09:05<1:36:48, 11.04s/it][h264 @ 0x55b8ea91df40] mmco: unref short failure
[h264 @ 0x55b8ea91df40] mmco: unref short failure
[h264 @ 0x55b933185240] mmco: unref short failure
[h264 @ 0x55b933185240] mmco: unref short failure
 73%|███████▎  | 1420/1945 [5:09:11<1:22:10,  9.39s/it] 73%|███████▎  | 1421/1945 [5:09:17<1:13:00,  8.36s/it][h264 @ 0x55ee3c397540] mmco: unref short failure
[h264 @ 0x55ee3c397540] mmco: unref short failure
 73%|███████▎  | 1422/1945 [5:09:35<1:38:25, 11.29s/it][h264 @ 0x556646ed7ec0] mmco: unref short failure
 73%|███████▎  | 1423/1945 [5:09:40<1:23:15,  9.57s/it][h264 @ 0x55b92a16e000] mmco: unref short failure
[h264 @ 0x55ee3faea700] mmco: unref short failure
[h264 @ 0x55fcd53acd80] mmco: unref short failure
[h264 @ 0x55b90c312500] mmco: unref short failure
[h264 @ 0x55ee2fc50180] mmco: unref short failure
[h264 @ 0x55ee2fc50180] mmco: unref short failure
 73%|███████▎  | 1424/1945 [5:10:20<2:40:59, 18.54s/it][h264 @ 0x55b930c29940] mmco: unref short failure
[h264 @ 0x55b930c29940] mmco: unref short failure
[h264 @ 0x55b92a725980] mmco: unref short failure
 73%|███████▎  | 1425/1945 [5:10:38<2:39:34, 18.41s/it][h264 @ 0x55fcdd1a2240] mmco: unref short failure
 73%|███████▎  | 1426/1945 [5:10:43<2:05:44, 14.54s/it] 73%|███████▎  | 1427/1945 [5:10:48<1:41:05, 11.71s/it] 73%|███████▎  | 1428/1945 [5:10:54<1:24:58,  9.86s/it] 73%|███████▎  | 1429/1945 [5:11:00<1:13:52,  8.59s/it][h264 @ 0x55b8eb281080] mmco: unref short failure
[h264 @ 0x55b90ace1540] mmco: unref short failure
[h264 @ 0x55b90ace1540] mmco: unref short failure
 74%|███████▎  | 1430/1945 [5:11:15<1:31:00, 10.60s/it] 74%|███████▎  | 1431/1945 [5:11:20<1:17:58,  9.10s/it][h264 @ 0x55b931f2b440] mmco: unref short failure
[h264 @ 0x55ee44330240] mmco: unref short failure
[h264 @ 0x55ee44330240] mmco: unref short failure
[h264 @ 0x55ee44944fc0] mmco: unref short failure
[h264 @ 0x55ee44944fc0] mmco: unref short failure
[h264 @ 0x55ee30405680] mmco: unref short failure
[h264 @ 0x55ee30405680] mmco: unref short failure
[h264 @ 0x55fc8d2ed840] mmco: unref short failure
[h264 @ 0x55fc8d2ed840] mmco: unref short failure
[h264 @ 0x55ee32668a00] mmco: unref short failure
[h264 @ 0x55ee3811c440] mmco: unref short failure
[h264 @ 0x55b92ab97780] mmco: unref short failure
 74%|███████▎  | 1432/1945 [5:12:00<2:34:38, 18.09s/it] 74%|███████▎  | 1433/1945 [5:12:13<2:23:17, 16.79s/it][h264 @ 0x556682cf9c40] mmco: unref short failure
[h264 @ 0x556682cf9c40] mmco: unref short failure
 74%|███████▎  | 1434/1945 [5:12:19<1:54:56, 13.50s/it][h264 @ 0x55fcd8e55280] mmco: unref short failure
[h264 @ 0x55fcd8e55280] mmco: unref short failure
 74%|███████▍  | 1435/1945 [5:12:25<1:36:25, 11.34s/it][h264 @ 0x556679e8f1c0] mmco: unref short failure
[h264 @ 0x556679e8f1c0] mmco: unref short failure
 74%|███████▍  | 1436/1945 [5:12:31<1:20:41,  9.51s/it] 74%|███████▍  | 1437/1945 [5:12:37<1:12:32,  8.57s/it][h264 @ 0x55ee414622c0] mmco: unref short failure
[h264 @ 0x55ee414622c0] mmco: unref short failure
[h264 @ 0x55fcd7e38380] mmco: unref short failure
 74%|███████▍  | 1438/1945 [5:13:01<1:52:18, 13.29s/it][h264 @ 0x55ee41462540] mmco: unref short failure
[h264 @ 0x55ee04b34a80] mmco: unref short failure
 74%|███████▍  | 1439/1945 [5:13:06<1:31:21, 10.83s/it][h264 @ 0x55ee3ca95dc0] mmco: unref short failure
[h264 @ 0x55ee3ca95dc0] mmco: unref short failure
[h264 @ 0x55ee3fbbae40] mmco: unref short failure
[h264 @ 0x55ee3fbbae40] mmco: unref short failure
[h264 @ 0x55ee3fbbae40] mmco: unref short failure
[h264 @ 0x55b8ef601f40] mmco: unref short failure
[h264 @ 0x55b8ee076bc0] mmco: unref short failure
[h264 @ 0x55b8ee076bc0] mmco: unref short failure
[h264 @ 0x55ee3dae8e00] mmco: unref short failure
[h264 @ 0x55ee3dae8e00] mmco: unref short failure
[h264 @ 0x556683c2ab40] mmco: unref short failure
[h264 @ 0x55fcdbfd8900] mmco: unref short failure
[h264 @ 0x55fcdbfd8900] mmco: unref short failure
[h264 @ 0x55ee2f99b000] mmco: unref short failure
 74%|███████▍  | 1440/1945 [5:13:40<2:28:56, 17.70s/it][h264 @ 0x556674013840] mmco: unref short failure
[h264 @ 0x556674013840] mmco: unref short failure
[h264 @ 0x556680e2fa80] mmco: unref short failure
 74%|███████▍  | 1441/1945 [5:13:53<2:17:24, 16.36s/it] 74%|███████▍  | 1442/1945 [5:13:59<1:50:19, 13.16s/it][h264 @ 0x5566763fa240] mmco: unref short failure
 74%|███████▍  | 1443/1945 [5:14:04<1:30:28, 10.81s/it] 74%|███████▍  | 1444/1945 [5:14:10<1:17:37,  9.30s/it][h264 @ 0x55fcda4eb8c0] mmco: unref short failure
[h264 @ 0x55fcda4eb8c0] mmco: unref short failure
[h264 @ 0x55fcce8f75c0] mmco: unref short failure
[h264 @ 0x55fcce8f75c0] mmco: unref short failure
[h264 @ 0x55fcce8f75c0] mmco: unref short failure
[h264 @ 0x55fcce8f75c0] mmco: unref short failure
[h264 @ 0x55ee3e08e540] mmco: unref short failure
[h264 @ 0x556679c9fc40] mmco: unref short failure
 74%|███████▍  | 1445/1945 [5:14:20<1:19:46,  9.57s/it][h264 @ 0x55ee2f99b480] mmco: unref short failure
[h264 @ 0x55fcd7153240] mmco: unref short failure
[h264 @ 0x55fcd7153240] mmco: unref short failure
[h264 @ 0x5566760b7f40] mmco: unref short failure
 74%|███████▍  | 1446/1945 [5:14:38<1:39:15, 11.93s/it][h264 @ 0x55ee40eae100] mmco: unref short failure
 74%|███████▍  | 1447/1945 [5:14:45<1:26:32, 10.43s/it][h264 @ 0x5566771647c0] mmco: unref short failure
[h264 @ 0x5566771647c0] mmco: unref short failure
[h264 @ 0x55b8ea4c2380] mmco: unref short failure
[h264 @ 0x55b90b8a5940] mmco: unref short failure
[h264 @ 0x55b933d88f00] mmco: unref short failure
[h264 @ 0x55b933d88f00] mmco: unref short failure
[h264 @ 0x55b90c562600] mmco: unref short failure
[h264 @ 0x5566740af000] mmco: unref short failure
[h264 @ 0x5566740af000] mmco: unref short failure
[h264 @ 0x5566792b1100] mmco: unref short failure
[h264 @ 0x5566792b1100] mmco: unref short failure
 74%|███████▍  | 1448/1945 [5:15:21<2:29:35, 18.06s/it] 74%|███████▍  | 1449/1945 [5:15:30<2:06:31, 15.31s/it]09/07/2024 16:59:29 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.2308907508850098, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.040756914764642715, 'loss_ret%tv%ta--finetune_area/loss_area': 2.5051157474517822, 'loss_ret%tv%ta--finetune_area/total_loss': 5.776763439178467}
[h264 @ 0x556678d488c0] mmco: unref short failure
 75%|███████▍  | 1450/1945 [5:15:35<1:42:08, 12.38s/it][h264 @ 0x55b8ed135280] mmco: unref short failure
 75%|███████▍  | 1451/1945 [5:15:41<1:26:33, 10.51s/it][h264 @ 0x55fcdf5ac400] mmco: unref short failure
 75%|███████▍  | 1452/1945 [5:15:46<1:13:24,  8.93s/it][h264 @ 0x55fcdb6ddd40] mmco: unref short failure
 75%|███████▍  | 1453/1945 [5:15:58<1:18:30,  9.57s/it][h264 @ 0x556647db2580] mmco: unref short failure
[h264 @ 0x556647db2580] mmco: unref short failure
[h264 @ 0x55b90a916dc0] mmco: unref short failure
[h264 @ 0x556679e7bc00] mmco: unref short failure
[h264 @ 0x556679e7bc00] mmco: unref short failure
[h264 @ 0x55b92e87c040] mmco: unref short failure
 75%|███████▍  | 1454/1945 [5:16:17<1:42:56, 12.58s/it][h264 @ 0x55b933d88f00] mmco: unref short failure
 75%|███████▍  | 1455/1945 [5:16:26<1:34:52, 11.62s/it][h264 @ 0x55ee03f15040] mmco: unref short failure
[h264 @ 0x55ee03f15040] mmco: unref short failure
 75%|███████▍  | 1456/1945 [5:16:58<2:23:39, 17.63s/it][h264 @ 0x55b92d78c740] mmco: unref short failure
[h264 @ 0x55ee440269c0] mmco: unref short failure
 75%|███████▍  | 1457/1945 [5:17:15<2:21:03, 17.34s/it][h264 @ 0x55ee3c64e540] mmco: unref short failure
[h264 @ 0x55ee3c64e540] mmco: unref short failure
 75%|███████▍  | 1458/1945 [5:17:20<1:52:13, 13.83s/it] 75%|███████▌  | 1459/1945 [5:17:26<1:31:35, 11.31s/it][h264 @ 0x556682accc40] mmco: unref short failure
[h264 @ 0x556682accc40] mmco: unref short failure
 75%|███████▌  | 1460/1945 [5:17:33<1:20:43,  9.99s/it][h264 @ 0x55b9308a8b40] mmco: unref short failure
 75%|███████▌  | 1461/1945 [5:17:41<1:16:26,  9.48s/it][h264 @ 0x5566884b5700] mmco: unref short failure
[h264 @ 0x5566884b5700] mmco: unref short failure
[h264 @ 0x55ee3b2d5500] mmco: unref short failure
[h264 @ 0x55ee3b2d5500] mmco: unref short failure
 75%|███████▌  | 1462/1945 [5:18:00<1:38:31, 12.24s/it][h264 @ 0x55fcda547a00] mmco: unref short failure
 75%|███████▌  | 1463/1945 [5:18:06<1:24:34, 10.53s/it][h264 @ 0x556689e8ecc0] mmco: unref short failure
[h264 @ 0x55b933d9c440] mmco: unref short failure
[h264 @ 0x55667f4aae00] mmco: unref short failure
[h264 @ 0x55667f4aae00] mmco: unref short failure
[h264 @ 0x55ee380777c0] mmco: unref short failure
[h264 @ 0x55ee380777c0] mmco: unref short failure
[h264 @ 0x55b8ef4a1280] mmco: unref short failure
[h264 @ 0x55b8ef4a1280] mmco: unref short failure
[h264 @ 0x5566832f1400] mmco: unref short failure
[h264 @ 0x55ee3b2d5500] mmco: unref short failure
[h264 @ 0x55ee3b2d5500] mmco: unref short failure
 75%|███████▌  | 1464/1945 [5:18:39<2:18:22, 17.26s/it][h264 @ 0x55fcd7a68a40] mmco: unref short failure
[h264 @ 0x55fcd7a68a40] mmco: unref short failure
 75%|███████▌  | 1465/1945 [5:18:54<2:11:48, 16.48s/it] 75%|███████▌  | 1466/1945 [5:19:00<1:46:29, 13.34s/it][h264 @ 0x55ee30ce2140] mmco: unref short failure
 75%|███████▌  | 1467/1945 [5:19:06<1:30:01, 11.30s/it] 75%|███████▌  | 1468/1945 [5:19:12<1:16:31,  9.63s/it][h264 @ 0x55b8f13c52c0] mmco: unref short failure
[h264 @ 0x55b8f13c52c0] mmco: unref short failure
 76%|███████▌  | 1469/1945 [5:19:18<1:08:16,  8.61s/it][h264 @ 0x55b8ee31fc80] mmco: unref short failure
[h264 @ 0x55b8ee31fc80] mmco: unref short failure
 76%|███████▌  | 1470/1945 [5:19:32<1:19:35, 10.05s/it][h264 @ 0x55b932c08440] mmco: unref short failure
[h264 @ 0x55b932c08440] mmco: unref short failure
[h264 @ 0x55ee41355680] mmco: unref short failure
[h264 @ 0x55ee41355680] mmco: unref short failure
[h264 @ 0x55b92d78c740] mmco: unref short failure
 76%|███████▌  | 1471/1945 [5:19:52<1:42:33, 12.98s/it][h264 @ 0x55ee37e7bb80] mmco: unref short failure
 76%|███████▌  | 1472/1945 [5:20:20<2:19:06, 17.65s/it][h264 @ 0x55ee38b70880] mmco: unref short failure
 76%|███████▌  | 1473/1945 [5:20:36<2:14:01, 17.04s/it][h264 @ 0x55ee3a801a00] mmco: unref short failure
 76%|███████▌  | 1474/1945 [5:20:41<1:46:24, 13.55s/it][h264 @ 0x55fce1f4fd80] mmco: unref short failure
[h264 @ 0x55b9326f4740] mmco: unref short failure
[h264 @ 0x55b9326f4740] mmco: unref short failure
 76%|███████▌  | 1475/1945 [5:20:48<1:29:53, 11.48s/it][h264 @ 0x556647adfb40] mmco: unref short failure
 76%|███████▌  | 1476/1945 [5:20:54<1:16:12,  9.75s/it] 76%|███████▌  | 1477/1945 [5:20:59<1:06:01,  8.46s/it][h264 @ 0x55fccc5858c0] mmco: unref short failure
[h264 @ 0x55fccc5858c0] mmco: unref short failure
 76%|███████▌  | 1478/1945 [5:21:11<1:14:37,  9.59s/it][h264 @ 0x55b936ed7dc0] mmco: unref short failure
[h264 @ 0x55b9359fa400] mmco: unref short failure
[h264 @ 0x55b9359fa400] mmco: unref short failure
[h264 @ 0x55668655b480] mmco: unref short failure
 76%|███████▌  | 1479/1945 [5:21:30<1:34:38, 12.18s/it][h264 @ 0x55ee37edba40] mmco: unref short failure
[h264 @ 0x556688e5ebc0] mmco: unref short failure
[h264 @ 0x556688e5ebc0] mmco: unref short failure
[h264 @ 0x55ee4478dd80] mmco: unref short failure
[h264 @ 0x55ee4478dd80] mmco: unref short failure
[h264 @ 0x55ee4478dd80] mmco: unref short failure
[h264 @ 0x55ee4478dd80] mmco: unref short failure
[h264 @ 0x55ee4478dd80] mmco: unref short failure
[h264 @ 0x55ee4478dd80] mmco: unref short failure
[h264 @ 0x55667d10f780] mmco: unref short failure
[h264 @ 0x55667d10f780] mmco: unref short failure
[h264 @ 0x55667d10f780] mmco: unref short failure
[h264 @ 0x55667d10f780] mmco: unref short failure
 76%|███████▌  | 1480/1945 [5:22:02<2:20:38, 18.15s/it][h264 @ 0x55ee428fa340] mmco: unref short failure
[h264 @ 0x55ee428fa340] mmco: unref short failure
[h264 @ 0x55ee428fa340] mmco: unref short failure
[h264 @ 0x55ee428fa340] mmco: unref short failure
 76%|███████▌  | 1481/1945 [5:22:14<2:07:29, 16.49s/it] 76%|███████▌  | 1482/1945 [5:22:20<1:41:30, 13.15s/it][h264 @ 0x55ee3c3224c0] mmco: unref short failure
[h264 @ 0x55ee3c3224c0] mmco: unref short failure
[h264 @ 0x55fcde7affc0] mmco: unref short failure
[h264 @ 0x55fcde7affc0] mmco: unref short failure
 76%|███████▌  | 1483/1945 [5:22:25<1:23:05, 10.79s/it] 76%|███████▋  | 1484/1945 [5:22:30<1:11:03,  9.25s/it][h264 @ 0x556681eeb780] mmco: unref short failure
 76%|███████▋  | 1485/1945 [5:22:37<1:04:56,  8.47s/it][h264 @ 0x55fcde161ec0] mmco: unref short failure
[h264 @ 0x55fcde161ec0] mmco: unref short failure
[h264 @ 0x55668655b480] mmco: unref short failure
[h264 @ 0x55b8edf69640] mmco: unref short failure
 76%|███████▋  | 1486/1945 [5:22:55<1:25:58, 11.24s/it][h264 @ 0x55ee0415e540] mmco: unref short failure
[h264 @ 0x55ee0415e540] mmco: unref short failure
[h264 @ 0x55ee37f70500] mmco: unref short failure
[h264 @ 0x55ee37f70500] mmco: unref short failure
[h264 @ 0x55ee37f70500] mmco: unref short failure
 76%|███████▋  | 1487/1945 [5:23:08<1:29:55, 11.78s/it][h264 @ 0x55b933ed11c0] mmco: unref short failure
[h264 @ 0x55b92b8c68c0] mmco: unref short failure
[h264 @ 0x55ee31c9df80] mmco: unref short failure
[h264 @ 0x55ee31c9df80] mmco: unref short failure
[h264 @ 0x55fcd9cc4c00] mmco: unref short failure
[h264 @ 0x55fcd9cc4c00] mmco: unref short failure
[h264 @ 0x55ee32544d40] mmco: unref short failure
[h264 @ 0x55667725c640] mmco: unref short failure
[h264 @ 0x556676ea5180] mmco: unref short failure
[h264 @ 0x556676ea5180] mmco: unref short failure
 77%|███████▋  | 1488/1945 [5:23:42<2:19:41, 18.34s/it][h264 @ 0x55ee03a46d80] mmco: unref short failure
[h264 @ 0x55ee03a46d80] mmco: unref short failure
[h264 @ 0x55fcde6dafc0] mmco: unref short failure
[h264 @ 0x55fcde6dafc0] mmco: unref short failure
[h264 @ 0x556675abe000] mmco: unref short failure
[h264 @ 0x556675abe000] mmco: unref short failure
[h264 @ 0x556675abe000] mmco: unref short failure
[h264 @ 0x556675abe000] mmco: unref short failure
[h264 @ 0x556675abe000] mmco: unref short failure
 77%|███████▋  | 1489/1945 [5:23:58<2:15:06, 17.78s/it][h264 @ 0x556680ee3f00] mmco: unref short failure
 77%|███████▋  | 1490/1945 [5:24:03<1:46:53, 14.10s/it][h264 @ 0x556675ab7700] mmco: unref short failure
[h264 @ 0x556675ab7700] mmco: unref short failure
[h264 @ 0x55ee34c44900] mmco: unref short failure
[h264 @ 0x55ee34c44900] mmco: unref short failure
 77%|███████▋  | 1491/1945 [5:24:09<1:27:42, 11.59s/it][h264 @ 0x556674823180] mmco: unref short failure
[h264 @ 0x55b92c194e80] mmco: unref short failure
[h264 @ 0x55b92c194e80] mmco: unref short failure
[h264 @ 0x55b92c194e80] mmco: unref short failure
[h264 @ 0x55b9294ec600] mmco: unref short failure
[h264 @ 0x55b9294ec600] mmco: unref short failure
 77%|███████▋  | 1492/1945 [5:24:15<1:15:06,  9.95s/it][h264 @ 0x5566743f5a40] mmco: unref short failure
[h264 @ 0x5566743f5a40] mmco: unref short failure
 77%|███████▋  | 1493/1945 [5:24:21<1:04:27,  8.56s/it][h264 @ 0x556673672c00] mmco: unref short failure
[h264 @ 0x55fcdb7b4ac0] mmco: unref short failure
[h264 @ 0x55fcdb7b4ac0] mmco: unref short failure
[h264 @ 0x55fcdb7b4ac0] mmco: unref short failure
[h264 @ 0x55fcdb7b4ac0] mmco: unref short failure
[h264 @ 0x55ee3d07c7c0] mmco: unref short failure
[h264 @ 0x55fcdc645540] mmco: unref short failure
[h264 @ 0x55fcdc645540] mmco: unref short failure
[h264 @ 0x55b934d816c0] mmco: unref short failure
[h264 @ 0x55667f7e6200] mmco: unref short failure
[h264 @ 0x55667f7e6200] mmco: unref short failure
[h264 @ 0x55b92b8c68c0] mmco: unref short failure
 77%|███████▋  | 1494/1945 [5:24:38<1:25:00, 11.31s/it] 77%|███████▋  | 1495/1945 [5:24:46<1:16:13, 10.16s/it][h264 @ 0x55b930ddeac0] mmco: unref short failure
[h264 @ 0x5566861ab380] mmco: unref short failure
[h264 @ 0x5566861ab380] mmco: unref short failure
[h264 @ 0x55fccac70d80] mmco: unref short failure
[h264 @ 0x55fccac70d80] mmco: unref short failure
[h264 @ 0x55ee31e87700] mmco: unref short failure
 77%|███████▋  | 1496/1945 [5:25:21<2:11:19, 17.55s/it][h264 @ 0x55ee39bfe740] mmco: unref short failure
[h264 @ 0x55ee39bfe740] mmco: unref short failure
 77%|███████▋  | 1497/1945 [5:25:35<2:04:47, 16.71s/it] 77%|███████▋  | 1498/1945 [5:25:42<1:41:22, 13.61s/it] 77%|███████▋  | 1499/1945 [5:25:47<1:23:24, 11.22s/it]09/07/2024 17:09:45 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/07/2024 17:09:45 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556679ad2f40] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556673b75f40] mmco: unref short failure
[h264 @ 0x556673b75f40] mmco: unref short failure
[h264 @ 0x55ee03e85640] mmco: unref short failure
[h264 @ 0x55ee03e85640] mmco: unref short failure
[h264 @ 0x55fcde0f4dc0] mmco: unref short failure
[h264 @ 0x55fce0f65400] mmco: unref short failure
[h264 @ 0x55fcd129e0c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556679ad3140] mmco: unref short failure
[h264 @ 0x556679ad3140] mmco: unref short failure
[h264 @ 0x556679ad3140] mmco: unref short failure
[h264 @ 0x556679ad3140] mmco: unref short failure
[h264 @ 0x556679ad3140] mmco: unref short failure
[h264 @ 0x556679ad3140] mmco: unref short failure
[h264 @ 0x55fc8cb5b000] mmco: unref short failure
[h264 @ 0x55ee3fa56440] mmco: unref short failure
[h264 @ 0x55fcd9978f00] mmco: unref short failure
[h264 @ 0x55fccf0cfe40] mmco: unref short failure
[h264 @ 0x556680920380] mmco: unref short failure
[h264 @ 0x556680920380] mmco: unref short failure
[h264 @ 0x55fcd2e58440] mmco: unref short failure
[h264 @ 0x55fcd2e58440] mmco: unref short failure
[h264 @ 0x55b934d816c0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:07,  3.24it/s][A[h264 @ 0x55ee386fce00] mmco: unref short failure

  1%|          | 2/221 [00:00<00:44,  4.90it/s][A
  1%|▏         | 3/221 [00:01<01:27,  2.50it/s][A
  2%|▏         | 4/221 [00:01<01:06,  3.28it/s][A
  3%|▎         | 6/221 [00:01<00:41,  5.14it/s][A
  3%|▎         | 7/221 [00:01<00:37,  5.71it/s][A
  4%|▎         | 8/221 [00:01<00:36,  5.84it/s][A
  4%|▍         | 9/221 [00:01<00:35,  6.01it/s][A
  5%|▍         | 10/221 [00:02<00:37,  5.68it/s][A[h264 @ 0x55fcd1c4bc40] mmco: unref short failure

  5%|▌         | 12/221 [00:02<00:58,  3.59it/s][A
  6%|▌         | 13/221 [00:03<00:53,  3.86it/s][A
  6%|▋         | 14/221 [00:03<00:50,  4.07it/s][A
  7%|▋         | 15/221 [00:03<00:44,  4.62it/s][A
  7%|▋         | 16/221 [00:03<00:42,  4.83it/s][A
  8%|▊         | 17/221 [00:04<01:13,  2.79it/s][A
  8%|▊         | 18/221 [00:04<01:06,  3.07it/s][A
  9%|▊         | 19/221 [00:04<00:58,  3.43it/s][A
 10%|▉         | 21/221 [00:04<00:40,  4.93it/s][A
 10%|▉         | 22/221 [00:05<00:42,  4.69it/s][A
 11%|█         | 24/221 [00:05<00:31,  6.31it/s][A[h264 @ 0x55668761a040] mmco: unref short failure

 11%|█▏        | 25/221 [00:05<00:29,  6.69it/s][A
 12%|█▏        | 26/221 [00:05<00:32,  5.94it/s][A
 13%|█▎        | 28/221 [00:06<00:38,  4.99it/s][A
 13%|█▎        | 29/221 [00:06<00:36,  5.25it/s][A
 14%|█▎        | 30/221 [00:06<00:33,  5.72it/s][A
 14%|█▍        | 31/221 [00:06<00:39,  4.76it/s][A
 14%|█▍        | 32/221 [00:06<00:34,  5.53it/s][A
 15%|█▍        | 33/221 [00:07<00:32,  5.79it/s][A
 16%|█▌        | 35/221 [00:07<00:27,  6.81it/s][A
 16%|█▋        | 36/221 [00:07<00:31,  5.89it/s][A
 17%|█▋        | 37/221 [00:07<00:41,  4.40it/s][A
 17%|█▋        | 38/221 [00:08<01:12,  2.52it/s][A
 18%|█▊        | 40/221 [00:09<00:55,  3.24it/s][A
 19%|█▉        | 42/221 [00:10<01:07,  2.66it/s][A
 20%|█▉        | 44/221 [00:10<00:48,  3.68it/s][A
 20%|██        | 45/221 [00:11<01:37,  1.81it/s][A
 21%|██        | 46/221 [00:12<01:29,  1.96it/s][A
 21%|██▏       | 47/221 [00:13<02:06,  1.37it/s][A
 22%|██▏       | 48/221 [00:13<01:40,  1.72it/s][A
 22%|██▏       | 49/221 [00:14<01:25,  2.02it/s][A
 23%|██▎       | 50/221 [00:14<01:08,  2.49it/s][A
 24%|██▎       | 52/221 [00:14<00:44,  3.81it/s][A
 24%|██▍       | 53/221 [00:14<00:42,  3.95it/s][A
 24%|██▍       | 54/221 [00:15<01:02,  2.69it/s][A
 25%|██▍       | 55/221 [00:16<01:10,  2.35it/s][A
 25%|██▌       | 56/221 [00:16<00:56,  2.90it/s][A
 26%|██▌       | 58/221 [00:16<00:37,  4.32it/s][A
 27%|██▋       | 59/221 [00:16<00:32,  4.92it/s][A
 27%|██▋       | 60/221 [00:17<01:00,  2.65it/s][A
 28%|██▊       | 61/221 [00:17<00:52,  3.05it/s][A
 28%|██▊       | 62/221 [00:17<00:45,  3.48it/s][A
 29%|██▊       | 63/221 [00:17<00:39,  3.98it/s][A
 29%|██▉       | 64/221 [00:18<00:44,  3.51it/s][A
 29%|██▉       | 65/221 [00:18<00:38,  4.09it/s][A
 30%|██▉       | 66/221 [00:19<01:19,  1.95it/s][A
 30%|███       | 67/221 [00:19<01:06,  2.33it/s][A
 31%|███       | 68/221 [00:20<00:56,  2.69it/s][A
 31%|███       | 69/221 [00:20<01:24,  1.80it/s][A
 32%|███▏      | 70/221 [00:21<01:04,  2.33it/s][A[h264 @ 0x55fcd809c780] mmco: unref short failure
[h264 @ 0x55fcd809c780] mmco: unref short failure
[h264 @ 0x55fcd809c780] mmco: unref short failure
[h264 @ 0x55fcd809c780] mmco: unref short failure

 32%|███▏      | 71/221 [00:21<01:00,  2.49it/s][A
 33%|███▎      | 72/221 [00:21<00:55,  2.70it/s][A
 33%|███▎      | 73/221 [00:22<01:01,  2.42it/s][A
 33%|███▎      | 74/221 [00:22<00:48,  3.02it/s][A
 34%|███▍      | 75/221 [00:22<00:47,  3.07it/s][A
 35%|███▍      | 77/221 [00:23<00:57,  2.52it/s][A
 36%|███▌      | 79/221 [00:24<00:45,  3.14it/s][A
 36%|███▌      | 80/221 [00:24<00:38,  3.70it/s][A
 37%|███▋      | 81/221 [00:24<00:44,  3.16it/s][A
 37%|███▋      | 82/221 [00:25<00:58,  2.39it/s][A
 38%|███▊      | 83/221 [00:25<00:50,  2.73it/s][A
 38%|███▊      | 85/221 [00:25<00:33,  4.06it/s][A
 39%|███▉      | 86/221 [00:25<00:29,  4.65it/s][A
 39%|███▉      | 87/221 [00:26<00:47,  2.80it/s][A
 40%|███▉      | 88/221 [00:27<00:55,  2.40it/s][A
 40%|████      | 89/221 [00:27<00:58,  2.27it/s][A
 41%|████      | 90/221 [00:28<00:54,  2.41it/s][A
 41%|████      | 91/221 [00:28<00:44,  2.92it/s][A
 42%|████▏     | 92/221 [00:28<00:35,  3.59it/s][A
 42%|████▏     | 93/221 [00:28<00:37,  3.38it/s][A
 43%|████▎     | 94/221 [00:28<00:34,  3.71it/s][A
 43%|████▎     | 96/221 [00:29<00:37,  3.31it/s][A
 44%|████▍     | 97/221 [00:29<00:32,  3.81it/s][A
 44%|████▍     | 98/221 [00:30<00:39,  3.11it/s][A
 45%|████▍     | 99/221 [00:30<00:31,  3.82it/s][A
 46%|████▌     | 101/221 [00:30<00:23,  5.03it/s][A
 46%|████▌     | 102/221 [00:31<00:35,  3.37it/s][A
 47%|████▋     | 104/221 [00:31<00:25,  4.55it/s][A
 48%|████▊     | 105/221 [00:31<00:26,  4.44it/s][A
 48%|████▊     | 106/221 [00:32<00:32,  3.51it/s][A
 49%|████▉     | 108/221 [00:32<00:23,  4.89it/s][A
 49%|████▉     | 109/221 [00:32<00:21,  5.24it/s][A
 50%|█████     | 111/221 [00:32<00:23,  4.75it/s][A
 51%|█████     | 112/221 [00:33<00:21,  5.08it/s][A
 51%|█████     | 113/221 [00:33<00:26,  4.15it/s][A
 52%|█████▏    | 115/221 [00:33<00:18,  5.87it/s][A
 52%|█████▏    | 116/221 [00:34<00:30,  3.41it/s][A
 53%|█████▎    | 117/221 [00:34<00:33,  3.15it/s][A
 53%|█████▎    | 118/221 [00:34<00:27,  3.81it/s][A
 54%|█████▍    | 119/221 [00:34<00:24,  4.22it/s][A
 54%|█████▍    | 120/221 [00:35<00:21,  4.61it/s][A
 55%|█████▌    | 122/221 [00:35<00:14,  6.93it/s][A
 56%|█████▌    | 124/221 [00:35<00:16,  5.75it/s][A
 57%|█████▋    | 125/221 [00:36<00:36,  2.62it/s][A
 57%|█████▋    | 126/221 [00:37<00:34,  2.72it/s][A
 57%|█████▋    | 127/221 [00:38<01:01,  1.53it/s][A
 58%|█████▊    | 128/221 [00:38<00:52,  1.77it/s][A
 58%|█████▊    | 129/221 [00:39<00:41,  2.20it/s][A
 59%|█████▉    | 131/221 [00:39<00:26,  3.41it/s][A
 60%|█████▉    | 132/221 [00:40<00:40,  2.21it/s][A
 60%|██████    | 133/221 [00:40<00:36,  2.39it/s][A
 61%|██████    | 134/221 [00:42<01:00,  1.45it/s][A
 61%|██████    | 135/221 [00:42<00:49,  1.75it/s][A
 62%|██████▏   | 136/221 [00:42<00:43,  1.96it/s][A
 62%|██████▏   | 137/221 [00:43<00:41,  2.00it/s][A
 62%|██████▏   | 138/221 [00:44<01:14,  1.12it/s][A
 63%|██████▎   | 139/221 [00:45<01:14,  1.10it/s][A
 63%|██████▎   | 140/221 [00:46<01:06,  1.22it/s][A
 64%|██████▍   | 141/221 [00:46<00:57,  1.39it/s][A
 64%|██████▍   | 142/221 [00:47<00:48,  1.62it/s][A
 65%|██████▍   | 143/221 [00:47<00:48,  1.60it/s][A
 65%|██████▌   | 144/221 [00:48<00:37,  2.06it/s][A
 66%|██████▌   | 146/221 [00:48<00:21,  3.44it/s][A
 67%|██████▋   | 147/221 [00:48<00:18,  4.10it/s][A
 67%|██████▋   | 149/221 [00:48<00:12,  5.57it/s][A
 68%|██████▊   | 150/221 [00:48<00:11,  6.12it/s][A
 68%|██████▊   | 151/221 [00:49<00:17,  4.10it/s][A
 69%|██████▉   | 152/221 [00:49<00:18,  3.75it/s][A
 69%|██████▉   | 153/221 [00:49<00:16,  4.01it/s][A
 70%|██████▉   | 154/221 [00:49<00:15,  4.46it/s][A
 70%|███████   | 155/221 [00:50<00:14,  4.54it/s][A
 71%|███████   | 156/221 [00:50<00:14,  4.43it/s][A
 71%|███████   | 157/221 [00:52<00:48,  1.33it/s][A
 71%|███████▏  | 158/221 [00:52<00:37,  1.68it/s][A
 72%|███████▏  | 159/221 [00:52<00:31,  1.98it/s][A
 73%|███████▎  | 161/221 [00:53<00:18,  3.19it/s][A
 73%|███████▎  | 162/221 [00:53<00:16,  3.60it/s][A
 74%|███████▍  | 163/221 [00:53<00:14,  3.99it/s][A
 74%|███████▍  | 164/221 [00:53<00:15,  3.72it/s][A
 75%|███████▍  | 165/221 [00:53<00:15,  3.59it/s][A
 75%|███████▌  | 166/221 [00:54<00:19,  2.84it/s][A
 76%|███████▌  | 168/221 [00:57<00:44,  1.20it/s][A
 77%|███████▋  | 170/221 [00:57<00:29,  1.76it/s][A
 77%|███████▋  | 171/221 [00:58<00:30,  1.63it/s][A
 78%|███████▊  | 172/221 [00:58<00:24,  1.99it/s][A
 78%|███████▊  | 173/221 [00:58<00:21,  2.20it/s][A
 79%|███████▉  | 175/221 [00:59<00:14,  3.17it/s][A
 80%|███████▉  | 176/221 [00:59<00:13,  3.25it/s][A
 80%|████████  | 177/221 [00:59<00:12,  3.66it/s][A
 81%|████████  | 178/221 [00:59<00:10,  4.06it/s][A
 81%|████████  | 179/221 [01:01<00:22,  1.85it/s][A
 82%|████████▏ | 181/221 [01:01<00:13,  2.98it/s][A
 82%|████████▏ | 182/221 [01:01<00:13,  2.90it/s][A
 83%|████████▎ | 183/221 [01:01<00:11,  3.19it/s][A
 83%|████████▎ | 184/221 [01:02<00:11,  3.19it/s][A
 84%|████████▍ | 186/221 [01:02<00:10,  3.50it/s][A
 85%|████████▍ | 187/221 [01:02<00:09,  3.74it/s][A
 85%|████████▌ | 188/221 [01:02<00:07,  4.31it/s][A
 86%|████████▌ | 189/221 [01:03<00:06,  4.61it/s][A
 86%|████████▌ | 190/221 [01:03<00:07,  4.16it/s][A
 87%|████████▋ | 192/221 [01:03<00:06,  4.20it/s][A
 88%|████████▊ | 194/221 [01:04<00:07,  3.54it/s][A
 89%|████████▊ | 196/221 [01:04<00:05,  4.84it/s][A
 89%|████████▉ | 197/221 [01:04<00:04,  5.38it/s][A
 90%|████████▉ | 198/221 [01:04<00:03,  5.96it/s][A
 90%|█████████ | 200/221 [01:05<00:03,  6.76it/s][A
 91%|█████████ | 201/221 [01:05<00:02,  6.94it/s][A
 92%|█████████▏| 203/221 [01:05<00:02,  7.66it/s][A
 93%|█████████▎| 205/221 [01:05<00:01,  9.11it/s][A
 94%|█████████▎| 207/221 [01:06<00:02,  5.68it/s][A
 94%|█████████▍| 208/221 [01:06<00:02,  5.62it/s][A
 95%|█████████▍| 209/221 [01:06<00:02,  5.09it/s][A
 95%|█████████▌| 211/221 [01:07<00:02,  4.71it/s][A
 96%|█████████▌| 212/221 [01:07<00:01,  4.53it/s][A
 96%|█████████▋| 213/221 [01:07<00:01,  5.01it/s][A
 97%|█████████▋| 214/221 [01:08<00:02,  2.46it/s][A
 97%|█████████▋| 215/221 [01:08<00:02,  2.88it/s][A
 98%|█████████▊| 216/221 [01:09<00:01,  3.16it/s][A
 98%|█████████▊| 217/221 [01:10<00:02,  1.60it/s][A
 99%|█████████▊| 218/221 [01:10<00:01,  1.96it/s][A
 99%|█████████▉| 219/221 [01:10<00:00,  2.50it/s][A
100%|█████████▉| 220/221 [01:11<00:00,  1.78it/s][A
100%|██████████| 221/221 [01:11<00:00,  2.35it/s][A100%|██████████| 221/221 [01:11<00:00,  3.07it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.79it/s][A
  1%|          | 2/221 [00:00<00:57,  3.79it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.79it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.79it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.79it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.79it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.79it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.79it/s][A
  4%|▍         | 9/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.79it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.79it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.79it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.79it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.79it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 125/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.79it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.79it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.79it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.79it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.79it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.79it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.79it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.79it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.79it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.79it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.79it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.79it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.79it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.79it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.79it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.79it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 159/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.79it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.79it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.79it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.79it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.79it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.79it/s][A
 76%|███████▌  | 168/221 [00:44<00:13,  3.79it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.79it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.79it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.78it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.78it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.78it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 178/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.79it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.79it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.79it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.79it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.79it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.79it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.79it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.79it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.79it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.79it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.79it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.79it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.79it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.79it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.79it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.79it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.79it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.79it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.79it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.79it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.79it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.79it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▌| 212/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.79it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.79it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.79it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.79it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.79it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.79it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.79it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.79it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.79it/s][A100%|██████████| 221/221 [00:58<00:00,  3.79it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:22,  9.83it/s][A
  1%|          | 2/221 [00:00<00:29,  7.42it/s][A
  1%|▏         | 3/221 [00:00<00:34,  6.26it/s][A
  2%|▏         | 4/221 [00:00<00:32,  6.67it/s][A
  2%|▏         | 5/221 [00:00<00:29,  7.38it/s][A
  3%|▎         | 7/221 [00:01<00:32,  6.50it/s][A
  4%|▎         | 8/221 [00:01<00:33,  6.30it/s][A
  4%|▍         | 9/221 [00:01<00:34,  6.13it/s][A
  5%|▍         | 10/221 [00:01<00:57,  3.68it/s][A
  5%|▍         | 11/221 [00:02<00:51,  4.10it/s][A
  5%|▌         | 12/221 [00:02<00:45,  4.62it/s][A
  6%|▌         | 13/221 [00:02<00:58,  3.56it/s][A
  6%|▋         | 14/221 [00:02<00:48,  4.29it/s][A
  7%|▋         | 15/221 [00:03<00:45,  4.55it/s][A
  7%|▋         | 16/221 [00:03<00:49,  4.15it/s][A
  8%|▊         | 17/221 [00:04<01:19,  2.56it/s][A
  8%|▊         | 18/221 [00:04<01:05,  3.10it/s][A
  9%|▊         | 19/221 [00:04<00:58,  3.43it/s][A
  9%|▉         | 20/221 [00:04<00:50,  4.02it/s][A
 10%|▉         | 21/221 [00:04<00:44,  4.51it/s][A
 10%|▉         | 22/221 [00:04<00:44,  4.44it/s][A
 11%|█         | 24/221 [00:05<00:32,  5.98it/s][A
 11%|█▏        | 25/221 [00:05<00:35,  5.49it/s][A
 12%|█▏        | 26/221 [00:05<00:39,  4.98it/s][A
 12%|█▏        | 27/221 [00:05<00:40,  4.78it/s][A
 13%|█▎        | 28/221 [00:06<00:45,  4.29it/s][A
 13%|█▎        | 29/221 [00:06<00:54,  3.54it/s][A
 14%|█▎        | 30/221 [00:06<00:59,  3.22it/s][A
 14%|█▍        | 31/221 [00:07<00:53,  3.58it/s][A
 15%|█▍        | 33/221 [00:07<00:40,  4.69it/s][A
 15%|█▌        | 34/221 [00:07<00:35,  5.22it/s][A
 16%|█▌        | 35/221 [00:07<00:39,  4.75it/s][A
 16%|█▋        | 36/221 [00:08<00:45,  4.06it/s][A
 17%|█▋        | 37/221 [00:08<00:41,  4.48it/s][A
 17%|█▋        | 38/221 [00:08<00:46,  3.95it/s][A
 18%|█▊        | 39/221 [00:08<00:41,  4.34it/s][A
 18%|█▊        | 40/221 [00:09<00:56,  3.20it/s][A
 19%|█▊        | 41/221 [00:09<00:48,  3.69it/s][A
 19%|█▉        | 42/221 [00:09<00:42,  4.19it/s][A
 19%|█▉        | 43/221 [00:09<00:36,  4.89it/s][A
 20%|█▉        | 44/221 [00:09<00:31,  5.60it/s][A
 20%|██        | 45/221 [00:10<00:37,  4.74it/s][A
 21%|██        | 46/221 [00:10<00:36,  4.77it/s][A
 21%|██▏       | 47/221 [00:10<00:35,  4.91it/s][A
 22%|██▏       | 48/221 [00:10<00:31,  5.57it/s][A
 22%|██▏       | 49/221 [00:10<00:32,  5.36it/s][A
 23%|██▎       | 50/221 [00:11<00:38,  4.43it/s][A
 23%|██▎       | 51/221 [00:11<00:35,  4.77it/s][A
 24%|██▎       | 52/221 [00:11<00:40,  4.18it/s][A
 24%|██▍       | 53/221 [00:11<00:34,  4.93it/s][A
 24%|██▍       | 54/221 [00:12<00:48,  3.47it/s][A
 25%|██▍       | 55/221 [00:12<00:45,  3.62it/s][A
 25%|██▌       | 56/221 [00:12<00:37,  4.37it/s][A
 26%|██▌       | 57/221 [00:12<00:36,  4.55it/s][A
 26%|██▌       | 58/221 [00:13<00:38,  4.19it/s][A
 27%|██▋       | 59/221 [00:13<00:35,  4.57it/s][A
 27%|██▋       | 60/221 [00:13<00:40,  4.02it/s][A
 28%|██▊       | 61/221 [00:13<00:35,  4.54it/s][A
 28%|██▊       | 62/221 [00:13<00:33,  4.80it/s][A
 29%|██▊       | 63/221 [00:14<00:40,  3.94it/s][A
 29%|██▉       | 64/221 [00:14<00:54,  2.85it/s][A
 29%|██▉       | 65/221 [00:15<00:45,  3.43it/s][A
 30%|██▉       | 66/221 [00:15<00:56,  2.74it/s][A
 30%|███       | 67/221 [00:16<00:58,  2.63it/s][A
 31%|███       | 68/221 [00:16<00:49,  3.10it/s][A
 31%|███       | 69/221 [00:17<01:21,  1.88it/s][A
 32%|███▏      | 70/221 [00:17<01:04,  2.35it/s][A
 32%|███▏      | 71/221 [00:17<00:53,  2.80it/s][A
 33%|███▎      | 72/221 [00:18<00:57,  2.60it/s][A
 33%|███▎      | 73/221 [00:18<00:52,  2.83it/s][A
 34%|███▍      | 75/221 [00:18<00:38,  3.83it/s][A
 34%|███▍      | 76/221 [00:18<00:35,  4.03it/s][A
 35%|███▍      | 77/221 [00:19<00:49,  2.90it/s][A
 35%|███▌      | 78/221 [00:19<00:40,  3.53it/s][A
 36%|███▌      | 79/221 [00:20<00:46,  3.04it/s][A
 36%|███▌      | 80/221 [00:20<00:42,  3.32it/s][A
 37%|███▋      | 81/221 [00:20<00:38,  3.63it/s][A
 37%|███▋      | 82/221 [00:20<00:42,  3.27it/s][A
 38%|███▊      | 83/221 [00:21<00:49,  2.78it/s][A
 38%|███▊      | 84/221 [00:21<00:39,  3.44it/s][A
 38%|███▊      | 85/221 [00:21<00:31,  4.25it/s][A
 39%|███▉      | 86/221 [00:21<00:28,  4.78it/s][A
 39%|███▉      | 87/221 [00:22<00:36,  3.66it/s][A
 40%|███▉      | 88/221 [00:22<00:37,  3.52it/s][A
 40%|████      | 89/221 [00:22<00:37,  3.52it/s][A
 41%|████      | 90/221 [00:23<00:44,  2.96it/s][A
 41%|████      | 91/221 [00:23<00:36,  3.53it/s][A
 42%|████▏     | 92/221 [00:23<00:34,  3.74it/s][A
 42%|████▏     | 93/221 [00:24<00:47,  2.68it/s][A
 43%|████▎     | 94/221 [00:24<00:51,  2.49it/s][A
 43%|████▎     | 95/221 [00:24<00:44,  2.80it/s][A
 43%|████▎     | 96/221 [00:25<00:52,  2.37it/s][A
 44%|████▍     | 97/221 [00:25<00:44,  2.78it/s][A
 44%|████▍     | 98/221 [00:26<01:00,  2.02it/s][A
 45%|████▍     | 99/221 [00:26<00:47,  2.58it/s][A
 45%|████▌     | 100/221 [00:26<00:41,  2.93it/s][A
 46%|████▌     | 101/221 [00:27<00:39,  3.02it/s][A
 46%|████▌     | 102/221 [00:28<00:56,  2.11it/s][A
 47%|████▋     | 103/221 [00:28<00:43,  2.70it/s][A
 47%|████▋     | 104/221 [00:28<00:35,  3.29it/s][A
 48%|████▊     | 105/221 [00:28<00:36,  3.16it/s][A
 48%|████▊     | 106/221 [00:28<00:36,  3.17it/s][A
 48%|████▊     | 107/221 [00:29<00:32,  3.46it/s][A
 49%|████▉     | 108/221 [00:29<00:29,  3.82it/s][A
 50%|████▉     | 110/221 [00:29<00:25,  4.31it/s][A
 50%|█████     | 111/221 [00:30<00:25,  4.34it/s][A
 51%|█████     | 112/221 [00:30<00:26,  4.06it/s][A
 51%|█████     | 113/221 [00:30<00:29,  3.71it/s][A
 52%|█████▏    | 115/221 [00:30<00:22,  4.65it/s][A
 52%|█████▏    | 116/221 [00:31<00:23,  4.53it/s][A
 53%|█████▎    | 117/221 [00:31<00:23,  4.40it/s][A
 53%|█████▎    | 118/221 [00:31<00:22,  4.55it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.86it/s][A
 54%|█████▍    | 120/221 [00:32<00:22,  4.52it/s][A
 55%|█████▍    | 121/221 [00:32<00:19,  5.18it/s][A
 55%|█████▌    | 122/221 [00:32<00:20,  4.76it/s][A
 56%|█████▌    | 123/221 [00:32<00:18,  5.16it/s][A
 56%|█████▌    | 124/221 [00:33<00:25,  3.84it/s][A
 57%|█████▋    | 125/221 [00:33<00:28,  3.37it/s][A
 57%|█████▋    | 126/221 [00:33<00:24,  3.87it/s][A
 57%|█████▋    | 127/221 [00:34<00:29,  3.14it/s][A
 58%|█████▊    | 128/221 [00:34<00:26,  3.46it/s][A
 59%|█████▉    | 130/221 [00:34<00:20,  4.47it/s][A
 59%|█████▉    | 131/221 [00:34<00:17,  5.03it/s][A
 60%|█████▉    | 132/221 [00:35<00:38,  2.30it/s][A
 60%|██████    | 133/221 [00:36<00:35,  2.51it/s][A
 61%|██████    | 134/221 [00:36<00:39,  2.18it/s][A
 61%|██████    | 135/221 [00:37<00:38,  2.23it/s][A
 62%|██████▏   | 136/221 [00:37<00:32,  2.63it/s][A
 62%|██████▏   | 137/221 [00:37<00:27,  3.00it/s][A
 62%|██████▏   | 138/221 [00:37<00:27,  2.99it/s][A
 63%|██████▎   | 139/221 [00:38<00:32,  2.52it/s][A
 63%|██████▎   | 140/221 [00:38<00:30,  2.68it/s][A
 64%|██████▍   | 141/221 [00:39<00:28,  2.78it/s][A
 64%|██████▍   | 142/221 [00:39<00:24,  3.27it/s][A
 65%|██████▍   | 143/221 [00:39<00:30,  2.57it/s][A
 65%|██████▌   | 144/221 [00:40<00:31,  2.42it/s][A
 66%|██████▌   | 145/221 [00:40<00:24,  3.04it/s][A
 66%|██████▌   | 146/221 [00:40<00:19,  3.82it/s][A
 67%|██████▋   | 147/221 [00:40<00:19,  3.73it/s][A
 67%|██████▋   | 148/221 [00:41<00:23,  3.12it/s][A
 67%|██████▋   | 149/221 [00:41<00:28,  2.57it/s][A
 68%|██████▊   | 150/221 [00:42<00:24,  2.87it/s][A
 68%|██████▊   | 151/221 [00:42<00:26,  2.68it/s][A
 69%|██████▉   | 152/221 [00:42<00:27,  2.49it/s][A
 69%|██████▉   | 153/221 [00:43<00:22,  2.98it/s][A
 70%|██████▉   | 154/221 [00:43<00:20,  3.24it/s][A
 70%|███████   | 155/221 [00:43<00:21,  3.03it/s][A
 71%|███████   | 156/221 [00:44<00:19,  3.33it/s][A
 71%|███████   | 157/221 [00:44<00:19,  3.28it/s][A
 71%|███████▏  | 158/221 [00:44<00:18,  3.33it/s][A
 72%|███████▏  | 159/221 [00:44<00:16,  3.84it/s][A
 72%|███████▏  | 160/221 [00:44<00:13,  4.54it/s][A
 73%|███████▎  | 161/221 [00:45<00:18,  3.18it/s][A
 73%|███████▎  | 162/221 [00:45<00:15,  3.89it/s][A
 74%|███████▍  | 163/221 [00:45<00:14,  4.07it/s][A
 74%|███████▍  | 164/221 [00:45<00:12,  4.42it/s][A
 75%|███████▍  | 165/221 [00:46<00:14,  3.76it/s][A
 75%|███████▌  | 166/221 [00:46<00:13,  4.11it/s][A
 76%|███████▌  | 167/221 [00:46<00:11,  4.75it/s][A
 76%|███████▌  | 168/221 [00:46<00:12,  4.34it/s][A
 77%|███████▋  | 170/221 [00:47<00:11,  4.50it/s][A
 77%|███████▋  | 171/221 [00:47<00:13,  3.78it/s][A
 78%|███████▊  | 172/221 [00:47<00:12,  4.02it/s][A
 78%|███████▊  | 173/221 [00:48<00:15,  3.10it/s][A
 79%|███████▊  | 174/221 [00:49<00:18,  2.54it/s][A
 79%|███████▉  | 175/221 [00:49<00:16,  2.83it/s][A
 80%|███████▉  | 176/221 [00:49<00:14,  3.06it/s][A
 81%|████████  | 178/221 [00:49<00:11,  3.73it/s][A
 81%|████████  | 179/221 [00:50<00:11,  3.67it/s][A
 81%|████████▏ | 180/221 [00:50<00:10,  4.10it/s][A
 82%|████████▏ | 181/221 [00:50<00:08,  4.48it/s][A
 82%|████████▏ | 182/221 [00:51<00:12,  3.08it/s][A
 83%|████████▎ | 183/221 [00:51<00:11,  3.43it/s][A
 83%|████████▎ | 184/221 [00:51<00:10,  3.54it/s][A
 84%|████████▎ | 185/221 [00:51<00:09,  3.71it/s][A
 84%|████████▍ | 186/221 [00:52<00:14,  2.41it/s][A
 85%|████████▍ | 187/221 [00:52<00:12,  2.73it/s][A
 85%|████████▌ | 188/221 [00:53<00:11,  2.98it/s][A
 86%|████████▌ | 189/221 [00:53<00:09,  3.35it/s][A
 86%|████████▌ | 190/221 [00:53<00:10,  3.09it/s][A
 87%|████████▋ | 192/221 [00:54<00:07,  3.69it/s][A
 88%|████████▊ | 194/221 [00:54<00:06,  4.01it/s][A
 88%|████████▊ | 195/221 [00:54<00:06,  4.16it/s][A
 89%|████████▊ | 196/221 [00:55<00:06,  4.09it/s][A
 89%|████████▉ | 197/221 [00:55<00:05,  4.35it/s][A
 90%|████████▉ | 198/221 [00:55<00:05,  4.08it/s][A
 90%|█████████ | 199/221 [00:55<00:05,  4.17it/s][A
 90%|█████████ | 200/221 [00:56<00:05,  3.76it/s][A
 91%|█████████ | 201/221 [00:56<00:04,  4.43it/s][A
 91%|█████████▏| 202/221 [00:56<00:04,  3.96it/s][A
 92%|█████████▏| 203/221 [00:56<00:03,  4.70it/s][A
 92%|█████████▏| 204/221 [00:57<00:04,  3.80it/s][A
 93%|█████████▎| 205/221 [00:57<00:03,  4.59it/s][A
 93%|█████████▎| 206/221 [00:57<00:03,  3.95it/s][A
 94%|█████████▎| 207/221 [00:57<00:03,  4.39it/s][A
 94%|█████████▍| 208/221 [00:57<00:02,  4.54it/s][A
 95%|█████████▍| 209/221 [00:58<00:02,  4.43it/s][A
 95%|█████████▌| 211/221 [00:58<00:02,  4.50it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  4.03it/s][A
 96%|█████████▋| 213/221 [00:59<00:01,  4.45it/s][A
 97%|█████████▋| 214/221 [01:00<00:03,  2.25it/s][A
 97%|█████████▋| 215/221 [01:00<00:02,  2.70it/s][A
 98%|█████████▊| 216/221 [01:00<00:01,  2.94it/s][A
 98%|█████████▊| 217/221 [01:00<00:01,  2.89it/s][A
 99%|█████████▊| 218/221 [01:01<00:00,  3.00it/s][A
 99%|█████████▉| 219/221 [01:01<00:00,  3.25it/s][A
100%|█████████▉| 220/221 [01:01<00:00,  3.67it/s][A
100%|██████████| 221/221 [01:01<00:00,  4.08it/s][A100%|██████████| 221/221 [01:01<00:00,  3.58it/s]
09/07/2024 17:15:14 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 1499--===========

09/07/2024 17:15:14 - INFO - __main__ -   {'area_r1': 24.5, 'area_recall': '24.5/47.3/57.6', 'area_ravg': 43.1}
09/07/2024 17:15:14 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 1499--===========

09/07/2024 17:15:14 - INFO - __main__ -   {'forward_r1': 38.7, 'forward_recall': '38.7/64.8/73.1', 'forward_ravg': 58.9}
09/07/2024 17:15:14 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 1499--===========

09/07/2024 17:15:14 - INFO - __main__ -   {'area_video_r1': 39.8, 'area_video_recall': '39.8/67.9/76.6', 'area_video_ravg': 61.4}
09/07/2024 17:15:14 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 1499=======

09/07/2024 17:15:14 - INFO - __main__ -   {'area_video_r1': 39.8, 'area_video_recall': '39.8/67.9/76.6', 'area_video_ravg': 61.4}
09/07/2024 17:15:14 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 1499--===========

09/07/2024 17:15:14 - INFO - __main__ -   {'area_video_r1': 50.7, 'area_video_recall': '50.7/73.8/81.8', 'area_video_ravg': 68.7, 'area_video_back_r1': 50.7, 'area_video_back_recall': '50.7/74.1/80.9', 'area_video_back_ravg': 68.6}
09/07/2024 17:15:14 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 599=======

09/07/2024 17:15:14 - INFO - __main__ -   {'area_video_r1': 51.1, 'area_video_recall': '51.1/74.4/80.2', 'area_video_ravg': 68.6, 'area_video_back_r1': 49.1, 'area_video_back_recall': '49.1/72.5/80.4', 'area_video_back_ravg': 67.3}
09/07/2024 17:15:14 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 1499--===========

09/07/2024 17:15:14 - INFO - __main__ -   {'video_r1': 41.9, 'video_recall': '41.9/70.2/81.4', 'video_ravg': 64.5}
09/07/2024 17:15:14 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 299=======

09/07/2024 17:15:14 - INFO - __main__ -   {'video_r1': 42.3, 'video_recall': '42.3/71.2/80.8', 'video_ravg': 64.7}
09/07/2024 17:15:14 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 1499--===========

09/07/2024 17:15:14 - INFO - __main__ -   {'video_r1': 50.8, 'video_recall': '50.8/74.3/82.0', 'video_ravg': 69.0}
09/07/2024 17:15:14 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 599=======

09/07/2024 17:15:14 - INFO - __main__ -   {'video_r1': 51.8, 'video_recall': '51.8/75.5/82.9', 'video_ravg': 70.1}
09/07/2024 17:15:38 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.2388994693756104, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.040709979832172394, 'loss_ret%tv%ta--finetune_area/loss_area': 2.524543285369873, 'loss_ret%tv%ta--finetune_area/total_loss': 5.804152488708496}
 77%|███████▋  | 1500/1945 [5:31:42<14:07:53, 114.32s/it][h264 @ 0x55ee32926940] mmco: unref short failure
[h264 @ 0x55b932170f40] mmco: unref short failure
[h264 @ 0x55b932170f40] mmco: unref short failure
 77%|███████▋  | 1501/1945 [5:31:45<9:58:03, 80.82s/it]   77%|███████▋  | 1502/1945 [5:31:48<7:04:51, 57.54s/it][h264 @ 0x556647ae3800] mmco: unref short failure
[h264 @ 0x556647ae3800] mmco: unref short failure
 77%|███████▋  | 1503/1945 [5:31:52<5:05:05, 41.41s/it] 77%|███████▋  | 1504/1945 [5:31:56<3:42:06, 30.22s/it] 77%|███████▋  | 1505/1945 [5:32:01<2:45:02, 22.51s/it] 77%|███████▋  | 1506/1945 [5:32:06<2:07:36, 17.44s/it] 77%|███████▋  | 1507/1945 [5:32:12<1:41:12, 13.86s/it][h264 @ 0x55fc8d92cf80] mmco: unref short failure
[h264 @ 0x55fc8d92cf80] mmco: unref short failure
 78%|███████▊  | 1508/1945 [5:32:17<1:22:49, 11.37s/it][h264 @ 0x55ee3023f540] mmco: unref short failure
[h264 @ 0x55ee3023f540] mmco: unref short failure
 78%|███████▊  | 1509/1945 [5:32:23<1:10:49,  9.75s/it][h264 @ 0x55fcd33ced80] mmco: unref short failure
[h264 @ 0x55fcd33ced80] mmco: unref short failure
 78%|███████▊  | 1510/1945 [5:32:29<1:00:54,  8.40s/it] 78%|███████▊  | 1511/1945 [5:32:34<54:52,  7.59s/it]  [h264 @ 0x55b8eb4db040] mmco: unref short failure
[h264 @ 0x55ee04035c00] mmco: unref short failure
[h264 @ 0x55ee374aa640] mmco: unref short failure
[h264 @ 0x55ee374aa640] mmco: unref short failure
[h264 @ 0x55fcca3de0c0] mmco: unref short failure
 78%|███████▊  | 1512/1945 [5:32:41<52:39,  7.30s/it][h264 @ 0x556679852080] mmco: unref short failure
[h264 @ 0x556679852080] mmco: unref short failure
 78%|███████▊  | 1513/1945 [5:32:46<48:16,  6.71s/it] 78%|███████▊  | 1514/1945 [5:32:51<44:28,  6.19s/it] 78%|███████▊  | 1515/1945 [5:32:56<42:30,  5.93s/it] 78%|███████▊  | 1516/1945 [5:33:06<49:39,  6.95s/it][h264 @ 0x55b8f0657340] mmco: unref short failure
 78%|███████▊  | 1517/1945 [5:33:13<50:52,  7.13s/it][h264 @ 0x55b93043c540] mmco: unref short failure
[h264 @ 0x55fcd1cba700] mmco: unref short failure
[h264 @ 0x55fcd1cba700] mmco: unref short failure
 78%|███████▊  | 1518/1945 [5:33:27<1:03:52,  8.98s/it][h264 @ 0x55b930871940] mmco: unref short failure
[h264 @ 0x55b8ee67ef00] mmco: unref short failure
[h264 @ 0x55b8ee67ef00] mmco: unref short failure
[h264 @ 0x55b8ee67ef00] mmco: unref short failure
[h264 @ 0x55b8ee67ef00] mmco: unref short failure
 78%|███████▊  | 1519/1945 [5:33:32<55:07,  7.76s/it]  [h264 @ 0x55ee2f8cc680] mmco: unref short failure
[h264 @ 0x55ee2f8cc680] mmco: unref short failure
[h264 @ 0x55fcd1dba740] mmco: unref short failure
 78%|███████▊  | 1520/1945 [5:33:38<52:36,  7.43s/it] 78%|███████▊  | 1521/1945 [5:33:45<50:44,  7.18s/it] 78%|███████▊  | 1522/1945 [5:33:51<47:43,  6.77s/it][h264 @ 0x55fccab3f840] mmco: unref short failure
 78%|███████▊  | 1523/1945 [5:33:56<43:55,  6.25s/it][h264 @ 0x55667e7e5900] mmco: unref short failure
[h264 @ 0x55667e7e5900] mmco: unref short failure
[h264 @ 0x55667e7e5900] mmco: unref short failure
[h264 @ 0x55ee31546c00] mmco: unref short failure
[h264 @ 0x55ee31546c00] mmco: unref short failure
[h264 @ 0x556673b4af40] mmco: unref short failure
[h264 @ 0x556674bb2900] mmco: unref short failure
[h264 @ 0x5566776afdc0] mmco: unref short failure
[h264 @ 0x5566776afdc0] mmco: unref short failure
[h264 @ 0x55ee3023f540] mmco: unref short failure
[h264 @ 0x556647ad0700] mmco: unref short failure
[h264 @ 0x556647ad0700] mmco: unref short failure
[h264 @ 0x556647ad0700] mmco: unref short failure
[h264 @ 0x556647ad0700] mmco: unref short failure
[h264 @ 0x556647ad0700] mmco: unref short failure
[h264 @ 0x556647ad0700] mmco: unref short failure
[h264 @ 0x556647ad0700] mmco: unref short failure
[h264 @ 0x556647ad0700] mmco: unref short failure
[h264 @ 0x556647ad0700] mmco: unref short failure
[h264 @ 0x556647ad0700] mmco: unref short failure
[h264 @ 0x55fcce5ae3c0] mmco: unref short failure
[h264 @ 0x55b92a1a2f40] mmco: unref short failure
[h264 @ 0x55ee3f6390c0] mmco: unref short failure
 78%|███████▊  | 1524/1945 [5:34:46<2:15:38, 19.33s/it][h264 @ 0x55ee43321a00] mmco: unref short failure
 78%|███████▊  | 1525/1945 [5:34:51<1:46:44, 15.25s/it][h264 @ 0x55ee04900f00] mmco: unref short failure
[h264 @ 0x55b929f89fc0] mmco: unref short failure
[h264 @ 0x55b8f1a89380] mmco: unref short failure
[h264 @ 0x55b8f1a89380] mmco: unref short failure
[h264 @ 0x55fcde089840] mmco: unref short failure
[h264 @ 0x55b8f0d4ddc0] mmco: unref short failure
[h264 @ 0x55b8f0d4ddc0] mmco: unref short failure
[h264 @ 0x55b8ea8bfc00] mmco: unref short failure
 78%|███████▊  | 1526/1945 [5:35:06<1:45:03, 15.04s/it][h264 @ 0x55ee43c79600] mmco: unref short failure
[h264 @ 0x55fcd9ddd940] mmco: unref short failure
[h264 @ 0x55fcd9ddd940] mmco: unref short failure
 79%|███████▊  | 1527/1945 [5:35:11<1:25:07, 12.22s/it] 79%|███████▊  | 1528/1945 [5:35:19<1:15:06, 10.81s/it] 79%|███████▊  | 1529/1945 [5:35:25<1:05:56,  9.51s/it] 79%|███████▊  | 1530/1945 [5:35:34<1:02:52,  9.09s/it][h264 @ 0x55ee37f7d740] mmco: unref short failure
 79%|███████▊  | 1531/1945 [5:35:39<56:05,  8.13s/it]  [h264 @ 0x55fccab3f840] mmco: unref short failure
[h264 @ 0x55ee316ef640] mmco: unref short failure
[h264 @ 0x5566765fc240] mmco: unref short failure
[h264 @ 0x5566765fc240] mmco: unref short failure
[h264 @ 0x55ee31546c00] mmco: unref short failure
[h264 @ 0x55ee31546c00] mmco: unref short failure
[h264 @ 0x55fcd682e940] mmco: unref short failure
[h264 @ 0x55fcd682e940] mmco: unref short failure
[h264 @ 0x55b8eb0781c0] mmco: unref short failure
[h264 @ 0x55b8eb0781c0] mmco: unref short failure
[h264 @ 0x5566844d7b40] mmco: unref short failure
[h264 @ 0x5566844d7b40] mmco: unref short failure
[h264 @ 0x55ee3e53bf80] mmco: unref short failure
[h264 @ 0x55ee3e53bf80] mmco: unref short failure
[h264 @ 0x5566838cf740] mmco: unref short failure
[h264 @ 0x55b929f89fc0] mmco: unref short failure
[h264 @ 0x55667f7c2540] mmco: unref short failure
[h264 @ 0x55667f7c2540] mmco: unref short failure
 79%|███████▉  | 1532/1945 [5:36:31<2:24:48, 21.04s/it][h264 @ 0x55fcd4238e00] mmco: unref short failure
 79%|███████▉  | 1533/1945 [5:36:37<1:55:02, 16.75s/it][h264 @ 0x556686644fc0] mmco: unref short failure
 79%|███████▉  | 1534/1945 [5:36:48<1:43:16, 15.08s/it] 79%|███████▉  | 1535/1945 [5:36:54<1:23:46, 12.26s/it][h264 @ 0x55b8ea674b80] mmco: unref short failure
[h264 @ 0x55b8ea674b80] mmco: unref short failure
[h264 @ 0x55668a2e3e80] mmco: unref short failure
[h264 @ 0x55668a2e3e80] mmco: unref short failure
 79%|███████▉  | 1536/1945 [5:37:01<1:11:50, 10.54s/it][h264 @ 0x55fcde089840] mmco: unref short failure
 79%|███████▉  | 1537/1945 [5:37:06<1:01:13,  9.00s/it][h264 @ 0x55ee448d1f00] mmco: unref short failure
[h264 @ 0x55ee448d1f00] mmco: unref short failure
 79%|███████▉  | 1538/1945 [5:37:13<56:38,  8.35s/it]   79%|███████▉  | 1539/1945 [5:37:18<49:49,  7.36s/it][h264 @ 0x55fcd683c0c0] mmco: unref short failure
[h264 @ 0x55fcd683c0c0] mmco: unref short failure
[h264 @ 0x556679ad42c0] mmco: unref short failure
[h264 @ 0x556679ad42c0] mmco: unref short failure
[h264 @ 0x55fccb09bfc0] mmco: unref short failure
[h264 @ 0x55fccb09bfc0] mmco: unref short failure
[h264 @ 0x55b8f0dc0a80] mmco: unref short failure
[h264 @ 0x55b8f0dc0a80] mmco: unref short failure
[h264 @ 0x55b8f0dc0a80] mmco: unref short failure
[h264 @ 0x55b8f0dc0a80] mmco: unref short failure
[h264 @ 0x55b8f0d4ddc0] mmco: unref short failure
[h264 @ 0x55b92fd6df00] mmco: unref short failure
[h264 @ 0x55b92d9909c0] mmco: unref short failure
 79%|███████▉  | 1540/1945 [5:38:05<2:09:16, 19.15s/it] 79%|███████▉  | 1541/1945 [5:38:11<1:42:18, 15.19s/it][h264 @ 0x556685a1aec0] mmco: unref short failure
[h264 @ 0x556685a1aec0] mmco: unref short failure
 79%|███████▉  | 1542/1945 [5:38:29<1:49:03, 16.24s/it][h264 @ 0x55fcd5c64b40] mmco: unref short failure
[h264 @ 0x55fcd5c64b40] mmco: unref short failure
[h264 @ 0x55fcd6960bc0] mmco: unref short failure
 79%|███████▉  | 1543/1945 [5:38:36<1:28:57, 13.28s/it][h264 @ 0x55ee33e268c0] mmco: unref short failure
[h264 @ 0x55ee33e268c0] mmco: unref short failure
 79%|███████▉  | 1544/1945 [5:38:45<1:21:39, 12.22s/it][h264 @ 0x55668a404ac0] mmco: unref short failure
 79%|███████▉  | 1545/1945 [5:38:51<1:09:09, 10.37s/it] 79%|███████▉  | 1546/1945 [5:38:57<58:45,  8.84s/it]   80%|███████▉  | 1547/1945 [5:39:02<51:11,  7.72s/it][h264 @ 0x55ee415f7f40] mmco: unref short failure
[h264 @ 0x55ee415f7f40] mmco: unref short failure
[h264 @ 0x55fcd76e4b00] mmco: unref short failure
[h264 @ 0x55fcd046c340] mmco: unref short failure
[h264 @ 0x55fcd046c340] mmco: unref short failure
[h264 @ 0x55ee31fa84c0] mmco: unref short failure
[h264 @ 0x55ee31fa84c0] mmco: unref short failure
[h264 @ 0x55ee4387e380] mmco: unref short failure
[h264 @ 0x55ee4387e380] mmco: unref short failure
[h264 @ 0x55b934645d00] mmco: unref short failure
 80%|███████▉  | 1548/1945 [5:39:42<1:54:29, 17.30s/it] 80%|███████▉  | 1549/1945 [5:39:46<1:28:12, 13.36s/it][h264 @ 0x55ee31546c00] mmco: unref short failure
[h264 @ 0x55ee31546c00] mmco: unref short failure
[h264 @ 0x55ee31546c00] mmco: unref short failure
[h264 @ 0x55ee31546c00] mmco: unref short failure
[h264 @ 0x55667d6d8c40] mmco: unref short failure
09/07/2024 17:23:53 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.125885248184204, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.042114462703466415, 'loss_ret%tv%ta--finetune_area/loss_area': 2.3723888397216797, 'loss_ret%tv%ta--finetune_area/total_loss': 5.540388584136963}
 80%|███████▉  | 1550/1945 [5:39:57<1:23:29, 12.68s/it] 80%|███████▉  | 1551/1945 [5:39:59<1:03:06,  9.61s/it] 80%|███████▉  | 1552/1945 [5:40:02<48:53,  7.47s/it]   80%|███████▉  | 1553/1945 [5:40:04<38:57,  5.96s/it] 80%|███████▉  | 1554/1945 [5:40:07<31:55,  4.90s/it] 80%|███████▉  | 1555/1945 [5:40:09<27:04,  4.17s/it]/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b90b30d780] mmco: unref short failure
[h264 @ 0x55b90b30d780] mmco: unref short failure
[h264 @ 0x55ee03e18140] mmco: unref short failure
[h264 @ 0x55ee03e18140] mmco: unref short failure
[h264 @ 0x55b90a25be80] mmco: unref short failure
[h264 @ 0x55fc8d3056c0] mmco: unref short failure
[h264 @ 0x55fc8d3056c0] mmco: unref short failure
[h264 @ 0x556646fa6a40] mmco: unref short failure
[h264 @ 0x556646fa6a40] mmco: unref short failure
[h264 @ 0x55fc8d229040] mmco: unref short failure
[h264 @ 0x55ee046fb5c0] mmco: unref short failure
[h264 @ 0x556675e5e440] mmco: unref short failure
[h264 @ 0x556675e5e440] mmco: unref short failure
[h264 @ 0x55fccd493040] mmco: unref short failure
[h264 @ 0x5566758a3c80] mmco: unref short failure
[h264 @ 0x5566758a3c80] mmco: unref short failure
 80%|████████  | 1556/1945 [5:42:05<4:04:15, 37.67s/it][h264 @ 0x55ee03aaeb40] mmco: unref short failure
 80%|████████  | 1557/1945 [5:42:10<3:01:27, 28.06s/it][h264 @ 0x55b8ee240080] mmco: unref short failure
 80%|████████  | 1558/1945 [5:42:16<2:17:10, 21.27s/it][h264 @ 0x55fccce40e40] mmco: unref short failure
[h264 @ 0x55fccce40e40] mmco: unref short failure
 80%|████████  | 1559/1945 [5:42:23<1:49:11, 16.97s/it][h264 @ 0x55b90b1338c0] mmco: unref short failure
[h264 @ 0x55b90b1338c0] mmco: unref short failure
 80%|████████  | 1560/1945 [5:42:29<1:28:32, 13.80s/it][h264 @ 0x55b8ed77ea40] mmco: unref short failure
[h264 @ 0x55667531f640] mmco: unref short failure
[h264 @ 0x55667531f640] mmco: unref short failure
 80%|████████  | 1561/1945 [5:42:36<1:14:39, 11.67s/it][h264 @ 0x556674b9f440] mmco: unref short failure
[h264 @ 0x556674b9f440] mmco: unref short failure
 80%|████████  | 1562/1945 [5:42:42<1:04:11, 10.06s/it] 80%|████████  | 1563/1945 [5:42:48<55:34,  8.73s/it]  [h264 @ 0x55ee316a5700] mmco: unref short failure
[h264 @ 0x55ee316a5700] mmco: unref short failure
[h264 @ 0x55fccf62a600] mmco: unref short failure
[h264 @ 0x55fccf62a600] mmco: unref short failure
[h264 @ 0x55ee2fd6c040] mmco: unref short failure
[h264 @ 0x55ee2fd6c040] mmco: unref short failure
[h264 @ 0x55ee2fd6c040] mmco: unref short failure
[h264 @ 0x55fccd939400] mmco: unref short failure
[h264 @ 0x55fccd939400] mmco: unref short failure
[h264 @ 0x556675d40440] mmco: unref short failure
[h264 @ 0x556675d40440] mmco: unref short failure
[h264 @ 0x5566791f1980] mmco: unref short failure
[h264 @ 0x5566791f1980] mmco: unref short failure
[h264 @ 0x5566789bc680] mmco: unref short failure
[h264 @ 0x5566789bc680] mmco: unref short failure
[h264 @ 0x55ee358996c0] mmco: unref short failure
 80%|████████  | 1564/1945 [5:43:40<2:18:36, 21.83s/it] 80%|████████  | 1565/1945 [5:43:46<1:47:00, 16.90s/it] 81%|████████  | 1566/1945 [5:43:51<1:24:21, 13.35s/it] 81%|████████  | 1567/1945 [5:43:57<1:10:11, 11.14s/it] 81%|████████  | 1568/1945 [5:44:02<58:28,  9.31s/it]   81%|████████  | 1569/1945 [5:44:07<50:32,  8.07s/it][h264 @ 0x55b90cbe0ac0] mmco: unref short failure
 81%|████████  | 1570/1945 [5:44:12<45:34,  7.29s/it] 81%|████████  | 1571/1945 [5:44:17<41:03,  6.59s/it][h264 @ 0x556673dbf600] mmco: unref short failure
[h264 @ 0x556673dbf600] mmco: unref short failure
[h264 @ 0x55fc8d373880] mmco: unref short failure
[h264 @ 0x55fc8d373880] mmco: unref short failure
[h264 @ 0x55ee33e35ec0] mmco: unref short failure
[h264 @ 0x55ee33e35ec0] mmco: unref short failure
[h264 @ 0x55b8ed2098c0] mmco: unref short failure
[h264 @ 0x55fc8d67edc0] mmco: unref short failure
[h264 @ 0x55ee2f575840] mmco: unref short failure
[h264 @ 0x55ee2f575840] mmco: unref short failure
[h264 @ 0x55667717ae40] mmco: unref short failure
[h264 @ 0x55667717ae40] mmco: unref short failure
[h264 @ 0x55ee32673c40] mmco: unref short failure
[h264 @ 0x55667500dd00] mmco: unref short failure
[h264 @ 0x55ee042046c0] mmco: unref short failure
[h264 @ 0x55ee042046c0] mmco: unref short failure
[h264 @ 0x55b90b04ab40] mmco: unref short failure
[h264 @ 0x55fccaab4280] mmco: unref short failure
 81%|████████  | 1572/1945 [5:45:17<2:19:29, 22.44s/it][h264 @ 0x55fc8c023e00] mmco: unref short failure
 81%|████████  | 1573/1945 [5:45:23<1:49:20, 17.63s/it][h264 @ 0x55667a650800] mmco: unref short failure
[h264 @ 0x55667a650800] mmco: unref short failure
 81%|████████  | 1574/1945 [5:45:29<1:26:25, 13.98s/it] 81%|████████  | 1575/1945 [5:45:34<1:09:59, 11.35s/it] 81%|████████  | 1576/1945 [5:45:41<1:02:07, 10.10s/it] 81%|████████  | 1577/1945 [5:45:47<53:45,  8.76s/it]  [h264 @ 0x55fc8cc25f00] mmco: unref short failure
[h264 @ 0x55fc8cc25f00] mmco: unref short failure
 81%|████████  | 1578/1945 [5:45:53<48:45,  7.97s/it] 81%|████████  | 1579/1945 [5:45:58<43:52,  7.19s/it][h264 @ 0x5566790173c0] mmco: unref short failure
[h264 @ 0x5566790173c0] mmco: unref short failure
[h264 @ 0x556679ab8cc0] mmco: unref short failure
[h264 @ 0x556679ab8cc0] mmco: unref short failure
[h264 @ 0x55667c7ed140] mmco: unref short failure
[h264 @ 0x55667c7ed140] mmco: unref short failure
[h264 @ 0x55ee35ef0880] mmco: unref short failure
[h264 @ 0x55b8efa4e400] mmco: unref short failure
[h264 @ 0x55b8efa4e400] mmco: unref short failure
[h264 @ 0x55b90b2d4300] mmco: unref short failure
[h264 @ 0x55fcd0bc2340] mmco: unref short failure
[h264 @ 0x55fcd0bc2340] mmco: unref short failure
[h264 @ 0x55ee3564b780] mmco: unref short failure
[h264 @ 0x55b90c829b80] mmco: unref short failure
[h264 @ 0x55b90c829b80] mmco: unref short failure
[h264 @ 0x55b90c829b80] mmco: unref short failure
[h264 @ 0x55b90c829b80] mmco: unref short failure
[h264 @ 0x55b90c829b80] mmco: unref short failure
[h264 @ 0x55b90c829b80] mmco: unref short failure
[h264 @ 0x55b8ee23f740] mmco: unref short failure
[h264 @ 0x55b8ee23f740] mmco: unref short failure
[h264 @ 0x556677554100] mmco: unref short failure
[h264 @ 0x55fcd1d8b900] mmco: unref short failure
 81%|████████  | 1580/1945 [5:46:53<2:11:04, 21.55s/it][h264 @ 0x55ee04379b00] mmco: unref short failure
[h264 @ 0x55ee04379b00] mmco: unref short failure
[h264 @ 0x55b8efa6e200] mmco: unref short failure
[h264 @ 0x55b8efa6e200] mmco: unref short failure
 81%|████████▏ | 1581/1945 [5:46:59<1:41:48, 16.78s/it] 81%|████████▏ | 1582/1945 [5:47:04<1:20:03, 13.23s/it][h264 @ 0x55fcd0f7a400] mmco: unref short failure
[h264 @ 0x55b8f1c35840] mmco: unref short failure
[h264 @ 0x55b8f1c35840] mmco: unref short failure
 81%|████████▏ | 1583/1945 [5:47:10<1:07:47, 11.24s/it][h264 @ 0x55b8f0b1ff40] mmco: unref short failure
[h264 @ 0x556676908400] mmco: unref short failure
 81%|████████▏ | 1584/1945 [5:47:16<57:34,  9.57s/it]   81%|████████▏ | 1585/1945 [5:47:22<50:15,  8.38s/it] 82%|████████▏ | 1586/1945 [5:47:27<43:51,  7.33s/it][h264 @ 0x55ee30e61c40] mmco: unref short failure
[h264 @ 0x55ee30e61c40] mmco: unref short failure
 82%|████████▏ | 1587/1945 [5:47:32<40:38,  6.81s/it][h264 @ 0x55b8f1297780] mmco: unref short failure
[h264 @ 0x55b8eaa8b980] mmco: unref short failure
[h264 @ 0x55b8eaa8b980] mmco: unref short failure
not have audios 8-qwaveiHMM.3
[h264 @ 0x55b928aa0f80] mmco: unref short failure
[h264 @ 0x55b928aa0f80] mmco: unref short failure
[h264 @ 0x55fcd420dd80] mmco: unref short failure
[h264 @ 0x556678a74140] mmco: unref short failure
[h264 @ 0x55b8f090a580] mmco: unref short failure
 82%|████████▏ | 1588/1945 [5:48:31<2:12:46, 22.31s/it][h264 @ 0x55b909cf45c0] mmco: unref short failure
[h264 @ 0x55667ea83840] mmco: unref short failure
 82%|████████▏ | 1589/1945 [5:48:36<1:41:56, 17.18s/it] 82%|████████▏ | 1590/1945 [5:48:42<1:21:38, 13.80s/it] 82%|████████▏ | 1591/1945 [5:48:48<1:07:12, 11.39s/it] 82%|████████▏ | 1592/1945 [5:48:53<56:24,  9.59s/it]  [h264 @ 0x55667dd1d100] mmco: unref short failure
 82%|████████▏ | 1593/1945 [5:48:58<48:39,  8.29s/it] 82%|████████▏ | 1594/1945 [5:49:04<44:32,  7.61s/it] 82%|████████▏ | 1595/1945 [5:49:10<41:19,  7.08s/it][h264 @ 0x55ee391bd980] mmco: unref short failure
[h264 @ 0x55ee0470b140] mmco: unref short failure
[h264 @ 0x55ee0470b140] mmco: unref short failure
[h264 @ 0x55667478b340] mmco: unref short failure
[h264 @ 0x55ee38f74740] mmco: unref short failure
[h264 @ 0x55ee38f74740] mmco: unref short failure
[h264 @ 0x55b9291acf80] mmco: unref short failure
[h264 @ 0x55fccaf42f00] mmco: unref short failure
[h264 @ 0x55ee3145eb40] mmco: unref short failure
[h264 @ 0x55fccf00d740] mmco: unref short failure
 82%|████████▏ | 1596/1945 [5:50:09<2:11:36, 22.62s/it] 82%|████████▏ | 1597/1945 [5:50:21<1:53:08, 19.51s/it] 82%|████████▏ | 1598/1945 [5:50:27<1:28:39, 15.33s/it] 82%|████████▏ | 1599/1945 [5:50:33<1:12:14, 12.53s/it]09/07/2024 17:34:33 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.124189853668213, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.043349266052246094, 'loss_ret%tv%ta--finetune_area/loss_area': 2.2939467430114746, 'loss_ret%tv%ta--finetune_area/total_loss': 5.461485862731934}
 82%|████████▏ | 1600/1945 [5:50:38<59:38, 10.37s/it]   82%|████████▏ | 1601/1945 [5:50:44<51:21,  8.96s/it][h264 @ 0x556675b3f580] mmco: unref short failure
[h264 @ 0x556675b3f580] mmco: unref short failure
 82%|████████▏ | 1602/1945 [5:50:50<45:48,  8.01s/it][h264 @ 0x55fccaa61300] mmco: unref short failure
[h264 @ 0x55fccaa61300] mmco: unref short failure
 82%|████████▏ | 1603/1945 [5:50:55<41:38,  7.31s/it][h264 @ 0x55b8f13921c0] mmco: unref short failure
[h264 @ 0x55b8f13921c0] mmco: unref short failure
[h264 @ 0x55667717b080] mmco: unref short failure
[h264 @ 0x55667717b080] mmco: unref short failure
[h264 @ 0x5566788e7dc0] mmco: unref short failure
[h264 @ 0x5566788e7dc0] mmco: unref short failure
[h264 @ 0x55667fd4dac0] mmco: unref short failure
[h264 @ 0x55fccfcc23c0] mmco: unref short failure
[h264 @ 0x55664757a6c0] mmco: unref short failure
[h264 @ 0x556674285b80] mmco: unref short failure
[h264 @ 0x55fcca358e40] mmco: unref short failure
[h264 @ 0x55fcca358e40] mmco: unref short failure
[h264 @ 0x55fcd43f0a80] mmco: unref short failure
[h264 @ 0x55fcd43f0a80] mmco: unref short failure
[h264 @ 0x55ee364dd080] mmco: unref short failure
[h264 @ 0x55ee364dd080] mmco: unref short failure
 82%|████████▏ | 1604/1945 [5:51:53<2:07:00, 22.35s/it][h264 @ 0x55667970c8c0] mmco: unref short failure
[h264 @ 0x55667970c8c0] mmco: unref short failure
[h264 @ 0x55668024b3c0] mmco: unref short failure
[h264 @ 0x55668024b3c0] mmco: unref short failure
 83%|████████▎ | 1605/1945 [5:51:59<1:38:50, 17.44s/it][h264 @ 0x55fcd0b762c0] mmco: unref short failure
 83%|████████▎ | 1606/1945 [5:52:04<1:18:29, 13.89s/it][h264 @ 0x556678f21f00] mmco: unref short failure
[h264 @ 0x556678f21f00] mmco: unref short failure
[h264 @ 0x55fcd002db80] mmco: unref short failure
[h264 @ 0x55fcd002db80] mmco: unref short failure
 83%|████████▎ | 1607/1945 [5:52:10<1:04:57, 11.53s/it] 83%|████████▎ | 1608/1945 [5:52:16<54:27,  9.70s/it]   83%|████████▎ | 1609/1945 [5:52:23<50:30,  9.02s/it][h264 @ 0x55ee3b0f6100] mmco: unref short failure
[h264 @ 0x55ee3b0f6100] mmco: unref short failure
[h264 @ 0x55fcd3f4cd40] mmco: unref short failure
 83%|████████▎ | 1610/1945 [5:52:29<44:10,  7.91s/it] 83%|████████▎ | 1611/1945 [5:52:34<40:19,  7.24s/it][h264 @ 0x55b8eaf9a600] mmco: unref short failure
[h264 @ 0x55b8eaf9a600] mmco: unref short failure
[h264 @ 0x55b8eab50ec0] mmco: unref short failure
[h264 @ 0x55fcd256c980] mmco: unref short failure
[h264 @ 0x55fcd256c980] mmco: unref short failure
[h264 @ 0x55fcd3653b80] mmco: unref short failure
 83%|████████▎ | 1612/1945 [5:53:29<1:59:50, 21.59s/it][h264 @ 0x55b8ee28af00] mmco: unref short failure
[h264 @ 0x55b8eb146600] mmco: unref short failure
 83%|████████▎ | 1613/1945 [5:53:35<1:33:20, 16.87s/it] 83%|████████▎ | 1614/1945 [5:53:41<1:15:38, 13.71s/it][h264 @ 0x55ee3b0decc0] mmco: unref short failure
 83%|████████▎ | 1615/1945 [5:53:47<1:02:40, 11.40s/it] 83%|████████▎ | 1616/1945 [5:53:52<51:34,  9.41s/it]   83%|████████▎ | 1617/1945 [5:53:58<45:15,  8.28s/it][h264 @ 0x55b92e833bc0] mmco: unref short failure
[h264 @ 0x55b92e833bc0] mmco: unref short failure
[h264 @ 0x55ee378d04c0] mmco: unref short failure
[h264 @ 0x55ee378d04c0] mmco: unref short failure
[h264 @ 0x55fcd5a08180] mmco: unref short failure
[h264 @ 0x55fcd5a08180] mmco: unref short failure
 83%|████████▎ | 1618/1945 [5:54:04<41:14,  7.57s/it][h264 @ 0x556681426d80] mmco: unref short failure
 83%|████████▎ | 1619/1945 [5:54:10<38:22,  7.06s/it][h264 @ 0x55ee32c48340] mmco: unref short failure
[h264 @ 0x55ee32c48340] mmco: unref short failure
[h264 @ 0x556679e3ecc0] mmco: unref short failure
[h264 @ 0x55fcd02b4c40] mmco: unref short failure
[h264 @ 0x55fcd02b4c40] mmco: unref short failure
[h264 @ 0x55ee046e9640] mmco: unref short failure
[h264 @ 0x55ee046e9640] mmco: unref short failure
[h264 @ 0x55ee320ecac0] mmco: unref short failure
[h264 @ 0x55ee320ecac0] mmco: unref short failure
[h264 @ 0x55ee3cc1acc0] mmco: unref short failure
[h264 @ 0x55ee3cc1acc0] mmco: unref short failure
 83%|████████▎ | 1620/1945 [5:55:09<2:03:19, 22.77s/it][h264 @ 0x55fcd0c9ae80] mmco: unref short failure
 83%|████████▎ | 1621/1945 [5:55:20<1:43:16, 19.13s/it][h264 @ 0x55fcd52cdac0] mmco: unref short failure
[h264 @ 0x55fcd52cdac0] mmco: unref short failure
 83%|████████▎ | 1622/1945 [5:55:25<1:21:14, 15.09s/it][h264 @ 0x55fccb3c5d00] mmco: unref short failure
 83%|████████▎ | 1623/1945 [5:55:31<1:06:03, 12.31s/it][h264 @ 0x55b92d328b80] mmco: unref short failure
[h264 @ 0x55b92d328b80] mmco: unref short failure
[h264 @ 0x55667f9e4c80] mmco: unref short failure
 83%|████████▎ | 1624/1945 [5:55:37<55:56, 10.46s/it]  [h264 @ 0x55fcd52fecc0] mmco: unref short failure
[h264 @ 0x55fcd52fecc0] mmco: unref short failure
[h264 @ 0x55ee3d3775c0] mmco: unref short failure
[h264 @ 0x55ee3d3775c0] mmco: unref short failure
 84%|████████▎ | 1625/1945 [5:55:43<48:16,  9.05s/it] 84%|████████▎ | 1626/1945 [5:55:49<42:20,  7.97s/it] 84%|████████▎ | 1627/1945 [5:55:54<38:54,  7.34s/it][h264 @ 0x55fcd4683b40] mmco: unref short failure
[h264 @ 0x55fccf9c16c0] mmco: unref short failure
[h264 @ 0x55fccf9c16c0] mmco: unref short failure
[h264 @ 0x55b92b3fcd40] mmco: unref short failure
[h264 @ 0x55b92cf920c0] mmco: unref short failure
[h264 @ 0x55fccf2f3b00] mmco: unref short failure
[h264 @ 0x55667446d3c0] mmco: unref short failure
[h264 @ 0x55667446d3c0] mmco: unref short failure
[h264 @ 0x55b92d8eb4c0] mmco: unref short failure
[h264 @ 0x55b92d8eb4c0] mmco: unref short failure
 84%|████████▎ | 1628/1945 [5:56:44<1:45:30, 19.97s/it][h264 @ 0x55ee3b516c40] mmco: unref short failure
[h264 @ 0x55ee3b516c40] mmco: unref short failure
[h264 @ 0x55ee350a0b00] mmco: unref short failure
 84%|████████▍ | 1629/1945 [5:56:56<1:32:49, 17.62s/it][h264 @ 0x55ee3b516c40] mmco: unref short failure
[h264 @ 0x55ee3b516c40] mmco: unref short failure
[h264 @ 0x55b92d2db600] mmco: unref short failure
[h264 @ 0x55b92d2db600] mmco: unref short failure
 84%|████████▍ | 1630/1945 [5:57:03<1:15:33, 14.39s/it][h264 @ 0x5566849c4b40] mmco: unref short failure
 84%|████████▍ | 1631/1945 [5:57:09<1:02:16, 11.90s/it][h264 @ 0x55ee397a4500] mmco: unref short failure
[h264 @ 0x55ee397a4500] mmco: unref short failure
 84%|████████▍ | 1632/1945 [5:57:15<52:35, 10.08s/it]   84%|████████▍ | 1633/1945 [5:57:20<45:33,  8.76s/it] 84%|████████▍ | 1634/1945 [5:57:27<41:19,  7.97s/it][h264 @ 0x55667e82dc40] mmco: unref short failure
[h264 @ 0x55667e82dc40] mmco: unref short failure
 84%|████████▍ | 1635/1945 [5:57:32<37:18,  7.22s/it][h264 @ 0x55fcd3ee6a80] mmco: unref short failure
[h264 @ 0x55fcd3ee6a80] mmco: unref short failure
[h264 @ 0x55fccad421c0] mmco: unref short failure
[h264 @ 0x55fccad421c0] mmco: unref short failure
[h264 @ 0x5566812ec2c0] mmco: unref short failure
[h264 @ 0x55b8ed49fdc0] mmco: unref short failure
[h264 @ 0x55b8ed49fdc0] mmco: unref short failure
[h264 @ 0x556682c8de80] mmco: unref short failure
[h264 @ 0x55b8eab49040] mmco: unref short failure
[h264 @ 0x55fcd574bc80] mmco: unref short failure
[h264 @ 0x55fcd574bc80] mmco: unref short failure
 84%|████████▍ | 1636/1945 [5:58:22<1:43:15, 20.05s/it][h264 @ 0x55b92a9f1c80] mmco: unref short failure
[h264 @ 0x55ee3f9eddc0] mmco: unref short failure
 84%|████████▍ | 1637/1945 [5:58:36<1:33:43, 18.26s/it] 84%|████████▍ | 1638/1945 [5:58:41<1:13:17, 14.32s/it][h264 @ 0x55fcd98fcf00] mmco: unref short failure
[h264 @ 0x55fcd98fcf00] mmco: unref short failure
 84%|████████▍ | 1639/1945 [5:58:48<1:00:50, 11.93s/it] 84%|████████▍ | 1640/1945 [5:58:53<51:14, 10.08s/it]  [h264 @ 0x556681413700] mmco: unref short failure
[h264 @ 0x556681413700] mmco: unref short failure
 84%|████████▍ | 1641/1945 [5:58:59<44:39,  8.81s/it][h264 @ 0x5566800fe100] mmco: unref short failure
[h264 @ 0x55ee359e8480] mmco: unref short failure
[h264 @ 0x55b92be18fc0] mmco: unref short failure
[h264 @ 0x55b92be18fc0] mmco: unref short failure
 84%|████████▍ | 1642/1945 [5:59:05<39:12,  7.76s/it] 84%|████████▍ | 1643/1945 [5:59:11<36:47,  7.31s/it][h264 @ 0x55fcca7e66c0] mmco: unref short failure
[h264 @ 0x55fcca7e66c0] mmco: unref short failure
[h264 @ 0x55b90b95bac0] mmco: unref short failure
[h264 @ 0x55b90b95bac0] mmco: unref short failure
[h264 @ 0x556677808240] mmco: unref short failure
[h264 @ 0x556677808240] mmco: unref short failure
[h264 @ 0x55fcd2f86f00] mmco: unref short failure
[h264 @ 0x55fcd2f86f00] mmco: unref short failure
[h264 @ 0x55fcd594d680] mmco: unref short failure
[h264 @ 0x55b8f1c52d40] mmco: unref short failure
[h264 @ 0x55ee35c81d80] mmco: unref short failure
[h264 @ 0x55667717abc0] mmco: unref short failure
[h264 @ 0x55667717abc0] mmco: unref short failure
[h264 @ 0x55667861c180] mmco: unref short failure
 85%|████████▍ | 1644/1945 [6:00:05<1:47:27, 21.42s/it] 85%|████████▍ | 1645/1945 [6:00:10<1:22:50, 16.57s/it] 85%|████████▍ | 1646/1945 [6:00:16<1:05:51, 13.22s/it] 85%|████████▍ | 1647/1945 [6:00:21<53:55, 10.86s/it]   85%|████████▍ | 1648/1945 [6:00:27<45:53,  9.27s/it][h264 @ 0x55fcd6ea0cc0] mmco: unref short failure
 85%|████████▍ | 1649/1945 [6:00:32<40:30,  8.21s/it][h264 @ 0x55b92dc23740] mmco: unref short failure
09/07/2024 17:44:32 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.2375991344451904, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04520591348409653, 'loss_ret%tv%ta--finetune_area/loss_area': 2.5586047172546387, 'loss_ret%tv%ta--finetune_area/total_loss': 5.841409683227539}
 85%|████████▍ | 1650/1945 [6:00:37<35:27,  7.21s/it] 85%|████████▍ | 1651/1945 [6:00:43<32:59,  6.73s/it][h264 @ 0x55b90b7e6b80] mmco: unref short failure
[h264 @ 0x55b90b7e6b80] mmco: unref short failure
[h264 @ 0x55ee39b53200] mmco: unref short failure
[h264 @ 0x55ee39b53200] mmco: unref short failure
[h264 @ 0x55b92c4d5400] mmco: unref short failure
[h264 @ 0x55b92b2b2600] mmco: unref short failure
[h264 @ 0x55b92b2b2600] mmco: unref short failure
[h264 @ 0x55b92a8faf00] mmco: unref short failure
[h264 @ 0x55fcdce2e740] mmco: unref short failure
[h264 @ 0x55fcdce2e740] mmco: unref short failure
[h264 @ 0x55fcdd680680] mmco: unref short failure
[h264 @ 0x55fcdd680680] mmco: unref short failure
[h264 @ 0x55fcdaa39e80] mmco: unref short failure
[h264 @ 0x55b8ec909440] mmco: unref short failure
[h264 @ 0x55667895c780] mmco: unref short failure
[h264 @ 0x55667895c780] mmco: unref short failure
[h264 @ 0x55b92f5a7cc0] mmco: unref short failure
 85%|████████▍ | 1652/1945 [6:01:44<1:51:48, 22.90s/it][h264 @ 0x55ee3b3b0840] mmco: unref short failure
[h264 @ 0x556682a64e40] mmco: unref short failure
[h264 @ 0x556682a64e40] mmco: unref short failure
 85%|████████▍ | 1653/1945 [6:01:49<1:26:34, 17.79s/it] 85%|████████▌ | 1654/1945 [6:01:55<1:09:12, 14.27s/it] 85%|████████▌ | 1655/1945 [6:02:02<57:10, 11.83s/it]  [h264 @ 0x55ee3f871e00] mmco: unref short failure
 85%|████████▌ | 1656/1945 [6:02:08<48:50, 10.14s/it] 85%|████████▌ | 1657/1945 [6:02:13<42:03,  8.76s/it][h264 @ 0x55ee40063fc0] mmco: unref short failure
[h264 @ 0x55ee40063fc0] mmco: unref short failure
 85%|████████▌ | 1658/1945 [6:02:19<37:27,  7.83s/it][h264 @ 0x55ee43a7e040] mmco: unref short failure
[h264 @ 0x55ee43a7e040] mmco: unref short failure
 85%|████████▌ | 1659/1945 [6:02:24<33:29,  7.03s/it][h264 @ 0x55ee33981880] mmco: unref short failure
[h264 @ 0x55b931eaff00] mmco: unref short failure
[h264 @ 0x55b931eaff00] mmco: unref short failure
[h264 @ 0x55fcced1f640] mmco: unref short failure
[h264 @ 0x55fcd9a96400] mmco: unref short failure
[h264 @ 0x55fcd9a96400] mmco: unref short failure
[h264 @ 0x556673fb4f80] mmco: unref short failure
[h264 @ 0x55b933ff70c0] mmco: unref short failure
[h264 @ 0x55fcd9b0a980] mmco: unref short failure
 85%|████████▌ | 1660/1945 [6:03:23<1:46:35, 22.44s/it] 85%|████████▌ | 1661/1945 [6:03:28<1:21:56, 17.31s/it][h264 @ 0x55ee3b8c0480] mmco: unref short failure
[h264 @ 0x55b8ee61fd40] mmco: unref short failure
 85%|████████▌ | 1662/1945 [6:03:40<1:14:49, 15.86s/it][h264 @ 0x55fcd760e880] mmco: unref short failure
 86%|████████▌ | 1663/1945 [6:03:45<59:20, 12.63s/it]  [h264 @ 0x55fcd96dc1c0] mmco: unref short failure
[h264 @ 0x55fcd96dc1c0] mmco: unref short failure
 86%|████████▌ | 1664/1945 [6:03:51<48:29, 10.36s/it][h264 @ 0x55667e402680] mmco: unref short failure
[h264 @ 0x55667e402680] mmco: unref short failure
 86%|████████▌ | 1665/1945 [6:03:57<43:17,  9.28s/it] 86%|████████▌ | 1666/1945 [6:04:03<38:09,  8.21s/it] 86%|████████▌ | 1667/1945 [6:04:09<34:31,  7.45s/it][h264 @ 0x55b93187b080] mmco: unref short failure
[h264 @ 0x55b93187b080] mmco: unref short failure
[h264 @ 0x55667f5b43c0] mmco: unref short failure
[h264 @ 0x55667f5b43c0] mmco: unref short failure
[h264 @ 0x5566810f9600] mmco: unref short failure
[h264 @ 0x55fcd13a16c0] mmco: unref short failure
[h264 @ 0x556647954940] mmco: unref short failure
[h264 @ 0x556647954940] mmco: unref short failure
[h264 @ 0x55fc8d8b8d00] mmco: unref short failure
[h264 @ 0x55fc8d8b8d00] mmco: unref short failure
[h264 @ 0x556680e14a40] mmco: unref short failure
[h264 @ 0x556680e14a40] mmco: unref short failure
[h264 @ 0x55fcdcd5fc80] mmco: unref short failure
[h264 @ 0x55fcccdb4d00] mmco: unref short failure
[h264 @ 0x55b8eb7970c0] mmco: unref short failure
[h264 @ 0x55b8eb7970c0] mmco: unref short failure
 86%|████████▌ | 1668/1945 [6:05:05<1:41:34, 22.00s/it][h264 @ 0x55664775d880] mmco: unref short failure
[h264 @ 0x55664775d880] mmco: unref short failure
[h264 @ 0x55b90b40ba00] mmco: unref short failure
[h264 @ 0x55b90b40ba00] mmco: unref short failure
[h264 @ 0x55ee38575cc0] mmco: unref short failure
[h264 @ 0x55ee38575cc0] mmco: unref short failure
 86%|████████▌ | 1669/1945 [6:05:12<1:20:35, 17.52s/it][h264 @ 0x55fcda254d80] mmco: unref short failure
[h264 @ 0x55fcda254d80] mmco: unref short failure
 86%|████████▌ | 1670/1945 [6:05:18<1:05:02, 14.19s/it][h264 @ 0x55ee448a0000] mmco: unref short failure
[h264 @ 0x55b931ebf5c0] mmco: unref short failure
[h264 @ 0x55b931ebf5c0] mmco: unref short failure
[h264 @ 0x55fccae02640] mmco: unref short failure
[h264 @ 0x55fccae02640] mmco: unref short failure
 86%|████████▌ | 1671/1945 [6:05:26<56:01, 12.27s/it]  [h264 @ 0x55b929997e40] mmco: unref short failure
[h264 @ 0x55b929997e40] mmco: unref short failure
 86%|████████▌ | 1672/1945 [6:05:31<46:05, 10.13s/it] 86%|████████▌ | 1673/1945 [6:05:36<39:14,  8.65s/it] 86%|████████▌ | 1674/1945 [6:05:42<35:45,  7.92s/it][h264 @ 0x55fccbf9dd80] mmco: unref short failure
 86%|████████▌ | 1675/1945 [6:05:48<32:43,  7.27s/it][h264 @ 0x55b8eff84b80] mmco: unref short failure
[h264 @ 0x55b8eff84b80] mmco: unref short failure
[h264 @ 0x55ee3fb6db00] mmco: unref short failure
[h264 @ 0x556684f17680] mmco: unref short failure
[h264 @ 0x556684f17680] mmco: unref short failure
[h264 @ 0x55ee360fe040] mmco: unref short failure
[h264 @ 0x55667b48b280] mmco: unref short failure
[h264 @ 0x55667b48b280] mmco: unref short failure
[h264 @ 0x55ee33e5ba00] mmco: unref short failure
[h264 @ 0x55ee33e5ba00] mmco: unref short failure
[h264 @ 0x55ee33e5ba00] mmco: unref short failure
[h264 @ 0x55ee33e5ba00] mmco: unref short failure
 86%|████████▌ | 1676/1945 [6:06:42<1:34:44, 21.13s/it][h264 @ 0x55fcd784df80] mmco: unref short failure
 86%|████████▌ | 1677/1945 [6:06:48<1:14:01, 16.57s/it][h264 @ 0x55fcdad24800] mmco: unref short failure
[h264 @ 0x55ee41e65180] mmco: unref short failure
[h264 @ 0x55ee41e65180] mmco: unref short failure
 86%|████████▋ | 1678/1945 [6:06:58<1:05:53, 14.81s/it][h264 @ 0x5566825b7080] mmco: unref short failure
[h264 @ 0x5566825b7080] mmco: unref short failure
[h264 @ 0x55b8eddd07c0] mmco: unref short failure
[h264 @ 0x55b8eddd07c0] mmco: unref short failure
 86%|████████▋ | 1679/1945 [6:07:04<53:38, 12.10s/it]  [h264 @ 0x55ee3e6afd00] mmco: unref short failure
[h264 @ 0x55ee3e6afd00] mmco: unref short failure
[h264 @ 0x55ee3e6afd00] mmco: unref short failure
[h264 @ 0x55ee3e6afd00] mmco: unref short failure
 86%|████████▋ | 1680/1945 [6:07:11<46:12, 10.46s/it][h264 @ 0x55ee32ad1b40] mmco: unref short failure
[h264 @ 0x55ee32ad1b40] mmco: unref short failure
[h264 @ 0x55667d4f4e00] mmco: unref short failure
[h264 @ 0x55667d4f4e00] mmco: unref short failure
 86%|████████▋ | 1681/1945 [6:07:17<40:45,  9.26s/it][h264 @ 0x55b92d406500] mmco: unref short failure
[h264 @ 0x55ee405b8700] mmco: unref short failure
[h264 @ 0x55ee405b8700] mmco: unref short failure
 86%|████████▋ | 1682/1945 [6:07:23<36:21,  8.29s/it][h264 @ 0x55667c934f80] mmco: unref short failure
[h264 @ 0x55667c934f80] mmco: unref short failure
[h264 @ 0x55b8eeddc240] mmco: unref short failure
[h264 @ 0x55b9312c7a00] mmco: unref short failure
[h264 @ 0x55b9312c7a00] mmco: unref short failure
[h264 @ 0x55b9312c7a00] mmco: unref short failure
[h264 @ 0x55b9312c7a00] mmco: unref short failure
[h264 @ 0x55fcdddb2bc0] mmco: unref short failure
[h264 @ 0x55fcdddb2bc0] mmco: unref short failure
 87%|████████▋ | 1683/1945 [6:07:30<33:56,  7.77s/it][h264 @ 0x55ee3977e1c0] mmco: unref short failure
[h264 @ 0x55ee3977e1c0] mmco: unref short failure
[h264 @ 0x55fcd44fce40] mmco: unref short failure
[h264 @ 0x55fcd44fce40] mmco: unref short failure
[h264 @ 0x556684a51cc0] mmco: unref short failure
[h264 @ 0x556684a51cc0] mmco: unref short failure
[h264 @ 0x55fcce0f8e80] mmco: unref short failure
[h264 @ 0x55fcce0f8e80] mmco: unref short failure
[h264 @ 0x55b92a245740] mmco: unref short failure
[h264 @ 0x55b931a55c80] mmco: unref short failure
[h264 @ 0x55667e586b40] mmco: unref short failure
[h264 @ 0x55667e586b40] mmco: unref short failure
[h264 @ 0x55667d1b0480] mmco: unref short failure
[h264 @ 0x55667d1b0480] mmco: unref short failure
 87%|████████▋ | 1684/1945 [6:08:15<1:22:06, 18.88s/it] 87%|████████▋ | 1685/1945 [6:08:21<1:05:06, 15.03s/it][h264 @ 0x55b932a15840] mmco: unref short failure
[h264 @ 0x55fcdd1a6d00] mmco: unref short failure
 87%|████████▋ | 1686/1945 [6:08:36<1:05:24, 15.15s/it][h264 @ 0x55ee42f6c2c0] mmco: unref short failure
[h264 @ 0x55ee42f6c2c0] mmco: unref short failure
 87%|████████▋ | 1687/1945 [6:08:42<53:18, 12.40s/it]   87%|████████▋ | 1688/1945 [6:08:47<44:10, 10.31s/it][h264 @ 0x55b8eda48bc0] mmco: unref short failure
[h264 @ 0x55b8eda48bc0] mmco: unref short failure
[h264 @ 0x55b8eda48bc0] mmco: unref short failure
[h264 @ 0x55b8eda48bc0] mmco: unref short failure
[h264 @ 0x55b92f5a7cc0] mmco: unref short failure
[h264 @ 0x55ee3f594a00] mmco: unref short failure
[h264 @ 0x55ee3f594a00] mmco: unref short failure
 87%|████████▋ | 1689/1945 [6:08:53<37:43,  8.84s/it] 87%|████████▋ | 1690/1945 [6:08:59<34:33,  8.13s/it] 87%|████████▋ | 1691/1945 [6:09:04<30:36,  7.23s/it][h264 @ 0x55fcdb6de3c0] mmco: unref short failure
[h264 @ 0x55fcdb6de3c0] mmco: unref short failure
[h264 @ 0x55b92cc728c0] mmco: unref short failure
[h264 @ 0x55b92cc728c0] mmco: unref short failure
[h264 @ 0x55ee42435fc0] mmco: unref short failure
[h264 @ 0x55ee42435fc0] mmco: unref short failure
 87%|████████▋ | 1692/1945 [6:09:50<1:18:27, 18.61s/it][h264 @ 0x556685c4dcc0] mmco: unref short failure
 87%|████████▋ | 1693/1945 [6:09:56<1:02:47, 14.95s/it] 87%|████████▋ | 1694/1945 [6:10:17<1:09:58, 16.73s/it] 87%|████████▋ | 1695/1945 [6:10:22<55:43, 13.38s/it]   87%|████████▋ | 1696/1945 [6:10:28<46:17, 11.16s/it] 87%|████████▋ | 1697/1945 [6:10:34<38:47,  9.39s/it] 87%|████████▋ | 1698/1945 [6:10:39<33:41,  8.19s/it][h264 @ 0x5566855b1040] mmco: unref short failure
[h264 @ 0x5566855b1040] mmco: unref short failure
 87%|████████▋ | 1699/1945 [6:10:44<29:46,  7.26s/it][h264 @ 0x55fcd20fcf80] mmco: unref short failure
[h264 @ 0x55fcd20fcf80] mmco: unref short failure
09/07/2024 17:55:19 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.4172959327697754, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04443066939711571, 'loss_ret%tv%ta--finetune_area/loss_area': 2.444911479949951, 'loss_ret%tv%ta--finetune_area/total_loss': 5.906638145446777}
[h264 @ 0x55ee38079cc0] mmco: unref short failure
 87%|████████▋ | 1700/1945 [6:11:24<1:09:36, 17.05s/it][h264 @ 0x556686328880] mmco: unref short failure
[h264 @ 0x556686328880] mmco: unref short failure
 87%|████████▋ | 1701/1945 [6:11:33<59:56, 14.74s/it]  [h264 @ 0x55b9316fd5c0] mmco: unref short failure
[h264 @ 0x55b9316fd5c0] mmco: unref short failure
[h264 @ 0x55ee39ef9d00] mmco: unref short failure
[h264 @ 0x55b8eb131b40] mmco: unref short failure
[h264 @ 0x55b8eb131b40] mmco: unref short failure
[h264 @ 0x55ee421decc0] mmco: unref short failure
 88%|████████▊ | 1702/1945 [6:11:52<1:04:09, 15.84s/it][h264 @ 0x55ee43a07340] mmco: unref short failure
[h264 @ 0x55ee43a07340] mmco: unref short failure
 88%|████████▊ | 1703/1945 [6:11:58<52:30, 13.02s/it]  [h264 @ 0x55ee3aa73540] mmco: unref short failure
[h264 @ 0x55ee3aa73540] mmco: unref short failure
[h264 @ 0x55ee3aa73540] mmco: unref short failure
[h264 @ 0x55ee3aa73540] mmco: unref short failure
 88%|████████▊ | 1704/1945 [6:12:04<43:19, 10.79s/it] 88%|████████▊ | 1705/1945 [6:12:10<37:11,  9.30s/it] 88%|████████▊ | 1706/1945 [6:12:15<31:52,  8.00s/it][h264 @ 0x55b932c2b040] mmco: unref short failure
[h264 @ 0x55b932c2b040] mmco: unref short failure
 88%|████████▊ | 1707/1945 [6:12:21<29:14,  7.37s/it][h264 @ 0x55b90cbe93c0] mmco: unref short failure
[h264 @ 0x55667a5ebe80] mmco: unref short failure
[h264 @ 0x5566475f6980] mmco: unref short failure
 88%|████████▊ | 1708/1945 [6:13:03<1:11:11, 18.02s/it] 88%|████████▊ | 1709/1945 [6:13:10<57:02, 14.50s/it]  [h264 @ 0x55b92c41bf40] mmco: unref short failure
[h264 @ 0x55fccbbee880] mmco: unref short failure
[h264 @ 0x55ee3ec01000] mmco: unref short failure
[h264 @ 0x55ee3ec01000] mmco: unref short failure
[h264 @ 0x55fccbbee880] mmco: unref short failure
[h264 @ 0x55b932c47200] mmco: unref short failure
[h264 @ 0x55b932c47200] mmco: unref short failure
 88%|████████▊ | 1710/1945 [6:13:33<1:07:17, 17.18s/it][h264 @ 0x55ee03934800] mmco: unref short failure
[h264 @ 0x55ee03934800] mmco: unref short failure
[h264 @ 0x55fcce6ad3c0] mmco: unref short failure
[h264 @ 0x55fcce6ad3c0] mmco: unref short failure
 88%|████████▊ | 1711/1945 [6:13:39<54:07, 13.88s/it]  [h264 @ 0x55fcd6dbd740] mmco: unref short failure
[h264 @ 0x55fcd6dbd740] mmco: unref short failure
[h264 @ 0x55b92aa9b400] mmco: unref short failure
[h264 @ 0x55b92aa9b400] mmco: unref short failure
[h264 @ 0x55b93484f880] mmco: unref short failure
 88%|████████▊ | 1712/1945 [6:13:45<44:29, 11.46s/it][h264 @ 0x556646d71f00] mmco: unref short failure
 88%|████████▊ | 1713/1945 [6:13:51<38:15,  9.89s/it] 88%|████████▊ | 1714/1945 [6:13:57<33:10,  8.62s/it][h264 @ 0x55b92f48ed80] mmco: unref short failure
[h264 @ 0x55b92f48ed80] mmco: unref short failure
[h264 @ 0x55ee3ffbad00] mmco: unref short failure
[h264 @ 0x5566474ea340] mmco: unref short failure
[h264 @ 0x5566474ea340] mmco: unref short failure
 88%|████████▊ | 1715/1945 [6:14:03<29:57,  7.82s/it][h264 @ 0x55ee04a66bc0] mmco: unref short failure
[h264 @ 0x55b8ee23cac0] mmco: unref short failure
[h264 @ 0x55b8ee23cac0] mmco: unref short failure
[h264 @ 0x55b933f21040] mmco: unref short failure
[h264 @ 0x55fcd8f60480] mmco: unref short failure
[h264 @ 0x55fcd8f60480] mmco: unref short failure
[h264 @ 0x55b90c8b1040] mmco: unref short failure
[h264 @ 0x55b90c8b1040] mmco: unref short failure
[h264 @ 0x55b90cbed0c0] mmco: unref short failure
[h264 @ 0x55667353e740] mmco: unref short failure
[h264 @ 0x55b90a1fcc00] mmco: unref short failure
[h264 @ 0x55fccae02640] mmco: unref short failure
[h264 @ 0x55fccae02640] mmco: unref short failure
 88%|████████▊ | 1716/1945 [6:14:48<1:12:48, 19.08s/it][h264 @ 0x55ee446b4640] mmco: unref short failure
[h264 @ 0x55ee446b4640] mmco: unref short failure
[h264 @ 0x55ee446b4640] mmco: unref short failure
[h264 @ 0x55ee446b4640] mmco: unref short failure
[h264 @ 0x556688127040] mmco: unref short failure
 88%|████████▊ | 1717/1945 [6:14:54<56:48, 14.95s/it]  [h264 @ 0x55b90a098340] mmco: unref short failure
[h264 @ 0x55ee3db97c00] mmco: unref short failure
 88%|████████▊ | 1718/1945 [6:15:11<59:47, 15.81s/it][h264 @ 0x55b8f073c780] mmco: unref short failure
[h264 @ 0x55fccbf9e440] mmco: unref short failure
[h264 @ 0x55fccbf9e440] mmco: unref short failure
 88%|████████▊ | 1719/1945 [6:15:17<48:05, 12.77s/it][h264 @ 0x55b8ee1bd300] mmco: unref short failure
 88%|████████▊ | 1720/1945 [6:15:23<40:36, 10.83s/it] 88%|████████▊ | 1721/1945 [6:15:29<34:48,  9.33s/it][h264 @ 0x55b8ebd45cc0] mmco: unref short failure
 89%|████████▊ | 1722/1945 [6:15:36<31:22,  8.44s/it] 89%|████████▊ | 1723/1945 [6:15:42<28:58,  7.83s/it][h264 @ 0x55b8f073c6c0] mmco: unref short failure
[h264 @ 0x55b90bc91880] mmco: unref short failure
[h264 @ 0x55b92c41b680] mmco: unref short failure
[h264 @ 0x55b92c41b680] mmco: unref short failure
[h264 @ 0x5566862c2c40] mmco: unref short failure
[h264 @ 0x556682f4d280] mmco: unref short failure
[h264 @ 0x556682f4d280] mmco: unref short failure
[h264 @ 0x55fcd25d2c40] mmco: unref short failure
[h264 @ 0x55fcd25d2c40] mmco: unref short failure
 89%|████████▊ | 1724/1945 [6:16:27<1:10:06, 19.04s/it] 89%|████████▊ | 1725/1945 [6:16:34<56:31, 15.41s/it]  [h264 @ 0x556683c65100] mmco: unref short failure
[h264 @ 0x556683c65100] mmco: unref short failure
[h264 @ 0x556688c6d0c0] mmco: unref short failure
[h264 @ 0x55b8eab85400] mmco: unref short failure
[h264 @ 0x55b8ecbf39c0] mmco: unref short failure
[h264 @ 0x55fcdea56580] mmco: unref short failure
 89%|████████▊ | 1726/1945 [6:16:53<1:00:26, 16.56s/it] 89%|████████▉ | 1727/1945 [6:16:59<48:04, 13.23s/it]   89%|████████▉ | 1728/1945 [6:17:05<40:03, 11.08s/it] 89%|████████▉ | 1729/1945 [6:17:11<34:17,  9.52s/it][h264 @ 0x55ee314e62c0] mmco: unref short failure
[h264 @ 0x55ee314e62c0] mmco: unref short failure
 89%|████████▉ | 1730/1945 [6:17:16<29:57,  8.36s/it][h264 @ 0x55b90b959b00] mmco: unref short failure
 89%|████████▉ | 1731/1945 [6:17:22<27:13,  7.63s/it][h264 @ 0x55ee312435c0] mmco: unref short failure
[h264 @ 0x55ee312435c0] mmco: unref short failure
[h264 @ 0x55ee38746040] mmco: unref short failure
[h264 @ 0x55ee38746040] mmco: unref short failure
[h264 @ 0x55ee38746040] mmco: unref short failure
[h264 @ 0x55ee38746040] mmco: unref short failure
[h264 @ 0x55ee38746040] mmco: unref short failure
[h264 @ 0x55ee38746040] mmco: unref short failure
[h264 @ 0x55b8ecd476c0] mmco: unref short failure
[h264 @ 0x55b90b59b880] mmco: unref short failure
[h264 @ 0x55b90b9899c0] mmco: unref short failure
[h264 @ 0x55b90b9899c0] mmco: unref short failure
[h264 @ 0x55b90c8b1780] mmco: unref short failure
[h264 @ 0x55b90c8b1780] mmco: unref short failure
[h264 @ 0x55ee3293c480] mmco: unref short failure
[h264 @ 0x55ee3293c480] mmco: unref short failure
[h264 @ 0x55b933ef1300] mmco: unref short failure
[h264 @ 0x55b933ef1300] mmco: unref short failure
[h264 @ 0x55667bea24c0] mmco: unref short failure
[h264 @ 0x55667bea24c0] mmco: unref short failure
[h264 @ 0x55b8f0650dc0] mmco: unref short failure
[h264 @ 0x55b8f0650dc0] mmco: unref short failure
 89%|████████▉ | 1732/1945 [6:18:06<1:05:36, 18.48s/it][h264 @ 0x5566809ba6c0] mmco: unref short failure
[h264 @ 0x5566809ba6c0] mmco: unref short failure
 89%|████████▉ | 1733/1945 [6:18:11<51:07, 14.47s/it]  [h264 @ 0x55b909c4ed40] mmco: unref short failure
[h264 @ 0x556673dd1b40] mmco: unref short failure
[h264 @ 0x55fc8d1122c0] mmco: unref short failure
[h264 @ 0x55b8f0e94e00] mmco: unref short failure
[h264 @ 0x55b8f0e94e00] mmco: unref short failure
 89%|████████▉ | 1734/1945 [6:18:32<57:51, 16.45s/it][h264 @ 0x556682c39500] mmco: unref short failure
[h264 @ 0x556682c39500] mmco: unref short failure
 89%|████████▉ | 1735/1945 [6:18:39<46:49, 13.38s/it][h264 @ 0x55b8f0f9e640] mmco: unref short failure
[h264 @ 0x55b8f0f9e640] mmco: unref short failure
[h264 @ 0x55b934bd8080] mmco: unref short failure
[h264 @ 0x55b934bd8080] mmco: unref short failure
 89%|████████▉ | 1736/1945 [6:18:45<39:43, 11.40s/it] 89%|████████▉ | 1737/1945 [6:18:51<33:35,  9.69s/it][h264 @ 0x55ee0414fc40] mmco: unref short failure
[h264 @ 0x55fccbf3da40] mmco: unref short failure
 89%|████████▉ | 1738/1945 [6:18:56<28:56,  8.39s/it][h264 @ 0x55667f273440] mmco: unref short failure
 89%|████████▉ | 1739/1945 [6:19:02<26:03,  7.59s/it][h264 @ 0x55fcdf863600] mmco: unref short failure
[h264 @ 0x55fcdf863600] mmco: unref short failure
[h264 @ 0x5566858f0dc0] mmco: unref short failure
[h264 @ 0x5566858f0dc0] mmco: unref short failure
[h264 @ 0x55ee3fde8b00] mmco: unref short failure
[h264 @ 0x55ee3fde8b00] mmco: unref short failure
[h264 @ 0x556678425940] mmco: unref short failure
[h264 @ 0x556678425940] mmco: unref short failure
[h264 @ 0x556678425940] mmco: unref short failure
[h264 @ 0x55b932342440] mmco: unref short failure
[h264 @ 0x55b932342440] mmco: unref short failure
[h264 @ 0x55ee2f70fb80] mmco: unref short failure
[h264 @ 0x55ee046abb00] mmco: unref short failure
 89%|████████▉ | 1740/1945 [6:19:48<1:04:40, 18.93s/it] 90%|████████▉ | 1741/1945 [6:19:53<50:23, 14.82s/it]  [h264 @ 0x55b9316fda40] mmco: unref short failure
[h264 @ 0x55b9316fda40] mmco: unref short failure
[h264 @ 0x55ee30302380] mmco: unref short failure
[h264 @ 0x55b934f65a40] mmco: unref short failure
[h264 @ 0x55b934f65a40] mmco: unref short failure
[h264 @ 0x55ee427d06c0] mmco: unref short failure
[h264 @ 0x55ee427d06c0] mmco: unref short failure
[h264 @ 0x556679266600] mmco: unref short failure
[h264 @ 0x55667bea2b80] mmco: unref short failure
[h264 @ 0x55667bea2b80] mmco: unref short failure
[h264 @ 0x55667bea2b80] mmco: unref short failure
[h264 @ 0x55667bea2b80] mmco: unref short failure
[h264 @ 0x55668b9f7180] mmco: unref short failure
 90%|████████▉ | 1742/1945 [6:20:19<1:01:47, 18.27s/it] 90%|████████▉ | 1743/1945 [6:20:25<48:33, 14.42s/it]   90%|████████▉ | 1744/1945 [6:20:31<39:48, 11.88s/it] 90%|████████▉ | 1745/1945 [6:20:36<33:01,  9.91s/it] 90%|████████▉ | 1746/1945 [6:20:41<28:31,  8.60s/it] 90%|████████▉ | 1747/1945 [6:20:46<24:53,  7.54s/it][h264 @ 0x55b933f21500] mmco: unref short failure
[h264 @ 0x55b933f21500] mmco: unref short failure
[h264 @ 0x556676b9da00] mmco: unref short failure
[h264 @ 0x55fcd3cc8600] mmco: unref short failure
[h264 @ 0x55fcd3cc8600] mmco: unref short failure
[h264 @ 0x55b9321b97c0] mmco: unref short failure
[h264 @ 0x55b9321b97c0] mmco: unref short failure
[h264 @ 0x55ee40ecafc0] mmco: unref short failure
 90%|████████▉ | 1748/1945 [6:21:18<48:38, 14.82s/it][h264 @ 0x55b8edaf01c0] mmco: unref short failure
 90%|████████▉ | 1749/1945 [6:21:24<39:20, 12.04s/it][h264 @ 0x55ee03d1ae40] mmco: unref short failure
[h264 @ 0x55ee03d1ae40] mmco: unref short failure
[h264 @ 0x55ee303fc500] mmco: unref short failure
[h264 @ 0x55ee303fc500] mmco: unref short failure
[h264 @ 0x556681466ac0] mmco: unref short failure
[h264 @ 0x55ee035a26c0] mmco: unref short failure
09/07/2024 18:05:57 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.139500141143799, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04138047248125076, 'loss_ret%tv%ta--finetune_area/loss_area': 2.475311756134033, 'loss_ret%tv%ta--finetune_area/total_loss': 5.656192302703857}
 90%|████████▉ | 1750/1945 [6:22:02<1:04:57, 19.99s/it] 90%|█████████ | 1751/1945 [6:22:08<51:07, 15.81s/it]  [h264 @ 0x55ee2fe9f240] mmco: unref short failure
[h264 @ 0x55ee2fe9f240] mmco: unref short failure
[h264 @ 0x55ee2fe9f240] mmco: unref short failure
[h264 @ 0x55fccbe38700] mmco: unref short failure
 90%|█████████ | 1752/1945 [6:22:14<41:19, 12.84s/it] 90%|█████████ | 1753/1945 [6:22:20<34:02, 10.64s/it] 90%|█████████ | 1754/1945 [6:22:26<29:15,  9.19s/it][h264 @ 0x55fccf02fd80] mmco: unref short failure
[h264 @ 0x55fccf02fd80] mmco: unref short failure
 90%|█████████ | 1755/1945 [6:22:31<25:46,  8.14s/it][h264 @ 0x55b92928c480] mmco: unref short failure
[h264 @ 0x55b92928c480] mmco: unref short failure
[h264 @ 0x55ee3a924b00] mmco: unref short failure
[h264 @ 0x55b909de2f00] mmco: unref short failure
[h264 @ 0x55b909de2f00] mmco: unref short failure
[h264 @ 0x55b9321b9380] mmco: unref short failure
[h264 @ 0x55b9321b9380] mmco: unref short failure
[h264 @ 0x55ee34c0eb40] mmco: unref short failure
[h264 @ 0x55ee34c0eb40] mmco: unref short failure
[h264 @ 0x55b8efe3e0c0] mmco: unref short failure
[h264 @ 0x55b8efe3e0c0] mmco: unref short failure
 90%|█████████ | 1756/1945 [6:22:59<44:27, 14.11s/it][h264 @ 0x55ee3ab16ac0] mmco: unref short failure
[h264 @ 0x55ee3ab16ac0] mmco: unref short failure
 90%|█████████ | 1757/1945 [6:23:06<36:50, 11.76s/it][h264 @ 0x55fcce4bfc40] mmco: unref short failure
[h264 @ 0x55b8ecd83340] mmco: unref short failure
[h264 @ 0x556677bf2d00] mmco: unref short failure
[h264 @ 0x556677bf2d00] mmco: unref short failure
[h264 @ 0x55b8f0706440] mmco: unref short failure
[h264 @ 0x55b8f0706440] mmco: unref short failure
[h264 @ 0x55668a541040] mmco: unref short failure
[h264 @ 0x55668a541040] mmco: unref short failure
 90%|█████████ | 1758/1945 [6:23:46<1:03:23, 20.34s/it][h264 @ 0x55ee0401b100] mmco: unref short failure
[h264 @ 0x55ee0401b100] mmco: unref short failure
[h264 @ 0x55b90a308580] mmco: unref short failure
 90%|█████████ | 1759/1945 [6:23:53<50:17, 16.23s/it]  [h264 @ 0x5566886cce00] mmco: unref short failure
[h264 @ 0x55fcdc9ffc00] mmco: unref short failure
[h264 @ 0x55fcdc9ffc00] mmco: unref short failure
 90%|█████████ | 1760/1945 [6:23:59<40:40, 13.19s/it][h264 @ 0x55b9321b9380] mmco: unref short failure
[h264 @ 0x55b9321b9380] mmco: unref short failure
 91%|█████████ | 1761/1945 [6:24:05<34:02, 11.10s/it][h264 @ 0x55fcddfcaa00] mmco: unref short failure
 91%|█████████ | 1762/1945 [6:24:13<30:39, 10.05s/it] 91%|█████████ | 1763/1945 [6:24:18<26:22,  8.70s/it][h264 @ 0x55b8eb0fc440] mmco: unref short failure
[h264 @ 0x55b8eb0fc440] mmco: unref short failure
[h264 @ 0x55667da44e40] mmco: unref short failure
[h264 @ 0x55667da44e40] mmco: unref short failure
[h264 @ 0x55ee2fd96740] mmco: unref short failure
[h264 @ 0x55ee2fd96740] mmco: unref short failure
 91%|█████████ | 1764/1945 [6:24:41<38:48, 12.86s/it] 91%|█████████ | 1765/1945 [6:24:46<31:57, 10.65s/it][h264 @ 0x55ee31d41c00] mmco: unref short failure
[h264 @ 0x55ee31d41c00] mmco: unref short failure
[h264 @ 0x55b92f7c9500] mmco: unref short failure
[h264 @ 0x55b90bf3c880] mmco: unref short failure
[h264 @ 0x55b90bf3c880] mmco: unref short failure
[h264 @ 0x55fcd18255c0] mmco: unref short failure
[h264 @ 0x55fcd18255c0] mmco: unref short failure
[h264 @ 0x55ee370fedc0] mmco: unref short failure
[h264 @ 0x55ee33e3a800] mmco: unref short failure
[h264 @ 0x55ee33e3a800] mmco: unref short failure
 91%|█████████ | 1766/1945 [6:25:28<59:27, 19.93s/it][h264 @ 0x55fccce40d40] mmco: unref short failure
[h264 @ 0x55fccce40d40] mmco: unref short failure
 91%|█████████ | 1767/1945 [6:25:34<47:02, 15.86s/it][h264 @ 0x55b8ed8ae980] mmco: unref short failure
[h264 @ 0x55b8ed8ae980] mmco: unref short failure
 91%|█████████ | 1768/1945 [6:25:39<37:30, 12.72s/it][h264 @ 0x55b90b5d0080] mmco: unref short failure
[h264 @ 0x55b90b5d0080] mmco: unref short failure
 91%|█████████ | 1769/1945 [6:25:45<30:48, 10.50s/it][h264 @ 0x55b92bd0fd00] mmco: unref short failure
[h264 @ 0x55b92bd0fd00] mmco: unref short failure
 91%|█████████ | 1770/1945 [6:25:52<27:24,  9.40s/it] 91%|█████████ | 1771/1945 [6:25:57<24:10,  8.34s/it][h264 @ 0x55ee044e3980] mmco: unref short failure
[h264 @ 0x55ee044e3980] mmco: unref short failure
[h264 @ 0x55b8ee050ac0] mmco: unref short failure
[h264 @ 0x55ee323d93c0] mmco: unref short failure
[h264 @ 0x55fc8d53a040] mmco: unref short failure
[h264 @ 0x55ee42f6b640] mmco: unref short failure
[h264 @ 0x55ee42f6b640] mmco: unref short failure
 91%|█████████ | 1772/1945 [6:26:16<32:32, 11.29s/it][h264 @ 0x55b8ec42bb40] mmco: unref short failure
[h264 @ 0x55b8ec42bb40] mmco: unref short failure
[h264 @ 0x556673aba1c0] mmco: unref short failure
 91%|█████████ | 1773/1945 [6:26:24<30:02, 10.48s/it][h264 @ 0x55667aab48c0] mmco: unref short failure
[h264 @ 0x55fce1cee180] mmco: unref short failure
[h264 @ 0x55fce1cee180] mmco: unref short failure
[h264 @ 0x556646c9f400] mmco: unref short failure
[h264 @ 0x556646c9f400] mmco: unref short failure
[h264 @ 0x55fcd0a94d40] mmco: unref short failure
[h264 @ 0x55fcd0a94d40] mmco: unref short failure
 91%|█████████ | 1774/1945 [6:27:09<58:50, 20.65s/it] 91%|█████████▏| 1775/1945 [6:27:15<45:58, 16.23s/it] 91%|█████████▏| 1776/1945 [6:27:20<36:43, 13.04s/it] 91%|█████████▏| 1777/1945 [6:27:25<29:48, 10.65s/it][h264 @ 0x55fc8d404500] mmco: unref short failure
[h264 @ 0x55ee45bcab80] mmco: unref short failure
[h264 @ 0x55ee45bcab80] mmco: unref short failure
 91%|█████████▏| 1778/1945 [6:27:31<25:55,  9.32s/it] 91%|█████████▏| 1779/1945 [6:27:37<22:43,  8.21s/it][h264 @ 0x55b932981b80] mmco: unref short failure
[h264 @ 0x55668843f900] mmco: unref short failure
[h264 @ 0x55fc8cd44b00] mmco: unref short failure
[h264 @ 0x55fc8cd44b00] mmco: unref short failure
[h264 @ 0x55fc8cd44b00] mmco: unref short failure
[h264 @ 0x55fc8cd44b00] mmco: unref short failure
[h264 @ 0x55668945fa80] mmco: unref short failure
[h264 @ 0x55668945fa80] mmco: unref short failure
 92%|█████████▏| 1780/1945 [6:27:51<27:13,  9.90s/it] 92%|█████████▏| 1781/1945 [6:28:05<30:16, 11.08s/it][h264 @ 0x55b929178100] mmco: unref short failure
[h264 @ 0x55b929178100] mmco: unref short failure
[h264 @ 0x55ee040235c0] mmco: unref short failure
[h264 @ 0x556684aaccc0] mmco: unref short failure
[h264 @ 0x55b90b71c200] mmco: unref short failure
[h264 @ 0x55b90b71c200] mmco: unref short failure
 92%|█████████▏| 1782/1945 [6:28:56<1:02:48, 23.12s/it][h264 @ 0x55ee45ef0f80] mmco: unref short failure
[h264 @ 0x55ee45ef0f80] mmco: unref short failure
 92%|█████████▏| 1783/1945 [6:29:02<48:24, 17.93s/it]  [h264 @ 0x55ee446a6e80] mmco: unref short failure
[h264 @ 0x55ee446a6e80] mmco: unref short failure
[h264 @ 0x55ee446a6e80] mmco: unref short failure
[h264 @ 0x55ee446a6e80] mmco: unref short failure
 92%|█████████▏| 1784/1945 [6:29:09<39:37, 14.77s/it][h264 @ 0x55ee04023c80] mmco: unref short failure
[h264 @ 0x55ee04023c80] mmco: unref short failure
[h264 @ 0x55b8eac3edc0] mmco: unref short failure
[h264 @ 0x55fcdf070380] mmco: unref short failure
[h264 @ 0x55fcdf070380] mmco: unref short failure
 92%|█████████▏| 1785/1945 [6:29:14<31:46, 11.92s/it][h264 @ 0x55fcced1b680] mmco: unref short failure
 92%|█████████▏| 1786/1945 [6:29:21<27:09, 10.25s/it][h264 @ 0x55fce06ec900] mmco: unref short failure
[h264 @ 0x55ee44236cc0] mmco: unref short failure
[h264 @ 0x55ee44236cc0] mmco: unref short failure
 92%|█████████▏| 1787/1945 [6:29:26<23:12,  8.81s/it] 92%|█████████▏| 1788/1945 [6:29:32<20:25,  7.81s/it] 92%|█████████▏| 1789/1945 [6:29:42<22:35,  8.69s/it][h264 @ 0x55fcd776f4c0] mmco: unref short failure
[h264 @ 0x55fcd776f4c0] mmco: unref short failure
[h264 @ 0x556686477e00] mmco: unref short failure
[h264 @ 0x55ee427b7740] mmco: unref short failure
[h264 @ 0x55667a95f400] mmco: unref short failure
[h264 @ 0x556675a7da80] mmco: unref short failure
[h264 @ 0x55fcd4c52b00] mmco: unref short failure
[h264 @ 0x55fcd4c52b00] mmco: unref short failure
[h264 @ 0x55fcd4c52b00] mmco: unref short failure
[h264 @ 0x55fcd4c52b00] mmco: unref short failure
[h264 @ 0x556676d08f40] mmco: unref short failure
[h264 @ 0x556676d08f40] mmco: unref short failure
[h264 @ 0x55b8f13a9140] mmco: unref short failure
[h264 @ 0x55ee03f08300] mmco: unref short failure
[h264 @ 0x55ee03f08300] mmco: unref short failure
 92%|█████████▏| 1790/1945 [6:30:36<57:00, 22.07s/it] 92%|█████████▏| 1791/1945 [6:30:42<44:17, 17.26s/it] 92%|█████████▏| 1792/1945 [6:30:47<34:40, 13.60s/it] 92%|█████████▏| 1793/1945 [6:30:53<28:36, 11.29s/it] 92%|█████████▏| 1794/1945 [6:30:58<23:46,  9.45s/it] 92%|█████████▏| 1795/1945 [6:31:03<20:36,  8.24s/it][h264 @ 0x55b92a571380] mmco: unref short failure
[h264 @ 0x55b92a571380] mmco: unref short failure
[h264 @ 0x55b930ec0ac0] mmco: unref short failure
[h264 @ 0x55b930ec0ac0] mmco: unref short failure
 92%|█████████▏| 1796/1945 [6:31:10<19:11,  7.73s/it] 92%|█████████▏| 1797/1945 [6:31:23<23:11,  9.40s/it][h264 @ 0x55667f56a3c0] mmco: unref short failure
[h264 @ 0x55667f56a3c0] mmco: unref short failure
[h264 @ 0x55667f56a3c0] mmco: unref short failure
[h264 @ 0x55667f56a3c0] mmco: unref short failure
[h264 @ 0x55ee355e67c0] mmco: unref short failure
[h264 @ 0x55ee355e67c0] mmco: unref short failure
[h264 @ 0x55fccfc432c0] mmco: unref short failure
[h264 @ 0x55fccfc432c0] mmco: unref short failure
[h264 @ 0x55fccfc432c0] mmco: unref short failure
[h264 @ 0x556688d03a40] mmco: unref short failure
[h264 @ 0x55667beaca40] mmco: unref short failure
[h264 @ 0x55fccc52f540] mmco: unref short failure
[h264 @ 0x55ee3293c8c0] mmco: unref short failure
[h264 @ 0x55ee3293c8c0] mmco: unref short failure
[h264 @ 0x55b8eac429c0] mmco: unref short failure
[h264 @ 0x55fce1cee180] mmco: unref short failure
[h264 @ 0x55fce1cee180] mmco: unref short failure
[h264 @ 0x55ee37af4f00] mmco: unref short failure
[h264 @ 0x55ee37af4f00] mmco: unref short failure
[h264 @ 0x55ee37af4f00] mmco: unref short failure
[h264 @ 0x55ee37af4f00] mmco: unref short failure
 92%|█████████▏| 1798/1945 [6:32:20<58:00, 23.68s/it] 92%|█████████▏| 1799/1945 [6:32:26<44:25, 18.26s/it]09/07/2024 18:16:23 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/07/2024 18:16:24 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b8f0dd9b00] mmco: unref short failure
[h264 @ 0x55b8f0dd9b00] mmco: unref short failure
[h264 @ 0x55b92da57c00] mmco: unref short failure
[h264 @ 0x55fc8d238100] mmco: unref short failure
[h264 @ 0x55668843fb00] mmco: unref short failure
[h264 @ 0x55668843fb00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55ee44607ac0] mmco: unref short failure
[h264 @ 0x55668646a380] mmco: unref short failure
[h264 @ 0x55fccbb4ef00] mmco: unref short failure
[h264 @ 0x55667ab1a480] mmco: unref short failure
[h264 @ 0x55b929fe3540] mmco: unref short failure
[h264 @ 0x55b929fe3540] mmco: unref short failure
[h264 @ 0x5566790a34c0] mmco: unref short failure
[h264 @ 0x5566790a34c0] mmco: unref short failure
[h264 @ 0x55668843f900] mmco: unref short failure
[h264 @ 0x55668843f900] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:53,  4.12it/s][A
  1%|          | 2/221 [00:00<00:45,  4.80it/s][A
  1%|▏         | 3/221 [00:00<01:18,  2.76it/s][A
  2%|▏         | 4/221 [00:01<01:00,  3.58it/s][A
  3%|▎         | 6/221 [00:01<00:35,  6.09it/s][A[h264 @ 0x556688426100] mmco: unref short failure
[h264 @ 0x556688426100] mmco: unref short failure

  3%|▎         | 7/221 [00:01<00:34,  6.20it/s][A
  4%|▎         | 8/221 [00:01<00:34,  6.21it/s][A
  4%|▍         | 9/221 [00:01<00:32,  6.57it/s][A
  5%|▍         | 10/221 [00:01<00:32,  6.42it/s][A
  5%|▌         | 12/221 [00:02<00:53,  3.88it/s][A[h264 @ 0x55fcde49c200] mmco: unref short failure
[h264 @ 0x55ee04023f00] mmco: unref short failure
[h264 @ 0x55ee04023f00] mmco: unref short failure

  6%|▌         | 13/221 [00:02<00:50,  4.11it/s][A
  6%|▋         | 14/221 [00:02<00:46,  4.47it/s][A
  7%|▋         | 15/221 [00:03<00:39,  5.18it/s][A
  7%|▋         | 16/221 [00:03<00:38,  5.35it/s][A
  8%|▊         | 17/221 [00:03<01:04,  3.18it/s][A
  8%|▊         | 18/221 [00:04<00:59,  3.43it/s][A
  9%|▊         | 19/221 [00:04<00:54,  3.72it/s][A
 10%|▉         | 21/221 [00:04<00:38,  5.26it/s][A
 10%|▉         | 22/221 [00:04<00:40,  4.94it/s][A
 11%|█▏        | 25/221 [00:04<00:25,  7.57it/s][A
 12%|█▏        | 26/221 [00:05<00:29,  6.56it/s][A
 13%|█▎        | 28/221 [00:05<00:34,  5.68it/s][A
 13%|█▎        | 29/221 [00:05<00:31,  6.01it/s][A
 14%|█▎        | 30/221 [00:05<00:29,  6.52it/s][A
 14%|█▍        | 31/221 [00:06<00:34,  5.43it/s][A
 15%|█▍        | 33/221 [00:06<00:28,  6.49it/s][A
 16%|█▌        | 35/221 [00:06<00:26,  6.99it/s][A
 16%|█▋        | 36/221 [00:06<00:30,  6.00it/s][A
 17%|█▋        | 37/221 [00:07<00:39,  4.71it/s][A
 17%|█▋        | 38/221 [00:08<01:09,  2.64it/s][A
 18%|█▊        | 40/221 [00:08<00:51,  3.49it/s][A
 19%|█▉        | 42/221 [00:09<01:01,  2.92it/s][A
 20%|█▉        | 44/221 [00:09<00:43,  4.11it/s][A
 20%|██        | 45/221 [00:11<01:33,  1.87it/s][A
 21%|██        | 46/221 [00:11<01:26,  2.03it/s][A
 21%|██▏       | 47/221 [00:12<01:58,  1.47it/s][A
 22%|██▏       | 48/221 [00:12<01:32,  1.87it/s][A
 22%|██▏       | 49/221 [00:13<01:18,  2.20it/s][A
 23%|██▎       | 50/221 [00:13<01:02,  2.74it/s][A
 24%|██▎       | 52/221 [00:13<00:39,  4.31it/s][A
 24%|██▍       | 53/221 [00:13<00:36,  4.57it/s][A
 24%|██▍       | 54/221 [00:14<00:58,  2.86it/s][A
 25%|██▍       | 55/221 [00:14<01:04,  2.56it/s][A
 25%|██▌       | 56/221 [00:14<00:51,  3.19it/s][A
 26%|██▌       | 58/221 [00:15<00:33,  4.89it/s][A
 27%|██▋       | 59/221 [00:15<00:29,  5.43it/s][A
 27%|██▋       | 60/221 [00:15<00:55,  2.88it/s][A
 28%|██▊       | 61/221 [00:16<00:47,  3.39it/s][A
 28%|██▊       | 62/221 [00:16<00:42,  3.73it/s][A
 29%|██▊       | 63/221 [00:16<00:35,  4.47it/s][A
 29%|██▉       | 64/221 [00:16<00:42,  3.74it/s][A
 30%|██▉       | 66/221 [00:18<01:09,  2.22it/s][A
 30%|███       | 67/221 [00:18<01:01,  2.52it/s][A
 31%|███       | 68/221 [00:18<00:51,  2.95it/s][A
 31%|███       | 69/221 [00:19<01:16,  1.99it/s][A
 32%|███▏      | 70/221 [00:19<00:59,  2.56it/s][A
 32%|███▏      | 71/221 [00:19<00:57,  2.60it/s][A
 33%|███▎      | 72/221 [00:20<00:51,  2.89it/s][A
 33%|███▎      | 73/221 [00:20<00:57,  2.59it/s][A
 34%|███▍      | 75/221 [00:21<00:41,  3.48it/s][A
 35%|███▍      | 77/221 [00:22<00:52,  2.72it/s][A
 36%|███▌      | 79/221 [00:22<00:44,  3.22it/s][A
 37%|███▋      | 81/221 [00:22<00:40,  3.48it/s][A
 37%|███▋      | 82/221 [00:23<00:50,  2.73it/s][A
 38%|███▊      | 83/221 [00:23<00:44,  3.09it/s][A
 39%|███▉      | 86/221 [00:23<00:26,  5.14it/s][A
 39%|███▉      | 87/221 [00:24<00:39,  3.43it/s][A
 40%|███▉      | 88/221 [00:25<00:47,  2.77it/s][A
 40%|████      | 89/221 [00:25<00:53,  2.48it/s][A
 41%|████      | 90/221 [00:26<00:48,  2.71it/s][A
 41%|████      | 91/221 [00:26<00:41,  3.15it/s][A
 42%|████▏     | 92/221 [00:26<00:33,  3.84it/s][A
 42%|████▏     | 93/221 [00:26<00:34,  3.68it/s][A
 43%|████▎     | 94/221 [00:26<00:31,  4.03it/s][A
 43%|████▎     | 96/221 [00:27<00:36,  3.39it/s][A
 44%|████▍     | 97/221 [00:27<00:32,  3.86it/s][A
 44%|████▍     | 98/221 [00:28<00:35,  3.42it/s][A
 45%|████▌     | 100/221 [00:28<00:23,  5.12it/s][A
 46%|████▌     | 102/221 [00:28<00:29,  3.98it/s][A
 47%|████▋     | 104/221 [00:29<00:22,  5.09it/s][A
 48%|████▊     | 105/221 [00:29<00:23,  4.91it/s][A
 48%|████▊     | 106/221 [00:29<00:30,  3.83it/s][A
 49%|████▉     | 108/221 [00:29<00:21,  5.27it/s][A
 49%|████▉     | 109/221 [00:30<00:19,  5.62it/s][A
 50%|█████     | 111/221 [00:30<00:22,  4.85it/s][A
 51%|█████     | 112/221 [00:30<00:21,  5.16it/s][A
 51%|█████     | 113/221 [00:31<00:25,  4.32it/s][A
 52%|█████▏    | 115/221 [00:31<00:17,  5.97it/s][A
 52%|█████▏    | 116/221 [00:32<00:32,  3.26it/s][A
 53%|█████▎    | 117/221 [00:32<00:33,  3.06it/s][A
 53%|█████▎    | 118/221 [00:32<00:27,  3.72it/s][A
 54%|█████▍    | 119/221 [00:32<00:23,  4.29it/s][A
 54%|█████▍    | 120/221 [00:32<00:22,  4.54it/s][A
 55%|█████▌    | 122/221 [00:32<00:14,  6.74it/s][A
 56%|█████▌    | 123/221 [00:33<00:15,  6.33it/s][A
 56%|█████▌    | 124/221 [00:33<00:16,  5.86it/s][A
 57%|█████▋    | 125/221 [00:34<00:39,  2.40it/s][A
 57%|█████▋    | 126/221 [00:34<00:37,  2.55it/s][A
 57%|█████▋    | 127/221 [00:36<01:03,  1.48it/s][A
 58%|█████▊    | 128/221 [00:36<00:53,  1.75it/s][A
 58%|█████▊    | 129/221 [00:36<00:42,  2.15it/s][A
 59%|█████▉    | 131/221 [00:36<00:26,  3.39it/s][A
 60%|█████▉    | 132/221 [00:37<00:41,  2.17it/s][A
 60%|██████    | 133/221 [00:38<00:37,  2.33it/s][A
 61%|██████    | 134/221 [00:39<00:59,  1.46it/s][A
 61%|██████    | 135/221 [00:39<00:47,  1.82it/s][A
 62%|██████▏   | 136/221 [00:40<00:42,  1.99it/s][A
 62%|██████▏   | 137/221 [00:40<00:41,  2.01it/s][A
 62%|██████▏   | 138/221 [00:42<01:18,  1.06it/s][A
 63%|██████▎   | 139/221 [00:43<01:15,  1.09it/s][A
 63%|██████▎   | 140/221 [00:44<01:06,  1.22it/s][A
 64%|██████▍   | 141/221 [00:44<00:57,  1.39it/s][A
 64%|██████▍   | 142/221 [00:44<00:48,  1.64it/s][A
 65%|██████▍   | 143/221 [00:45<00:46,  1.68it/s][A
 65%|██████▌   | 144/221 [00:45<00:35,  2.16it/s][A
 66%|██████▌   | 146/221 [00:45<00:20,  3.57it/s][A
 67%|██████▋   | 147/221 [00:45<00:17,  4.15it/s][A
 67%|██████▋   | 149/221 [00:46<00:12,  5.56it/s][A
 68%|██████▊   | 150/221 [00:46<00:11,  5.97it/s][A
 68%|██████▊   | 151/221 [00:46<00:17,  3.99it/s][A
 69%|██████▉   | 152/221 [00:47<00:18,  3.64it/s][A
 69%|██████▉   | 153/221 [00:47<00:17,  3.92it/s][A
 70%|██████▉   | 154/221 [00:47<00:15,  4.40it/s][A
 70%|███████   | 155/221 [00:47<00:15,  4.38it/s][A
 71%|███████   | 156/221 [00:47<00:16,  3.87it/s][A
 71%|███████   | 157/221 [00:50<00:50,  1.28it/s][A
 71%|███████▏  | 158/221 [00:50<00:39,  1.61it/s][A
 72%|███████▏  | 159/221 [00:50<00:31,  1.95it/s][A
 72%|███████▏  | 160/221 [00:50<00:23,  2.55it/s][A
 73%|███████▎  | 162/221 [00:50<00:15,  3.73it/s][A
 74%|███████▍  | 163/221 [00:51<00:14,  4.08it/s][A
 74%|███████▍  | 164/221 [00:51<00:15,  3.80it/s][A
 75%|███████▍  | 165/221 [00:51<00:15,  3.72it/s][A
 75%|███████▌  | 166/221 [00:52<00:18,  2.90it/s][A
 76%|███████▌  | 168/221 [00:55<00:44,  1.20it/s][A
 77%|███████▋  | 170/221 [00:55<00:29,  1.74it/s][A
 77%|███████▋  | 171/221 [00:56<00:30,  1.65it/s][A
 78%|███████▊  | 172/221 [00:56<00:24,  2.01it/s][A
 78%|███████▊  | 173/221 [00:56<00:21,  2.19it/s][A
 79%|███████▉  | 175/221 [00:56<00:14,  3.13it/s][A
 80%|███████▉  | 176/221 [00:57<00:13,  3.28it/s][A
 80%|████████  | 177/221 [00:57<00:11,  3.71it/s][A
 81%|████████  | 178/221 [00:57<00:10,  4.04it/s][A
 81%|████████  | 179/221 [00:58<00:21,  1.96it/s][A
 82%|████████▏ | 181/221 [00:58<00:12,  3.13it/s][A
 82%|████████▏ | 182/221 [00:59<00:12,  3.02it/s][A
 83%|████████▎ | 183/221 [00:59<00:11,  3.20it/s][A
 83%|████████▎ | 184/221 [00:59<00:11,  3.21it/s][A
 84%|████████▍ | 186/221 [01:00<00:09,  3.50it/s][A
 85%|████████▍ | 187/221 [01:00<00:09,  3.76it/s][A
 85%|████████▌ | 188/221 [01:00<00:07,  4.31it/s][A
 86%|████████▌ | 189/221 [01:00<00:06,  4.61it/s][A
 86%|████████▌ | 190/221 [01:01<00:07,  4.09it/s][A
 87%|████████▋ | 192/221 [01:01<00:06,  4.28it/s][A
 88%|████████▊ | 194/221 [01:02<00:06,  4.08it/s][A
 89%|████████▊ | 196/221 [01:02<00:04,  5.49it/s][A
 89%|████████▉ | 197/221 [01:02<00:04,  5.97it/s][A
 90%|████████▉ | 198/221 [01:02<00:03,  6.40it/s][A
 90%|█████████ | 200/221 [01:02<00:02,  7.07it/s][A
 91%|█████████ | 201/221 [01:02<00:02,  7.00it/s][A
 92%|█████████▏| 203/221 [01:03<00:02,  7.51it/s][A
 93%|█████████▎| 205/221 [01:03<00:01,  8.94it/s][A
 93%|█████████▎| 206/221 [01:03<00:02,  5.02it/s][A
 94%|█████████▍| 208/221 [01:04<00:02,  5.60it/s][A
 95%|█████████▍| 209/221 [01:04<00:02,  5.15it/s][A
 95%|█████████▌| 211/221 [01:04<00:02,  4.70it/s][A
 96%|█████████▌| 212/221 [01:05<00:01,  4.53it/s][A
 96%|█████████▋| 213/221 [01:05<00:01,  5.03it/s][A
 97%|█████████▋| 214/221 [01:06<00:02,  2.64it/s][A
 97%|█████████▋| 215/221 [01:06<00:01,  3.03it/s][A
 98%|█████████▊| 216/221 [01:06<00:01,  3.29it/s][A
 98%|█████████▊| 217/221 [01:07<00:02,  1.72it/s][A
 99%|█████████▊| 218/221 [01:08<00:01,  2.08it/s][A
 99%|█████████▉| 219/221 [01:08<00:00,  2.63it/s][A
100%|█████████▉| 220/221 [01:09<00:00,  1.83it/s][A
100%|██████████| 221/221 [01:09<00:00,  2.41it/s][A100%|██████████| 221/221 [01:09<00:00,  3.19it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.79it/s][A
  1%|          | 2/221 [00:00<00:57,  3.78it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.77it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.78it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.78it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.79it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.79it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.79it/s][A
  4%|▍         | 9/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.79it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.79it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.79it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.79it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.79it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 125/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.79it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.79it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.79it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.79it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.79it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.79it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.79it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.79it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.79it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.79it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.79it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.79it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.79it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.79it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 159/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.79it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.79it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.79it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.79it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.79it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.79it/s][A
 76%|███████▌  | 168/221 [00:44<00:13,  3.79it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.79it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.79it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.79it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.79it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.79it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 178/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.79it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.79it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.79it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.79it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.79it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.79it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.79it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.79it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.79it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.79it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.79it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.79it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.79it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.79it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.79it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.79it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.79it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.79it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.79it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.79it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.79it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.79it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▌| 212/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.79it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.79it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.79it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.79it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.79it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.79it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.79it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.79it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.79it/s][A100%|██████████| 221/221 [00:58<00:00,  3.79it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:22,  9.81it/s][A
  1%|          | 2/221 [00:00<00:30,  7.13it/s][A
  1%|▏         | 3/221 [00:00<00:34,  6.32it/s][A
  2%|▏         | 4/221 [00:00<00:32,  6.70it/s][A
  2%|▏         | 5/221 [00:00<00:28,  7.57it/s][A
  3%|▎         | 7/221 [00:01<00:32,  6.49it/s][A
  4%|▎         | 8/221 [00:01<00:34,  6.21it/s][A
  4%|▍         | 9/221 [00:01<00:35,  6.02it/s][A
  5%|▍         | 10/221 [00:01<00:57,  3.65it/s][A
  5%|▍         | 11/221 [00:02<00:53,  3.94it/s][A
  5%|▌         | 12/221 [00:02<00:46,  4.48it/s][A
  6%|▌         | 13/221 [00:02<01:00,  3.43it/s][A
  6%|▋         | 14/221 [00:02<00:49,  4.16it/s][A
  7%|▋         | 15/221 [00:03<00:46,  4.44it/s][A
  7%|▋         | 16/221 [00:03<00:50,  4.02it/s][A
  8%|▊         | 17/221 [00:04<01:14,  2.72it/s][A
  8%|▊         | 18/221 [00:04<01:01,  3.28it/s][A
  9%|▊         | 19/221 [00:04<00:56,  3.60it/s][A
  9%|▉         | 20/221 [00:04<00:47,  4.25it/s][A
 10%|▉         | 21/221 [00:04<00:42,  4.72it/s][A
 10%|▉         | 22/221 [00:04<00:44,  4.47it/s][A
 11%|█         | 24/221 [00:05<00:33,  5.95it/s][A
 11%|█▏        | 25/221 [00:05<00:34,  5.62it/s][A
 12%|█▏        | 26/221 [00:05<00:38,  5.05it/s][A
 12%|█▏        | 27/221 [00:05<00:39,  4.93it/s][A
 13%|█▎        | 28/221 [00:06<00:44,  4.33it/s][A
 13%|█▎        | 29/221 [00:06<00:51,  3.71it/s][A
 14%|█▎        | 30/221 [00:06<00:57,  3.33it/s][A
 14%|█▍        | 31/221 [00:07<00:50,  3.74it/s][A
 15%|█▍        | 33/221 [00:07<00:39,  4.78it/s][A
 15%|█▌        | 34/221 [00:07<00:36,  5.15it/s][A
 16%|█▌        | 35/221 [00:07<00:39,  4.74it/s][A
 16%|█▋        | 36/221 [00:08<00:46,  3.98it/s][A
 17%|█▋        | 37/221 [00:08<00:43,  4.18it/s][A
 17%|█▋        | 38/221 [00:08<00:48,  3.78it/s][A
 18%|█▊        | 39/221 [00:08<00:43,  4.19it/s][A
 18%|█▊        | 40/221 [00:09<00:56,  3.20it/s][A
 19%|█▊        | 41/221 [00:09<00:48,  3.71it/s][A
 19%|█▉        | 42/221 [00:09<00:42,  4.23it/s][A
 19%|█▉        | 43/221 [00:09<00:35,  5.03it/s][A
 20%|█▉        | 44/221 [00:09<00:30,  5.81it/s][A
 20%|██        | 45/221 [00:10<00:36,  4.78it/s][A
 21%|██        | 46/221 [00:10<00:36,  4.77it/s][A
 21%|██▏       | 47/221 [00:10<00:35,  4.92it/s][A
 22%|██▏       | 48/221 [00:10<00:31,  5.58it/s][A
 22%|██▏       | 49/221 [00:10<00:31,  5.40it/s][A
 23%|██▎       | 50/221 [00:11<00:38,  4.47it/s][A
 23%|██▎       | 51/221 [00:11<00:36,  4.68it/s][A
 24%|██▎       | 52/221 [00:11<00:40,  4.20it/s][A
 24%|██▍       | 53/221 [00:11<00:33,  4.95it/s][A
 24%|██▍       | 54/221 [00:12<00:47,  3.51it/s][A
 25%|██▍       | 55/221 [00:12<00:44,  3.69it/s][A
 25%|██▌       | 56/221 [00:12<00:37,  4.44it/s][A
 26%|██▌       | 57/221 [00:12<00:37,  4.39it/s][A
 26%|██▌       | 58/221 [00:13<00:40,  4.05it/s][A
 27%|██▋       | 59/221 [00:13<00:36,  4.46it/s][A
 27%|██▋       | 60/221 [00:13<00:39,  4.09it/s][A
 28%|██▊       | 61/221 [00:13<00:34,  4.60it/s][A
 28%|██▊       | 62/221 [00:13<00:32,  4.91it/s][A
 29%|██▊       | 63/221 [00:14<00:39,  3.95it/s][A
 29%|██▉       | 64/221 [00:14<00:54,  2.90it/s][A
 29%|██▉       | 65/221 [00:15<00:45,  3.43it/s][A
 30%|██▉       | 66/221 [00:15<00:58,  2.66it/s][A
 30%|███       | 67/221 [00:16<01:00,  2.55it/s][A
 31%|███       | 68/221 [00:16<00:50,  3.02it/s][A
 31%|███       | 69/221 [00:17<01:22,  1.84it/s][A
 32%|███▏      | 70/221 [00:17<01:05,  2.29it/s][A
 32%|███▏      | 71/221 [00:17<00:54,  2.73it/s][A
 33%|███▎      | 72/221 [00:18<00:57,  2.59it/s][A
 33%|███▎      | 73/221 [00:18<00:52,  2.80it/s][A
 34%|███▍      | 75/221 [00:18<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:18<00:36,  4.02it/s][A
 35%|███▍      | 77/221 [00:19<00:49,  2.91it/s][A
 35%|███▌      | 78/221 [00:19<00:40,  3.54it/s][A
 36%|███▌      | 79/221 [00:20<00:47,  2.99it/s][A
 36%|███▌      | 80/221 [00:20<00:43,  3.22it/s][A
 37%|███▋      | 81/221 [00:20<00:39,  3.58it/s][A
 37%|███▋      | 82/221 [00:20<00:43,  3.20it/s][A
 38%|███▊      | 83/221 [00:21<00:50,  2.74it/s][A
 38%|███▊      | 84/221 [00:21<00:41,  3.28it/s][A
 39%|███▉      | 86/221 [00:21<00:30,  4.45it/s][A
 39%|███▉      | 87/221 [00:22<00:36,  3.69it/s][A
 40%|███▉      | 88/221 [00:22<00:38,  3.45it/s][A
 40%|████      | 89/221 [00:22<00:38,  3.42it/s][A
 41%|████      | 90/221 [00:23<00:43,  2.98it/s][A
 41%|████      | 91/221 [00:23<00:36,  3.59it/s][A
 42%|████▏     | 92/221 [00:23<00:35,  3.66it/s][A
 42%|████▏     | 93/221 [00:24<00:47,  2.68it/s][A
 43%|████▎     | 94/221 [00:24<00:50,  2.50it/s][A
 43%|████▎     | 95/221 [00:25<00:44,  2.81it/s][A
 43%|████▎     | 96/221 [00:25<00:53,  2.32it/s][A
 44%|████▍     | 97/221 [00:25<00:45,  2.72it/s][A
 44%|████▍     | 98/221 [00:26<01:00,  2.05it/s][A
 45%|████▍     | 99/221 [00:26<00:47,  2.59it/s][A
 45%|████▌     | 100/221 [00:27<00:41,  2.90it/s][A
 46%|████▌     | 101/221 [00:27<00:40,  2.94it/s][A
 46%|████▌     | 102/221 [00:28<00:56,  2.09it/s][A
 47%|████▋     | 103/221 [00:28<00:44,  2.66it/s][A
 47%|████▋     | 104/221 [00:28<00:35,  3.30it/s][A
 48%|████▊     | 105/221 [00:28<00:37,  3.10it/s][A
 48%|████▊     | 106/221 [00:29<00:36,  3.11it/s][A
 48%|████▊     | 107/221 [00:29<00:32,  3.47it/s][A
 49%|████▉     | 108/221 [00:29<00:30,  3.76it/s][A
 49%|████▉     | 109/221 [00:29<00:24,  4.61it/s][A
 50%|████▉     | 110/221 [00:29<00:26,  4.22it/s][A
 50%|█████     | 111/221 [00:30<00:26,  4.08it/s][A
 51%|█████     | 112/221 [00:30<00:28,  3.82it/s][A
 51%|█████     | 113/221 [00:30<00:30,  3.59it/s][A
 52%|█████▏    | 115/221 [00:31<00:23,  4.58it/s][A
 52%|█████▏    | 116/221 [00:31<00:23,  4.47it/s][A
 53%|█████▎    | 117/221 [00:31<00:23,  4.36it/s][A
 53%|█████▎    | 118/221 [00:31<00:22,  4.52it/s][A
 54%|█████▍    | 119/221 [00:32<00:26,  3.87it/s][A
 54%|█████▍    | 120/221 [00:32<00:22,  4.47it/s][A
 55%|█████▍    | 121/221 [00:32<00:19,  5.12it/s][A
 55%|█████▌    | 122/221 [00:32<00:20,  4.75it/s][A
 56%|█████▌    | 123/221 [00:32<00:19,  5.06it/s][A
 56%|█████▌    | 124/221 [00:33<00:24,  3.96it/s][A
 57%|█████▋    | 125/221 [00:33<00:28,  3.41it/s][A
 57%|█████▋    | 126/221 [00:33<00:24,  3.83it/s][A
 57%|█████▋    | 127/221 [00:34<00:29,  3.21it/s][A
 58%|█████▊    | 128/221 [00:34<00:26,  3.52it/s][A
 59%|█████▉    | 130/221 [00:34<00:19,  4.55it/s][A
 59%|█████▉    | 131/221 [00:34<00:17,  5.03it/s][A
 60%|█████▉    | 132/221 [00:35<00:38,  2.29it/s][A
 60%|██████    | 133/221 [00:36<00:36,  2.43it/s][A
 61%|██████    | 134/221 [00:36<00:40,  2.17it/s][A
 61%|██████    | 135/221 [00:37<00:37,  2.30it/s][A
 62%|██████▏   | 136/221 [00:37<00:31,  2.71it/s][A
 62%|██████▏   | 137/221 [00:37<00:27,  3.07it/s][A
 62%|██████▏   | 138/221 [00:38<00:27,  3.03it/s][A
 63%|██████▎   | 139/221 [00:38<00:32,  2.55it/s][A
 63%|██████▎   | 140/221 [00:38<00:29,  2.71it/s][A
 64%|██████▍   | 141/221 [00:39<00:27,  2.89it/s][A
 64%|██████▍   | 142/221 [00:39<00:23,  3.35it/s][A
 65%|██████▍   | 143/221 [00:39<00:29,  2.63it/s][A
 65%|██████▌   | 144/221 [00:40<00:30,  2.55it/s][A
 66%|██████▌   | 145/221 [00:40<00:24,  3.11it/s][A
 67%|██████▋   | 147/221 [00:40<00:19,  3.82it/s][A
 67%|██████▋   | 148/221 [00:41<00:22,  3.30it/s][A
 67%|██████▋   | 149/221 [00:41<00:25,  2.77it/s][A
 68%|██████▊   | 150/221 [00:42<00:23,  3.02it/s][A
 68%|██████▊   | 151/221 [00:42<00:25,  2.77it/s][A
 69%|██████▉   | 152/221 [00:43<00:27,  2.53it/s][A
 69%|██████▉   | 153/221 [00:43<00:22,  3.01it/s][A
 70%|██████▉   | 154/221 [00:43<00:20,  3.29it/s][A
 70%|███████   | 155/221 [00:43<00:21,  3.06it/s][A
 71%|███████   | 156/221 [00:44<00:20,  3.17it/s][A
 71%|███████   | 157/221 [00:44<00:20,  3.16it/s][A
 71%|███████▏  | 158/221 [00:44<00:19,  3.23it/s][A
 72%|███████▏  | 159/221 [00:44<00:16,  3.76it/s][A
 72%|███████▏  | 160/221 [00:45<00:13,  4.44it/s][A
 73%|███████▎  | 161/221 [00:45<00:18,  3.30it/s][A
 73%|███████▎  | 162/221 [00:45<00:14,  4.00it/s][A
 74%|███████▍  | 163/221 [00:45<00:14,  4.12it/s][A
 74%|███████▍  | 164/221 [00:46<00:12,  4.57it/s][A
 75%|███████▍  | 165/221 [00:46<00:14,  3.83it/s][A
 75%|███████▌  | 166/221 [00:46<00:13,  4.19it/s][A
 76%|███████▌  | 167/221 [00:46<00:11,  4.67it/s][A
 76%|███████▌  | 168/221 [00:47<00:12,  4.29it/s][A
 77%|███████▋  | 170/221 [00:47<00:11,  4.39it/s][A
 77%|███████▋  | 171/221 [00:47<00:13,  3.78it/s][A
 78%|███████▊  | 172/221 [00:48<00:12,  3.93it/s][A
 78%|███████▊  | 173/221 [00:48<00:15,  3.06it/s][A
 79%|███████▊  | 174/221 [00:49<00:18,  2.55it/s][A
 79%|███████▉  | 175/221 [00:49<00:16,  2.75it/s][A
 80%|███████▉  | 176/221 [00:49<00:14,  3.12it/s][A
 81%|████████  | 178/221 [00:50<00:11,  3.68it/s][A
 81%|████████  | 179/221 [00:50<00:11,  3.62it/s][A
 81%|████████▏ | 180/221 [00:50<00:10,  4.05it/s][A
 82%|████████▏ | 181/221 [00:50<00:09,  4.41it/s][A
 82%|████████▏ | 182/221 [00:51<00:12,  3.06it/s][A
 83%|████████▎ | 183/221 [00:51<00:11,  3.32it/s][A
 83%|████████▎ | 184/221 [00:51<00:10,  3.48it/s][A
 84%|████████▎ | 185/221 [00:51<00:09,  3.70it/s][A
 84%|████████▍ | 186/221 [00:52<00:14,  2.40it/s][A
 85%|████████▍ | 187/221 [00:53<00:12,  2.73it/s][A
 85%|████████▌ | 188/221 [00:53<00:11,  2.98it/s][A
 86%|████████▌ | 189/221 [00:53<00:09,  3.35it/s][A
 86%|████████▌ | 190/221 [00:53<00:10,  3.06it/s][A
 87%|████████▋ | 192/221 [00:54<00:08,  3.62it/s][A
 88%|████████▊ | 194/221 [00:54<00:06,  4.00it/s][A
 88%|████████▊ | 195/221 [00:54<00:06,  4.19it/s][A
 89%|████████▊ | 196/221 [00:55<00:06,  4.13it/s][A
 89%|████████▉ | 197/221 [00:55<00:05,  4.39it/s][A
 90%|████████▉ | 198/221 [00:55<00:05,  4.06it/s][A
 90%|█████████ | 199/221 [00:55<00:05,  4.23it/s][A
 90%|█████████ | 200/221 [00:56<00:05,  3.77it/s][A
 91%|█████████ | 201/221 [00:56<00:04,  4.44it/s][A
 91%|█████████▏| 202/221 [00:56<00:04,  3.92it/s][A
 92%|█████████▏| 203/221 [00:56<00:03,  4.66it/s][A
 92%|█████████▏| 204/221 [00:57<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:57<00:03,  4.57it/s][A
 93%|█████████▎| 206/221 [00:57<00:03,  3.98it/s][A
 94%|█████████▎| 207/221 [00:57<00:03,  4.50it/s][A
 94%|█████████▍| 208/221 [00:57<00:02,  4.57it/s][A
 95%|█████████▍| 209/221 [00:58<00:02,  4.62it/s][A
 95%|█████████▌| 211/221 [00:58<00:02,  4.56it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  4.14it/s][A
 96%|█████████▋| 213/221 [00:59<00:01,  4.50it/s][A
 97%|█████████▋| 214/221 [01:00<00:03,  2.29it/s][A
 97%|█████████▋| 215/221 [01:00<00:02,  2.75it/s][A
 98%|█████████▊| 216/221 [01:00<00:01,  2.99it/s][A
 98%|█████████▊| 217/221 [01:00<00:01,  2.90it/s][A
 99%|█████████▊| 218/221 [01:01<00:00,  3.06it/s][A
 99%|█████████▉| 219/221 [01:01<00:00,  3.19it/s][A
100%|█████████▉| 220/221 [01:01<00:00,  3.56it/s][A
100%|██████████| 221/221 [01:01<00:00,  4.01it/s][A100%|██████████| 221/221 [01:01<00:00,  3.57it/s]
09/07/2024 18:21:32 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 1799--===========

09/07/2024 18:21:32 - INFO - __main__ -   {'area_r1': 24.4, 'area_recall': '24.4/47.7/58.8', 'area_ravg': 43.7}
09/07/2024 18:21:32 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 1799--===========

09/07/2024 18:21:32 - INFO - __main__ -   {'forward_r1': 37.9, 'forward_recall': '37.9/65.0/73.3', 'forward_ravg': 58.7}
09/07/2024 18:21:32 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 1799--===========

09/07/2024 18:21:32 - INFO - __main__ -   {'area_video_r1': 39.7, 'area_video_recall': '39.7/67.5/77.1', 'area_video_ravg': 61.5}
09/07/2024 18:21:32 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 1499=======

09/07/2024 18:21:32 - INFO - __main__ -   {'area_video_r1': 39.8, 'area_video_recall': '39.8/67.9/76.6', 'area_video_ravg': 61.4}
09/07/2024 18:21:32 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 1799--===========

09/07/2024 18:21:32 - INFO - __main__ -   {'area_video_r1': 50.8, 'area_video_recall': '50.8/74.1/81.6', 'area_video_ravg': 68.8, 'area_video_back_r1': 50.8, 'area_video_back_recall': '50.8/74.0/80.9', 'area_video_back_ravg': 68.6}
09/07/2024 18:21:32 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 599=======

09/07/2024 18:21:32 - INFO - __main__ -   {'area_video_r1': 51.1, 'area_video_recall': '51.1/74.4/80.2', 'area_video_ravg': 68.6, 'area_video_back_r1': 49.1, 'area_video_back_recall': '49.1/72.5/80.4', 'area_video_back_ravg': 67.3}
09/07/2024 18:21:32 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 1799--===========

09/07/2024 18:21:32 - INFO - __main__ -   {'video_r1': 41.2, 'video_recall': '41.2/70.2/81.1', 'video_ravg': 64.2}
09/07/2024 18:21:32 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 299=======

09/07/2024 18:21:32 - INFO - __main__ -   {'video_r1': 42.3, 'video_recall': '42.3/71.2/80.8', 'video_ravg': 64.7}
09/07/2024 18:21:32 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 1799--===========

09/07/2024 18:21:32 - INFO - __main__ -   {'video_r1': 51.0, 'video_recall': '51.0/74.8/82.4', 'video_ravg': 69.4}
09/07/2024 18:21:32 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 599=======

09/07/2024 18:21:32 - INFO - __main__ -   {'video_r1': 51.8, 'video_recall': '51.8/75.5/82.9', 'video_ravg': 70.1}
09/07/2024 18:21:51 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.207758665084839, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04420001804828644, 'loss_ret%tv%ta--finetune_area/loss_area': 2.2874510288238525, 'loss_ret%tv%ta--finetune_area/total_loss': 5.539409637451172}
 93%|█████████▎| 1800/1945 [6:37:55<4:29:46, 111.63s/it][h264 @ 0x556675f6c3c0] mmco: unref short failure
[h264 @ 0x556675f6c3c0] mmco: unref short failure
 93%|█████████▎| 1801/1945 [6:37:58<3:09:38, 79.01s/it] [h264 @ 0x55667f89f900] mmco: unref short failure
 93%|█████████▎| 1802/1945 [6:38:01<2:14:09, 56.29s/it] 93%|█████████▎| 1803/1945 [6:38:05<1:36:07, 40.62s/it] 93%|█████████▎| 1804/1945 [6:38:10<1:10:00, 29.79s/it] 93%|█████████▎| 1805/1945 [6:38:15<52:24, 22.46s/it]  [h264 @ 0x55ee45ef1200] mmco: unref short failure
[h264 @ 0x55ee45ef1200] mmco: unref short failure
 93%|█████████▎| 1806/1945 [6:38:21<40:05, 17.31s/it] 93%|█████████▎| 1807/1945 [6:38:26<31:34, 13.73s/it] 93%|█████████▎| 1808/1945 [6:38:32<26:18, 11.52s/it] 93%|█████████▎| 1809/1945 [6:38:38<22:14,  9.82s/it] 93%|█████████▎| 1810/1945 [6:38:44<19:07,  8.50s/it] 93%|█████████▎| 1811/1945 [6:38:49<16:58,  7.60s/it][h264 @ 0x55ee32a73ec0] mmco: unref short failure
[h264 @ 0x55ee32a73ec0] mmco: unref short failure
 93%|█████████▎| 1812/1945 [6:38:55<15:38,  7.06s/it] 93%|█████████▎| 1813/1945 [6:39:00<14:31,  6.61s/it] 93%|█████████▎| 1814/1945 [6:39:06<13:54,  6.37s/it][h264 @ 0x55b8efd67000] mmco: unref short failure
[h264 @ 0x55b8efd67000] mmco: unref short failure
 93%|█████████▎| 1815/1945 [6:39:13<14:00,  6.46s/it] 93%|█████████▎| 1816/1945 [6:39:19<13:38,  6.34s/it][h264 @ 0x55667637a700] mmco: unref short failure
[h264 @ 0x55667637a700] mmco: unref short failure
[h264 @ 0x55fcddcd5bc0] mmco: unref short failure
[h264 @ 0x55fcddcd5bc0] mmco: unref short failure
srun: Job step aborted: Waiting up to 92 seconds for job step to finish.
slurmstepd: error: *** STEP 7439794.0 ON lrdn0227 CANCELLED AT 2024-09-07T18:23:26 ***
WARNING:torch.distributed.elastic.agent.server.api:Received 15 death signal, shutting down workers
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 292831 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 292832 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 292833 closing signal SIGTERM
slurmstepd: error: *** JOB 7439794 ON lrdn0227 CANCELLED AT 2024-09-07T18:23:26 ***
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 292834 closing signal SIGTERM
