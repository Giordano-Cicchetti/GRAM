NODELIST=lrdn1776
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/distributed/launch.py:181: FutureWarning: The module torch.distributed.launch is deprecated
and will be removed in future. Use torchrun.
Note that --use-env is set by default in torchrun.
If your script expects `--local-rank` argument to be set, please
change it to read from `os.environ['LOCAL_RANK']` instead. See 
https://pytorch.org/docs/stable/distributed.html#launch-utility for 
further instructions

  warnings.warn(
WARNING:torch.distributed.run:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
2031



DEVICE SET
DEVICE SET
DEVICE SET
DEVICE SET
09/08/2024 20:32:10 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 1
09/08/2024 20:32:10 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 3
09/08/2024 20:32:10 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 0
09/08/2024 20:32:10 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 2
09/08/2024 20:32:10 - INFO - torch.distributed.distributed_c10d -   Rank 1: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/08/2024 20:32:10 - INFO - torch.distributed.distributed_c10d -   Rank 3: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/08/2024 20:32:10 - INFO - torch.distributed.distributed_c10d -   Rank 0: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/08/2024 20:32:10 - INFO - torch.distributed.distributed_c10d -   Rank 2: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/08/2024 20:32:10 - INFO - __main__ -   ==================model_configs==================

09/08/2024 20:32:10 - INFO - __main__ -   model_cfg_model_type : vast
09/08/2024 20:32:10 - INFO - __main__ -   model_cfg_itm_ratio : 0.1
09/08/2024 20:32:10 - INFO - __main__ -   model_cfg_frozen_vision : False
09/08/2024 20:32:10 - INFO - __main__ -   model_cfg_frozen_audio : False
09/08/2024 20:32:10 - INFO - __main__ -   model_cfg_checkpointing : True
09/08/2024 20:32:10 - INFO - __main__ -   model_cfg_max_caption_len : 40
09/08/2024 20:32:10 - INFO - __main__ -   model_cfg_max_omni_caption_len : 70
09/08/2024 20:32:10 - INFO - __main__ -   model_cfg_max_subtitle_len : 70
09/08/2024 20:32:10 - INFO - __main__ -   model_cfg_contra_dim : 512
09/08/2024 20:32:10 - INFO - __main__ -   model_cfg_inherit_keys : ['vision_encoder_type', 'audio_encoder_type', 'audio_melbins', 'audio_target_length']
09/08/2024 20:32:10 - INFO - __main__ -   model_cfg_frame_embedding_type : adaptive
09/08/2024 20:32:10 - INFO - __main__ -   model_cfg_vision_resolution : 224
09/08/2024 20:32:10 - INFO - __main__ -   model_cfg_vision_encoder_type : evaclip01_giant
09/08/2024 20:32:10 - INFO - __main__ -   model_cfg_audio_encoder_type : beats
09/08/2024 20:32:10 - INFO - __main__ -   model_cfg_audio_melbins : 64
09/08/2024 20:32:10 - INFO - __main__ -   model_cfg_audio_target_length : 1024
09/08/2024 20:32:10 - INFO - __main__ -   model_cfg_beam_size : 3
09/08/2024 20:32:10 - INFO - __main__ -   model_cfg_captioner_mode : False
09/08/2024 20:32:10 - INFO - __main__ -   model_cfg_generate_nums : 1
09/08/2024 20:32:10 - INFO - __main__ -   model_cfg_ret_bidirection_evaluation : False
09/08/2024 20:32:10 - INFO - __main__ -   model_cfg_itm_rerank_num : 50
09/08/2024 20:32:10 - INFO - __main__ -   model_cfg_evaluation_type : evaluation_mm
09/08/2024 20:32:10 - INFO - __main__ -   model_cfg_default : ./config/vast/default_model_cfg.json
09/08/2024 20:32:10 - INFO - __main__ -   model_cfg_max_vision_sample_num : 2
09/08/2024 20:32:10 - INFO - __main__ -   model_cfg_max_audio_sample_num : 1
09/08/2024 20:32:10 - INFO - __main__ -   ==================run_configs==================

09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_checkpoint : 
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_output_dir : ./output/vast/pretrain_vast/downstream/finetuneVolume256batch
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_gradient_accumulation_steps : 1
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_clip_lr : 5e-07
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_optim : adamw
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_learning_rate : 2e-05
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_betas : [0.9, 0.98]
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_weight_decay : 0.01
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_grad_norm : 2.0
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_warmup_ratio : 0.1
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_resume : False
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_seed : 50
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_fp16 : True
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_bf16 : False
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_zero_shot : False
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_scheduler : warmup_linear
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_new_lr : 0
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_new_params_name : []
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_valid_freq : 10
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_dataset_mix_type : random
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_remove_before_ckpt : True
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_first_eval : True
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_pretrain_dir : ./output/vast/pretrain_vast
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_num_train_steps : 0
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_save_best : True
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_pin_mem : True
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_vision_resolution : 224
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_use_ddp : False
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_mode : training
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_log_steps : 100
09/08/2024 20:32:10 - INFO - __main__ -   run_cfg_default : ./config/vast/default_run_cfg.json
09/08/2024 20:32:10 - INFO - __main__ -   ==================data_configs==================

09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_finetune_area_train_type : annoindexed
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_finetune_area_train_training : True
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_finetune_area_train_name : finetune_area
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_finetune_area_train_txt : ../vast27m/annotations100k.json
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_finetune_area_train_vision : ../vast27m/videos/
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_finetune_area_train_audio : ../vast27m/audios
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_finetune_area_train_vision_transforms : crop_flip
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_finetune_area_train_vision_format : video_rawvideo
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_finetune_area_train_vision_sample_num : 2
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_finetune_area_train_audio_sample_num : 1
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_finetune_area_train_task : ret%tv%ta
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_finetune_area_train_epoch : 5
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_finetune_area_train_n_workers : 8
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_finetune_area_train_batch_size : 256
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_msrvtt_ret_val_type : annoindexed
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_msrvtt_ret_val_training : False
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_msrvtt_ret_val_name : msrvtt_ret
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_msrvtt_ret_val_txt : datasets/annotations/msrvtt/descs_ret_test.json
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision : ../MSRVTT/video_test
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_transforms : crop_flip
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_format : video_rawvideo
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_msrvtt_ret_val_audio : ../MSRVTT/audio_test
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_sample_num : 8
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_msrvtt_ret_val_audio_sample_num : 1
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_msrvtt_ret_val_task : ret%tv
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_msrvtt_ret_val_n_workers : 8
09/08/2024 20:32:10 - INFO - __main__ -   data_cfg_msrvtt_ret_val_batch_size : 64
wandb: Tracking run with wandb version 0.17.8
wandb: W&B syncing is set to `offline` in this directory.  
wandb: Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
09/08/2024 20:32:16 - INFO - __main__ -   finetune_area Using clip mean and std.
09/08/2024 20:32:16 - INFO - __main__ -   finetune_area transforms crop_flip
ci sono 99621 labelsci sono 99621 labels

ci sono 99621 labels
ci sono 99621 labels
09/08/2024 20:32:59 - INFO - __main__ -   Create Dataset finetune_area Success
09/08/2024 20:32:59 - INFO - __main__ -    loader ret%tv%ta--finetune_area , ratio 1945 , bs_pergpu 64, n_workers 8
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x562073714340] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
09/08/2024 20:33:02 - INFO - __main__ -   msrvtt_ret Using clip mean and std.
09/08/2024 20:33:02 - INFO - __main__ -   msrvtt_ret transforms crop_flip
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
ci sono 884 labels
09/08/2024 20:33:02 - INFO - __main__ -   Create Dataset msrvtt_ret Success
ci sono 884 labelsci sono 884 labels

ci sono 884 labels
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'Please 'pip install xformers'Please 'pip install xformers'


Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
09/08/2024 20:33:05 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
09/08/2024 20:33:05 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
09/08/2024 20:33:05 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
09/08/2024 20:33:05 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5601a5037a80] mmco: unref short failure
[h264 @ 0x5601a5037a80] mmco: unref short failure
[h264 @ 0x56097939a4c0] mmco: unref short failure
[h264 @ 0x55597be43440] mmco: unref short failure
[h264 @ 0x55597be43440] mmco: unref short failure
[h264 @ 0x55597d8aab00] mmco: unref short failure
[h264 @ 0x55597be72680] mmco: unref short failure
[h264 @ 0x55597be72680] mmco: unref short failure
[h264 @ 0x560979691bc0] mmco: unref short failure
[h264 @ 0x5601a77a9640] mmco: unref short failure
[h264 @ 0x55597ed4e540] mmco: unref short failure
[h264 @ 0x55597ed4e540] mmco: unref short failure
09/08/2024 20:34:10 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
09/08/2024 20:34:12 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
09/08/2024 20:34:13 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
09/08/2024 20:34:19 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
[h264 @ 0x55597d274f00] mmco: unref short failure
09/08/2024 20:34:24 - INFO - root -   incompatible_keys.missing_keys: []
09/08/2024 20:34:25 - INFO - root -   incompatible_keys.missing_keys: []
09/08/2024 20:34:25 - INFO - root -   incompatible_keys.missing_keys: []
09/08/2024 20:34:27 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/08/2024 20:34:27 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/08/2024 20:34:27 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/08/2024 20:34:31 - INFO - root -   incompatible_keys.missing_keys: []
[h264 @ 0x55597bf82e40] mmco: unref short failure
[h264 @ 0x55597bf82e40] mmco: unref short failure
09/08/2024 20:34:33 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
[h264 @ 0x5601a822b600] mmco: unref short failure
[h264 @ 0x5601a822b600] mmco: unref short failure
[h264 @ 0x5601aaa1aac0] mmco: unref short failure
[h264 @ 0x5601aaa1aac0] mmco: unref short failure
09/08/2024 20:34:39 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
09/08/2024 20:34:39 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
09/08/2024 20:34:39 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
[h264 @ 0x5620779c4780] mmco: unref short failure
09/08/2024 20:34:46 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.7.crossattention.self.query.weight', 'cls.predictions.transform.dense.weight', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.self.value.weight', 'cls.predictions.transform.dense.bias', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'cls.predictions.bias', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.self.value.weight', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.9.crossattention.output.LayerNorm.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.7.crossattention.self.key.weight', 'cls.predictions.transform.dense.weight', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'cls.predictions.bias', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.7.crossattention.output.dense.weight', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'cls.predictions.transform.dense.bias', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.5.crossattention.self.key.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'cls.predictions.transform.dense.weight', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.query.bias', 'cls.predictions.bias', 'encoder.layer.7.crossattention.self.value.weight', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.output.dense.weight', 'cls.predictions.transform.dense.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
[h264 @ 0x562075410b00] mmco: unref short failure
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.0.crossattention.output.dense.weight', 'cls.predictions.transform.dense.bias', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'cls.predictions.transform.dense.weight', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.output.dense.bias', 'cls.predictions.bias', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.10.crossattention.self.value.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
[h264 @ 0x5620771a3d00] mmco: unref short failure
[h264 @ 0x56097c022a00] mmco: unref short failure
[h264 @ 0x56097c022a00] mmco: unref short failure
09/08/2024 20:35:10 - INFO - __main__ -   load_from_pretrained: ./output/vast/pretrain_vast/ckpt/model_step_204994.pt
09/08/2024 20:35:10 - INFO - __main__ -   Load from pretrained dir ./output/vast/pretrain_vast
09/08/2024 20:35:16 - INFO - __main__ -   Unexpected keys ['vision_encoder.text.logit_scale']
09/08/2024 20:35:16 - INFO - __main__ -   missing_keys  ['vision_encoder.logit_scale']
[h264 @ 0x5601a5771700] mmco: unref short failure
[h264 @ 0x562075be4c00] mmco: unref short failure
[h264 @ 0x562075be4c00] mmco: unref short failure
09/08/2024 20:35:23 - INFO - __main__ -   ==================learning_rate_settings==================

09/08/2024 20:35:23 - INFO - __main__ -     basic_lr : 2e-05
09/08/2024 20:35:23 - INFO - __main__ -     clip_lr_visual : 5e-07
09/08/2024 20:35:23 - INFO - __main__ -     clip_lr_visual_len : 245
09/08/2024 20:35:23 - INFO - __main__ -     new_lr : 0
09/08/2024 20:35:23 - INFO - __main__ -     new_params_name: []
09/08/2024 20:35:23 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/08/2024 20:35:23 - INFO - __main__ -   start running ret%tv validation...
[h264 @ 0x56098048ba40] mmco: unref short failure
[h264 @ 0x56098048ba40] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x56097f7a4980] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5601a77a9340] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55597c702a80] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x56098335dd80] mmco: unref short failure
[h264 @ 0x56098335dd80] mmco: unref short failure
[h264 @ 0x55597eba4c80] mmco: unref short failure
[h264 @ 0x55597eba4c80] mmco: unref short failure
[h264 @ 0x56097c9ea480] mmco: unref short failure
[h264 @ 0x56097c9ea480] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
[h264 @ 0x56097f83dd80] mmco: unref short failure
[h264 @ 0x56097f83dd80] mmco: unref short failure
[h264 @ 0x562080552680] mmco: unref short failure
[h264 @ 0x562080552680] mmco: unref short failure
[h264 @ 0x562077d03880] mmco: unref short failure
[h264 @ 0x5559880b9f00] mmco: unref short failure
[h264 @ 0x56207c469b40] mmco: unref short failure
[h264 @ 0x56207c469b40] mmco: unref short failure
[h264 @ 0x5601aaa0df40] mmco: unref short failure
[h264 @ 0x5601aaa0df40] mmco: unref short failure
[h264 @ 0x562077d04f80] mmco: unref short failure
[h264 @ 0x5601a6e8e080] mmco: unref short failure
[h264 @ 0x5601a6e8e080] mmco: unref short failure
[h264 @ 0x56097a2bbd00] mmco: unref short failure
[h264 @ 0x5559812c48c0] mmco: unref short failure
[h264 @ 0x5609795c5940] mmco: unref short failure
[h264 @ 0x5609795c5940] mmco: unref short failure
[h264 @ 0x5609795c5940] mmco: unref short failure
[h264 @ 0x5609795c5940] mmco: unref short failure
[h264 @ 0x5601ac84f500] mmco: unref short failure
[h264 @ 0x55597cd7f300] mmco: unref short failure
[h264 @ 0x55597cd7f300] mmco: unref short failure
[h264 @ 0x560982c22680] mmco: unref short failure
[h264 @ 0x560982c22680] mmco: unref short failure
  0%|          | 0/221 [00:00<?, ?it/s]  1%|          | 2/221 [00:00<00:21,  9.96it/s]  1%|▏         | 3/221 [00:00<00:29,  7.34it/s]  3%|▎         | 6/221 [00:00<00:16, 13.26it/s]  4%|▎         | 8/221 [00:00<00:18, 11.59it/s]  5%|▍         | 11/221 [00:00<00:14, 14.53it/s][h264 @ 0x5601b189d080] mmco: unref short failure
[h264 @ 0x5601b189d080] mmco: unref short failure
  6%|▌         | 13/221 [00:03<01:20,  2.57it/s]  7%|▋         | 15/221 [00:03<00:59,  3.46it/s]  8%|▊         | 17/221 [00:03<00:48,  4.20it/s]  9%|▊         | 19/221 [00:03<00:39,  5.16it/s] 10%|▉         | 21/221 [00:03<00:30,  6.59it/s] 10%|█         | 23/221 [00:07<02:23,  1.38it/s] 12%|█▏        | 26/221 [00:08<01:30,  2.14it/s] 13%|█▎        | 28/221 [00:08<01:08,  2.83it/s] 14%|█▍        | 31/221 [00:08<00:46,  4.10it/s] 15%|█▍        | 33/221 [00:08<00:36,  5.15it/s] 16%|█▋        | 36/221 [00:08<00:25,  7.20it/s] 17%|█▋        | 38/221 [00:08<00:22,  8.08it/s] 18%|█▊        | 40/221 [00:08<00:19,  9.42it/s] 19%|█▉        | 43/221 [00:08<00:14, 12.24it/s] 20%|██        | 45/221 [00:09<00:20,  8.49it/s] 21%|██▏       | 47/221 [00:13<01:57,  1.48it/s] 23%|██▎       | 50/221 [00:13<01:15,  2.26it/s] 24%|██▍       | 54/221 [00:17<01:46,  1.57it/s] 25%|██▌       | 56/221 [00:18<01:46,  1.55it/s] 27%|██▋       | 60/221 [00:19<01:06,  2.43it/s] 29%|██▉       | 64/221 [00:19<00:43,  3.64it/s] 30%|██▉       | 66/221 [00:23<01:44,  1.49it/s] 31%|███       | 68/221 [00:23<01:23,  1.83it/s] 32%|███▏      | 70/221 [00:24<01:05,  2.31it/s] 33%|███▎      | 72/221 [00:24<00:51,  2.92it/s] 34%|███▍      | 75/221 [00:24<00:35,  4.15it/s] 35%|███▍      | 77/221 [00:24<00:27,  5.18it/s] 36%|███▌      | 79/221 [00:24<00:25,  5.55it/s] 37%|███▋      | 82/221 [00:25<00:19,  6.98it/s] 39%|███▉      | 86/221 [00:25<00:13, 10.14it/s] 40%|███▉      | 88/221 [00:25<00:12, 10.49it/s] 41%|████      | 90/221 [00:25<00:13,  9.81it/s] 42%|████▏     | 93/221 [00:26<00:14,  8.93it/s] 43%|████▎     | 96/221 [00:26<00:13,  9.53it/s] 45%|████▍     | 99/221 [00:26<00:10, 11.35it/s] 46%|████▌     | 102/221 [00:26<00:08, 13.62it/s] 48%|████▊     | 105/221 [00:26<00:07, 15.76it/s] 48%|████▊     | 107/221 [00:27<00:11,  9.83it/s] 50%|████▉     | 110/221 [00:27<00:08, 12.56it/s] 51%|█████     | 112/221 [00:27<00:10, 10.23it/s] 52%|█████▏    | 115/221 [00:27<00:08, 12.95it/s] 53%|█████▎    | 117/221 [00:32<01:07,  1.55it/s] 54%|█████▍    | 119/221 [00:32<00:50,  2.02it/s] 55%|█████▌    | 122/221 [00:32<00:33,  2.99it/s] 56%|█████▌    | 124/221 [00:32<00:25,  3.77it/s] 57%|█████▋    | 126/221 [00:33<00:26,  3.53it/s] 58%|█████▊    | 128/221 [00:34<00:26,  3.53it/s] 59%|█████▉    | 131/221 [00:34<00:17,  5.22it/s] 60%|██████    | 133/221 [00:34<00:15,  5.57it/s] 61%|██████    | 135/221 [00:35<00:28,  3.04it/s] 62%|██████▏   | 136/221 [00:36<00:28,  2.96it/s] 62%|██████▏   | 137/221 [00:38<00:56,  1.48it/s] 62%|██████▏   | 138/221 [00:38<00:48,  1.71it/s] 63%|██████▎   | 139/221 [00:39<00:44,  1.86it/s] 63%|██████▎   | 140/221 [00:39<00:37,  2.18it/s] 64%|██████▍   | 141/221 [00:39<00:31,  2.56it/s] 64%|██████▍   | 142/221 [00:39<00:24,  3.18it/s] 66%|██████▌   | 145/221 [00:39<00:12,  5.97it/s] 67%|██████▋   | 148/221 [00:40<00:09,  7.68it/s] 68%|██████▊   | 150/221 [00:40<00:09,  7.24it/s] 68%|██████▊   | 151/221 [00:40<00:10,  6.47it/s] 70%|██████▉   | 154/221 [00:40<00:07,  9.22it/s] 71%|███████   | 156/221 [00:45<00:47,  1.37it/s] 71%|███████   | 157/221 [00:45<00:40,  1.59it/s] 72%|███████▏  | 160/221 [00:45<00:23,  2.64it/s] 73%|███████▎  | 162/221 [00:45<00:17,  3.30it/s] 74%|███████▍  | 164/221 [00:45<00:13,  4.10it/s] 75%|███████▌  | 166/221 [00:50<00:46,  1.18it/s] 76%|███████▌  | 167/221 [00:52<00:58,  1.08s/it] 76%|███████▋  | 169/221 [00:53<00:40,  1.27it/s] 77%|███████▋  | 170/221 [00:53<00:33,  1.51it/s] 78%|███████▊  | 173/221 [00:53<00:18,  2.61it/s] 79%|███████▉  | 175/221 [00:53<00:13,  3.48it/s] 80%|████████  | 177/221 [00:53<00:09,  4.48it/s] 81%|████████  | 179/221 [00:54<00:12,  3.28it/s] 82%|████████▏ | 182/221 [00:54<00:08,  4.83it/s] 84%|████████▎ | 185/221 [00:54<00:05,  6.76it/s] 85%|████████▍ | 187/221 [00:55<00:04,  8.10it/s] 86%|████████▌ | 189/221 [00:55<00:03,  8.35it/s] 87%|████████▋ | 193/221 [00:55<00:02, 12.35it/s] 89%|████████▊ | 196/221 [00:55<00:01, 14.95it/s] 90%|█████████ | 199/221 [00:55<00:01, 16.03it/s] 91%|█████████▏| 202/221 [00:55<00:01, 16.28it/s] 93%|█████████▎| 205/221 [00:56<00:01, 15.27it/s] 94%|█████████▍| 208/221 [00:56<00:00, 16.85it/s] 95%|█████████▌| 210/221 [00:56<00:00, 17.28it/s] 96%|█████████▌| 212/221 [00:56<00:00, 15.94it/s] 97%|█████████▋| 214/221 [00:56<00:00, 10.07it/s] 98%|█████████▊| 216/221 [00:58<00:01,  3.23it/s] 99%|█████████▊| 218/221 [00:58<00:00,  4.20it/s]100%|█████████▉| 220/221 [01:03<00:00,  1.22it/s]100%|█████████▉| 220/221 [01:03<00:00,  3.48it/s]
  0%|          | 0/221 [00:00<?, ?it/s]  0%|          | 1/221 [00:00<00:58,  3.77it/s]  1%|          | 2/221 [00:00<00:58,  3.77it/s]  1%|▏         | 3/221 [00:00<00:57,  3.78it/s]  2%|▏         | 4/221 [00:01<00:57,  3.78it/s]  2%|▏         | 5/221 [00:01<00:57,  3.78it/s]  3%|▎         | 6/221 [00:01<00:56,  3.78it/s]  3%|▎         | 7/221 [00:01<00:56,  3.78it/s]  4%|▎         | 8/221 [00:02<00:56,  3.78it/s]  4%|▍         | 9/221 [00:02<00:56,  3.78it/s]  5%|▍         | 10/221 [00:02<00:55,  3.78it/s]  5%|▍         | 11/221 [00:02<00:55,  3.78it/s]  5%|▌         | 12/221 [00:03<00:55,  3.78it/s]  6%|▌         | 13/221 [00:03<00:55,  3.78it/s]  6%|▋         | 14/221 [00:03<00:54,  3.78it/s]  7%|▋         | 15/221 [00:03<00:54,  3.78it/s]  7%|▋         | 16/221 [00:04<00:54,  3.78it/s]  8%|▊         | 17/221 [00:04<00:53,  3.78it/s]  8%|▊         | 18/221 [00:04<00:53,  3.78it/s]  9%|▊         | 19/221 [00:05<00:53,  3.78it/s]  9%|▉         | 20/221 [00:05<00:53,  3.78it/s] 10%|▉         | 21/221 [00:05<00:52,  3.78it/s] 10%|▉         | 22/221 [00:05<00:52,  3.78it/s] 10%|█         | 23/221 [00:06<00:52,  3.78it/s] 11%|█         | 24/221 [00:06<00:52,  3.78it/s] 11%|█▏        | 25/221 [00:06<00:51,  3.78it/s] 12%|█▏        | 26/221 [00:06<00:51,  3.78it/s] 12%|█▏        | 27/221 [00:07<00:51,  3.78it/s] 13%|█▎        | 28/221 [00:07<00:51,  3.78it/s] 13%|█▎        | 29/221 [00:07<00:50,  3.78it/s] 14%|█▎        | 30/221 [00:07<00:50,  3.78it/s] 14%|█▍        | 31/221 [00:08<00:50,  3.78it/s] 14%|█▍        | 32/221 [00:08<00:49,  3.78it/s] 15%|█▍        | 33/221 [00:08<00:49,  3.78it/s] 15%|█▌        | 34/221 [00:08<00:49,  3.78it/s] 16%|█▌        | 35/221 [00:09<00:49,  3.78it/s] 16%|█▋        | 36/221 [00:09<00:48,  3.78it/s] 17%|█▋        | 37/221 [00:09<00:48,  3.78it/s] 17%|█▋        | 38/221 [00:10<00:48,  3.78it/s] 18%|█▊        | 39/221 [00:10<00:48,  3.78it/s] 18%|█▊        | 40/221 [00:10<00:47,  3.78it/s] 19%|█▊        | 41/221 [00:10<00:47,  3.78it/s] 19%|█▉        | 42/221 [00:11<00:47,  3.78it/s] 19%|█▉        | 43/221 [00:11<00:47,  3.78it/s] 20%|█▉        | 44/221 [00:11<00:46,  3.78it/s] 20%|██        | 45/221 [00:11<00:46,  3.78it/s] 21%|██        | 46/221 [00:12<00:46,  3.78it/s] 21%|██▏       | 47/221 [00:12<00:45,  3.78it/s] 22%|██▏       | 48/221 [00:12<00:45,  3.78it/s] 22%|██▏       | 49/221 [00:12<00:45,  3.78it/s] 23%|██▎       | 50/221 [00:13<00:45,  3.78it/s] 23%|██▎       | 51/221 [00:13<00:44,  3.78it/s] 24%|██▎       | 52/221 [00:13<00:44,  3.78it/s] 24%|██▍       | 53/221 [00:14<00:44,  3.78it/s] 24%|██▍       | 54/221 [00:14<00:44,  3.78it/s] 25%|██▍       | 55/221 [00:14<00:43,  3.78it/s] 25%|██▌       | 56/221 [00:14<00:43,  3.78it/s] 26%|██▌       | 57/221 [00:15<00:43,  3.78it/s] 26%|██▌       | 58/221 [00:15<00:43,  3.78it/s] 27%|██▋       | 59/221 [00:15<00:42,  3.78it/s] 27%|██▋       | 60/221 [00:15<00:42,  3.78it/s] 28%|██▊       | 61/221 [00:16<00:42,  3.78it/s] 28%|██▊       | 62/221 [00:16<00:42,  3.78it/s] 29%|██▊       | 63/221 [00:16<00:41,  3.78it/s] 29%|██▉       | 64/221 [00:16<00:41,  3.78it/s] 29%|██▉       | 65/221 [00:17<00:41,  3.78it/s] 30%|██▉       | 66/221 [00:17<00:40,  3.78it/s] 30%|███       | 67/221 [00:17<00:40,  3.78it/s] 31%|███       | 68/221 [00:17<00:40,  3.78it/s] 31%|███       | 69/221 [00:18<00:40,  3.78it/s] 32%|███▏      | 70/221 [00:18<00:39,  3.78it/s] 32%|███▏      | 71/221 [00:18<00:39,  3.78it/s] 33%|███▎      | 72/221 [00:19<00:39,  3.78it/s] 33%|███▎      | 73/221 [00:19<00:39,  3.78it/s] 33%|███▎      | 74/221 [00:19<00:38,  3.78it/s] 34%|███▍      | 75/221 [00:19<00:38,  3.78it/s] 34%|███▍      | 76/221 [00:20<00:38,  3.78it/s] 35%|███▍      | 77/221 [00:20<00:38,  3.78it/s] 35%|███▌      | 78/221 [00:20<00:37,  3.78it/s] 36%|███▌      | 79/221 [00:20<00:37,  3.78it/s] 36%|███▌      | 80/221 [00:21<00:37,  3.78it/s] 37%|███▋      | 81/221 [00:21<00:37,  3.78it/s] 37%|███▋      | 82/221 [00:21<00:36,  3.78it/s] 38%|███▊      | 83/221 [00:21<00:36,  3.78it/s] 38%|███▊      | 84/221 [00:22<00:36,  3.78it/s] 38%|███▊      | 85/221 [00:22<00:35,  3.78it/s] 39%|███▉      | 86/221 [00:22<00:35,  3.78it/s] 39%|███▉      | 87/221 [00:23<00:35,  3.78it/s] 40%|███▉      | 88/221 [00:23<00:35,  3.78it/s] 40%|████      | 89/221 [00:23<00:34,  3.78it/s] 41%|████      | 90/221 [00:23<00:34,  3.78it/s] 41%|████      | 91/221 [00:24<00:34,  3.78it/s] 42%|████▏     | 92/221 [00:24<00:34,  3.78it/s] 42%|████▏     | 93/221 [00:24<00:33,  3.78it/s] 43%|████▎     | 94/221 [00:24<00:33,  3.78it/s] 43%|████▎     | 95/221 [00:25<00:33,  3.78it/s] 43%|████▎     | 96/221 [00:25<00:33,  3.78it/s] 44%|████▍     | 97/221 [00:25<00:32,  3.78it/s] 44%|████▍     | 98/221 [00:25<00:32,  3.78it/s] 45%|████▍     | 99/221 [00:26<00:32,  3.78it/s] 45%|████▌     | 100/221 [00:26<00:31,  3.78it/s] 46%|████▌     | 101/221 [00:26<00:31,  3.78it/s] 46%|████▌     | 102/221 [00:26<00:31,  3.78it/s] 47%|████▋     | 103/221 [00:27<00:31,  3.78it/s] 47%|████▋     | 104/221 [00:27<00:30,  3.78it/s] 48%|████▊     | 105/221 [00:27<00:30,  3.78it/s] 48%|████▊     | 106/221 [00:28<00:30,  3.78it/s] 48%|████▊     | 107/221 [00:28<00:30,  3.78it/s] 49%|████▉     | 108/221 [00:28<00:29,  3.78it/s] 49%|████▉     | 109/221 [00:28<00:29,  3.78it/s] 50%|████▉     | 110/221 [00:29<00:29,  3.78it/s] 50%|█████     | 111/221 [00:29<00:29,  3.78it/s] 51%|█████     | 112/221 [00:29<00:28,  3.78it/s] 51%|█████     | 113/221 [00:29<00:28,  3.78it/s] 52%|█████▏    | 114/221 [00:30<00:28,  3.78it/s] 52%|█████▏    | 115/221 [00:30<00:28,  3.78it/s] 52%|█████▏    | 116/221 [00:30<00:27,  3.78it/s] 53%|█████▎    | 117/221 [00:30<00:27,  3.78it/s] 53%|█████▎    | 118/221 [00:31<00:27,  3.78it/s] 54%|█████▍    | 119/221 [00:31<00:26,  3.78it/s] 54%|█████▍    | 120/221 [00:31<00:26,  3.78it/s] 55%|█████▍    | 121/221 [00:31<00:26,  3.78it/s] 55%|█████▌    | 122/221 [00:32<00:26,  3.78it/s] 56%|█████▌    | 123/221 [00:32<00:25,  3.78it/s] 56%|█████▌    | 124/221 [00:32<00:25,  3.78it/s] 57%|█████▋    | 125/221 [00:33<00:25,  3.78it/s] 57%|█████▋    | 126/221 [00:33<00:25,  3.78it/s] 57%|█████▋    | 127/221 [00:33<00:24,  3.78it/s] 58%|█████▊    | 128/221 [00:33<00:24,  3.78it/s] 58%|█████▊    | 129/221 [00:34<00:24,  3.78it/s] 59%|█████▉    | 130/221 [00:34<00:24,  3.78it/s] 59%|█████▉    | 131/221 [00:34<00:23,  3.78it/s] 60%|█████▉    | 132/221 [00:34<00:23,  3.78it/s] 60%|██████    | 133/221 [00:35<00:23,  3.78it/s] 61%|██████    | 134/221 [00:35<00:22,  3.78it/s] 61%|██████    | 135/221 [00:35<00:22,  3.78it/s] 62%|██████▏   | 136/221 [00:35<00:22,  3.78it/s] 62%|██████▏   | 137/221 [00:36<00:22,  3.78it/s] 62%|██████▏   | 138/221 [00:36<00:21,  3.78it/s] 63%|██████▎   | 139/221 [00:36<00:21,  3.78it/s] 63%|██████▎   | 140/221 [00:37<00:21,  3.78it/s] 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s] 64%|██████▍   | 142/221 [00:37<00:20,  3.78it/s] 65%|██████▍   | 143/221 [00:37<00:20,  3.78it/s] 65%|██████▌   | 144/221 [00:38<00:20,  3.78it/s] 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s] 66%|██████▌   | 146/221 [00:38<00:19,  3.78it/s] 67%|██████▋   | 147/221 [00:38<00:19,  3.78it/s] 67%|██████▋   | 148/221 [00:39<00:19,  3.78it/s] 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s] 68%|██████▊   | 150/221 [00:39<00:18,  3.78it/s] 68%|██████▊   | 151/221 [00:39<00:18,  3.78it/s] 69%|██████▉   | 152/221 [00:40<00:18,  3.78it/s] 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s] 70%|██████▉   | 154/221 [00:40<00:17,  3.78it/s] 70%|███████   | 155/221 [00:40<00:17,  3.78it/s] 71%|███████   | 156/221 [00:41<00:17,  3.78it/s] 71%|███████   | 157/221 [00:41<00:16,  3.78it/s] 71%|███████▏  | 158/221 [00:41<00:16,  3.78it/s] 72%|███████▏  | 159/221 [00:42<00:16,  3.78it/s] 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s] 73%|███████▎  | 161/221 [00:42<00:15,  3.78it/s] 73%|███████▎  | 162/221 [00:42<00:15,  3.78it/s] 74%|███████▍  | 163/221 [00:43<00:15,  3.78it/s] 74%|███████▍  | 164/221 [00:43<00:15,  3.78it/s] 75%|███████▍  | 165/221 [00:43<00:14,  3.78it/s] 75%|███████▌  | 166/221 [00:43<00:14,  3.78it/s] 76%|███████▌  | 167/221 [00:44<00:14,  3.78it/s] 76%|███████▌  | 168/221 [00:44<00:14,  3.78it/s] 76%|███████▋  | 169/221 [00:44<00:13,  3.78it/s] 77%|███████▋  | 170/221 [00:44<00:13,  3.79it/s] 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s] 78%|███████▊  | 172/221 [00:45<00:12,  3.79it/s] 78%|███████▊  | 173/221 [00:45<00:12,  3.79it/s] 79%|███████▊  | 174/221 [00:45<00:12,  3.78it/s] 79%|███████▉  | 175/221 [00:46<00:12,  3.78it/s] 80%|███████▉  | 176/221 [00:46<00:11,  3.78it/s] 80%|████████  | 177/221 [00:46<00:11,  3.79it/s] 81%|████████  | 178/221 [00:47<00:11,  3.79it/s] 81%|████████  | 179/221 [00:47<00:11,  3.79it/s] 81%|████████▏ | 180/221 [00:47<00:10,  3.79it/s] 82%|████████▏ | 181/221 [00:47<00:10,  3.79it/s] 82%|████████▏ | 182/221 [00:48<00:10,  3.79it/s] 83%|████████▎ | 183/221 [00:48<00:10,  3.79it/s] 83%|████████▎ | 184/221 [00:48<00:09,  3.79it/s] 84%|████████▎ | 185/221 [00:48<00:09,  3.79it/s] 84%|████████▍ | 186/221 [00:49<00:09,  3.79it/s] 85%|████████▍ | 187/221 [00:49<00:08,  3.79it/s] 85%|████████▌ | 188/221 [00:49<00:08,  3.79it/s] 86%|████████▌ | 189/221 [00:49<00:08,  3.79it/s] 86%|████████▌ | 190/221 [00:50<00:08,  3.79it/s] 86%|████████▋ | 191/221 [00:50<00:07,  3.79it/s] 87%|████████▋ | 192/221 [00:50<00:07,  3.78it/s] 87%|████████▋ | 193/221 [00:51<00:07,  3.78it/s] 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s] 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s] 89%|████████▊ | 196/221 [00:51<00:06,  3.79it/s] 89%|████████▉ | 197/221 [00:52<00:06,  3.78it/s] 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s] 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s] 90%|█████████ | 200/221 [00:52<00:05,  3.78it/s] 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s] 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s] 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s] 92%|█████████▏| 204/221 [00:53<00:04,  3.79it/s] 93%|█████████▎| 205/221 [00:54<00:04,  3.79it/s] 93%|█████████▎| 206/221 [00:54<00:03,  3.79it/s] 94%|█████████▎| 207/221 [00:54<00:03,  3.79it/s] 94%|█████████▍| 208/221 [00:54<00:03,  3.79it/s] 95%|█████████▍| 209/221 [00:55<00:03,  3.79it/s] 95%|█████████▌| 210/221 [00:55<00:02,  3.79it/s] 95%|█████████▌| 211/221 [00:55<00:02,  3.79it/s] 96%|█████████▌| 212/221 [00:56<00:02,  3.79it/s] 96%|█████████▋| 213/221 [00:56<00:02,  3.79it/s] 97%|█████████▋| 214/221 [00:56<00:01,  3.79it/s] 97%|█████████▋| 215/221 [00:56<00:01,  3.79it/s] 98%|█████████▊| 216/221 [00:57<00:01,  3.79it/s] 98%|█████████▊| 217/221 [00:57<00:01,  3.79it/s] 99%|█████████▊| 218/221 [00:57<00:00,  3.79it/s] 99%|█████████▉| 219/221 [00:57<00:00,  3.78it/s]100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s]100%|██████████| 221/221 [00:58<00:00,  3.78it/s]100%|██████████| 221/221 [00:58<00:00,  3.78it/s]
  0%|          | 0/221 [00:00<?, ?it/s]  1%|          | 2/221 [00:00<00:38,  5.76it/s]  1%|▏         | 3/221 [00:00<00:45,  4.78it/s]  2%|▏         | 4/221 [00:00<00:37,  5.81it/s]  2%|▏         | 5/221 [00:00<00:36,  5.98it/s]  3%|▎         | 7/221 [00:01<00:37,  5.72it/s]  4%|▎         | 8/221 [00:01<00:45,  4.65it/s]  4%|▍         | 9/221 [00:01<00:40,  5.18it/s]  5%|▍         | 10/221 [00:02<00:54,  3.89it/s]  5%|▍         | 11/221 [00:02<00:56,  3.75it/s]  5%|▌         | 12/221 [00:02<00:52,  4.01it/s]  6%|▌         | 13/221 [00:03<01:08,  3.04it/s]  6%|▋         | 14/221 [00:03<01:03,  3.26it/s]  7%|▋         | 15/221 [00:03<00:59,  3.46it/s]  7%|▋         | 16/221 [00:04<01:03,  3.22it/s]  8%|▊         | 17/221 [00:04<01:13,  2.77it/s]  8%|▊         | 18/221 [00:04<01:05,  3.12it/s]  9%|▊         | 19/221 [00:05<01:03,  3.20it/s]  9%|▉         | 20/221 [00:05<00:53,  3.72it/s] 10%|▉         | 21/221 [00:05<00:53,  3.74it/s] 10%|▉         | 22/221 [00:05<00:54,  3.67it/s] 11%|█         | 24/221 [00:06<00:45,  4.33it/s] 11%|█▏        | 25/221 [00:06<00:49,  3.96it/s] 12%|█▏        | 26/221 [00:06<00:51,  3.77it/s] 12%|█▏        | 27/221 [00:06<00:47,  4.10it/s] 13%|█▎        | 28/221 [00:07<01:00,  3.20it/s] 13%|█▎        | 29/221 [00:07<00:58,  3.29it/s] 14%|█▎        | 30/221 [00:07<00:59,  3.22it/s] 14%|█▍        | 31/221 [00:08<00:53,  3.56it/s] 14%|█▍        | 32/221 [00:08<00:46,  4.11it/s] 15%|█▍        | 33/221 [00:08<00:43,  4.29it/s] 15%|█▌        | 34/221 [00:08<00:43,  4.33it/s] 16%|█▌        | 35/221 [00:09<00:49,  3.78it/s] 16%|█▋        | 36/221 [00:09<00:50,  3.67it/s] 17%|█▋        | 37/221 [00:09<00:46,  3.93it/s] 17%|█▋        | 38/221 [00:09<00:45,  4.03it/s] 18%|█▊        | 39/221 [00:10<00:43,  4.14it/s] 18%|█▊        | 40/221 [00:10<00:51,  3.53it/s] 19%|█▊        | 41/221 [00:10<00:53,  3.34it/s] 19%|█▉        | 42/221 [00:10<00:44,  4.06it/s] 19%|█▉        | 43/221 [00:11<00:41,  4.31it/s] 20%|█▉        | 44/221 [00:11<00:39,  4.48it/s] 20%|██        | 45/221 [00:11<00:42,  4.14it/s] 21%|██        | 46/221 [00:11<00:43,  4.03it/s] 21%|██▏       | 47/221 [00:12<00:40,  4.34it/s] 22%|██▏       | 48/221 [00:12<00:34,  4.95it/s] 22%|██▏       | 49/221 [00:12<00:35,  4.89it/s] 23%|██▎       | 50/221 [00:12<00:51,  3.29it/s] 23%|██▎       | 51/221 [00:13<00:45,  3.72it/s] 24%|██▎       | 52/221 [00:13<00:46,  3.63it/s] 24%|██▍       | 53/221 [00:13<00:44,  3.78it/s] 24%|██▍       | 54/221 [00:13<00:46,  3.58it/s] 25%|██▍       | 55/221 [00:14<00:43,  3.77it/s] 25%|██▌       | 56/221 [00:14<00:42,  3.89it/s] 26%|██▌       | 57/221 [00:14<00:40,  4.07it/s] 26%|██▌       | 58/221 [00:14<00:43,  3.75it/s] 27%|██▋       | 59/221 [00:15<00:38,  4.18it/s] 27%|██▋       | 60/221 [00:15<00:35,  4.57it/s] 28%|██▊       | 61/221 [00:15<00:35,  4.48it/s] 28%|██▊       | 62/221 [00:15<00:36,  4.39it/s] 29%|██▊       | 63/221 [00:16<00:35,  4.40it/s] 29%|██▉       | 64/221 [00:16<00:39,  3.97it/s] 29%|██▉       | 65/221 [00:16<00:39,  3.99it/s] 30%|██▉       | 66/221 [00:17<00:49,  3.11it/s] 30%|███       | 67/221 [00:17<00:48,  3.14it/s] 31%|███       | 68/221 [00:17<00:43,  3.54it/s] 31%|███       | 69/221 [00:18<01:00,  2.50it/s] 32%|███▏      | 70/221 [00:18<00:55,  2.72it/s] 32%|███▏      | 71/221 [00:18<00:47,  3.19it/s] 33%|███▎      | 72/221 [00:19<00:48,  3.04it/s] 33%|███▎      | 73/221 [00:19<00:42,  3.49it/s] 33%|███▎      | 74/221 [00:19<00:34,  4.24it/s] 34%|███▍      | 75/221 [00:19<00:35,  4.12it/s] 34%|███▍      | 76/221 [00:19<00:32,  4.46it/s] 35%|███▍      | 77/221 [00:20<00:40,  3.53it/s] 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s] 36%|███▌      | 79/221 [00:21<00:51,  2.74it/s] 36%|███▌      | 80/221 [00:21<00:50,  2.77it/s] 37%|███▋      | 81/221 [00:21<00:40,  3.43it/s] 37%|███▋      | 82/221 [00:21<00:42,  3.29it/s] 38%|███▊      | 83/221 [00:22<00:41,  3.32it/s] 38%|███▊      | 84/221 [00:22<00:38,  3.54it/s] 38%|███▊      | 85/221 [00:22<00:33,  4.01it/s] 39%|███▉      | 86/221 [00:22<00:30,  4.45it/s] 39%|███▉      | 87/221 [00:22<00:28,  4.70it/s] 40%|███▉      | 88/221 [00:23<00:39,  3.33it/s] 40%|████      | 89/221 [00:23<00:42,  3.12it/s] 41%|████      | 90/221 [00:24<00:38,  3.44it/s] 41%|████      | 91/221 [00:24<00:33,  3.86it/s] 42%|████▏     | 92/221 [00:24<00:38,  3.34it/s] 42%|████▏     | 93/221 [00:25<00:45,  2.80it/s] 43%|████▎     | 94/221 [00:25<00:43,  2.93it/s] 43%|████▎     | 95/221 [00:25<00:41,  3.07it/s] 43%|████▎     | 96/221 [00:25<00:36,  3.44it/s] 44%|████▍     | 97/221 [00:26<00:36,  3.44it/s] 44%|████▍     | 98/221 [00:26<00:41,  2.99it/s] 45%|████▍     | 99/221 [00:27<00:41,  2.96it/s] 45%|████▌     | 100/221 [00:27<00:40,  3.01it/s] 46%|████▌     | 101/221 [00:27<00:38,  3.11it/s] 46%|████▌     | 102/221 [00:28<00:42,  2.83it/s] 47%|████▋     | 103/221 [00:28<00:36,  3.26it/s] 47%|████▋     | 104/221 [00:28<00:35,  3.32it/s] 48%|████▊     | 105/221 [00:28<00:40,  2.88it/s] 48%|████▊     | 106/221 [00:29<00:35,  3.21it/s] 48%|████▊     | 107/221 [00:29<00:36,  3.14it/s] 49%|████▉     | 108/221 [00:29<00:35,  3.19it/s] 49%|████▉     | 109/221 [00:30<00:30,  3.68it/s] 50%|████▉     | 110/221 [00:30<00:32,  3.46it/s] 50%|█████     | 111/221 [00:30<00:34,  3.23it/s] 51%|█████     | 112/221 [00:31<00:34,  3.17it/s] 51%|█████     | 113/221 [00:31<00:30,  3.51it/s] 52%|█████▏    | 114/221 [00:31<00:25,  4.23it/s] 52%|█████▏    | 115/221 [00:31<00:28,  3.75it/s] 52%|█████▏    | 116/221 [00:32<00:29,  3.61it/s] 53%|█████▎    | 117/221 [00:32<00:28,  3.68it/s] 53%|█████▎    | 118/221 [00:32<00:27,  3.79it/s] 54%|█████▍    | 119/221 [00:32<00:28,  3.64it/s] 54%|█████▍    | 120/221 [00:33<00:26,  3.75it/s] 55%|█████▍    | 121/221 [00:33<00:23,  4.33it/s] 55%|█████▌    | 122/221 [00:33<00:22,  4.39it/s] 56%|█████▌    | 123/221 [00:33<00:23,  4.12it/s] 56%|█████▌    | 124/221 [00:33<00:24,  4.01it/s] 57%|█████▋    | 125/221 [00:34<00:28,  3.37it/s] 57%|█████▋    | 126/221 [00:34<00:25,  3.71it/s] 57%|█████▋    | 127/221 [00:35<00:30,  3.10it/s] 58%|█████▊    | 128/221 [00:35<00:28,  3.23it/s] 58%|█████▊    | 129/221 [00:35<00:23,  3.95it/s] 59%|█████▉    | 130/221 [00:35<00:23,  3.94it/s] 60%|█████▉    | 132/221 [00:36<00:20,  4.41it/s] 60%|██████    | 133/221 [00:36<00:23,  3.79it/s] 61%|██████    | 134/221 [00:36<00:24,  3.60it/s] 61%|██████    | 135/221 [00:36<00:22,  3.88it/s] 62%|██████▏   | 136/221 [00:37<00:22,  3.71it/s] 62%|██████▏   | 137/221 [00:37<00:23,  3.62it/s] 62%|██████▏   | 138/221 [00:37<00:24,  3.34it/s] 63%|██████▎   | 139/221 [00:38<00:25,  3.20it/s] 63%|██████▎   | 140/221 [00:38<00:24,  3.27it/s] 64%|██████▍   | 141/221 [00:38<00:23,  3.34it/s] 64%|██████▍   | 142/221 [00:39<00:21,  3.69it/s] 65%|██████▍   | 143/221 [00:39<00:21,  3.58it/s] 65%|██████▌   | 144/221 [00:39<00:22,  3.37it/s] 66%|██████▌   | 145/221 [00:39<00:20,  3.74it/s] 66%|██████▌   | 146/221 [00:40<00:17,  4.32it/s] 67%|██████▋   | 147/221 [00:40<00:19,  3.75it/s] 67%|██████▋   | 148/221 [00:40<00:21,  3.32it/s] 67%|██████▋   | 149/221 [00:41<00:21,  3.30it/s] 68%|██████▊   | 150/221 [00:41<00:21,  3.34it/s] 68%|██████▊   | 151/221 [00:41<00:24,  2.91it/s] 69%|██████▉   | 152/221 [00:42<00:26,  2.58it/s] 69%|██████▉   | 153/221 [00:42<00:22,  3.02it/s] 70%|██████▉   | 154/221 [00:42<00:19,  3.46it/s] 70%|███████   | 155/221 [00:42<00:19,  3.42it/s] 71%|███████   | 156/221 [00:43<00:19,  3.26it/s] 71%|███████   | 157/221 [00:43<00:21,  3.03it/s] 71%|███████▏  | 158/221 [00:44<00:19,  3.17it/s] 72%|███████▏  | 159/221 [00:44<00:16,  3.84it/s] 72%|███████▏  | 160/221 [00:44<00:14,  4.26it/s] 73%|███████▎  | 161/221 [00:44<00:13,  4.42it/s] 73%|███████▎  | 162/221 [00:44<00:11,  5.16it/s] 74%|███████▍  | 163/221 [00:44<00:13,  4.46it/s] 74%|███████▍  | 164/221 [00:45<00:12,  4.54it/s] 75%|███████▍  | 165/221 [00:45<00:15,  3.73it/s] 75%|███████▌  | 166/221 [00:45<00:14,  3.88it/s] 76%|███████▌  | 167/221 [00:45<00:12,  4.41it/s] 76%|███████▌  | 168/221 [00:46<00:11,  4.45it/s] 76%|███████▋  | 169/221 [00:46<00:10,  4.91it/s] 77%|███████▋  | 170/221 [00:46<00:16,  3.09it/s] 77%|███████▋  | 171/221 [00:47<00:14,  3.50it/s] 78%|███████▊  | 172/221 [00:47<00:13,  3.68it/s] 78%|███████▊  | 173/221 [00:47<00:14,  3.39it/s] 79%|███████▊  | 174/221 [00:48<00:14,  3.16it/s] 79%|███████▉  | 175/221 [00:48<00:14,  3.18it/s] 80%|███████▉  | 176/221 [00:48<00:13,  3.45it/s] 80%|████████  | 177/221 [00:48<00:11,  3.79it/s] 81%|████████  | 178/221 [00:49<00:13,  3.22it/s] 81%|████████  | 179/221 [00:49<00:12,  3.28it/s] 81%|████████▏ | 180/221 [00:49<00:11,  3.70it/s] 82%|████████▏ | 181/221 [00:49<00:09,  4.18it/s] 82%|████████▏ | 182/221 [00:50<00:12,  3.25it/s] 83%|████████▎ | 183/221 [00:50<00:11,  3.24it/s] 83%|████████▎ | 184/221 [00:50<00:09,  3.71it/s] 84%|████████▎ | 185/221 [00:51<00:09,  3.97it/s] 84%|████████▍ | 186/221 [00:51<00:10,  3.43it/s] 85%|████████▍ | 187/221 [00:51<00:10,  3.24it/s] 85%|████████▌ | 188/221 [00:52<00:10,  3.28it/s] 86%|████████▌ | 189/221 [00:52<00:08,  3.63it/s] 86%|████████▌ | 190/221 [00:52<00:09,  3.40it/s] 86%|████████▋ | 191/221 [00:52<00:07,  3.91it/s] 87%|████████▋ | 192/221 [00:53<00:07,  3.87it/s] 87%|████████▋ | 193/221 [00:53<00:06,  4.40it/s] 88%|████████▊ | 194/221 [00:53<00:05,  4.50it/s] 88%|████████▊ | 195/221 [00:53<00:06,  4.19it/s] 89%|████████▊ | 196/221 [00:53<00:06,  3.89it/s] 89%|████████▉ | 197/221 [00:54<00:05,  4.06it/s] 90%|████████▉ | 198/221 [00:54<00:06,  3.57it/s] 90%|█████████ | 199/221 [00:54<00:06,  3.51it/s] 90%|█████████ | 200/221 [00:55<00:06,  3.06it/s] 91%|█████████ | 201/221 [00:55<00:06,  3.19it/s] 91%|█████████▏| 202/221 [00:55<00:06,  2.88it/s] 92%|█████████▏| 203/221 [00:56<00:05,  3.29it/s] 92%|█████████▏| 204/221 [00:56<00:04,  3.55it/s] 93%|█████████▎| 205/221 [00:56<00:03,  4.10it/s] 93%|█████████▎| 206/221 [00:56<00:04,  3.51it/s] 94%|█████████▎| 207/221 [00:57<00:03,  3.64it/s] 94%|█████████▍| 208/221 [00:57<00:03,  3.28it/s] 95%|█████████▍| 209/221 [00:57<00:03,  3.29it/s] 95%|█████████▌| 210/221 [00:58<00:02,  3.68it/s] 95%|█████████▌| 211/221 [00:58<00:03,  3.27it/s] 96%|█████████▌| 212/221 [00:58<00:02,  3.45it/s] 96%|█████████▋| 213/221 [00:58<00:02,  3.97it/s] 97%|█████████▋| 214/221 [00:59<00:02,  3.42it/s] 97%|█████████▋| 215/221 [00:59<00:01,  3.69it/s] 98%|█████████▊| 216/221 [00:59<00:01,  3.51it/s] 98%|█████████▊| 217/221 [01:00<00:01,  3.24it/s] 99%|█████████▊| 218/221 [01:00<00:00,  3.24it/s] 99%|█████████▉| 219/221 [01:00<00:00,  3.08it/s]100%|█████████▉| 220/221 [01:01<00:00,  3.10it/s]100%|██████████| 221/221 [01:01<00:00,  2.98it/s]100%|██████████| 221/221 [01:01<00:00,  3.59it/s]
09/08/2024 20:41:17 - INFO - __main__ -   ==== evaluation--ret%tv--msrvtt_ret_ret_area_forward========

09/08/2024 20:41:17 - INFO - __main__ -   {'area_r1': 24.1, 'area_recall': '24.1/43.1/50.6', 'area_ravg': 39.3}
09/08/2024 20:41:17 - INFO - __main__ -   ==== evaluation--ret%tv--msrvtt_ret_ret_area_backard========

09/08/2024 20:41:17 - INFO - __main__ -   {'forward_r1': 33.3, 'forward_recall': '33.3/64.7/75.1', 'forward_ravg': 57.7}
09/08/2024 20:41:17 - INFO - __main__ -   ==== evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video========

09/08/2024 20:41:17 - INFO - __main__ -   {'area_video_r1': 33.3, 'area_video_recall': '33.3/64.4/75.9', 'area_video_ravg': 57.8}
09/08/2024 20:41:17 - INFO - __main__ -   ==== evaluation--ret%tv--msrvtt_ret_ret_itm_area========

09/08/2024 20:41:17 - INFO - __main__ -   {'area_video_r1': 47.4, 'area_video_recall': '47.4/66.6/72.1', 'area_video_ravg': 62.0, 'area_video_back_r1': 42.8, 'area_video_back_recall': '42.8/67.6/77.0', 'area_video_back_ravg': 62.5}
09/08/2024 20:41:17 - INFO - __main__ -   ==== evaluation--ret%tv--msrvtt_ret_ret_itc_tv========

09/08/2024 20:41:17 - INFO - __main__ -   {'video_r1': 44.9, 'video_recall': '44.9/72.4/82.5', 'video_ravg': 66.6}
09/08/2024 20:41:17 - INFO - __main__ -   ==== evaluation--ret%tv--msrvtt_ret_ret_itm_tv========

09/08/2024 20:41:17 - INFO - __main__ -   {'video_r1': 50.3, 'video_recall': '50.3/72.4/80.4', 'video_ravg': 67.7}
  0%|          | 0/1945 [00:00<?, ?it/s][h264 @ 0x5601b07b6840] mmco: unref short failure
  0%|          | 1/1945 [00:09<5:15:28,  9.74s/it][h264 @ 0x55598982d800] mmco: unref short failure
[h264 @ 0x55598982d800] mmco: unref short failure
[h264 @ 0x55598982d800] mmco: unref short failure
[h264 @ 0x55598982d800] mmco: unref short failure
  0%|          | 2/1945 [00:14<3:32:50,  6.57s/it][h264 @ 0x5601af49e100] mmco: unref short failure
[h264 @ 0x5609804b0280] mmco: unref short failure
[h264 @ 0x5609804b0280] mmco: unref short failure
[h264 @ 0x5609804b0280] mmco: unref short failure
[h264 @ 0x5609804b0280] mmco: unref short failure
[h264 @ 0x5609804b0280] mmco: unref short failure
[h264 @ 0x5609804b0280] mmco: unref short failure
  0%|          | 3/1945 [00:19<3:10:04,  5.87s/it][h264 @ 0x5609863eb280] mmco: unref short failure
[h264 @ 0x5609863eb280] mmco: unref short failure
[h264 @ 0x562078dbaac0] mmco: unref short failure
  0%|          | 4/1945 [00:24<2:58:12,  5.51s/it][h264 @ 0x55597c618340] mmco: unref short failure
[h264 @ 0x55597c618340] mmco: unref short failure
[h264 @ 0x55597c618340] mmco: unref short failure
[h264 @ 0x555989d42c40] mmco: unref short failure
[h264 @ 0x555989d42c40] mmco: unref short failure
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
  0%|          | 5/1945 [00:30<3:05:17,  5.73s/it][h264 @ 0x560984d93e00] mmco: unref short failure
[h264 @ 0x560984d93e00] mmco: unref short failure
[h264 @ 0x56207c564a40] mmco: unref short failure
[h264 @ 0x56207c564a40] mmco: unref short failure
  0%|          | 6/1945 [00:37<3:23:50,  6.31s/it]  0%|          | 7/1945 [00:44<3:24:59,  6.35s/it][h264 @ 0x55597a935080] mmco: unref short failure
[h264 @ 0x55597a935080] mmco: unref short failure
[h264 @ 0x56097adfd3c0] mmco: unref short failure
  0%|          | 8/1945 [00:50<3:25:06,  6.35s/it]  0%|          | 9/1945 [00:57<3:35:16,  6.67s/it][h264 @ 0x55597ec4d540] mmco: unref short failure
[h264 @ 0x55597ec4d540] mmco: unref short failure
not have audios 8-qwaveiHMM.3
  1%|          | 10/1945 [01:04<3:37:00,  6.73s/it]  1%|          | 11/1945 [01:11<3:38:57,  6.79s/it][h264 @ 0x560979e5bb40] mmco: unref short failure
[h264 @ 0x560979e5bb40] mmco: unref short failure
  1%|          | 12/1945 [01:19<3:49:22,  7.12s/it][h264 @ 0x56207e040640] mmco: unref short failure
[h264 @ 0x56207e040640] mmco: unref short failure
[h264 @ 0x56207669ec40] mmco: unref short failure
[h264 @ 0x56207669ec40] mmco: unref short failure
  1%|          | 13/1945 [01:26<3:50:51,  7.17s/it][h264 @ 0x5601a678c440] mmco: unref short failure
  1%|          | 14/1945 [01:34<3:59:47,  7.45s/it][h264 @ 0x5559874ea780] mmco: unref short failure
[h264 @ 0x5559874ea780] mmco: unref short failure
  1%|          | 15/1945 [01:42<4:05:03,  7.62s/it][h264 @ 0x56097e93e100] mmco: unref short failure
[h264 @ 0x56097e93e100] mmco: unref short failure
[h264 @ 0x56097e93e100] mmco: unref short failure
  1%|          | 16/1945 [01:51<4:13:55,  7.90s/it][h264 @ 0x5601b343df40] mmco: unref short failure
[h264 @ 0x5601b343df40] mmco: unref short failure
[h264 @ 0x5601b343df40] mmco: unref short failure
[h264 @ 0x5601b343df40] mmco: unref short failure
[h264 @ 0x562075300240] mmco: unref short failure
  1%|          | 17/1945 [01:58<4:04:41,  7.62s/it][h264 @ 0x5609868a5080] mmco: unref short failure
[h264 @ 0x5609868a5080] mmco: unref short failure
[h264 @ 0x5609868a5080] mmco: unref short failure
[h264 @ 0x5609868a5080] mmco: unref short failure
[h264 @ 0x5609868a5080] mmco: unref short failure
[h264 @ 0x5609868a5080] mmco: unref short failure
[h264 @ 0x5609868a5080] mmco: unref short failure
[h264 @ 0x5609868a5080] mmco: unref short failure
[h264 @ 0x55598ea7ae80] mmco: unref short failure
[h264 @ 0x55598ea7ae80] mmco: unref short failure
[h264 @ 0x5601a7e2c340] mmco: unref short failure
[h264 @ 0x5601a7e2c340] mmco: unref short failure
[h264 @ 0x5601a7e2c340] mmco: unref short failure
[h264 @ 0x5601a7e2c340] mmco: unref short failure
[h264 @ 0x5609813e35c0] mmco: unref short failure
[h264 @ 0x5601a7aa0b00] mmco: unref short failure
[h264 @ 0x5601a7aa0b00] mmco: unref short failure
[h264 @ 0x56207c9db6c0] mmco: unref short failure
[h264 @ 0x56207c9db6c0] mmco: unref short failure
[h264 @ 0x56097c9a1780] mmco: unref short failure
[h264 @ 0x5601afef2e40] mmco: unref short failure
[h264 @ 0x5601afef2e40] mmco: unref short failure
[h264 @ 0x5601a9df8840] mmco: unref short failure
[h264 @ 0x5601a9df8840] mmco: unref short failure
[h264 @ 0x560985f64b80] mmco: unref short failure
  1%|          | 18/1945 [02:13<5:15:34,  9.83s/it][h264 @ 0x55598a2c09c0] mmco: unref short failure
[h264 @ 0x55598a2c09c0] mmco: unref short failure
  1%|          | 19/1945 [02:21<4:58:09,  9.29s/it][h264 @ 0x56207d9c8c00] mmco: unref short failure
  1%|          | 20/1945 [02:28<4:37:09,  8.64s/it][h264 @ 0x562078152f80] mmco: unref short failure
[h264 @ 0x562078152f80] mmco: unref short failure
[h264 @ 0x562078152f80] mmco: unref short failure
[h264 @ 0x562078152f80] mmco: unref short failure
[h264 @ 0x5601a9cf06c0] mmco: unref short failure
[h264 @ 0x56207401c280] mmco: unref short failure
  1%|          | 21/1945 [02:35<4:22:10,  8.18s/it][h264 @ 0x55597f2a4980] mmco: unref short failure
[h264 @ 0x5559880df300] mmco: unref short failure
  1%|          | 22/1945 [02:47<4:54:33,  9.19s/it][h264 @ 0x56097a5a9dc0] mmco: unref short failure
[h264 @ 0x56097a5a9dc0] mmco: unref short failure
[h264 @ 0x56097c5b45c0] mmco: unref short failure
[h264 @ 0x56097c5b45c0] mmco: unref short failure
[h264 @ 0x56097c5b45c0] mmco: unref short failure
[h264 @ 0x56097c5b45c0] mmco: unref short failure
  1%|          | 23/1945 [02:54<4:40:10,  8.75s/it][h264 @ 0x5601b26c6740] mmco: unref short failure
[h264 @ 0x5601b26c6740] mmco: unref short failure
[h264 @ 0x562078114240] mmco: unref short failure
[h264 @ 0x5601b7747980] mmco: unref short failure
[h264 @ 0x5601b7747980] mmco: unref short failure
[h264 @ 0x56097a4e5600] mmco: unref short failure
[h264 @ 0x56097a4e5600] mmco: unref short failure
[h264 @ 0x56097a4e5600] mmco: unref short failure
[h264 @ 0x56097a4e5600] mmco: unref short failure
[h264 @ 0x562079cfcf00] mmco: unref short failure
[h264 @ 0x562079cfcf00] mmco: unref short failure
[h264 @ 0x560984b24dc0] mmco: unref short failure
[h264 @ 0x560984b24dc0] mmco: unref short failure
[h264 @ 0x55597f892000] mmco: unref short failure
[h264 @ 0x55597f892000] mmco: unref short failure
[h264 @ 0x55597f891d80] mmco: unref short failure
[h264 @ 0x55597f891d80] mmco: unref short failure
  1%|          | 24/1945 [03:42<10:51:02, 20.33s/it][h264 @ 0x55597c690780] mmco: unref short failure
[h264 @ 0x5601a5414f80] mmco: unref short failure
  1%|▏         | 25/1945 [03:49<8:43:53, 16.37s/it] [h264 @ 0x56097d565580] mmco: unref short failure
[h264 @ 0x5601b350f280] mmco: unref short failure
[h264 @ 0x5601aa7d2480] mmco: unref short failure
[h264 @ 0x5601aa7d2480] mmco: unref short failure
[h264 @ 0x5601a6e7c8c0] mmco: unref short failure
[h264 @ 0x5559818a26c0] mmco: unref short failure
[h264 @ 0x5559818a26c0] mmco: unref short failure
[h264 @ 0x562083c1c400] mmco: unref short failure
[h264 @ 0x562083c1c400] mmco: unref short failure
[h264 @ 0x56098ce87840] mmco: unref short failure
[h264 @ 0x56098ce87840] mmco: unref short failure
[h264 @ 0x56098ce87840] mmco: unref short failure
[h264 @ 0x56098ce87840] mmco: unref short failure
  1%|▏         | 26/1945 [04:13<9:58:45, 18.72s/it][h264 @ 0x5601a99765c0] mmco: unref short failure
[h264 @ 0x5601a99765c0] mmco: unref short failure
[h264 @ 0x5609830b6a00] mmco: unref short failure
  1%|▏         | 27/1945 [04:21<8:19:51, 15.64s/it][h264 @ 0x5601a4c08480] mmco: unref short failure
  1%|▏         | 28/1945 [04:32<7:34:16, 14.22s/it]  1%|▏         | 29/1945 [04:41<6:43:51, 12.65s/it][h264 @ 0x555988e72a80] mmco: unref short failure
[h264 @ 0x5601b6a49f80] mmco: unref short failure
  2%|▏         | 30/1945 [04:56<7:01:02, 13.19s/it][h264 @ 0x56097adb1780] mmco: unref short failure
[h264 @ 0x56097adb1780] mmco: unref short failure
[h264 @ 0x562085a0a9c0] mmco: unref short failure
[h264 @ 0x5601b47d48c0] mmco: unref short failure
  2%|▏         | 31/1945 [05:04<6:14:33, 11.74s/it][h264 @ 0x562073f4a140] mmco: unref short failure
[h264 @ 0x55598146e4c0] mmco: unref short failure
[h264 @ 0x55598146e4c0] mmco: unref short failure
[h264 @ 0x5559866b72c0] mmco: unref short failure
[h264 @ 0x5559866b72c0] mmco: unref short failure
[h264 @ 0x55598b4ab080] mmco: unref short failure
[h264 @ 0x56207fe92500] mmco: unref short failure
[h264 @ 0x56207fe92500] mmco: unref short failure
[h264 @ 0x56207fe92500] mmco: unref short failure
[h264 @ 0x56207fe92500] mmco: unref short failure
[h264 @ 0x56098603d640] mmco: unref short failure
[h264 @ 0x56098603d640] mmco: unref short failure
[h264 @ 0x5601aa525580] mmco: unref short failure
  2%|▏         | 32/1945 [05:39<9:53:44, 18.62s/it]  2%|▏         | 33/1945 [05:46<8:07:54, 15.31s/it][h264 @ 0x5601abd9bfc0] mmco: unref short failure
[h264 @ 0x56207eec5e00] mmco: unref short failure
[h264 @ 0x56207eec5e00] mmco: unref short failure
[h264 @ 0x56207815f5c0] mmco: unref short failure
[h264 @ 0x56207815f5c0] mmco: unref short failure
[h264 @ 0x5601ad8c4cc0] mmco: unref short failure
[h264 @ 0x5601ad8c4cc0] mmco: unref short failure
[h264 @ 0x5601b414f400] mmco: unref short failure
[h264 @ 0x56207815f140] mmco: unref short failure
[h264 @ 0x56207815f140] mmco: unref short failure
[h264 @ 0x5601a5ab9940] mmco: unref short failure
[h264 @ 0x555981281680] mmco: unref short failure
[h264 @ 0x555981281680] mmco: unref short failure
  2%|▏         | 34/1945 [06:25<11:51:07, 22.33s/it][h264 @ 0x5601b590e280] mmco: unref short failure
[h264 @ 0x55597c399980] mmco: unref short failure
  2%|▏         | 35/1945 [06:33<9:34:58, 18.06s/it] [h264 @ 0x5609899d6680] mmco: unref short failure
[h264 @ 0x5609899ac440] mmco: unref short failure
[h264 @ 0x5609899ac440] mmco: unref short failure
[h264 @ 0x5601a5610940] mmco: unref short failure
  2%|▏         | 36/1945 [06:41<7:56:36, 14.98s/it][h264 @ 0x5601b515c640] mmco: unref short failure
[h264 @ 0x5601b515c640] mmco: unref short failure
  2%|▏         | 37/1945 [06:49<6:49:12, 12.87s/it][h264 @ 0x5601b33d3700] mmco: unref short failure
[h264 @ 0x5601b33d3700] mmco: unref short failure
  2%|▏         | 38/1945 [06:59<6:21:57, 12.02s/it][h264 @ 0x5601b368f980] mmco: unref short failure
[h264 @ 0x5601b368f980] mmco: unref short failure
  2%|▏         | 39/1945 [07:06<5:36:18, 10.59s/it][h264 @ 0x5559870a0e40] mmco: unref short failure
[h264 @ 0x5559870a0e40] mmco: unref short failure
[h264 @ 0x56207e9f2c00] mmco: unref short failure
[h264 @ 0x56207e9f2c00] mmco: unref short failure
[h264 @ 0x5601a9fa7dc0] mmco: unref short failure
[h264 @ 0x56097c82ffc0] mmco: unref short failure
[h264 @ 0x562076bdd780] mmco: unref short failure
[h264 @ 0x560982596d00] mmco: unref short failure
[h264 @ 0x560982596d00] mmco: unref short failure
[h264 @ 0x56098248e5c0] mmco: unref short failure
[h264 @ 0x55598fb31c80] mmco: unref short failure
[h264 @ 0x55598fb31c80] mmco: unref short failure
[h264 @ 0x5620881f9f80] mmco: unref short failure
[h264 @ 0x5620881f9f80] mmco: unref short failure
[h264 @ 0x5601af7993c0] mmco: unref short failure
[h264 @ 0x555985faa180] mmco: unref short failure
[h264 @ 0x555985faa180] mmco: unref short failure
  2%|▏         | 40/1945 [07:41<9:29:53, 17.95s/it][h264 @ 0x5620781306c0] mmco: unref short failure
[h264 @ 0x5620781306c0] mmco: unref short failure
[h264 @ 0x5620781306c0] mmco: unref short failure
[h264 @ 0x5620781306c0] mmco: unref short failure
[h264 @ 0x56098b5b7b40] mmco: unref short failure
[h264 @ 0x56098b5b7b40] mmco: unref short failure
  2%|▏         | 41/1945 [07:48<7:45:05, 14.66s/it][h264 @ 0x5609862ecfc0] mmco: unref short failure
[h264 @ 0x5609862ecfc0] mmco: unref short failure
[h264 @ 0x5601b436d8c0] mmco: unref short failure
[h264 @ 0x5601a80f0240] mmco: unref short failure
[h264 @ 0x5601a80f0240] mmco: unref short failure
[h264 @ 0x5609865254c0] mmco: unref short failure
[h264 @ 0x5601ad20c000] mmco: unref short failure
[h264 @ 0x5601abd97380] mmco: unref short failure
[h264 @ 0x5601b02f7e00] mmco: unref short failure
[h264 @ 0x56207f805800] mmco: unref short failure
  2%|▏         | 42/1945 [08:20<10:27:16, 19.78s/it][h264 @ 0x560979bcde40] mmco: unref short failure
  2%|▏         | 43/1945 [08:27<8:23:04, 15.87s/it] [h264 @ 0x555988e56c00] mmco: unref short failure
  2%|▏         | 44/1945 [08:35<7:04:57, 13.41s/it][h264 @ 0x56097f679c00] mmco: unref short failure
[h264 @ 0x56097db93500] mmco: unref short failure
[h264 @ 0x56097db93500] mmco: unref short failure
[h264 @ 0x56097db93500] mmco: unref short failure
[h264 @ 0x56097db93500] mmco: unref short failure
[h264 @ 0x5601b2641f40] mmco: unref short failure
[h264 @ 0x560987b7dfc0] mmco: unref short failure
[h264 @ 0x560987b7dfc0] mmco: unref short failure
[h264 @ 0x5620899cf5c0] mmco: unref short failure
[h264 @ 0x5620899cf5c0] mmco: unref short failure
  2%|▏         | 45/1945 [08:49<7:15:16, 13.75s/it][h264 @ 0x55597cd5a580] mmco: unref short failure
  2%|▏         | 46/1945 [08:57<6:16:52, 11.91s/it][h264 @ 0x562080539c00] mmco: unref short failure
  2%|▏         | 47/1945 [09:04<5:37:45, 10.68s/it][h264 @ 0x5609899c6c80] mmco: unref short failure
[h264 @ 0x5609899c6c80] mmco: unref short failure
[h264 @ 0x5609899c6c80] mmco: unref short failure
[h264 @ 0x5601ad586a00] mmco: unref short failure
[h264 @ 0x555987db20c0] mmco: unref short failure
[h264 @ 0x5609872dfc40] mmco: unref short failure
[h264 @ 0x5609872dfc40] mmco: unref short failure
[h264 @ 0x55598b683a40] mmco: unref short failure
[h264 @ 0x55598b683a40] mmco: unref short failure
[h264 @ 0x562075d04640] mmco: unref short failure
[h264 @ 0x562075d04640] mmco: unref short failure
[h264 @ 0x562087c47580] mmco: unref short failure
  2%|▏         | 48/1945 [09:42<9:47:46, 18.59s/it][h264 @ 0x560989d555c0] mmco: unref short failure
[h264 @ 0x560989d555c0] mmco: unref short failure
  3%|▎         | 49/1945 [09:49<8:04:13, 15.32s/it][h264 @ 0x562078744280] mmco: unref short failure
[h264 @ 0x560987b7d480] mmco: unref short failure
[h264 @ 0x560987b7d480] mmco: unref short failure
[h264 @ 0x5601a9530d00] mmco: unref short failure
[h264 @ 0x5601a9530d00] mmco: unref short failure
[h264 @ 0x560984ba3340] mmco: unref short failure
[h264 @ 0x562075300700] mmco: unref short failure
[h264 @ 0x56208930abc0] mmco: unref short failure
[h264 @ 0x56208930abc0] mmco: unref short failure
[h264 @ 0x56097e114fc0] mmco: unref short failure
09/08/2024 20:51:36 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.3737502098083496, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04804975539445877, 'loss_ret%tv%ta--finetune_area/loss_area': 4.278508186340332, 'loss_ret%tv%ta--finetune_area/total_loss': 7.700307846069336}
  3%|▎         | 50/1945 [10:22<10:50:59, 20.61s/it][h264 @ 0x5601aff1b340] mmco: unref short failure
[h264 @ 0x562077cdf9c0] mmco: unref short failure
  3%|▎         | 51/1945 [10:30<8:50:08, 16.79s/it]   3%|▎         | 52/1945 [10:38<7:29:06, 14.23s/it][h264 @ 0x55598e7c2080] mmco: unref short failure
[h264 @ 0x5620847947c0] mmco: unref short failure
[h264 @ 0x555990d594c0] mmco: unref short failure
[h264 @ 0x555990d594c0] mmco: unref short failure
[h264 @ 0x560988bf6a00] mmco: unref short failure
[h264 @ 0x560988bf6a00] mmco: unref short failure
[h264 @ 0x5601a55ef0c0] mmco: unref short failure
[h264 @ 0x5601a55ef0c0] mmco: unref short failure
[h264 @ 0x55598d5aa000] mmco: unref short failure
[h264 @ 0x55598d5aa000] mmco: unref short failure
  3%|▎         | 53/1945 [10:49<6:53:32, 13.11s/it][h264 @ 0x5609851b8740] mmco: unref short failure
[h264 @ 0x5609851b8740] mmco: unref short failure
[h264 @ 0x5609851b8740] mmco: unref short failure
[h264 @ 0x5609851b8740] mmco: unref short failure
[h264 @ 0x555996a42000] mmco: unref short failure
  3%|▎         | 54/1945 [10:57<6:07:58, 11.68s/it][h264 @ 0x56207a700fc0] mmco: unref short failure
[h264 @ 0x56207a700fc0] mmco: unref short failure
[h264 @ 0x5601b10ac1c0] mmco: unref short failure
[h264 @ 0x5601b10ac1c0] mmco: unref short failure
  3%|▎         | 55/1945 [11:04<5:24:27, 10.30s/it][h264 @ 0x55598d8f0900] mmco: unref short failure
[h264 @ 0x55598d8f0900] mmco: unref short failure
[h264 @ 0x560987a46cc0] mmco: unref short failure
[h264 @ 0x560987a46cc0] mmco: unref short failure
[h264 @ 0x56097c72d300] mmco: unref short failure
[h264 @ 0x56097c72d300] mmco: unref short failure
[h264 @ 0x56207e886a00] mmco: unref short failure
[h264 @ 0x5559828cfcc0] mmco: unref short failure
[h264 @ 0x5559828cfcc0] mmco: unref short failure
[h264 @ 0x56097f23b740] mmco: unref short failure
[h264 @ 0x5601b819ba00] mmco: unref short failure
[h264 @ 0x5601b819ba00] mmco: unref short failure
[h264 @ 0x55597b7b6240] mmco: unref short failure
[h264 @ 0x562075872940] mmco: unref short failure
[h264 @ 0x562078df0080] mmco: unref short failure
[h264 @ 0x562078df0080] mmco: unref short failure
[h264 @ 0x56208dd5c440] mmco: unref short failure
[h264 @ 0x560988bf70c0] mmco: unref short failure
[h264 @ 0x560988bf70c0] mmco: unref short failure
  3%|▎         | 56/1945 [11:45<10:16:11, 19.57s/it][h264 @ 0x56097d06db40] mmco: unref short failure
  3%|▎         | 57/1945 [11:53<8:19:56, 15.89s/it] [h264 @ 0x5601ac977e00] mmco: unref short failure
[h264 @ 0x5601ac977e00] mmco: unref short failure
[h264 @ 0x5601acd46ec0] mmco: unref short failure
[h264 @ 0x55598b2ab100] mmco: unref short failure
[h264 @ 0x55598b2ab100] mmco: unref short failure
[h264 @ 0x56207e72f780] mmco: unref short failure
[h264 @ 0x5601b2cea380] mmco: unref short failure
[h264 @ 0x5601b2cea380] mmco: unref short failure
[h264 @ 0x5601bc0dc580] mmco: unref short failure
[h264 @ 0x5601bc0dc580] mmco: unref short failure
[h264 @ 0x56208b32e840] mmco: unref short failure
[h264 @ 0x56208b32e840] mmco: unref short failure
  3%|▎         | 58/1945 [12:22<10:23:29, 19.82s/it][h264 @ 0x562075c063c0] mmco: unref short failure
[h264 @ 0x5601af7efb00] mmco: unref short failure
[h264 @ 0x5601af7efb00] mmco: unref short failure
  3%|▎         | 59/1945 [12:29<8:21:01, 15.94s/it] [h264 @ 0x5559931c9f00] mmco: unref short failure
  3%|▎         | 60/1945 [12:37<7:08:47, 13.65s/it][h264 @ 0x555994ae3640] mmco: unref short failure
[h264 @ 0x555994ae3640] mmco: unref short failure
[h264 @ 0x56098f8b9640] mmco: unref short failure
[h264 @ 0x56098f8b9640] mmco: unref short failure
[h264 @ 0x56098f8b9640] mmco: unref short failure
[h264 @ 0x56098f8b9640] mmco: unref short failure
[h264 @ 0x562080f47680] mmco: unref short failure
[h264 @ 0x562080f47680] mmco: unref short failure
  3%|▎         | 61/1945 [12:46<6:27:55, 12.35s/it]  3%|▎         | 62/1945 [12:54<5:45:29, 11.01s/it][h264 @ 0x5601b17f0b00] mmco: unref short failure
[h264 @ 0x5601b17f0b00] mmco: unref short failure
[h264 @ 0x5601b17f0b00] mmco: unref short failure
[h264 @ 0x5601b17f0b00] mmco: unref short failure
  3%|▎         | 63/1945 [13:02<5:13:47, 10.00s/it][h264 @ 0x55598213ba00] mmco: unref short failure
[h264 @ 0x56097e220a40] mmco: unref short failure
[h264 @ 0x56097e220a40] mmco: unref short failure
[h264 @ 0x562078b30340] mmco: unref short failure
[h264 @ 0x562078b30340] mmco: unref short failure
[h264 @ 0x55597d3a9600] mmco: unref short failure
[h264 @ 0x56208e8e6040] mmco: unref short failure
[h264 @ 0x56208e8e6040] mmco: unref short failure
  3%|▎         | 64/1945 [13:43<10:03:35, 19.25s/it][h264 @ 0x56207b631480] mmco: unref short failure
  3%|▎         | 65/1945 [13:50<8:10:34, 15.66s/it] [h264 @ 0x5609808e4940] mmco: unref short failure
[h264 @ 0x56208b5c2800] mmco: unref short failure
[h264 @ 0x55598d220440] mmco: unref short failure
[h264 @ 0x56208a5ad7c0] mmco: unref short failure
[h264 @ 0x56208a5ad7c0] mmco: unref short failure
[h264 @ 0x56098be19f00] mmco: unref short failure
  3%|▎         | 66/1945 [14:27<11:34:34, 22.18s/it][h264 @ 0x56099121f780] mmco: unref short failure
[h264 @ 0x56099121f780] mmco: unref short failure
  3%|▎         | 67/1945 [14:34<9:08:22, 17.52s/it] [h264 @ 0x5601b410cb00] mmco: unref short failure
[h264 @ 0x5601b410cb00] mmco: unref short failure
  3%|▎         | 68/1945 [14:41<7:34:25, 14.53s/it][h264 @ 0x56208d435b00] mmco: unref short failure
[h264 @ 0x56207aeb3e00] mmco: unref short failure
[h264 @ 0x56208167a200] mmco: unref short failure
[h264 @ 0x56208167a200] mmco: unref short failure
[h264 @ 0x56208167a200] mmco: unref short failure
[h264 @ 0x56208167a200] mmco: unref short failure
[h264 @ 0x5609797f5040] mmco: unref short failure
[h264 @ 0x5609797f5040] mmco: unref short failure
  4%|▎         | 69/1945 [14:50<6:41:12, 12.83s/it][h264 @ 0x5601b497e4c0] mmco: unref short failure
[h264 @ 0x5601b497e4c0] mmco: unref short failure
[h264 @ 0x5601be6c0d40] mmco: unref short failure
[h264 @ 0x5601be6c0d40] mmco: unref short failure
  4%|▎         | 70/1945 [15:00<6:06:18, 11.72s/it][h264 @ 0x5559817a7980] mmco: unref short failure
  4%|▎         | 71/1945 [15:07<5:25:12, 10.41s/it][h264 @ 0x56208c44ccc0] mmco: unref short failure
[h264 @ 0x56208c44ccc0] mmco: unref short failure
[h264 @ 0x5609904b0100] mmco: unref short failure
[h264 @ 0x5609904b0100] mmco: unref short failure
[h264 @ 0x5609904b0100] mmco: unref short failure
[h264 @ 0x5609904b0100] mmco: unref short failure
[h264 @ 0x5601bbe35640] mmco: unref short failure
[h264 @ 0x562088394000] mmco: unref short failure
[h264 @ 0x562088394000] mmco: unref short failure
[h264 @ 0x555993ebc800] mmco: unref short failure
[h264 @ 0x5601ba9dd080] mmco: unref short failure
[h264 @ 0x5601ba9dd080] mmco: unref short failure
[h264 @ 0x555983ee1640] mmco: unref short failure
[h264 @ 0x5601bdccefc0] mmco: unref short failure
[h264 @ 0x5601bdccefc0] mmco: unref short failure
[h264 @ 0x56097f76b5c0] mmco: unref short failure
[h264 @ 0x56097f76b5c0] mmco: unref short failure
[h264 @ 0x56097f76b5c0] mmco: unref short failure
[h264 @ 0x56097f76b5c0] mmco: unref short failure
[h264 @ 0x562086094f00] mmco: unref short failure
[h264 @ 0x56098f076780] mmco: unref short failure
  4%|▎         | 72/1945 [15:38<8:39:24, 16.64s/it][h264 @ 0x56097cc71840] mmco: unref short failure
[h264 @ 0x56097cc71840] mmco: unref short failure
[h264 @ 0x56097cc71840] mmco: unref short failure
[h264 @ 0x562083670c40] mmco: unref short failure
[h264 @ 0x562083670c40] mmco: unref short failure
  4%|▍         | 73/1945 [15:46<7:15:12, 13.95s/it][h264 @ 0x5559873fd000] mmco: unref short failure
[h264 @ 0x5601c11bd000] mmco: unref short failure
[h264 @ 0x56097e2145c0] mmco: unref short failure
[h264 @ 0x56097e2145c0] mmco: unref short failure
[h264 @ 0x56097e2145c0] mmco: unref short failure
[h264 @ 0x56097e2145c0] mmco: unref short failure
[h264 @ 0x562076775840] mmco: unref short failure
[h264 @ 0x562076775840] mmco: unref short failure
[h264 @ 0x5609812f63c0] mmco: unref short failure
[h264 @ 0x5609812f63c0] mmco: unref short failure
[h264 @ 0x5601bb427b80] mmco: unref short failure
[h264 @ 0x5601a4d43cc0] mmco: unref short failure
[h264 @ 0x56098604f480] mmco: unref short failure
[h264 @ 0x56098604f480] mmco: unref short failure
[h264 @ 0x5609861d4480] mmco: unref short failure
[h264 @ 0x5609861d4480] mmco: unref short failure
[h264 @ 0x5559925a2d00] mmco: unref short failure
[h264 @ 0x5559925a2d00] mmco: unref short failure
[h264 @ 0x5559925a2d00] mmco: unref short failure
[h264 @ 0x5559925a2d00] mmco: unref short failure
[h264 @ 0x560988b6f840] mmco: unref short failure
[h264 @ 0x56097c4159c0] mmco: unref short failure
[h264 @ 0x56097c4159c0] mmco: unref short failure
[h264 @ 0x56207f8d70c0] mmco: unref short failure
[h264 @ 0x5559884faec0] mmco: unref short failure
[h264 @ 0x5559884faec0] mmco: unref short failure
[h264 @ 0x55598ecbc700] mmco: unref short failure
[h264 @ 0x55598ecbc700] mmco: unref short failure
  4%|▍         | 74/1945 [16:29<11:46:46, 22.67s/it][h264 @ 0x56208f582fc0] mmco: unref short failure
  4%|▍         | 75/1945 [16:36<9:24:48, 18.12s/it] [h264 @ 0x56208a7f56c0] mmco: unref short failure
[h264 @ 0x56208a7f56c0] mmco: unref short failure
[h264 @ 0x56208a7f56c0] mmco: unref short failure
[h264 @ 0x56208a7f56c0] mmco: unref short failure
  4%|▍         | 76/1945 [16:44<7:43:17, 14.87s/it][h264 @ 0x5601a9f6da40] mmco: unref short failure
[h264 @ 0x5601a9f6da40] mmco: unref short failure
[h264 @ 0x560980d3fb00] mmco: unref short failure
[h264 @ 0x56097dbdf900] mmco: unref short failure
  4%|▍         | 77/1945 [16:51<6:34:13, 12.66s/it][h264 @ 0x56208bd15240] mmco: unref short failure
[h264 @ 0x56208bd15240] mmco: unref short failure
[h264 @ 0x56208bec9380] mmco: unref short failure
[h264 @ 0x555991e97c40] mmco: unref short failure
[h264 @ 0x555991e97c40] mmco: unref short failure
[h264 @ 0x562087c14000] mmco: unref short failure
[h264 @ 0x5601bb572e40] mmco: unref short failure
  4%|▍         | 78/1945 [17:06<6:55:27, 13.35s/it][h264 @ 0x562083cbf840] mmco: unref short failure
[h264 @ 0x562083cbf840] mmco: unref short failure
  4%|▍         | 79/1945 [17:13<5:51:50, 11.31s/it][h264 @ 0x55597bcf8100] mmco: unref short failure
[h264 @ 0x55597bcf8100] mmco: unref short failure
[h264 @ 0x5601b182ad00] mmco: unref short failure
[h264 @ 0x5601b182ad00] mmco: unref short failure
[h264 @ 0x5601b182ad00] mmco: unref short failure
[h264 @ 0x5601b182ad00] mmco: unref short failure
[h264 @ 0x5601b182ad00] mmco: unref short failure
[h264 @ 0x5601b182ad00] mmco: unref short failure
[h264 @ 0x5601b182ad00] mmco: unref short failure
[h264 @ 0x5601b182ad00] mmco: unref short failure
[h264 @ 0x5601b182ad00] mmco: unref short failure
[h264 @ 0x5601b182ad00] mmco: unref short failure
[h264 @ 0x5601af02fd40] mmco: unref short failure
[h264 @ 0x5601af02fd40] mmco: unref short failure
  4%|▍         | 80/1945 [17:36<7:48:33, 15.07s/it][h264 @ 0x5601b14ba700] mmco: unref short failure
[h264 @ 0x5601b14ba700] mmco: unref short failure
[h264 @ 0x560985bf9e40] mmco: unref short failure
[h264 @ 0x560985bf9e40] mmco: unref short failure
[h264 @ 0x555989052b80] mmco: unref short failure
[h264 @ 0x555989052b80] mmco: unref short failure
  4%|▍         | 81/1945 [17:46<6:54:10, 13.33s/it][h264 @ 0x562091c53280] mmco: unref short failure
[h264 @ 0x562091c53280] mmco: unref short failure
[h264 @ 0x560990a53340] mmco: unref short failure
[h264 @ 0x560990a53340] mmco: unref short failure
[h264 @ 0x56207b3597c0] mmco: unref short failure
[h264 @ 0x5601b33d3300] mmco: unref short failure
[h264 @ 0x5601b33d3300] mmco: unref short failure
[h264 @ 0x5620851147c0] mmco: unref short failure
[h264 @ 0x5620851147c0] mmco: unref short failure
[h264 @ 0x55597dd70d80] mmco: unref short failure
[h264 @ 0x55597dd70d80] mmco: unref short failure
not have audios 7wavFXW3AFw.7
[h264 @ 0x56207dcc7980] mmco: unref short failure
[h264 @ 0x56097c34aec0] mmco: unref short failure
[h264 @ 0x56097c34aec0] mmco: unref short failure
[h264 @ 0x55597e5e8400] mmco: unref short failure
[h264 @ 0x55597e5e8400] mmco: unref short failure
[h264 @ 0x5601babce540] mmco: unref short failure
[h264 @ 0x5601babce540] mmco: unref short failure
[h264 @ 0x5601babce540] mmco: unref short failure
[h264 @ 0x560990b26440] mmco: unref short failure
[h264 @ 0x560990b26440] mmco: unref short failure
[h264 @ 0x555985caf600] mmco: unref short failure
[h264 @ 0x555985caf600] mmco: unref short failure
[h264 @ 0x555985caf600] mmco: unref short failure
[h264 @ 0x555985caf600] mmco: unref short failure
[h264 @ 0x562085134380] mmco: unref short failure
  4%|▍         | 82/1945 [18:31<11:54:00, 23.00s/it]  4%|▍         | 83/1945 [18:39<9:32:22, 18.44s/it]   4%|▍         | 84/1945 [18:47<7:53:25, 15.26s/it][h264 @ 0x56207c9f8c80] mmco: unref short failure
  4%|▍         | 85/1945 [18:56<6:52:45, 13.31s/it][h264 @ 0x56208c327e40] mmco: unref short failure
  4%|▍         | 86/1945 [19:07<6:31:58, 12.65s/it]  4%|▍         | 87/1945 [19:13<5:36:09, 10.86s/it][h264 @ 0x56207e814f40] mmco: unref short failure
[h264 @ 0x555996142680] mmco: unref short failure
[h264 @ 0x555996142680] mmco: unref short failure
[h264 @ 0x56098cd74600] mmco: unref short failure
[h264 @ 0x56098cd74600] mmco: unref short failure
[h264 @ 0x56207ebab9c0] mmco: unref short failure
[h264 @ 0x56207ebab9c0] mmco: unref short failure
[h264 @ 0x5601a6486680] mmco: unref short failure
[h264 @ 0x56098188d3c0] mmco: unref short failure
[h264 @ 0x56098188d3c0] mmco: unref short failure
[h264 @ 0x55597eb74b80] mmco: unref short failure
[h264 @ 0x55597eb74b80] mmco: unref short failure
[h264 @ 0x560993a54500] mmco: unref short failure
[h264 @ 0x560993a54500] mmco: unref short failure
[h264 @ 0x56208d35d340] mmco: unref short failure
  5%|▍         | 88/1945 [19:45<8:45:38, 16.98s/it][h264 @ 0x5620894dab40] mmco: unref short failure
[h264 @ 0x5620894dab40] mmco: unref short failure
[h264 @ 0x5559908ec740] mmco: unref short failure
[h264 @ 0x5559908ec740] mmco: unref short failure
[h264 @ 0x560982d7bc80] mmco: unref short failure
[h264 @ 0x560982d7bc80] mmco: unref short failure
  5%|▍         | 89/1945 [19:52<7:13:14, 14.01s/it][h264 @ 0x5609890c0100] mmco: unref short failure
[h264 @ 0x5609890c0100] mmco: unref short failure
[h264 @ 0x5601b8ba6b00] mmco: unref short failure
[h264 @ 0x5601b8ba6b00] mmco: unref short failure
[h264 @ 0x5601b8ba6b00] mmco: unref short failure
[h264 @ 0x5601b8ba6b00] mmco: unref short failure
[h264 @ 0x562084795880] mmco: unref short failure
[h264 @ 0x560989441bc0] mmco: unref short failure
[h264 @ 0x5601b502e880] mmco: unref short failure
[h264 @ 0x5601b502e880] mmco: unref short failure
[h264 @ 0x56098b19c3c0] mmco: unref short failure
[h264 @ 0x560989593280] mmco: unref short failure
[h264 @ 0x560989593280] mmco: unref short failure
[h264 @ 0x560989593280] mmco: unref short failure
[h264 @ 0x560989593280] mmco: unref short failure
[h264 @ 0x560989593280] mmco: unref short failure
[h264 @ 0x560989593280] mmco: unref short failure
[h264 @ 0x55597f005a40] mmco: unref short failure
[h264 @ 0x55597f005a40] mmco: unref short failure
[h264 @ 0x55597effdb00] mmco: unref short failure
[h264 @ 0x55597effdb00] mmco: unref short failure
[h264 @ 0x555986506900] mmco: unref short failure
[h264 @ 0x5601bf36bbc0] mmco: unref short failure
[h264 @ 0x5601bb92eb80] mmco: unref short failure
[h264 @ 0x5601bb92eb80] mmco: unref short failure
[h264 @ 0x56098e1ffb40] mmco: unref short failure
[h264 @ 0x56098fa6d640] mmco: unref short failure
  5%|▍         | 90/1945 [20:46<13:28:46, 26.16s/it][h264 @ 0x5609881c4e80] mmco: unref short failure
  5%|▍         | 91/1945 [20:54<10:40:42, 20.73s/it][h264 @ 0x56207e01b880] mmco: unref short failure
[h264 @ 0x5620905354c0] mmco: unref short failure
  5%|▍         | 92/1945 [21:01<8:30:52, 16.54s/it] [h264 @ 0x56098b695f40] mmco: unref short failure
[h264 @ 0x56098b695f40] mmco: unref short failure
  5%|▍         | 93/1945 [21:08<7:00:38, 13.63s/it][h264 @ 0x5609937679c0] mmco: unref short failure
  5%|▍         | 94/1945 [21:16<6:04:33, 11.82s/it][h264 @ 0x55598fa57700] mmco: unref short failure
[h264 @ 0x55598fa57700] mmco: unref short failure
[h264 @ 0x56098eb7b500] mmco: unref short failure
[h264 @ 0x56098eb7b500] mmco: unref short failure
  5%|▍         | 95/1945 [21:23<5:28:17, 10.65s/it][h264 @ 0x5601bb34f540] mmco: unref short failure
[h264 @ 0x5601bb34f540] mmco: unref short failure
[h264 @ 0x56207a09e980] mmco: unref short failure
[h264 @ 0x56097e2c0040] mmco: unref short failure
[h264 @ 0x555995e5d600] mmco: unref short failure
[h264 @ 0x560981a00080] mmco: unref short failure
[h264 @ 0x560981a00080] mmco: unref short failure
[h264 @ 0x5601a7a2d340] mmco: unref short failure
[h264 @ 0x555987860700] mmco: unref short failure
[h264 @ 0x555987860700] mmco: unref short failure
[h264 @ 0x555980232a80] mmco: unref short failure
[h264 @ 0x555980232a80] mmco: unref short failure
[h264 @ 0x562091c49800] mmco: unref short failure
  5%|▍         | 96/1945 [21:55<8:44:12, 17.01s/it]  5%|▍         | 97/1945 [22:03<7:14:08, 14.10s/it][h264 @ 0x5601c24f9280] mmco: unref short failure
[h264 @ 0x5559960e1b80] mmco: unref short failure
[h264 @ 0x55597e824bc0] mmco: unref short failure
[h264 @ 0x55597e824bc0] mmco: unref short failure
[h264 @ 0x55597e824bc0] mmco: unref short failure
[h264 @ 0x55597e824bc0] mmco: unref short failure
[h264 @ 0x55597e824bc0] mmco: unref short failure
[h264 @ 0x555993e2e400] mmco: unref short failure
[h264 @ 0x555993e2e400] mmco: unref short failure
[h264 @ 0x5601bb17e140] mmco: unref short failure
[h264 @ 0x5620911eebc0] mmco: unref short failure
[h264 @ 0x5620911eebc0] mmco: unref short failure
[h264 @ 0x5601b97872c0] mmco: unref short failure
[h264 @ 0x5601b97872c0] mmco: unref short failure
[h264 @ 0x56208f400080] mmco: unref short failure
[h264 @ 0x562087293740] mmco: unref short failure
[h264 @ 0x562087293740] mmco: unref short failure
[h264 @ 0x560989442040] mmco: unref short failure
[h264 @ 0x560989442040] mmco: unref short failure
[h264 @ 0x560989442040] mmco: unref short failure
[h264 @ 0x560989442040] mmco: unref short failure
  5%|▌         | 98/1945 [22:57<13:23:13, 26.09s/it][h264 @ 0x5601b8936a40] mmco: unref short failure
[h264 @ 0x5601b8936a40] mmco: unref short failure
  5%|▌         | 99/1945 [23:04<10:31:56, 20.54s/it][h264 @ 0x56097f088d40] mmco: unref short failure
[h264 @ 0x56097f088d40] mmco: unref short failure
[h264 @ 0x56208051c080] mmco: unref short failure
[h264 @ 0x56208051c080] mmco: unref short failure
[h264 @ 0x560991dbaf40] mmco: unref short failure
[h264 @ 0x560991dbaf40] mmco: unref short failure
09/08/2024 21:04:25 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.400353193283081, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.047386735677719116, 'loss_ret%tv%ta--finetune_area/loss_area': 2.7401726245880127, 'loss_ret%tv%ta--finetune_area/total_loss': 6.187912464141846}
[h264 @ 0x56208e18a280] mmco: unref short failure
[h264 @ 0x56208e18a280] mmco: unref short failure
[h264 @ 0x555999a6d4c0] mmco: unref short failure
[h264 @ 0x56208e18a280] mmco: unref short failure
[h264 @ 0x56208e18a280] mmco: unref short failure
[h264 @ 0x5601a8d00b00] mmco: unref short failure
[h264 @ 0x56208e18a280] mmco: unref short failure
[h264 @ 0x56208e18a280] mmco: unref short failure
  5%|▌         | 100/1945 [23:13<8:39:40, 16.90s/it][h264 @ 0x5601b3fb7440] mmco: unref short failure
[h264 @ 0x55598f5ca6c0] mmco: unref short failure
  5%|▌         | 101/1945 [23:19<7:05:13, 13.84s/it][h264 @ 0x5620773db000] mmco: unref short failure
[h264 @ 0x5601a5ad4480] mmco: unref short failure
[h264 @ 0x5601a5ad4480] mmco: unref short failure
  5%|▌         | 102/1945 [23:27<6:06:21, 11.93s/it][h264 @ 0x5601c332d480] mmco: unref short failure
[h264 @ 0x5601c332d480] mmco: unref short failure
[h264 @ 0x56099377b8c0] mmco: unref short failure
[h264 @ 0x560992402400] mmco: unref short failure
  5%|▌         | 103/1945 [23:34<5:21:44, 10.48s/it][h264 @ 0x56098cbd3e00] mmco: unref short failure
[h264 @ 0x5601c1f8f280] mmco: unref short failure
[h264 @ 0x56207a78d880] mmco: unref short failure
[h264 @ 0x5601bb18a880] mmco: unref short failure
[h264 @ 0x5601bb18a880] mmco: unref short failure
[h264 @ 0x56207ff886c0] mmco: unref short failure
[h264 @ 0x56207ff886c0] mmco: unref short failure
[h264 @ 0x56207ff886c0] mmco: unref short failure
[h264 @ 0x555994b75540] mmco: unref short failure
[h264 @ 0x555994b75540] mmco: unref short failure
[h264 @ 0x555994b75540] mmco: unref short failure
[h264 @ 0x555994b75540] mmco: unref short failure
[h264 @ 0x555994b75540] mmco: unref short failure
[h264 @ 0x555994b75540] mmco: unref short failure
[h264 @ 0x562090afd7c0] mmco: unref short failure
[h264 @ 0x562090afd7c0] mmco: unref short failure
  5%|▌         | 104/1945 [23:47<5:44:35, 11.23s/it][h264 @ 0x56208b1469c0] mmco: unref short failure
[h264 @ 0x5601bd5eb080] mmco: unref short failure
[h264 @ 0x55597e65c100] mmco: unref short failure
[h264 @ 0x55597e65c100] mmco: unref short failure
[h264 @ 0x55597e65c100] mmco: unref short failure
[h264 @ 0x55597e65c100] mmco: unref short failure
[h264 @ 0x55597e65c100] mmco: unref short failure
[h264 @ 0x55597e65c100] mmco: unref short failure
[h264 @ 0x55597e65c100] mmco: unref short failure
[h264 @ 0x55597e65c100] mmco: unref short failure
[h264 @ 0x5620835a27c0] mmco: unref short failure
[h264 @ 0x5620835a27c0] mmco: unref short failure
  5%|▌         | 105/1945 [23:55<5:19:55, 10.43s/it][h264 @ 0x5601b8d1d740] mmco: unref short failure
[h264 @ 0x5601bb2ec000] mmco: unref short failure
[h264 @ 0x5601bb2ec000] mmco: unref short failure
[h264 @ 0x560981d88100] mmco: unref short failure
[h264 @ 0x560981d88100] mmco: unref short failure
[h264 @ 0x555994fb1000] mmco: unref short failure
[h264 @ 0x555994fb1000] mmco: unref short failure
[h264 @ 0x5609954e1e80] mmco: unref short failure
[h264 @ 0x5601c1e79640] mmco: unref short failure
[h264 @ 0x5601c1e79640] mmco: unref short failure
[h264 @ 0x5601c1e79640] mmco: unref short failure
[h264 @ 0x5601c1e79640] mmco: unref short failure
[h264 @ 0x560981e17300] mmco: unref short failure
[h264 @ 0x5609909bd2c0] mmco: unref short failure
[h264 @ 0x5601b642f680] mmco: unref short failure
[h264 @ 0x5601c49dc500] mmco: unref short failure
[h264 @ 0x5601c49dc500] mmco: unref short failure
[h264 @ 0x5601a8f71240] mmco: unref short failure
[h264 @ 0x5601a8f71240] mmco: unref short failure
[h264 @ 0x5601aa839bc0] mmco: unref short failure
[h264 @ 0x5601aa839bc0] mmco: unref short failure
[h264 @ 0x5601aa839bc0] mmco: unref short failure
[h264 @ 0x5601aa839bc0] mmco: unref short failure
[h264 @ 0x555999449080] mmco: unref short failure
[h264 @ 0x5601af2ae380] mmco: unref short failure
[h264 @ 0x5601af2ae380] mmco: unref short failure
[h264 @ 0x5601bb811a80] mmco: unref short failure
[h264 @ 0x555999bbb040] mmco: unref short failure
[h264 @ 0x56207f2c5e40] mmco: unref short failure
[h264 @ 0x56207f2c5e40] mmco: unref short failure
[h264 @ 0x5601bf35fb00] mmco: unref short failure
[h264 @ 0x5601bf35fb00] mmco: unref short failure
[h264 @ 0x5609916dd8c0] mmco: unref short failure
[h264 @ 0x5609916dd8c0] mmco: unref short failure
[h264 @ 0x56208d605800] mmco: unref short failure
  5%|▌         | 106/1945 [24:56<13:00:19, 25.46s/it][h264 @ 0x5601aea40880] mmco: unref short failure
[h264 @ 0x5601aea40880] mmco: unref short failure
[h264 @ 0x5601aea40880] mmco: unref short failure
  6%|▌         | 107/1945 [25:03<10:08:24, 19.86s/it][h264 @ 0x56097bf4e7c0] mmco: unref short failure
[h264 @ 0x56097bf4e7c0] mmco: unref short failure
[h264 @ 0x55598a99a340] mmco: unref short failure
  6%|▌         | 108/1945 [25:10<8:12:06, 16.07s/it] [h264 @ 0x5601b95e1c00] mmco: unref short failure
[h264 @ 0x5601b95e1c00] mmco: unref short failure
  6%|▌         | 109/1945 [25:17<6:50:26, 13.41s/it][h264 @ 0x5609954d4f80] mmco: unref short failure
[h264 @ 0x5609954d4f80] mmco: unref short failure
[h264 @ 0x5609954d4f80] mmco: unref short failure
[h264 @ 0x5609954d4f80] mmco: unref short failure
[h264 @ 0x5609954d4f80] mmco: unref short failure
[h264 @ 0x5609954d4f80] mmco: unref short failure
[h264 @ 0x5609954d4f80] mmco: unref short failure
[h264 @ 0x5609954d4f80] mmco: unref short failure
[h264 @ 0x56098fdfa0c0] mmco: unref short failure
[h264 @ 0x56098fdfa0c0] mmco: unref short failure
[h264 @ 0x5601c3801c80] mmco: unref short failure
[h264 @ 0x5601c3801c80] mmco: unref short failure
[h264 @ 0x5601c3801c80] mmco: unref short failure
[h264 @ 0x5601c3801c80] mmco: unref short failure
[h264 @ 0x56207c9a2280] mmco: unref short failure
[h264 @ 0x56207c9a2280] mmco: unref short failure
  6%|▌         | 110/1945 [25:26<6:10:47, 12.12s/it][h264 @ 0x55599a7b2d40] mmco: unref short failure
[h264 @ 0x5620928f32c0] mmco: unref short failure
  6%|▌         | 111/1945 [25:34<5:25:21, 10.64s/it][h264 @ 0x562082fc4140] mmco: unref short failure
[h264 @ 0x560984aea800] mmco: unref short failure
[h264 @ 0x560984aea800] mmco: unref short failure
[h264 @ 0x5601be93da80] mmco: unref short failure
[h264 @ 0x560996e2d040] mmco: unref short failure
  6%|▌         | 112/1945 [25:52<6:34:39, 12.92s/it][h264 @ 0x5601b7a9fd80] mmco: unref short failure
[h264 @ 0x5601b7a9fd80] mmco: unref short failure
[h264 @ 0x5601b7a9fd80] mmco: unref short failure
[h264 @ 0x5601b7a9fd80] mmco: unref short failure
  6%|▌         | 113/1945 [26:01<5:58:47, 11.75s/it][h264 @ 0x55597c1860c0] mmco: unref short failure
[h264 @ 0x55597c1860c0] mmco: unref short failure
[h264 @ 0x5601b4945500] mmco: unref short failure
[h264 @ 0x5601b4945500] mmco: unref short failure
[h264 @ 0x56208cbb2400] mmco: unref short failure
[h264 @ 0x5601acd48e40] mmco: unref short failure
[h264 @ 0x56097b7fe5c0] mmco: unref short failure
[h264 @ 0x5559996d2600] mmco: unref short failure
[h264 @ 0x5559996d2600] mmco: unref short failure
[h264 @ 0x5601a754c1c0] mmco: unref short failure
[h264 @ 0x5601a754c1c0] mmco: unref short failure
[h264 @ 0x56098e29c6c0] mmco: unref short failure
[h264 @ 0x56098e29c6c0] mmco: unref short failure
[h264 @ 0x55597fd16440] mmco: unref short failure
[h264 @ 0x55598ec5a840] mmco: unref short failure
[h264 @ 0x55598ec5a840] mmco: unref short failure
[h264 @ 0x560983a554c0] mmco: unref short failure
[h264 @ 0x56208fd77840] mmco: unref short failure
[h264 @ 0x56208fd77840] mmco: unref short failure
[h264 @ 0x5601be322940] mmco: unref short failure
[h264 @ 0x5601be322940] mmco: unref short failure
[h264 @ 0x5601be322940] mmco: unref short failure
  6%|▌         | 114/1945 [26:52<11:55:16, 23.44s/it][h264 @ 0x56098a890440] mmco: unref short failure
[h264 @ 0x56098da19440] mmco: unref short failure
[h264 @ 0x56098da19440] mmco: unref short failure
[h264 @ 0x56098da19440] mmco: unref short failure
[h264 @ 0x56098da19440] mmco: unref short failure
  6%|▌         | 115/1945 [27:00<9:40:07, 19.02s/it] [h264 @ 0x555993cc4440] mmco: unref short failure
[h264 @ 0x5601bf657380] mmco: unref short failure
[h264 @ 0x5601bf657380] mmco: unref short failure
[h264 @ 0x5601c240dc40] mmco: unref short failure
[h264 @ 0x5601c240dc40] mmco: unref short failure
  6%|▌         | 116/1945 [27:08<8:01:05, 15.78s/it]  6%|▌         | 117/1945 [27:17<6:55:55, 13.65s/it][h264 @ 0x555999ce3340] mmco: unref short failure
[h264 @ 0x555999ce3340] mmco: unref short failure
[h264 @ 0x55597e7281c0] mmco: unref short failure
[h264 @ 0x5601b88effc0] mmco: unref short failure
[h264 @ 0x5601b88effc0] mmco: unref short failure
[h264 @ 0x5620930cd440] mmco: unref short failure
  6%|▌         | 118/1945 [27:32<7:10:38, 14.14s/it][h264 @ 0x5601c33338c0] mmco: unref short failure
[h264 @ 0x5601c33338c0] mmco: unref short failure
[h264 @ 0x5601b63ed300] mmco: unref short failure
[h264 @ 0x5601a754c400] mmco: unref short failure
  6%|▌         | 119/1945 [27:39<6:01:09, 11.87s/it][h264 @ 0x5609969b43c0] mmco: unref short failure
[h264 @ 0x5609969b43c0] mmco: unref short failure
[h264 @ 0x5609969b43c0] mmco: unref short failure
[h264 @ 0x56208810da00] mmco: unref short failure
[h264 @ 0x56208810da00] mmco: unref short failure
[h264 @ 0x560992556dc0] mmco: unref short failure
[h264 @ 0x56207a496600] mmco: unref short failure
[h264 @ 0x56207a496600] mmco: unref short failure
[h264 @ 0x56209391bc80] mmco: unref short failure
[h264 @ 0x56209391bc80] mmco: unref short failure
[h264 @ 0x5620878ca040] mmco: unref short failure
[h264 @ 0x5601b74de000] mmco: unref short failure
[h264 @ 0x555995105480] mmco: unref short failure
[h264 @ 0x555995105480] mmco: unref short failure
  6%|▌         | 120/1945 [28:05<8:08:45, 16.07s/it][h264 @ 0x5601bb18a3c0] mmco: unref short failure
[h264 @ 0x5601bb18a3c0] mmco: unref short failure
  6%|▌         | 121/1945 [28:13<6:51:59, 13.55s/it][h264 @ 0x55598aa76540] mmco: unref short failure
[h264 @ 0x55598aa76540] mmco: unref short failure
[h264 @ 0x555992b1aa80] mmco: unref short failure
[h264 @ 0x555999bbc640] mmco: unref short failure
[h264 @ 0x555999bbc640] mmco: unref short failure
[h264 @ 0x56207b1b3700] mmco: unref short failure
[h264 @ 0x56207b1b3700] mmco: unref short failure
[h264 @ 0x56208cca2540] mmco: unref short failure
[h264 @ 0x555992b1a600] mmco: unref short failure
[h264 @ 0x55598f5caf80] mmco: unref short failure
[h264 @ 0x55598f5caf80] mmco: unref short failure
[h264 @ 0x562082c05280] mmco: unref short failure
  6%|▋         | 122/1945 [28:50<10:30:49, 20.76s/it][h264 @ 0x5620775d3cc0] mmco: unref short failure
[h264 @ 0x5620925c6740] mmco: unref short failure
[h264 @ 0x5620925c6740] mmco: unref short failure
[h264 @ 0x55599984b240] mmco: unref short failure
[h264 @ 0x55599984b240] mmco: unref short failure
  6%|▋         | 123/1945 [28:58<8:36:18, 17.00s/it] [h264 @ 0x5601b365aac0] mmco: unref short failure
[h264 @ 0x5601b365aac0] mmco: unref short failure
  6%|▋         | 124/1945 [29:05<7:04:15, 13.98s/it][h264 @ 0x56098bd14f80] mmco: unref short failure
[h264 @ 0x56098bd14f80] mmco: unref short failure
[h264 @ 0x56208cc9eb80] mmco: unref short failure
[h264 @ 0x56208cc9eb80] mmco: unref short failure
[h264 @ 0x56207981ad40] mmco: unref short failure
  6%|▋         | 125/1945 [29:13<6:04:50, 12.03s/it][h264 @ 0x555998b43780] mmco: unref short failure
[h264 @ 0x56098129a440] mmco: unref short failure
[h264 @ 0x56098129a440] mmco: unref short failure
  6%|▋         | 126/1945 [29:27<6:28:08, 12.80s/it][h264 @ 0x5601bfad43c0] mmco: unref short failure
  7%|▋         | 127/1945 [29:34<5:33:14, 11.00s/it][h264 @ 0x55598e2151c0] mmco: unref short failure
[h264 @ 0x5601b0f651c0] mmco: unref short failure
[h264 @ 0x5601b7585600] mmco: unref short failure
[h264 @ 0x5609826738c0] mmco: unref short failure
[h264 @ 0x5609826738c0] mmco: unref short failure
[h264 @ 0x5609826738c0] mmco: unref short failure
[h264 @ 0x5609826738c0] mmco: unref short failure
[h264 @ 0x56097fef9cc0] mmco: unref short failure
[h264 @ 0x5601b7585800] mmco: unref short failure
[h264 @ 0x5601b7585800] mmco: unref short failure
  7%|▋         | 128/1945 [30:01<7:58:56, 15.82s/it][h264 @ 0x5601c06d6140] mmco: unref short failure
[h264 @ 0x5601c06d6140] mmco: unref short failure
  7%|▋         | 129/1945 [30:08<6:38:30, 13.17s/it][h264 @ 0x5609976c1940] mmco: unref short failure
[h264 @ 0x55598b1198c0] mmco: unref short failure
[h264 @ 0x5601a7e87000] mmco: unref short failure
[h264 @ 0x5601b03470c0] mmco: unref short failure
[h264 @ 0x5601b03470c0] mmco: unref short failure
[h264 @ 0x5601aa746a40] mmco: unref short failure
[h264 @ 0x5601aa746a40] mmco: unref short failure
[h264 @ 0x56208571c740] mmco: unref short failure
[h264 @ 0x56208571c740] mmco: unref short failure
[h264 @ 0x56208571c740] mmco: unref short failure
[h264 @ 0x5601aa192900] mmco: unref short failure
[h264 @ 0x5601aa192900] mmco: unref short failure
[h264 @ 0x5601aa192900] mmco: unref short failure
[h264 @ 0x5601aa192900] mmco: unref short failure
  7%|▋         | 130/1945 [31:01<12:37:17, 25.03s/it][h264 @ 0x5601be28d380] mmco: unref short failure
[h264 @ 0x5601c3ddefc0] mmco: unref short failure
[h264 @ 0x56098899ec40] mmco: unref short failure
[h264 @ 0x56098899ec40] mmco: unref short failure
  7%|▋         | 131/1945 [31:09<10:07:33, 20.10s/it][h264 @ 0x5609813c8e40] mmco: unref short failure
[h264 @ 0x5609813c8e40] mmco: unref short failure
  7%|▋         | 132/1945 [31:17<8:14:36, 16.37s/it] [h264 @ 0x56208c3abf00] mmco: unref short failure
[h264 @ 0x56208c3abf00] mmco: unref short failure
[h264 @ 0x55599140b540] mmco: unref short failure
  7%|▋         | 133/1945 [31:25<6:53:25, 13.69s/it][h264 @ 0x562074bab640] mmco: unref short failure
[h264 @ 0x562074bab640] mmco: unref short failure
[h264 @ 0x562091cbdfc0] mmco: unref short failure
[h264 @ 0x562091cbdfc0] mmco: unref short failure
[h264 @ 0x560994b0d140] mmco: unref short failure
[h264 @ 0x555988f63e40] mmco: unref short failure
[h264 @ 0x555988f63e40] mmco: unref short failure
  7%|▋         | 134/1945 [31:42<7:26:42, 14.80s/it]  7%|▋         | 135/1945 [31:50<6:22:37, 12.68s/it][h264 @ 0x55599986de00] mmco: unref short failure
[h264 @ 0x55599986de00] mmco: unref short failure
[h264 @ 0x55599986de00] mmco: unref short failure
[h264 @ 0x562076d0e140] mmco: unref short failure
[h264 @ 0x562076d0e140] mmco: unref short failure
[h264 @ 0x5609890e4ec0] mmco: unref short failure
[h264 @ 0x5609890e4ec0] mmco: unref short failure
  7%|▋         | 136/1945 [32:05<6:47:57, 13.53s/it][h264 @ 0x5601bfb3d8c0] mmco: unref short failure
[h264 @ 0x560992370f00] mmco: unref short failure
  7%|▋         | 137/1945 [32:13<5:52:49, 11.71s/it][h264 @ 0x5609908c2700] mmco: unref short failure
[h264 @ 0x5609908c2700] mmco: unref short failure
[h264 @ 0x5601b63ff8c0] mmco: unref short failure
[h264 @ 0x55599b78dc80] mmco: unref short failure
[h264 @ 0x56208f81a180] mmco: unref short failure
[h264 @ 0x56208d2bf900] mmco: unref short failure
[h264 @ 0x5609965b8680] mmco: unref short failure
[h264 @ 0x5609965b8680] mmco: unref short failure
[h264 @ 0x5609965b8680] mmco: unref short failure
[h264 @ 0x5609965b8680] mmco: unref short failure
[h264 @ 0x5601b8c91b40] mmco: unref short failure
[h264 @ 0x560993861fc0] mmco: unref short failure
[h264 @ 0x560993861fc0] mmco: unref short failure
  7%|▋         | 138/1945 [33:04<11:50:44, 23.60s/it]  7%|▋         | 139/1945 [33:12<9:31:20, 18.98s/it]   7%|▋         | 140/1945 [33:19<7:40:57, 15.32s/it][h264 @ 0x56208eb8cbc0] mmco: unref short failure
[h264 @ 0x56099a269b80] mmco: unref short failure
[h264 @ 0x5601a839f240] mmco: unref short failure
  7%|▋         | 141/1945 [33:26<6:25:49, 12.83s/it][h264 @ 0x5601b7a06140] mmco: unref short failure
[h264 @ 0x5601b7a06140] mmco: unref short failure
[h264 @ 0x55598130bdc0] mmco: unref short failure
[h264 @ 0x55598130bdc0] mmco: unref short failure
[h264 @ 0x55598130bdc0] mmco: unref short failure
[h264 @ 0x55598130bdc0] mmco: unref short failure
[h264 @ 0x56209034c900] mmco: unref short failure
[h264 @ 0x56209034c900] mmco: unref short failure
[h264 @ 0x560988ac3340] mmco: unref short failure
  7%|▋         | 142/1945 [33:48<7:49:13, 15.62s/it][h264 @ 0x5609938616c0] mmco: unref short failure
[h264 @ 0x55597cfba7c0] mmco: unref short failure
[h264 @ 0x55597cfba7c0] mmco: unref short failure
[h264 @ 0x55597cfba7c0] mmco: unref short failure
[h264 @ 0x55597cfba7c0] mmco: unref short failure
  7%|▋         | 143/1945 [33:57<6:44:56, 13.48s/it][h264 @ 0x5601aab04900] mmco: unref short failure
[h264 @ 0x5601aab04900] mmco: unref short failure
[h264 @ 0x5601aab04900] mmco: unref short failure
[h264 @ 0x5601aab04900] mmco: unref short failure
  7%|▋         | 144/1945 [34:12<6:58:49, 13.95s/it][h264 @ 0x5609868eee40] mmco: unref short failure
[h264 @ 0x55599d6b0580] mmco: unref short failure
  7%|▋         | 145/1945 [34:20<6:05:21, 12.18s/it][h264 @ 0x5601c03c0b40] mmco: unref short failure
[h264 @ 0x5601c03c0b40] mmco: unref short failure
[h264 @ 0x5601c03c0b40] mmco: unref short failure
[h264 @ 0x5609940144c0] mmco: unref short failure
[h264 @ 0x5609940144c0] mmco: unref short failure
[h264 @ 0x5601a4d71f80] mmco: unref short failure
[h264 @ 0x5601b65def00] mmco: unref short failure
[h264 @ 0x56098ad517c0] mmco: unref short failure
[h264 @ 0x5601b7a067c0] mmco: unref short failure
[h264 @ 0x5601b7a067c0] mmco: unref short failure
[h264 @ 0x5559806b9600] mmco: unref short failure
[h264 @ 0x5601ac5cc780] mmco: unref short failure
[h264 @ 0x56208c214500] mmco: unref short failure
[h264 @ 0x5620906df300] mmco: unref short failure
[h264 @ 0x56207f98e500] mmco: unref short failure
[h264 @ 0x56207f98e500] mmco: unref short failure
  8%|▊         | 146/1945 [35:10<11:48:44, 23.64s/it][h264 @ 0x5620950abb80] mmco: unref short failure
[h264 @ 0x56099c1af300] mmco: unref short failure
[h264 @ 0x56099c1af300] mmco: unref short failure
[h264 @ 0x560978f418c0] mmco: unref short failure
[h264 @ 0x560978f418c0] mmco: unref short failure
[h264 @ 0x5601a51c3e40] mmco: unref short failure
[h264 @ 0x5601a51c3e40] mmco: unref short failure
  8%|▊         | 147/1945 [35:18<9:24:07, 18.82s/it] [h264 @ 0x555989529cc0] mmco: unref short failure
  8%|▊         | 148/1945 [35:25<7:37:43, 15.28s/it][h264 @ 0x56098f8a8e40] mmco: unref short failure
[h264 @ 0x5601a5137d00] mmco: unref short failure
[h264 @ 0x5601a5137d00] mmco: unref short failure
[h264 @ 0x5601a5137d00] mmco: unref short failure
[h264 @ 0x5601a5137d00] mmco: unref short failure
  8%|▊         | 149/1945 [35:32<6:22:49, 12.79s/it][h264 @ 0x55597c736a40] mmco: unref short failure
[h264 @ 0x560995009fc0] mmco: unref short failure
[h264 @ 0x560995009fc0] mmco: unref short failure
09/08/2024 21:17:06 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.4558231830596924, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.05030788481235504, 'loss_ret%tv%ta--finetune_area/loss_area': 2.711580276489258, 'loss_ret%tv%ta--finetune_area/total_loss': 6.217711448669434}
[h264 @ 0x560978fef5c0] mmco: unref short failure
[h264 @ 0x560978fef5c0] mmco: unref short failure
  8%|▊         | 150/1945 [35:53<7:39:59, 15.38s/it][h264 @ 0x5601b6401280] mmco: unref short failure
[h264 @ 0x5601b6401280] mmco: unref short failure
[h264 @ 0x560995009900] mmco: unref short failure
[h264 @ 0x560995009900] mmco: unref short failure
  8%|▊         | 151/1945 [36:01<6:32:20, 13.12s/it]  8%|▊         | 152/1945 [36:15<6:37:04, 13.29s/it][h264 @ 0x55597d66dd00] mmco: unref short failure
[h264 @ 0x55597d66dd00] mmco: unref short failure
  8%|▊         | 153/1945 [36:23<5:54:10, 11.86s/it][h264 @ 0x56097903fe80] mmco: unref short failure
[h264 @ 0x56097903fe80] mmco: unref short failure
[h264 @ 0x5601a76d9700] mmco: unref short failure
[h264 @ 0x5601a76d9700] mmco: unref short failure
[h264 @ 0x56099779eb80] mmco: unref short failure
[h264 @ 0x56099779eb80] mmco: unref short failure
[h264 @ 0x555982779a40] mmco: unref short failure
[h264 @ 0x555982779a40] mmco: unref short failure
[h264 @ 0x56098f897640] mmco: unref short failure
[h264 @ 0x55599c37fb00] mmco: unref short failure
[h264 @ 0x560978d54980] mmco: unref short failure
[h264 @ 0x560978d54980] mmco: unref short failure
[h264 @ 0x55599d717080] mmco: unref short failure
[h264 @ 0x55599d717080] mmco: unref short failure
[h264 @ 0x56207dc36b00] mmco: unref short failure
[h264 @ 0x56207dc36b00] mmco: unref short failure
[h264 @ 0x55597b2d3e80] mmco: unref short failure
  8%|▊         | 154/1945 [37:22<12:57:00, 26.03s/it][h264 @ 0x5601a4e73580] mmco: unref short failure
[h264 @ 0x5601a4e73580] mmco: unref short failure
[h264 @ 0x560991238580] mmco: unref short failure
[h264 @ 0x560991238580] mmco: unref short failure
  8%|▊         | 155/1945 [37:30<10:12:51, 20.54s/it][h264 @ 0x5601c3408700] mmco: unref short failure
[h264 @ 0x5601c3408700] mmco: unref short failure
  8%|▊         | 156/1945 [37:37<8:13:37, 16.56s/it] [h264 @ 0x56098c563f80] mmco: unref short failure
[h264 @ 0x56098c563f80] mmco: unref short failure
[h264 @ 0x56098c563f80] mmco: unref short failure
[h264 @ 0x56098c563f80] mmco: unref short failure
[h264 @ 0x5601a8a7f4c0] mmco: unref short failure
[h264 @ 0x5601a8a7f4c0] mmco: unref short failure
[h264 @ 0x5601c2d38240] mmco: unref short failure
  8%|▊         | 157/1945 [37:46<6:59:22, 14.07s/it][h264 @ 0x5601a94c7600] mmco: unref short failure
[h264 @ 0x5601a94c7600] mmco: unref short failure
[h264 @ 0x56207fbda580] mmco: unref short failure
  8%|▊         | 158/1945 [37:54<6:08:04, 12.36s/it][h264 @ 0x56097e306680] mmco: unref short failure
[h264 @ 0x55599d988c80] mmco: unref short failure
[h264 @ 0x555997a4a300] mmco: unref short failure
  8%|▊         | 159/1945 [38:02<5:26:06, 10.96s/it][h264 @ 0x560990d1be80] mmco: unref short failure
[h264 @ 0x560990d1be80] mmco: unref short failure
[h264 @ 0x5609949c2e80] mmco: unref short failure
[h264 @ 0x5601a6cbb100] mmco: unref short failure
  8%|▊         | 160/1945 [38:23<6:59:19, 14.10s/it][h264 @ 0x562088300280] mmco: unref short failure
[h264 @ 0x55597ec0a2c0] mmco: unref short failure
[h264 @ 0x55597ec0a2c0] mmco: unref short failure
[h264 @ 0x560986054180] mmco: unref short failure
  8%|▊         | 161/1945 [38:31<6:02:43, 12.20s/it][h264 @ 0x56208e6f2780] mmco: unref short failure
[h264 @ 0x560993d11e80] mmco: unref short failure
[h264 @ 0x55599d650340] mmco: unref short failure
[h264 @ 0x55599d650340] mmco: unref short failure
[h264 @ 0x5601c2c9d740] mmco: unref short failure
[h264 @ 0x55599be66bc0] mmco: unref short failure
  8%|▊         | 162/1945 [39:19<11:25:40, 23.07s/it][h264 @ 0x56207c4a1cc0] mmco: unref short failure
[h264 @ 0x55599c2de780] mmco: unref short failure
[h264 @ 0x555980380b00] mmco: unref short failure
[h264 @ 0x555980380b00] mmco: unref short failure
  8%|▊         | 163/1945 [39:26<9:03:25, 18.30s/it] [h264 @ 0x555980fe6400] mmco: unref short failure
[h264 @ 0x555980fe6400] mmco: unref short failure
  8%|▊         | 164/1945 [39:34<7:24:58, 14.99s/it][h264 @ 0x560986901640] mmco: unref short failure
[h264 @ 0x560986901640] mmco: unref short failure
  8%|▊         | 165/1945 [39:41<6:19:53, 12.81s/it][h264 @ 0x55597bd96400] mmco: unref short failure
[h264 @ 0x55597bd96400] mmco: unref short failure
[h264 @ 0x5601c549b440] mmco: unref short failure
[h264 @ 0x5601c549b440] mmco: unref short failure
[h264 @ 0x560979db6c40] mmco: unref short failure
[h264 @ 0x560979db6c40] mmco: unref short failure
[h264 @ 0x56097a962e40] mmco: unref short failure
[h264 @ 0x5609844d1d40] mmco: unref short failure
[h264 @ 0x55599cbe1780] mmco: unref short failure
  9%|▊         | 166/1945 [40:06<8:01:02, 16.22s/it][h264 @ 0x55599d2416c0] mmco: unref short failure
[h264 @ 0x555981157600] mmco: unref short failure
  9%|▊         | 167/1945 [40:12<6:36:26, 13.38s/it][h264 @ 0x55597f1657c0] mmco: unref short failure
[h264 @ 0x55597f1657c0] mmco: unref short failure
[h264 @ 0x56098c2ef300] mmco: unref short failure
[h264 @ 0x56098c2ef300] mmco: unref short failure
[h264 @ 0x5601a570fa00] mmco: unref short failure
  9%|▊         | 168/1945 [40:28<6:54:49, 14.01s/it][h264 @ 0x56097a690e40] mmco: unref short failure
[h264 @ 0x56097a690e40] mmco: unref short failure
[h264 @ 0x56098a663c80] mmco: unref short failure
[h264 @ 0x56098a663c80] mmco: unref short failure
[h264 @ 0x56208dc1cc40] mmco: unref short failure
[h264 @ 0x56208dc1cc40] mmco: unref short failure
  9%|▊         | 169/1945 [40:37<6:15:07, 12.67s/it][h264 @ 0x5601b80ad500] mmco: unref short failure
[h264 @ 0x5601b80ad500] mmco: unref short failure
[h264 @ 0x5601b80ad500] mmco: unref short failure
[h264 @ 0x5601b80ad500] mmco: unref short failure
[h264 @ 0x5601a4b9f0c0] mmco: unref short failure
[h264 @ 0x55597bd968c0] mmco: unref short failure
[h264 @ 0x562091134500] mmco: unref short failure
[h264 @ 0x560999d5f4c0] mmco: unref short failure
[h264 @ 0x56207d43ef40] mmco: unref short failure
[h264 @ 0x562090af7c80] mmco: unref short failure
[h264 @ 0x5620755281c0] mmco: unref short failure
[h264 @ 0x5559894540c0] mmco: unref short failure
[h264 @ 0x5559894540c0] mmco: unref short failure
[h264 @ 0x55598079b300] mmco: unref short failure
[h264 @ 0x5601c3d50840] mmco: unref short failure
[h264 @ 0x5601c3d50840] mmco: unref short failure
  9%|▊         | 170/1945 [41:36<13:03:02, 26.47s/it][h264 @ 0x555997f59e40] mmco: unref short failure
[h264 @ 0x5601a5039940] mmco: unref short failure
[h264 @ 0x5601a5039940] mmco: unref short failure
[h264 @ 0x5601a5116ac0] mmco: unref short failure
[h264 @ 0x5601a5116ac0] mmco: unref short failure
[h264 @ 0x5601a5116ac0] mmco: unref short failure
[h264 @ 0x5601a5116ac0] mmco: unref short failure
  9%|▉         | 171/1945 [41:43<10:10:45, 20.66s/it][h264 @ 0x56209034a980] mmco: unref short failure
[h264 @ 0x56209034a980] mmco: unref short failure
[h264 @ 0x562075242080] mmco: unref short failure
[h264 @ 0x562075242080] mmco: unref short failure
  9%|▉         | 172/1945 [41:50<8:09:00, 16.55s/it]   9%|▉         | 173/1945 [41:58<6:48:51, 13.84s/it][h264 @ 0x560986f28240] mmco: unref short failure
[h264 @ 0x560986f28240] mmco: unref short failure
[h264 @ 0x562074bd74c0] mmco: unref short failure
[h264 @ 0x562074bd74c0] mmco: unref short failure
[h264 @ 0x562074bd74c0] mmco: unref short failure
[h264 @ 0x562074bd74c0] mmco: unref short failure
[h264 @ 0x56097da3bc00] mmco: unref short failure
[h264 @ 0x56097c3f3b80] mmco: unref short failure
[h264 @ 0x56097c3f3b80] mmco: unref short failure
  9%|▉         | 174/1945 [42:11<6:43:35, 13.67s/it][h264 @ 0x5601b9ef96c0] mmco: unref short failure
  9%|▉         | 175/1945 [42:18<5:44:09, 11.67s/it][h264 @ 0x56207557e440] mmco: unref short failure
[h264 @ 0x56207557e440] mmco: unref short failure
[h264 @ 0x5601a6e79980] mmco: unref short failure
[h264 @ 0x5601a6e79980] mmco: unref short failure
  9%|▉         | 176/1945 [42:26<5:14:46, 10.68s/it][h264 @ 0x55597f7fc340] mmco: unref short failure
[h264 @ 0x55597f7fc340] mmco: unref short failure
[h264 @ 0x5601b34b5c00] mmco: unref short failure
[h264 @ 0x5601b34b5c00] mmco: unref short failure
[h264 @ 0x56207a64d700] mmco: unref short failure
[h264 @ 0x56207a64d700] mmco: unref short failure
[h264 @ 0x56207a64d700] mmco: unref short failure
[h264 @ 0x56207a64d700] mmco: unref short failure
[h264 @ 0x56207a64d700] mmco: unref short failure
[h264 @ 0x56207a64d700] mmco: unref short failure
  9%|▉         | 177/1945 [42:34<4:51:14,  9.88s/it][h264 @ 0x56207c3a16c0] mmco: unref short failure
[h264 @ 0x56097c3f36c0] mmco: unref short failure
[h264 @ 0x562074d29080] mmco: unref short failure
[h264 @ 0x5601acc5b780] mmco: unref short failure
[h264 @ 0x5601acc5b780] mmco: unref short failure
[h264 @ 0x5601a65b4a00] mmco: unref short failure
[h264 @ 0x562084a68940] mmco: unref short failure
[h264 @ 0x562084a68940] mmco: unref short failure
[h264 @ 0x5601c2658340] mmco: unref short failure
[h264 @ 0x5601c2658340] mmco: unref short failure
[h264 @ 0x5601ad7240c0] mmco: unref short failure
[h264 @ 0x5601ad7240c0] mmco: unref short failure
[h264 @ 0x56098299bf80] mmco: unref short failure
[h264 @ 0x56098299bf80] mmco: unref short failure
[h264 @ 0x56207615fe80] mmco: unref short failure
[h264 @ 0x56207615fe80] mmco: unref short failure
[h264 @ 0x56208b0675c0] mmco: unref short failure
  9%|▉         | 178/1945 [43:39<12:59:36, 26.47s/it][h264 @ 0x55599ba1c880] mmco: unref short failure
[h264 @ 0x555984232e40] mmco: unref short failure
[h264 @ 0x555984232e40] mmco: unref short failure
[h264 @ 0x555984232e40] mmco: unref short failure
[h264 @ 0x555984232e40] mmco: unref short failure
[h264 @ 0x555984232e40] mmco: unref short failure
[h264 @ 0x555984232e40] mmco: unref short failure
[h264 @ 0x555984232e40] mmco: unref short failure
[h264 @ 0x56097b90f3c0] mmco: unref short failure
[h264 @ 0x56097b90f3c0] mmco: unref short failure
  9%|▉         | 179/1945 [43:47<10:08:40, 20.68s/it][h264 @ 0x5601ac9b35c0] mmco: unref short failure
[h264 @ 0x5601ac9b35c0] mmco: unref short failure
[h264 @ 0x560978f40f80] mmco: unref short failure
[h264 @ 0x560978f40f80] mmco: unref short failure
  9%|▉         | 180/1945 [43:54<8:07:00, 16.56s/it]   9%|▉         | 181/1945 [44:01<6:42:14, 13.68s/it][h264 @ 0x55598584b480] mmco: unref short failure
  9%|▉         | 182/1945 [44:09<5:58:09, 12.19s/it][h264 @ 0x5601ad724a00] mmco: unref short failure
[h264 @ 0x5601ad724a00] mmco: unref short failure
[h264 @ 0x5601ad724a00] mmco: unref short failure
[h264 @ 0x5601ad724a00] mmco: unref short failure
  9%|▉         | 183/1945 [44:17<5:17:14, 10.80s/it][h264 @ 0x56097ecceb80] mmco: unref short failure
  9%|▉         | 184/1945 [44:23<4:40:30,  9.56s/it][h264 @ 0x5601bfb758c0] mmco: unref short failure
[h264 @ 0x56207dc2c980] mmco: unref short failure
[h264 @ 0x56207dc2c980] mmco: unref short failure
[h264 @ 0x5601a7e72280] mmco: unref short failure
 10%|▉         | 185/1945 [44:32<4:32:05,  9.28s/it][h264 @ 0x55599d664b80] mmco: unref short failure
[h264 @ 0x562091134780] mmco: unref short failure
[h264 @ 0x555981966040] mmco: unref short failure
[h264 @ 0x5601a729d380] mmco: unref short failure
[h264 @ 0x555981556d40] mmco: unref short failure
[h264 @ 0x555981556d40] mmco: unref short failure
[h264 @ 0x562094842280] mmco: unref short failure
[h264 @ 0x5601a9a176c0] mmco: unref short failure
[h264 @ 0x562091c4e340] mmco: unref short failure
[h264 @ 0x56097a691300] mmco: unref short failure
[h264 @ 0x56097a691300] mmco: unref short failure
[h264 @ 0x56097a8447c0] mmco: unref short failure
[h264 @ 0x56097a8447c0] mmco: unref short failure
[h264 @ 0x56097a8447c0] mmco: unref short failure
[h264 @ 0x56097a8447c0] mmco: unref short failure
[h264 @ 0x56097a8447c0] mmco: unref short failure
[h264 @ 0x562075267700] mmco: unref short failure
[h264 @ 0x562075267700] mmco: unref short failure
[h264 @ 0x5601a9a176c0] mmco: unref short failure
[h264 @ 0x5601a9a176c0] mmco: unref short failure
[h264 @ 0x5601a7e719c0] mmco: unref short failure
[h264 @ 0x5601a7e719c0] mmco: unref short failure
[h264 @ 0x5601a551a1c0] mmco: unref short failure
[h264 @ 0x5601ab7c28c0] mmco: unref short failure
[h264 @ 0x5601a5328600] mmco: unref short failure
[h264 @ 0x5601a5328600] mmco: unref short failure
[h264 @ 0x5601a5328600] mmco: unref short failure
 10%|▉         | 186/1945 [45:43<13:31:51, 27.69s/it] 10%|▉         | 187/1945 [45:51<10:38:27, 21.79s/it][h264 @ 0x5601bfcab080] mmco: unref short failure
[h264 @ 0x5601bfcab080] mmco: unref short failure
 10%|▉         | 188/1945 [45:58<8:30:25, 17.43s/it] [h264 @ 0x5601b0ac2700] mmco: unref short failure
[h264 @ 0x5601b0ac2700] mmco: unref short failure
[h264 @ 0x55597ff9a900] mmco: unref short failure
[h264 @ 0x55597ff9a900] mmco: unref short failure
 10%|▉         | 189/1945 [46:05<7:01:50, 14.41s/it][h264 @ 0x560982673b40] mmco: unref short failure
[h264 @ 0x560982673b40] mmco: unref short failure
[h264 @ 0x55598e6f21c0] mmco: unref short failure
[h264 @ 0x55598e6f21c0] mmco: unref short failure
[h264 @ 0x55597bb38e00] mmco: unref short failure
[h264 @ 0x55597bb38e00] mmco: unref short failure
 10%|▉         | 190/1945 [46:12<5:57:00, 12.21s/it][h264 @ 0x5559963d7b40] mmco: unref short failure
[h264 @ 0x5559963d7b40] mmco: unref short failure
 10%|▉         | 191/1945 [46:19<5:11:42, 10.66s/it] 10%|▉         | 192/1945 [46:27<4:43:18,  9.70s/it][h264 @ 0x5609861eb740] mmco: unref short failure
 10%|▉         | 193/1945 [46:33<4:14:34,  8.72s/it][h264 @ 0x56207c2993c0] mmco: unref short failure
[h264 @ 0x56097945e880] mmco: unref short failure
[h264 @ 0x56097945e880] mmco: unref short failure
[h264 @ 0x5601a46c4680] mmco: unref short failure
[h264 @ 0x5620930cdec0] mmco: unref short failure
[h264 @ 0x5620930cdec0] mmco: unref short failure
[h264 @ 0x5559808f48c0] mmco: unref short failure
[h264 @ 0x5620759f8300] mmco: unref short failure
[h264 @ 0x5620759f8300] mmco: unref short failure
[h264 @ 0x56097cc2c480] mmco: unref short failure
[h264 @ 0x5601a9d82400] mmco: unref short failure
[h264 @ 0x5601a6bdcb40] mmco: unref short failure
[h264 @ 0x5601a6bdcb40] mmco: unref short failure
[h264 @ 0x56207812bec0] mmco: unref short failure
[h264 @ 0x56207812bec0] mmco: unref short failure
[h264 @ 0x562077618140] mmco: unref short failure
[h264 @ 0x55597e1a5e00] mmco: unref short failure
[h264 @ 0x55597e1a5e00] mmco: unref short failure
 10%|▉         | 194/1945 [47:45<13:26:14, 27.63s/it][h264 @ 0x5601af8b7d40] mmco: unref short failure
[h264 @ 0x5601af8b7d40] mmco: unref short failure
 10%|█         | 195/1945 [47:51<10:15:11, 21.09s/it] 10%|█         | 196/1945 [47:56<7:58:32, 16.42s/it]  10%|█         | 197/1945 [48:02<6:26:31, 13.27s/it][h264 @ 0x56097eb118c0] mmco: unref short failure
[h264 @ 0x56097eb118c0] mmco: unref short failure
 10%|█         | 198/1945 [48:09<5:30:32, 11.35s/it][h264 @ 0x56207df5c940] mmco: unref short failure
[h264 @ 0x56207dd841c0] mmco: unref short failure
[h264 @ 0x56207dd841c0] mmco: unref short failure
[h264 @ 0x56207dd841c0] mmco: unref short failure
[h264 @ 0x56207dd841c0] mmco: unref short failure
 10%|█         | 199/1945 [48:16<4:53:29, 10.09s/it]09/08/2024 21:29:42 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.6837289333343506, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.05214574187994003, 'loss_ret%tv%ta--finetune_area/loss_area': 2.8021621704101562, 'loss_ret%tv%ta--finetune_area/total_loss': 6.538036823272705}
[h264 @ 0x5601aa131880] mmco: unref short failure
[h264 @ 0x5601aa131880] mmco: unref short failure
 10%|█         | 200/1945 [48:30<5:25:21, 11.19s/it][h264 @ 0x560980f4ed40] mmco: unref short failure
[h264 @ 0x555989fe6640] mmco: unref short failure
[h264 @ 0x56097dc9e280] mmco: unref short failure
 10%|█         | 201/1945 [48:38<4:54:20, 10.13s/it][h264 @ 0x562076a49140] mmco: unref short failure
[h264 @ 0x56208298eac0] mmco: unref short failure
[h264 @ 0x56208298eac0] mmco: unref short failure
[h264 @ 0x562075887d80] mmco: unref short failure
[h264 @ 0x5601c59c4a00] mmco: unref short failure
[h264 @ 0x5601c59c4a00] mmco: unref short failure
[h264 @ 0x5601c59c4a00] mmco: unref short failure
[h264 @ 0x5601c59c4a00] mmco: unref short failure
[h264 @ 0x5601c59c4a00] mmco: unref short failure
[h264 @ 0x5601c59c4a00] mmco: unref short failure
[h264 @ 0x555982e4f700] mmco: unref short failure
[h264 @ 0x555982e4f700] mmco: unref short failure
[h264 @ 0x56209477e540] mmco: unref short failure
[h264 @ 0x5601ab44cbc0] mmco: unref short failure
[h264 @ 0x56207ee8b500] mmco: unref short failure
[h264 @ 0x56099b08e240] mmco: unref short failure
[h264 @ 0x56099b08e240] mmco: unref short failure
[h264 @ 0x56208dc2fb40] mmco: unref short failure
[h264 @ 0x56208dc2fb40] mmco: unref short failure
[h264 @ 0x560993725040] mmco: unref short failure
[h264 @ 0x56097b7328c0] mmco: unref short failure
[h264 @ 0x5620949ca6c0] mmco: unref short failure
[h264 @ 0x56097a3d5c00] mmco: unref short failure
[h264 @ 0x562091134780] mmco: unref short failure
[h264 @ 0x562084d38200] mmco: unref short failure
[h264 @ 0x562084d38200] mmco: unref short failure
[h264 @ 0x5601b0c6e800] mmco: unref short failure
[h264 @ 0x562078dd7080] mmco: unref short failure
[h264 @ 0x5559845714c0] mmco: unref short failure
[h264 @ 0x5559845714c0] mmco: unref short failure
 10%|█         | 202/1945 [50:00<15:20:51, 31.70s/it][h264 @ 0x55597fa40640] mmco: unref short failure
[h264 @ 0x55597fa40640] mmco: unref short failure
[h264 @ 0x55597fa40640] mmco: unref short failure
[h264 @ 0x55597fa40640] mmco: unref short failure
[h264 @ 0x55597fa40640] mmco: unref short failure
[h264 @ 0x55597fa40640] mmco: unref short failure
 10%|█         | 203/1945 [50:07<11:50:41, 24.48s/it] 10%|█         | 204/1945 [50:15<9:19:57, 19.30s/it] [h264 @ 0x56207a64d700] mmco: unref short failure
[h264 @ 0x56207a64d700] mmco: unref short failure
 11%|█         | 205/1945 [50:22<7:32:50, 15.62s/it][h264 @ 0x56208512bd80] mmco: unref short failure
[h264 @ 0x56208512bd80] mmco: unref short failure
[h264 @ 0x5601a66b37c0] mmco: unref short failure
[h264 @ 0x5601a66b37c0] mmco: unref short failure
[h264 @ 0x5601ac0eb740] mmco: unref short failure
[h264 @ 0x5601ac0eb740] mmco: unref short failure
 11%|█         | 206/1945 [50:28<6:13:20, 12.88s/it][h264 @ 0x5601ac0eb740] mmco: unref short failure
[h264 @ 0x5601ac0eb740] mmco: unref short failure
[h264 @ 0x555996eb9900] mmco: unref short failure
 11%|█         | 207/1945 [50:35<5:20:44, 11.07s/it] 11%|█         | 208/1945 [50:42<4:47:02,  9.92s/it][h264 @ 0x5601ad846e80] mmco: unref short failure
[h264 @ 0x5601ad846e80] mmco: unref short failure
[h264 @ 0x5601a53fe900] mmco: unref short failure
[h264 @ 0x5601a53fe900] mmco: unref short failure
[h264 @ 0x5559871afa40] mmco: unref short failure
[h264 @ 0x5559871afa40] mmco: unref short failure
[h264 @ 0x5559871afa40] mmco: unref short failure
[h264 @ 0x5559871afa40] mmco: unref short failure
 11%|█         | 209/1945 [50:49<4:21:36,  9.04s/it][h264 @ 0x5601a5327cc0] mmco: unref short failure
[h264 @ 0x5601b0c6e380] mmco: unref short failure
[h264 @ 0x5601b0c6e380] mmco: unref short failure
[h264 @ 0x560993ac09c0] mmco: unref short failure
[h264 @ 0x5601ab44ce00] mmco: unref short failure
[h264 @ 0x5601a503c180] mmco: unref short failure
[h264 @ 0x5601a5df14c0] mmco: unref short failure
[h264 @ 0x5601a5df14c0] mmco: unref short failure
[h264 @ 0x5559867f1580] mmco: unref short failure
[h264 @ 0x5609949c2a00] mmco: unref short failure
[h264 @ 0x5609949c2a00] mmco: unref short failure
[h264 @ 0x55598ff25d80] mmco: unref short failure
[h264 @ 0x55598ff25d80] mmco: unref short failure
[h264 @ 0x5601ad1b17c0] mmco: unref short failure
[h264 @ 0x5601ad1b17c0] mmco: unref short failure
[h264 @ 0x56097dc9e280] mmco: unref short failure
[h264 @ 0x56097dc9e280] mmco: unref short failure
[h264 @ 0x56097b203080] mmco: unref short failure
[h264 @ 0x5620837fb0c0] mmco: unref short failure
[h264 @ 0x5620837fb0c0] mmco: unref short failure
[h264 @ 0x5601c9470600] mmco: unref short failure
[h264 @ 0x56207e2dd540] mmco: unref short failure
 11%|█         | 210/1945 [52:00<13:15:16, 27.50s/it][h264 @ 0x56207ae3c700] mmco: unref short failure
[h264 @ 0x56207ae3c700] mmco: unref short failure
[h264 @ 0x5601ac465240] mmco: unref short failure
[h264 @ 0x555996eb9d40] mmco: unref short failure
[h264 @ 0x555996eb9d40] mmco: unref short failure
[h264 @ 0x555996eb9d40] mmco: unref short failure
 11%|█         | 211/1945 [52:08<10:23:47, 21.58s/it][h264 @ 0x56097998bd80] mmco: unref short failure
[h264 @ 0x56097998bd80] mmco: unref short failure
[h264 @ 0x56097a843e80] mmco: unref short failure
 11%|█         | 212/1945 [52:14<8:14:22, 17.12s/it] [h264 @ 0x555986429600] mmco: unref short failure
[h264 @ 0x5601a829f880] mmco: unref short failure
[h264 @ 0x5601a829f880] mmco: unref short failure
[h264 @ 0x5601c4534200] mmco: unref short failure
[h264 @ 0x5601c4534200] mmco: unref short failure
[h264 @ 0x5601a829f880] mmco: unref short failure
[h264 @ 0x5601a829f880] mmco: unref short failure
 11%|█         | 213/1945 [52:22<6:51:36, 14.26s/it][h264 @ 0x562094236800] mmco: unref short failure
[h264 @ 0x562094236800] mmco: unref short failure
 11%|█         | 214/1945 [52:29<5:46:24, 12.01s/it][h264 @ 0x5559998b0300] mmco: unref short failure
[h264 @ 0x5559998b0300] mmco: unref short failure
 11%|█         | 215/1945 [52:36<5:04:28, 10.56s/it] 11%|█         | 216/1945 [52:43<4:38:36,  9.67s/it][h264 @ 0x56099e95e340] mmco: unref short failure
[h264 @ 0x560981bbd580] mmco: unref short failure
[h264 @ 0x562089e8f300] mmco: unref short failure
[h264 @ 0x562089e8f300] mmco: unref short failure
 11%|█         | 217/1945 [52:51<4:16:46,  8.92s/it][h264 @ 0x5601b66bd140] mmco: unref short failure
[h264 @ 0x5601b66bd140] mmco: unref short failure
[h264 @ 0x562091cbe680] mmco: unref short failure
[h264 @ 0x562091cbe680] mmco: unref short failure
[h264 @ 0x562091cbe680] mmco: unref short failure
[h264 @ 0x562091cbe680] mmco: unref short failure
[h264 @ 0x5601b2540f00] mmco: unref short failure
[h264 @ 0x560979ddba80] mmco: unref short failure
[h264 @ 0x5601ac1bed80] mmco: unref short failure
[h264 @ 0x5601ac1bed80] mmco: unref short failure
[h264 @ 0x5609832d2640] mmco: unref short failure
[h264 @ 0x5609832d2640] mmco: unref short failure
[h264 @ 0x56208fe5a680] mmco: unref short failure
[h264 @ 0x56208fe5a680] mmco: unref short failure
[h264 @ 0x5601ad1ac780] mmco: unref short failure
[h264 @ 0x5601a8dcc700] mmco: unref short failure
[h264 @ 0x55598a6ca700] mmco: unref short failure
[h264 @ 0x5601ac0ed8c0] mmco: unref short failure
[h264 @ 0x5601ac0ed8c0] mmco: unref short failure
[h264 @ 0x5601ac0ed8c0] mmco: unref short failure
[h264 @ 0x5601a9f50100] mmco: unref short failure
[h264 @ 0x5601bdde0ac0] mmco: unref short failure
[h264 @ 0x5601bdde0ac0] mmco: unref short failure
[h264 @ 0x56098ce54e80] mmco: unref short failure
[h264 @ 0x562086cc9ac0] mmco: unref short failure
[h264 @ 0x562075bee440] mmco: unref short failure
[h264 @ 0x562075bee440] mmco: unref short failure
[h264 @ 0x5559892e24c0] mmco: unref short failure
 11%|█         | 218/1945 [53:56<12:27:53, 25.98s/it][h264 @ 0x562084d3bd40] mmco: unref short failure
 11%|█▏        | 219/1945 [54:04<9:46:09, 20.38s/it]  11%|█▏        | 220/1945 [54:11<7:56:13, 16.56s/it] 11%|█▏        | 221/1945 [54:20<6:43:55, 14.06s/it][h264 @ 0x55599274bcc0] mmco: unref short failure
[h264 @ 0x5601a59a1dc0] mmco: unref short failure
 11%|█▏        | 222/1945 [54:27<5:45:43, 12.04s/it][h264 @ 0x55598ec5aac0] mmco: unref short failure
[h264 @ 0x55598ec5aac0] mmco: unref short failure
 11%|█▏        | 223/1945 [54:34<5:06:48, 10.69s/it][h264 @ 0x56098ce54e80] mmco: unref short failure
[h264 @ 0x56098ce54e80] mmco: unref short failure
 12%|█▏        | 224/1945 [54:41<4:34:40,  9.58s/it][h264 @ 0x555980bc2c80] mmco: unref short failure
[h264 @ 0x555980bc2c80] mmco: unref short failure
 12%|█▏        | 225/1945 [54:49<4:15:29,  8.91s/it][h264 @ 0x560996c78400] mmco: unref short failure
[h264 @ 0x560996c78400] mmco: unref short failure
[h264 @ 0x55597bfec000] mmco: unref short failure
[h264 @ 0x560988192540] mmco: unref short failure
[h264 @ 0x560981ecb580] mmco: unref short failure
[h264 @ 0x56099638d6c0] mmco: unref short failure
[h264 @ 0x5601a757a640] mmco: unref short failure
[h264 @ 0x5601a757a640] mmco: unref short failure
[h264 @ 0x56209351e940] mmco: unref short failure
[h264 @ 0x56209351e940] mmco: unref short failure
[h264 @ 0x56209351e940] mmco: unref short failure
[h264 @ 0x56209351e940] mmco: unref short failure
[h264 @ 0x5601aa26a500] mmco: unref short failure
[h264 @ 0x5601b68261c0] mmco: unref short failure
[h264 @ 0x5601b68261c0] mmco: unref short failure
[h264 @ 0x55597e1bd080] mmco: unref short failure
[h264 @ 0x55597e1bd080] mmco: unref short failure
[h264 @ 0x55597e1bd080] mmco: unref short failure
[h264 @ 0x55597e1bd080] mmco: unref short failure
[h264 @ 0x55597e1bd080] mmco: unref short failure
[h264 @ 0x55597e1bd080] mmco: unref short failure
[h264 @ 0x5601c3395140] mmco: unref short failure
[h264 @ 0x562075cbc6c0] mmco: unref short failure
[h264 @ 0x562075cbc6c0] mmco: unref short failure
[h264 @ 0x56097ab5c3c0] mmco: unref short failure
[h264 @ 0x56097ab5c3c0] mmco: unref short failure
[h264 @ 0x562087bd5c00] mmco: unref short failure
[h264 @ 0x55597e939d80] mmco: unref short failure
[h264 @ 0x55597e939d80] mmco: unref short failure
[h264 @ 0x562075846700] mmco: unref short failure
[h264 @ 0x562075846700] mmco: unref short failure
[h264 @ 0x55597bf6a8c0] mmco: unref short failure
[h264 @ 0x562075354980] mmco: unref short failure
[h264 @ 0x562075354980] mmco: unref short failure
[h264 @ 0x55597eac9400] mmco: unref short failure
[h264 @ 0x56099936c840] mmco: unref short failure
[h264 @ 0x56099936c840] mmco: unref short failure
[h264 @ 0x562086cca180] mmco: unref short failure
[h264 @ 0x562086cca180] mmco: unref short failure
[h264 @ 0x562086cca180] mmco: unref short failure
[h264 @ 0x56099c5d3f00] mmco: unref short failure
[h264 @ 0x56099c5d3f00] mmco: unref short failure
[h264 @ 0x5609866c6340] mmco: unref short failure
[h264 @ 0x562087bd5740] mmco: unref short failure
 12%|█▏        | 226/1945 [56:07<14:07:45, 29.59s/it][h264 @ 0x56097b4ed8c0] mmco: unref short failure
[h264 @ 0x56097b4ed8c0] mmco: unref short failure
[h264 @ 0x5601a8d3f6c0] mmco: unref short failure
[h264 @ 0x5601a8d3f6c0] mmco: unref short failure
 12%|█▏        | 227/1945 [56:14<10:54:14, 22.85s/it][h264 @ 0x555980ea64c0] mmco: unref short failure
[h264 @ 0x555980ea64c0] mmco: unref short failure
[h264 @ 0x555980ea64c0] mmco: unref short failure
[h264 @ 0x5601b5054340] mmco: unref short failure
[h264 @ 0x5601b5054340] mmco: unref short failure
[h264 @ 0x56097c42de00] mmco: unref short failure
[h264 @ 0x56097c42de00] mmco: unref short failure
[h264 @ 0x5620787c9100] mmco: unref short failure
[h264 @ 0x5620938951c0] mmco: unref short failure
[h264 @ 0x5620938951c0] mmco: unref short failure
[h264 @ 0x562078b237c0] mmco: unref short failure
[h264 @ 0x562078b237c0] mmco: unref short failure
 12%|█▏        | 228/1945 [56:21<8:39:25, 18.15s/it] [h264 @ 0x56208d307240] mmco: unref short failure
 12%|█▏        | 229/1945 [56:29<7:12:55, 15.14s/it][h264 @ 0x55597bca96c0] mmco: unref short failure
[h264 @ 0x55597bca96c0] mmco: unref short failure
[h264 @ 0x55597f8fc940] mmco: unref short failure
[h264 @ 0x56098085e580] mmco: unref short failure
[h264 @ 0x56098085e580] mmco: unref short failure
not have audios ua_Kowav7hg.20
 12%|█▏        | 230/1945 [56:37<6:10:29, 12.96s/it] 12%|█▏        | 231/1945 [56:44<5:18:44, 11.16s/it][h264 @ 0x55597fabdb00] mmco: unref short failure
[h264 @ 0x55597fabdb00] mmco: unref short failure
 12%|█▏        | 232/1945 [56:51<4:42:15,  9.89s/it][h264 @ 0x5601a829f880] mmco: unref short failure
[h264 @ 0x5601a829f880] mmco: unref short failure
[h264 @ 0x5601a829f880] mmco: unref short failure
[h264 @ 0x5601a829f880] mmco: unref short failure
[h264 @ 0x5601bdccee40] mmco: unref short failure
[h264 @ 0x560996ff86c0] mmco: unref short failure
[h264 @ 0x560996ff86c0] mmco: unref short failure
[h264 @ 0x56208e9fbe40] mmco: unref short failure
 12%|█▏        | 233/1945 [56:58<4:21:03,  9.15s/it][h264 @ 0x5609821f9e00] mmco: unref short failure
[h264 @ 0x5601c2657f00] mmco: unref short failure
[h264 @ 0x562078b7e800] mmco: unref short failure
[h264 @ 0x562078b7e800] mmco: unref short failure
[h264 @ 0x55597fabd900] mmco: unref short failure
[h264 @ 0x55597fabd900] mmco: unref short failure
[h264 @ 0x5559845714c0] mmco: unref short failure
[h264 @ 0x5559845714c0] mmco: unref short failure
[h264 @ 0x5559800ed6c0] mmco: unref short failure
[h264 @ 0x5601a91cc440] mmco: unref short failure
[h264 @ 0x5620805a0f00] mmco: unref short failure
[h264 @ 0x5620805a0f00] mmco: unref short failure
[h264 @ 0x5620805a0f00] mmco: unref short failure
[h264 @ 0x5620805a0f00] mmco: unref short failure
[h264 @ 0x5601b2a18240] mmco: unref short failure
[h264 @ 0x5601b2a18240] mmco: unref short failure
[h264 @ 0x56208a558c80] mmco: unref short failure
[h264 @ 0x56208a558c80] mmco: unref short failure
[h264 @ 0x5601a60b8d00] mmco: unref short failure
[h264 @ 0x5601a60b8d00] mmco: unref short failure
[h264 @ 0x56098f75d100] mmco: unref short failure
[h264 @ 0x56098f75d100] mmco: unref short failure
[h264 @ 0x5601a60b8d00] mmco: unref short failure
[h264 @ 0x5601a60b8d00] mmco: unref short failure
[h264 @ 0x5601a60b8d00] mmco: unref short failure
[h264 @ 0x5601a60b8d00] mmco: unref short failure
[h264 @ 0x5601bf630040] mmco: unref short failure
[h264 @ 0x55598fc2f600] mmco: unref short failure
[h264 @ 0x5601a6410e80] mmco: unref short failure
[h264 @ 0x5601a6410e80] mmco: unref short failure
[h264 @ 0x5601a6410e80] mmco: unref short failure
[h264 @ 0x5601a6410e80] mmco: unref short failure
[h264 @ 0x56097eaa7b00] mmco: unref short failure
[h264 @ 0x56097eaa7b00] mmco: unref short failure
[h264 @ 0x5601a8b77600] mmco: unref short failure
 12%|█▏        | 234/1945 [58:08<12:58:10, 27.29s/it] 12%|█▏        | 235/1945 [58:15<10:07:11, 21.30s/it] 12%|█▏        | 236/1945 [58:23<8:08:12, 17.14s/it] [h264 @ 0x562094269980] mmco: unref short failure
 12%|█▏        | 237/1945 [58:30<6:45:16, 14.24s/it] 12%|█▏        | 238/1945 [58:37<5:43:13, 12.06s/it][h264 @ 0x5620886b73c0] mmco: unref short failure
[h264 @ 0x5620886b73c0] mmco: unref short failure
[h264 @ 0x55599462e1c0] mmco: unref short failure
[h264 @ 0x56097f750840] mmco: unref short failure
[h264 @ 0x56097f750840] mmco: unref short failure
[h264 @ 0x56097f750840] mmco: unref short failure
[h264 @ 0x56097f750840] mmco: unref short failure
 12%|█▏        | 239/1945 [58:45<5:09:34, 10.89s/it][h264 @ 0x5601a4c95a00] mmco: unref short failure
[h264 @ 0x5601a4c95a00] mmco: unref short failure
 12%|█▏        | 240/1945 [58:52<4:34:59,  9.68s/it] 12%|█▏        | 241/1945 [58:59<4:11:24,  8.85s/it][h264 @ 0x5609821cea00] mmco: unref short failure
[h264 @ 0x5601bbe2ef80] mmco: unref short failure
[h264 @ 0x5601bbe2ef80] mmco: unref short failure
[h264 @ 0x55598b7c1a40] mmco: unref short failure
[h264 @ 0x55598b7c1a40] mmco: unref short failure
[h264 @ 0x55598b7c1a40] mmco: unref short failure
[h264 @ 0x55598b7c1a40] mmco: unref short failure
[h264 @ 0x56098ffa4480] mmco: unref short failure
[h264 @ 0x562075126d40] mmco: unref short failure
[h264 @ 0x5601a7e1e640] mmco: unref short failure
[h264 @ 0x5601a7e1e640] mmco: unref short failure
[h264 @ 0x55597da0eb40] mmco: unref short failure
[h264 @ 0x55597da0eb40] mmco: unref short failure
[h264 @ 0x5601ad272340] mmco: unref short failure
[h264 @ 0x5601ad272340] mmco: unref short failure
[h264 @ 0x555988d61180] mmco: unref short failure
[h264 @ 0x555988d61180] mmco: unref short failure
[h264 @ 0x5559803f3300] mmco: unref short failure
[h264 @ 0x5559979f7600] mmco: unref short failure
[h264 @ 0x5559979f7600] mmco: unref short failure
[h264 @ 0x560986aee640] mmco: unref short failure
[h264 @ 0x560986aee640] mmco: unref short failure
[h264 @ 0x5601c8aa7900] mmco: unref short failure
[h264 @ 0x5601c8aa7900] mmco: unref short failure
[h264 @ 0x5601a81ee380] mmco: unref short failure
[h264 @ 0x56208ccd2300] mmco: unref short failure
[h264 @ 0x5601b066d1c0] mmco: unref short failure
[h264 @ 0x5601b066d1c0] mmco: unref short failure
 12%|█▏        | 242/1945 [1:00:13<13:23:42, 28.32s/it][h264 @ 0x56207b7d9780] mmco: unref short failure
 12%|█▏        | 243/1945 [1:00:21<10:31:11, 22.25s/it][h264 @ 0x5601a9f54e00] mmco: unref short failure
[h264 @ 0x5601a9f54e00] mmco: unref short failure
[h264 @ 0x5601b8897780] mmco: unref short failure
[h264 @ 0x5620880a7300] mmco: unref short failure
[h264 @ 0x5620880a7300] mmco: unref short failure
 13%|█▎        | 244/1945 [1:00:30<8:37:26, 18.25s/it] [h264 @ 0x56207c7afdc0] mmco: unref short failure
[h264 @ 0x56207c7afdc0] mmco: unref short failure
[h264 @ 0x56207c7afdc0] mmco: unref short failure
[h264 @ 0x56207c7afdc0] mmco: unref short failure
 13%|█▎        | 245/1945 [1:00:36<6:54:29, 14.63s/it][h264 @ 0x5609834ecf40] mmco: unref short failure
[h264 @ 0x5609834ecf40] mmco: unref short failure
 13%|█▎        | 246/1945 [1:00:43<5:49:01, 12.33s/it][h264 @ 0x56209351e940] mmco: unref short failure
[h264 @ 0x56209351e940] mmco: unref short failure
[h264 @ 0x56209351e940] mmco: unref short failure
[h264 @ 0x555991431880] mmco: unref short failure
 13%|█▎        | 247/1945 [1:00:50<5:08:08, 10.89s/it] 13%|█▎        | 248/1945 [1:00:58<4:38:24,  9.84s/it][h264 @ 0x55599bc82880] mmco: unref short failure
[h264 @ 0x55599bc82880] mmco: unref short failure
 13%|█▎        | 249/1945 [1:01:05<4:18:01,  9.13s/it][h264 @ 0x562091d77380] mmco: unref short failure
[h264 @ 0x56209156ac40] mmco: unref short failure
[h264 @ 0x55599bc82600] mmco: unref short failure
[h264 @ 0x55599bc82600] mmco: unref short failure
[h264 @ 0x56209156ac40] mmco: unref short failure
[h264 @ 0x5601adf9d1c0] mmco: unref short failure
[h264 @ 0x5601adf9d1c0] mmco: unref short failure
[h264 @ 0x5559953b9ac0] mmco: unref short failure
[h264 @ 0x562087bcac40] mmco: unref short failure
[h264 @ 0x562087bcac40] mmco: unref short failure
[h264 @ 0x56208ee9e0c0] mmco: unref short failure
[h264 @ 0x56099131be80] mmco: unref short failure
[h264 @ 0x56099131be80] mmco: unref short failure
[h264 @ 0x5609942c5d40] mmco: unref short failure
[h264 @ 0x56097bdb7fc0] mmco: unref short failure
[h264 @ 0x56097bdb7fc0] mmco: unref short failure
[h264 @ 0x5601a4a04700] mmco: unref short failure
[h264 @ 0x55597d39e200] mmco: unref short failure
[h264 @ 0x5601a998a540] mmco: unref short failure
[h264 @ 0x5601a998a540] mmco: unref short failure
[h264 @ 0x55597c08e3c0] mmco: unref short failure
[h264 @ 0x562094269700] mmco: unref short failure
[h264 @ 0x562094269700] mmco: unref short failure
[h264 @ 0x55597c7abd40] mmco: unref short failure
[h264 @ 0x55597c7abd40] mmco: unref short failure
[h264 @ 0x55597c7abd40] mmco: unref short failure
[h264 @ 0x55597c7abd40] mmco: unref short failure
[h264 @ 0x562085280200] mmco: unref short failure
[h264 @ 0x562085280200] mmco: unref short failure
09/08/2024 21:43:25 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.4293923377990723, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04937802255153656, 'loss_ret%tv%ta--finetune_area/loss_area': 2.30983829498291, 'loss_ret%tv%ta--finetune_area/total_loss': 5.788608551025391}
[h264 @ 0x5559800ed440] mmco: unref short failure
[h264 @ 0x5620949af000] mmco: unref short failure
 13%|█▎        | 250/1945 [1:02:12<12:29:22, 26.53s/it][h264 @ 0x55599b932100] mmco: unref short failure
[h264 @ 0x55599b932100] mmco: unref short failure
 13%|█▎        | 251/1945 [1:02:20<9:44:48, 20.71s/it] [h264 @ 0x5601c3a18680] mmco: unref short failure
 13%|█▎        | 252/1945 [1:02:27<7:54:36, 16.82s/it][h264 @ 0x5601a827c3c0] mmco: unref short failure
[h264 @ 0x56208e158640] mmco: unref short failure
[h264 @ 0x56208e158640] mmco: unref short failure
[h264 @ 0x56208e158640] mmco: unref short failure
 13%|█▎        | 253/1945 [1:02:35<6:40:26, 14.20s/it][h264 @ 0x5601b80b1740] mmco: unref short failure
 13%|█▎        | 254/1945 [1:02:44<5:57:05, 12.67s/it][h264 @ 0x5620796ac6c0] mmco: unref short failure
 13%|█▎        | 255/1945 [1:02:53<5:20:00, 11.36s/it][h264 @ 0x562093ea0280] mmco: unref short failure
[h264 @ 0x562093ea0280] mmco: unref short failure
[h264 @ 0x56098be0fb80] mmco: unref short failure
[h264 @ 0x56098be0fb80] mmco: unref short failure
[h264 @ 0x56098be0fb80] mmco: unref short failure
[h264 @ 0x56098be0fb80] mmco: unref short failure
[h264 @ 0x56098be0fb80] mmco: unref short failure
[h264 @ 0x56099131be80] mmco: unref short failure
[h264 @ 0x56099131be80] mmco: unref short failure
[h264 @ 0x5601aa81c940] mmco: unref short failure
[h264 @ 0x5620883cd280] mmco: unref short failure
[h264 @ 0x5620883cd280] mmco: unref short failure
 13%|█▎        | 256/1945 [1:03:00<4:43:35, 10.07s/it][h264 @ 0x5601bd3b7f80] mmco: unref short failure
[h264 @ 0x5601bd3b7f80] mmco: unref short failure
[h264 @ 0x5620769851c0] mmco: unref short failure
 13%|█▎        | 257/1945 [1:03:07<4:22:25,  9.33s/it][h264 @ 0x562091d82800] mmco: unref short failure
[h264 @ 0x562091d82800] mmco: unref short failure
[h264 @ 0x5601a8d639c0] mmco: unref short failure
[h264 @ 0x56098d61d600] mmco: unref short failure
[h264 @ 0x56098d61d600] mmco: unref short failure
[h264 @ 0x5601ade44c00] mmco: unref short failure
[h264 @ 0x5601ade44c00] mmco: unref short failure
[h264 @ 0x5601ade44c00] mmco: unref short failure
[h264 @ 0x5601ade44c00] mmco: unref short failure
[h264 @ 0x55598675b140] mmco: unref short failure
[h264 @ 0x55598675b140] mmco: unref short failure
[h264 @ 0x56098dd80040] mmco: unref short failure
[h264 @ 0x562088cdf8c0] mmco: unref short failure
[h264 @ 0x562088cdf8c0] mmco: unref short failure
[h264 @ 0x56097dbfdec0] mmco: unref short failure
[h264 @ 0x56097dbfdec0] mmco: unref short failure
[h264 @ 0x56097e18aac0] mmco: unref short failure
[h264 @ 0x56097e18aac0] mmco: unref short failure
[h264 @ 0x562074d29540] mmco: unref short failure
[h264 @ 0x562074d29540] mmco: unref short failure
[h264 @ 0x562074d29540] mmco: unref short failure
[h264 @ 0x562074d29540] mmco: unref short failure
[h264 @ 0x5601a827c600] mmco: unref short failure
[h264 @ 0x5601a827c600] mmco: unref short failure
[h264 @ 0x56098edba3c0] mmco: unref short failure
[h264 @ 0x56098edba3c0] mmco: unref short failure
[h264 @ 0x5609797046c0] mmco: unref short failure
[h264 @ 0x5609797046c0] mmco: unref short failure
[h264 @ 0x56099bb66ac0] mmco: unref short failure
[h264 @ 0x56099bb66ac0] mmco: unref short failure
[h264 @ 0x5601c16a3800] mmco: unref short failure
[h264 @ 0x5601c16a3800] mmco: unref short failure
 13%|█▎        | 258/1945 [1:04:18<12:55:58, 27.60s/it][h264 @ 0x555989c32f80] mmco: unref short failure
[h264 @ 0x55598294a580] mmco: unref short failure
[h264 @ 0x55598294a580] mmco: unref short failure
 13%|█▎        | 259/1945 [1:04:25<10:03:43, 21.49s/it][h264 @ 0x5609819d6200] mmco: unref short failure
 13%|█▎        | 260/1945 [1:04:32<8:02:59, 17.20s/it] [h264 @ 0x555997720640] mmco: unref short failure
[h264 @ 0x555997720640] mmco: unref short failure
[h264 @ 0x5601adf9d840] mmco: unref short failure
[h264 @ 0x55599af87e00] mmco: unref short failure
[h264 @ 0x562074d28c00] mmco: unref short failure
[h264 @ 0x562074d28c00] mmco: unref short failure
[h264 @ 0x562074d28c00] mmco: unref short failure
 13%|█▎        | 261/1945 [1:04:39<6:39:13, 14.22s/it][h264 @ 0x55597cd41780] mmco: unref short failure
[h264 @ 0x5601c7d0d640] mmco: unref short failure
[h264 @ 0x5601c7d0d640] mmco: unref short failure
[h264 @ 0x56099603c680] mmco: unref short failure
[h264 @ 0x56099603c680] mmco: unref short failure
 13%|█▎        | 262/1945 [1:04:47<5:40:50, 12.15s/it][h264 @ 0x5620916a5880] mmco: unref short failure
[h264 @ 0x5620916a5880] mmco: unref short failure
[h264 @ 0x5559854e4cc0] mmco: unref short failure
[h264 @ 0x555993327600] mmco: unref short failure
[h264 @ 0x555993327600] mmco: unref short failure
 14%|█▎        | 263/1945 [1:04:55<5:10:12, 11.07s/it][h264 @ 0x56097ce55680] mmco: unref short failure
[h264 @ 0x56097ce55680] mmco: unref short failure
[h264 @ 0x56097ce55680] mmco: unref short failure
[h264 @ 0x56097ce55680] mmco: unref short failure
[h264 @ 0x5559908e4240] mmco: unref short failure
[h264 @ 0x56098de9aac0] mmco: unref short failure
[h264 @ 0x56098de9aac0] mmco: unref short failure
 14%|█▎        | 264/1945 [1:05:03<4:43:45, 10.13s/it][h264 @ 0x5601b593c600] mmco: unref short failure
 14%|█▎        | 265/1945 [1:05:10<4:19:57,  9.28s/it][h264 @ 0x562075b79c80] mmco: unref short failure
[h264 @ 0x562075b79c80] mmco: unref short failure
[h264 @ 0x5601a963c800] mmco: unref short failure
[h264 @ 0x5620886b77c0] mmco: unref short failure
[h264 @ 0x5620886b77c0] mmco: unref short failure
[h264 @ 0x5601a8fc4f80] mmco: unref short failure
[h264 @ 0x55599447cac0] mmco: unref short failure
[h264 @ 0x55599447cac0] mmco: unref short failure
[h264 @ 0x5601ac4a16c0] mmco: unref short failure
[h264 @ 0x5601ac4a16c0] mmco: unref short failure
[h264 @ 0x5601ab770600] mmco: unref short failure
[h264 @ 0x5601ab770600] mmco: unref short failure
[h264 @ 0x5601ab770600] mmco: unref short failure
[h264 @ 0x5601ab770600] mmco: unref short failure
[h264 @ 0x560979028480] mmco: unref short failure
[h264 @ 0x55599bca6a40] mmco: unref short failure
[h264 @ 0x56207f85c780] mmco: unref short failure
[h264 @ 0x56207f85c780] mmco: unref short failure
[h264 @ 0x56097a14f800] mmco: unref short failure
[h264 @ 0x56097a14f800] mmco: unref short failure
[h264 @ 0x562077b0c280] mmco: unref short failure
[h264 @ 0x562077b0c280] mmco: unref short failure
[h264 @ 0x56207f85c580] mmco: unref short failure
[h264 @ 0x5601c7a165c0] mmco: unref short failure
[h264 @ 0x5601c7a165c0] mmco: unref short failure
[h264 @ 0x562075cbc240] mmco: unref short failure
[h264 @ 0x55597fa56f40] mmco: unref short failure
[h264 @ 0x55597fa56f40] mmco: unref short failure
[h264 @ 0x55597fa56f40] mmco: unref short failure
[h264 @ 0x55597fa56f40] mmco: unref short failure
[h264 @ 0x560982876b40] mmco: unref short failure
[h264 @ 0x560982876b40] mmco: unref short failure
[h264 @ 0x5609942c5880] mmco: unref short failure
[h264 @ 0x5609942c5880] mmco: unref short failure
 14%|█▎        | 266/1945 [1:06:15<12:01:08, 25.77s/it][h264 @ 0x56207593d500] mmco: unref short failure
[h264 @ 0x56207593d500] mmco: unref short failure
 14%|█▎        | 267/1945 [1:06:22<9:24:23, 20.18s/it] [h264 @ 0x56207db10800] mmco: unref short failure
[h264 @ 0x56207db10800] mmco: unref short failure
[h264 @ 0x562074dc8600] mmco: unref short failure
[h264 @ 0x562074dc8600] mmco: unref short failure
 14%|█▍        | 268/1945 [1:06:30<7:41:50, 16.52s/it][h264 @ 0x56207e013680] mmco: unref short failure
[h264 @ 0x56207e013680] mmco: unref short failure
[h264 @ 0x562093902440] mmco: unref short failure
[h264 @ 0x56207d14a480] mmco: unref short failure
[h264 @ 0x56207d14a480] mmco: unref short failure
[h264 @ 0x56207d14a480] mmco: unref short failure
[h264 @ 0x56207d14a480] mmco: unref short failure
[h264 @ 0x56207d14a700] mmco: unref short failure
[h264 @ 0x56207d14a700] mmco: unref short failure
 14%|█▍        | 269/1945 [1:06:37<6:27:03, 13.86s/it][h264 @ 0x55597b7173c0] mmco: unref short failure
 14%|█▍        | 270/1945 [1:06:45<5:36:30, 12.05s/it][h264 @ 0x55597ecf55c0] mmco: unref short failure
[h264 @ 0x55597ecf55c0] mmco: unref short failure
[h264 @ 0x562084dd3140] mmco: unref short failure
[h264 @ 0x562084dd3140] mmco: unref short failure
 14%|█▍        | 271/1945 [1:06:54<5:06:26, 10.98s/it][h264 @ 0x5620785aec40] mmco: unref short failure
 14%|█▍        | 272/1945 [1:07:02<4:39:29, 10.02s/it][h264 @ 0x555999cede80] mmco: unref short failure
 14%|█▍        | 273/1945 [1:07:09<4:19:44,  9.32s/it][h264 @ 0x5601a6427b40] mmco: unref short failure
[h264 @ 0x5601c7939480] mmco: unref short failure
[h264 @ 0x5601c7939480] mmco: unref short failure
[h264 @ 0x555993d8d5c0] mmco: unref short failure
[h264 @ 0x555993d8d5c0] mmco: unref short failure
[h264 @ 0x5620779ec4c0] mmco: unref short failure
[h264 @ 0x560983365600] mmco: unref short failure
[h264 @ 0x560983f8ddc0] mmco: unref short failure
[h264 @ 0x560983f8ddc0] mmco: unref short failure
[h264 @ 0x56207e316280] mmco: unref short failure
[h264 @ 0x562081600840] mmco: unref short failure
[h264 @ 0x562081600840] mmco: unref short failure
[h264 @ 0x562081600840] mmco: unref short failure
[h264 @ 0x562081600840] mmco: unref short failure
[h264 @ 0x562081600840] mmco: unref short failure
[h264 @ 0x55599cbcbcc0] mmco: unref short failure
[h264 @ 0x562075436e40] mmco: unref short failure
[h264 @ 0x562075436e40] mmco: unref short failure
[h264 @ 0x562075436e40] mmco: unref short failure
[h264 @ 0x562075436e40] mmco: unref short failure
[h264 @ 0x560989859380] mmco: unref short failure
[h264 @ 0x560989859380] mmco: unref short failure
[h264 @ 0x55597b7171c0] mmco: unref short failure
[h264 @ 0x55597b7171c0] mmco: unref short failure
[h264 @ 0x55598fbaf280] mmco: unref short failure
 14%|█▍        | 274/1945 [1:08:13<11:55:07, 25.68s/it][h264 @ 0x562076aed900] mmco: unref short failure
[h264 @ 0x55598d654400] mmco: unref short failure
 14%|█▍        | 275/1945 [1:08:21<9:27:19, 20.38s/it]  14%|█▍        | 276/1945 [1:08:30<7:52:46, 17.00s/it][h264 @ 0x55599676e680] mmco: unref short failure
[h264 @ 0x55599676e680] mmco: unref short failure
[h264 @ 0x5601c548d8c0] mmco: unref short failure
[h264 @ 0x5601c6bfbc00] mmco: unref short failure
 14%|█▍        | 277/1945 [1:08:38<6:34:56, 14.21s/it] 14%|█▍        | 278/1945 [1:08:46<5:42:59, 12.35s/it][h264 @ 0x5601a6c1cdc0] mmco: unref short failure
[h264 @ 0x5601a6c1cdc0] mmco: unref short failure
 14%|█▍        | 279/1945 [1:08:54<5:04:18, 10.96s/it][h264 @ 0x562074cbfa80] mmco: unref short failure
[h264 @ 0x5620859ca9c0] mmco: unref short failure
[h264 @ 0x5620859ca9c0] mmco: unref short failure
[h264 @ 0x562075b1ba00] mmco: unref short failure
[h264 @ 0x562075b1ba00] mmco: unref short failure
[h264 @ 0x5601c378a280] mmco: unref short failure
[h264 @ 0x562093ea0700] mmco: unref short failure
 14%|█▍        | 280/1945 [1:09:02<4:39:34, 10.07s/it][h264 @ 0x555988f37840] mmco: unref short failure
 14%|█▍        | 281/1945 [1:09:09<4:20:47,  9.40s/it][h264 @ 0x562088ce5d80] mmco: unref short failure
[h264 @ 0x562088ce5d80] mmco: unref short failure
[h264 @ 0x55597bf6ad40] mmco: unref short failure
[h264 @ 0x55597bf6ad40] mmco: unref short failure
[h264 @ 0x560981a71600] mmco: unref short failure
[h264 @ 0x562087611b00] mmco: unref short failure
[h264 @ 0x5601c2f6ef00] mmco: unref short failure
[h264 @ 0x55597f3f98c0] mmco: unref short failure
[h264 @ 0x55597f3f98c0] mmco: unref short failure
[h264 @ 0x55598001a180] mmco: unref short failure
[h264 @ 0x562085280200] mmco: unref short failure
[h264 @ 0x562085280200] mmco: unref short failure
 14%|█▍        | 282/1945 [1:10:13<11:54:12, 25.77s/it][h264 @ 0x55597f3f9b40] mmco: unref short failure
[h264 @ 0x55597f3f9b40] mmco: unref short failure
[h264 @ 0x560987fb8f40] mmco: unref short failure
[h264 @ 0x562085134a40] mmco: unref short failure
[h264 @ 0x560993498e80] mmco: unref short failure
[h264 @ 0x560993498e80] mmco: unref short failure
 15%|█▍        | 283/1945 [1:10:23<9:40:14, 20.95s/it]  15%|█▍        | 284/1945 [1:10:30<7:46:58, 16.87s/it][h264 @ 0x5559939020c0] mmco: unref short failure
[h264 @ 0x56209396c180] mmco: unref short failure
 15%|█▍        | 285/1945 [1:10:38<6:25:26, 13.93s/it][h264 @ 0x55598901a140] mmco: unref short failure
 15%|█▍        | 286/1945 [1:10:45<5:28:32, 11.88s/it][h264 @ 0x562079b5bac0] mmco: unref short failure
[h264 @ 0x56208298eac0] mmco: unref short failure
[h264 @ 0x5601aa166bc0] mmco: unref short failure
[h264 @ 0x5601aa166bc0] mmco: unref short failure
[h264 @ 0x5620751dd480] mmco: unref short failure
 15%|█▍        | 287/1945 [1:10:52<4:51:06, 10.53s/it][h264 @ 0x562075bee8c0] mmco: unref short failure
[h264 @ 0x562094837c00] mmco: unref short failure
[h264 @ 0x55598001a180] mmco: unref short failure
 15%|█▍        | 288/1945 [1:10:59<4:20:31,  9.43s/it][h264 @ 0x562094236800] mmco: unref short failure
[h264 @ 0x562094236800] mmco: unref short failure
 15%|█▍        | 289/1945 [1:11:07<4:07:03,  8.95s/it][h264 @ 0x56098825bc40] mmco: unref short failure
[h264 @ 0x56098825bc40] mmco: unref short failure
[h264 @ 0x55599b7e5540] mmco: unref short failure
[h264 @ 0x5620780fa940] mmco: unref short failure
[h264 @ 0x5620918f3280] mmco: unref short failure
[h264 @ 0x55598d654ac0] mmco: unref short failure
[h264 @ 0x55598d654ac0] mmco: unref short failure
[h264 @ 0x55598d654ac0] mmco: unref short failure
[h264 @ 0x55598d654ac0] mmco: unref short failure
[h264 @ 0x55598d654ac0] mmco: unref short failure
[h264 @ 0x55598d654ac0] mmco: unref short failure
[h264 @ 0x5609999e8a80] mmco: unref short failure
[h264 @ 0x5609999e8a80] mmco: unref short failure
[h264 @ 0x5601c12c16c0] mmco: unref short failure
[h264 @ 0x5601c12c16c0] mmco: unref short failure
[h264 @ 0x5601bb282b80] mmco: unref short failure
[h264 @ 0x5601bb282b80] mmco: unref short failure
[h264 @ 0x5601ba82bf80] mmco: unref short failure
[h264 @ 0x5601ba82bf80] mmco: unref short failure
[h264 @ 0x56098b021300] mmco: unref short failure
[h264 @ 0x562075cbc040] mmco: unref short failure
[h264 @ 0x56099c18d9c0] mmco: unref short failure
[h264 @ 0x56208dc2fb40] mmco: unref short failure
[h264 @ 0x5601c41cd040] mmco: unref short failure
[h264 @ 0x5601c41cd040] mmco: unref short failure
[h264 @ 0x562079231a00] mmco: unref short failure
[h264 @ 0x562079231a00] mmco: unref short failure
 15%|█▍        | 290/1945 [1:12:17<12:33:20, 27.31s/it][h264 @ 0x5601c3c0a4c0] mmco: unref short failure
[h264 @ 0x5601c3c0a4c0] mmco: unref short failure
 15%|█▍        | 291/1945 [1:12:24<9:45:02, 21.22s/it]  15%|█▌        | 292/1945 [1:12:31<7:49:29, 17.04s/it][h264 @ 0x55597f930400] mmco: unref short failure
 15%|█▌        | 293/1945 [1:12:40<6:42:07, 14.61s/it][h264 @ 0x5620751bfa80] mmco: unref short failure
[h264 @ 0x5620751bfa80] mmco: unref short failure
[h264 @ 0x562083e93200] mmco: unref short failure
[h264 @ 0x562083e93200] mmco: unref short failure
[h264 @ 0x55599aa6f2c0] mmco: unref short failure
[h264 @ 0x55599691bbc0] mmco: unref short failure
[h264 @ 0x55599691bbc0] mmco: unref short failure
 15%|█▌        | 294/1945 [1:12:53<6:29:13, 14.14s/it][h264 @ 0x562083e93680] mmco: unref short failure
[h264 @ 0x562083e93680] mmco: unref short failure
[h264 @ 0x5601a94237c0] mmco: unref short failure
 15%|█▌        | 295/1945 [1:13:00<5:27:23, 11.90s/it][h264 @ 0x56098a7cab80] mmco: unref short failure
[h264 @ 0x56098a7cab80] mmco: unref short failure
[h264 @ 0x56098f406e80] mmco: unref short failure
[h264 @ 0x56098f406e80] mmco: unref short failure
[h264 @ 0x5559885cf800] mmco: unref short failure
[h264 @ 0x5559885cf800] mmco: unref short failure
[h264 @ 0x5559885cf800] mmco: unref short failure
[h264 @ 0x5559885cf800] mmco: unref short failure
[h264 @ 0x56098aaf0c80] mmco: unref short failure
[h264 @ 0x55597cdaa0c0] mmco: unref short failure
[h264 @ 0x55597cdaa0c0] mmco: unref short failure
 15%|█▌        | 296/1945 [1:13:06<4:41:32, 10.24s/it][h264 @ 0x560985430e00] mmco: unref short failure
 15%|█▌        | 297/1945 [1:13:13<4:14:11,  9.25s/it][h264 @ 0x56208f780780] mmco: unref short failure
[h264 @ 0x56208f780780] mmco: unref short failure
[h264 @ 0x560994d2e680] mmco: unref short failure
[h264 @ 0x56208b4e9e80] mmco: unref short failure
[h264 @ 0x56208b4e9e80] mmco: unref short failure
[h264 @ 0x56207815f4c0] mmco: unref short failure
[h264 @ 0x56207815f4c0] mmco: unref short failure
[h264 @ 0x56098e7abcc0] mmco: unref short failure
[h264 @ 0x56207c9f48c0] mmco: unref short failure
[h264 @ 0x56208d069180] mmco: unref short failure
[h264 @ 0x56208d069180] mmco: unref short failure
[h264 @ 0x555992996f80] mmco: unref short failure
[h264 @ 0x555992996f80] mmco: unref short failure
[h264 @ 0x562089793340] mmco: unref short failure
[h264 @ 0x5620829944c0] mmco: unref short failure
[h264 @ 0x560987afa700] mmco: unref short failure
[h264 @ 0x55597b68f9c0] mmco: unref short failure
[h264 @ 0x5559952fe800] mmco: unref short failure
[h264 @ 0x5601befdc300] mmco: unref short failure
[h264 @ 0x562085a2c040] mmco: unref short failure
[h264 @ 0x562085a2c040] mmco: unref short failure
[h264 @ 0x555992996f80] mmco: unref short failure
[h264 @ 0x555992996f80] mmco: unref short failure
[h264 @ 0x562085a2c040] mmco: unref short failure
[h264 @ 0x562085a2c040] mmco: unref short failure
[h264 @ 0x555992996f80] mmco: unref short failure
[h264 @ 0x555992996f80] mmco: unref short failure
[h264 @ 0x562083e952c0] mmco: unref short failure
[h264 @ 0x562083e952c0] mmco: unref short failure
[h264 @ 0x5609853daf40] mmco: unref short failure
[h264 @ 0x560993ce1880] mmco: unref short failure
 15%|█▌        | 298/1945 [1:14:18<11:53:48, 26.00s/it] 15%|█▌        | 299/1945 [1:14:25<9:18:21, 20.35s/it] 09/08/2024 21:55:43 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/08/2024 21:55:43 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5601ba6fa580] mmco: unref short failure
[h264 @ 0x5601ba6fa580] mmco: unref short failure
[h264 @ 0x5601c3aa23c0] mmco: unref short failure
[h264 @ 0x56097c281b00] mmco: unref short failure
[h264 @ 0x56097c281b00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55598fa46dc0] mmco: unref short failure
[h264 @ 0x55598fa46dc0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x56207a2d1d40] mmco: unref short failure
[h264 @ 0x56207a2d1d40] mmco: unref short failure
[h264 @ 0x55599d350500] mmco: unref short failure
[h264 @ 0x55599d350500] mmco: unref short failure
[h264 @ 0x560979b28540] mmco: unref short failure
[h264 @ 0x5601a74ed9c0] mmco: unref short failure
[h264 @ 0x5601a74ed9c0] mmco: unref short failure
[h264 @ 0x5601a74ed9c0] mmco: unref short failure
[h264 @ 0x5601a74ed9c0] mmco: unref short failure
[h264 @ 0x5601a74ed9c0] mmco: unref short failure
[h264 @ 0x5601a74ed9c0] mmco: unref short failure
[h264 @ 0x56097cb387c0] mmco: unref short failure
[h264 @ 0x55597eac9700] mmco: unref short failure
[h264 @ 0x55597eac9700] mmco: unref short failure
[h264 @ 0x55597eac9700] mmco: unref short failure
[h264 @ 0x55597eac9700] mmco: unref short failure
[h264 @ 0x562085280200] mmco: unref short failure
[h264 @ 0x56098fdfd8c0] mmco: unref short failure
[h264 @ 0x5559902b2b40] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:28,  7.67it/s][A
  1%|          | 2/221 [00:00<01:01,  3.54it/s][A
  1%|▏         | 3/221 [00:00<01:03,  3.44it/s][A
  2%|▏         | 4/221 [00:00<00:50,  4.31it/s][A
  2%|▏         | 5/221 [00:01<00:45,  4.76it/s][A
  3%|▎         | 6/221 [00:01<00:47,  4.52it/s][A
  3%|▎         | 7/221 [00:01<00:57,  3.69it/s][A
  4%|▎         | 8/221 [00:01<00:53,  4.02it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.74it/s][A
  5%|▍         | 10/221 [00:02<01:19,  2.64it/s][A
  5%|▍         | 11/221 [00:03<01:07,  3.10it/s][A
  5%|▌         | 12/221 [00:03<01:03,  3.30it/s][A
  6%|▌         | 13/221 [00:03<01:12,  2.87it/s][A
  6%|▋         | 14/221 [00:04<01:29,  2.30it/s][A
  7%|▋         | 15/221 [00:04<01:16,  2.70it/s][A
  7%|▋         | 16/221 [00:05<01:31,  2.25it/s][A[h264 @ 0x5601a52d13c0] mmco: unref short failure

  8%|▊         | 17/221 [00:05<01:42,  2.00it/s][A
  8%|▊         | 18/221 [00:06<01:31,  2.21it/s][A
  9%|▊         | 19/221 [00:06<01:14,  2.71it/s][A
  9%|▉         | 20/221 [00:06<01:12,  2.78it/s][A
 10%|▉         | 21/221 [00:06<01:03,  3.15it/s][A
 10%|▉         | 22/221 [00:07<00:54,  3.68it/s][A
 11%|█         | 24/221 [00:07<00:44,  4.45it/s][A
 11%|█▏        | 25/221 [00:07<00:42,  4.59it/s][A
 12%|█▏        | 26/221 [00:07<00:47,  4.14it/s][A
 13%|█▎        | 28/221 [00:08<00:48,  4.02it/s][A
 13%|█▎        | 29/221 [00:09<01:27,  2.19it/s][A
 14%|█▎        | 30/221 [00:09<01:18,  2.42it/s][A
 14%|█▍        | 31/221 [00:10<01:11,  2.64it/s][A
 15%|█▍        | 33/221 [00:10<00:54,  3.46it/s][A
 15%|█▌        | 34/221 [00:10<00:48,  3.82it/s][A
 16%|█▌        | 35/221 [00:10<00:46,  4.03it/s][A
 16%|█▋        | 36/221 [00:11<00:50,  3.65it/s][A
 17%|█▋        | 37/221 [00:11<00:54,  3.40it/s][A
 17%|█▋        | 38/221 [00:11<00:58,  3.12it/s][A
 18%|█▊        | 39/221 [00:12<00:55,  3.31it/s][A
 18%|█▊        | 40/221 [00:12<00:53,  3.38it/s][A
 19%|█▊        | 41/221 [00:12<00:49,  3.67it/s][A
 19%|█▉        | 42/221 [00:12<00:45,  3.94it/s][A
 19%|█▉        | 43/221 [00:13<00:39,  4.56it/s][A
 20%|█▉        | 44/221 [00:13<00:34,  5.13it/s][A
 20%|██        | 45/221 [00:13<00:37,  4.68it/s][A
 21%|██        | 46/221 [00:13<00:40,  4.35it/s][A
 21%|██▏       | 47/221 [00:14<00:43,  3.99it/s][A
 22%|██▏       | 48/221 [00:14<00:37,  4.66it/s][A
 22%|██▏       | 49/221 [00:14<00:40,  4.23it/s][A
 23%|██▎       | 50/221 [00:15<00:54,  3.12it/s][A
 23%|██▎       | 51/221 [00:15<00:47,  3.54it/s][A
 24%|██▎       | 52/221 [00:15<01:03,  2.68it/s][A
 24%|██▍       | 53/221 [00:15<00:51,  3.28it/s][A
 24%|██▍       | 54/221 [00:16<00:53,  3.13it/s][A
 25%|██▍       | 55/221 [00:16<00:57,  2.90it/s][A
 25%|██▌       | 56/221 [00:16<00:50,  3.29it/s][A
 26%|██▌       | 57/221 [00:17<00:53,  3.08it/s][A
 26%|██▌       | 58/221 [00:17<00:49,  3.26it/s][A
 27%|██▋       | 59/221 [00:17<00:44,  3.60it/s][A
 27%|██▋       | 60/221 [00:18<00:57,  2.81it/s][A
 28%|██▊       | 61/221 [00:18<00:48,  3.32it/s][A
 28%|██▊       | 62/221 [00:18<00:51,  3.08it/s][A
 29%|██▊       | 63/221 [00:19<00:49,  3.20it/s][A
 29%|██▉       | 64/221 [00:19<00:46,  3.38it/s][A
 29%|██▉       | 65/221 [00:19<00:40,  3.90it/s][A
 30%|██▉       | 66/221 [00:19<00:40,  3.86it/s][A
 30%|███       | 67/221 [00:20<00:46,  3.29it/s][A
 31%|███       | 68/221 [00:20<00:40,  3.74it/s][A
 31%|███       | 69/221 [00:20<00:48,  3.14it/s][A
 32%|███▏      | 70/221 [00:21<00:43,  3.45it/s][A
 32%|███▏      | 71/221 [00:21<00:46,  3.25it/s][A
 33%|███▎      | 72/221 [00:21<00:50,  2.98it/s][A
 33%|███▎      | 73/221 [00:22<00:56,  2.64it/s][A
 33%|███▎      | 74/221 [00:22<00:47,  3.12it/s][A
 34%|███▍      | 75/221 [00:22<00:48,  3.03it/s][A
 34%|███▍      | 76/221 [00:23<00:41,  3.49it/s][A
 35%|███▍      | 77/221 [00:23<00:49,  2.91it/s][A
 35%|███▌      | 78/221 [00:23<00:43,  3.26it/s][A
 36%|███▌      | 79/221 [00:24<00:50,  2.80it/s][A
 36%|███▌      | 80/221 [00:24<00:47,  2.97it/s][A
 37%|███▋      | 81/221 [00:24<00:40,  3.47it/s][A
 37%|███▋      | 82/221 [00:25<00:44,  3.12it/s][A
 38%|███▊      | 83/221 [00:26<01:47,  1.28it/s][A
 38%|███▊      | 84/221 [00:27<01:34,  1.45it/s][A
 38%|███▊      | 85/221 [00:27<01:13,  1.85it/s][A
 39%|███▉      | 86/221 [00:27<00:57,  2.34it/s][A
 39%|███▉      | 87/221 [00:28<01:00,  2.21it/s][A
 40%|███▉      | 88/221 [00:28<00:59,  2.24it/s][A
 40%|████      | 89/221 [00:28<00:51,  2.54it/s][A
 41%|████      | 90/221 [00:29<00:55,  2.34it/s][A[h264 @ 0x5601bde49380] mmco: unref short failure
[h264 @ 0x5601bde49380] mmco: unref short failure

 41%|████      | 91/221 [00:29<00:48,  2.66it/s][A
 42%|████▏     | 92/221 [00:30<00:47,  2.69it/s][A
 42%|████▏     | 93/221 [00:30<00:41,  3.07it/s][A
 43%|████▎     | 94/221 [00:30<00:38,  3.29it/s][A
 43%|████▎     | 95/221 [00:31<00:56,  2.23it/s][A
 43%|████▎     | 96/221 [00:31<00:47,  2.64it/s][A
 44%|████▍     | 97/221 [00:31<00:41,  3.00it/s][A
 44%|████▍     | 98/221 [00:32<00:46,  2.64it/s][A
 45%|████▍     | 99/221 [00:32<00:36,  3.33it/s][A
 45%|████▌     | 100/221 [00:32<00:36,  3.35it/s][A
 46%|████▌     | 101/221 [00:32<00:31,  3.75it/s][A
 46%|████▌     | 102/221 [00:33<00:27,  4.34it/s][A
 47%|████▋     | 103/221 [00:33<00:24,  4.88it/s][A
 47%|████▋     | 104/221 [00:33<00:20,  5.70it/s][A
 48%|████▊     | 105/221 [00:33<00:25,  4.50it/s][A
 48%|████▊     | 106/221 [00:33<00:30,  3.78it/s][A
 48%|████▊     | 107/221 [00:34<00:26,  4.24it/s][A
 49%|████▉     | 108/221 [00:34<00:28,  3.96it/s][A
 49%|████▉     | 109/221 [00:34<00:25,  4.40it/s][A
 50%|████▉     | 110/221 [00:34<00:23,  4.63it/s][A
 50%|█████     | 111/221 [00:35<00:28,  3.82it/s][A
 51%|█████     | 112/221 [00:35<00:27,  3.95it/s][A
 51%|█████     | 113/221 [00:35<00:29,  3.70it/s][A
 52%|█████▏    | 115/221 [00:35<00:19,  5.46it/s][A
 52%|█████▏    | 116/221 [00:36<00:22,  4.70it/s][A
 53%|█████▎    | 117/221 [00:36<00:25,  4.14it/s][A
 53%|█████▎    | 118/221 [00:36<00:26,  3.86it/s][A
 54%|█████▍    | 119/221 [00:37<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:37<00:27,  3.68it/s][A
 55%|█████▍    | 121/221 [00:37<00:23,  4.18it/s][A
 55%|█████▌    | 122/221 [00:37<00:22,  4.44it/s][A
 56%|█████▌    | 123/221 [00:37<00:19,  4.93it/s][A
 56%|█████▌    | 124/221 [00:38<00:22,  4.35it/s][A
 57%|█████▋    | 125/221 [00:38<00:24,  3.86it/s][A
 57%|█████▋    | 126/221 [00:38<00:20,  4.59it/s][A
 57%|█████▋    | 127/221 [00:38<00:20,  4.50it/s][A
 58%|█████▊    | 128/221 [00:39<00:22,  4.13it/s][A[h264 @ 0x555981297880] mmco: unref short failure

 59%|█████▉    | 130/221 [00:39<00:21,  4.33it/s][A
 59%|█████▉    | 131/221 [00:39<00:23,  3.84it/s][A
 60%|█████▉    | 132/221 [00:40<00:24,  3.68it/s][A
 60%|██████    | 133/221 [00:40<00:24,  3.59it/s][A
 61%|██████    | 134/221 [00:40<00:23,  3.70it/s][A
 61%|██████    | 135/221 [00:40<00:20,  4.16it/s][A
 62%|██████▏   | 136/221 [00:41<00:19,  4.32it/s][A
 62%|██████▏   | 137/221 [00:41<00:17,  4.82it/s][A
 62%|██████▏   | 138/221 [00:41<00:19,  4.17it/s][A
 63%|██████▎   | 139/221 [00:41<00:17,  4.63it/s][A
 63%|██████▎   | 140/221 [00:42<00:18,  4.39it/s][A
 64%|██████▍   | 141/221 [00:42<00:19,  4.18it/s][A
 64%|██████▍   | 142/221 [00:42<00:20,  3.81it/s][A
 65%|██████▍   | 143/221 [00:42<00:20,  3.79it/s][A
 65%|██████▌   | 144/221 [00:43<00:19,  3.92it/s][A
 66%|██████▌   | 145/221 [00:43<00:17,  4.37it/s][A
 66%|██████▌   | 146/221 [00:43<00:14,  5.16it/s][A
 67%|██████▋   | 147/221 [00:43<00:14,  4.98it/s][A
 67%|██████▋   | 148/221 [00:44<00:22,  3.32it/s][A
 67%|██████▋   | 149/221 [00:44<00:22,  3.23it/s][A
 68%|██████▊   | 150/221 [00:44<00:22,  3.13it/s][A
 68%|██████▊   | 151/221 [00:45<00:22,  3.09it/s][A
 69%|██████▉   | 152/221 [00:45<00:27,  2.53it/s][A
 69%|██████▉   | 153/221 [00:45<00:24,  2.82it/s][A
 70%|██████▉   | 154/221 [00:46<00:21,  3.11it/s][A
 70%|███████   | 155/221 [00:46<00:18,  3.64it/s][A
 71%|███████   | 156/221 [00:46<00:16,  3.97it/s][A
 71%|███████   | 157/221 [00:46<00:15,  4.09it/s][A
 71%|███████▏  | 158/221 [00:46<00:14,  4.48it/s][A
 72%|███████▏  | 160/221 [00:47<00:11,  5.40it/s][A
 73%|███████▎  | 161/221 [00:47<00:12,  4.93it/s][A
 74%|███████▍  | 163/221 [00:47<00:11,  5.07it/s][A
 74%|███████▍  | 164/221 [00:48<00:12,  4.59it/s][A
 75%|███████▍  | 165/221 [00:48<00:11,  4.82it/s][A
 75%|███████▌  | 166/221 [00:48<00:11,  4.94it/s][A
 76%|███████▌  | 167/221 [00:48<00:09,  5.46it/s][A
 76%|███████▌  | 168/221 [00:48<00:10,  5.29it/s][A
 76%|███████▋  | 169/221 [00:49<00:08,  5.87it/s][A
 77%|███████▋  | 170/221 [00:49<00:09,  5.32it/s][A
 77%|███████▋  | 171/221 [00:49<00:14,  3.53it/s][A
 78%|███████▊  | 172/221 [00:49<00:11,  4.20it/s][A
 78%|███████▊  | 173/221 [00:50<00:14,  3.30it/s][A
 79%|███████▊  | 174/221 [00:50<00:15,  3.06it/s][A
 79%|███████▉  | 175/221 [00:51<00:16,  2.79it/s][A
 80%|███████▉  | 176/221 [00:51<00:12,  3.47it/s][A
 80%|████████  | 177/221 [00:51<00:11,  3.83it/s][A
 81%|████████  | 178/221 [00:51<00:13,  3.22it/s][A
 81%|████████  | 179/221 [00:52<00:12,  3.43it/s][A
 81%|████████▏ | 180/221 [00:52<00:10,  3.93it/s][A
 82%|████████▏ | 181/221 [00:52<00:08,  4.61it/s][A
 82%|████████▏ | 182/221 [00:52<00:08,  4.62it/s][A
 83%|████████▎ | 183/221 [00:52<00:07,  5.02it/s][A
 83%|████████▎ | 184/221 [00:53<00:08,  4.36it/s][A
 84%|████████▍ | 186/221 [00:53<00:06,  5.45it/s][A
 85%|████████▍ | 187/221 [00:53<00:07,  4.52it/s][A
 85%|████████▌ | 188/221 [00:54<00:07,  4.19it/s][A
 86%|████████▌ | 189/221 [00:54<00:08,  3.85it/s][A
 86%|████████▌ | 190/221 [00:54<00:08,  3.83it/s][A
 86%|████████▋ | 191/221 [00:54<00:07,  4.27it/s][A
 87%|████████▋ | 192/221 [00:54<00:06,  4.73it/s][A
 87%|████████▋ | 193/221 [00:55<00:05,  5.58it/s][A
 88%|████████▊ | 194/221 [00:55<00:07,  3.68it/s][A
 88%|████████▊ | 195/221 [00:55<00:06,  4.16it/s][A
 89%|████████▊ | 196/221 [00:56<00:07,  3.13it/s][A
 89%|████████▉ | 197/221 [00:56<00:07,  3.24it/s][A
 90%|████████▉ | 198/221 [00:56<00:06,  3.67it/s][A
 90%|█████████ | 199/221 [00:56<00:05,  3.95it/s][A
 90%|█████████ | 200/221 [00:57<00:05,  4.08it/s][A
 91%|█████████ | 201/221 [00:57<00:04,  4.46it/s][A
 91%|█████████▏| 202/221 [00:57<00:05,  3.44it/s][A
 92%|█████████▏| 203/221 [00:57<00:04,  3.95it/s][A
 92%|█████████▏| 204/221 [00:58<00:05,  3.15it/s][A
 93%|█████████▎| 205/221 [00:58<00:04,  3.62it/s][A
 93%|█████████▎| 206/221 [00:58<00:04,  3.09it/s][A
 94%|█████████▎| 207/221 [00:59<00:03,  3.53it/s][A
 94%|█████████▍| 208/221 [00:59<00:03,  4.19it/s][A
 95%|█████████▍| 209/221 [00:59<00:02,  4.41it/s][A
 95%|█████████▌| 210/221 [00:59<00:02,  5.15it/s][A
 95%|█████████▌| 211/221 [00:59<00:02,  4.18it/s][A
 96%|█████████▌| 212/221 [01:00<00:02,  4.21it/s][A
 96%|█████████▋| 213/221 [01:00<00:01,  4.30it/s][A
 97%|█████████▋| 214/221 [01:00<00:01,  5.05it/s][A
 97%|█████████▋| 215/221 [01:00<00:01,  5.11it/s][A
 98%|█████████▊| 216/221 [01:01<00:01,  4.43it/s][A
 98%|█████████▊| 217/221 [01:01<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [01:01<00:00,  3.80it/s][A
 99%|█████████▉| 219/221 [01:01<00:00,  3.44it/s][A
100%|█████████▉| 220/221 [01:02<00:00,  3.21it/s][A
100%|██████████| 221/221 [01:02<00:00,  3.49it/s][A100%|██████████| 221/221 [01:02<00:00,  3.53it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.77it/s][A
  1%|          | 2/221 [00:00<00:58,  3.78it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.78it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.78it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.78it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.78it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.78it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.78it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.78it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.78it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.78it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.78it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.78it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.77it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.77it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.78it/s][A
  8%|▊         | 17/221 [00:04<00:54,  3.78it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.78it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.78it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.78it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.78it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.78it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.78it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.78it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.78it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.78it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 28/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.78it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.78it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.78it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.78it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.78it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.78it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.78it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.78it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.78it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.78it/s][A
 19%|█▉        | 43/221 [00:11<00:47,  3.78it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.78it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.78it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.78it/s][A
 21%|██▏       | 47/221 [00:12<00:46,  3.78it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.78it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.78it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.78it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.78it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.78it/s][A
 24%|██▍       | 53/221 [00:14<00:44,  3.78it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.78it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.78it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.78it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.78it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.78it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.78it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.78it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.78it/s][A
 28%|██▊       | 62/221 [00:16<00:42,  3.78it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.78it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.78it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.78it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.78it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.78it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.78it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.78it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.78it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.78it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.78it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.78it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.78it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.78it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.78it/s][A
 37%|███▋      | 81/221 [00:21<00:37,  3.78it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.78it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.78it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.78it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 87/221 [00:23<00:35,  3.78it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.78it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.78it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.78it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.78it/s][A
 43%|████▎     | 96/221 [00:25<00:33,  3.78it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.78it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.78it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.78it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.78it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.78it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.78it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.78it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 106/221 [00:28<00:30,  3.78it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.78it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.78it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.78it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.78it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.78it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.78it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.78it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 115/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.78it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.78it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.78it/s][A
 55%|█████▍    | 121/221 [00:32<00:26,  3.78it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.78it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.78it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.78it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.78it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.78it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 134/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 140/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.78it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.78it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.78it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.78it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.78it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.78it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.78it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.78it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.78it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.78it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.78it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.78it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.78it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.78it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.78it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.78it/s][A
 76%|███████▌  | 168/221 [00:44<00:14,  3.78it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.78it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.78it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.78it/s][A
 79%|███████▊  | 174/221 [00:46<00:12,  3.78it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.78it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.78it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.78it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.78it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.78it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.78it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.78it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.78it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.78it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 193/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [00:56<00:02,  3.78it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.78it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.78it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.78it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.78it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.78it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.78it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.78it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:43,  5.02it/s][A
  1%|          | 2/221 [00:00<00:53,  4.07it/s][A
  1%|▏         | 3/221 [00:00<00:51,  4.22it/s][A
  2%|▏         | 4/221 [00:00<00:48,  4.47it/s][A
  2%|▏         | 5/221 [00:01<00:43,  4.92it/s][A
  3%|▎         | 6/221 [00:01<00:36,  5.92it/s][A
  3%|▎         | 7/221 [00:01<00:39,  5.48it/s][A
  4%|▎         | 8/221 [00:01<00:38,  5.55it/s][A
  4%|▍         | 9/221 [00:01<00:36,  5.77it/s][A
  5%|▍         | 10/221 [00:02<01:10,  3.00it/s][A
  5%|▍         | 11/221 [00:02<00:59,  3.54it/s][A
  5%|▌         | 12/221 [00:02<00:49,  4.26it/s][A
  6%|▌         | 13/221 [00:03<01:16,  2.72it/s][A
  7%|▋         | 15/221 [00:03<00:53,  3.82it/s][A
  7%|▋         | 16/221 [00:03<00:56,  3.63it/s][A
  8%|▊         | 17/221 [00:04<01:18,  2.60it/s][A
  8%|▊         | 18/221 [00:04<01:10,  2.86it/s][A
  9%|▊         | 19/221 [00:05<01:03,  3.17it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:43,  4.56it/s][A
 10%|▉         | 22/221 [00:05<00:43,  4.61it/s][A
 10%|█         | 23/221 [00:05<00:36,  5.40it/s][A
 11%|█         | 24/221 [00:05<00:37,  5.19it/s][A
 11%|█▏        | 25/221 [00:06<00:37,  5.29it/s][A
 12%|█▏        | 26/221 [00:06<00:40,  4.85it/s][A
 13%|█▎        | 28/221 [00:06<00:38,  5.01it/s][A
 13%|█▎        | 29/221 [00:06<00:36,  5.19it/s][A
 14%|█▎        | 30/221 [00:07<00:41,  4.62it/s][A
 14%|█▍        | 31/221 [00:07<00:38,  4.98it/s][A
 15%|█▍        | 33/221 [00:07<00:31,  5.90it/s][A
 16%|█▌        | 35/221 [00:07<00:31,  6.00it/s][A
 16%|█▋        | 36/221 [00:08<00:37,  4.94it/s][A
 17%|█▋        | 37/221 [00:08<00:38,  4.80it/s][A
 17%|█▋        | 38/221 [00:08<00:43,  4.20it/s][A
 18%|█▊        | 39/221 [00:09<00:40,  4.49it/s][A
 18%|█▊        | 40/221 [00:09<00:39,  4.60it/s][A
 19%|█▊        | 41/221 [00:09<00:34,  5.14it/s][A
 19%|█▉        | 42/221 [00:09<00:50,  3.56it/s][A
 19%|█▉        | 43/221 [00:10<01:03,  2.82it/s][A
 20%|█▉        | 44/221 [00:10<01:04,  2.74it/s][A
 20%|██        | 45/221 [00:10<00:55,  3.19it/s][A
 21%|██        | 46/221 [00:11<00:45,  3.86it/s][A
 21%|██▏       | 47/221 [00:11<00:47,  3.63it/s][A
 22%|██▏       | 48/221 [00:11<00:40,  4.28it/s][A
 22%|██▏       | 49/221 [00:11<00:39,  4.41it/s][A
 23%|██▎       | 50/221 [00:11<00:39,  4.29it/s][A
 24%|██▎       | 52/221 [00:12<00:32,  5.17it/s][A
 24%|██▍       | 53/221 [00:12<00:29,  5.73it/s][A
 24%|██▍       | 54/221 [00:13<00:58,  2.86it/s][A
 25%|██▍       | 55/221 [00:13<00:57,  2.90it/s][A
 25%|██▌       | 56/221 [00:13<00:47,  3.49it/s][A
 26%|██▌       | 57/221 [00:13<00:44,  3.70it/s][A
 26%|██▌       | 58/221 [00:14<00:43,  3.72it/s][A
 27%|██▋       | 59/221 [00:14<00:42,  3.81it/s][A
 27%|██▋       | 60/221 [00:14<00:52,  3.09it/s][A
 28%|██▊       | 61/221 [00:15<00:45,  3.53it/s][A
 28%|██▊       | 62/221 [00:15<00:44,  3.55it/s][A
 29%|██▊       | 63/221 [00:15<00:39,  4.00it/s][A
 29%|██▉       | 64/221 [00:15<00:44,  3.55it/s][A
 29%|██▉       | 65/221 [00:16<00:36,  4.27it/s][A
 30%|██▉       | 66/221 [00:16<00:52,  2.95it/s][A
 30%|███       | 67/221 [00:17<00:53,  2.85it/s][A
 31%|███       | 68/221 [00:17<00:43,  3.51it/s][A
 31%|███       | 69/221 [00:17<01:03,  2.39it/s][A
 32%|███▏      | 70/221 [00:18<00:50,  2.96it/s][A
 32%|███▏      | 71/221 [00:18<00:45,  3.28it/s][A
 33%|███▎      | 72/221 [00:18<00:50,  2.96it/s][A
 33%|███▎      | 73/221 [00:19<00:55,  2.67it/s][A
 34%|███▍      | 75/221 [00:19<00:41,  3.54it/s][A
 34%|███▍      | 76/221 [00:19<00:36,  3.97it/s][A
 35%|███▍      | 77/221 [00:19<00:36,  3.99it/s][A
 35%|███▌      | 78/221 [00:20<00:31,  4.59it/s][A
 36%|███▌      | 79/221 [00:20<00:47,  2.98it/s][A
 36%|███▌      | 80/221 [00:20<00:42,  3.34it/s][A
 37%|███▋      | 81/221 [00:21<00:37,  3.74it/s][A
 37%|███▋      | 82/221 [00:21<00:40,  3.47it/s][A
 38%|███▊      | 83/221 [00:21<00:50,  2.72it/s][A
 38%|███▊      | 84/221 [00:22<00:40,  3.36it/s][A
 38%|███▊      | 85/221 [00:22<00:33,  4.07it/s][A
 39%|███▉      | 86/221 [00:22<00:27,  4.91it/s][A
 39%|███▉      | 87/221 [00:23<00:50,  2.67it/s][A
 40%|███▉      | 88/221 [00:23<00:54,  2.43it/s][A
 40%|████      | 89/221 [00:23<00:48,  2.75it/s][A
 41%|████      | 90/221 [00:24<00:44,  2.96it/s][A
 41%|████      | 91/221 [00:24<00:38,  3.42it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.69it/s][A
 42%|████▏     | 93/221 [00:25<00:52,  2.44it/s][A
 43%|████▎     | 94/221 [00:25<00:48,  2.60it/s][A
 43%|████▎     | 95/221 [00:25<00:45,  2.74it/s][A
 43%|████▎     | 96/221 [00:26<00:38,  3.26it/s][A
 44%|████▍     | 97/221 [00:26<00:34,  3.64it/s][A
 44%|████▍     | 98/221 [00:26<00:37,  3.32it/s][A
 45%|████▍     | 99/221 [00:26<00:29,  4.13it/s][A
 45%|████▌     | 100/221 [00:26<00:29,  4.10it/s][A
 46%|████▌     | 101/221 [00:27<00:31,  3.77it/s][A
 46%|████▌     | 102/221 [00:28<00:48,  2.46it/s][A
 47%|████▋     | 103/221 [00:28<00:38,  3.07it/s][A
 47%|████▋     | 104/221 [00:28<00:30,  3.84it/s][A
 48%|████▊     | 105/221 [00:28<00:29,  3.94it/s][A
 48%|████▊     | 106/221 [00:29<00:39,  2.91it/s][A
 48%|████▊     | 107/221 [00:29<00:33,  3.37it/s][A
 49%|████▉     | 108/221 [00:29<00:32,  3.53it/s][A
 49%|████▉     | 109/221 [00:29<00:26,  4.24it/s][A
 50%|████▉     | 110/221 [00:29<00:25,  4.35it/s][A
 50%|█████     | 111/221 [00:30<00:25,  4.25it/s][A
 51%|█████     | 112/221 [00:30<00:27,  3.91it/s][A
 51%|█████     | 113/221 [00:30<00:28,  3.81it/s][A
 52%|█████▏    | 115/221 [00:30<00:21,  5.01it/s][A
 52%|█████▏    | 116/221 [00:31<00:24,  4.32it/s][A
 53%|█████▎    | 117/221 [00:31<00:24,  4.22it/s][A
 53%|█████▎    | 118/221 [00:31<00:24,  4.17it/s][A
 54%|█████▍    | 119/221 [00:32<00:30,  3.39it/s][A
 54%|█████▍    | 120/221 [00:32<00:27,  3.65it/s][A
 55%|█████▌    | 122/221 [00:32<00:21,  4.70it/s][A
 56%|█████▌    | 123/221 [00:32<00:21,  4.60it/s][A
 56%|█████▌    | 124/221 [00:33<00:23,  4.17it/s][A
 57%|█████▋    | 125/221 [00:33<00:28,  3.39it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.69it/s][A
 57%|█████▋    | 127/221 [00:34<00:29,  3.23it/s][A
 58%|█████▊    | 128/221 [00:34<00:26,  3.50it/s][A
 59%|█████▉    | 130/221 [00:34<00:17,  5.16it/s][A
 59%|█████▉    | 131/221 [00:34<00:16,  5.48it/s][A
 60%|█████▉    | 132/221 [00:35<00:21,  4.22it/s][A
 60%|██████    | 133/221 [00:35<00:21,  4.03it/s][A
 61%|██████    | 134/221 [00:35<00:25,  3.39it/s][A
 61%|██████    | 135/221 [00:36<00:27,  3.13it/s][A
 62%|██████▏   | 136/221 [00:36<00:25,  3.33it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.67it/s][A
 62%|██████▏   | 138/221 [00:37<00:25,  3.30it/s][A
 63%|██████▎   | 139/221 [00:37<00:28,  2.86it/s][A
 63%|██████▎   | 140/221 [00:37<00:26,  3.01it/s][A
 64%|██████▍   | 141/221 [00:38<00:24,  3.26it/s][A
 64%|██████▍   | 142/221 [00:38<00:21,  3.72it/s][A
 65%|██████▍   | 143/221 [00:39<00:35,  2.17it/s][A
 65%|██████▌   | 144/221 [00:39<00:37,  2.06it/s][A
 66%|██████▌   | 145/221 [00:39<00:28,  2.70it/s][A
 67%|██████▋   | 147/221 [00:40<00:21,  3.44it/s][A
 67%|██████▋   | 148/221 [00:40<00:23,  3.17it/s][A
 67%|██████▋   | 149/221 [00:41<00:23,  3.01it/s][A
 68%|██████▊   | 150/221 [00:41<00:22,  3.20it/s][A
 68%|██████▊   | 151/221 [00:41<00:22,  3.14it/s][A
 69%|██████▉   | 152/221 [00:42<00:40,  1.68it/s][A
 69%|██████▉   | 153/221 [00:43<00:32,  2.08it/s][A
 70%|██████▉   | 154/221 [00:43<00:26,  2.55it/s][A
 70%|███████   | 155/221 [00:43<00:26,  2.48it/s][A
 71%|███████   | 156/221 [00:44<00:28,  2.24it/s][A
 71%|███████   | 157/221 [00:44<00:24,  2.56it/s][A
 71%|███████▏  | 158/221 [00:44<00:21,  2.91it/s][A
 72%|███████▏  | 159/221 [00:44<00:16,  3.65it/s][A
 72%|███████▏  | 160/221 [00:45<00:15,  4.04it/s][A
 73%|███████▎  | 161/221 [00:45<00:14,  4.10it/s][A
 73%|███████▎  | 162/221 [00:45<00:13,  4.50it/s][A
 74%|███████▍  | 163/221 [00:45<00:12,  4.54it/s][A
 74%|███████▍  | 164/221 [00:45<00:11,  4.86it/s][A
 75%|███████▍  | 165/221 [00:46<00:14,  3.73it/s][A
 75%|███████▌  | 166/221 [00:46<00:14,  3.80it/s][A
 76%|███████▌  | 168/221 [00:46<00:12,  4.32it/s][A
 76%|███████▋  | 169/221 [00:47<00:11,  4.59it/s][A
 77%|███████▋  | 170/221 [00:47<00:13,  3.86it/s][A
 77%|███████▋  | 171/221 [00:47<00:12,  3.97it/s][A
 78%|███████▊  | 173/221 [00:48<00:13,  3.53it/s][A
 79%|███████▊  | 174/221 [00:48<00:15,  3.04it/s][A
 79%|███████▉  | 175/221 [00:49<00:15,  3.00it/s][A
 80%|███████▉  | 176/221 [00:49<00:12,  3.48it/s][A
 80%|████████  | 177/221 [00:49<00:11,  3.99it/s][A
 81%|████████  | 178/221 [00:49<00:10,  4.01it/s][A
 81%|████████  | 179/221 [00:50<00:11,  3.72it/s][A
 81%|████████▏ | 180/221 [00:50<00:09,  4.12it/s][A
 82%|████████▏ | 181/221 [00:50<00:08,  4.56it/s][A
 82%|████████▏ | 182/221 [00:50<00:09,  4.23it/s][A
 83%|████████▎ | 183/221 [00:50<00:08,  4.50it/s][A
 83%|████████▎ | 184/221 [00:51<00:07,  4.64it/s][A
 84%|████████▎ | 185/221 [00:51<00:06,  5.44it/s][A
 84%|████████▍ | 186/221 [00:51<00:09,  3.54it/s][A
 85%|████████▍ | 187/221 [00:51<00:10,  3.35it/s][A
 85%|████████▌ | 188/221 [00:52<00:09,  3.36it/s][A
 86%|████████▌ | 189/221 [00:52<00:08,  3.64it/s][A
 86%|████████▌ | 190/221 [00:52<00:09,  3.32it/s][A
 86%|████████▋ | 191/221 [00:53<00:07,  3.80it/s][A
 87%|████████▋ | 192/221 [00:53<00:07,  3.74it/s][A
 88%|████████▊ | 194/221 [00:53<00:07,  3.55it/s][A
 88%|████████▊ | 195/221 [00:54<00:06,  3.88it/s][A
 89%|████████▊ | 196/221 [00:54<00:06,  3.60it/s][A
 89%|████████▉ | 197/221 [00:54<00:07,  3.41it/s][A
 90%|████████▉ | 198/221 [00:55<00:07,  3.22it/s][A
 90%|█████████ | 199/221 [00:55<00:06,  3.57it/s][A
 90%|█████████ | 200/221 [00:55<00:05,  3.51it/s][A
 91%|█████████ | 201/221 [00:55<00:05,  3.81it/s][A
 91%|█████████▏| 202/221 [00:56<00:04,  3.88it/s][A
 92%|█████████▏| 203/221 [00:56<00:04,  4.16it/s][A
 92%|█████████▏| 204/221 [00:56<00:05,  3.16it/s][A
 93%|█████████▎| 205/221 [00:56<00:04,  3.83it/s][A
 93%|█████████▎| 206/221 [00:57<00:04,  3.56it/s][A
 94%|█████████▍| 208/221 [00:57<00:02,  4.35it/s][A
 95%|█████████▍| 209/221 [00:57<00:03,  3.79it/s][A
 95%|█████████▌| 211/221 [00:58<00:02,  3.98it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  3.85it/s][A
 96%|█████████▋| 213/221 [00:58<00:01,  4.24it/s][A
 97%|█████████▋| 214/221 [00:59<00:02,  3.17it/s][A
 97%|█████████▋| 215/221 [00:59<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:00<00:01,  3.04it/s][A
 98%|█████████▊| 217/221 [01:00<00:01,  2.89it/s][A
 99%|█████████▊| 218/221 [01:00<00:01,  2.98it/s][A
 99%|█████████▉| 219/221 [01:01<00:00,  2.79it/s][A
100%|█████████▉| 220/221 [01:01<00:00,  3.18it/s][A
100%|██████████| 221/221 [01:01<00:00,  3.42it/s][A100%|██████████| 221/221 [01:01<00:00,  3.59it/s]
09/08/2024 22:01:04 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 299--===========

09/08/2024 22:01:04 - INFO - __main__ -   {'area_r1': 41.3, 'area_recall': '41.3/68.7/77.1', 'area_ravg': 62.4}
09/08/2024 22:01:04 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 299--===========

09/08/2024 22:01:04 - INFO - __main__ -   {'forward_r1': 35.3, 'forward_recall': '35.3/61.3/71.9', 'forward_ravg': 56.2}
09/08/2024 22:01:04 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 299--===========

09/08/2024 22:01:04 - INFO - __main__ -   {'area_video_r1': 39.4, 'area_video_recall': '39.4/65.4/77.1', 'area_video_ravg': 60.6}
09/08/2024 22:01:04 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 299=======

09/08/2024 22:01:04 - INFO - __main__ -   {'area_video_r1': 39.4, 'area_video_recall': '39.4/65.4/77.1', 'area_video_ravg': 60.6}
09/08/2024 22:01:04 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 299--===========

09/08/2024 22:01:04 - INFO - __main__ -   {'area_video_r1': 50.7, 'area_video_recall': '50.7/75.1/82.8', 'area_video_ravg': 69.5, 'area_video_back_r1': 50.2, 'area_video_back_recall': '50.2/71.5/78.3', 'area_video_back_ravg': 66.7}
09/08/2024 22:01:04 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 299=======

09/08/2024 22:01:04 - INFO - __main__ -   {'area_video_r1': 50.7, 'area_video_recall': '50.7/75.1/82.8', 'area_video_ravg': 69.5, 'area_video_back_r1': 50.2, 'area_video_back_recall': '50.2/71.5/78.3', 'area_video_back_ravg': 66.7}
09/08/2024 22:01:04 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 299--===========

09/08/2024 22:01:04 - INFO - __main__ -   {'video_r1': 42.6, 'video_recall': '42.6/70.1/80.5', 'video_ravg': 64.4}
09/08/2024 22:01:04 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 299=======

09/08/2024 22:01:04 - INFO - __main__ -   {'video_r1': 42.6, 'video_recall': '42.6/70.1/80.5', 'video_ravg': 64.4}
09/08/2024 22:01:04 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 299--===========

09/08/2024 22:01:04 - INFO - __main__ -   {'video_r1': 51.0, 'video_recall': '51.0/75.6/82.5', 'video_ravg': 69.7}
09/08/2024 22:01:04 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 299=======

09/08/2024 22:01:04 - INFO - __main__ -   {'video_r1': 51.0, 'video_recall': '51.0/75.6/82.5', 'video_ravg': 69.7}
09/08/2024 22:01:48 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.1996450424194336, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04473156854510307, 'loss_ret%tv%ta--finetune_area/loss_area': 1.5707820653915405, 'loss_ret%tv%ta--finetune_area/total_loss': 4.815158843994141}
[h264 @ 0x56207f06ec00] mmco: unref short failure
[h264 @ 0x56207f06ec00] mmco: unref short failure
[h264 @ 0x56207f06ec00] mmco: unref short failure
[h264 @ 0x56207f06ec00] mmco: unref short failure
[h264 @ 0x56207f06ec00] mmco: unref short failure
[h264 @ 0x56207f06ec00] mmco: unref short failure
 15%|█▌        | 300/1945 [1:20:33<56:50:00, 124.38s/it] 15%|█▌        | 301/1945 [1:20:37<40:18:12, 88.26s/it] [h264 @ 0x55597bf464c0] mmco: unref short failure
 16%|█▌        | 302/1945 [1:20:42<28:52:53, 63.28s/it] 16%|█▌        | 303/1945 [1:20:47<20:56:19, 45.91s/it][h264 @ 0x5609867fc0c0] mmco: unref short failure
 16%|█▌        | 304/1945 [1:20:52<15:24:20, 33.80s/it][h264 @ 0x5609790ba300] mmco: unref short failure
 16%|█▌        | 305/1945 [1:20:59<11:38:22, 25.55s/it][h264 @ 0x56207bfd2600] mmco: unref short failure
 16%|█▌        | 306/1945 [1:21:06<9:04:12, 19.92s/it] [h264 @ 0x560988096b40] mmco: unref short failure
[h264 @ 0x56097a1ed440] mmco: unref short failure
[h264 @ 0x56097a1ed440] mmco: unref short failure
[h264 @ 0x560986dd0700] mmco: unref short failure
[h264 @ 0x560986dd0700] mmco: unref short failure
[h264 @ 0x560986dd0700] mmco: unref short failure
 16%|█▌        | 307/1945 [1:21:13<7:18:39, 16.07s/it][h264 @ 0x562092f0b540] mmco: unref short failure
[h264 @ 0x5620879464c0] mmco: unref short failure
[h264 @ 0x5620879464c0] mmco: unref short failure
 16%|█▌        | 308/1945 [1:21:20<6:09:25, 13.54s/it][h264 @ 0x5601b5f661c0] mmco: unref short failure
[h264 @ 0x5601b5f661c0] mmco: unref short failure
[h264 @ 0x56097a9c5d00] mmco: unref short failure
[h264 @ 0x5601bfa38900] mmco: unref short failure
 16%|█▌        | 309/1945 [1:21:27<5:16:00, 11.59s/it][h264 @ 0x56097e92c180] mmco: unref short failure
[h264 @ 0x56097e4dac00] mmco: unref short failure
 16%|█▌        | 310/1945 [1:21:34<4:39:49, 10.27s/it][h264 @ 0x5601bd382680] mmco: unref short failure
[h264 @ 0x5601bd382680] mmco: unref short failure
[h264 @ 0x5601bd382680] mmco: unref short failure
[h264 @ 0x5601bd382680] mmco: unref short failure
[h264 @ 0x5601bd382680] mmco: unref short failure
[h264 @ 0x5601bd382680] mmco: unref short failure
 16%|█▌        | 311/1945 [1:21:42<4:18:45,  9.50s/it][h264 @ 0x562095b18fc0] mmco: unref short failure
[h264 @ 0x562095b18fc0] mmco: unref short failure
[h264 @ 0x56208c412640] mmco: unref short failure
[h264 @ 0x56208c412640] mmco: unref short failure
[h264 @ 0x560985d00c40] mmco: unref short failure
 16%|█▌        | 312/1945 [1:21:50<4:03:19,  8.94s/it][h264 @ 0x56207c639000] mmco: unref short failure
[h264 @ 0x560988c0b2c0] mmco: unref short failure
 16%|█▌        | 313/1945 [1:21:57<3:50:53,  8.49s/it][h264 @ 0x5601c5b9a440] mmco: unref short failure
 16%|█▌        | 314/1945 [1:22:05<3:45:11,  8.28s/it][h264 @ 0x56208fd08340] mmco: unref short failure
 16%|█▌        | 315/1945 [1:22:13<3:43:50,  8.24s/it][h264 @ 0x55598e1b3a80] mmco: unref short failure
 16%|█▌        | 316/1945 [1:22:22<3:46:59,  8.36s/it][h264 @ 0x5601bb282b80] mmco: unref short failure
[h264 @ 0x5601bb282b80] mmco: unref short failure
[h264 @ 0x5601bb282b80] mmco: unref short failure
[h264 @ 0x5601bb282b80] mmco: unref short failure
[h264 @ 0x5601b1e93f80] mmco: unref short failure
[h264 @ 0x5601b1e93f80] mmco: unref short failure
 16%|█▋        | 317/1945 [1:22:30<3:42:00,  8.18s/it][h264 @ 0x5601bcdf0f00] mmco: unref short failure
[h264 @ 0x560985d00c40] mmco: unref short failure
[h264 @ 0x560985d00c40] mmco: unref short failure
 16%|█▋        | 318/1945 [1:22:38<3:40:41,  8.14s/it][h264 @ 0x56099a399f80] mmco: unref short failure
[h264 @ 0x56099a399f80] mmco: unref short failure
[h264 @ 0x5601c06ab980] mmco: unref short failure
 16%|█▋        | 319/1945 [1:22:44<3:29:21,  7.73s/it][h264 @ 0x5609794ce5c0] mmco: unref short failure
[h264 @ 0x56099158a480] mmco: unref short failure
[h264 @ 0x56099158a480] mmco: unref short failure
 16%|█▋        | 320/1945 [1:22:53<3:35:46,  7.97s/it][h264 @ 0x56209472e880] mmco: unref short failure
[h264 @ 0x56209472e880] mmco: unref short failure
[h264 @ 0x55599470ed40] mmco: unref short failure
[h264 @ 0x55599470ed40] mmco: unref short failure
[h264 @ 0x562091677d80] mmco: unref short failure
[h264 @ 0x562091677d80] mmco: unref short failure
[h264 @ 0x5601c30393c0] mmco: unref short failure
[h264 @ 0x5601c30393c0] mmco: unref short failure
 17%|█▋        | 321/1945 [1:23:05<4:07:14,  9.13s/it][h264 @ 0x555981297880] mmco: unref short failure
[h264 @ 0x555981297880] mmco: unref short failure
[h264 @ 0x56208fd08340] mmco: unref short failure
[h264 @ 0x56208fd08340] mmco: unref short failure
[h264 @ 0x55598b05cb80] mmco: unref short failure
 17%|█▋        | 322/1945 [1:23:19<4:49:26, 10.70s/it] 17%|█▋        | 323/1945 [1:23:27<4:25:09,  9.81s/it][h264 @ 0x562091c3a100] mmco: unref short failure
[h264 @ 0x562091c3a100] mmco: unref short failure
[h264 @ 0x55598b05cb80] mmco: unref short failure
[h264 @ 0x5601a65a2a80] mmco: unref short failure
[h264 @ 0x5601a65a2a80] mmco: unref short failure
[h264 @ 0x55599b9253c0] mmco: unref short failure
[h264 @ 0x55599b9253c0] mmco: unref short failure
[h264 @ 0x555981117140] mmco: unref short failure
[h264 @ 0x555981117140] mmco: unref short failure
[h264 @ 0x5601bf476200] mmco: unref short failure
[h264 @ 0x555982b6a2c0] mmco: unref short failure
[h264 @ 0x562090764240] mmco: unref short failure
[h264 @ 0x562090764240] mmco: unref short failure
[h264 @ 0x56208e85fc00] mmco: unref short failure
[h264 @ 0x56208e85fc00] mmco: unref short failure
[h264 @ 0x555993e4c2c0] mmco: unref short failure
[h264 @ 0x55597becefc0] mmco: unref short failure
[h264 @ 0x5601a6b2eb00] mmco: unref short failure
[h264 @ 0x5601a6b2eb00] mmco: unref short failure
[h264 @ 0x5609832c1240] mmco: unref short failure
[h264 @ 0x5609832c1240] mmco: unref short failure
[h264 @ 0x5609832c1240] mmco: unref short failure
[h264 @ 0x55599d34f880] mmco: unref short failure
[h264 @ 0x5601b4110780] mmco: unref short failure
 17%|█▋        | 324/1945 [1:24:09<8:43:52, 19.39s/it][h264 @ 0x55598f923ec0] mmco: unref short failure
[h264 @ 0x55598f923ec0] mmco: unref short failure
[h264 @ 0x5559941a1a00] mmco: unref short failure
[h264 @ 0x56208b6aae80] mmco: unref short failure
[h264 @ 0x56208b6aae80] mmco: unref short failure
[h264 @ 0x5559945d7440] mmco: unref short failure
[h264 @ 0x5559945d7440] mmco: unref short failure
 17%|█▋        | 325/1945 [1:24:38<10:01:37, 22.28s/it][h264 @ 0x560986fd9500] mmco: unref short failure
 17%|█▋        | 326/1945 [1:24:45<7:56:59, 17.68s/it] [h264 @ 0x5601c172a300] mmco: unref short failure
[h264 @ 0x5601c172a300] mmco: unref short failure
[h264 @ 0x5609983921c0] mmco: unref short failure
 17%|█▋        | 327/1945 [1:24:52<6:30:26, 14.48s/it][h264 @ 0x555984ce6f40] mmco: unref short failure
[h264 @ 0x555984ce6f40] mmco: unref short failure
[h264 @ 0x555999489540] mmco: unref short failure
[h264 @ 0x555999489540] mmco: unref short failure
[h264 @ 0x5601c171d580] mmco: unref short failure
[h264 @ 0x5601c171d580] mmco: unref short failure
[h264 @ 0x560981df68c0] mmco: unref short failure
 17%|█▋        | 328/1945 [1:25:03<6:08:48, 13.69s/it][h264 @ 0x5601be494a40] mmco: unref short failure
[h264 @ 0x562079cf3700] mmco: unref short failure
 17%|█▋        | 329/1945 [1:25:12<5:29:08, 12.22s/it][h264 @ 0x5601b267cf80] mmco: unref short failure
[h264 @ 0x5601b267cf80] mmco: unref short failure
[h264 @ 0x5601b267cf80] mmco: unref short failure
[h264 @ 0x5601b267cf80] mmco: unref short failure
 17%|█▋        | 330/1945 [1:25:25<5:32:18, 12.35s/it][h264 @ 0x5601a8d6e780] mmco: unref short failure
 17%|█▋        | 331/1945 [1:25:33<4:54:16, 10.94s/it][h264 @ 0x562093554d40] mmco: unref short failure
[h264 @ 0x562093554d40] mmco: unref short failure
[h264 @ 0x56097a2e98c0] mmco: unref short failure
[h264 @ 0x56097a2e98c0] mmco: unref short failure
[h264 @ 0x562093554d40] mmco: unref short failure
[h264 @ 0x560981220300] mmco: unref short failure
[h264 @ 0x5609856f4e40] mmco: unref short failure
[h264 @ 0x5609856f4e40] mmco: unref short failure
[h264 @ 0x5609856f4e40] mmco: unref short failure
[h264 @ 0x5609856f4e40] mmco: unref short failure
[h264 @ 0x5609856f4e40] mmco: unref short failure
[h264 @ 0x5609856f4e40] mmco: unref short failure
[h264 @ 0x5609856f4e40] mmco: unref short failure
[h264 @ 0x5609856f4e40] mmco: unref short failure
[h264 @ 0x5609856f4e40] mmco: unref short failure
[h264 @ 0x5559998db4c0] mmco: unref short failure
[h264 @ 0x56097c8c93c0] mmco: unref short failure
[h264 @ 0x56097c8c93c0] mmco: unref short failure
[h264 @ 0x5609856f4e40] mmco: unref short failure
[h264 @ 0x56208afa6540] mmco: unref short failure
[h264 @ 0x56208afa6540] mmco: unref short failure
[h264 @ 0x562091d56180] mmco: unref short failure
[h264 @ 0x56207d1eafc0] mmco: unref short failure
[h264 @ 0x56207d1eafc0] mmco: unref short failure
[h264 @ 0x5601c55c5a80] mmco: unref short failure
[h264 @ 0x5601c55c5a80] mmco: unref short failure
[h264 @ 0x5601c55c5a80] mmco: unref short failure
[h264 @ 0x5601c7d0c900] mmco: unref short failure
[h264 @ 0x562094dd4940] mmco: unref short failure
 17%|█▋        | 332/1945 [1:26:21<9:58:00, 22.24s/it][h264 @ 0x55599e0d1e80] mmco: unref short failure
[h264 @ 0x55599e0d1e80] mmco: unref short failure
[h264 @ 0x55599e0d1e80] mmco: unref short failure
[h264 @ 0x55599e0d1e80] mmco: unref short failure
 17%|█▋        | 333/1945 [1:26:36<9:02:02, 20.18s/it][h264 @ 0x5601c4ce9f40] mmco: unref short failure
[h264 @ 0x5601c4ce9f40] mmco: unref short failure
 17%|█▋        | 334/1945 [1:26:43<7:13:25, 16.14s/it][h264 @ 0x562077956f40] mmco: unref short failure
 17%|█▋        | 335/1945 [1:26:56<6:46:29, 15.15s/it][h264 @ 0x560979730680] mmco: unref short failure
[h264 @ 0x560979730680] mmco: unref short failure
[h264 @ 0x55597e50ac00] mmco: unref short failure
[h264 @ 0x55597f675600] mmco: unref short failure
[h264 @ 0x55597f675600] mmco: unref short failure
 17%|█▋        | 336/1945 [1:27:15<7:17:55, 16.33s/it][h264 @ 0x555993ca3540] mmco: unref short failure
[h264 @ 0x555982f891c0] mmco: unref short failure
[h264 @ 0x555982329880] mmco: unref short failure
 17%|█▋        | 337/1945 [1:27:22<6:00:11, 13.44s/it][h264 @ 0x55599e93a3c0] mmco: unref short failure
[h264 @ 0x55599e93a3c0] mmco: unref short failure
 17%|█▋        | 338/1945 [1:27:31<5:24:19, 12.11s/it][h264 @ 0x55597be12ec0] mmco: unref short failure
 17%|█▋        | 339/1945 [1:27:38<4:43:39, 10.60s/it][h264 @ 0x555999836240] mmco: unref short failure
[h264 @ 0x555999836240] mmco: unref short failure
[h264 @ 0x555993ca3540] mmco: unref short failure
[h264 @ 0x555993ca3540] mmco: unref short failure
[h264 @ 0x560981ba9ac0] mmco: unref short failure
[h264 @ 0x560981ba9ac0] mmco: unref short failure
[h264 @ 0x560981ba9ac0] mmco: unref short failure
[h264 @ 0x560981ba9ac0] mmco: unref short failure
[h264 @ 0x560981ba9ac0] mmco: unref short failure
[h264 @ 0x560981ba9ac0] mmco: unref short failure
[h264 @ 0x55597becefc0] mmco: unref short failure
[h264 @ 0x5601af333b40] mmco: unref short failure
[h264 @ 0x5601af333b40] mmco: unref short failure
[h264 @ 0x5601a7d1a500] mmco: unref short failure
[h264 @ 0x5601a496f880] mmco: unref short failure
[h264 @ 0x5601a496f880] mmco: unref short failure
[h264 @ 0x560981ba9ac0] mmco: unref short failure
[h264 @ 0x560981ba9ac0] mmco: unref short failure
[h264 @ 0x5609849cd740] mmco: unref short failure
[h264 @ 0x555995b7e980] mmco: unref short failure
[h264 @ 0x555995b7e980] mmco: unref short failure
[h264 @ 0x562075fa5cc0] mmco: unref short failure
[h264 @ 0x5559888666c0] mmco: unref short failure
[h264 @ 0x55599f3eaec0] mmco: unref short failure
[h264 @ 0x55599f3eaec0] mmco: unref short failure
[h264 @ 0x55599f3eaec0] mmco: unref short failure
[h264 @ 0x55599f3eaec0] mmco: unref short failure
[h264 @ 0x56207e0cf2c0] mmco: unref short failure
[h264 @ 0x56097951a900] mmco: unref short failure
[h264 @ 0x56097951a900] mmco: unref short failure
[h264 @ 0x562084d29fc0] mmco: unref short failure
[h264 @ 0x562084d29fc0] mmco: unref short failure
[h264 @ 0x5601c30393c0] mmco: unref short failure
[h264 @ 0x5601c30393c0] mmco: unref short failure
[h264 @ 0x56208582ef80] mmco: unref short failure
[h264 @ 0x56208582ef80] mmco: unref short failure
 17%|█▋        | 340/1945 [1:28:25<9:34:37, 21.48s/it][h264 @ 0x555988c50940] mmco: unref short failure
 18%|█▊        | 341/1945 [1:28:39<8:37:07, 19.34s/it][h264 @ 0x5609791efa40] mmco: unref short failure
[h264 @ 0x55599f3eaec0] mmco: unref short failure
[h264 @ 0x5601b17bd940] mmco: unref short failure
 18%|█▊        | 342/1945 [1:28:46<6:56:55, 15.61s/it][h264 @ 0x555980daa240] mmco: unref short failure
[h264 @ 0x555980daa240] mmco: unref short failure
[h264 @ 0x5601bd8146c0] mmco: unref short failure
[h264 @ 0x5601bd8146c0] mmco: unref short failure
[h264 @ 0x5601b047aac0] mmco: unref short failure
[h264 @ 0x5601b047aac0] mmco: unref short failure
[h264 @ 0x55599b75e940] mmco: unref short failure
[h264 @ 0x55599b75e940] mmco: unref short failure
 18%|█▊        | 343/1945 [1:29:02<6:58:19, 15.67s/it][h264 @ 0x5609912f5ec0] mmco: unref short failure
 18%|█▊        | 344/1945 [1:29:12<6:11:07, 13.91s/it] 18%|█▊        | 345/1945 [1:29:24<5:57:53, 13.42s/it][h264 @ 0x560985ecc4c0] mmco: unref short failure
 18%|█▊        | 346/1945 [1:29:32<5:12:48, 11.74s/it][h264 @ 0x55599ea4dc00] mmco: unref short failure
 18%|█▊        | 347/1945 [1:29:39<4:36:01, 10.36s/it][h264 @ 0x5620906d6c80] mmco: unref short failure
[h264 @ 0x5601acd62040] mmco: unref short failure
[h264 @ 0x5601acd62040] mmco: unref short failure
[h264 @ 0x562090630240] mmco: unref short failure
[h264 @ 0x5559944bebc0] mmco: unref short failure
[h264 @ 0x5559968012c0] mmco: unref short failure
[h264 @ 0x56098bf87d00] mmco: unref short failure
[h264 @ 0x56098bf87d00] mmco: unref short failure
[h264 @ 0x5601bfdd9c80] mmco: unref short failure
[h264 @ 0x55597e0dbac0] mmco: unref short failure
[h264 @ 0x55597e0dbac0] mmco: unref short failure
[h264 @ 0x562087f63e40] mmco: unref short failure
[h264 @ 0x562087f63e40] mmco: unref short failure
[h264 @ 0x56099414a300] mmco: unref short failure
[h264 @ 0x56099414a300] mmco: unref short failure
[h264 @ 0x56098eaf4200] mmco: unref short failure
[h264 @ 0x56097ee4cd80] mmco: unref short failure
[h264 @ 0x56097ee4cd80] mmco: unref short failure
 18%|█▊        | 348/1945 [1:30:25<9:21:58, 21.11s/it][h264 @ 0x560981bb0800] mmco: unref short failure
[h264 @ 0x560981bb0800] mmco: unref short failure
[h264 @ 0x562086b47a00] mmco: unref short failure
[h264 @ 0x555995957c40] mmco: unref short failure
[h264 @ 0x555995957c40] mmco: unref short failure
 18%|█▊        | 349/1945 [1:30:45<9:10:30, 20.70s/it][h264 @ 0x5601b2413940] mmco: unref short failure
[h264 @ 0x5601b7ca3280] mmco: unref short failure
[h264 @ 0x5601b7ca3280] mmco: unref short failure
[h264 @ 0x5609836ac2c0] mmco: unref short failure
09/08/2024 22:12:09 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.215632915496826, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.041121140122413635, 'loss_ret%tv%ta--finetune_area/loss_area': 1.4621561765670776, 'loss_ret%tv%ta--finetune_area/total_loss': 4.718910217285156}
 18%|█▊        | 350/1945 [1:30:56<7:53:29, 17.81s/it][h264 @ 0x55597f793ac0] mmco: unref short failure
[h264 @ 0x55597f793ac0] mmco: unref short failure
[h264 @ 0x55597f793ac0] mmco: unref short failure
[h264 @ 0x55597f793ac0] mmco: unref short failure
 18%|█▊        | 351/1945 [1:31:07<6:58:33, 15.76s/it][h264 @ 0x56208cb20a40] mmco: unref short failure
[h264 @ 0x56208cb20a40] mmco: unref short failure
[h264 @ 0x56097b854580] mmco: unref short failure
[h264 @ 0x56097b854580] mmco: unref short failure
[h264 @ 0x5601c7cfc700] mmco: unref short failure
 18%|█▊        | 352/1945 [1:31:16<6:05:00, 13.75s/it][h264 @ 0x5620906d6c80] mmco: unref short failure
[h264 @ 0x5601a641dc00] mmco: unref short failure
[h264 @ 0x5601a641dc00] mmco: unref short failure
[h264 @ 0x5601a641dc00] mmco: unref short failure
[h264 @ 0x5601a641dc00] mmco: unref short failure
[h264 @ 0x5601c5d63c80] mmco: unref short failure
[h264 @ 0x5601c5d63c80] mmco: unref short failure
[h264 @ 0x5601c5d63c80] mmco: unref short failure
[h264 @ 0x5601c5d63c80] mmco: unref short failure
[h264 @ 0x562086979980] mmco: unref short failure
[h264 @ 0x562086979980] mmco: unref short failure
[h264 @ 0x562086979980] mmco: unref short failure
[h264 @ 0x562086979980] mmco: unref short failure
 18%|█▊        | 353/1945 [1:31:41<7:36:00, 17.19s/it][h264 @ 0x5620906bb440] mmco: unref short failure
 18%|█▊        | 354/1945 [1:31:48<6:11:56, 14.03s/it][h264 @ 0x5601c52f5e00] mmco: unref short failure
 18%|█▊        | 355/1945 [1:31:54<5:10:26, 11.71s/it][h264 @ 0x56208f0e6280] mmco: unref short failure
 18%|█▊        | 356/1945 [1:32:21<7:11:37, 16.30s/it][h264 @ 0x5620801d6580] mmco: unref short failure
[h264 @ 0x5601b047aac0] mmco: unref short failure
[h264 @ 0x55597d0cd6c0] mmco: unref short failure
[h264 @ 0x55597d0cd6c0] mmco: unref short failure
[h264 @ 0x560987a79c40] mmco: unref short failure
[h264 @ 0x560987a79c40] mmco: unref short failure
[h264 @ 0x55598635f300] mmco: unref short failure
[h264 @ 0x560998189a40] mmco: unref short failure
[h264 @ 0x56098bf64f00] mmco: unref short failure
[h264 @ 0x56098bf64f00] mmco: unref short failure
[h264 @ 0x56098c7ab6c0] mmco: unref short failure
[h264 @ 0x56098c7ab6c0] mmco: unref short failure
[h264 @ 0x5620806073c0] mmco: unref short failure
[h264 @ 0x5620806073c0] mmco: unref short failure
 18%|█▊        | 357/1945 [1:32:46<8:20:51, 18.92s/it][h264 @ 0x55598cee5800] mmco: unref short failure
[h264 @ 0x56207eee1440] mmco: unref short failure
[h264 @ 0x56099804cdc0] mmco: unref short failure
[h264 @ 0x55597fc43840] mmco: unref short failure
 18%|█▊        | 358/1945 [1:32:53<6:43:21, 15.25s/it][h264 @ 0x56208a3230c0] mmco: unref short failure
[h264 @ 0x5601bfcd38c0] mmco: unref short failure
[h264 @ 0x5601bfcd38c0] mmco: unref short failure
[h264 @ 0x56097f66f540] mmco: unref short failure
[h264 @ 0x56097f66f540] mmco: unref short failure
[h264 @ 0x5601a58c4980] mmco: unref short failure
[h264 @ 0x5601a58c4980] mmco: unref short failure
[h264 @ 0x5601b3c34c40] mmco: unref short failure
[h264 @ 0x5601b3c34c40] mmco: unref short failure
[h264 @ 0x55597d0cd6c0] mmco: unref short failure
[h264 @ 0x55597d0cd6c0] mmco: unref short failure
 18%|█▊        | 359/1945 [1:33:15<7:40:24, 17.42s/it][h264 @ 0x5601c4ddb900] mmco: unref short failure
[h264 @ 0x5601c4ddb900] mmco: unref short failure
 19%|█▊        | 360/1945 [1:33:23<6:23:16, 14.51s/it][h264 @ 0x560998abed00] mmco: unref short failure
[h264 @ 0x56097e3b8700] mmco: unref short failure
[h264 @ 0x56097e3b8700] mmco: unref short failure
[h264 @ 0x5620906d6c80] mmco: unref short failure
[h264 @ 0x56208cb19e00] mmco: unref short failure
[h264 @ 0x56208cb19e00] mmco: unref short failure
[h264 @ 0x562080c98180] mmco: unref short failure
[h264 @ 0x56207f1fb0c0] mmco: unref short failure
 19%|█▊        | 361/1945 [1:33:38<6:27:37, 14.68s/it][h264 @ 0x55598635f300] mmco: unref short failure
[h264 @ 0x55598635f300] mmco: unref short failure
[h264 @ 0x55598635f300] mmco: unref short failure
 19%|█▊        | 362/1945 [1:33:46<5:33:32, 12.64s/it][h264 @ 0x5609793c07c0] mmco: unref short failure
[h264 @ 0x5609793c07c0] mmco: unref short failure
 19%|█▊        | 363/1945 [1:33:53<4:45:58, 10.85s/it][h264 @ 0x56208cb19e00] mmco: unref short failure
[h264 @ 0x56208cb19e00] mmco: unref short failure
[h264 @ 0x5601c304fa00] mmco: unref short failure
[h264 @ 0x5601c304fa00] mmco: unref short failure
[h264 @ 0x562076eae0c0] mmco: unref short failure
[h264 @ 0x55598a85c980] mmco: unref short failure
[h264 @ 0x555991da0540] mmco: unref short failure
 19%|█▊        | 364/1945 [1:34:20<6:59:46, 15.93s/it][h264 @ 0x56097dcaab40] mmco: unref short failure
[h264 @ 0x56097dcaab40] mmco: unref short failure
[h264 @ 0x560981df68c0] mmco: unref short failure
[h264 @ 0x560981df68c0] mmco: unref short failure
[h264 @ 0x562087f63e40] mmco: unref short failure
[h264 @ 0x562087f63e40] mmco: unref short failure
[h264 @ 0x5620906894c0] mmco: unref short failure
[h264 @ 0x5620906894c0] mmco: unref short failure
[h264 @ 0x56208582ef80] mmco: unref short failure
[h264 @ 0x56208582ef80] mmco: unref short failure
 19%|█▉        | 365/1945 [1:34:53<9:07:43, 20.80s/it][h264 @ 0x562091a473c0] mmco: unref short failure
[h264 @ 0x562091a473c0] mmco: unref short failure
[h264 @ 0x5559949f4e40] mmco: unref short failure
[h264 @ 0x5601aadea4c0] mmco: unref short failure
[h264 @ 0x5601aadea4c0] mmco: unref short failure
[h264 @ 0x555985a54b80] mmco: unref short failure
 19%|█▉        | 366/1945 [1:35:00<7:23:50, 16.87s/it][h264 @ 0x56209166e3c0] mmco: unref short failure
[h264 @ 0x56209166e3c0] mmco: unref short failure
 19%|█▉        | 367/1945 [1:35:13<6:54:35, 15.76s/it][h264 @ 0x5601aadea4c0] mmco: unref short failure
[h264 @ 0x5601aadea4c0] mmco: unref short failure
[h264 @ 0x56099b1217c0] mmco: unref short failure
[h264 @ 0x56099b1217c0] mmco: unref short failure
 19%|█▉        | 368/1945 [1:35:20<5:41:38, 13.00s/it][h264 @ 0x5601aadea4c0] mmco: unref short failure
[h264 @ 0x5601aadea4c0] mmco: unref short failure
[h264 @ 0x55598d8ee840] mmco: unref short failure
[h264 @ 0x55598d8ee840] mmco: unref short failure
[h264 @ 0x55599b906200] mmco: unref short failure
[h264 @ 0x55599b906200] mmco: unref short failure
[h264 @ 0x55599b906200] mmco: unref short failure
[h264 @ 0x55599b906200] mmco: unref short failure
[h264 @ 0x5609794c81c0] mmco: unref short failure
[h264 @ 0x5609794c81c0] mmco: unref short failure
[h264 @ 0x560994120800] mmco: unref short failure
[h264 @ 0x560994120800] mmco: unref short failure
[h264 @ 0x5601c0f2f380] mmco: unref short failure
[h264 @ 0x5601c2cad340] mmco: unref short failure
[h264 @ 0x56207583e0c0] mmco: unref short failure
[h264 @ 0x5601c6cf2240] mmco: unref short failure
[h264 @ 0x5601c6cf2240] mmco: unref short failure
[h264 @ 0x5601aec06a00] mmco: unref short failure
[h264 @ 0x56098ae51c40] mmco: unref short failure
[h264 @ 0x56098ae51c40] mmco: unref short failure
[h264 @ 0x56098ae51c40] mmco: unref short failure
[h264 @ 0x56098ae51c40] mmco: unref short failure
[h264 @ 0x555991d170c0] mmco: unref short failure
[h264 @ 0x5559949f4e40] mmco: unref short failure
[h264 @ 0x5559949f4e40] mmco: unref short failure
 19%|█▉        | 369/1945 [1:35:49<7:50:33, 17.91s/it][h264 @ 0x560984e1b580] mmco: unref short failure
[h264 @ 0x555988708ac0] mmco: unref short failure
 19%|█▉        | 370/1945 [1:35:57<6:30:22, 14.87s/it][h264 @ 0x5601b33783c0] mmco: unref short failure
 19%|█▉        | 371/1945 [1:36:05<5:37:47, 12.88s/it][h264 @ 0x55597a921a40] mmco: unref short failure
[h264 @ 0x55597a921a40] mmco: unref short failure
[h264 @ 0x55597e96df40] mmco: unref short failure
[h264 @ 0x56097a72be00] mmco: unref short failure
[h264 @ 0x56097a72be00] mmco: unref short failure
[h264 @ 0x56097a72be00] mmco: unref short failure
[h264 @ 0x56097a72be00] mmco: unref short failure
[h264 @ 0x5559960f3900] mmco: unref short failure
[h264 @ 0x5559960f3900] mmco: unref short failure
[h264 @ 0x560990decac0] mmco: unref short failure
[h264 @ 0x560990decac0] mmco: unref short failure
[h264 @ 0x560990decac0] mmco: unref short failure
[h264 @ 0x560990decac0] mmco: unref short failure
[h264 @ 0x5620793e6e40] mmco: unref short failure
 19%|█▉        | 372/1945 [1:36:25<6:32:34, 14.97s/it][h264 @ 0x56097a72be00] mmco: unref short failure
[h264 @ 0x56097a72be00] mmco: unref short failure
[h264 @ 0x56207a78a400] mmco: unref short failure
[h264 @ 0x56207a78a400] mmco: unref short failure
 19%|█▉        | 373/1945 [1:36:53<8:12:05, 18.78s/it][h264 @ 0x56208423ebc0] mmco: unref short failure
[h264 @ 0x56208423ebc0] mmco: unref short failure
[h264 @ 0x56208423ebc0] mmco: unref short failure
[h264 @ 0x56097951a900] mmco: unref short failure
[h264 @ 0x56097951a900] mmco: unref short failure
[h264 @ 0x5601c4210d00] mmco: unref short failure
 19%|█▉        | 374/1945 [1:37:00<6:37:39, 15.19s/it][h264 @ 0x55598b325e80] mmco: unref short failure
[h264 @ 0x55598b325e80] mmco: unref short failure
[h264 @ 0x5601acd62040] mmco: unref short failure
[h264 @ 0x5601acd62040] mmco: unref short failure
[h264 @ 0x56099b1217c0] mmco: unref short failure
[h264 @ 0x56099b1217c0] mmco: unref short failure
[h264 @ 0x5601acd62040] mmco: unref short failure
[h264 @ 0x5601acd62040] mmco: unref short failure
[h264 @ 0x55597a921a40] mmco: unref short failure
[h264 @ 0x56097a72be00] mmco: unref short failure
[h264 @ 0x56097a72be00] mmco: unref short failure
[h264 @ 0x56097a72be00] mmco: unref short failure
[h264 @ 0x56097a72be00] mmco: unref short failure
[h264 @ 0x562095ebf1c0] mmco: unref short failure
[h264 @ 0x562095ebf1c0] mmco: unref short failure
[h264 @ 0x562095ebf1c0] mmco: unref short failure
[h264 @ 0x562095ebf1c0] mmco: unref short failure
[h264 @ 0x56098db01880] mmco: unref short failure
[h264 @ 0x56098db01880] mmco: unref short failure
[h264 @ 0x5620852d8f00] mmco: unref short failure
[h264 @ 0x5620852d8f00] mmco: unref short failure
 19%|█▉        | 375/1945 [1:37:24<7:49:30, 17.94s/it][h264 @ 0x56097bebbd40] mmco: unref short failure
[h264 @ 0x5609833cc940] mmco: unref short failure
[h264 @ 0x5609833cc940] mmco: unref short failure
[h264 @ 0x5609833cc940] mmco: unref short failure
[h264 @ 0x5609833cc940] mmco: unref short failure
[h264 @ 0x55597b68c3c0] mmco: unref short failure
[h264 @ 0x55597b68c3c0] mmco: unref short failure
[h264 @ 0x55597b68c3c0] mmco: unref short failure
 19%|█▉        | 376/1945 [1:37:32<6:27:31, 14.82s/it][h264 @ 0x56208e3def80] mmco: unref short failure
[h264 @ 0x56208e3def80] mmco: unref short failure
[h264 @ 0x55598c25a5c0] mmco: unref short failure
[h264 @ 0x55598c25a5c0] mmco: unref short failure
[h264 @ 0x55597d79d840] mmco: unref short failure
[h264 @ 0x55597d79d840] mmco: unref short failure
[h264 @ 0x55597d79d840] mmco: unref short failure
[h264 @ 0x55597d79d840] mmco: unref short failure
[h264 @ 0x56097e3bf380] mmco: unref short failure
[h264 @ 0x56097e3bf380] mmco: unref short failure
[h264 @ 0x56097e3bf380] mmco: unref short failure
[h264 @ 0x56097e3bf380] mmco: unref short failure
[h264 @ 0x555998beabc0] mmco: unref short failure
[h264 @ 0x555998beabc0] mmco: unref short failure
[h264 @ 0x5620799def40] mmco: unref short failure
[h264 @ 0x5620799def40] mmco: unref short failure
[h264 @ 0x5601acdee540] mmco: unref short failure
 19%|█▉        | 377/1945 [1:37:52<7:07:52, 16.37s/it][h264 @ 0x5559968012c0] mmco: unref short failure
[h264 @ 0x55597b840940] mmco: unref short failure
[h264 @ 0x55597b840940] mmco: unref short failure
 19%|█▉        | 378/1945 [1:38:00<6:03:00, 13.90s/it][h264 @ 0x562078751a40] mmco: unref short failure
[h264 @ 0x562078751a40] mmco: unref short failure
 19%|█▉        | 379/1945 [1:38:07<5:14:05, 12.03s/it][h264 @ 0x5559806f0b80] mmco: unref short failure
[h264 @ 0x5559806f0b80] mmco: unref short failure
[h264 @ 0x55599c8360c0] mmco: unref short failure
 20%|█▉        | 380/1945 [1:38:27<6:12:08, 14.27s/it][h264 @ 0x560995df8a00] mmco: unref short failure
[h264 @ 0x5559802cfa00] mmco: unref short failure
 20%|█▉        | 381/1945 [1:38:47<6:54:34, 15.90s/it][h264 @ 0x5609872eed00] mmco: unref short failure
[h264 @ 0x56207a40ec40] mmco: unref short failure
[h264 @ 0x56208954e240] mmco: unref short failure
[h264 @ 0x56208954e240] mmco: unref short failure
[h264 @ 0x56208954e240] mmco: unref short failure
 20%|█▉        | 382/1945 [1:38:53<5:43:25, 13.18s/it] 20%|█▉        | 383/1945 [1:39:03<5:18:00, 12.22s/it] 20%|█▉        | 384/1945 [1:39:07<4:13:42,  9.75s/it][h264 @ 0x55598f657280] mmco: unref short failure
[h264 @ 0x55598f657280] mmco: unref short failure
 20%|█▉        | 385/1945 [1:39:17<4:10:49,  9.65s/it] 20%|█▉        | 386/1945 [1:39:21<3:25:03,  7.89s/it] 20%|█▉        | 387/1945 [1:39:24<2:53:00,  6.66s/it] 20%|█▉        | 388/1945 [1:39:28<2:30:34,  5.80s/it]/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x560258ff3cc0] mmco: unref short failure
[h264 @ 0x560258ff3cc0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5621287eed40] mmco: unref short failure
[h264 @ 0x5621287eed40] mmco: unref short failure
[h264 @ 0x5621287eed40] mmco: unref short failure
[h264 @ 0x5621287eed40] mmco: unref short failure
[h264 @ 0x56025ae37f80] mmco: unref short failure
[h264 @ 0x56025ae37f80] mmco: unref short failure
[h264 @ 0x555a302bef40] mmco: unref short failure
[h264 @ 0x555a302bef40] mmco: unref short failure
[h264 @ 0x56212922fd40] mmco: unref short failure
[h264 @ 0x56212a4c0640] mmco: unref short failure
[h264 @ 0x555a2fab4280] mmco: unref short failure
[h264 @ 0x555a2fab4280] mmco: unref short failure
[h264 @ 0x555a2fab4280] mmco: unref short failure
[h264 @ 0x555a2fab4280] mmco: unref short failure
[h264 @ 0x560a2c69f840] mmco: unref short failure
[h264 @ 0x560a2c69f840] mmco: unref short failure
[h264 @ 0x5621286a41c0] mmco: unref short failure
[h264 @ 0x560a2cbf0f80] mmco: unref short failure
[h264 @ 0x560a2cbf0f80] mmco: unref short failure
[h264 @ 0x560a2e5e3700] mmco: unref short failure
[h264 @ 0x560a2c593680] mmco: unref short failure
[h264 @ 0x560a2c593680] mmco: unref short failure
[h264 @ 0x56212acf9340] mmco: unref short failure
[h264 @ 0x56212acf9340] mmco: unref short failure
[h264 @ 0x56212acf9340] mmco: unref short failure
[h264 @ 0x562129a892c0] mmco: unref short failure
[h264 @ 0x56212ce7c440] mmco: unref short failure
[h264 @ 0x56212ce7c440] mmco: unref short failure
[h264 @ 0x5621295b4240] mmco: unref short failure
[h264 @ 0x5621295b4240] mmco: unref short failure
[h264 @ 0x56212ce7c440] mmco: unref short failure
[h264 @ 0x56212ce7c440] mmco: unref short failure
[h264 @ 0x56025a5de400] mmco: unref short failure
[h264 @ 0x56212ce7c440] mmco: unref short failure
[h264 @ 0x56212ce7c440] mmco: unref short failure
[h264 @ 0x562128702200] mmco: unref short failure
[h264 @ 0x560a2ef95780] mmco: unref short failure
[h264 @ 0x560a2ef95780] mmco: unref short failure
[h264 @ 0x56025d128bc0] mmco: unref short failure
[h264 @ 0x56025d128bc0] mmco: unref short failure
[h264 @ 0x555a305bbdc0] mmco: unref short failure
[h264 @ 0x56025daa4a40] mmco: unref short failure
[h264 @ 0x56025daa4a40] mmco: unref short failure
[h264 @ 0x555a3018f5c0] mmco: unref short failure
[h264 @ 0x555a3018f5c0] mmco: unref short failure
[h264 @ 0x555a3038cb80] mmco: unref short failure
[h264 @ 0x555a3add2880] mmco: unref short failure
[h264 @ 0x560a2d7901c0] mmco: unref short failure
[h264 @ 0x560a2f389340] mmco: unref short failure
[h264 @ 0x560a2f389340] mmco: unref short failure
[h264 @ 0x56025adbf900] mmco: unref short failure
[h264 @ 0x56025adbf900] mmco: unref short failure
[h264 @ 0x555a3129a1c0] mmco: unref short failure
 20%|██        | 389/1945 [1:41:47<19:43:15, 45.63s/it][h264 @ 0x555a2fafa440] mmco: unref short failure
[h264 @ 0x555a2fafa440] mmco: unref short failure
 20%|██        | 390/1945 [1:41:54<14:43:13, 34.08s/it][h264 @ 0x560a2dfcbc40] mmco: unref short failure
[h264 @ 0x560a2dfcbc40] mmco: unref short failure
[h264 @ 0x560a2c598980] mmco: unref short failure
 20%|██        | 391/1945 [1:42:02<11:24:22, 26.42s/it] 20%|██        | 392/1945 [1:42:09<8:47:53, 20.40s/it] [h264 @ 0x560a324f6640] mmco: unref short failure
[h264 @ 0x560a324f6640] mmco: unref short failure
[h264 @ 0x560a324f6640] mmco: unref short failure
[h264 @ 0x560a324f6640] mmco: unref short failure
[h264 @ 0x560a324f6640] mmco: unref short failure
[h264 @ 0x560a324f6640] mmco: unref short failure
 20%|██        | 393/1945 [1:42:16<7:03:37, 16.38s/it][h264 @ 0x56025bf851c0] mmco: unref short failure
[h264 @ 0x56025bf851c0] mmco: unref short failure
[h264 @ 0x56212ce89440] mmco: unref short failure
[h264 @ 0x56212ce89440] mmco: unref short failure
 20%|██        | 394/1945 [1:42:23<5:50:28, 13.56s/it][h264 @ 0x560a2d50d840] mmco: unref short failure
[h264 @ 0x560a2d50d840] mmco: unref short failure
 20%|██        | 395/1945 [1:42:30<5:02:33, 11.71s/it][h264 @ 0x56212d460000] mmco: unref short failure
[h264 @ 0x56212d460000] mmco: unref short failure
[h264 @ 0x560a2c4d7d80] mmco: unref short failure
[h264 @ 0x560a2c4d7d80] mmco: unref short failure
[h264 @ 0x560a2c533000] mmco: unref short failure
[h264 @ 0x56025d549ec0] mmco: unref short failure
[h264 @ 0x56025d549ec0] mmco: unref short failure
 20%|██        | 396/1945 [1:42:38<4:32:51, 10.57s/it][h264 @ 0x560a310b4500] mmco: unref short failure
[h264 @ 0x560a310b4500] mmco: unref short failure
[h264 @ 0x560a310b4500] mmco: unref short failure
[h264 @ 0x56212a3fcd40] mmco: unref short failure
[h264 @ 0x555a33d2fcc0] mmco: unref short failure
[h264 @ 0x555a33d2fcc0] mmco: unref short failure
[h264 @ 0x555a352d1440] mmco: unref short failure
[h264 @ 0x555a352d1440] mmco: unref short failure
[h264 @ 0x560a2d9213c0] mmco: unref short failure
[h264 @ 0x560a2d9213c0] mmco: unref short failure
[h264 @ 0x555a34764f00] mmco: unref short failure
[h264 @ 0x560a318b0900] mmco: unref short failure
[h264 @ 0x56025ca3a640] mmco: unref short failure
[h264 @ 0x56025ec8e980] mmco: unref short failure
[h264 @ 0x560a3399d580] mmco: unref short failure
[h264 @ 0x560a3399d580] mmco: unref short failure
[h264 @ 0x560a3399d580] mmco: unref short failure
[h264 @ 0x560a3399d580] mmco: unref short failure
[h264 @ 0x56025ecd67c0] mmco: unref short failure
[h264 @ 0x560a30853cc0] mmco: unref short failure
[h264 @ 0x560a2d06a540] mmco: unref short failure
[h264 @ 0x560a2d06a540] mmco: unref short failure
[h264 @ 0x562134e696c0] mmco: unref short failure
[h264 @ 0x555a30696500] mmco: unref short failure
[h264 @ 0x555a31761fc0] mmco: unref short failure
[h264 @ 0x555a31761fc0] mmco: unref short failure
[h264 @ 0x555a32d9adc0] mmco: unref short failure
[h264 @ 0x56025ba6a200] mmco: unref short failure
[h264 @ 0x56025ba6a200] mmco: unref short failure
[h264 @ 0x5621331b7ac0] mmco: unref short failure
[h264 @ 0x56025a657ac0] mmco: unref short failure
[h264 @ 0x56025a657ac0] mmco: unref short failure
 20%|██        | 397/1945 [1:43:50<12:27:35, 28.98s/it][h264 @ 0x56025c04d880] mmco: unref short failure
[h264 @ 0x56025c04d880] mmco: unref short failure
[h264 @ 0x56212a3fcb00] mmco: unref short failure
 20%|██        | 398/1945 [1:43:57<9:36:05, 22.34s/it] [h264 @ 0x560a3457df80] mmco: unref short failure
 21%|██        | 399/1945 [1:44:04<7:39:24, 17.83s/it]09/08/2024 22:25:25 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.2177603244781494, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.045496370643377304, 'loss_ret%tv%ta--finetune_area/loss_area': 1.4432512521743774, 'loss_ret%tv%ta--finetune_area/total_loss': 4.706508159637451}
[h264 @ 0x560a37ca3d00] mmco: unref short failure
[h264 @ 0x560a37ca3d00] mmco: unref short failure
 21%|██        | 400/1945 [1:44:12<6:23:14, 14.88s/it][h264 @ 0x560263295dc0] mmco: unref short failure
 21%|██        | 401/1945 [1:44:19<5:23:43, 12.58s/it][h264 @ 0x555a34392a40] mmco: unref short failure
[h264 @ 0x555a34392a40] mmco: unref short failure
[h264 @ 0x562133806bc0] mmco: unref short failure
 21%|██        | 402/1945 [1:44:27<4:46:26, 11.14s/it][h264 @ 0x555a32e955c0] mmco: unref short failure
[h264 @ 0x555a32e955c0] mmco: unref short failure
[h264 @ 0x560261a83d80] mmco: unref short failure
[h264 @ 0x560261a83d80] mmco: unref short failure
[h264 @ 0x56212b605400] mmco: unref short failure
 21%|██        | 403/1945 [1:44:35<4:17:29, 10.02s/it][h264 @ 0x56212a4e4d80] mmco: unref short failure
[h264 @ 0x56212a4e4d80] mmco: unref short failure
 21%|██        | 404/1945 [1:44:42<3:54:07,  9.12s/it][h264 @ 0x560a3084f500] mmco: unref short failure
[h264 @ 0x562128fd0c80] mmco: unref short failure
[h264 @ 0x555a3089f940] mmco: unref short failure
[h264 @ 0x560a30d53d80] mmco: unref short failure
[h264 @ 0x560a30d53d80] mmco: unref short failure
[h264 @ 0x560a2c619b80] mmco: unref short failure
[h264 @ 0x56025eee1ac0] mmco: unref short failure
[h264 @ 0x56212fc3d000] mmco: unref short failure
[h264 @ 0x56025ff67300] mmco: unref short failure
[h264 @ 0x56025ff67300] mmco: unref short failure
[h264 @ 0x56025a7beec0] mmco: unref short failure
[h264 @ 0x56025a7beec0] mmco: unref short failure
[h264 @ 0x555a37aa94c0] mmco: unref short failure
[h264 @ 0x555a37aa94c0] mmco: unref short failure
[h264 @ 0x555a388ce540] mmco: unref short failure
[h264 @ 0x56025c1babc0] mmco: unref short failure
[h264 @ 0x56025c1babc0] mmco: unref short failure
[h264 @ 0x560a39ba87c0] mmco: unref short failure
[h264 @ 0x560a2de1a4c0] mmco: unref short failure
[h264 @ 0x560a2de1a4c0] mmco: unref short failure
[h264 @ 0x560a3b71e840] mmco: unref short failure
 21%|██        | 405/1945 [1:45:56<12:15:33, 28.66s/it][h264 @ 0x562128b009c0] mmco: unref short failure
[h264 @ 0x562128b009c0] mmco: unref short failure
 21%|██        | 406/1945 [1:46:04<9:36:27, 22.47s/it] [h264 @ 0x562132bb2bc0] mmco: unref short failure
[h264 @ 0x562132bb2bc0] mmco: unref short failure
 21%|██        | 407/1945 [1:46:11<7:41:26, 18.00s/it][h264 @ 0x562132d8df00] mmco: unref short failure
[h264 @ 0x5602609f1c00] mmco: unref short failure
[h264 @ 0x5602609f1c00] mmco: unref short failure
 21%|██        | 408/1945 [1:46:19<6:21:50, 14.91s/it][h264 @ 0x562132e68700] mmco: unref short failure
[h264 @ 0x56025dbb5d40] mmco: unref short failure
[h264 @ 0x56025dbb5d40] mmco: unref short failure
 21%|██        | 409/1945 [1:46:28<5:34:35, 13.07s/it] 21%|██        | 410/1945 [1:46:35<4:51:26, 11.39s/it][h264 @ 0x562133506640] mmco: unref short failure
[h264 @ 0x562133506640] mmco: unref short failure
[h264 @ 0x560a37aa0000] mmco: unref short failure
[h264 @ 0x560a37aa0000] mmco: unref short failure
 21%|██        | 411/1945 [1:46:44<4:27:15, 10.45s/it] 21%|██        | 412/1945 [1:46:51<4:02:42,  9.50s/it][h264 @ 0x5602646debc0] mmco: unref short failure
[h264 @ 0x560a2d3b47c0] mmco: unref short failure
[h264 @ 0x56025c6e9300] mmco: unref short failure
[h264 @ 0x56025c6e9300] mmco: unref short failure
[h264 @ 0x56212a3a5b00] mmco: unref short failure
[h264 @ 0x56212a3a5b00] mmco: unref short failure
[h264 @ 0x562128cc9cc0] mmco: unref short failure
[h264 @ 0x562128cc9cc0] mmco: unref short failure
[h264 @ 0x562128cc9cc0] mmco: unref short failure
[h264 @ 0x562134c38000] mmco: unref short failure
[h264 @ 0x562139220d80] mmco: unref short failure
[h264 @ 0x56212a3eb140] mmco: unref short failure
[h264 @ 0x555a426b3b40] mmco: unref short failure
[h264 @ 0x56212f1e6940] mmco: unref short failure
 21%|██        | 413/1945 [1:47:58<11:22:51, 26.74s/it][h264 @ 0x56025cc27440] mmco: unref short failure
[h264 @ 0x56025cc27440] mmco: unref short failure
[h264 @ 0x56025cc27440] mmco: unref short failure
[h264 @ 0x56025cc27440] mmco: unref short failure
 21%|██▏       | 414/1945 [1:48:07<9:03:28, 21.30s/it] [h264 @ 0x5602621ec480] mmco: unref short failure
 21%|██▏       | 415/1945 [1:48:14<7:17:29, 17.16s/it][h264 @ 0x555a35a23400] mmco: unref short failure
[h264 @ 0x560a2d8f6080] mmco: unref short failure
[h264 @ 0x560a2d8f6080] mmco: unref short failure
 21%|██▏       | 416/1945 [1:48:22<6:05:54, 14.36s/it][h264 @ 0x56213321c200] mmco: unref short failure
[h264 @ 0x56213321c200] mmco: unref short failure
 21%|██▏       | 417/1945 [1:48:29<5:12:33, 12.27s/it][h264 @ 0x555a37898740] mmco: unref short failure
 21%|██▏       | 418/1945 [1:48:37<4:35:07, 10.81s/it][h264 @ 0x555a3e0fcc00] mmco: unref short failure
[h264 @ 0x555a3e0fcc00] mmco: unref short failure
[h264 @ 0x56025da06280] mmco: unref short failure
[h264 @ 0x560a38255380] mmco: unref short failure
[h264 @ 0x560a38255380] mmco: unref short failure
[h264 @ 0x560a38255380] mmco: unref short failure
[h264 @ 0x560a38255380] mmco: unref short failure
 22%|██▏       | 419/1945 [1:48:45<4:15:46, 10.06s/it][h264 @ 0x56025e28f500] mmco: unref short failure
[h264 @ 0x56025e28f500] mmco: unref short failure
 22%|██▏       | 420/1945 [1:48:52<3:52:56,  9.16s/it][h264 @ 0x56026b7fd9c0] mmco: unref short failure
[h264 @ 0x56026b7fd9c0] mmco: unref short failure
[h264 @ 0x56212ec36640] mmco: unref short failure
[h264 @ 0x56212ec36640] mmco: unref short failure
[h264 @ 0x56212ec36640] mmco: unref short failure
[h264 @ 0x56212ec36640] mmco: unref short failure
[h264 @ 0x555a378982c0] mmco: unref short failure
[h264 @ 0x56026f2a08c0] mmco: unref short failure
[h264 @ 0x56026f2a08c0] mmco: unref short failure
[h264 @ 0x560a329449c0] mmco: unref short failure
[h264 @ 0x560a329449c0] mmco: unref short failure
[h264 @ 0x555a30b40f80] mmco: unref short failure
[h264 @ 0x555a30b40f80] mmco: unref short failure
[h264 @ 0x560a433a1e00] mmco: unref short failure
[h264 @ 0x560a433a1e00] mmco: unref short failure
 22%|██▏       | 421/1945 [1:49:55<10:39:55, 25.19s/it][h264 @ 0x555a3efa1f40] mmco: unref short failure
 22%|██▏       | 422/1945 [1:50:02<8:23:42, 19.84s/it] [h264 @ 0x562128584d00] mmco: unref short failure
[h264 @ 0x562128584d00] mmco: unref short failure
 22%|██▏       | 423/1945 [1:50:10<6:53:26, 16.30s/it][h264 @ 0x562135c2f600] mmco: unref short failure
[h264 @ 0x562135c2f600] mmco: unref short failure
[h264 @ 0x560a3673f540] mmco: unref short failure
[h264 @ 0x562128d04800] mmco: unref short failure
[h264 @ 0x562128d04800] mmco: unref short failure
 22%|██▏       | 424/1945 [1:50:18<5:47:32, 13.71s/it][h264 @ 0x560a38255180] mmco: unref short failure
 22%|██▏       | 425/1945 [1:50:25<4:58:34, 11.79s/it][h264 @ 0x555a30970740] mmco: unref short failure
[h264 @ 0x56212cf08240] mmco: unref short failure
[h264 @ 0x56212cf08240] mmco: unref short failure
[h264 @ 0x56212cf08240] mmco: unref short failure
[h264 @ 0x56212cf08240] mmco: unref short failure
[h264 @ 0x56212cf08240] mmco: unref short failure
[h264 @ 0x56212cf08240] mmco: unref short failure
[h264 @ 0x555a43997180] mmco: unref short failure
 22%|██▏       | 426/1945 [1:50:32<4:21:46, 10.34s/it][h264 @ 0x5602681e9b00] mmco: unref short failure
[h264 @ 0x5602681e9b00] mmco: unref short failure
[h264 @ 0x560a300c3340] mmco: unref short failure
[h264 @ 0x560a300c3340] mmco: unref short failure
 22%|██▏       | 427/1945 [1:50:39<3:57:09,  9.37s/it][h264 @ 0x56212cfa7100] mmco: unref short failure
[h264 @ 0x560a37818740] mmco: unref short failure
[h264 @ 0x560a37818740] mmco: unref short failure
[h264 @ 0x562138c468c0] mmco: unref short failure
[h264 @ 0x560a3cb05f40] mmco: unref short failure
 22%|██▏       | 428/1945 [1:50:46<3:40:22,  8.72s/it][h264 @ 0x555a3bd92d40] mmco: unref short failure
[h264 @ 0x56026999dbc0] mmco: unref short failure
[h264 @ 0x56026999dbc0] mmco: unref short failure
[h264 @ 0x560a2f080480] mmco: unref short failure
[h264 @ 0x560a2f080480] mmco: unref short failure
[h264 @ 0x560a3e906200] mmco: unref short failure
[h264 @ 0x560a3e906200] mmco: unref short failure
[h264 @ 0x560264f92840] mmco: unref short failure
[h264 @ 0x560264f92840] mmco: unref short failure
[h264 @ 0x560a3b693a80] mmco: unref short failure
[h264 @ 0x560a3b693a80] mmco: unref short failure
[h264 @ 0x560a3b693a80] mmco: unref short failure
[h264 @ 0x555a31d028c0] mmco: unref short failure
[h264 @ 0x555a31d028c0] mmco: unref short failure
[h264 @ 0x56213d5e3d80] mmco: unref short failure
[h264 @ 0x56213d5e3d80] mmco: unref short failure
[h264 @ 0x56026f8be940] mmco: unref short failure
[h264 @ 0x56026f8be940] mmco: unref short failure
[h264 @ 0x56026a5f3d00] mmco: unref short failure
[h264 @ 0x56026a5f3d00] mmco: unref short failure
[h264 @ 0x56212e336880] mmco: unref short failure
[h264 @ 0x56212e336880] mmco: unref short failure
[h264 @ 0x56026c085800] mmco: unref short failure
 22%|██▏       | 429/1945 [1:51:59<11:44:57, 27.90s/it][h264 @ 0x560a37c11b40] mmco: unref short failure
[h264 @ 0x560a37c11b40] mmco: unref short failure
 22%|██▏       | 430/1945 [1:52:06<9:06:37, 21.65s/it] [h264 @ 0x5602644a8380] mmco: unref short failure
 22%|██▏       | 431/1945 [1:52:14<7:23:17, 17.57s/it][h264 @ 0x5602644a8380] mmco: unref short failure
[h264 @ 0x562134ffac40] mmco: unref short failure
 22%|██▏       | 432/1945 [1:52:21<6:04:33, 14.46s/it] 22%|██▏       | 433/1945 [1:52:29<5:11:07, 12.35s/it][h264 @ 0x555a307ef840] mmco: unref short failure
[h264 @ 0x555a307ef840] mmco: unref short failure
[h264 @ 0x560265294600] mmco: unref short failure
 22%|██▏       | 434/1945 [1:52:37<4:38:55, 11.08s/it][h264 @ 0x555a422a3b80] mmco: unref short failure
[h264 @ 0x555a422a3b80] mmco: unref short failure
[h264 @ 0x56213db59880] mmco: unref short failure
[h264 @ 0x56213db59880] mmco: unref short failure
[h264 @ 0x560a44406f00] mmco: unref short failure
[h264 @ 0x560a44406f00] mmco: unref short failure
[h264 @ 0x56213ae3f500] mmco: unref short failure
[h264 @ 0x56212bdf6580] mmco: unref short failure
 22%|██▏       | 435/1945 [1:52:46<4:28:25, 10.67s/it][h264 @ 0x56026a692540] mmco: unref short failure
[h264 @ 0x56026a692540] mmco: unref short failure
 22%|██▏       | 436/1945 [1:52:54<4:03:48,  9.69s/it][h264 @ 0x560a3f31d080] mmco: unref short failure
[h264 @ 0x56025b39f780] mmco: unref short failure
[h264 @ 0x560a3d1141c0] mmco: unref short failure
[h264 @ 0x560a3d1141c0] mmco: unref short failure
[h264 @ 0x56212c294d40] mmco: unref short failure
[h264 @ 0x56212c294d40] mmco: unref short failure
[h264 @ 0x560a3290e840] mmco: unref short failure
[h264 @ 0x560a304200c0] mmco: unref short failure
[h264 @ 0x560a304200c0] mmco: unref short failure
[h264 @ 0x560271cab180] mmco: unref short failure
[h264 @ 0x560271cab180] mmco: unref short failure
[h264 @ 0x5621338a6240] mmco: unref short failure
[h264 @ 0x5621338a6240] mmco: unref short failure
[h264 @ 0x560a413bd700] mmco: unref short failure
[h264 @ 0x56213d360cc0] mmco: unref short failure
[h264 @ 0x56026cbc0500] mmco: unref short failure
[h264 @ 0x56026cbc0500] mmco: unref short failure
[h264 @ 0x560a44385b80] mmco: unref short failure
[h264 @ 0x555a40809ec0] mmco: unref short failure
[h264 @ 0x555a40809ec0] mmco: unref short failure
[h264 @ 0x555a389a5540] mmco: unref short failure
[h264 @ 0x56025c00db40] mmco: unref short failure
[h264 @ 0x56025df737c0] mmco: unref short failure
[h264 @ 0x56025b036580] mmco: unref short failure
[h264 @ 0x56025b036580] mmco: unref short failure
[h264 @ 0x562138beb4c0] mmco: unref short failure
[h264 @ 0x560261f08240] mmco: unref short failure
[h264 @ 0x560261f08240] mmco: unref short failure
 22%|██▏       | 437/1945 [1:54:10<12:22:18, 29.53s/it][h264 @ 0x56213dbc7240] mmco: unref short failure
[h264 @ 0x56213dbc7240] mmco: unref short failure
[h264 @ 0x560a3e906d40] mmco: unref short failure
[h264 @ 0x560a3e906d40] mmco: unref short failure
 23%|██▎       | 438/1945 [1:54:18<9:40:12, 23.10s/it] [h264 @ 0x555a41d11780] mmco: unref short failure
 23%|██▎       | 439/1945 [1:54:25<7:41:53, 18.40s/it][h264 @ 0x562135bbd980] mmco: unref short failure
[h264 @ 0x562135bbd980] mmco: unref short failure
[h264 @ 0x562135bbd980] mmco: unref short failure
[h264 @ 0x562135bbd980] mmco: unref short failure
[h264 @ 0x555a338d9f80] mmco: unref short failure
[h264 @ 0x555a338d9f80] mmco: unref short failure
[h264 @ 0x56213e002c00] mmco: unref short failure
[h264 @ 0x56213e002c00] mmco: unref short failure
 23%|██▎       | 440/1945 [1:54:31<6:09:43, 14.74s/it] 23%|██▎       | 441/1945 [1:54:38<5:09:24, 12.34s/it][h264 @ 0x56026572b080] mmco: unref short failure
[h264 @ 0x56026572b080] mmco: unref short failure
[h264 @ 0x5621341fbb80] mmco: unref short failure
[h264 @ 0x5621341fbb80] mmco: unref short failure
[h264 @ 0x560a359484c0] mmco: unref short failure
 23%|██▎       | 442/1945 [1:54:45<4:24:20, 10.55s/it][h264 @ 0x555a46048340] mmco: unref short failure
[h264 @ 0x555a46048340] mmco: unref short failure
[h264 @ 0x560a31179940] mmco: unref short failure
[h264 @ 0x560a31179940] mmco: unref short failure
 23%|██▎       | 443/1945 [1:54:51<3:54:47,  9.38s/it][h264 @ 0x560a3290e5c0] mmco: unref short failure
[h264 @ 0x560a3290e5c0] mmco: unref short failure
[h264 @ 0x555a421b4d00] mmco: unref short failure
[h264 @ 0x555a421b4d00] mmco: unref short failure
[h264 @ 0x555a4172d300] mmco: unref short failure
[h264 @ 0x555a4172d300] mmco: unref short failure
 23%|██▎       | 444/1945 [1:54:58<3:36:36,  8.66s/it][h264 @ 0x56025ce86980] mmco: unref short failure
[h264 @ 0x56025ce86980] mmco: unref short failure
[h264 @ 0x562135323380] mmco: unref short failure
[h264 @ 0x555a46dde840] mmco: unref short failure
[h264 @ 0x555a46dde840] mmco: unref short failure
[h264 @ 0x555a3d1cbd00] mmco: unref short failure
[h264 @ 0x555a3d1cbd00] mmco: unref short failure
[h264 @ 0x555a3d1cbd00] mmco: unref short failure
[h264 @ 0x555a420364c0] mmco: unref short failure
[h264 @ 0x555a420364c0] mmco: unref short failure
[h264 @ 0x560a2d8e5780] mmco: unref short failure
[h264 @ 0x5621418443c0] mmco: unref short failure
[h264 @ 0x560a371eda40] mmco: unref short failure
[h264 @ 0x555a3c513b80] mmco: unref short failure
[h264 @ 0x555a3c513b80] mmco: unref short failure
[h264 @ 0x555a3c513b80] mmco: unref short failure
[h264 @ 0x555a3c513b80] mmco: unref short failure
[h264 @ 0x555a383f2480] mmco: unref short failure
 23%|██▎       | 445/1945 [1:56:06<10:59:43, 26.39s/it] 23%|██▎       | 446/1945 [1:56:13<8:35:05, 20.62s/it]  23%|██▎       | 447/1945 [1:56:19<6:45:44, 16.25s/it][h264 @ 0x56025fce6080] mmco: unref short failure
 23%|██▎       | 448/1945 [1:56:26<5:34:36, 13.41s/it] 23%|██▎       | 449/1945 [1:56:32<4:36:04, 11.07s/it][h264 @ 0x560a2ebe0c40] mmco: unref short failure
[h264 @ 0x560a2ebe0c40] mmco: unref short failure
09/08/2024 22:37:52 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.2254860401153564, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.042843930423259735, 'loss_ret%tv%ta--finetune_area/loss_area': 1.3943417072296143, 'loss_ret%tv%ta--finetune_area/total_loss': 4.6626715660095215}
[h264 @ 0x56212c2ffec0] mmco: unref short failure
[h264 @ 0x56212c2ffec0] mmco: unref short failure
[h264 @ 0x56026a018a80] mmco: unref short failure
[h264 @ 0x56026a018a80] mmco: unref short failure
[h264 @ 0x56212c2ffec0] mmco: unref short failure
[h264 @ 0x56212c2ffec0] mmco: unref short failure
 23%|██▎       | 450/1945 [1:56:38<3:58:41,  9.58s/it] 23%|██▎       | 451/1945 [1:56:44<3:34:00,  8.59s/it][h264 @ 0x555a3b3d7fc0] mmco: unref short failure
[h264 @ 0x555a3b3d7fc0] mmco: unref short failure
 23%|██▎       | 452/1945 [1:56:51<3:19:27,  8.02s/it][h264 @ 0x555a37a44740] mmco: unref short failure
[h264 @ 0x56213e1b7980] mmco: unref short failure
[h264 @ 0x56213e1b7980] mmco: unref short failure
[h264 @ 0x560a3cfedc40] mmco: unref short failure
[h264 @ 0x560a3cfedc40] mmco: unref short failure
[h264 @ 0x555a38a20400] mmco: unref short failure
[h264 @ 0x555a38a20400] mmco: unref short failure
[h264 @ 0x555a38c6bf00] mmco: unref short failure
[h264 @ 0x560a3e6b2d80] mmco: unref short failure
[h264 @ 0x560a3e6b2d80] mmco: unref short failure
[h264 @ 0x560a38eaa900] mmco: unref short failure
[h264 @ 0x560a38eaa900] mmco: unref short failure
[h264 @ 0x555a326cb9c0] mmco: unref short failure
[h264 @ 0x555a326cb9c0] mmco: unref short failure
[h264 @ 0x555a46dde840] mmco: unref short failure
[h264 @ 0x555a46dde840] mmco: unref short failure
[h264 @ 0x560a3d791800] mmco: unref short failure
[h264 @ 0x56213d0a6140] mmco: unref short failure
[h264 @ 0x56026c40c600] mmco: unref short failure
[h264 @ 0x555a396ca540] mmco: unref short failure
[h264 @ 0x555a396ca540] mmco: unref short failure
[h264 @ 0x56026c09f500] mmco: unref short failure
[h264 @ 0x56213adae140] mmco: unref short failure
[h264 @ 0x56213adae140] mmco: unref short failure
[h264 @ 0x56213adae140] mmco: unref short failure
[h264 @ 0x555a472b1400] mmco: unref short failure
[h264 @ 0x555a472b1400] mmco: unref short failure
[h264 @ 0x56026f5a6280] mmco: unref short failure
[h264 @ 0x56213360c980] mmco: unref short failure
[h264 @ 0x56213121d2c0] mmco: unref short failure
[h264 @ 0x56213121d2c0] mmco: unref short failure
[h264 @ 0x560a418d9840] mmco: unref short failure
 23%|██▎       | 453/1945 [1:58:17<13:00:57, 31.41s/it][h264 @ 0x555a39939ec0] mmco: unref short failure
[h264 @ 0x560a3ca971c0] mmco: unref short failure
[h264 @ 0x560a3ca971c0] mmco: unref short failure
 23%|██▎       | 454/1945 [1:58:24<9:59:10, 24.11s/it] [h264 @ 0x56026a4c9f00] mmco: unref short failure
[h264 @ 0x56026a4c9f00] mmco: unref short failure
[h264 @ 0x555a4456d400] mmco: unref short failure
[h264 @ 0x555a4456d400] mmco: unref short failure
not have audios 7wavFXW3AFw.7
 23%|██▎       | 455/1945 [1:58:31<7:50:46, 18.96s/it][h264 @ 0x56213b0b04c0] mmco: unref short failure
[h264 @ 0x56213b0b04c0] mmco: unref short failure
[h264 @ 0x56026511ab00] mmco: unref short failure
[h264 @ 0x56026511ab00] mmco: unref short failure
[h264 @ 0x562130044bc0] mmco: unref short failure
 23%|██▎       | 456/1945 [1:58:38<6:20:41, 15.34s/it][h264 @ 0x5621302549c0] mmco: unref short failure
[h264 @ 0x5621302549c0] mmco: unref short failure
[h264 @ 0x5621302549c0] mmco: unref short failure
[h264 @ 0x5602606e4780] mmco: unref short failure
 23%|██▎       | 457/1945 [1:58:45<5:19:02, 12.86s/it] 24%|██▎       | 458/1945 [1:58:51<4:32:29, 10.99s/it][h264 @ 0x56025d22bb00] mmco: unref short failure
[h264 @ 0x555a42177580] mmco: unref short failure
 24%|██▎       | 459/1945 [1:58:59<4:04:40,  9.88s/it][h264 @ 0x56025b69ff40] mmco: unref short failure
 24%|██▎       | 460/1945 [1:59:06<3:45:37,  9.12s/it][h264 @ 0x560270682ac0] mmco: unref short failure
[h264 @ 0x555a33d0bd80] mmco: unref short failure
[h264 @ 0x555a33d0bd80] mmco: unref short failure
[h264 @ 0x560a2ff2e700] mmco: unref short failure
[h264 @ 0x560a2ff2e700] mmco: unref short failure
[h264 @ 0x56026a0984c0] mmco: unref short failure
[h264 @ 0x56026a0984c0] mmco: unref short failure
[h264 @ 0x560a3e57f140] mmco: unref short failure
[h264 @ 0x560262e60640] mmco: unref short failure
[h264 @ 0x555a3f75ba40] mmco: unref short failure
[h264 @ 0x555a3f75ba40] mmco: unref short failure
[h264 @ 0x560261b99bc0] mmco: unref short failure
[h264 @ 0x560261b99bc0] mmco: unref short failure
[h264 @ 0x560261b99bc0] mmco: unref short failure
[h264 @ 0x560261b99bc0] mmco: unref short failure
[h264 @ 0x562129574240] mmco: unref short failure
[h264 @ 0x562129574240] mmco: unref short failure
[h264 @ 0x560a3ee8dac0] mmco: unref short failure
[h264 @ 0x560a3fa06a40] mmco: unref short failure
[h264 @ 0x5602705fccc0] mmco: unref short failure
[h264 @ 0x5602705fccc0] mmco: unref short failure
[h264 @ 0x560a421ae140] mmco: unref short failure
[h264 @ 0x560a421ae140] mmco: unref short failure
[h264 @ 0x560a421ae140] mmco: unref short failure
[h264 @ 0x560a421ae140] mmco: unref short failure
[h264 @ 0x56026a579880] mmco: unref short failure
[h264 @ 0x56026a579880] mmco: unref short failure
[h264 @ 0x555a303eda00] mmco: unref short failure
[h264 @ 0x555a303eda00] mmco: unref short failure
[h264 @ 0x56212b262d80] mmco: unref short failure
[h264 @ 0x56212b262d80] mmco: unref short failure
[h264 @ 0x56212b262d80] mmco: unref short failure
[h264 @ 0x56212b262d80] mmco: unref short failure
[h264 @ 0x56026a49a580] mmco: unref short failure
 24%|██▎       | 461/1945 [2:00:20<11:51:44, 28.78s/it][h264 @ 0x56212a92e080] mmco: unref short failure
[h264 @ 0x56025e79c840] mmco: unref short failure
[h264 @ 0x56025e79c840] mmco: unref short failure
[h264 @ 0x560a30f81800] mmco: unref short failure
 24%|██▍       | 462/1945 [2:00:28<9:10:41, 22.28s/it] [h264 @ 0x555a35b46c40] mmco: unref short failure
[h264 @ 0x56213fde04c0] mmco: unref short failure
 24%|██▍       | 463/1945 [2:00:35<7:17:18, 17.71s/it][h264 @ 0x562129ff8e00] mmco: unref short failure
[h264 @ 0x560a2e242700] mmco: unref short failure
[h264 @ 0x560a2e242700] mmco: unref short failure
[h264 @ 0x56212d30c780] mmco: unref short failure
[h264 @ 0x56212d30c780] mmco: unref short failure
 24%|██▍       | 464/1945 [2:00:41<5:55:17, 14.39s/it][h264 @ 0x562129596ec0] mmco: unref short failure
 24%|██▍       | 465/1945 [2:00:48<4:56:43, 12.03s/it][h264 @ 0x56212b8dd740] mmco: unref short failure
[h264 @ 0x555a49fc31c0] mmco: unref short failure
[h264 @ 0x555a49fc31c0] mmco: unref short failure
 24%|██▍       | 466/1945 [2:00:55<4:19:31, 10.53s/it][h264 @ 0x560a3caa4840] mmco: unref short failure
[h264 @ 0x5621366513c0] mmco: unref short failure
[h264 @ 0x5621366513c0] mmco: unref short failure
 24%|██▍       | 467/1945 [2:01:02<3:54:19,  9.51s/it] 24%|██▍       | 468/1945 [2:01:09<3:38:12,  8.86s/it][h264 @ 0x5602628693c0] mmco: unref short failure
[h264 @ 0x56026ae29500] mmco: unref short failure
[h264 @ 0x560a38157600] mmco: unref short failure
[h264 @ 0x560a38157600] mmco: unref short failure
[h264 @ 0x560a432d6d00] mmco: unref short failure
[h264 @ 0x560a432d6d00] mmco: unref short failure
[h264 @ 0x562132c51780] mmco: unref short failure
[h264 @ 0x560a3ab4af00] mmco: unref short failure
[h264 @ 0x56027241b580] mmco: unref short failure
[h264 @ 0x562129232940] mmco: unref short failure
[h264 @ 0x562129232940] mmco: unref short failure
[h264 @ 0x56212df75dc0] mmco: unref short failure
[h264 @ 0x56212df75dc0] mmco: unref short failure
[h264 @ 0x56213ff4b9c0] mmco: unref short failure
[h264 @ 0x56213ff4b9c0] mmco: unref short failure
[h264 @ 0x560a40f24840] mmco: unref short failure
[h264 @ 0x560a40f24840] mmco: unref short failure
[h264 @ 0x5621291d7000] mmco: unref short failure
[h264 @ 0x5621291d7000] mmco: unref short failure
[h264 @ 0x562144d8cd80] mmco: unref short failure
 24%|██▍       | 469/1945 [2:02:16<10:43:57, 26.18s/it][h264 @ 0x560a3d0dd980] mmco: unref short failure
[h264 @ 0x560a3d0dd980] mmco: unref short failure
 24%|██▍       | 470/1945 [2:02:23<8:24:47, 20.53s/it] [h264 @ 0x56026b4cb940] mmco: unref short failure
[h264 @ 0x560a4352e900] mmco: unref short failure
[h264 @ 0x560a2ecaa580] mmco: unref short failure
[h264 @ 0x560a2ecaa580] mmco: unref short failure
 24%|██▍       | 471/1945 [2:02:30<6:42:06, 16.37s/it][h264 @ 0x560a3f228200] mmco: unref short failure
[h264 @ 0x560a3f228200] mmco: unref short failure
 24%|██▍       | 472/1945 [2:02:38<5:39:06, 13.81s/it][h264 @ 0x56026fa22180] mmco: unref short failure
[h264 @ 0x56026fa22180] mmco: unref short failure
 24%|██▍       | 473/1945 [2:02:45<4:52:14, 11.91s/it][h264 @ 0x56213b820dc0] mmco: unref short failure
[h264 @ 0x555a3c203ac0] mmco: unref short failure
[h264 @ 0x56213c5dae80] mmco: unref short failure
[h264 @ 0x56213c5dae80] mmco: unref short failure
 24%|██▍       | 474/1945 [2:02:53<4:23:19, 10.74s/it][h264 @ 0x5602650e3e80] mmco: unref short failure
[h264 @ 0x5602650e3e80] mmco: unref short failure
 24%|██▍       | 475/1945 [2:03:00<3:53:58,  9.55s/it][h264 @ 0x56025e5b0440] mmco: unref short failure
[h264 @ 0x56025e5b0440] mmco: unref short failure
[h264 @ 0x56025e5b0440] mmco: unref short failure
[h264 @ 0x56025e5b0440] mmco: unref short failure
[h264 @ 0x560a3083dc40] mmco: unref short failure
[h264 @ 0x560a3083dc40] mmco: unref short failure
[h264 @ 0x555a30e8fb80] mmco: unref short failure
[h264 @ 0x555a30e8fb80] mmco: unref short failure
[h264 @ 0x555a30e8fb80] mmco: unref short failure
[h264 @ 0x555a30e8fb80] mmco: unref short failure
 24%|██▍       | 476/1945 [2:03:07<3:37:53,  8.90s/it][h264 @ 0x555a30e8fb80] mmco: unref short failure
[h264 @ 0x555a30e8fb80] mmco: unref short failure
[h264 @ 0x562129fc8980] mmco: unref short failure
[h264 @ 0x562129fc8980] mmco: unref short failure
[h264 @ 0x555a30e8fb80] mmco: unref short failure
[h264 @ 0x555a30e8fb80] mmco: unref short failure
[h264 @ 0x560260c08c80] mmco: unref short failure
[h264 @ 0x560260c08c80] mmco: unref short failure
[h264 @ 0x560a2effae00] mmco: unref short failure
[h264 @ 0x560a3f02c7c0] mmco: unref short failure
[h264 @ 0x560a3f02c7c0] mmco: unref short failure
[h264 @ 0x562143ea33c0] mmco: unref short failure
[h264 @ 0x562143ea33c0] mmco: unref short failure
[h264 @ 0x562129798fc0] mmco: unref short failure
[h264 @ 0x562129798fc0] mmco: unref short failure
[h264 @ 0x56213e6e1980] mmco: unref short failure
[h264 @ 0x5621326db480] mmco: unref short failure
[h264 @ 0x560a40545f80] mmco: unref short failure
[h264 @ 0x560a40545f80] mmco: unref short failure
[h264 @ 0x560a40545f80] mmco: unref short failure
[h264 @ 0x560a40545f80] mmco: unref short failure
[h264 @ 0x560a3e8a6f00] mmco: unref short failure
[h264 @ 0x560a3e8a6f00] mmco: unref short failure
[h264 @ 0x560a3cf7de80] mmco: unref short failure
[h264 @ 0x560a3cf7de80] mmco: unref short failure
[h264 @ 0x560a2f5b8500] mmco: unref short failure
[h264 @ 0x560a42360780] mmco: unref short failure
[h264 @ 0x560a42360780] mmco: unref short failure
[h264 @ 0x560a4237d600] mmco: unref short failure
[h264 @ 0x560a4237d600] mmco: unref short failure
[h264 @ 0x555a4495ee00] mmco: unref short failure
[h264 @ 0x5621384a0780] mmco: unref short failure
[h264 @ 0x5621384a0780] mmco: unref short failure
 25%|██▍       | 477/1945 [2:04:16<10:56:00, 26.81s/it][h264 @ 0x560a41013680] mmco: unref short failure
[h264 @ 0x560a41013680] mmco: unref short failure
[h264 @ 0x555a4026e540] mmco: unref short failure
[h264 @ 0x562145b7bf00] mmco: unref short failure
[h264 @ 0x562145b7bf00] mmco: unref short failure
 25%|██▍       | 478/1945 [2:04:24<8:36:47, 21.14s/it] [h264 @ 0x562137d81200] mmco: unref short failure
[h264 @ 0x562137d81200] mmco: unref short failure
[h264 @ 0x560a47df5780] mmco: unref short failure
[h264 @ 0x560a3e58f6c0] mmco: unref short failure
[h264 @ 0x560a3e58f6c0] mmco: unref short failure
[h264 @ 0x5602650e3a00] mmco: unref short failure
[h264 @ 0x5602650e3a00] mmco: unref short failure
[h264 @ 0x56212991cd40] mmco: unref short failure
 25%|██▍       | 479/1945 [2:04:31<6:55:04, 16.99s/it] 25%|██▍       | 480/1945 [2:04:39<5:45:56, 14.17s/it] 25%|██▍       | 481/1945 [2:04:46<4:55:27, 12.11s/it][h264 @ 0x560a33ccad00] mmco: unref short failure
[h264 @ 0x560a33ccad00] mmco: unref short failure
[h264 @ 0x560a33ccad00] mmco: unref short failure
[h264 @ 0x560a43e51b40] mmco: unref short failure
[h264 @ 0x560a43e51b40] mmco: unref short failure
 25%|██▍       | 482/1945 [2:04:53<4:17:29, 10.56s/it][h264 @ 0x56025bddcd80] mmco: unref short failure
[h264 @ 0x56026a0f8d40] mmco: unref short failure
[h264 @ 0x56026a0f8d40] mmco: unref short failure
[h264 @ 0x56212c4d0c40] mmco: unref short failure
 25%|██▍       | 483/1945 [2:05:01<4:00:11,  9.86s/it][h264 @ 0x555a407a9a00] mmco: unref short failure
[h264 @ 0x555a407a9a00] mmco: unref short failure
[h264 @ 0x560a45bf0500] mmco: unref short failure
[h264 @ 0x56212d6e5c80] mmco: unref short failure
 25%|██▍       | 484/1945 [2:05:10<3:52:41,  9.56s/it][h264 @ 0x5621327105c0] mmco: unref short failure
[h264 @ 0x5621327105c0] mmco: unref short failure
[h264 @ 0x560a33f7ab40] mmco: unref short failure
[h264 @ 0x560a33f7ab40] mmco: unref short failure
[h264 @ 0x560a33f7ab40] mmco: unref short failure
[h264 @ 0x560a33f7ab40] mmco: unref short failure
[h264 @ 0x5602744589c0] mmco: unref short failure
[h264 @ 0x5602744589c0] mmco: unref short failure
[h264 @ 0x562145b7b3c0] mmco: unref short failure
[h264 @ 0x562145b7b3c0] mmco: unref short failure
[h264 @ 0x560a301d22c0] mmco: unref short failure
[h264 @ 0x560a301d22c0] mmco: unref short failure
[h264 @ 0x56026c00b280] mmco: unref short failure
[h264 @ 0x56026c00b280] mmco: unref short failure
[h264 @ 0x560a2c8c2ec0] mmco: unref short failure
[h264 @ 0x5621290d60c0] mmco: unref short failure
[h264 @ 0x56026fa2df40] mmco: unref short failure
[h264 @ 0x56026fa2df40] mmco: unref short failure
[h264 @ 0x555a4c809ac0] mmco: unref short failure
[h264 @ 0x555a4c809ac0] mmco: unref short failure
[h264 @ 0x560a3ab82840] mmco: unref short failure
[h264 @ 0x560a3ab82840] mmco: unref short failure
[h264 @ 0x555a375b77c0] mmco: unref short failure
[h264 @ 0x555a375b77c0] mmco: unref short failure
[h264 @ 0x555a375b77c0] mmco: unref short failure
[h264 @ 0x555a375b77c0] mmco: unref short failure
[h264 @ 0x555a375b77c0] mmco: unref short failure
[h264 @ 0x555a375b77c0] mmco: unref short failure
[h264 @ 0x555a496e9a00] mmco: unref short failure
[h264 @ 0x555a496e9a00] mmco: unref short failure
[h264 @ 0x555a407f3b00] mmco: unref short failure
[h264 @ 0x555a407f3b00] mmco: unref short failure
[h264 @ 0x560a4275dcc0] mmco: unref short failure
[h264 @ 0x560a4275dcc0] mmco: unref short failure
[h264 @ 0x560a34948b40] mmco: unref short failure
[h264 @ 0x560266e5d640] mmco: unref short failure
[h264 @ 0x56213e64f740] mmco: unref short failure
[h264 @ 0x56213e64f740] mmco: unref short failure
[h264 @ 0x555a46f2cc00] mmco: unref short failure
[h264 @ 0x555a46f2cc00] mmco: unref short failure
 25%|██▍       | 485/1945 [2:06:17<10:53:03, 26.84s/it][h264 @ 0x562134b40cc0] mmco: unref short failure
[h264 @ 0x555a30450700] mmco: unref short failure
 25%|██▍       | 486/1945 [2:06:25<8:31:18, 21.03s/it] [h264 @ 0x56026c464d40] mmco: unref short failure
[h264 @ 0x56026c464d40] mmco: unref short failure
[h264 @ 0x5602710c6f40] mmco: unref short failure
[h264 @ 0x5602710c6f40] mmco: unref short failure
 25%|██▌       | 487/1945 [2:06:32<6:48:34, 16.81s/it][h264 @ 0x5621426a6680] mmco: unref short failure
[h264 @ 0x5621409c74c0] mmco: unref short failure
[h264 @ 0x560274d1f2c0] mmco: unref short failure
 25%|██▌       | 488/1945 [2:06:40<5:44:05, 14.17s/it][h264 @ 0x562133147240] mmco: unref short failure
[h264 @ 0x560a3087bec0] mmco: unref short failure
 25%|██▌       | 489/1945 [2:06:49<5:05:57, 12.61s/it][h264 @ 0x56027065e580] mmco: unref short failure
[h264 @ 0x56027065e580] mmco: unref short failure
 25%|██▌       | 490/1945 [2:06:56<4:27:56, 11.05s/it][h264 @ 0x555a4485ce00] mmco: unref short failure
 25%|██▌       | 491/1945 [2:07:04<4:02:43, 10.02s/it][h264 @ 0x560a3d436e40] mmco: unref short failure
[h264 @ 0x560a3d436e40] mmco: unref short failure
 25%|██▌       | 492/1945 [2:07:11<3:44:56,  9.29s/it][h264 @ 0x560262ddbb00] mmco: unref short failure
[h264 @ 0x560262ddbb00] mmco: unref short failure
[h264 @ 0x560a3583d8c0] mmco: unref short failure
[h264 @ 0x560a3583d8c0] mmco: unref short failure
[h264 @ 0x560262820680] mmco: unref short failure
[h264 @ 0x560262820680] mmco: unref short failure
[h264 @ 0x560262820680] mmco: unref short failure
[h264 @ 0x562128db79c0] mmco: unref short failure
[h264 @ 0x56212c4d0c40] mmco: unref short failure
[h264 @ 0x56212c4d0c40] mmco: unref short failure
[h264 @ 0x56212c4d0c40] mmco: unref short failure
[h264 @ 0x562136358180] mmco: unref short failure
[h264 @ 0x560a48228380] mmco: unref short failure
[h264 @ 0x560a3bc516c0] mmco: unref short failure
[h264 @ 0x560a3bc516c0] mmco: unref short failure
[h264 @ 0x560a3887f880] mmco: unref short failure
[h264 @ 0x5602671c5b40] mmco: unref short failure
[h264 @ 0x5602671c5b40] mmco: unref short failure
[h264 @ 0x56027473ea00] mmco: unref short failure
[h264 @ 0x56027473ea00] mmco: unref short failure
[h264 @ 0x560a452c7100] mmco: unref short failure
[h264 @ 0x560a452c7100] mmco: unref short failure
[h264 @ 0x56025ca8f000] mmco: unref short failure
[h264 @ 0x56025ca8f000] mmco: unref short failure
[h264 @ 0x555a4679d280] mmco: unref short failure
[h264 @ 0x560a4b58d080] mmco: unref short failure
 25%|██▌       | 493/1945 [2:08:08<9:30:58, 23.59s/it][h264 @ 0x555a34bed900] mmco: unref short failure
 25%|██▌       | 494/1945 [2:08:15<7:30:24, 18.63s/it][h264 @ 0x5621297c5580] mmco: unref short failure
 25%|██▌       | 495/1945 [2:08:24<6:14:47, 15.51s/it][h264 @ 0x5621474be540] mmco: unref short failure
 26%|██▌       | 496/1945 [2:08:30<5:11:35, 12.90s/it] 26%|██▌       | 497/1945 [2:08:37<4:28:31, 11.13s/it] 26%|██▌       | 498/1945 [2:08:44<3:55:41,  9.77s/it] 26%|██▌       | 499/1945 [2:08:52<3:41:44,  9.20s/it][h264 @ 0x56026247f800] mmco: unref short failure
[h264 @ 0x56026247f800] mmco: unref short failure
09/08/2024 22:50:13 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.638981580734253, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.05032254382967949, 'loss_ret%tv%ta--finetune_area/loss_area': 1.5075187683105469, 'loss_ret%tv%ta--finetune_area/total_loss': 5.1968231201171875}
 26%|██▌       | 500/1945 [2:09:00<3:35:06,  8.93s/it][h264 @ 0x560262bb23c0] mmco: unref short failure
[h264 @ 0x560262bb23c0] mmco: unref short failure
[h264 @ 0x555a401c89c0] mmco: unref short failure
[h264 @ 0x5621474be340] mmco: unref short failure
[h264 @ 0x5621474be340] mmco: unref short failure
[h264 @ 0x560a39fd2e80] mmco: unref short failure
[h264 @ 0x560a39fd2e80] mmco: unref short failure
[h264 @ 0x5602708d3040] mmco: unref short failure
[h264 @ 0x560267be0a00] mmco: unref short failure
[h264 @ 0x562146b08640] mmco: unref short failure
[h264 @ 0x562146b08640] mmco: unref short failure
[h264 @ 0x560a3c9aff40] mmco: unref short failure
[h264 @ 0x560a3c9aff40] mmco: unref short failure
[h264 @ 0x5602721dcc40] mmco: unref short failure
[h264 @ 0x5602721dcc40] mmco: unref short failure
[h264 @ 0x56025d32bc00] mmco: unref short failure
[h264 @ 0x56025d32bc00] mmco: unref short failure
[h264 @ 0x560276c3d700] mmco: unref short failure
 26%|██▌       | 501/1945 [2:10:11<11:03:21, 27.56s/it][h264 @ 0x560a44e285c0] mmco: unref short failure
[h264 @ 0x560a44e285c0] mmco: unref short failure
[h264 @ 0x5602788f65c0] mmco: unref short failure
 26%|██▌       | 502/1945 [2:10:19<8:40:13, 21.63s/it] [h264 @ 0x560a43740200] mmco: unref short failure
[h264 @ 0x5621423f6ec0] mmco: unref short failure
 26%|██▌       | 503/1945 [2:10:26<6:55:59, 17.31s/it][h264 @ 0x555a3b2f9c00] mmco: unref short failure
[h264 @ 0x56213dac3940] mmco: unref short failure
[h264 @ 0x56213dac3940] mmco: unref short failure
[h264 @ 0x560a3ce84f40] mmco: unref short failure
[h264 @ 0x560a3ce84f40] mmco: unref short failure
[h264 @ 0x560a3ce84f40] mmco: unref short failure
[h264 @ 0x560a3ce84f40] mmco: unref short failure
 26%|██▌       | 504/1945 [2:10:33<5:42:59, 14.28s/it][h264 @ 0x560a495d9340] mmco: unref short failure
[h264 @ 0x560a495d9340] mmco: unref short failure
[h264 @ 0x560272bb2240] mmco: unref short failure
 26%|██▌       | 505/1945 [2:10:41<4:55:29, 12.31s/it][h264 @ 0x555a3baab640] mmco: unref short failure
[h264 @ 0x555a3baab640] mmco: unref short failure
 26%|██▌       | 506/1945 [2:10:48<4:16:16, 10.69s/it][h264 @ 0x560a2e7e29c0] mmco: unref short failure
[h264 @ 0x560a2e7e29c0] mmco: unref short failure
[h264 @ 0x560a2e7e29c0] mmco: unref short failure
[h264 @ 0x560a2e7e29c0] mmco: unref short failure
[h264 @ 0x562141e45640] mmco: unref short failure
[h264 @ 0x562129232000] mmco: unref short failure
[h264 @ 0x555a4c102300] mmco: unref short failure
[h264 @ 0x555a4c102300] mmco: unref short failure
[h264 @ 0x560272d87e40] mmco: unref short failure
 26%|██▌       | 507/1945 [2:10:55<3:50:05,  9.60s/it][h264 @ 0x560a2de0c380] mmco: unref short failure
[h264 @ 0x560a2de0c380] mmco: unref short failure
[h264 @ 0x555a44a62ec0] mmco: unref short failure
[h264 @ 0x560a4d8a84c0] mmco: unref short failure
[h264 @ 0x560a4d8a84c0] mmco: unref short failure
 26%|██▌       | 508/1945 [2:11:04<3:48:16,  9.53s/it][h264 @ 0x560a4c19e140] mmco: unref short failure
[h264 @ 0x560a4c19e140] mmco: unref short failure
[h264 @ 0x562133f30d80] mmco: unref short failure
[h264 @ 0x562137a91880] mmco: unref short failure
[h264 @ 0x562137a91880] mmco: unref short failure
[h264 @ 0x56212c141580] mmco: unref short failure
[h264 @ 0x56212c141580] mmco: unref short failure
[h264 @ 0x560a4b91ce40] mmco: unref short failure
[h264 @ 0x562130320dc0] mmco: unref short failure
[h264 @ 0x562130320dc0] mmco: unref short failure
[h264 @ 0x56027869a180] mmco: unref short failure
[h264 @ 0x5621449f6880] mmco: unref short failure
[h264 @ 0x5621449f6880] mmco: unref short failure
[h264 @ 0x555a3a78c140] mmco: unref short failure
[h264 @ 0x555a3a78c140] mmco: unref short failure
[h264 @ 0x560276bce640] mmco: unref short failure
[h264 @ 0x560276bce640] mmco: unref short failure
[h264 @ 0x56027c805700] mmco: unref short failure
[h264 @ 0x560a4633d200] mmco: unref short failure
[h264 @ 0x56214728dd80] mmco: unref short failure
[h264 @ 0x56214728dd80] mmco: unref short failure
[h264 @ 0x555a34b60540] mmco: unref short failure
[h264 @ 0x5602607fdcc0] mmco: unref short failure
 26%|██▌       | 509/1945 [2:12:19<11:35:27, 29.06s/it][h264 @ 0x560a3c9aff40] mmco: unref short failure
[h264 @ 0x560a3c9aff40] mmco: unref short failure
 26%|██▌       | 510/1945 [2:12:27<9:05:47, 22.82s/it]  26%|██▋       | 511/1945 [2:12:34<7:09:41, 17.98s/it][h264 @ 0x555a4007c540] mmco: unref short failure
[h264 @ 0x555a4007c540] mmco: unref short failure
[h264 @ 0x555a4007c540] mmco: unref short failure
[h264 @ 0x555a4007c540] mmco: unref short failure
[h264 @ 0x562142359240] mmco: unref short failure
[h264 @ 0x562142359240] mmco: unref short failure
[h264 @ 0x5621328c4b00] mmco: unref short failure
[h264 @ 0x5621328c4b00] mmco: unref short failure
[h264 @ 0x560274f97ec0] mmco: unref short failure
[h264 @ 0x560274f97ec0] mmco: unref short failure
 26%|██▋       | 512/1945 [2:12:42<5:57:21, 14.96s/it] 26%|██▋       | 513/1945 [2:12:49<5:00:04, 12.57s/it][h264 @ 0x56214b5f7380] mmco: unref short failure
[h264 @ 0x56214b5f7380] mmco: unref short failure
[h264 @ 0x5621409b6500] mmco: unref short failure
[h264 @ 0x5621409b6500] mmco: unref short failure
[h264 @ 0x555a3e977c80] mmco: unref short failure
[h264 @ 0x555a3e977c80] mmco: unref short failure
 26%|██▋       | 514/1945 [2:12:56<4:23:31, 11.05s/it][h264 @ 0x560a4b624680] mmco: unref short failure
 26%|██▋       | 515/1945 [2:13:04<3:59:52, 10.06s/it] 27%|██▋       | 516/1945 [2:13:11<3:34:14,  9.00s/it][h264 @ 0x560272524b40] mmco: unref short failure
[h264 @ 0x56026cf45980] mmco: unref short failure
[h264 @ 0x555a32b91040] mmco: unref short failure
[h264 @ 0x560a41f87ac0] mmco: unref short failure
[h264 @ 0x560a41f87ac0] mmco: unref short failure
[h264 @ 0x56026df4b840] mmco: unref short failure
[h264 @ 0x5621489205c0] mmco: unref short failure
[h264 @ 0x5621489205c0] mmco: unref short failure
[h264 @ 0x56026836f6c0] mmco: unref short failure
[h264 @ 0x56026836f6c0] mmco: unref short failure
[h264 @ 0x56026836f6c0] mmco: unref short failure
[h264 @ 0x562140762c80] mmco: unref short failure
[h264 @ 0x560268940dc0] mmco: unref short failure
[h264 @ 0x560a4ba65b80] mmco: unref short failure
[h264 @ 0x560a4ba65b80] mmco: unref short failure
[h264 @ 0x56027398bf00] mmco: unref short failure
[h264 @ 0x56027398bf00] mmco: unref short failure
[h264 @ 0x56025c51cc00] mmco: unref short failure
[h264 @ 0x56025c51cc00] mmco: unref short failure
[h264 @ 0x555a44978180] mmco: unref short failure
 27%|██▋       | 517/1945 [2:14:21<10:51:02, 27.35s/it] 27%|██▋       | 518/1945 [2:14:30<8:37:12, 21.75s/it] [h264 @ 0x555a4c479480] mmco: unref short failure
[h264 @ 0x555a4c479480] mmco: unref short failure
 27%|██▋       | 519/1945 [2:14:37<6:53:01, 17.38s/it] 27%|██▋       | 520/1945 [2:14:46<5:51:33, 14.80s/it][h264 @ 0x555a46243940] mmco: unref short failure
[h264 @ 0x555a46243940] mmco: unref short failure
 27%|██▋       | 521/1945 [2:14:53<5:00:33, 12.66s/it] 27%|██▋       | 522/1945 [2:15:00<4:21:51, 11.04s/it][h264 @ 0x56213a19cd40] mmco: unref short failure
[h264 @ 0x560a3d3e3400] mmco: unref short failure
 27%|██▋       | 523/1945 [2:15:08<3:55:24,  9.93s/it][h264 @ 0x562144d26bc0] mmco: unref short failure
[h264 @ 0x560a32787e40] mmco: unref short failure
[h264 @ 0x555a3b29d640] mmco: unref short failure
[h264 @ 0x560a2d68f5c0] mmco: unref short failure
[h264 @ 0x560a2d68f5c0] mmco: unref short failure
[h264 @ 0x560a2d68f5c0] mmco: unref short failure
[h264 @ 0x560a2d68f5c0] mmco: unref short failure
[h264 @ 0x560a2d68f5c0] mmco: unref short failure
[h264 @ 0x560a2d68f5c0] mmco: unref short failure
[h264 @ 0x560a2d68f5c0] mmco: unref short failure
[h264 @ 0x560a2d68f5c0] mmco: unref short failure
 27%|██▋       | 524/1945 [2:15:15<3:36:57,  9.16s/it][h264 @ 0x562146fee500] mmco: unref short failure
[h264 @ 0x56213cdf5c40] mmco: unref short failure
[h264 @ 0x56213cdf5c40] mmco: unref short failure
[h264 @ 0x56213cdf5c40] mmco: unref short failure
[h264 @ 0x56213cdf5c40] mmco: unref short failure
[h264 @ 0x560a47540780] mmco: unref short failure
[h264 @ 0x560a397d5ac0] mmco: unref short failure
[h264 @ 0x560a397d5ac0] mmco: unref short failure
[h264 @ 0x560273081900] mmco: unref short failure
[h264 @ 0x560273081900] mmco: unref short failure
[h264 @ 0x5602797af940] mmco: unref short failure
[h264 @ 0x5602797af940] mmco: unref short failure
[h264 @ 0x562142541980] mmco: unref short failure
[h264 @ 0x555a3af293c0] mmco: unref short failure
[h264 @ 0x555a3af293c0] mmco: unref short failure
[h264 @ 0x555a4f1fd880] mmco: unref short failure
[h264 @ 0x560a2c615b80] mmco: unref short failure
[h264 @ 0x560a2c615b80] mmco: unref short failure
[h264 @ 0x560273bb9440] mmco: unref short failure
[h264 @ 0x560273bb9440] mmco: unref short failure
[h264 @ 0x560276f79000] mmco: unref short failure
[h264 @ 0x560276f79000] mmco: unref short failure
[h264 @ 0x56026a20b6c0] mmco: unref short failure
[h264 @ 0x560a463c1240] mmco: unref short failure
 27%|██▋       | 525/1945 [2:16:36<12:04:04, 30.59s/it][h264 @ 0x5621309c8480] mmco: unref short failure
[h264 @ 0x5621309c8480] mmco: unref short failure
 27%|██▋       | 526/1945 [2:16:43<9:14:54, 23.46s/it] [h264 @ 0x555a31138f00] mmco: unref short failure
 27%|██▋       | 527/1945 [2:16:50<7:19:27, 18.59s/it][h264 @ 0x5602619aef00] mmco: unref short failure
[h264 @ 0x5602619aef00] mmco: unref short failure
[h264 @ 0x56214728fa00] mmco: unref short failure
 27%|██▋       | 528/1945 [2:16:57<5:57:56, 15.16s/it][h264 @ 0x560a3c34e740] mmco: unref short failure
[h264 @ 0x560a3c34e740] mmco: unref short failure
[h264 @ 0x562141bef3c0] mmco: unref short failure
[h264 @ 0x562141bef3c0] mmco: unref short failure
[h264 @ 0x560a4ed75580] mmco: unref short failure
[h264 @ 0x560a4ed75580] mmco: unref short failure
[h264 @ 0x56027f06ba80] mmco: unref short failure
[h264 @ 0x56027f06ba80] mmco: unref short failure
[h264 @ 0x56026f315dc0] mmco: unref short failure
[h264 @ 0x56026f315dc0] mmco: unref short failure
[h264 @ 0x56026f315dc0] mmco: unref short failure
[h264 @ 0x56026f315dc0] mmco: unref short failure
[h264 @ 0x56027471c140] mmco: unref short failure
[h264 @ 0x56027471c140] mmco: unref short failure
 27%|██▋       | 529/1945 [2:17:06<5:16:25, 13.41s/it][h264 @ 0x56027471c140] mmco: unref short failure
[h264 @ 0x56027471c140] mmco: unref short failure
 27%|██▋       | 530/1945 [2:17:14<4:33:51, 11.61s/it][h264 @ 0x560268916100] mmco: unref short failure
[h264 @ 0x560268916100] mmco: unref short failure
 27%|██▋       | 531/1945 [2:17:21<4:02:51, 10.31s/it][h264 @ 0x560a48c185c0] mmco: unref short failure
 27%|██▋       | 532/1945 [2:17:28<3:39:40,  9.33s/it][h264 @ 0x560a3d437740] mmco: unref short failure
[h264 @ 0x560a3d437740] mmco: unref short failure
[h264 @ 0x560a4b2bec00] mmco: unref short failure
[h264 @ 0x560a4b2bec00] mmco: unref short failure
[h264 @ 0x5621436c4f80] mmco: unref short failure
[h264 @ 0x5621436c4f80] mmco: unref short failure
[h264 @ 0x56027232c440] mmco: unref short failure
[h264 @ 0x56026672e6c0] mmco: unref short failure
[h264 @ 0x56026672e6c0] mmco: unref short failure
[h264 @ 0x56026a1d7fc0] mmco: unref short failure
[h264 @ 0x56026a1d7fc0] mmco: unref short failure
[h264 @ 0x555a4ca201c0] mmco: unref short failure
[h264 @ 0x555a4ca201c0] mmco: unref short failure
[h264 @ 0x555a4ca201c0] mmco: unref short failure
[h264 @ 0x555a4ca201c0] mmco: unref short failure
[h264 @ 0x560a45ab3b80] mmco: unref short failure
[h264 @ 0x560a48dec3c0] mmco: unref short failure
[h264 @ 0x560a48dec3c0] mmco: unref short failure
[h264 @ 0x560262739340] mmco: unref short failure
[h264 @ 0x560262739340] mmco: unref short failure
[h264 @ 0x555a51a55600] mmco: unref short failure
[h264 @ 0x555a51a55600] mmco: unref short failure
[h264 @ 0x562138120440] mmco: unref short failure
[h264 @ 0x562138120440] mmco: unref short failure
[h264 @ 0x555a4ed4c100] mmco: unref short failure
[h264 @ 0x555a4f1fd400] mmco: unref short failure
[h264 @ 0x560a4e02cfc0] mmco: unref short failure
[h264 @ 0x560a4e02cfc0] mmco: unref short failure
[h264 @ 0x560a4e02cfc0] mmco: unref short failure
[h264 @ 0x560a4e02cfc0] mmco: unref short failure
[h264 @ 0x5621362ea900] mmco: unref short failure
[h264 @ 0x560a420f6480] mmco: unref short failure
 27%|██▋       | 533/1945 [2:18:31<9:55:09, 25.29s/it][h264 @ 0x560a36e36440] mmco: unref short failure
 27%|██▋       | 534/1945 [2:18:38<7:46:24, 19.83s/it][h264 @ 0x56214a6eb400] mmco: unref short failure
[h264 @ 0x56214a6eb400] mmco: unref short failure
[h264 @ 0x560a3087ba00] mmco: unref short failure
[h264 @ 0x560a3087ba00] mmco: unref short failure
[h264 @ 0x5621293ba9c0] mmco: unref short failure
[h264 @ 0x5621293ba9c0] mmco: unref short failure
[h264 @ 0x5621293ba9c0] mmco: unref short failure
[h264 @ 0x5621293ba9c0] mmco: unref short failure
[h264 @ 0x5621293ba9c0] mmco: unref short failure
[h264 @ 0x5621293ba9c0] mmco: unref short failure
[h264 @ 0x560a39ff97c0] mmco: unref short failure
[h264 @ 0x560a39ff97c0] mmco: unref short failure
 28%|██▊       | 535/1945 [2:18:45<6:15:58, 16.00s/it][h264 @ 0x56025b66bb40] mmco: unref short failure
[h264 @ 0x56025b66bb40] mmco: unref short failure
 28%|██▊       | 536/1945 [2:18:53<5:20:14, 13.64s/it][h264 @ 0x560a2e1780c0] mmco: unref short failure
 28%|██▊       | 537/1945 [2:19:00<4:34:32, 11.70s/it][h264 @ 0x56025a7f4200] mmco: unref short failure
[h264 @ 0x56025a7f4200] mmco: unref short failure
 28%|██▊       | 538/1945 [2:19:08<4:07:51, 10.57s/it][h264 @ 0x562144153b00] mmco: unref short failure
[h264 @ 0x562144153b00] mmco: unref short failure
[h264 @ 0x560260431d00] mmco: unref short failure
[h264 @ 0x560260431d00] mmco: unref short failure
[h264 @ 0x555a48b6a3c0] mmco: unref short failure
[h264 @ 0x555a48b6a3c0] mmco: unref short failure
[h264 @ 0x56025f749500] mmco: unref short failure
[h264 @ 0x56025f749500] mmco: unref short failure
 28%|██▊       | 539/1945 [2:19:16<3:47:01,  9.69s/it][h264 @ 0x56027872e400] mmco: unref short failure
[h264 @ 0x56027872e400] mmco: unref short failure
[h264 @ 0x560260866880] mmco: unref short failure
[h264 @ 0x560260866880] mmco: unref short failure
[h264 @ 0x560260866880] mmco: unref short failure
[h264 @ 0x560260866880] mmco: unref short failure
[h264 @ 0x560a3ad151c0] mmco: unref short failure
[h264 @ 0x560a3ad151c0] mmco: unref short failure
 28%|██▊       | 540/1945 [2:19:24<3:37:15,  9.28s/it][h264 @ 0x560a4d1a0b00] mmco: unref short failure
[h264 @ 0x56213ec36500] mmco: unref short failure
[h264 @ 0x560a3bbd9f80] mmco: unref short failure
[h264 @ 0x560a3bbd9f80] mmco: unref short failure
[h264 @ 0x560a2ee1ba00] mmco: unref short failure
[h264 @ 0x560a2ee1ba00] mmco: unref short failure
[h264 @ 0x5621402a0780] mmco: unref short failure
[h264 @ 0x562133296bc0] mmco: unref short failure
[h264 @ 0x555a49f5fcc0] mmco: unref short failure
[h264 @ 0x555a30291080] mmco: unref short failure
[h264 @ 0x555a30291080] mmco: unref short failure
[h264 @ 0x555a30291080] mmco: unref short failure
[h264 @ 0x555a30291080] mmco: unref short failure
[h264 @ 0x56026f009880] mmco: unref short failure
[h264 @ 0x56026f009880] mmco: unref short failure
[h264 @ 0x56025d5f5340] mmco: unref short failure
 28%|██▊       | 541/1945 [2:20:29<10:07:46, 25.97s/it][h264 @ 0x560a2d78e480] mmco: unref short failure
[h264 @ 0x555a4a60fb40] mmco: unref short failure
[h264 @ 0x555a4a60fb40] mmco: unref short failure
 28%|██▊       | 542/1945 [2:20:37<8:01:16, 20.58s/it] [h264 @ 0x560a407d1840] mmco: unref short failure
 28%|██▊       | 543/1945 [2:20:43<6:19:12, 16.23s/it] 28%|██▊       | 544/1945 [2:20:50<5:17:19, 13.59s/it][h264 @ 0x56213dbd4240] mmco: unref short failure
[h264 @ 0x56213dbd4240] mmco: unref short failure
 28%|██▊       | 545/1945 [2:20:57<4:30:15, 11.58s/it][h264 @ 0x555a533c44c0] mmco: unref short failure
[h264 @ 0x555a533c44c0] mmco: unref short failure
[h264 @ 0x555a3eb1b1c0] mmco: unref short failure
[h264 @ 0x555a3eb1b1c0] mmco: unref short failure
 28%|██▊       | 546/1945 [2:21:05<4:06:33, 10.57s/it][h264 @ 0x560a42923380] mmco: unref short failure
[h264 @ 0x560a42923380] mmco: unref short failure
[h264 @ 0x56212a210080] mmco: unref short failure
[h264 @ 0x56212a210080] mmco: unref short failure
[h264 @ 0x56212a210080] mmco: unref short failure
[h264 @ 0x56212a210080] mmco: unref short failure
[h264 @ 0x562129e9ca00] mmco: unref short failure
[h264 @ 0x555a3ea55400] mmco: unref short failure
[h264 @ 0x555a3ea55400] mmco: unref short failure
[h264 @ 0x562129336000] mmco: unref short failure
 28%|██▊       | 547/1945 [2:21:13<3:42:18,  9.54s/it][h264 @ 0x56214cb7c4c0] mmco: unref short failure
[h264 @ 0x56214cb7c4c0] mmco: unref short failure
[h264 @ 0x555a44a8f580] mmco: unref short failure
[h264 @ 0x56025db4dc40] mmco: unref short failure
[h264 @ 0x56025db4dc40] mmco: unref short failure
 28%|██▊       | 548/1945 [2:21:21<3:33:00,  9.15s/it][h264 @ 0x555a35fbd880] mmco: unref short failure
[h264 @ 0x555a35fbd880] mmco: unref short failure
[h264 @ 0x560a31a8f980] mmco: unref short failure
[h264 @ 0x560a31a8f980] mmco: unref short failure
[h264 @ 0x560a31a8f980] mmco: unref short failure
[h264 @ 0x560a31a8f980] mmco: unref short failure
[h264 @ 0x560a3334e580] mmco: unref short failure
[h264 @ 0x560a3334e580] mmco: unref short failure
[h264 @ 0x5602725ee580] mmco: unref short failure
[h264 @ 0x555a31522080] mmco: unref short failure
[h264 @ 0x560a3334e180] mmco: unref short failure
[h264 @ 0x560a3334e180] mmco: unref short failure
[h264 @ 0x56025abbe0c0] mmco: unref short failure
[h264 @ 0x56025abbe0c0] mmco: unref short failure
[h264 @ 0x555a302ef580] mmco: unref short failure
[h264 @ 0x555a302ef580] mmco: unref short failure
[h264 @ 0x56214750eec0] mmco: unref short failure
[h264 @ 0x56214750eec0] mmco: unref short failure
[h264 @ 0x56213a21b340] mmco: unref short failure
[h264 @ 0x56213a21b340] mmco: unref short failure
[h264 @ 0x562132011e00] mmco: unref short failure
[h264 @ 0x560a2d936b40] mmco: unref short failure
[h264 @ 0x555a305d9840] mmco: unref short failure
[h264 @ 0x555a305d9840] mmco: unref short failure
 28%|██▊       | 549/1945 [2:22:27<10:12:09, 26.31s/it][h264 @ 0x560a2dcfee00] mmco: unref short failure
[h264 @ 0x560a2dcfee00] mmco: unref short failure
09/08/2024 23:03:48 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.128072500228882, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04539074748754501, 'loss_ret%tv%ta--finetune_area/loss_area': 1.34593665599823, 'loss_ret%tv%ta--finetune_area/total_loss': 4.519400119781494}
 28%|██▊       | 550/1945 [2:22:34<7:53:38, 20.37s/it] [h264 @ 0x555a36db8580] mmco: unref short failure
[h264 @ 0x555a36db8580] mmco: unref short failure
[h264 @ 0x56026bfd2dc0] mmco: unref short failure
[h264 @ 0x56212c110800] mmco: unref short failure
 28%|██▊       | 551/1945 [2:22:41<6:19:33, 16.34s/it][h264 @ 0x555a51a55c80] mmco: unref short failure
[h264 @ 0x560a2cd59280] mmco: unref short failure
[h264 @ 0x560278ec8140] mmco: unref short failure
[h264 @ 0x560278ec8140] mmco: unref short failure
 28%|██▊       | 552/1945 [2:22:48<5:16:51, 13.65s/it][h264 @ 0x555a38a48040] mmco: unref short failure
[h264 @ 0x555a38a48040] mmco: unref short failure
[h264 @ 0x56213e5e66c0] mmco: unref short failure
[h264 @ 0x56213e5e66c0] mmco: unref short failure
[h264 @ 0x5621465ef500] mmco: unref short failure
 28%|██▊       | 553/1945 [2:22:56<4:38:50, 12.02s/it] 28%|██▊       | 554/1945 [2:23:03<4:05:40, 10.60s/it] 29%|██▊       | 555/1945 [2:23:11<3:41:39,  9.57s/it][h264 @ 0x56025db4dc40] mmco: unref short failure
[h264 @ 0x56025db4dc40] mmco: unref short failure
 29%|██▊       | 556/1945 [2:23:18<3:26:44,  8.93s/it][h264 @ 0x555a4e244600] mmco: unref short failure
[h264 @ 0x555a4e244600] mmco: unref short failure
[h264 @ 0x56212b4a9980] mmco: unref short failure
[h264 @ 0x560a35882900] mmco: unref short failure
[h264 @ 0x56025d906b40] mmco: unref short failure
[h264 @ 0x555a30796840] mmco: unref short failure
[h264 @ 0x56026fe93fc0] mmco: unref short failure
[h264 @ 0x56026fe93fc0] mmco: unref short failure
[h264 @ 0x56025c59e240] mmco: unref short failure
[h264 @ 0x56025c59e240] mmco: unref short failure
[h264 @ 0x56025c59e240] mmco: unref short failure
[h264 @ 0x56025c59e240] mmco: unref short failure
[h264 @ 0x560a30c53440] mmco: unref short failure
[h264 @ 0x555a4dd85400] mmco: unref short failure
[h264 @ 0x555a4ebaa380] mmco: unref short failure
[h264 @ 0x56212a248900] mmco: unref short failure
[h264 @ 0x56212a248900] mmco: unref short failure
[h264 @ 0x56212a248900] mmco: unref short failure
[h264 @ 0x56212a248900] mmco: unref short failure
[h264 @ 0x560260a86cc0] mmco: unref short failure
[h264 @ 0x555a51115480] mmco: unref short failure
[h264 @ 0x560260a86cc0] mmco: unref short failure
 29%|██▊       | 557/1945 [2:24:21<9:38:59, 25.03s/it] 29%|██▊       | 558/1945 [2:24:28<7:32:36, 19.58s/it][h264 @ 0x555a494b8e80] mmco: unref short failure
[h264 @ 0x555a494b8e80] mmco: unref short failure
[h264 @ 0x56025e146100] mmco: unref short failure
[h264 @ 0x560a2d78ddc0] mmco: unref short failure
 29%|██▊       | 559/1945 [2:24:36<6:11:59, 16.10s/it] 29%|██▉       | 560/1945 [2:24:45<5:28:13, 14.22s/it][h264 @ 0x56026fe94200] mmco: unref short failure
[h264 @ 0x56026fe94200] mmco: unref short failure
[h264 @ 0x560a2cb529c0] mmco: unref short failure
[h264 @ 0x560a2cb529c0] mmco: unref short failure
 29%|██▉       | 561/1945 [2:24:54<4:48:33, 12.51s/it][h264 @ 0x562130d50640] mmco: unref short failure
[h264 @ 0x562130d50640] mmco: unref short failure
[h264 @ 0x555a2fde1500] mmco: unref short failure
[h264 @ 0x560a4a01a180] mmco: unref short failure
 29%|██▉       | 562/1945 [2:25:03<4:22:20, 11.38s/it] 29%|██▉       | 563/1945 [2:25:10<3:52:46, 10.11s/it][h264 @ 0x560272d15840] mmco: unref short failure
 29%|██▉       | 564/1945 [2:25:17<3:35:02,  9.34s/it][h264 @ 0x560266cfaf80] mmco: unref short failure
[h264 @ 0x560266cfaf80] mmco: unref short failure
[h264 @ 0x56025efe3d00] mmco: unref short failure
[h264 @ 0x56025efe3d00] mmco: unref short failure
[h264 @ 0x560a3295f180] mmco: unref short failure
[h264 @ 0x560a3295f180] mmco: unref short failure
[h264 @ 0x555a3168ae00] mmco: unref short failure
[h264 @ 0x555a32b13080] mmco: unref short failure
[h264 @ 0x5621499153c0] mmco: unref short failure
[h264 @ 0x5621499153c0] mmco: unref short failure
[h264 @ 0x560a45d1e3c0] mmco: unref short failure
[h264 @ 0x56025b279340] mmco: unref short failure
[h264 @ 0x56025b279340] mmco: unref short failure
[h264 @ 0x560a2d7658c0] mmco: unref short failure
[h264 @ 0x560a446f9f80] mmco: unref short failure
[h264 @ 0x555a38150800] mmco: unref short failure
[h264 @ 0x560a3aa171c0] mmco: unref short failure
[h264 @ 0x560a3aa171c0] mmco: unref short failure
 29%|██▉       | 565/1945 [2:26:31<10:58:10, 28.62s/it] 29%|██▉       | 566/1945 [2:26:38<8:28:15, 22.11s/it]  29%|██▉       | 567/1945 [2:26:45<6:46:15, 17.69s/it][h264 @ 0x560a3317a4c0] mmco: unref short failure
 29%|██▉       | 568/1945 [2:26:52<5:29:48, 14.37s/it] 29%|██▉       | 569/1945 [2:27:00<4:48:41, 12.59s/it][h264 @ 0x555a4af8ad40] mmco: unref short failure
[h264 @ 0x555a4af8ad40] mmco: unref short failure
[h264 @ 0x56025ca37840] mmco: unref short failure
[h264 @ 0x56025ca37840] mmco: unref short failure
 29%|██▉       | 570/1945 [2:27:07<4:09:45, 10.90s/it][h264 @ 0x56214a6eb880] mmco: unref short failure
[h264 @ 0x56214a6eb880] mmco: unref short failure
[h264 @ 0x560a407d1cc0] mmco: unref short failure
[h264 @ 0x56026088d100] mmco: unref short failure
[h264 @ 0x56026088d100] mmco: unref short failure
[h264 @ 0x56026088d100] mmco: unref short failure
[h264 @ 0x56026088d100] mmco: unref short failure
 29%|██▉       | 571/1945 [2:27:14<3:41:38,  9.68s/it][h264 @ 0x562128c903c0] mmco: unref short failure
 29%|██▉       | 572/1945 [2:27:21<3:23:12,  8.88s/it][h264 @ 0x555a32405c00] mmco: unref short failure
[h264 @ 0x555a32405c00] mmco: unref short failure
[h264 @ 0x562134aef440] mmco: unref short failure
[h264 @ 0x562134aef440] mmco: unref short failure
[h264 @ 0x562134aef440] mmco: unref short failure
[h264 @ 0x562134aef440] mmco: unref short failure
[h264 @ 0x562130269280] mmco: unref short failure
[h264 @ 0x56026a0a9500] mmco: unref short failure
[h264 @ 0x56026a0a9500] mmco: unref short failure
[h264 @ 0x555a51047b00] mmco: unref short failure
[h264 @ 0x555a51047b00] mmco: unref short failure
[h264 @ 0x555a51047b00] mmco: unref short failure
[h264 @ 0x555a51047b00] mmco: unref short failure
[h264 @ 0x5621473b7000] mmco: unref short failure
[h264 @ 0x5621473b7000] mmco: unref short failure
[h264 @ 0x5621473b7000] mmco: unref short failure
[h264 @ 0x5621473b7000] mmco: unref short failure
[h264 @ 0x5621473b7000] mmco: unref short failure
[h264 @ 0x560a2da6a800] mmco: unref short failure
[h264 @ 0x560a2da6a800] mmco: unref short failure
[h264 @ 0x56025b311c40] mmco: unref short failure
[h264 @ 0x56025b311c40] mmco: unref short failure
[h264 @ 0x555a4f2b7100] mmco: unref short failure
[h264 @ 0x555a4f2b7100] mmco: unref short failure
[h264 @ 0x56027137c440] mmco: unref short failure
[h264 @ 0x560a30c48280] mmco: unref short failure
[h264 @ 0x560a30c48280] mmco: unref short failure
[h264 @ 0x555a303f1d40] mmco: unref short failure
[h264 @ 0x555a303f1d40] mmco: unref short failure
[h264 @ 0x56213201c640] mmco: unref short failure
[h264 @ 0x56213201c640] mmco: unref short failure
[h264 @ 0x56213201c640] mmco: unref short failure
[h264 @ 0x56213201c640] mmco: unref short failure
[h264 @ 0x56212beea340] mmco: unref short failure
[h264 @ 0x56212beea340] mmco: unref short failure
[h264 @ 0x560a47762f80] mmco: unref short failure
[h264 @ 0x56026e34b7c0] mmco: unref short failure
[h264 @ 0x56026e34b7c0] mmco: unref short failure
[h264 @ 0x560a45f78340] mmco: unref short failure
[h264 @ 0x560a45f78340] mmco: unref short failure
[h264 @ 0x560a45f78540] mmco: unref short failure
[h264 @ 0x560a45f78540] mmco: unref short failure
 29%|██▉       | 573/1945 [2:28:35<10:51:12, 28.48s/it][h264 @ 0x56026836fb40] mmco: unref short failure
[h264 @ 0x56026836fb40] mmco: unref short failure
 30%|██▉       | 574/1945 [2:28:42<8:24:28, 22.08s/it] [h264 @ 0x56025a7cffc0] mmco: unref short failure
 30%|██▉       | 575/1945 [2:28:50<6:45:47, 17.77s/it] 30%|██▉       | 576/1945 [2:28:58<5:35:53, 14.72s/it][h264 @ 0x560a46e02cc0] mmco: unref short failure
[h264 @ 0x560a46e02cc0] mmco: unref short failure
 30%|██▉       | 577/1945 [2:29:05<4:43:29, 12.43s/it][h264 @ 0x5602747342c0] mmco: unref short failure
[h264 @ 0x5602747342c0] mmco: unref short failure
[h264 @ 0x562146fd7040] mmco: unref short failure
[h264 @ 0x562146fd7040] mmco: unref short failure
 30%|██▉       | 578/1945 [2:29:12<4:04:54, 10.75s/it][h264 @ 0x555a34ea6180] mmco: unref short failure
 30%|██▉       | 579/1945 [2:29:20<3:48:04, 10.02s/it][h264 @ 0x555a2facb4c0] mmco: unref short failure
[h264 @ 0x555a2facb4c0] mmco: unref short failure
[h264 @ 0x560a2c9eeb00] mmco: unref short failure
[h264 @ 0x560a2c9eeb00] mmco: unref short failure
 30%|██▉       | 580/1945 [2:29:29<3:40:14,  9.68s/it][h264 @ 0x56025b70fd80] mmco: unref short failure
[h264 @ 0x562128221840] mmco: unref short failure
[h264 @ 0x562128221840] mmco: unref short failure
[h264 @ 0x562128221840] mmco: unref short failure
[h264 @ 0x5621456af5c0] mmco: unref short failure
[h264 @ 0x56027364ef80] mmco: unref short failure
[h264 @ 0x560262b59800] mmco: unref short failure
[h264 @ 0x56027364ef80] mmco: unref short failure
[h264 @ 0x56027364ef80] mmco: unref short failure
[h264 @ 0x562147e1cb00] mmco: unref short failure
[h264 @ 0x555a35fbd1c0] mmco: unref short failure
[h264 @ 0x555a3504b380] mmco: unref short failure
[h264 @ 0x555a3504b380] mmco: unref short failure
[h264 @ 0x555a3504b380] mmco: unref short failure
[h264 @ 0x555a3504b380] mmco: unref short failure
[h264 @ 0x555a3504b380] mmco: unref short failure
[h264 @ 0x555a3504b380] mmco: unref short failure
[h264 @ 0x555a3504b380] mmco: unref short failure
[h264 @ 0x555a3504b380] mmco: unref short failure
[h264 @ 0x555a3504b380] mmco: unref short failure
[h264 @ 0x555a3504b380] mmco: unref short failure
[h264 @ 0x560267b69080] mmco: unref short failure
[h264 @ 0x560262651cc0] mmco: unref short failure
[h264 @ 0x560262651cc0] mmco: unref short failure
[h264 @ 0x560262651cc0] mmco: unref short failure
[h264 @ 0x560262651cc0] mmco: unref short failure
[h264 @ 0x560a4b85c440] mmco: unref short failure
[h264 @ 0x56027704cb00] mmco: unref short failure
[h264 @ 0x56027704cb00] mmco: unref short failure
[h264 @ 0x560a3020aa80] mmco: unref short failure
[h264 @ 0x560a3020aa80] mmco: unref short failure
 30%|██▉       | 581/1945 [2:30:31<9:37:09, 25.39s/it][h264 @ 0x560a2eb2c9c0] mmco: unref short failure
[h264 @ 0x560a2eb2c9c0] mmco: unref short failure
 30%|██▉       | 582/1945 [2:30:39<7:40:43, 20.28s/it][h264 @ 0x560a396fc9c0] mmco: unref short failure
[h264 @ 0x560a396fc9c0] mmco: unref short failure
 30%|██▉       | 583/1945 [2:30:47<6:13:50, 16.47s/it][h264 @ 0x555a30358880] mmco: unref short failure
[h264 @ 0x5621458a8ac0] mmco: unref short failure
[h264 @ 0x5621458a8ac0] mmco: unref short failure
[h264 @ 0x555a47d3fb80] mmco: unref short failure
 30%|███       | 584/1945 [2:30:55<5:19:49, 14.10s/it][h264 @ 0x560a2d9a5f80] mmco: unref short failure
[h264 @ 0x560a2d9a5f80] mmco: unref short failure
[h264 @ 0x5621361139c0] mmco: unref short failure
[h264 @ 0x5602787d2e80] mmco: unref short failure
 30%|███       | 585/1945 [2:31:04<4:39:07, 12.31s/it][h264 @ 0x56212f0ca940] mmco: unref short failure
[h264 @ 0x56212f0ca940] mmco: unref short failure
[h264 @ 0x5602787b3500] mmco: unref short failure
[h264 @ 0x5602787b3500] mmco: unref short failure
[h264 @ 0x555a30277a40] mmco: unref short failure
[h264 @ 0x555a30277a40] mmco: unref short failure
[h264 @ 0x555a494b9100] mmco: unref short failure
[h264 @ 0x56025a7d0700] mmco: unref short failure
[h264 @ 0x56025a7d0700] mmco: unref short failure
 30%|███       | 586/1945 [2:31:11<4:06:48, 10.90s/it] 30%|███       | 587/1945 [2:31:19<3:44:04,  9.90s/it][h264 @ 0x562129f75440] mmco: unref short failure
[h264 @ 0x562129f75440] mmco: unref short failure
 30%|███       | 588/1945 [2:31:26<3:22:39,  8.96s/it][h264 @ 0x560278ec8580] mmco: unref short failure
[h264 @ 0x555a30358f40] mmco: unref short failure
[h264 @ 0x5621293bb400] mmco: unref short failure
[h264 @ 0x5621293bb400] mmco: unref short failure
[h264 @ 0x5602725ee580] mmco: unref short failure
[h264 @ 0x5602725ee580] mmco: unref short failure
[h264 @ 0x5602725ee580] mmco: unref short failure
[h264 @ 0x5602725ee580] mmco: unref short failure
[h264 @ 0x5621286f1080] mmco: unref short failure
[h264 @ 0x5621286f1080] mmco: unref short failure
[h264 @ 0x5621286f1080] mmco: unref short failure
[h264 @ 0x5621286f1080] mmco: unref short failure
[h264 @ 0x560262cfe500] mmco: unref short failure
[h264 @ 0x560262cfe500] mmco: unref short failure
[h264 @ 0x56025a5a4100] mmco: unref short failure
[h264 @ 0x555a3c66d240] mmco: unref short failure
[h264 @ 0x56025d3a2f00] mmco: unref short failure
[h264 @ 0x56025d3a2f00] mmco: unref short failure
[h264 @ 0x560a3bafc800] mmco: unref short failure
[h264 @ 0x560a3bafc800] mmco: unref short failure
[h264 @ 0x5621458a93c0] mmco: unref short failure
[h264 @ 0x555a49ec8800] mmco: unref short failure
[h264 @ 0x555a49ec8800] mmco: unref short failure
[h264 @ 0x56025b983f80] mmco: unref short failure
[h264 @ 0x56025b983f80] mmco: unref short failure
[h264 @ 0x555a30f99140] mmco: unref short failure
[h264 @ 0x56025b725b00] mmco: unref short failure
[h264 @ 0x56025b725b00] mmco: unref short failure
[h264 @ 0x5621315ba8c0] mmco: unref short failure
[h264 @ 0x555a30479dc0] mmco: unref short failure
[h264 @ 0x555a30479dc0] mmco: unref short failure
[h264 @ 0x555a30479dc0] mmco: unref short failure
not have audios ua_Kowav7hg.20
[h264 @ 0x562138bf1680] mmco: unref short failure
[h264 @ 0x562138bf1680] mmco: unref short failure
[h264 @ 0x562138bf1680] mmco: unref short failure
[h264 @ 0x562138bf1680] mmco: unref short failure
 30%|███       | 589/1945 [2:32:33<9:59:43, 26.54s/it][h264 @ 0x560263bbdf00] mmco: unref short failure
[h264 @ 0x560263bbdf00] mmco: unref short failure
[h264 @ 0x56213e7bcb80] mmco: unref short failure
[h264 @ 0x56213e7bcb80] mmco: unref short failure
[h264 @ 0x56213e7bcb80] mmco: unref short failure
[h264 @ 0x56213e7bcb80] mmco: unref short failure
 30%|███       | 590/1945 [2:32:40<7:47:34, 20.70s/it] 30%|███       | 591/1945 [2:32:48<6:18:21, 16.77s/it][h264 @ 0x56212991ca40] mmco: unref short failure
[h264 @ 0x56212991ca40] mmco: unref short failure
[h264 @ 0x555a4e1f6600] mmco: unref short failure
 30%|███       | 592/1945 [2:32:55<5:15:39, 14.00s/it][h264 @ 0x555a3418c940] mmco: unref short failure
[h264 @ 0x555a3418c940] mmco: unref short failure
[h264 @ 0x56214655b800] mmco: unref short failure
[h264 @ 0x560a3f2278c0] mmco: unref short failure
[h264 @ 0x560a3f2278c0] mmco: unref short failure
 30%|███       | 593/1945 [2:33:03<4:36:09, 12.26s/it][h264 @ 0x5621489f4040] mmco: unref short failure
 31%|███       | 594/1945 [2:33:11<4:02:03, 10.75s/it] 31%|███       | 595/1945 [2:33:18<3:37:35,  9.67s/it] 31%|███       | 596/1945 [2:33:25<3:21:10,  8.95s/it][h264 @ 0x56026d884000] mmco: unref short failure
[h264 @ 0x555a38cdcd80] mmco: unref short failure
[h264 @ 0x555a38cdcd80] mmco: unref short failure
[h264 @ 0x555a51b83500] mmco: unref short failure
[h264 @ 0x555a51b83500] mmco: unref short failure
[h264 @ 0x562147205c00] mmco: unref short failure
[h264 @ 0x562128dabc40] mmco: unref short failure
[h264 @ 0x562128dabc40] mmco: unref short failure
[h264 @ 0x560a31822940] mmco: unref short failure
[h264 @ 0x560269ad25c0] mmco: unref short failure
[h264 @ 0x56026ef7b5c0] mmco: unref short failure
[h264 @ 0x56026ef7b5c0] mmco: unref short failure
[h264 @ 0x560a4b457300] mmco: unref short failure
[h264 @ 0x560a4b457300] mmco: unref short failure
[h264 @ 0x560a4b457300] mmco: unref short failure
[h264 @ 0x560a4b457300] mmco: unref short failure
[h264 @ 0x562129969040] mmco: unref short failure
[h264 @ 0x560a40f4e8c0] mmco: unref short failure
[h264 @ 0x560261a77680] mmco: unref short failure
[h264 @ 0x560261a77680] mmco: unref short failure
[h264 @ 0x56212faee240] mmco: unref short failure
[h264 @ 0x56212faee240] mmco: unref short failure
[h264 @ 0x560a3039c900] mmco: unref short failure
[h264 @ 0x560a3039c900] mmco: unref short failure
 31%|███       | 597/1945 [2:34:31<9:45:00, 26.04s/it][h264 @ 0x562129c58dc0] mmco: unref short failure
[h264 @ 0x562129c58dc0] mmco: unref short failure
 31%|███       | 598/1945 [2:34:38<7:37:28, 20.38s/it][h264 @ 0x555a3f0a3f40] mmco: unref short failure
[h264 @ 0x555a3f0a3f40] mmco: unref short failure
[h264 @ 0x56213a2d40c0] mmco: unref short failure
[h264 @ 0x56213a2d40c0] mmco: unref short failure
[h264 @ 0x56025ed89000] mmco: unref short failure
 31%|███       | 599/1945 [2:34:46<6:13:48, 16.66s/it]09/08/2024 23:16:04 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/08/2024 23:16:04 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x560260238d40] mmco: unref short failure
[h264 @ 0x560260238d40] mmco: unref short failure
[h264 @ 0x555a315c8200] mmco: unref short failure
[h264 @ 0x555a315c8200] mmco: unref short failure
[h264 @ 0x555a315c8200] mmco: unref short failure
[h264 @ 0x5602600b23c0] mmco: unref short failure
[h264 @ 0x5602600b23c0] mmco: unref short failure
[h264 @ 0x5621384a1300] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x56213a2d4300] mmco: unref short failure
[h264 @ 0x56213a2d4300] mmco: unref short failure
[h264 @ 0x562142ea5c00] mmco: unref short failure
[h264 @ 0x560a31b0d580] mmco: unref short failure
[h264 @ 0x555a33d1ddc0] mmco: unref short failure
[h264 @ 0x56214509dac0] mmco: unref short failure
[h264 @ 0x56214509dac0] mmco: unref short failure
[h264 @ 0x555a45821fc0] mmco: unref short failure
[h264 @ 0x555a45821fc0] mmco: unref short failure
[h264 @ 0x560a3b6e8b40] mmco: unref short failure
[h264 @ 0x560a3b6e8b40] mmco: unref short failure
[h264 @ 0x555a30460540] mmco: unref short failure
[h264 @ 0x562129969500] mmco: unref short failure
[h264 @ 0x562129969500] mmco: unref short failure
[h264 @ 0x562129968e40] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  1%|          | 2/221 [00:00<01:07,  3.23it/s][A
  2%|▏         | 4/221 [00:00<00:35,  6.17it/s][A
  3%|▎         | 6/221 [00:00<00:27,  7.87it/s][A
  4%|▎         | 8/221 [00:01<00:31,  6.82it/s][A
  4%|▍         | 9/221 [00:01<00:29,  7.29it/s][A[h264 @ 0x56212ed86b00] mmco: unref short failure
[h264 @ 0x56212ed86b00] mmco: unref short failure

  5%|▍         | 10/221 [00:03<01:58,  1.78it/s][A
  5%|▌         | 12/221 [00:03<01:16,  2.74it/s][A
  6%|▌         | 13/221 [00:03<01:14,  2.78it/s][A
  6%|▋         | 14/221 [00:06<03:24,  1.01it/s][A
  7%|▋         | 15/221 [00:06<02:39,  1.29it/s][A
  7%|▋         | 16/221 [00:07<02:34,  1.33it/s][A
  8%|▊         | 17/221 [00:08<03:00,  1.13it/s][A
  8%|▊         | 18/221 [00:08<02:15,  1.50it/s][A
  9%|▉         | 20/221 [00:09<01:18,  2.55it/s][A
 10%|▉         | 21/221 [00:09<01:04,  3.10it/s][A
 10%|█         | 23/221 [00:09<00:43,  4.60it/s][A
 11%|█▏        | 25/221 [00:09<00:35,  5.52it/s][A[h264 @ 0x555a3eb98d00] mmco: unref short failure
[h264 @ 0x555a3eb98d00] mmco: unref short failure

 12%|█▏        | 27/221 [00:09<00:33,  5.87it/s][A
 13%|█▎        | 28/221 [00:10<00:34,  5.65it/s][A[h264 @ 0x560a38497040] mmco: unref short failure
[h264 @ 0x560a38497040] mmco: unref short failure

 13%|█▎        | 29/221 [00:13<02:57,  1.08it/s][A
 14%|█▎        | 30/221 [00:13<02:21,  1.35it/s][A
 14%|█▍        | 31/221 [00:13<01:51,  1.70it/s][A
 15%|█▍        | 33/221 [00:14<01:44,  1.80it/s][A
 16%|█▌        | 35/221 [00:15<01:10,  2.65it/s][A
 16%|█▋        | 36/221 [00:15<00:59,  3.08it/s][A
 17%|█▋        | 37/221 [00:15<00:53,  3.44it/s][A
 17%|█▋        | 38/221 [00:15<00:49,  3.67it/s][A
 18%|█▊        | 39/221 [00:16<01:13,  2.48it/s][A
 18%|█▊        | 40/221 [00:16<01:09,  2.61it/s][A
 19%|█▉        | 42/221 [00:16<00:43,  4.15it/s][A
 20%|██        | 45/221 [00:17<00:30,  5.79it/s][A
 21%|██▏       | 47/221 [00:17<00:24,  7.21it/s][A
 22%|██▏       | 49/221 [00:17<00:26,  6.44it/s][A
 23%|██▎       | 50/221 [00:21<02:23,  1.19it/s][A
 24%|██▎       | 52/221 [00:22<01:47,  1.57it/s][A
 24%|██▍       | 54/221 [00:22<01:16,  2.19it/s][A
 25%|██▌       | 56/221 [00:22<00:59,  2.76it/s][A
 26%|██▌       | 57/221 [00:22<00:52,  3.13it/s][A
 26%|██▌       | 58/221 [00:22<00:50,  3.22it/s][A
 27%|██▋       | 59/221 [00:23<00:48,  3.34it/s][A
 28%|██▊       | 61/221 [00:23<00:34,  4.68it/s][A[h264 @ 0x560a37715900] mmco: unref short failure

 28%|██▊       | 62/221 [00:23<00:32,  4.95it/s][A
 29%|██▊       | 63/221 [00:23<00:32,  4.93it/s][A
 29%|██▉       | 64/221 [00:23<00:28,  5.57it/s][A
 30%|██▉       | 66/221 [00:24<00:21,  7.25it/s][A
 31%|███       | 68/221 [00:24<00:18,  8.47it/s][A
 31%|███       | 69/221 [00:24<00:25,  6.02it/s][A
 32%|███▏      | 70/221 [00:24<00:24,  6.18it/s][A
 32%|███▏      | 71/221 [00:25<00:36,  4.09it/s][A
 33%|███▎      | 72/221 [00:25<00:32,  4.64it/s][A[h264 @ 0x555a4e75fe80] mmco: unref short failure

 33%|███▎      | 73/221 [00:25<00:36,  4.04it/s][A
 33%|███▎      | 74/221 [00:25<00:30,  4.76it/s][A
 34%|███▍      | 75/221 [00:26<00:36,  4.05it/s][A
 35%|███▍      | 77/221 [00:26<00:25,  5.57it/s][A
 35%|███▌      | 78/221 [00:26<00:32,  4.38it/s][A[h264 @ 0x56214b3b95c0] mmco: unref short failure
[h264 @ 0x56214b3b95c0] mmco: unref short failure

 36%|███▌      | 79/221 [00:26<00:31,  4.46it/s][A
 36%|███▌      | 80/221 [00:27<00:30,  4.68it/s][A
 37%|███▋      | 82/221 [00:27<00:25,  5.48it/s][A[h264 @ 0x562129ad2800] mmco: unref short failure
[h264 @ 0x562129ad2800] mmco: unref short failure

 38%|███▊      | 83/221 [00:31<02:32,  1.11s/it][A
 38%|███▊      | 84/221 [00:31<02:02,  1.12it/s][A
 39%|███▉      | 86/221 [00:31<01:13,  1.83it/s][A
 39%|███▉      | 87/221 [00:32<01:08,  1.96it/s][A[h264 @ 0x555a37de0e80] mmco: unref short failure
[h264 @ 0x555a37de0e80] mmco: unref short failure

 40%|███▉      | 88/221 [00:32<00:56,  2.35it/s][A
 40%|████      | 89/221 [00:32<00:49,  2.65it/s][A
 41%|████      | 90/221 [00:32<00:47,  2.76it/s][A
 41%|████      | 91/221 [00:33<00:41,  3.13it/s][A
 42%|████▏     | 92/221 [00:33<00:39,  3.24it/s][A
 43%|████▎     | 94/221 [00:33<00:26,  4.83it/s][A[h264 @ 0x56027a00b180] mmco: unref short failure
[h264 @ 0x56027a00b180] mmco: unref short failure

 43%|████▎     | 95/221 [00:36<01:33,  1.34it/s][A
 43%|████▎     | 96/221 [00:36<01:13,  1.71it/s][A
 44%|████▍     | 97/221 [00:36<00:59,  2.10it/s][A
 44%|████▍     | 98/221 [00:36<00:56,  2.17it/s][A
 45%|████▌     | 100/221 [00:36<00:34,  3.52it/s][A
 47%|████▋     | 103/221 [00:37<00:21,  5.53it/s][A
 48%|████▊     | 105/221 [00:37<00:18,  6.29it/s][A
 48%|████▊     | 107/221 [00:37<00:15,  7.27it/s][A
 49%|████▉     | 109/221 [00:38<00:20,  5.52it/s][A
 50%|█████     | 111/221 [00:38<00:19,  5.77it/s][A
 51%|█████     | 112/221 [00:38<00:21,  5.03it/s][A
 51%|█████     | 113/221 [00:38<00:22,  4.88it/s][A
 52%|█████▏    | 114/221 [00:39<00:27,  3.90it/s][A
 52%|█████▏    | 116/221 [00:39<00:19,  5.32it/s][A
 53%|█████▎    | 117/221 [00:39<00:20,  5.14it/s][A
 53%|█████▎    | 118/221 [00:39<00:21,  4.77it/s][A
 54%|█████▍    | 120/221 [00:40<00:17,  5.79it/s][A
 56%|█████▌    | 123/221 [00:40<00:11,  8.83it/s][A
 57%|█████▋    | 125/221 [00:40<00:12,  7.86it/s][A
 57%|█████▋    | 127/221 [00:40<00:11,  8.03it/s][A
 58%|█████▊    | 128/221 [00:41<00:12,  7.20it/s][A
 59%|█████▉    | 130/221 [00:41<00:12,  7.20it/s][A
 59%|█████▉    | 131/221 [00:41<00:13,  6.91it/s][A
 60%|█████▉    | 132/221 [00:41<00:18,  4.88it/s][A
 60%|██████    | 133/221 [00:42<00:17,  5.12it/s][A
 61%|██████    | 135/221 [00:42<00:13,  6.36it/s][A
 62%|██████▏   | 136/221 [00:42<00:12,  6.81it/s][A
 62%|██████▏   | 138/221 [00:42<00:12,  6.72it/s][A
 63%|██████▎   | 140/221 [00:42<00:09,  8.62it/s][A
 64%|██████▍   | 142/221 [00:43<00:13,  5.76it/s][A
 65%|██████▍   | 143/221 [00:43<00:12,  6.25it/s][A
 66%|██████▌   | 145/221 [00:43<00:11,  6.56it/s][A
 67%|██████▋   | 148/221 [00:44<00:09,  7.87it/s][A
 68%|██████▊   | 150/221 [00:44<00:08,  8.17it/s][A
 68%|██████▊   | 151/221 [00:44<00:12,  5.61it/s][A
 69%|██████▉   | 152/221 [00:45<00:15,  4.47it/s][A
 69%|██████▉   | 153/221 [00:45<00:15,  4.42it/s][A
 70%|███████   | 155/221 [00:45<00:10,  6.09it/s][A
 71%|███████   | 157/221 [00:45<00:09,  6.76it/s][A
 72%|███████▏  | 159/221 [00:45<00:07,  8.68it/s][A
 73%|███████▎  | 161/221 [00:46<00:05, 10.25it/s][A
 74%|███████▍  | 163/221 [00:46<00:05,  9.86it/s][A
 75%|███████▍  | 165/221 [00:46<00:05, 10.93it/s][A
 76%|███████▌  | 167/221 [00:46<00:04, 12.10it/s][A
 76%|███████▋  | 169/221 [00:46<00:03, 13.16it/s][A
 77%|███████▋  | 171/221 [00:47<00:06,  7.21it/s][A
 78%|███████▊  | 173/221 [00:47<00:06,  6.88it/s][A
 79%|███████▊  | 174/221 [00:48<00:12,  3.84it/s][A
 79%|███████▉  | 175/221 [00:49<00:19,  2.35it/s][A
 80%|████████  | 177/221 [00:49<00:13,  3.27it/s][A
 81%|████████  | 178/221 [00:49<00:12,  3.44it/s][A
 81%|████████  | 179/221 [00:49<00:11,  3.78it/s][A
 81%|████████▏ | 180/221 [00:50<00:15,  2.71it/s][A
 82%|████████▏ | 182/221 [00:50<00:09,  4.06it/s][A
 83%|████████▎ | 184/221 [00:51<00:07,  4.81it/s][A
 84%|████████▍ | 186/221 [00:51<00:05,  6.30it/s][A
 85%|████████▍ | 187/221 [00:51<00:05,  6.78it/s][A
 85%|████████▌ | 188/221 [00:51<00:06,  5.34it/s][A
 86%|████████▌ | 189/221 [00:51<00:06,  5.18it/s][A
 86%|████████▌ | 190/221 [00:51<00:05,  5.71it/s][A
 87%|████████▋ | 192/221 [00:52<00:03,  8.06it/s][A
 88%|████████▊ | 194/221 [00:52<00:03,  8.30it/s][A
 89%|████████▊ | 196/221 [00:53<00:08,  2.89it/s][A
 90%|████████▉ | 198/221 [00:54<00:06,  3.80it/s][A
 90%|█████████ | 200/221 [00:54<00:04,  4.76it/s][A
 91%|█████████▏| 202/221 [00:54<00:03,  5.33it/s][A
 92%|█████████▏| 204/221 [00:55<00:04,  4.22it/s][A
 93%|█████████▎| 205/221 [00:55<00:03,  4.71it/s][A
 93%|█████████▎| 206/221 [00:55<00:04,  3.55it/s][A
 94%|█████████▎| 207/221 [00:56<00:03,  3.86it/s][A
 95%|█████████▍| 209/221 [00:56<00:02,  5.56it/s][A
 95%|█████████▌| 211/221 [00:56<00:01,  5.77it/s][A
 96%|█████████▌| 212/221 [00:56<00:01,  6.30it/s][A
 96%|█████████▋| 213/221 [00:56<00:01,  5.56it/s][A
 97%|█████████▋| 214/221 [00:57<00:01,  5.69it/s][A
 98%|█████████▊| 216/221 [00:57<00:00,  6.93it/s][A
 98%|█████████▊| 217/221 [00:57<00:00,  6.61it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  8.07it/s][A
100%|█████████▉| 220/221 [00:57<00:00,  7.98it/s][A100%|██████████| 221/221 [00:57<00:00,  3.83it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.77it/s][A
  1%|          | 2/221 [00:00<00:58,  3.77it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.77it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.78it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.78it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.78it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.78it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.78it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.78it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.78it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.78it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.78it/s][A
  6%|▌         | 13/221 [00:03<00:55,  3.78it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.78it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.78it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.78it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.78it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.78it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.78it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.78it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.78it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.78it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.78it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.78it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 28/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.78it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.78it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.78it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.78it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.78it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.78it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.78it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.78it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.78it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.78it/s][A
 19%|█▉        | 43/221 [00:11<00:47,  3.78it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.78it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.78it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.78it/s][A
 21%|██▏       | 47/221 [00:12<00:46,  3.78it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.78it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.78it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.78it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.78it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.78it/s][A
 24%|██▍       | 53/221 [00:14<00:44,  3.78it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.78it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.78it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.78it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.78it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.78it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.78it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.78it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.78it/s][A
 28%|██▊       | 62/221 [00:16<00:42,  3.78it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.78it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.78it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.78it/s][A
 30%|██▉       | 66/221 [00:17<00:41,  3.78it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.78it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.78it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.78it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.78it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.78it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.78it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.78it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.78it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.78it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.78it/s][A
 37%|███▋      | 81/221 [00:21<00:37,  3.78it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.78it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.78it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.78it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 87/221 [00:23<00:35,  3.78it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.78it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.78it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.78it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.78it/s][A
 43%|████▎     | 96/221 [00:25<00:33,  3.78it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.78it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.78it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.78it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.78it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.78it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.78it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.78it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 106/221 [00:28<00:30,  3.78it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.78it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.78it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.78it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.78it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.78it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.78it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.78it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 115/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.78it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.78it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.78it/s][A
 55%|█████▍    | 121/221 [00:32<00:26,  3.78it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.78it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.78it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.78it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.78it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.78it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 134/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 140/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.78it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.78it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.78it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.78it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.78it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.78it/s][A
 70%|███████   | 155/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.78it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.78it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.78it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.78it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.78it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.78it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.78it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.78it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.78it/s][A
 76%|███████▌  | 168/221 [00:44<00:14,  3.78it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.78it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.78it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.78it/s][A
 79%|███████▊  | 174/221 [00:46<00:12,  3.78it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.78it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.78it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.78it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.78it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.78it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.78it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.78it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.78it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.78it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 193/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [00:56<00:02,  3.78it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.78it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.78it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.78it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.78it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.78it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.78it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.78it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:35,  6.14it/s][A
  1%|          | 2/221 [00:00<00:41,  5.28it/s][A
  1%|▏         | 3/221 [00:00<00:45,  4.80it/s][A
  2%|▏         | 4/221 [00:00<00:38,  5.57it/s][A
  2%|▏         | 5/221 [00:00<00:38,  5.62it/s][A
  3%|▎         | 7/221 [00:01<00:40,  5.34it/s][A
  4%|▎         | 8/221 [00:01<00:46,  4.58it/s][A
  4%|▍         | 9/221 [00:01<00:41,  5.15it/s][A
  5%|▍         | 10/221 [00:02<00:56,  3.71it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.80it/s][A
  5%|▌         | 12/221 [00:02<00:48,  4.35it/s][A
  6%|▌         | 13/221 [00:03<01:27,  2.38it/s][A
  7%|▋         | 15/221 [00:03<01:03,  3.24it/s][A
  7%|▋         | 16/221 [00:04<01:06,  3.10it/s][A
  8%|▊         | 17/221 [00:04<01:18,  2.61it/s][A
  8%|▊         | 18/221 [00:05<01:14,  2.73it/s][A
  9%|▊         | 19/221 [00:05<01:08,  2.96it/s][A
  9%|▉         | 20/221 [00:05<00:55,  3.63it/s][A
 10%|▉         | 21/221 [00:05<00:48,  4.10it/s][A
 10%|▉         | 22/221 [00:05<00:41,  4.80it/s][A
 11%|█         | 24/221 [00:06<00:35,  5.55it/s][A
 11%|█▏        | 25/221 [00:06<00:37,  5.30it/s][A
 12%|█▏        | 26/221 [00:06<00:41,  4.68it/s][A
 12%|█▏        | 27/221 [00:06<00:36,  5.33it/s][A
 13%|█▎        | 28/221 [00:07<00:49,  3.90it/s][A
 13%|█▎        | 29/221 [00:07<00:46,  4.17it/s][A
 14%|█▎        | 30/221 [00:07<00:44,  4.34it/s][A
 14%|█▍        | 31/221 [00:07<00:40,  4.67it/s][A
 15%|█▍        | 33/221 [00:07<00:35,  5.35it/s][A
 15%|█▌        | 34/221 [00:08<00:35,  5.24it/s][A
 16%|█▌        | 35/221 [00:08<00:45,  4.13it/s][A
 16%|█▋        | 36/221 [00:08<00:45,  4.09it/s][A
 17%|█▋        | 37/221 [00:09<00:46,  3.94it/s][A
 17%|█▋        | 38/221 [00:09<00:48,  3.80it/s][A
 18%|█▊        | 39/221 [00:09<00:43,  4.15it/s][A
 18%|█▊        | 40/221 [00:09<00:49,  3.68it/s][A
 19%|█▊        | 41/221 [00:10<00:40,  4.50it/s][A
 19%|█▉        | 42/221 [00:10<00:43,  4.12it/s][A
 19%|█▉        | 43/221 [00:10<00:48,  3.64it/s][A
 20%|█▉        | 44/221 [00:10<00:44,  3.97it/s][A
 20%|██        | 45/221 [00:11<00:40,  4.34it/s][A
 21%|██        | 46/221 [00:11<00:39,  4.47it/s][A
 21%|██▏       | 47/221 [00:11<00:38,  4.49it/s][A
 22%|██▏       | 48/221 [00:11<00:35,  4.82it/s][A
 22%|██▏       | 49/221 [00:11<00:37,  4.64it/s][A
 23%|██▎       | 50/221 [00:12<00:38,  4.42it/s][A
 24%|██▎       | 52/221 [00:12<00:33,  5.05it/s][A
 24%|██▍       | 53/221 [00:12<00:31,  5.38it/s][A
 24%|██▍       | 54/221 [00:13<00:45,  3.67it/s][A
 25%|██▍       | 55/221 [00:13<00:47,  3.51it/s][A
 25%|██▌       | 56/221 [00:13<00:42,  3.88it/s][A
 26%|██▌       | 57/221 [00:13<00:43,  3.77it/s][A
 26%|██▌       | 58/221 [00:14<00:46,  3.49it/s][A
 27%|██▋       | 59/221 [00:14<00:44,  3.63it/s][A
 27%|██▋       | 60/221 [00:14<00:40,  4.02it/s][A
 28%|██▊       | 61/221 [00:14<00:38,  4.16it/s][A
 28%|██▊       | 62/221 [00:15<00:40,  3.95it/s][A
 29%|██▊       | 63/221 [00:15<00:33,  4.69it/s][A
 29%|██▉       | 64/221 [00:15<00:43,  3.62it/s][A
 29%|██▉       | 65/221 [00:15<00:35,  4.44it/s][A
 30%|██▉       | 66/221 [00:16<00:50,  3.07it/s][A
 30%|███       | 67/221 [00:16<00:55,  2.79it/s][A
 31%|███       | 68/221 [00:16<00:45,  3.35it/s][A
 31%|███       | 69/221 [00:17<01:01,  2.49it/s][A
 32%|███▏      | 70/221 [00:17<00:48,  3.11it/s][A
 32%|███▏      | 71/221 [00:18<00:46,  3.22it/s][A
 33%|███▎      | 72/221 [00:18<00:51,  2.90it/s][A
 33%|███▎      | 73/221 [00:18<00:42,  3.46it/s][A
 33%|███▎      | 74/221 [00:18<00:35,  4.18it/s][A
 34%|███▍      | 75/221 [00:19<00:35,  4.06it/s][A
 34%|███▍      | 76/221 [00:19<00:33,  4.31it/s][A
 35%|███▍      | 77/221 [00:19<00:36,  3.95it/s][A
 35%|███▌      | 78/221 [00:19<00:32,  4.46it/s][A
 36%|███▌      | 79/221 [00:20<00:55,  2.56it/s][A
 36%|███▌      | 80/221 [00:20<00:46,  3.03it/s][A
 37%|███▋      | 81/221 [00:20<00:39,  3.54it/s][A
 37%|███▋      | 82/221 [00:21<00:44,  3.13it/s][A
 38%|███▊      | 83/221 [00:21<00:46,  2.95it/s][A
 38%|███▊      | 84/221 [00:21<00:41,  3.27it/s][A
 38%|███▊      | 85/221 [00:21<00:34,  3.98it/s][A
 39%|███▉      | 86/221 [00:22<00:32,  4.18it/s][A
 39%|███▉      | 87/221 [00:22<00:36,  3.71it/s][A
 40%|███▉      | 88/221 [00:23<00:47,  2.79it/s][A
 40%|████      | 89/221 [00:23<00:49,  2.67it/s][A
 41%|████      | 90/221 [00:23<00:45,  2.89it/s][A
 41%|████      | 91/221 [00:23<00:38,  3.35it/s][A
 42%|████▏     | 92/221 [00:24<00:41,  3.11it/s][A
 42%|████▏     | 93/221 [00:25<00:58,  2.18it/s][A
 43%|████▎     | 94/221 [00:25<00:54,  2.32it/s][A
 43%|████▎     | 95/221 [00:25<00:47,  2.64it/s][A
 43%|████▎     | 96/221 [00:25<00:41,  3.00it/s][A
 44%|████▍     | 97/221 [00:26<00:36,  3.41it/s][A
 44%|████▍     | 98/221 [00:26<00:37,  3.27it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.78it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.86it/s][A
 46%|████▌     | 101/221 [00:27<00:36,  3.25it/s][A
 46%|████▌     | 102/221 [00:27<00:41,  2.84it/s][A
 47%|████▋     | 103/221 [00:27<00:35,  3.30it/s][A
 47%|████▋     | 104/221 [00:28<00:32,  3.65it/s][A
 48%|████▊     | 105/221 [00:28<00:31,  3.74it/s][A
 48%|████▊     | 106/221 [00:28<00:40,  2.87it/s][A
 48%|████▊     | 107/221 [00:29<00:36,  3.12it/s][A
 49%|████▉     | 108/221 [00:29<00:34,  3.25it/s][A
 49%|████▉     | 109/221 [00:29<00:29,  3.82it/s][A
 50%|████▉     | 110/221 [00:29<00:28,  3.92it/s][A
 50%|█████     | 111/221 [00:30<00:31,  3.46it/s][A
 51%|█████     | 112/221 [00:30<00:32,  3.39it/s][A
 51%|█████     | 113/221 [00:30<00:27,  3.95it/s][A
 52%|█████▏    | 115/221 [00:31<00:22,  4.78it/s][A
 52%|█████▏    | 116/221 [00:31<00:25,  4.14it/s][A
 53%|█████▎    | 117/221 [00:31<00:24,  4.17it/s][A
 53%|█████▎    | 118/221 [00:31<00:25,  4.08it/s][A
 54%|█████▍    | 119/221 [00:32<00:30,  3.32it/s][A
 54%|█████▍    | 120/221 [00:32<00:29,  3.48it/s][A
 55%|█████▌    | 122/221 [00:32<00:22,  4.40it/s][A
 56%|█████▌    | 123/221 [00:33<00:21,  4.49it/s][A
 56%|█████▌    | 124/221 [00:33<00:20,  4.67it/s][A
 57%|█████▋    | 125/221 [00:33<00:24,  3.88it/s][A
 57%|█████▋    | 126/221 [00:33<00:24,  3.89it/s][A
 57%|█████▋    | 127/221 [00:34<00:27,  3.44it/s][A
 58%|█████▊    | 128/221 [00:34<00:25,  3.67it/s][A
 58%|█████▊    | 129/221 [00:34<00:21,  4.36it/s][A
 59%|█████▉    | 130/221 [00:34<00:20,  4.51it/s][A
 60%|█████▉    | 132/221 [00:35<00:16,  5.36it/s][A
 60%|██████    | 133/221 [00:35<00:20,  4.36it/s][A
 61%|██████    | 134/221 [00:35<00:20,  4.25it/s][A
 61%|██████    | 135/221 [00:36<00:20,  4.14it/s][A
 62%|██████▏   | 136/221 [00:36<00:20,  4.18it/s][A
 62%|██████▏   | 137/221 [00:36<00:18,  4.44it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.85it/s][A
 63%|██████▎   | 139/221 [00:37<00:25,  3.19it/s][A
 63%|██████▎   | 140/221 [00:37<00:24,  3.37it/s][A
 64%|██████▍   | 141/221 [00:37<00:24,  3.27it/s][A
 64%|██████▍   | 142/221 [00:37<00:21,  3.75it/s][A
 65%|██████▍   | 143/221 [00:38<00:30,  2.53it/s][A
 65%|██████▌   | 144/221 [00:39<00:31,  2.44it/s][A
 66%|██████▌   | 145/221 [00:39<00:24,  3.10it/s][A
 67%|██████▋   | 147/221 [00:39<00:19,  3.84it/s][A
 67%|██████▋   | 148/221 [00:40<00:22,  3.19it/s][A
 67%|██████▋   | 149/221 [00:40<00:22,  3.15it/s][A
 68%|██████▊   | 150/221 [00:40<00:21,  3.26it/s][A
 68%|██████▊   | 151/221 [00:40<00:21,  3.32it/s][A
 69%|██████▉   | 152/221 [00:41<00:29,  2.33it/s][A
 69%|██████▉   | 153/221 [00:41<00:24,  2.81it/s][A
 70%|██████▉   | 154/221 [00:42<00:20,  3.19it/s][A
 70%|███████   | 155/221 [00:42<00:21,  3.12it/s][A
 71%|███████   | 156/221 [00:43<00:25,  2.51it/s][A
 71%|███████   | 157/221 [00:43<00:24,  2.65it/s][A
 71%|███████▏  | 158/221 [00:43<00:22,  2.84it/s][A
 72%|███████▏  | 159/221 [00:43<00:17,  3.52it/s][A
 72%|███████▏  | 160/221 [00:43<00:15,  3.99it/s][A
 73%|███████▎  | 161/221 [00:44<00:17,  3.52it/s][A
 73%|███████▎  | 162/221 [00:44<00:15,  3.81it/s][A
 74%|███████▍  | 163/221 [00:44<00:14,  3.88it/s][A
 74%|███████▍  | 164/221 [00:45<00:14,  3.99it/s][A
 75%|███████▍  | 165/221 [00:45<00:15,  3.62it/s][A
 75%|███████▌  | 166/221 [00:45<00:14,  3.81it/s][A
 76%|███████▌  | 168/221 [00:45<00:12,  4.34it/s][A
 76%|███████▋  | 169/221 [00:46<00:11,  4.59it/s][A
 77%|███████▋  | 170/221 [00:46<00:13,  3.65it/s][A
 77%|███████▋  | 171/221 [00:46<00:12,  4.06it/s][A
 78%|███████▊  | 172/221 [00:46<00:11,  4.39it/s][A
 78%|███████▊  | 173/221 [00:47<00:14,  3.38it/s][A
 79%|███████▊  | 174/221 [00:47<00:16,  2.91it/s][A
 79%|███████▉  | 175/221 [00:48<00:16,  2.80it/s][A
 80%|███████▉  | 176/221 [00:48<00:13,  3.25it/s][A
 80%|████████  | 177/221 [00:48<00:12,  3.59it/s][A
 81%|████████  | 178/221 [00:48<00:12,  3.57it/s][A
 81%|████████  | 179/221 [00:49<00:11,  3.75it/s][A
 81%|████████▏ | 180/221 [00:49<00:09,  4.20it/s][A
 82%|████████▏ | 181/221 [00:49<00:09,  4.22it/s][A
 82%|████████▏ | 182/221 [00:49<00:10,  3.65it/s][A
 83%|████████▎ | 183/221 [00:50<00:10,  3.58it/s][A
 83%|████████▎ | 184/221 [00:50<00:08,  4.13it/s][A
 84%|████████▎ | 185/221 [00:50<00:07,  4.53it/s][A
 84%|████████▍ | 186/221 [00:51<00:10,  3.32it/s][A
 85%|████████▍ | 187/221 [00:51<00:10,  3.21it/s][A
 85%|████████▌ | 188/221 [00:51<00:10,  3.27it/s][A
 86%|████████▌ | 189/221 [00:51<00:09,  3.44it/s][A
 86%|████████▌ | 190/221 [00:52<00:09,  3.11it/s][A
 86%|████████▋ | 191/221 [00:52<00:07,  3.79it/s][A
 87%|████████▋ | 192/221 [00:52<00:09,  3.16it/s][A
 87%|████████▋ | 193/221 [00:53<00:07,  3.84it/s][A
 88%|████████▊ | 194/221 [00:53<00:07,  3.54it/s][A
 88%|████████▊ | 195/221 [00:53<00:06,  3.74it/s][A
 89%|████████▊ | 196/221 [00:54<00:08,  3.03it/s][A
 89%|████████▉ | 197/221 [00:54<00:07,  3.39it/s][A
 90%|████████▉ | 198/221 [00:54<00:07,  3.11it/s][A
 90%|█████████ | 199/221 [00:54<00:06,  3.32it/s][A
 90%|█████████ | 200/221 [00:55<00:06,  3.20it/s][A
 91%|█████████ | 201/221 [00:55<00:05,  3.51it/s][A
 91%|█████████▏| 202/221 [00:55<00:05,  3.30it/s][A
 92%|█████████▏| 203/221 [00:55<00:04,  3.90it/s][A
 92%|█████████▏| 204/221 [00:56<00:06,  2.63it/s][A
 93%|█████████▎| 205/221 [00:56<00:04,  3.25it/s][A
 93%|█████████▎| 206/221 [00:57<00:04,  3.15it/s][A
 94%|█████████▎| 207/221 [00:57<00:03,  3.75it/s][A
 94%|█████████▍| 208/221 [00:57<00:03,  4.00it/s][A
 95%|█████████▍| 209/221 [00:57<00:03,  3.70it/s][A
 95%|█████████▌| 210/221 [00:57<00:02,  4.41it/s][A
 95%|█████████▌| 211/221 [00:58<00:02,  3.56it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  3.67it/s][A
 96%|█████████▋| 213/221 [00:58<00:02,  3.96it/s][A
 97%|█████████▋| 214/221 [00:59<00:02,  3.17it/s][A
 97%|█████████▋| 215/221 [00:59<00:01,  3.33it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  3.32it/s][A
 98%|█████████▊| 217/221 [01:00<00:01,  3.34it/s][A
 99%|█████████▊| 218/221 [01:00<00:00,  3.31it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  3.00it/s][A
100%|█████████▉| 220/221 [01:01<00:00,  3.16it/s][A
100%|██████████| 221/221 [01:01<00:00,  3.16it/s][A100%|██████████| 221/221 [01:01<00:00,  3.60it/s]
09/08/2024 23:21:30 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 599--===========

09/08/2024 23:21:30 - INFO - __main__ -   {'area_r1': 32.4, 'area_recall': '32.4/55.3/65.2', 'area_ravg': 50.9}
09/08/2024 23:21:30 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 599--===========

09/08/2024 23:21:30 - INFO - __main__ -   {'forward_r1': 33.5, 'forward_recall': '33.5/60.1/69.2', 'forward_ravg': 54.3}
09/08/2024 23:21:30 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 599--===========

09/08/2024 23:21:30 - INFO - __main__ -   {'area_video_r1': 38.9, 'area_video_recall': '38.9/67.3/78.1', 'area_video_ravg': 61.4}
09/08/2024 23:21:30 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 299=======

09/08/2024 23:21:30 - INFO - __main__ -   {'area_video_r1': 39.4, 'area_video_recall': '39.4/65.4/77.1', 'area_video_ravg': 60.6}
09/08/2024 23:21:30 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 599--===========

09/08/2024 23:21:30 - INFO - __main__ -   {'area_video_r1': 50.6, 'area_video_recall': '50.6/71.9/79.6', 'area_video_ravg': 67.4, 'area_video_back_r1': 49.4, 'area_video_back_recall': '49.4/73.2/79.6', 'area_video_back_ravg': 67.4}
09/08/2024 23:21:30 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 299=======

09/08/2024 23:21:30 - INFO - __main__ -   {'area_video_r1': 50.7, 'area_video_recall': '50.7/75.1/82.8', 'area_video_ravg': 69.5, 'area_video_back_r1': 50.2, 'area_video_back_recall': '50.2/71.5/78.3', 'area_video_back_ravg': 66.7}
09/08/2024 23:21:30 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 599--===========

09/08/2024 23:21:30 - INFO - __main__ -   {'video_r1': 43.4, 'video_recall': '43.4/70.9/81.0', 'video_ravg': 65.1}
09/08/2024 23:21:30 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 599=======

09/08/2024 23:21:30 - INFO - __main__ -   {'video_r1': 43.4, 'video_recall': '43.4/70.9/81.0', 'video_ravg': 65.1}
09/08/2024 23:21:30 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 599--===========

09/08/2024 23:21:30 - INFO - __main__ -   {'video_r1': 51.5, 'video_recall': '51.5/76.0/83.0', 'video_ravg': 70.2}
09/08/2024 23:21:30 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 599=======

09/08/2024 23:21:30 - INFO - __main__ -   {'video_r1': 51.5, 'video_recall': '51.5/76.0/83.0', 'video_ravg': 70.2}
09/08/2024 23:22:05 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 2.9024314880371094, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04196847230195999, 'loss_ret%tv%ta--finetune_area/loss_area': 1.4083199501037598, 'loss_ret%tv%ta--finetune_area/total_loss': 4.352720260620117}
 31%|███       | 600/1945 [2:40:50<45:06:19, 120.73s/it] 31%|███       | 601/1945 [2:40:54<32:01:03, 85.76s/it]  31%|███       | 602/1945 [2:40:59<22:54:35, 61.41s/it][h264 @ 0x560a494e1f00] mmco: unref short failure
[h264 @ 0x560a494e1f00] mmco: unref short failure
[h264 @ 0x560262a758c0] mmco: unref short failure
[h264 @ 0x560262a758c0] mmco: unref short failure
 31%|███       | 603/1945 [2:41:04<16:36:36, 44.56s/it] 31%|███       | 604/1945 [2:41:09<12:14:12, 32.85s/it][h264 @ 0x5602767388c0] mmco: unref short failure
 31%|███       | 605/1945 [2:41:16<9:16:38, 24.92s/it] [h264 @ 0x5621329a5680] mmco: unref short failure
[h264 @ 0x5621329a5680] mmco: unref short failure
[h264 @ 0x555a33eb6580] mmco: unref short failure
[h264 @ 0x555a33eb6580] mmco: unref short failure
[h264 @ 0x560a343c5980] mmco: unref short failure
 31%|███       | 606/1945 [2:41:23<7:15:04, 19.50s/it][h264 @ 0x560a2d0a27c0] mmco: unref short failure
[h264 @ 0x562139cfae80] mmco: unref short failure
[h264 @ 0x562139cfae80] mmco: unref short failure
[h264 @ 0x555a4df38100] mmco: unref short failure
[h264 @ 0x555a4df38100] mmco: unref short failure
 31%|███       | 607/1945 [2:41:30<5:55:35, 15.95s/it][h264 @ 0x56213de3ffc0] mmco: unref short failure
[h264 @ 0x555a4ba25a80] mmco: unref short failure
[h264 @ 0x555a4ba25a80] mmco: unref short failure
[h264 @ 0x555a4ba25a80] mmco: unref short failure
[h264 @ 0x555a4ba25a80] mmco: unref short failure
[h264 @ 0x555a4c551500] mmco: unref short failure
[h264 @ 0x555a4c551500] mmco: unref short failure
 31%|███▏      | 608/1945 [2:41:38<5:00:10, 13.47s/it][h264 @ 0x555a42ac5480] mmco: unref short failure
[h264 @ 0x555a42ac5480] mmco: unref short failure
[h264 @ 0x555a443885c0] mmco: unref short failure
 31%|███▏      | 609/1945 [2:41:45<4:17:19, 11.56s/it][h264 @ 0x560a310b9d40] mmco: unref short failure
[h264 @ 0x560a310b9d40] mmco: unref short failure
[h264 @ 0x560a2e2ada00] mmco: unref short failure
 31%|███▏      | 610/1945 [2:41:53<3:56:11, 10.62s/it][h264 @ 0x560a2e2ada00] mmco: unref short failure
[h264 @ 0x560a340dc540] mmco: unref short failure
 31%|███▏      | 611/1945 [2:42:01<3:38:03,  9.81s/it][h264 @ 0x555a4568d9c0] mmco: unref short failure
[h264 @ 0x555a4568d9c0] mmco: unref short failure
[h264 @ 0x560a4ca17e80] mmco: unref short failure
[h264 @ 0x560a4ca17e80] mmco: unref short failure
[h264 @ 0x560a4ca17e80] mmco: unref short failure
[h264 @ 0x560a4ca17e80] mmco: unref short failure
[h264 @ 0x560a4ca17e80] mmco: unref short failure
[h264 @ 0x560a4ca17e80] mmco: unref short failure
[h264 @ 0x56026570e080] mmco: unref short failure
[h264 @ 0x555a34b60d40] mmco: unref short failure
[h264 @ 0x555a34b60d40] mmco: unref short failure
 31%|███▏      | 612/1945 [2:42:11<3:38:46,  9.85s/it][h264 @ 0x555a3d079240] mmco: unref short failure
[h264 @ 0x555a3d079240] mmco: unref short failure
 32%|███▏      | 613/1945 [2:42:20<3:31:30,  9.53s/it][h264 @ 0x5602669b64c0] mmco: unref short failure
[h264 @ 0x5602669b64c0] mmco: unref short failure
[h264 @ 0x555a40d58540] mmco: unref short failure
 32%|███▏      | 614/1945 [2:42:28<3:21:17,  9.07s/it][h264 @ 0x56213ac2c640] mmco: unref short failure
 32%|███▏      | 615/1945 [2:42:36<3:10:42,  8.60s/it][h264 @ 0x56025b1196c0] mmco: unref short failure
[h264 @ 0x56025b1196c0] mmco: unref short failure
[h264 @ 0x555a429ee000] mmco: unref short failure
[h264 @ 0x555a429ee000] mmco: unref short failure
[h264 @ 0x555a3f91e780] mmco: unref short failure
[h264 @ 0x555a3f91e780] mmco: unref short failure
[h264 @ 0x555a50020c40] mmco: unref short failure
[h264 @ 0x555a50020c40] mmco: unref short failure
 32%|███▏      | 616/1945 [2:42:43<3:04:01,  8.31s/it][h264 @ 0x560a31ba2840] mmco: unref short failure
[h264 @ 0x555a32f57840] mmco: unref short failure
[h264 @ 0x555a32f57840] mmco: unref short failure
[h264 @ 0x560a311a6d00] mmco: unref short failure
[h264 @ 0x560a311a6d00] mmco: unref short failure
 32%|███▏      | 617/1945 [2:42:52<3:08:02,  8.50s/it][h264 @ 0x555a302cf980] mmco: unref short failure
[h264 @ 0x555a302cf980] mmco: unref short failure
[h264 @ 0x56026f7ec8c0] mmco: unref short failure
[h264 @ 0x56026f7ec8c0] mmco: unref short failure
 32%|███▏      | 618/1945 [2:43:02<3:16:25,  8.88s/it][h264 @ 0x555a31f0b1c0] mmco: unref short failure
[h264 @ 0x555a31f0b1c0] mmco: unref short failure
[h264 @ 0x560a30d31ac0] mmco: unref short failure
 32%|███▏      | 619/1945 [2:43:09<3:06:31,  8.44s/it][h264 @ 0x560a43a15140] mmco: unref short failure
[h264 @ 0x560a43a15140] mmco: unref short failure
 32%|███▏      | 620/1945 [2:43:17<2:58:04,  8.06s/it] 32%|███▏      | 621/1945 [2:43:24<2:55:05,  7.93s/it][h264 @ 0x5602617939c0] mmco: unref short failure
[h264 @ 0x5602617939c0] mmco: unref short failure
[h264 @ 0x56212da70f00] mmco: unref short failure
[h264 @ 0x560a2cdffa40] mmco: unref short failure
[h264 @ 0x555a4ee42c40] mmco: unref short failure
 32%|███▏      | 622/1945 [2:43:37<3:28:59,  9.48s/it][h264 @ 0x555a4b04f880] mmco: unref short failure
[h264 @ 0x562128c74fc0] mmco: unref short failure
[h264 @ 0x562128c74fc0] mmco: unref short failure
 32%|███▏      | 623/1945 [2:43:44<3:12:02,  8.72s/it][h264 @ 0x555a4f6c1e40] mmco: unref short failure
[h264 @ 0x555a4f6c1e40] mmco: unref short failure
[h264 @ 0x560a44d14140] mmco: unref short failure
[h264 @ 0x555a36182b40] mmco: unref short failure
[h264 @ 0x5621331c9240] mmco: unref short failure
[h264 @ 0x562136eef7c0] mmco: unref short failure
[h264 @ 0x562136eef7c0] mmco: unref short failure
not have audios 8-qwaveiHMM.3
[h264 @ 0x562140ddf640] mmco: unref short failure
[h264 @ 0x562140ddf640] mmco: unref short failure
[h264 @ 0x562140ddf640] mmco: unref short failure
[h264 @ 0x562140ddf640] mmco: unref short failure
[h264 @ 0x562140ddf640] mmco: unref short failure
[h264 @ 0x562140ddf640] mmco: unref short failure
[h264 @ 0x562140ddf640] mmco: unref short failure
[h264 @ 0x562140ddf640] mmco: unref short failure
[h264 @ 0x560a5261d280] mmco: unref short failure
[h264 @ 0x560a5261d280] mmco: unref short failure
[h264 @ 0x56026672ed80] mmco: unref short failure
[h264 @ 0x56026672ed80] mmco: unref short failure
[h264 @ 0x5621293bad80] mmco: unref short failure
[h264 @ 0x5621293bad80] mmco: unref short failure
[h264 @ 0x560a2e05ad40] mmco: unref short failure
[h264 @ 0x560a2e05ad40] mmco: unref short failure
[h264 @ 0x56212fb19a40] mmco: unref short failure
[h264 @ 0x56212fb19a40] mmco: unref short failure
[h264 @ 0x560275d4f180] mmco: unref short failure
[h264 @ 0x560268c4e040] mmco: unref short failure
[h264 @ 0x560268c4e040] mmco: unref short failure
[h264 @ 0x560268c4e040] mmco: unref short failure
[h264 @ 0x560268c4e040] mmco: unref short failure
 32%|███▏      | 624/1945 [2:44:35<7:47:54, 21.25s/it][h264 @ 0x555a5231b780] mmco: unref short failure
[h264 @ 0x5621427b0a40] mmco: unref short failure
[h264 @ 0x5621427b0a40] mmco: unref short failure
 32%|███▏      | 625/1945 [2:44:47<6:46:34, 18.48s/it][h264 @ 0x560a4aa3cb00] mmco: unref short failure
[h264 @ 0x560a4aa3cb00] mmco: unref short failure
[h264 @ 0x555a3a26c100] mmco: unref short failure
[h264 @ 0x555a3a26c100] mmco: unref short failure
[h264 @ 0x560a47770140] mmco: unref short failure
[h264 @ 0x560a47770140] mmco: unref short failure
[h264 @ 0x56212b4a1640] mmco: unref short failure
[h264 @ 0x56212b4a1640] mmco: unref short failure
[h264 @ 0x56212b4a1640] mmco: unref short failure
[h264 @ 0x56212b4a1640] mmco: unref short failure
[h264 @ 0x56212b4a1640] mmco: unref short failure
[h264 @ 0x56212b4a1640] mmco: unref short failure
[h264 @ 0x56025d1bc3c0] mmco: unref short failure
[h264 @ 0x56025d1bc3c0] mmco: unref short failure
[h264 @ 0x562134100880] mmco: unref short failure
[h264 @ 0x555a3bf34400] mmco: unref short failure
[h264 @ 0x555a3bf34400] mmco: unref short failure
[h264 @ 0x555a393ed640] mmco: unref short failure
[h264 @ 0x555a393ed640] mmco: unref short failure
[h264 @ 0x555a393ed640] mmco: unref short failure
[h264 @ 0x555a393ed640] mmco: unref short failure
[h264 @ 0x555a348360c0] mmco: unref short failure
[h264 @ 0x555a348360c0] mmco: unref short failure
 32%|███▏      | 626/1945 [2:45:10<7:15:36, 19.82s/it][h264 @ 0x560a4546a180] mmco: unref short failure
[h264 @ 0x560a4546a180] mmco: unref short failure
[h264 @ 0x560a469b9f80] mmco: unref short failure
[h264 @ 0x560a41677d80] mmco: unref short failure
[h264 @ 0x560a41677d80] mmco: unref short failure
 32%|███▏      | 627/1945 [2:45:19<6:03:41, 16.56s/it] 32%|███▏      | 628/1945 [2:45:25<4:58:28, 13.60s/it] 32%|███▏      | 629/1945 [2:45:32<4:11:17, 11.46s/it][h264 @ 0x560a3e812740] mmco: unref short failure
[h264 @ 0x560a3e812740] mmco: unref short failure
[h264 @ 0x560a3e812740] mmco: unref short failure
[h264 @ 0x560a3e812740] mmco: unref short failure
 32%|███▏      | 630/1945 [2:45:40<3:48:07, 10.41s/it][h264 @ 0x56025ddd8b40] mmco: unref short failure
[h264 @ 0x56025ddd8b40] mmco: unref short failure
[h264 @ 0x56025ddd8b40] mmco: unref short failure
[h264 @ 0x5602629199c0] mmco: unref short failure
[h264 @ 0x555a4dd853c0] mmco: unref short failure
[h264 @ 0x555a4dd853c0] mmco: unref short failure
 32%|███▏      | 631/1945 [2:45:55<4:23:09, 12.02s/it][h264 @ 0x555a40ae5180] mmco: unref short failure
[h264 @ 0x56025de71bc0] mmco: unref short failure
[h264 @ 0x56025de71bc0] mmco: unref short failure
[h264 @ 0x56214d8e7100] mmco: unref short failure
[h264 @ 0x555a32830640] mmco: unref short failure
[h264 @ 0x555a32830640] mmco: unref short failure
[h264 @ 0x555a33fda080] mmco: unref short failure
[h264 @ 0x5621309cc140] mmco: unref short failure
[h264 @ 0x5621309cc140] mmco: unref short failure
[h264 @ 0x56213857cc40] mmco: unref short failure
[h264 @ 0x56213857cc40] mmco: unref short failure
[h264 @ 0x56213201bf80] mmco: unref short failure
[h264 @ 0x56213201bf80] mmco: unref short failure
 32%|███▏      | 632/1945 [2:46:34<7:18:25, 20.03s/it][h264 @ 0x560a32d11880] mmco: unref short failure
[h264 @ 0x56212d429240] mmco: unref short failure
[h264 @ 0x56212d429240] mmco: unref short failure
[h264 @ 0x560265d10740] mmco: unref short failure
[h264 @ 0x560265d10740] mmco: unref short failure
[h264 @ 0x555a38aa0340] mmco: unref short failure
[h264 @ 0x555a38aa0340] mmco: unref short failure
[h264 @ 0x56025ae82dc0] mmco: unref short failure
[h264 @ 0x56025ae82dc0] mmco: unref short failure
 33%|███▎      | 633/1945 [2:46:55<7:25:15, 20.36s/it] 33%|███▎      | 634/1945 [2:47:08<6:35:41, 18.11s/it] 33%|███▎      | 635/1945 [2:47:15<5:23:55, 14.84s/it] 33%|███▎      | 636/1945 [2:47:26<4:53:21, 13.45s/it][h264 @ 0x560a2e9e36c0] mmco: unref short failure
 33%|███▎      | 637/1945 [2:47:33<4:14:47, 11.69s/it][h264 @ 0x555a342d3980] mmco: unref short failure
[h264 @ 0x56026a47bb40] mmco: unref short failure
[h264 @ 0x56026a47bb40] mmco: unref short failure
 33%|███▎      | 638/1945 [2:47:52<5:04:22, 13.97s/it][h264 @ 0x562129477140] mmco: unref short failure
[h264 @ 0x562129477140] mmco: unref short failure
[h264 @ 0x555a3ded8540] mmco: unref short failure
[h264 @ 0x555a3ded8540] mmco: unref short failure
 33%|███▎      | 639/1945 [2:48:01<4:26:35, 12.25s/it][h264 @ 0x555a302be480] mmco: unref short failure
[h264 @ 0x555a302be480] mmco: unref short failure
[h264 @ 0x555a302be480] mmco: unref short failure
[h264 @ 0x555a302be480] mmco: unref short failure
[h264 @ 0x555a32ca4c00] mmco: unref short failure
[h264 @ 0x555a32ca4c00] mmco: unref short failure
[h264 @ 0x56025be1a5c0] mmco: unref short failure
[h264 @ 0x56025be1a5c0] mmco: unref short failure
[h264 @ 0x56025be1a5c0] mmco: unref short failure
[h264 @ 0x560a47f3c140] mmco: unref short failure
[h264 @ 0x555a4c6f9ec0] mmco: unref short failure
[h264 @ 0x555a4c6f9ec0] mmco: unref short failure
[h264 @ 0x56025a803100] mmco: unref short failure
[h264 @ 0x56025a803100] mmco: unref short failure
[h264 @ 0x56212dac9680] mmco: unref short failure
[h264 @ 0x560a37178280] mmco: unref short failure
[h264 @ 0x560a37178280] mmco: unref short failure
 33%|███▎      | 640/1945 [2:48:50<8:29:00, 23.40s/it][h264 @ 0x560a4198bd40] mmco: unref short failure
[h264 @ 0x560a4198bd40] mmco: unref short failure
[h264 @ 0x56213f800780] mmco: unref short failure
[h264 @ 0x56213f800780] mmco: unref short failure
[h264 @ 0x560a3cbe3800] mmco: unref short failure
[h264 @ 0x56026285d5c0] mmco: unref short failure
[h264 @ 0x56026285d5c0] mmco: unref short failure
[h264 @ 0x5621286fe080] mmco: unref short failure
[h264 @ 0x5621286fe080] mmco: unref short failure
[h264 @ 0x5621286fe080] mmco: unref short failure
[h264 @ 0x5621286fe080] mmco: unref short failure
 33%|███▎      | 641/1945 [2:49:09<8:00:40, 22.12s/it][h264 @ 0x56213f800e00] mmco: unref short failure
[h264 @ 0x56213f800e00] mmco: unref short failure
[h264 @ 0x555a31f2cfc0] mmco: unref short failure
[h264 @ 0x555a31f2cfc0] mmco: unref short failure
[h264 @ 0x555a3463cc40] mmco: unref short failure
[h264 @ 0x555a3463cc40] mmco: unref short failure
 33%|███▎      | 642/1945 [2:49:17<6:25:28, 17.75s/it] 33%|███▎      | 643/1945 [2:49:25<5:23:29, 14.91s/it][h264 @ 0x555a4977cb40] mmco: unref short failure
[h264 @ 0x555a4977cb40] mmco: unref short failure
[h264 @ 0x555a4977cb40] mmco: unref short failure
[h264 @ 0x555a4977cb40] mmco: unref short failure
 33%|███▎      | 644/1945 [2:49:32<4:33:13, 12.60s/it][h264 @ 0x56213bc10500] mmco: unref short failure
[h264 @ 0x560a4d990e00] mmco: unref short failure
[h264 @ 0x560a4d990e00] mmco: unref short failure
 33%|███▎      | 645/1945 [2:49:40<3:58:46, 11.02s/it][h264 @ 0x555a30277a40] mmco: unref short failure
[h264 @ 0x560a3fb4ff80] mmco: unref short failure
[h264 @ 0x560a3fb4ff80] mmco: unref short failure
[h264 @ 0x5602787d2c80] mmco: unref short failure
[h264 @ 0x5602787d2c80] mmco: unref short failure
 33%|███▎      | 646/1945 [2:50:02<5:09:44, 14.31s/it][h264 @ 0x560270fdfb80] mmco: unref short failure
[h264 @ 0x560270fdfb80] mmco: unref short failure
[h264 @ 0x560270fdfb80] mmco: unref short failure
[h264 @ 0x560270fdfb80] mmco: unref short failure
 33%|███▎      | 647/1945 [2:50:10<4:33:23, 12.64s/it][h264 @ 0x560263fc6dc0] mmco: unref short failure
[h264 @ 0x560263fc6dc0] mmco: unref short failure
[h264 @ 0x56213ec45100] mmco: unref short failure
[h264 @ 0x56213ec45100] mmco: unref short failure
[h264 @ 0x56213ec45100] mmco: unref short failure
[h264 @ 0x56213ec45100] mmco: unref short failure
[h264 @ 0x560260576cc0] mmco: unref short failure
[h264 @ 0x560260576cc0] mmco: unref short failure
[h264 @ 0x560260576cc0] mmco: unref short failure
[h264 @ 0x560260576cc0] mmco: unref short failure
[h264 @ 0x5602601447c0] mmco: unref short failure
[h264 @ 0x5602601447c0] mmco: unref short failure
[h264 @ 0x5621317ffac0] mmco: unref short failure
[h264 @ 0x5621317ffac0] mmco: unref short failure
[h264 @ 0x56026b39f600] mmco: unref short failure
[h264 @ 0x555a3a47ecc0] mmco: unref short failure
[h264 @ 0x555a3a47ecc0] mmco: unref short failure
[h264 @ 0x56212f8346c0] mmco: unref short failure
[h264 @ 0x56212f8346c0] mmco: unref short failure
[h264 @ 0x56212f8346c0] mmco: unref short failure
[h264 @ 0x56212f8346c0] mmco: unref short failure
[h264 @ 0x555a388ffa40] mmco: unref short failure
[h264 @ 0x555a388ffa40] mmco: unref short failure
 33%|███▎      | 648/1945 [2:50:56<8:04:24, 22.41s/it][h264 @ 0x560a3e017500] mmco: unref short failure
[h264 @ 0x560a3d4afe80] mmco: unref short failure
[h264 @ 0x560a3d4afe80] mmco: unref short failure
 33%|███▎      | 649/1945 [2:51:09<7:06:38, 19.75s/it][h264 @ 0x56212a52d000] mmco: unref short failure
[h264 @ 0x56212a52d000] mmco: unref short failure
[h264 @ 0x56027a923e00] mmco: unref short failure
[h264 @ 0x56027a923e00] mmco: unref short failure
09/08/2024 23:32:42 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.1112935543060303, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.045237526297569275, 'loss_ret%tv%ta--finetune_area/loss_area': 1.2968852519989014, 'loss_ret%tv%ta--finetune_area/total_loss': 4.453416347503662}
[h264 @ 0x560a3fb50400] mmco: unref short failure
 33%|███▎      | 650/1945 [2:51:29<7:06:52, 19.78s/it][h264 @ 0x560a30cfdd80] mmco: unref short failure
[h264 @ 0x560a30cfdd80] mmco: unref short failure
[h264 @ 0x560a30cfdd80] mmco: unref short failure
[h264 @ 0x560a30cfdd80] mmco: unref short failure
[h264 @ 0x56213dc7d880] mmco: unref short failure
[h264 @ 0x56026a58ac40] mmco: unref short failure
[h264 @ 0x56026a58ac40] mmco: unref short failure
 33%|███▎      | 651/1945 [2:51:36<5:44:16, 15.96s/it][h264 @ 0x555a3b077d80] mmco: unref short failure
 34%|███▎      | 652/1945 [2:51:44<4:54:32, 13.67s/it][h264 @ 0x560a39fe98c0] mmco: unref short failure
[h264 @ 0x560a39fe98c0] mmco: unref short failure
 34%|███▎      | 653/1945 [2:51:51<4:09:37, 11.59s/it][h264 @ 0x555a41111880] mmco: unref short failure
[h264 @ 0x560a361e07c0] mmco: unref short failure
[h264 @ 0x560a361e07c0] mmco: unref short failure
[h264 @ 0x560a31f35940] mmco: unref short failure
[h264 @ 0x560a31f35940] mmco: unref short failure
[h264 @ 0x562139cff080] mmco: unref short failure
[h264 @ 0x562139cff080] mmco: unref short failure
[h264 @ 0x555a3e84e600] mmco: unref short failure
[h264 @ 0x555a3e84e600] mmco: unref short failure
 34%|███▎      | 654/1945 [2:52:05<4:25:46, 12.35s/it] 34%|███▎      | 655/1945 [2:52:13<3:56:58, 11.02s/it][h264 @ 0x562145fd4640] mmco: unref short failure
[h264 @ 0x562145fd4640] mmco: unref short failure
[h264 @ 0x562137ac0c40] mmco: unref short failure
[h264 @ 0x562137ac0c40] mmco: unref short failure
[h264 @ 0x56213f1b7980] mmco: unref short failure
[h264 @ 0x56213f1b7980] mmco: unref short failure
[h264 @ 0x562137ac0c40] mmco: unref short failure
[h264 @ 0x562137ac0c40] mmco: unref short failure
[h264 @ 0x560a43133900] mmco: unref short failure
[h264 @ 0x560a43133900] mmco: unref short failure
 34%|███▎      | 656/1945 [2:53:02<7:59:18, 22.31s/it][h264 @ 0x560264166180] mmco: unref short failure
[h264 @ 0x560264166180] mmco: unref short failure
[h264 @ 0x560264166180] mmco: unref short failure
[h264 @ 0x560264166180] mmco: unref short failure
 34%|███▍      | 657/1945 [2:53:09<6:20:33, 17.73s/it][h264 @ 0x5621318d5a40] mmco: unref short failure
[h264 @ 0x5621318d5a40] mmco: unref short failure
[h264 @ 0x560a4a501fc0] mmco: unref short failure
[h264 @ 0x560a4a501fc0] mmco: unref short failure
[h264 @ 0x560a4b8e1240] mmco: unref short failure
[h264 @ 0x5621334a1980] mmco: unref short failure
[h264 @ 0x555a4de79340] mmco: unref short failure
[h264 @ 0x555a4de79340] mmco: unref short failure
 34%|███▍      | 658/1945 [2:53:37<7:26:24, 20.81s/it][h264 @ 0x56026f47ab80] mmco: unref short failure
 34%|███▍      | 659/1945 [2:53:45<6:03:05, 16.94s/it][h264 @ 0x562134f34800] mmco: unref short failure
[h264 @ 0x560a4d990e00] mmco: unref short failure
[h264 @ 0x560a4d990e00] mmco: unref short failure
 34%|███▍      | 660/1945 [2:53:52<5:02:26, 14.12s/it] 34%|███▍      | 661/1945 [2:54:00<4:22:14, 12.25s/it][h264 @ 0x560a3ee7ccc0] mmco: unref short failure
[h264 @ 0x560a3ee7ccc0] mmco: unref short failure
 34%|███▍      | 662/1945 [2:54:08<3:51:49, 10.84s/it][h264 @ 0x555a4458f5c0] mmco: unref short failure
[h264 @ 0x5621315bb200] mmco: unref short failure
[h264 @ 0x560a2feb5bc0] mmco: unref short failure
[h264 @ 0x560a2feb5bc0] mmco: unref short failure
 34%|███▍      | 663/1945 [2:54:23<4:21:07, 12.22s/it][h264 @ 0x562143805180] mmco: unref short failure
[h264 @ 0x562143805180] mmco: unref short failure
[h264 @ 0x555a39ad5b00] mmco: unref short failure
[h264 @ 0x555a3690c680] mmco: unref short failure
[h264 @ 0x555a3690c680] mmco: unref short failure
[h264 @ 0x56025ef76140] mmco: unref short failure
[h264 @ 0x560a3061ba80] mmco: unref short failure
[h264 @ 0x560a3f05c240] mmco: unref short failure
[h264 @ 0x560a3f05c240] mmco: unref short failure
[h264 @ 0x56026c7397c0] mmco: unref short failure
[h264 @ 0x555a396e8a40] mmco: unref short failure
 34%|███▍      | 664/1945 [2:55:04<7:24:06, 20.80s/it] 34%|███▍      | 665/1945 [2:55:13<6:07:48, 17.24s/it][h264 @ 0x562132d02cc0] mmco: unref short failure
[h264 @ 0x562132d02cc0] mmco: unref short failure
[h264 @ 0x560a3f400b00] mmco: unref short failure
[h264 @ 0x560a388eebc0] mmco: unref short failure
[h264 @ 0x560a388eebc0] mmco: unref short failure
[h264 @ 0x5621327b8600] mmco: unref short failure
 34%|███▍      | 666/1945 [2:55:36<6:42:31, 18.88s/it][h264 @ 0x56213495bd40] mmco: unref short failure
[h264 @ 0x56213495bd40] mmco: unref short failure
 34%|███▍      | 667/1945 [2:55:42<5:23:51, 15.20s/it][h264 @ 0x56025afe1100] mmco: unref short failure
[h264 @ 0x56213ed91100] mmco: unref short failure
[h264 @ 0x56213ed91100] mmco: unref short failure
 34%|███▍      | 668/1945 [2:55:50<4:37:15, 13.03s/it][h264 @ 0x555a3f61d2c0] mmco: unref short failure
[h264 @ 0x560272e89fc0] mmco: unref short failure
 34%|███▍      | 669/1945 [2:55:57<3:58:42, 11.22s/it][h264 @ 0x560a4f0eddc0] mmco: unref short failure
[h264 @ 0x560a4f0eddc0] mmco: unref short failure
[h264 @ 0x560a4dadb3c0] mmco: unref short failure
[h264 @ 0x560a4dadb3c0] mmco: unref short failure
[h264 @ 0x555a492c8800] mmco: unref short failure
[h264 @ 0x555a492c8800] mmco: unref short failure
[h264 @ 0x56212fb88ec0] mmco: unref short failure
[h264 @ 0x56212fb88ec0] mmco: unref short failure
 34%|███▍      | 670/1945 [2:56:14<4:35:16, 12.95s/it][h264 @ 0x560a3f400d40] mmco: unref short failure
[h264 @ 0x560a3f400d40] mmco: unref short failure
[h264 @ 0x56213ace9080] mmco: unref short failure
 34%|███▍      | 671/1945 [2:56:26<4:25:58, 12.53s/it][h264 @ 0x555a44914440] mmco: unref short failure
[h264 @ 0x555a44914440] mmco: unref short failure
[h264 @ 0x555a45ee4800] mmco: unref short failure
[h264 @ 0x555a45ee4800] mmco: unref short failure
[h264 @ 0x56212d2a4b00] mmco: unref short failure
[h264 @ 0x56212d2a4b00] mmco: unref short failure
[h264 @ 0x56214965bc40] mmco: unref short failure
[h264 @ 0x5602704f6400] mmco: unref short failure
[h264 @ 0x56027875dc40] mmco: unref short failure
[h264 @ 0x56027875dc40] mmco: unref short failure
[h264 @ 0x5621317ffac0] mmco: unref short failure
[h264 @ 0x5621317ffac0] mmco: unref short failure
[h264 @ 0x555a4e770ec0] mmco: unref short failure
[h264 @ 0x555a4e770ec0] mmco: unref short failure
[h264 @ 0x555a3faafd40] mmco: unref short failure
[h264 @ 0x555a340da280] mmco: unref short failure
 35%|███▍      | 672/1945 [2:57:06<7:20:20, 20.75s/it][h264 @ 0x5602644c2f00] mmco: unref short failure
[h264 @ 0x5602644c2f00] mmco: unref short failure
[h264 @ 0x562138d3aec0] mmco: unref short failure
[h264 @ 0x562138d3aec0] mmco: unref short failure
[h264 @ 0x56027cb37780] mmco: unref short failure
[h264 @ 0x560277f0c2c0] mmco: unref short failure
[h264 @ 0x560277f0c2c0] mmco: unref short failure
[h264 @ 0x560a3abb3a40] mmco: unref short failure
[h264 @ 0x560a3abb3a40] mmco: unref short failure
 35%|███▍      | 673/1945 [2:57:17<6:21:04, 17.97s/it][h264 @ 0x56213b0d8880] mmco: unref short failure
[h264 @ 0x5602644c3100] mmco: unref short failure
[h264 @ 0x555a38f50b00] mmco: unref short failure
[h264 @ 0x555a38f50b00] mmco: unref short failure
[h264 @ 0x5621292cbf80] mmco: unref short failure
[h264 @ 0x5621292cbf80] mmco: unref short failure
 35%|███▍      | 674/1945 [2:57:36<6:28:35, 18.34s/it][h264 @ 0x560275c543c0] mmco: unref short failure
[h264 @ 0x560275c543c0] mmco: unref short failure
[h264 @ 0x56026c046900] mmco: unref short failure
[h264 @ 0x560268ec6400] mmco: unref short failure
 35%|███▍      | 675/1945 [2:57:43<5:14:24, 14.85s/it][h264 @ 0x562133de02c0] mmco: unref short failure
[h264 @ 0x562133de02c0] mmco: unref short failure
 35%|███▍      | 676/1945 [2:57:52<4:37:45, 13.13s/it][h264 @ 0x56212be32bc0] mmco: unref short failure
 35%|███▍      | 677/1945 [2:58:00<4:04:30, 11.57s/it][h264 @ 0x56025d278000] mmco: unref short failure
[h264 @ 0x555a37e11dc0] mmco: unref short failure
[h264 @ 0x555a4d2a20c0] mmco: unref short failure
[h264 @ 0x555a4d2a20c0] mmco: unref short failure
 35%|███▍      | 678/1945 [2:58:15<4:24:38, 12.53s/it] 35%|███▍      | 679/1945 [2:58:23<3:54:37, 11.12s/it][h264 @ 0x56026fd05f00] mmco: unref short failure
[h264 @ 0x555a42337fc0] mmco: unref short failure
[h264 @ 0x555a42337fc0] mmco: unref short failure
[h264 @ 0x555a42337fc0] mmco: unref short failure
[h264 @ 0x555a42337fc0] mmco: unref short failure
[h264 @ 0x555a42337fc0] mmco: unref short failure
[h264 @ 0x555a42337fc0] mmco: unref short failure
[h264 @ 0x555a42337fc0] mmco: unref short failure
[h264 @ 0x555a42337fc0] mmco: unref short failure
[h264 @ 0x560275c93100] mmco: unref short failure
[h264 @ 0x560275c93100] mmco: unref short failure
[h264 @ 0x560a452d03c0] mmco: unref short failure
[h264 @ 0x555a32e1b2c0] mmco: unref short failure
[h264 @ 0x555a32e1b2c0] mmco: unref short failure
[h264 @ 0x56025bcbe780] mmco: unref short failure
[h264 @ 0x56025bcbe780] mmco: unref short failure
[h264 @ 0x560a2ff9a780] mmco: unref short failure
[h264 @ 0x5602695e6880] mmco: unref short failure
[h264 @ 0x560a4ba4fd00] mmco: unref short failure
 35%|███▍      | 680/1945 [2:59:00<6:37:59, 18.88s/it][h264 @ 0x555a3269d1c0] mmco: unref short failure
[h264 @ 0x555a3269d1c0] mmco: unref short failure
[h264 @ 0x555a3e961c00] mmco: unref short failure
[h264 @ 0x555a34cd5340] mmco: unref short failure
[h264 @ 0x555a34cd5340] mmco: unref short failure
[h264 @ 0x560a413c3300] mmco: unref short failure
[h264 @ 0x560a413c3300] mmco: unref short failure
 35%|███▌      | 681/1945 [2:59:15<6:18:00, 17.94s/it][h264 @ 0x560a2f6057c0] mmco: unref short failure
[h264 @ 0x560a2f6057c0] mmco: unref short failure
[h264 @ 0x560a477dae40] mmco: unref short failure
[h264 @ 0x5621332a6f80] mmco: unref short failure
[h264 @ 0x56025e98c4c0] mmco: unref short failure
[h264 @ 0x562134fae940] mmco: unref short failure
[h264 @ 0x560a2d090580] mmco: unref short failure
[h264 @ 0x560a2d090580] mmco: unref short failure
[h264 @ 0x5602673e9500] mmco: unref short failure
[h264 @ 0x56027903f640] mmco: unref short failure
 35%|███▌      | 682/1945 [2:59:47<7:43:54, 22.04s/it][h264 @ 0x56212baf9740] mmco: unref short failure
[h264 @ 0x56212baf9740] mmco: unref short failure
[h264 @ 0x56212baf9740] mmco: unref short failure
[h264 @ 0x56212baf9740] mmco: unref short failure
[h264 @ 0x56212c02ff40] mmco: unref short failure
[h264 @ 0x56212c02ff40] mmco: unref short failure
 35%|███▌      | 683/1945 [2:59:55<6:13:50, 17.77s/it][h264 @ 0x560a2c57e840] mmco: unref short failure
[h264 @ 0x560a2c57e840] mmco: unref short failure
 35%|███▌      | 684/1945 [3:00:02<5:09:09, 14.71s/it][h264 @ 0x555a4d7eb540] mmco: unref short failure
 35%|███▌      | 685/1945 [3:00:10<4:24:16, 12.58s/it][h264 @ 0x560a479ed700] mmco: unref short failure
[h264 @ 0x560a4beb1240] mmco: unref short failure
[h264 @ 0x560a4beb1240] mmco: unref short failure
[h264 @ 0x560a4beb1240] mmco: unref short failure
[h264 @ 0x562131c11080] mmco: unref short failure
[h264 @ 0x562131c11080] mmco: unref short failure
[h264 @ 0x56026f30aec0] mmco: unref short failure
[h264 @ 0x56026f30aec0] mmco: unref short failure
[h264 @ 0x560a4dfc3dc0] mmco: unref short failure
 35%|███▌      | 686/1945 [3:00:28<4:55:34, 14.09s/it][h264 @ 0x560a4b636bc0] mmco: unref short failure
[h264 @ 0x560a4b636bc0] mmco: unref short failure
[h264 @ 0x555a3b0c8e00] mmco: unref short failure
[h264 @ 0x555a3b0c8e00] mmco: unref short failure
 35%|███▌      | 687/1945 [3:00:35<4:12:53, 12.06s/it][h264 @ 0x5602765fad80] mmco: unref short failure
[h264 @ 0x5602765fad80] mmco: unref short failure
[h264 @ 0x5602694f4500] mmco: unref short failure
[h264 @ 0x5602694f4500] mmco: unref short failure
[h264 @ 0x560a45c0be00] mmco: unref short failure
[h264 @ 0x560a45c0be00] mmco: unref short failure
[h264 @ 0x560a38861100] mmco: unref short failure
[h264 @ 0x560a38861100] mmco: unref short failure
[h264 @ 0x560a4cc08c40] mmco: unref short failure
[h264 @ 0x56025f570100] mmco: unref short failure
[h264 @ 0x555a4ca0e680] mmco: unref short failure
[h264 @ 0x555a30cba000] mmco: unref short failure
[h264 @ 0x555a30cba000] mmco: unref short failure
[h264 @ 0x56213e74a700] mmco: unref short failure
[h264 @ 0x560a2faf9f40] mmco: unref short failure
[h264 @ 0x555a338f99c0] mmco: unref short failure
[h264 @ 0x560278e652c0] mmco: unref short failure
[h264 @ 0x560278e652c0] mmco: unref short failure
[h264 @ 0x560278e652c0] mmco: unref short failure
[h264 @ 0x560278e652c0] mmco: unref short failure
[h264 @ 0x560a3f400b00] mmco: unref short failure
[h264 @ 0x560a3f400b00] mmco: unref short failure
[h264 @ 0x560274928c80] mmco: unref short failure
[h264 @ 0x560274928c80] mmco: unref short failure
[h264 @ 0x560a465badc0] mmco: unref short failure
[h264 @ 0x560a465badc0] mmco: unref short failure
 35%|███▌      | 688/1945 [3:01:09<6:31:23, 18.68s/it][h264 @ 0x5602741ab980] mmco: unref short failure
[h264 @ 0x555a4d712180] mmco: unref short failure
 35%|███▌      | 689/1945 [3:01:17<5:21:44, 15.37s/it][h264 @ 0x560a4d369cc0] mmco: unref short failure
[h264 @ 0x560a4d369cc0] mmco: unref short failure
[h264 @ 0x56026ec9e5c0] mmco: unref short failure
[h264 @ 0x56026ec9e5c0] mmco: unref short failure
[h264 @ 0x562138d3aec0] mmco: unref short failure
[h264 @ 0x562138d3aec0] mmco: unref short failure
[h264 @ 0x56212c1b4b40] mmco: unref short failure
[h264 @ 0x56212c1b4b40] mmco: unref short failure
[h264 @ 0x56212c1b4b40] mmco: unref short failure
[h264 @ 0x56212c1b4b40] mmco: unref short failure
[h264 @ 0x56025de0dd40] mmco: unref short failure
[h264 @ 0x56025de0dd40] mmco: unref short failure
[h264 @ 0x56026eca43c0] mmco: unref short failure
[h264 @ 0x555a338f9bc0] mmco: unref short failure
[h264 @ 0x555a338f9bc0] mmco: unref short failure
[h264 @ 0x560262479c80] mmco: unref short failure
[h264 @ 0x555a338f9bc0] mmco: unref short failure
[h264 @ 0x56213e9daf40] mmco: unref short failure
[h264 @ 0x56213e9daf40] mmco: unref short failure
[h264 @ 0x555a4a061240] mmco: unref short failure
[h264 @ 0x56025f34a900] mmco: unref short failure
[h264 @ 0x560269d45500] mmco: unref short failure
 35%|███▌      | 690/1945 [3:01:55<7:43:35, 22.16s/it][h264 @ 0x555a36a20140] mmco: unref short failure
[h264 @ 0x555a36a20140] mmco: unref short failure
[h264 @ 0x560a3b890640] mmco: unref short failure
[h264 @ 0x560a3b890640] mmco: unref short failure
[h264 @ 0x560a3b890640] mmco: unref short failure
 36%|███▌      | 691/1945 [3:02:03<6:16:13, 18.00s/it][h264 @ 0x560a3a14c100] mmco: unref short failure
[h264 @ 0x560a3a14c100] mmco: unref short failure
[h264 @ 0x555a4f216140] mmco: unref short failure
 36%|███▌      | 692/1945 [3:02:13<5:25:01, 15.56s/it][h264 @ 0x560a33c5bf00] mmco: unref short failure
[h264 @ 0x560a33c5bf00] mmco: unref short failure
[h264 @ 0x560a33c5bf00] mmco: unref short failure
[h264 @ 0x560a33c5bf00] mmco: unref short failure
[h264 @ 0x56026f220140] mmco: unref short failure
[h264 @ 0x56026f220140] mmco: unref short failure
 36%|███▌      | 693/1945 [3:02:20<4:31:55, 13.03s/it][h264 @ 0x555a30f98a80] mmco: unref short failure
[h264 @ 0x562131144500] mmco: unref short failure
[h264 @ 0x562131144500] mmco: unref short failure
[h264 @ 0x555a4cab5840] mmco: unref short failure
[h264 @ 0x56026f220140] mmco: unref short failure
 36%|███▌      | 694/1945 [3:02:38<5:01:47, 14.47s/it][h264 @ 0x560a2fd21380] mmco: unref short failure
[h264 @ 0x560a2fd21380] mmco: unref short failure
[h264 @ 0x560a2fd21380] mmco: unref short failure
[h264 @ 0x560a2fd21380] mmco: unref short failure
[h264 @ 0x562133482300] mmco: unref short failure
[h264 @ 0x562133482300] mmco: unref short failure
[h264 @ 0x5621469d4940] mmco: unref short failure
[h264 @ 0x555a4d711d80] mmco: unref short failure
[h264 @ 0x56026f220140] mmco: unref short failure
[h264 @ 0x56026f220140] mmco: unref short failure
 36%|███▌      | 695/1945 [3:02:44<4:12:09, 12.10s/it][h264 @ 0x560a47ddcd00] mmco: unref short failure
[h264 @ 0x560a47ddcd00] mmco: unref short failure
[h264 @ 0x56026a333580] mmco: unref short failure
[h264 @ 0x56026a333580] mmco: unref short failure
[h264 @ 0x555a30903680] mmco: unref short failure
[h264 @ 0x555a30903680] mmco: unref short failure
[h264 @ 0x555a30903680] mmco: unref short failure
[h264 @ 0x555a30903680] mmco: unref short failure
[h264 @ 0x56025ff58f40] mmco: unref short failure
[h264 @ 0x56025ff58f40] mmco: unref short failure
[h264 @ 0x56025ff58f40] mmco: unref short failure
[h264 @ 0x56025ff58f40] mmco: unref short failure
[h264 @ 0x56025ff58f40] mmco: unref short failure
[h264 @ 0x56025ff58f40] mmco: unref short failure
[h264 @ 0x56026a6848c0] mmco: unref short failure
[h264 @ 0x56026a6848c0] mmco: unref short failure
[h264 @ 0x562134100b40] mmco: unref short failure
[h264 @ 0x562134100b40] mmco: unref short failure
[h264 @ 0x5602644086c0] mmco: unref short failure
 36%|███▌      | 696/1945 [3:03:20<6:39:42, 19.20s/it][h264 @ 0x56214171d940] mmco: unref short failure
[h264 @ 0x555a32948980] mmco: unref short failure
[h264 @ 0x555a32948980] mmco: unref short failure
[h264 @ 0x562133f497c0] mmco: unref short failure
 36%|███▌      | 697/1945 [3:03:28<5:30:47, 15.90s/it][h264 @ 0x555a4aaf74c0] mmco: unref short failure
[h264 @ 0x555a4aaf74c0] mmco: unref short failure
[h264 @ 0x560a2d74ab00] mmco: unref short failure
[h264 @ 0x560a2d74ab00] mmco: unref short failure
[h264 @ 0x560a39871280] mmco: unref short failure
[h264 @ 0x560a39871280] mmco: unref short failure
[h264 @ 0x555a4aaf74c0] mmco: unref short failure
[h264 @ 0x555a4aaf74c0] mmco: unref short failure
[h264 @ 0x555a4aaf74c0] mmco: unref short failure
[h264 @ 0x555a4aaf74c0] mmco: unref short failure
[h264 @ 0x5602619e2e00] mmco: unref short failure
[h264 @ 0x562131144500] mmco: unref short failure
[h264 @ 0x562131144500] mmco: unref short failure
[h264 @ 0x560a30027900] mmco: unref short failure
[h264 @ 0x560a30027900] mmco: unref short failure
[h264 @ 0x560a32cf7ec0] mmco: unref short failure
[h264 @ 0x560a32cf7ec0] mmco: unref short failure
 36%|███▌      | 698/1945 [3:04:24<9:35:48, 27.71s/it][h264 @ 0x562149621540] mmco: unref short failure
[h264 @ 0x562149621540] mmco: unref short failure
 36%|███▌      | 699/1945 [3:04:31<7:28:21, 21.59s/it]09/08/2024 23:45:51 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.082730531692505, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.040548063814640045, 'loss_ret%tv%ta--finetune_area/loss_area': 1.3631031513214111, 'loss_ret%tv%ta--finetune_area/total_loss': 4.486381530761719}
[h264 @ 0x562140cb9ac0] mmco: unref short failure
[h264 @ 0x562140cb9ac0] mmco: unref short failure
[h264 @ 0x56026048c4c0] mmco: unref short failure
 36%|███▌      | 700/1945 [3:04:38<5:54:32, 17.09s/it][h264 @ 0x56027ac919c0] mmco: unref short failure
[h264 @ 0x56027ac919c0] mmco: unref short failure
[h264 @ 0x555a33942c80] mmco: unref short failure
[h264 @ 0x555a33942c80] mmco: unref short failure
 36%|███▌      | 701/1945 [3:04:44<4:48:54, 13.93s/it] 36%|███▌      | 702/1945 [3:04:52<4:11:40, 12.15s/it][h264 @ 0x5602677533c0] mmco: unref short failure
[h264 @ 0x5602677533c0] mmco: unref short failure
[h264 @ 0x560a39036880] mmco: unref short failure
[h264 @ 0x560a39036880] mmco: unref short failure
[h264 @ 0x56026fbd4dc0] mmco: unref short failure
[h264 @ 0x56026fbd4dc0] mmco: unref short failure
[h264 @ 0x5621365f35c0] mmco: unref short failure
 36%|███▌      | 703/1945 [3:04:59<3:40:52, 10.67s/it][h264 @ 0x5621485a7a00] mmco: unref short failure
[h264 @ 0x5621485a7a00] mmco: unref short failure
[h264 @ 0x555a3230c040] mmco: unref short failure
[h264 @ 0x555a3230c040] mmco: unref short failure
[h264 @ 0x555a4aaf74c0] mmco: unref short failure
[h264 @ 0x555a4aaf74c0] mmco: unref short failure
[h264 @ 0x562132e7a700] mmco: unref short failure
[h264 @ 0x562132e7a700] mmco: unref short failure
[h264 @ 0x56026972d400] mmco: unref short failure
[h264 @ 0x56026972d400] mmco: unref short failure
[h264 @ 0x5621314b9d40] mmco: unref short failure
[h264 @ 0x560a2f47fdc0] mmco: unref short failure
[h264 @ 0x555a4aaf74c0] mmco: unref short failure
[h264 @ 0x555a4aaf74c0] mmco: unref short failure
[h264 @ 0x555a4aaf74c0] mmco: unref short failure
[h264 @ 0x555a4aaf74c0] mmco: unref short failure
 36%|███▌      | 704/1945 [3:05:23<4:58:24, 14.43s/it][h264 @ 0x562133f497c0] mmco: unref short failure
[h264 @ 0x560269880ec0] mmco: unref short failure
[h264 @ 0x560269880ec0] mmco: unref short failure
[h264 @ 0x562133f497c0] mmco: unref short failure
[h264 @ 0x555a4ded5c80] mmco: unref short failure
[h264 @ 0x555a4ded5c80] mmco: unref short failure
[h264 @ 0x555a4ded5c80] mmco: unref short failure
[h264 @ 0x555a4ded5c80] mmco: unref short failure
[h264 @ 0x555a4ded5c80] mmco: unref short failure
[h264 @ 0x555a4ded5c80] mmco: unref short failure
 36%|███▌      | 705/1945 [3:05:39<5:09:05, 14.96s/it][h264 @ 0x560a482b9180] mmco: unref short failure
[h264 @ 0x560a482b9180] mmco: unref short failure
[h264 @ 0x5621369094c0] mmco: unref short failure
[h264 @ 0x5621369094c0] mmco: unref short failure
[h264 @ 0x56212c0ed280] mmco: unref short failure
[h264 @ 0x560a34903340] mmco: unref short failure
[h264 @ 0x560a34903340] mmco: unref short failure
[h264 @ 0x555a47c14cc0] mmco: unref short failure
[h264 @ 0x555a47c14cc0] mmco: unref short failure
[h264 @ 0x560a351b95c0] mmco: unref short failure
[h264 @ 0x555a338aab40] mmco: unref short failure
[h264 @ 0x555a338aab40] mmco: unref short failure
[h264 @ 0x560266be7580] mmco: unref short failure
[h264 @ 0x5602797a5900] mmco: unref short failure
[h264 @ 0x5602797a5900] mmco: unref short failure
[h264 @ 0x562132e906c0] mmco: unref short failure
[h264 @ 0x56214162d900] mmco: unref short failure
[h264 @ 0x56213eb8bc80] mmco: unref short failure
[h264 @ 0x56213eb8bc80] mmco: unref short failure
[h264 @ 0x560269880ec0] mmco: unref short failure
[h264 @ 0x560a370871c0] mmco: unref short failure
[h264 @ 0x560a370871c0] mmco: unref short failure
[h264 @ 0x555a4bb03cc0] mmco: unref short failure
[h264 @ 0x555a4bb03cc0] mmco: unref short failure
[h264 @ 0x555a4bb03cc0] mmco: unref short failure
[h264 @ 0x555a4bb03cc0] mmco: unref short failure
[h264 @ 0x555a4bb03cc0] mmco: unref short failure
[h264 @ 0x555a4bb03cc0] mmco: unref short failure
[h264 @ 0x560a49a1b500] mmco: unref short failure
[h264 @ 0x560a49a1b500] mmco: unref short failure
[h264 @ 0x56025de9c880] mmco: unref short failure
[h264 @ 0x560a49a1b500] mmco: unref short failure
[h264 @ 0x560a49a1b500] mmco: unref short failure
 36%|███▋      | 706/1945 [3:06:26<8:26:09, 24.51s/it][h264 @ 0x560a37cb8e00] mmco: unref short failure
[h264 @ 0x56212a4c0400] mmco: unref short failure
[h264 @ 0x56212a4c0400] mmco: unref short failure
[h264 @ 0x56212a4c0400] mmco: unref short failure
[h264 @ 0x56212a4c0400] mmco: unref short failure
 36%|███▋      | 707/1945 [3:06:33<6:37:38, 19.27s/it][h264 @ 0x56212aa24b80] mmco: unref short failure
 36%|███▋      | 708/1945 [3:06:40<5:24:14, 15.73s/it][h264 @ 0x555a3133e440] mmco: unref short failure
[h264 @ 0x555a3133e440] mmco: unref short failure
 36%|███▋      | 709/1945 [3:06:47<4:27:23, 12.98s/it][h264 @ 0x560a4dacd6c0] mmco: unref short failure
[h264 @ 0x56027ac8b740] mmco: unref short failure
[h264 @ 0x56027ac8b740] mmco: unref short failure
 37%|███▋      | 710/1945 [3:06:55<3:56:27, 11.49s/it][h264 @ 0x5602603f6800] mmco: unref short failure
 37%|███▋      | 711/1945 [3:07:02<3:30:49, 10.25s/it][h264 @ 0x555a310f2100] mmco: unref short failure
[h264 @ 0x555a4aaf74c0] mmco: unref short failure
[h264 @ 0x555a4aaf74c0] mmco: unref short failure
 37%|███▋      | 712/1945 [3:07:27<4:59:23, 14.57s/it][h264 @ 0x555a39079300] mmco: unref short failure
[h264 @ 0x555a39079300] mmco: unref short failure
[h264 @ 0x56212d279380] mmco: unref short failure
[h264 @ 0x56212d279380] mmco: unref short failure
[h264 @ 0x560a407d49c0] mmco: unref short failure
[h264 @ 0x560a407d49c0] mmco: unref short failure
[h264 @ 0x560a407d49c0] mmco: unref short failure
[h264 @ 0x560a407d49c0] mmco: unref short failure
 37%|███▋      | 713/1945 [3:07:42<5:01:20, 14.68s/it][h264 @ 0x562137999340] mmco: unref short failure
[h264 @ 0x562137999340] mmco: unref short failure
[h264 @ 0x56027a0fd0c0] mmco: unref short failure
[h264 @ 0x562132f22240] mmco: unref short failure
[h264 @ 0x560a2ffac980] mmco: unref short failure
[h264 @ 0x555a4a45a300] mmco: unref short failure
[h264 @ 0x560a44b23a00] mmco: unref short failure
[h264 @ 0x560a3e6928c0] mmco: unref short failure
[h264 @ 0x555a4b636540] mmco: unref short failure
[h264 @ 0x555a4b636540] mmco: unref short failure
 37%|███▋      | 714/1945 [3:08:30<8:31:29, 24.93s/it][h264 @ 0x560274c13fc0] mmco: unref short failure
 37%|███▋      | 715/1945 [3:08:37<6:36:58, 19.36s/it][h264 @ 0x56025f783040] mmco: unref short failure
[h264 @ 0x56025f783040] mmco: unref short failure
[h264 @ 0x56212aa24b80] mmco: unref short failure
[h264 @ 0x56212aa24b80] mmco: unref short failure
 37%|███▋      | 716/1945 [3:08:45<5:25:44, 15.90s/it][h264 @ 0x56027e7f8440] mmco: unref short failure
[h264 @ 0x560a3f68fc40] mmco: unref short failure
[h264 @ 0x560a3f68fc40] mmco: unref short failure
 37%|███▋      | 717/1945 [3:08:52<4:30:28, 13.21s/it][h264 @ 0x560a39ebb700] mmco: unref short failure
 37%|███▋      | 718/1945 [3:08:58<3:49:15, 11.21s/it][h264 @ 0x562132e7a700] mmco: unref short failure
[h264 @ 0x560274c13fc0] mmco: unref short failure
[h264 @ 0x560274c13fc0] mmco: unref short failure
[h264 @ 0x555a31410e00] mmco: unref short failure
[h264 @ 0x555a31410e00] mmco: unref short failure
 37%|███▋      | 719/1945 [3:09:06<3:26:45, 10.12s/it][h264 @ 0x5602628ec1c0] mmco: unref short failure
[h264 @ 0x560a414255c0] mmco: unref short failure
[h264 @ 0x560a414255c0] mmco: unref short failure
[h264 @ 0x56213a4c8780] mmco: unref short failure
[h264 @ 0x56213a4c8780] mmco: unref short failure
[h264 @ 0x56212dfd4140] mmco: unref short failure
[h264 @ 0x5602766456c0] mmco: unref short failure
[h264 @ 0x5621430148c0] mmco: unref short failure
[h264 @ 0x5621430148c0] mmco: unref short failure
 37%|███▋      | 720/1945 [3:09:29<4:49:14, 14.17s/it][h264 @ 0x560a4806fa00] mmco: unref short failure
[h264 @ 0x560a4806fa00] mmco: unref short failure
[h264 @ 0x560a4806fa00] mmco: unref short failure
[h264 @ 0x560a4806fa00] mmco: unref short failure
[h264 @ 0x555a433b8f80] mmco: unref short failure
[h264 @ 0x555a433b8f80] mmco: unref short failure
 37%|███▋      | 721/1945 [3:09:45<4:56:14, 14.52s/it][h264 @ 0x555a3cac8640] mmco: unref short failure
[h264 @ 0x555a3cac8640] mmco: unref short failure
[h264 @ 0x560a4169c340] mmco: unref short failure
[h264 @ 0x560a4169c340] mmco: unref short failure
[h264 @ 0x5621368dd3c0] mmco: unref short failure
[h264 @ 0x56026fea7940] mmco: unref short failure
[h264 @ 0x56026fea7940] mmco: unref short failure
[h264 @ 0x555a4ba940c0] mmco: unref short failure
[h264 @ 0x555a4ba940c0] mmco: unref short failure
[h264 @ 0x555a4ba940c0] mmco: unref short failure
[h264 @ 0x555a4ba940c0] mmco: unref short failure
[h264 @ 0x56026bf32a80] mmco: unref short failure
[h264 @ 0x56026bf32a80] mmco: unref short failure
[h264 @ 0x56025b96f7c0] mmco: unref short failure
[h264 @ 0x560a305d2f40] mmco: unref short failure
[h264 @ 0x555a34f7ca40] mmco: unref short failure
[h264 @ 0x56213ccbb980] mmco: unref short failure
[h264 @ 0x56025a659c00] mmco: unref short failure
[h264 @ 0x56025a659c00] mmco: unref short failure
[h264 @ 0x555a4aaf74c0] mmco: unref short failure
[h264 @ 0x555a4aaf74c0] mmco: unref short failure
[h264 @ 0x560a351caac0] mmco: unref short failure
[h264 @ 0x562131fb8d80] mmco: unref short failure
[h264 @ 0x562131fb8d80] mmco: unref short failure
[h264 @ 0x56212eaa9400] mmco: unref short failure
[h264 @ 0x56212eaa9400] mmco: unref short failure
[h264 @ 0x555a3f8f7dc0] mmco: unref short failure
[h264 @ 0x555a3f8f7dc0] mmco: unref short failure
[h264 @ 0x555a3f8f7dc0] mmco: unref short failure
[h264 @ 0x555a3f8f7dc0] mmco: unref short failure
[h264 @ 0x560a4c757dc0] mmco: unref short failure
[h264 @ 0x560a4c757dc0] mmco: unref short failure
[h264 @ 0x5621368dd3c0] mmco: unref short failure
[h264 @ 0x5621368dd3c0] mmco: unref short failure
[h264 @ 0x560a2c7aec80] mmco: unref short failure
[h264 @ 0x560a2c7aec80] mmco: unref short failure
 37%|███▋      | 722/1945 [3:10:34<8:27:31, 24.90s/it][h264 @ 0x56025f4faa80] mmco: unref short failure
[h264 @ 0x56025f4faa80] mmco: unref short failure
[h264 @ 0x56025f4faa80] mmco: unref short failure
[h264 @ 0x56025f4faa80] mmco: unref short failure
[h264 @ 0x562134343500] mmco: unref short failure
 37%|███▋      | 723/1945 [3:10:40<6:35:41, 19.43s/it][h264 @ 0x56026f4abf00] mmco: unref short failure
[h264 @ 0x56026f4abf00] mmco: unref short failure
 37%|███▋      | 724/1945 [3:10:48<5:20:17, 15.74s/it] 37%|███▋      | 725/1945 [3:10:54<4:25:04, 13.04s/it] 37%|███▋      | 726/1945 [3:11:02<3:49:27, 11.29s/it][h264 @ 0x560264c5df40] mmco: unref short failure
[h264 @ 0x562145589000] mmco: unref short failure
[h264 @ 0x562148c5e880] mmco: unref short failure
 37%|███▋      | 727/1945 [3:11:09<3:27:12, 10.21s/it][h264 @ 0x560277066240] mmco: unref short failure
[h264 @ 0x56212dfd4140] mmco: unref short failure
[h264 @ 0x56212dfd4140] mmco: unref short failure
[h264 @ 0x555a3cac8640] mmco: unref short failure
[h264 @ 0x560275891dc0] mmco: unref short failure
[h264 @ 0x555a32663e80] mmco: unref short failure
[h264 @ 0x555a32663e80] mmco: unref short failure
[h264 @ 0x560a4ab4ef00] mmco: unref short failure
[h264 @ 0x560a3a890840] mmco: unref short failure
[h264 @ 0x562131fb8d80] mmco: unref short failure
[h264 @ 0x562131fb8d80] mmco: unref short failure
[h264 @ 0x56025d65a280] mmco: unref short failure
[h264 @ 0x56025d65a280] mmco: unref short failure
[h264 @ 0x555a4be7ee00] mmco: unref short failure
[h264 @ 0x555a3b283dc0] mmco: unref short failure
 37%|███▋      | 728/1945 [3:11:40<5:30:40, 16.30s/it][h264 @ 0x560270ac9280] mmco: unref short failure
[h264 @ 0x562131dc4680] mmco: unref short failure
[h264 @ 0x562131dc4680] mmco: unref short failure
[h264 @ 0x560a339fb940] mmco: unref short failure
 37%|███▋      | 729/1945 [3:11:46<4:32:33, 13.45s/it][h264 @ 0x560a2c628f80] mmco: unref short failure
[h264 @ 0x555a3063eb80] mmco: unref short failure
[h264 @ 0x555a3063eb80] mmco: unref short failure
[h264 @ 0x555a4aaf74c0] mmco: unref short failure
[h264 @ 0x560a45f8b540] mmco: unref short failure
[h264 @ 0x560a45f8b540] mmco: unref short failure
[h264 @ 0x562148c67fc0] mmco: unref short failure
[h264 @ 0x562148c67fc0] mmco: unref short failure
[h264 @ 0x560a2c628f80] mmco: unref short failure
[h264 @ 0x560a2c628f80] mmco: unref short failure
[h264 @ 0x56025b04ae00] mmco: unref short failure
[h264 @ 0x56025b04ae00] mmco: unref short failure
 38%|███▊      | 730/1945 [3:12:37<8:16:05, 24.50s/it] 38%|███▊      | 731/1945 [3:12:44<6:32:07, 19.38s/it] 38%|███▊      | 732/1945 [3:12:52<5:19:30, 15.80s/it][h264 @ 0x560a37b59c40] mmco: unref short failure
[h264 @ 0x560a37b59c40] mmco: unref short failure
[h264 @ 0x562130c1d6c0] mmco: unref short failure
[h264 @ 0x562130c1d6c0] mmco: unref short failure
[h264 @ 0x560a2c79dd00] mmco: unref short failure
 38%|███▊      | 733/1945 [3:12:59<4:27:48, 13.26s/it][h264 @ 0x56025fc5c340] mmco: unref short failure
[h264 @ 0x56025fc5c340] mmco: unref short failure
[h264 @ 0x555a31293700] mmco: unref short failure
[h264 @ 0x56212dbcabc0] mmco: unref short failure
[h264 @ 0x56212dbcabc0] mmco: unref short failure
 38%|███▊      | 734/1945 [3:13:07<3:53:34, 11.57s/it][h264 @ 0x56025f6634c0] mmco: unref short failure
[h264 @ 0x560a4ef03680] mmco: unref short failure
[h264 @ 0x560a4ef03680] mmco: unref short failure
 38%|███▊      | 735/1945 [3:13:14<3:27:13, 10.28s/it][h264 @ 0x560a4a6ad940] mmco: unref short failure
[h264 @ 0x5621444b7340] mmco: unref short failure
[h264 @ 0x5621444b7340] mmco: unref short failure
 38%|███▊      | 736/1945 [3:13:38<4:49:36, 14.37s/it][h264 @ 0x560274134d80] mmco: unref short failure
[h264 @ 0x560270ac9280] mmco: unref short failure
[h264 @ 0x555a49bb3080] mmco: unref short failure
[h264 @ 0x555a49bb3080] mmco: unref short failure
[h264 @ 0x5602627456c0] mmco: unref short failure
[h264 @ 0x5602627456c0] mmco: unref short failure
[h264 @ 0x555a3a1b4d40] mmco: unref short failure
[h264 @ 0x555a3a1b4d40] mmco: unref short failure
 38%|███▊      | 737/1945 [3:13:52<4:48:43, 14.34s/it][h264 @ 0x560a45697c80] mmco: unref short failure
[h264 @ 0x560a45697c80] mmco: unref short failure
[h264 @ 0x560a45697c80] mmco: unref short failure
[h264 @ 0x555a31241d00] mmco: unref short failure
[h264 @ 0x555a31241d00] mmco: unref short failure
[h264 @ 0x560a45697c80] mmco: unref short failure
[h264 @ 0x560a45697c80] mmco: unref short failure
[h264 @ 0x560a3bc08440] mmco: unref short failure
[h264 @ 0x56025e1e9880] mmco: unref short failure
[h264 @ 0x560a397b0c00] mmco: unref short failure
[h264 @ 0x560a397b0c00] mmco: unref short failure
[h264 @ 0x560a2c7bb840] mmco: unref short failure
[h264 @ 0x560a2c7bb840] mmco: unref short failure
[h264 @ 0x560a4b4c8200] mmco: unref short failure
[h264 @ 0x562142193040] mmco: unref short failure
[h264 @ 0x562142193040] mmco: unref short failure
[h264 @ 0x5621472856c0] mmco: unref short failure
[h264 @ 0x562142dfed40] mmco: unref short failure
[h264 @ 0x562142dfed40] mmco: unref short failure
[h264 @ 0x56212a932500] mmco: unref short failure
[h264 @ 0x56212a932500] mmco: unref short failure
[h264 @ 0x562138e137c0] mmco: unref short failure
[h264 @ 0x56212feafac0] mmco: unref short failure
[h264 @ 0x555a3064bf80] mmco: unref short failure
[h264 @ 0x555a375e0900] mmco: unref short failure
[h264 @ 0x555a375e0900] mmco: unref short failure
[h264 @ 0x555a342734c0] mmco: unref short failure
[h264 @ 0x555a342734c0] mmco: unref short failure
[h264 @ 0x555a49f24e80] mmco: unref short failure
[h264 @ 0x560a2ef11e00] mmco: unref short failure
[h264 @ 0x560a2ef11e00] mmco: unref short failure
[h264 @ 0x560a2ef11e00] mmco: unref short failure
[h264 @ 0x560a2ef11e00] mmco: unref short failure
 38%|███▊      | 738/1945 [3:14:48<8:58:01, 26.75s/it] 38%|███▊      | 739/1945 [3:14:54<6:54:30, 20.62s/it][h264 @ 0x560267be39c0] mmco: unref short failure
[h264 @ 0x560267be39c0] mmco: unref short failure
[h264 @ 0x56026590c440] mmco: unref short failure
[h264 @ 0x56026590c440] mmco: unref short failure
 38%|███▊      | 740/1945 [3:15:01<5:29:57, 16.43s/it][h264 @ 0x560260419c40] mmco: unref short failure
[h264 @ 0x560260419c40] mmco: unref short failure
 38%|███▊      | 741/1945 [3:15:08<4:32:52, 13.60s/it][h264 @ 0x560a2e83a9c0] mmco: unref short failure
[h264 @ 0x56212dc24e80] mmco: unref short failure
[h264 @ 0x56212dc24e80] mmco: unref short failure
[h264 @ 0x56212dc24e80] mmco: unref short failure
[h264 @ 0x56212dc24e80] mmco: unref short failure
[h264 @ 0x56212dc24e80] mmco: unref short failure
[h264 @ 0x56212dc24e80] mmco: unref short failure
[h264 @ 0x56212dc24e80] mmco: unref short failure
[h264 @ 0x56212dc24e80] mmco: unref short failure
[h264 @ 0x560a2f12a780] mmco: unref short failure
[h264 @ 0x560a2f12a780] mmco: unref short failure
[h264 @ 0x560a2f12a780] mmco: unref short failure
[h264 @ 0x560a2f12a780] mmco: unref short failure
 38%|███▊      | 742/1945 [3:15:16<4:02:21, 12.09s/it][h264 @ 0x56026f267040] mmco: unref short failure
[h264 @ 0x56026f267040] mmco: unref short failure
[h264 @ 0x555a3064bf80] mmco: unref short failure
[h264 @ 0x555a3064bf80] mmco: unref short failure
 38%|███▊      | 743/1945 [3:15:24<3:33:38, 10.66s/it][h264 @ 0x562147837f00] mmco: unref short failure
[h264 @ 0x555a3f65a940] mmco: unref short failure
[h264 @ 0x560a2c767140] mmco: unref short failure
[h264 @ 0x560a2c767140] mmco: unref short failure
 38%|███▊      | 744/1945 [3:15:36<3:45:45, 11.28s/it][h264 @ 0x560a37d28d00] mmco: unref short failure
[h264 @ 0x56212879e500] mmco: unref short failure
[h264 @ 0x555a354fae40] mmco: unref short failure
[h264 @ 0x555a354fae40] mmco: unref short failure
[h264 @ 0x5621436dfdc0] mmco: unref short failure
[h264 @ 0x560261e30340] mmco: unref short failure
[h264 @ 0x560a3e427540] mmco: unref short failure
[h264 @ 0x560a399fc940] mmco: unref short failure
[h264 @ 0x560a399fc940] mmco: unref short failure
[h264 @ 0x560a399fc940] mmco: unref short failure
 38%|███▊      | 745/1945 [3:15:52<4:09:04, 12.45s/it][h264 @ 0x56026bf32a80] mmco: unref short failure
[h264 @ 0x56026bf32a80] mmco: unref short failure
[h264 @ 0x56026bf32a80] mmco: unref short failure
[h264 @ 0x56026bf32a80] mmco: unref short failure
[h264 @ 0x560a42572a00] mmco: unref short failure
[h264 @ 0x56025af13680] mmco: unref short failure
[h264 @ 0x56025af13680] mmco: unref short failure
[h264 @ 0x56212d432980] mmco: unref short failure
[h264 @ 0x56212d432980] mmco: unref short failure
[h264 @ 0x562139cc2d80] mmco: unref short failure
[h264 @ 0x56212dc24e80] mmco: unref short failure
[h264 @ 0x56212dc24e80] mmco: unref short failure
[h264 @ 0x56212dc24e80] mmco: unref short failure
[h264 @ 0x56212dc24e80] mmco: unref short failure
[h264 @ 0x56212dc24e80] mmco: unref short failure
[h264 @ 0x56212dc24e80] mmco: unref short failure
[h264 @ 0x56026ce9ccc0] mmco: unref short failure
[h264 @ 0x56026ce9ccc0] mmco: unref short failure
[h264 @ 0x560a481c99c0] mmco: unref short failure
[h264 @ 0x560a481c99c0] mmco: unref short failure
[h264 @ 0x560a481c99c0] mmco: unref short failure
[h264 @ 0x560a481c99c0] mmco: unref short failure
[h264 @ 0x560263d1ed40] mmco: unref short failure
[h264 @ 0x560275c29e80] mmco: unref short failure
[h264 @ 0x560275c29e80] mmco: unref short failure
[h264 @ 0x560a4a3c6b40] mmco: unref short failure
[h264 @ 0x560a4a3c6b40] mmco: unref short failure
[h264 @ 0x562139ca4f80] mmco: unref short failure
[h264 @ 0x562139ca4f80] mmco: unref short failure
[h264 @ 0x560a45f8b540] mmco: unref short failure
[h264 @ 0x560a45f8b540] mmco: unref short failure
[h264 @ 0x56212ecc1840] mmco: unref short failure
[h264 @ 0x5621292fb580] mmco: unref short failure
[h264 @ 0x5621292fb580] mmco: unref short failure
[h264 @ 0x5621292fb580] mmco: unref short failure
[h264 @ 0x5621292fb580] mmco: unref short failure
[h264 @ 0x5621456ba140] mmco: unref short failure
[h264 @ 0x560a2d2c0e80] mmco: unref short failure
 38%|███▊      | 746/1945 [3:16:50<8:41:55, 26.12s/it] 38%|███▊      | 747/1945 [3:16:57<6:47:37, 20.41s/it] 38%|███▊      | 748/1945 [3:17:03<5:25:20, 16.31s/it][h264 @ 0x560275c29e80] mmco: unref short failure
[h264 @ 0x560275c29e80] mmco: unref short failure
[h264 @ 0x560275c29e80] mmco: unref short failure
[h264 @ 0x560275c29e80] mmco: unref short failure
 39%|███▊      | 749/1945 [3:17:10<4:28:00, 13.45s/it]09/08/2024 23:58:31 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 2.884442090988159, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.03988158330321312, 'loss_ret%tv%ta--finetune_area/loss_area': 1.258561372756958, 'loss_ret%tv%ta--finetune_area/total_loss': 4.18288516998291}
 39%|███▊      | 750/1945 [3:17:17<3:50:35, 11.58s/it][h264 @ 0x555a4aaf74c0] mmco: unref short failure
[h264 @ 0x555a4aaf74c0] mmco: unref short failure
 39%|███▊      | 751/1945 [3:17:25<3:24:55, 10.30s/it][h264 @ 0x560a3e283540] mmco: unref short failure
[h264 @ 0x560a3e283540] mmco: unref short failure
[h264 @ 0x5602696deac0] mmco: unref short failure
 39%|███▊      | 752/1945 [3:17:37<3:36:54, 10.91s/it] 39%|███▊      | 753/1945 [3:17:50<3:48:45, 11.51s/it][h264 @ 0x56025c98c540] mmco: unref short failure
[h264 @ 0x56025c98c540] mmco: unref short failure
[h264 @ 0x56025c98c540] mmco: unref short failure
[h264 @ 0x56025c98c540] mmco: unref short failure
[h264 @ 0x56213d1baa40] mmco: unref short failure
[h264 @ 0x56213d1baa40] mmco: unref short failure
[h264 @ 0x56026bdeb440] mmco: unref short failure
[h264 @ 0x56026bdeb440] mmco: unref short failure
[h264 @ 0x555a3a6417c0] mmco: unref short failure
[h264 @ 0x555a3a6417c0] mmco: unref short failure
[h264 @ 0x562142995cc0] mmco: unref short failure
[h264 @ 0x562142995cc0] mmco: unref short failure
[h264 @ 0x555a35857100] mmco: unref short failure
[h264 @ 0x555a35857100] mmco: unref short failure
[h264 @ 0x56214c778200] mmco: unref short failure
[h264 @ 0x5602631c3340] mmco: unref short failure
[h264 @ 0x562148c67fc0] mmco: unref short failure
[h264 @ 0x562148c67fc0] mmco: unref short failure
[h264 @ 0x560a3bb427c0] mmco: unref short failure
[h264 @ 0x560a3bb427c0] mmco: unref short failure
[h264 @ 0x555a522023c0] mmco: unref short failure
[h264 @ 0x555a522023c0] mmco: unref short failure
[h264 @ 0x555a4aaf74c0] mmco: unref short failure
[h264 @ 0x555a515bccc0] mmco: unref short failure
[h264 @ 0x555a515bccc0] mmco: unref short failure
[h264 @ 0x555a4e5ff040] mmco: unref short failure
[h264 @ 0x555a4e5ff040] mmco: unref short failure
[h264 @ 0x555a4e5ff040] mmco: unref short failure
[h264 @ 0x555a4e5ff040] mmco: unref short failure
[h264 @ 0x56026567e600] mmco: unref short failure
[h264 @ 0x562141feab40] mmco: unref short failure
[h264 @ 0x562141feab40] mmco: unref short failure
[h264 @ 0x555a49f11480] mmco: unref short failure
[h264 @ 0x555a49f11480] mmco: unref short failure
[h264 @ 0x56025e8b5740] mmco: unref short failure
[h264 @ 0x56025e8b5740] mmco: unref short failure
 39%|███▉      | 754/1945 [3:19:09<10:33:42, 31.93s/it][h264 @ 0x555a4e355b00] mmco: unref short failure
[h264 @ 0x555a4e355b00] mmco: unref short failure
 39%|███▉      | 755/1945 [3:19:17<8:10:21, 24.72s/it] [h264 @ 0x560269d78280] mmco: unref short failure
[h264 @ 0x560269d78280] mmco: unref short failure
[h264 @ 0x560269d78280] mmco: unref short failure
[h264 @ 0x560269d78280] mmco: unref short failure
 39%|███▉      | 756/1945 [3:19:25<6:29:01, 19.63s/it][h264 @ 0x560a2cbe33c0] mmco: unref short failure
[h264 @ 0x560a2cbe33c0] mmco: unref short failure
 39%|███▉      | 757/1945 [3:19:32<5:13:51, 15.85s/it][h264 @ 0x555a3a2b7dc0] mmco: unref short failure
[h264 @ 0x560a40b22dc0] mmco: unref short failure
[h264 @ 0x560a40b22dc0] mmco: unref short failure
 39%|███▉      | 758/1945 [3:19:39<4:21:48, 13.23s/it][h264 @ 0x56025acdd340] mmco: unref short failure
[h264 @ 0x56025acdd340] mmco: unref short failure
[h264 @ 0x555a32905500] mmco: unref short failure
[h264 @ 0x555a3e225640] mmco: unref short failure
[h264 @ 0x555a3e225640] mmco: unref short failure
 39%|███▉      | 759/1945 [3:19:46<3:42:15, 11.24s/it][h264 @ 0x560a3420d4c0] mmco: unref short failure
 39%|███▉      | 760/1945 [3:19:53<3:18:46, 10.06s/it][h264 @ 0x56026ce3e280] mmco: unref short failure
[h264 @ 0x56026ce3e280] mmco: unref short failure
 39%|███▉      | 761/1945 [3:20:01<3:05:18,  9.39s/it][h264 @ 0x555a31bf0cc0] mmco: unref short failure
[h264 @ 0x555a4aaf74c0] mmco: unref short failure
[h264 @ 0x555a4aaf74c0] mmco: unref short failure
[h264 @ 0x555a4aaf74c0] mmco: unref short failure
[h264 @ 0x555a4aaf74c0] mmco: unref short failure
[h264 @ 0x560270ac9280] mmco: unref short failure
[h264 @ 0x56212a422f00] mmco: unref short failure
[h264 @ 0x56212a422f00] mmco: unref short failure
[h264 @ 0x56212a422f00] mmco: unref short failure
[h264 @ 0x56212a422f00] mmco: unref short failure
[h264 @ 0x56212a422f00] mmco: unref short failure
[h264 @ 0x56212a422f00] mmco: unref short failure
[h264 @ 0x555a49f11480] mmco: unref short failure
[h264 @ 0x555a49f11480] mmco: unref short failure
[h264 @ 0x560a33906bc0] mmco: unref short failure
[h264 @ 0x560a33906bc0] mmco: unref short failure
[h264 @ 0x560a33906bc0] mmco: unref short failure
[h264 @ 0x560a33906bc0] mmco: unref short failure
[h264 @ 0x560260588ac0] mmco: unref short failure
[h264 @ 0x560260588ac0] mmco: unref short failure
[h264 @ 0x560a4cc83340] mmco: unref short failure
[h264 @ 0x555a34a976c0] mmco: unref short failure
[h264 @ 0x555a34a976c0] mmco: unref short failure
[h264 @ 0x555a4e5ff040] mmco: unref short failure
[h264 @ 0x555a3e3731c0] mmco: unref short failure
[h264 @ 0x560a4df9d040] mmco: unref short failure
[h264 @ 0x560a4df9d040] mmco: unref short failure
[h264 @ 0x562134930d80] mmco: unref short failure
[h264 @ 0x562134930d80] mmco: unref short failure
[h264 @ 0x555a3386c800] mmco: unref short failure
[h264 @ 0x555a3386c800] mmco: unref short failure
[h264 @ 0x555a3f967b80] mmco: unref short failure
[h264 @ 0x555a3b1e4380] mmco: unref short failure
[h264 @ 0x555a3b1e4380] mmco: unref short failure
[h264 @ 0x555a3b1e4380] mmco: unref short failure
[h264 @ 0x555a3b1e4380] mmco: unref short failure
[h264 @ 0x562138d92f40] mmco: unref short failure
[h264 @ 0x560a2df6e440] mmco: unref short failure
[h264 @ 0x56213968cb40] mmco: unref short failure
[h264 @ 0x56213968cb40] mmco: unref short failure
[h264 @ 0x555a3b1e4380] mmco: unref short failure
[h264 @ 0x555a3b1e4380] mmco: unref short failure
[h264 @ 0x5602618b0100] mmco: unref short failure
[h264 @ 0x5602618b0100] mmco: unref short failure
[h264 @ 0x560a37189000] mmco: unref short failure
[h264 @ 0x560270ac9280] mmco: unref short failure
[h264 @ 0x555a49300140] mmco: unref short failure
[h264 @ 0x560a38f47200] mmco: unref short failure
[h264 @ 0x56212a038740] mmco: unref short failure
[h264 @ 0x56212a038740] mmco: unref short failure
 39%|███▉      | 762/1945 [3:21:16<9:30:47, 28.95s/it][h264 @ 0x555a325cd380] mmco: unref short failure
[h264 @ 0x555a325cd380] mmco: unref short failure
 39%|███▉      | 763/1945 [3:21:23<7:20:50, 22.38s/it][h264 @ 0x56214aab5780] mmco: unref short failure
[h264 @ 0x560a4df9d040] mmco: unref short failure
[h264 @ 0x560a4df9d040] mmco: unref short failure
 39%|███▉      | 764/1945 [3:21:33<6:06:45, 18.63s/it][h264 @ 0x560a2e83a9c0] mmco: unref short failure
[h264 @ 0x560a4a5e8440] mmco: unref short failure
[h264 @ 0x560a4a5e8440] mmco: unref short failure
 39%|███▉      | 765/1945 [3:21:40<4:58:47, 15.19s/it][h264 @ 0x56213d7bdb00] mmco: unref short failure
[h264 @ 0x56213d7bdb00] mmco: unref short failure
[h264 @ 0x56213da49b40] mmco: unref short failure
[h264 @ 0x56213da49b40] mmco: unref short failure
[h264 @ 0x56213a574080] mmco: unref short failure
[h264 @ 0x56213a574080] mmco: unref short failure
 39%|███▉      | 766/1945 [3:21:47<4:10:09, 12.73s/it] 39%|███▉      | 767/1945 [3:21:54<3:36:12, 11.01s/it][h264 @ 0x555a3ba86e80] mmco: unref short failure
 39%|███▉      | 768/1945 [3:22:02<3:18:06, 10.10s/it] 40%|███▉      | 769/1945 [3:22:08<2:56:15,  8.99s/it][h264 @ 0x560a367a8f80] mmco: unref short failure
[h264 @ 0x560272d5cdc0] mmco: unref short failure
[h264 @ 0x560272d5cdc0] mmco: unref short failure
[h264 @ 0x555a3bf44bc0] mmco: unref short failure
[h264 @ 0x555a3bf44bc0] mmco: unref short failure
[h264 @ 0x56025b7ac200] mmco: unref short failure
[h264 @ 0x555a3ba86e80] mmco: unref short failure
[h264 @ 0x555a3ba86e80] mmco: unref short failure
[h264 @ 0x555a36b8b100] mmco: unref short failure
[h264 @ 0x555a36b8b100] mmco: unref short failure
[h264 @ 0x555a36b8b100] mmco: unref short failure
[h264 @ 0x555a36b8b100] mmco: unref short failure
[h264 @ 0x56213cced000] mmco: unref short failure
[h264 @ 0x56213cced000] mmco: unref short failure
[h264 @ 0x555a4691ba40] mmco: unref short failure
[h264 @ 0x555a4691ba40] mmco: unref short failure
 40%|███▉      | 770/1945 [3:22:38<4:58:57, 15.27s/it] 40%|███▉      | 771/1945 [3:22:42<3:51:44, 11.84s/it] 40%|███▉      | 772/1945 [3:22:46<3:04:20,  9.43s/it] 40%|███▉      | 773/1945 [3:22:49<2:31:02,  7.73s/it] 40%|███▉      | 774/1945 [3:22:53<2:07:43,  6.54s/it] 40%|███▉      | 775/1945 [3:22:57<1:51:32,  5.72s/it] 40%|███▉      | 776/1945 [3:23:01<1:40:12,  5.14s/it] 40%|███▉      | 777/1945 [3:23:05<1:32:07,  4.73s/it]/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x562128ef2900] mmco: unref short failure
[h264 @ 0x562128ef2900] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x562128b7ab00] mmco: unref short failure
[h264 @ 0x562128b7ab00] mmco: unref short failure
[h264 @ 0x562128b7ab00] mmco: unref short failure
[h264 @ 0x562128b7ab00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x56025ada8200] mmco: unref short failure
[h264 @ 0x56025a635c80] mmco: unref short failure
[h264 @ 0x56025ae07c40] mmco: unref short failure
[h264 @ 0x56025ae07c40] mmco: unref short failure
[h264 @ 0x555a2feeea00] mmco: unref short failure
[h264 @ 0x56025adbf7c0] mmco: unref short failure
[h264 @ 0x56025adbf7c0] mmco: unref short failure
[h264 @ 0x56025ada8200] mmco: unref short failure
[h264 @ 0x56025c11dec0] mmco: unref short failure
[h264 @ 0x56025c11dec0] mmco: unref short failure
[h264 @ 0x56025ad4b1c0] mmco: unref short failure
[h264 @ 0x56025ad4b1c0] mmco: unref short failure
[h264 @ 0x560a2de7ea40] mmco: unref short failure
[h264 @ 0x56025bd8cf80] mmco: unref short failure
[h264 @ 0x562128a8e700] mmco: unref short failure
[h264 @ 0x562128a8e700] mmco: unref short failure
[h264 @ 0x555a303dee80] mmco: unref short failure
[h264 @ 0x555a303dee80] mmco: unref short failure
[h264 @ 0x560a2ca64440] mmco: unref short failure
[h264 @ 0x560a2ca64440] mmco: unref short failure
[h264 @ 0x56025b3764c0] mmco: unref short failure
[h264 @ 0x56025b3764c0] mmco: unref short failure
[h264 @ 0x560a3252c380] mmco: unref short failure
[h264 @ 0x555a31e5e640] mmco: unref short failure
[h264 @ 0x562129eb7840] mmco: unref short failure
[h264 @ 0x56212915b480] mmco: unref short failure
[h264 @ 0x562128cfb900] mmco: unref short failure
[h264 @ 0x5621326af1c0] mmco: unref short failure
[h264 @ 0x56025e326080] mmco: unref short failure
[h264 @ 0x555a30810480] mmco: unref short failure
[h264 @ 0x555a30810480] mmco: unref short failure
[h264 @ 0x555a30810480] mmco: unref short failure
[h264 @ 0x555a30810480] mmco: unref short failure
[h264 @ 0x56025f21a840] mmco: unref short failure
 40%|████      | 778/1945 [3:25:32<15:21:43, 47.39s/it][h264 @ 0x562128f64880] mmco: unref short failure
[h264 @ 0x562128f64880] mmco: unref short failure
[h264 @ 0x562128f64880] mmco: unref short failure
[h264 @ 0x562128f64880] mmco: unref short failure
[h264 @ 0x5621296f7bc0] mmco: unref short failure
[h264 @ 0x5621296f7bc0] mmco: unref short failure
 40%|████      | 779/1945 [3:25:38<11:20:49, 35.03s/it][h264 @ 0x555a30678c00] mmco: unref short failure
[h264 @ 0x555a30678c00] mmco: unref short failure
[h264 @ 0x555a30bd8980] mmco: unref short failure
[h264 @ 0x555a30bd8980] mmco: unref short failure
 40%|████      | 780/1945 [3:25:45<8:39:16, 26.74s/it] [h264 @ 0x56025af66940] mmco: unref short failure
[h264 @ 0x56025af66940] mmco: unref short failure
[h264 @ 0x56025af66940] mmco: unref short failure
[h264 @ 0x56025af66940] mmco: unref short failure
 40%|████      | 781/1945 [3:25:52<6:43:05, 20.78s/it] 40%|████      | 782/1945 [3:25:59<5:25:20, 16.78s/it][h264 @ 0x56212c820600] mmco: unref short failure
[h264 @ 0x56025b99b000] mmco: unref short failure
[h264 @ 0x56025b99b000] mmco: unref short failure
[h264 @ 0x560a3031b340] mmco: unref short failure
[h264 @ 0x560a3031b340] mmco: unref short failure
 40%|████      | 783/1945 [3:26:07<4:30:52, 13.99s/it][h264 @ 0x562128e68c40] mmco: unref short failure
[h264 @ 0x562128e68c40] mmco: unref short failure
 40%|████      | 784/1945 [3:26:14<3:50:05, 11.89s/it][h264 @ 0x56025e545fc0] mmco: unref short failure
 40%|████      | 785/1945 [3:26:21<3:23:57, 10.55s/it][h264 @ 0x555a31b38200] mmco: unref short failure
[h264 @ 0x560a2c67f900] mmco: unref short failure
[h264 @ 0x56025d8bdec0] mmco: unref short failure
[h264 @ 0x555a34789140] mmco: unref short failure
[h264 @ 0x555a34789140] mmco: unref short failure
[h264 @ 0x555a34789140] mmco: unref short failure
[h264 @ 0x555a34789140] mmco: unref short failure
[h264 @ 0x555a317d5a00] mmco: unref short failure
[h264 @ 0x555a317d5a00] mmco: unref short failure
[h264 @ 0x56212ce46e00] mmco: unref short failure
[h264 @ 0x56212ce46e00] mmco: unref short failure
[h264 @ 0x555a30bcf700] mmco: unref short failure
[h264 @ 0x56025d7fa700] mmco: unref short failure
[h264 @ 0x56025d7fa700] mmco: unref short failure
[h264 @ 0x560a2f68ba80] mmco: unref short failure
[h264 @ 0x560a2f68ba80] mmco: unref short failure
[h264 @ 0x560262085000] mmco: unref short failure
[h264 @ 0x560262085000] mmco: unref short failure
[h264 @ 0x560a3a111ec0] mmco: unref short failure
[h264 @ 0x56212ffa9400] mmco: unref short failure
[h264 @ 0x555a3035e380] mmco: unref short failure
[h264 @ 0x555a3035e380] mmco: unref short failure
 40%|████      | 786/1945 [3:27:24<8:24:54, 26.14s/it] 40%|████      | 787/1945 [3:27:30<6:29:52, 20.20s/it] 41%|████      | 788/1945 [3:27:38<5:15:36, 16.37s/it][h264 @ 0x555a3060ca40] mmco: unref short failure
[h264 @ 0x555a3060ca40] mmco: unref short failure
[h264 @ 0x560a374cf240] mmco: unref short failure
[h264 @ 0x560a374cf240] mmco: unref short failure
[h264 @ 0x560a374cf240] mmco: unref short failure
[h264 @ 0x560a374cf240] mmco: unref short failure
[h264 @ 0x560a374cf240] mmco: unref short failure
[h264 @ 0x560a374cf240] mmco: unref short failure
 41%|████      | 789/1945 [3:27:45<4:21:19, 13.56s/it][h264 @ 0x560261c89240] mmco: unref short failure
[h264 @ 0x560261c89240] mmco: unref short failure
[h264 @ 0x560a2f700a40] mmco: unref short failure
[h264 @ 0x555a30599b80] mmco: unref short failure
[h264 @ 0x555a30599b80] mmco: unref short failure
 41%|████      | 790/1945 [3:27:52<3:45:55, 11.74s/it][h264 @ 0x560a31f05340] mmco: unref short failure
[h264 @ 0x560a31f05340] mmco: unref short failure
[h264 @ 0x56025ca6b100] mmco: unref short failure
[h264 @ 0x56025ca6b100] mmco: unref short failure
 41%|████      | 791/1945 [3:28:00<3:21:15, 10.46s/it] 41%|████      | 792/1945 [3:28:08<3:07:33,  9.76s/it][h264 @ 0x5602635d2b40] mmco: unref short failure
[h264 @ 0x5602635d2b40] mmco: unref short failure
[h264 @ 0x5621327fa2c0] mmco: unref short failure
 41%|████      | 793/1945 [3:28:15<2:51:16,  8.92s/it][h264 @ 0x560a399a7980] mmco: unref short failure
[h264 @ 0x560a399a7980] mmco: unref short failure
[h264 @ 0x555a31c94fc0] mmco: unref short failure
[h264 @ 0x555a31c94fc0] mmco: unref short failure
[h264 @ 0x5621299d8400] mmco: unref short failure
[h264 @ 0x56212be68c00] mmco: unref short failure
[h264 @ 0x56212be68c00] mmco: unref short failure
[h264 @ 0x56212ba2da40] mmco: unref short failure
[h264 @ 0x56212ba2da40] mmco: unref short failure
[h264 @ 0x56212ba2d740] mmco: unref short failure
[h264 @ 0x56212ba2d740] mmco: unref short failure
[h264 @ 0x555a36c23040] mmco: unref short failure
[h264 @ 0x555a36c23040] mmco: unref short failure
[h264 @ 0x56025ba60f00] mmco: unref short failure
[h264 @ 0x5602632bd500] mmco: unref short failure
[h264 @ 0x56212fe7e940] mmco: unref short failure
[h264 @ 0x555a3a055a40] mmco: unref short failure
[h264 @ 0x56212a9b0cc0] mmco: unref short failure
[h264 @ 0x56212a9b0cc0] mmco: unref short failure
[h264 @ 0x56025f76aac0] mmco: unref short failure
[h264 @ 0x56025f76aac0] mmco: unref short failure
[h264 @ 0x56212bd97140] mmco: unref short failure
[h264 @ 0x56212bd97140] mmco: unref short failure
[h264 @ 0x555a392bd880] mmco: unref short failure
[h264 @ 0x555a392bd880] mmco: unref short failure
[h264 @ 0x555a30b336c0] mmco: unref short failure
[h264 @ 0x555a34c6b4c0] mmco: unref short failure
[h264 @ 0x555a34c6b4c0] mmco: unref short failure
[h264 @ 0x555a34c6b4c0] mmco: unref short failure
[h264 @ 0x555a34c6b4c0] mmco: unref short failure
 41%|████      | 794/1945 [3:29:27<8:57:58, 28.04s/it][h264 @ 0x56212d386900] mmco: unref short failure
[h264 @ 0x560a3992ce80] mmco: unref short failure
[h264 @ 0x560a3992ce80] mmco: unref short failure
[h264 @ 0x56212cf5a040] mmco: unref short failure
 41%|████      | 795/1945 [3:29:35<7:01:32, 21.99s/it] 41%|████      | 796/1945 [3:29:43<5:41:28, 17.83s/it][h264 @ 0x56025cf9c880] mmco: unref short failure
[h264 @ 0x560a2d72c940] mmco: unref short failure
[h264 @ 0x560a2d72c940] mmco: unref short failure
not have audios 8-qwaveiHMM.3
 41%|████      | 797/1945 [3:29:50<4:37:11, 14.49s/it] 41%|████      | 798/1945 [3:29:57<3:52:39, 12.17s/it][h264 @ 0x555a3c4b13c0] mmco: unref short failure
[h264 @ 0x555a3c4b13c0] mmco: unref short failure
[h264 @ 0x56025bb75940] mmco: unref short failure
 41%|████      | 799/1945 [3:30:05<3:28:21, 10.91s/it]09/09/2024 00:11:26 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 2.759246349334717, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04000583291053772, 'loss_ret%tv%ta--finetune_area/loss_area': 1.1422529220581055, 'loss_ret%tv%ta--finetune_area/total_loss': 3.941505193710327}
[h264 @ 0x555a32c50880] mmco: unref short failure
[h264 @ 0x555a32c50880] mmco: unref short failure
[h264 @ 0x555a32c50880] mmco: unref short failure
[h264 @ 0x56212cf7b940] mmco: unref short failure
[h264 @ 0x56212cf7b940] mmco: unref short failure
[h264 @ 0x56212cf7b940] mmco: unref short failure
[h264 @ 0x56212cf7b940] mmco: unref short failure
 41%|████      | 800/1945 [3:30:13<3:12:58, 10.11s/it][h264 @ 0x555a30857f00] mmco: unref short failure
[h264 @ 0x555a30857f00] mmco: unref short failure
[h264 @ 0x555a30857f00] mmco: unref short failure
[h264 @ 0x555a30857f00] mmco: unref short failure
[h264 @ 0x56212c7d5780] mmco: unref short failure
[h264 @ 0x56212c7d5780] mmco: unref short failure
[h264 @ 0x560a33a95480] mmco: unref short failure
 41%|████      | 801/1945 [3:30:21<2:58:59,  9.39s/it][h264 @ 0x562133c91180] mmco: unref short failure
[h264 @ 0x562133c91180] mmco: unref short failure
[h264 @ 0x555a3a773700] mmco: unref short failure
[h264 @ 0x555a3a773700] mmco: unref short failure
[h264 @ 0x56025cf7a940] mmco: unref short failure
[h264 @ 0x56025cf7a940] mmco: unref short failure
[h264 @ 0x560a2b57c040] mmco: unref short failure
[h264 @ 0x560a2b57c040] mmco: unref short failure
[h264 @ 0x560a2b57c040] mmco: unref short failure
[h264 @ 0x56026d2d7400] mmco: unref short failure
[h264 @ 0x56026d2d7400] mmco: unref short failure
[h264 @ 0x56026d2d7400] mmco: unref short failure
[h264 @ 0x56026d2d7400] mmco: unref short failure
[h264 @ 0x560a36622380] mmco: unref short failure
[h264 @ 0x560a36622380] mmco: unref short failure
[h264 @ 0x562127c04b00] mmco: unref short failure
[h264 @ 0x562127c04b00] mmco: unref short failure
[h264 @ 0x560262a63700] mmco: unref short failure
[h264 @ 0x560262a63700] mmco: unref short failure
[h264 @ 0x560264608d80] mmco: unref short failure
[h264 @ 0x560264608d80] mmco: unref short failure
[h264 @ 0x560a303eb240] mmco: unref short failure
[h264 @ 0x560a303eb240] mmco: unref short failure
[h264 @ 0x555a3ec38b00] mmco: unref short failure
 41%|████      | 802/1945 [3:31:28<8:28:27, 26.69s/it] 41%|████▏     | 803/1945 [3:31:35<6:34:31, 20.73s/it] 41%|████▏     | 804/1945 [3:31:43<5:21:52, 16.93s/it][h264 @ 0x560a31422180] mmco: unref short failure
[h264 @ 0x560a31422180] mmco: unref short failure
[h264 @ 0x560a39364400] mmco: unref short failure
 41%|████▏     | 805/1945 [3:31:50<4:26:54, 14.05s/it][h264 @ 0x555a36451280] mmco: unref short failure
[h264 @ 0x555a36451280] mmco: unref short failure
[h264 @ 0x555a36451280] mmco: unref short failure
[h264 @ 0x555a36451280] mmco: unref short failure
[h264 @ 0x560a2f59f840] mmco: unref short failure
[h264 @ 0x560a2f59f840] mmco: unref short failure
 41%|████▏     | 806/1945 [3:31:58<3:55:09, 12.39s/it][h264 @ 0x555a3acc6dc0] mmco: unref short failure
[h264 @ 0x555a3acc6dc0] mmco: unref short failure
 41%|████▏     | 807/1945 [3:32:06<3:28:31, 10.99s/it] 42%|████▏     | 808/1945 [3:32:14<3:10:04, 10.03s/it][h264 @ 0x5621364534c0] mmco: unref short failure
[h264 @ 0x5621364534c0] mmco: unref short failure
[h264 @ 0x5621364534c0] mmco: unref short failure
[h264 @ 0x5621364534c0] mmco: unref short failure
 42%|████▏     | 809/1945 [3:32:21<2:52:03,  9.09s/it][h264 @ 0x560a35658380] mmco: unref short failure
[h264 @ 0x555a44c36e80] mmco: unref short failure
[h264 @ 0x555a44c36e80] mmco: unref short failure
[h264 @ 0x555a44c36e80] mmco: unref short failure
[h264 @ 0x555a44c36e80] mmco: unref short failure
[h264 @ 0x555a3182cc00] mmco: unref short failure
[h264 @ 0x555a3182cc00] mmco: unref short failure
[h264 @ 0x56213446a880] mmco: unref short failure
[h264 @ 0x56212afea600] mmco: unref short failure
[h264 @ 0x56212afea600] mmco: unref short failure
[h264 @ 0x5621290114c0] mmco: unref short failure
[h264 @ 0x5621290114c0] mmco: unref short failure
[h264 @ 0x560261f65300] mmco: unref short failure
[h264 @ 0x560a2f68d7c0] mmco: unref short failure
[h264 @ 0x560a2f68d7c0] mmco: unref short failure
[h264 @ 0x555a3ef50d40] mmco: unref short failure
[h264 @ 0x555a3ef50d40] mmco: unref short failure
[h264 @ 0x56212b886580] mmco: unref short failure
[h264 @ 0x56212b886580] mmco: unref short failure
[h264 @ 0x56212b886580] mmco: unref short failure
[h264 @ 0x56212b886580] mmco: unref short failure
[h264 @ 0x560a34940e80] mmco: unref short failure
[h264 @ 0x560a34940e80] mmco: unref short failure
[h264 @ 0x560a34940e80] mmco: unref short failure
[h264 @ 0x560a34940e80] mmco: unref short failure
[h264 @ 0x562136453280] mmco: unref short failure
[h264 @ 0x560a37e12600] mmco: unref short failure
[h264 @ 0x560a37e12600] mmco: unref short failure
not have audios ua_Kowav7hg.20
[h264 @ 0x562132068d40] mmco: unref short failure
[h264 @ 0x562132068d40] mmco: unref short failure
[h264 @ 0x56025ec42f00] mmco: unref short failure
[h264 @ 0x56025ec42f00] mmco: unref short failure
 42%|████▏     | 810/1945 [3:33:27<8:14:12, 26.13s/it][h264 @ 0x560a3b266900] mmco: unref short failure
[h264 @ 0x560a3b266900] mmco: unref short failure
[h264 @ 0x560a3b266900] mmco: unref short failure
[h264 @ 0x560a3b266900] mmco: unref short failure
 42%|████▏     | 811/1945 [3:33:34<6:27:13, 20.49s/it][h264 @ 0x560261f67180] mmco: unref short failure
[h264 @ 0x560261f67180] mmco: unref short failure
 42%|████▏     | 812/1945 [3:33:42<5:14:21, 16.65s/it][h264 @ 0x560a311a3800] mmco: unref short failure
[h264 @ 0x560a311a3800] mmco: unref short failure
 42%|████▏     | 813/1945 [3:33:50<4:28:41, 14.24s/it] 42%|████▏     | 814/1945 [3:33:57<3:45:01, 11.94s/it][h264 @ 0x56025f529780] mmco: unref short failure
 42%|████▏     | 815/1945 [3:34:04<3:17:24, 10.48s/it][h264 @ 0x555a2fab82c0] mmco: unref short failure
 42%|████▏     | 816/1945 [3:34:12<3:04:29,  9.80s/it] 42%|████▏     | 817/1945 [3:34:21<3:00:23,  9.60s/it][h264 @ 0x555a3ef22580] mmco: unref short failure
[h264 @ 0x555a3ef22580] mmco: unref short failure
[h264 @ 0x560269bbb4c0] mmco: unref short failure
[h264 @ 0x560a390e9240] mmco: unref short failure
[h264 @ 0x560a390e9240] mmco: unref short failure
[h264 @ 0x560a35650d80] mmco: unref short failure
[h264 @ 0x560a35650d80] mmco: unref short failure
[h264 @ 0x56025e2f6c80] mmco: unref short failure
[h264 @ 0x56025e2f6c80] mmco: unref short failure
[h264 @ 0x56025e2f6c80] mmco: unref short failure
[h264 @ 0x555a41e0ed80] mmco: unref short failure
[h264 @ 0x555a41e0ed80] mmco: unref short failure
[h264 @ 0x56025f7e6f00] mmco: unref short failure
[h264 @ 0x56025f7e6f00] mmco: unref short failure
[h264 @ 0x56213ab04480] mmco: unref short failure
[h264 @ 0x56213ab04480] mmco: unref short failure
[h264 @ 0x56213ab04480] mmco: unref short failure
[h264 @ 0x555a30a5cdc0] mmco: unref short failure
[h264 @ 0x555a30a5cdc0] mmco: unref short failure
[h264 @ 0x555a30a5cdc0] mmco: unref short failure
[h264 @ 0x555a30a5cdc0] mmco: unref short failure
[h264 @ 0x560263bb8400] mmco: unref short failure
[h264 @ 0x560263bb8400] mmco: unref short failure
[h264 @ 0x560a3010b3c0] mmco: unref short failure
[h264 @ 0x560a3010b3c0] mmco: unref short failure
 42%|████▏     | 818/1945 [3:35:31<8:35:40, 27.45s/it][h264 @ 0x5621374a8d40] mmco: unref short failure
 42%|████▏     | 819/1945 [3:35:38<6:45:03, 21.58s/it] 42%|████▏     | 820/1945 [3:35:46<5:24:31, 17.31s/it][h264 @ 0x560a38bdb600] mmco: unref short failure
[h264 @ 0x560a38bdb600] mmco: unref short failure
[h264 @ 0x555a3eb98bc0] mmco: unref short failure
 42%|████▏     | 821/1945 [3:35:53<4:26:43, 14.24s/it][h264 @ 0x56026735c140] mmco: unref short failure
[h264 @ 0x56026735c140] mmco: unref short failure
[h264 @ 0x56212b2cd740] mmco: unref short failure
[h264 @ 0x56212b2cd740] mmco: unref short failure
 42%|████▏     | 822/1945 [3:35:59<3:43:08, 11.92s/it][h264 @ 0x56025f6e8c00] mmco: unref short failure
[h264 @ 0x56025f6e8c00] mmco: unref short failure
[h264 @ 0x555a42d5ad80] mmco: unref short failure
 42%|████▏     | 823/1945 [3:36:06<3:11:37, 10.25s/it][h264 @ 0x555a3066ac80] mmco: unref short failure
 42%|████▏     | 824/1945 [3:36:13<2:53:36,  9.29s/it][h264 @ 0x56026498ee40] mmco: unref short failure
[h264 @ 0x56026498ee40] mmco: unref short failure
[h264 @ 0x56026498ee40] mmco: unref short failure
[h264 @ 0x56026498ee40] mmco: unref short failure
[h264 @ 0x56025c1081c0] mmco: unref short failure
[h264 @ 0x5602626ed740] mmco: unref short failure
[h264 @ 0x5602626ed740] mmco: unref short failure
 42%|████▏     | 825/1945 [3:36:20<2:41:00,  8.63s/it][h264 @ 0x560a3b6df680] mmco: unref short failure
[h264 @ 0x560a3b6df680] mmco: unref short failure
[h264 @ 0x560260f0e440] mmco: unref short failure
[h264 @ 0x56212b3a81c0] mmco: unref short failure
[h264 @ 0x56212b3a81c0] mmco: unref short failure
[h264 @ 0x56213902bc40] mmco: unref short failure
[h264 @ 0x56213902bc40] mmco: unref short failure
[h264 @ 0x56213902bc40] mmco: unref short failure
[h264 @ 0x56213902bc40] mmco: unref short failure
[h264 @ 0x560266cf6380] mmco: unref short failure
[h264 @ 0x560266cf6380] mmco: unref short failure
[h264 @ 0x555a2f996f40] mmco: unref short failure
[h264 @ 0x555a2f996f40] mmco: unref short failure
[h264 @ 0x56213b473bc0] mmco: unref short failure
[h264 @ 0x560a3570f800] mmco: unref short failure
[h264 @ 0x560a3570f800] mmco: unref short failure
[h264 @ 0x56212be64500] mmco: unref short failure
[h264 @ 0x56212be64500] mmco: unref short failure
[h264 @ 0x5602692e8e40] mmco: unref short failure
[h264 @ 0x5602692e8e40] mmco: unref short failure
[h264 @ 0x560a4296c080] mmco: unref short failure
[h264 @ 0x560a4296c080] mmco: unref short failure
[h264 @ 0x5602607d8500] mmco: unref short failure
[h264 @ 0x5602607d8500] mmco: unref short failure
 42%|████▏     | 826/1945 [3:37:28<8:11:42, 26.37s/it][h264 @ 0x56025d6f3cc0] mmco: unref short failure
[h264 @ 0x56025d6f3cc0] mmco: unref short failure
 43%|████▎     | 827/1945 [3:37:35<6:27:38, 20.80s/it][h264 @ 0x555a47e91ec0] mmco: unref short failure
[h264 @ 0x555a47e91ec0] mmco: unref short failure
[h264 @ 0x5621395b7400] mmco: unref short failure
[h264 @ 0x560a40717dc0] mmco: unref short failure
[h264 @ 0x560a40717dc0] mmco: unref short failure
 43%|████▎     | 828/1945 [3:37:43<5:13:42, 16.85s/it][h264 @ 0x56213236cf00] mmco: unref short failure
[h264 @ 0x56213236cf00] mmco: unref short failure
 43%|████▎     | 829/1945 [3:37:49<4:14:27, 13.68s/it] 43%|████▎     | 830/1945 [3:37:56<3:37:46, 11.72s/it][h264 @ 0x56025f328a80] mmco: unref short failure
[h264 @ 0x555a3ebf2d40] mmco: unref short failure
[h264 @ 0x555a3ebf2d40] mmco: unref short failure
 43%|████▎     | 831/1945 [3:38:04<3:15:28, 10.53s/it][h264 @ 0x560a37254e80] mmco: unref short failure
[h264 @ 0x560a37254e80] mmco: unref short failure
 43%|████▎     | 832/1945 [3:38:11<2:55:35,  9.47s/it][h264 @ 0x562132993800] mmco: unref short failure
[h264 @ 0x555a39828340] mmco: unref short failure
[h264 @ 0x555a39828340] mmco: unref short failure
 43%|████▎     | 833/1945 [3:38:18<2:39:48,  8.62s/it][h264 @ 0x560267f04200] mmco: unref short failure
[h264 @ 0x560267f04200] mmco: unref short failure
[h264 @ 0x555a2fbf7f40] mmco: unref short failure
[h264 @ 0x555a2fbf7f40] mmco: unref short failure
[h264 @ 0x555a2fbf7f40] mmco: unref short failure
[h264 @ 0x555a2fbf7f40] mmco: unref short failure
[h264 @ 0x555a314d1580] mmco: unref short failure
[h264 @ 0x555a314d1580] mmco: unref short failure
[h264 @ 0x56212a72dcc0] mmco: unref short failure
[h264 @ 0x56212a72dcc0] mmco: unref short failure
[h264 @ 0x560a435a4880] mmco: unref short failure
[h264 @ 0x560a435a4880] mmco: unref short failure
[h264 @ 0x56212e82d2c0] mmco: unref short failure
[h264 @ 0x560a3a762380] mmco: unref short failure
[h264 @ 0x560a3a762380] mmco: unref short failure
[h264 @ 0x560a3a762380] mmco: unref short failure
[h264 @ 0x560a3a762380] mmco: unref short failure
[h264 @ 0x560260e19940] mmco: unref short failure
[h264 @ 0x560260e19940] mmco: unref short failure
[h264 @ 0x560260e19940] mmco: unref short failure
[h264 @ 0x560260e19940] mmco: unref short failure
[h264 @ 0x56025edd92c0] mmco: unref short failure
 43%|████▎     | 834/1945 [3:39:23<7:55:36, 25.69s/it] 43%|████▎     | 835/1945 [3:39:31<6:12:28, 20.13s/it] 43%|████▎     | 836/1945 [3:39:38<5:01:45, 16.33s/it][h264 @ 0x560a4213a340] mmco: unref short failure
[h264 @ 0x560a4213a340] mmco: unref short failure
[h264 @ 0x560a4213a340] mmco: unref short failure
[h264 @ 0x560a4213a340] mmco: unref short failure
[h264 @ 0x555a32227e40] mmco: unref short failure
[h264 @ 0x555a32227e40] mmco: unref short failure
[h264 @ 0x555a32227e40] mmco: unref short failure
 43%|████▎     | 837/1945 [3:39:45<4:11:14, 13.60s/it][h264 @ 0x562141b88600] mmco: unref short failure
[h264 @ 0x562141b88600] mmco: unref short failure
[h264 @ 0x562129b83c00] mmco: unref short failure
[h264 @ 0x562129b83c00] mmco: unref short failure
[h264 @ 0x562129b83c00] mmco: unref short failure
[h264 @ 0x562129b83c00] mmco: unref short failure
[h264 @ 0x562129b83c00] mmco: unref short failure
[h264 @ 0x562129b83c00] mmco: unref short failure
[h264 @ 0x560269bbb280] mmco: unref short failure
 43%|████▎     | 838/1945 [3:39:53<3:38:43, 11.85s/it][h264 @ 0x5621291a0940] mmco: unref short failure
[h264 @ 0x555a468db680] mmco: unref short failure
[h264 @ 0x555a468db680] mmco: unref short failure
 43%|████▎     | 839/1945 [3:40:00<3:13:36, 10.50s/it] 43%|████▎     | 840/1945 [3:40:08<2:58:37,  9.70s/it][h264 @ 0x555a39808e80] mmco: unref short failure
[h264 @ 0x555a39808e80] mmco: unref short failure
 43%|████▎     | 841/1945 [3:40:16<2:47:00,  9.08s/it][h264 @ 0x5602627414c0] mmco: unref short failure
[h264 @ 0x5602627414c0] mmco: unref short failure
[h264 @ 0x56025e951e80] mmco: unref short failure
[h264 @ 0x56025e951e80] mmco: unref short failure
[h264 @ 0x56025e52c940] mmco: unref short failure
[h264 @ 0x56025e52c940] mmco: unref short failure
[h264 @ 0x560260cc5c00] mmco: unref short failure
[h264 @ 0x560a3362b440] mmco: unref short failure
[h264 @ 0x555a35299000] mmco: unref short failure
[h264 @ 0x555a3b4fdf40] mmco: unref short failure
[h264 @ 0x555a35299000] mmco: unref short failure
[h264 @ 0x555a35299000] mmco: unref short failure
[h264 @ 0x56212ad48b40] mmco: unref short failure
[h264 @ 0x56212ad48b40] mmco: unref short failure
[h264 @ 0x560a3a124cc0] mmco: unref short failure
[h264 @ 0x560a3a124cc0] mmco: unref short failure
[h264 @ 0x560a30f97800] mmco: unref short failure
[h264 @ 0x56026f36a800] mmco: unref short failure
[h264 @ 0x560a3cc574c0] mmco: unref short failure
[h264 @ 0x56213d79ef00] mmco: unref short failure
[h264 @ 0x56213d79ef00] mmco: unref short failure
[h264 @ 0x560a33e89cc0] mmco: unref short failure
[h264 @ 0x5602613f1bc0] mmco: unref short failure
 43%|████▎     | 842/1945 [3:41:30<8:48:12, 28.73s/it][h264 @ 0x555a348b1dc0] mmco: unref short failure
[h264 @ 0x555a348b1dc0] mmco: unref short failure
[h264 @ 0x555a48a2a100] mmco: unref short failure
[h264 @ 0x555a48a2a100] mmco: unref short failure
[h264 @ 0x555a48a2a100] mmco: unref short failure
[h264 @ 0x555a48a2a100] mmco: unref short failure
 43%|████▎     | 843/1945 [3:41:37<6:45:03, 22.05s/it][h264 @ 0x562129eefc80] mmco: unref short failure
 43%|████▎     | 844/1945 [3:41:44<5:23:56, 17.65s/it][h264 @ 0x560264339500] mmco: unref short failure
 43%|████▎     | 845/1945 [3:41:51<4:24:33, 14.43s/it] 43%|████▎     | 846/1945 [3:41:58<3:40:30, 12.04s/it][h264 @ 0x555a3ebcae40] mmco: unref short failure
[h264 @ 0x555a3ebcae40] mmco: unref short failure
 44%|████▎     | 847/1945 [3:42:05<3:13:13, 10.56s/it][h264 @ 0x56025d86c140] mmco: unref short failure
[h264 @ 0x56025d86c140] mmco: unref short failure
[h264 @ 0x56026f33e2c0] mmco: unref short failure
[h264 @ 0x56026f33e2c0] mmco: unref short failure
[h264 @ 0x555a2fbf85c0] mmco: unref short failure
[h264 @ 0x555a2fbf85c0] mmco: unref short failure
 44%|████▎     | 848/1945 [3:42:11<2:50:35,  9.33s/it][h264 @ 0x555a31aa5b80] mmco: unref short failure
[h264 @ 0x555a31aa5b80] mmco: unref short failure
[h264 @ 0x560266f5e680] mmco: unref short failure
[h264 @ 0x560266f5e680] mmco: unref short failure
 44%|████▎     | 849/1945 [3:42:18<2:35:55,  8.54s/it][h264 @ 0x56026f351d00] mmco: unref short failure
[h264 @ 0x560a336920c0] mmco: unref short failure
[h264 @ 0x56213559c880] mmco: unref short failure
[h264 @ 0x56025e952340] mmco: unref short failure
[h264 @ 0x560a40ebf9c0] mmco: unref short failure
[h264 @ 0x560a40ebf9c0] mmco: unref short failure
[h264 @ 0x560268062680] mmco: unref short failure
[h264 @ 0x56025af85740] mmco: unref short failure
[h264 @ 0x56025af85740] mmco: unref short failure
[h264 @ 0x56025af85740] mmco: unref short failure
[h264 @ 0x56025af85740] mmco: unref short failure
[h264 @ 0x560272258700] mmco: unref short failure
[h264 @ 0x560272ff0340] mmco: unref short failure
[h264 @ 0x56212e4a4ec0] mmco: unref short failure
[h264 @ 0x560a3d716800] mmco: unref short failure
[h264 @ 0x560a3d716800] mmco: unref short failure
[h264 @ 0x560275c77ac0] mmco: unref short failure
[h264 @ 0x555a465b23c0] mmco: unref short failure
[h264 @ 0x560a432c3140] mmco: unref short failure
[h264 @ 0x560a432c3140] mmco: unref short failure
[h264 @ 0x56213dffb180] mmco: unref short failure
[h264 @ 0x56213dffb180] mmco: unref short failure
[h264 @ 0x56026ae2ad80] mmco: unref short failure
[h264 @ 0x56026ae2ad80] mmco: unref short failure
[h264 @ 0x560272b57580] mmco: unref short failure
[h264 @ 0x560a30ef4fc0] mmco: unref short failure
[h264 @ 0x560a30ef4fc0] mmco: unref short failure
[h264 @ 0x5602605bd9c0] mmco: unref short failure
[h264 @ 0x560261be4040] mmco: unref short failure
09/09/2024 00:24:39 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 3.101388454437256, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.04415842145681381, 'loss_ret%tv%ta--finetune_area/loss_area': 1.1577115058898926, 'loss_ret%tv%ta--finetune_area/total_loss': 4.303258419036865}
[h264 @ 0x560a2ead5780] mmco: unref short failure
[h264 @ 0x56212d0684c0] mmco: unref short failure
[h264 @ 0x56212d0684c0] mmco: unref short failure
 44%|████▎     | 850/1945 [3:43:25<7:55:47, 26.07s/it][h264 @ 0x560a4184c200] mmco: unref short failure
[h264 @ 0x562133775e40] mmco: unref short failure
[h264 @ 0x562133775e40] mmco: unref short failure
[h264 @ 0x560a43e11d40] mmco: unref short failure
[h264 @ 0x560a43e11d40] mmco: unref short failure
 44%|████▍     | 851/1945 [3:43:32<6:10:39, 20.33s/it] 44%|████▍     | 852/1945 [3:43:39<5:00:23, 16.49s/it] 44%|████▍     | 853/1945 [3:43:46<4:08:29, 13.65s/it] 44%|████▍     | 854/1945 [3:43:54<3:35:45, 11.87s/it] 44%|████▍     | 855/1945 [3:44:01<3:09:57, 10.46s/it][h264 @ 0x560272f04500] mmco: unref short failure
[h264 @ 0x560272f04500] mmco: unref short failure
 44%|████▍     | 856/1945 [3:44:08<2:47:55,  9.25s/it][h264 @ 0x560a3e4365c0] mmco: unref short failure
[h264 @ 0x560a3e4365c0] mmco: unref short failure
[h264 @ 0x560271e02f80] mmco: unref short failure
[h264 @ 0x560271e02f80] mmco: unref short failure
[h264 @ 0x560a41506fc0] mmco: unref short failure
[h264 @ 0x560a41506fc0] mmco: unref short failure
[h264 @ 0x560a4296b880] mmco: unref short failure
[h264 @ 0x560a4296b880] mmco: unref short failure
[h264 @ 0x56213e175c00] mmco: unref short failure
 44%|████▍     | 857/1945 [3:44:15<2:38:22,  8.73s/it][h264 @ 0x562140b34a00] mmco: unref short failure
[h264 @ 0x56213659f7c0] mmco: unref short failure
[h264 @ 0x56213659f7c0] mmco: unref short failure
[h264 @ 0x56026c94fa40] mmco: unref short failure
[h264 @ 0x56026c94fa40] mmco: unref short failure
[h264 @ 0x56213ea85d80] mmco: unref short failure
[h264 @ 0x56213ea85d80] mmco: unref short failure
[h264 @ 0x5621291a6a40] mmco: unref short failure
[h264 @ 0x562143b9bc40] mmco: unref short failure
[h264 @ 0x562143b9bc40] mmco: unref short failure
[h264 @ 0x560262e0c4c0] mmco: unref short failure
[h264 @ 0x56213b868e80] mmco: unref short failure
[h264 @ 0x56213b868e80] mmco: unref short failure
[h264 @ 0x555a40ed9c40] mmco: unref short failure
[h264 @ 0x56026f385900] mmco: unref short failure
[h264 @ 0x560a475c6f40] mmco: unref short failure
[h264 @ 0x560a475c6f40] mmco: unref short failure
[h264 @ 0x555a3ca89000] mmco: unref short failure
[h264 @ 0x555a45f7fbc0] mmco: unref short failure
[h264 @ 0x56213c4b5000] mmco: unref short failure
[h264 @ 0x56213c4b5000] mmco: unref short failure
[h264 @ 0x555a3ca27d00] mmco: unref short failure
[h264 @ 0x555a3a6d7280] mmco: unref short failure
[h264 @ 0x562139e28300] mmco: unref short failure
[h264 @ 0x562139e28300] mmco: unref short failure
[h264 @ 0x562139e28300] mmco: unref short failure
[h264 @ 0x562139e28300] mmco: unref short failure
 44%|████▍     | 858/1945 [3:45:20<7:42:32, 25.53s/it][h264 @ 0x560a413de780] mmco: unref short failure
[h264 @ 0x560a413de780] mmco: unref short failure
 44%|████▍     | 859/1945 [3:45:31<6:22:50, 21.15s/it][h264 @ 0x555a40ff4280] mmco: unref short failure
 44%|████▍     | 860/1945 [3:45:40<5:15:31, 17.45s/it][h264 @ 0x56212b4f6b00] mmco: unref short failure
[h264 @ 0x555a3a976780] mmco: unref short failure
[h264 @ 0x5621286d79c0] mmco: unref short failure
 44%|████▍     | 861/1945 [3:45:47<4:21:23, 14.47s/it][h264 @ 0x562144125240] mmco: unref short failure
 44%|████▍     | 862/1945 [3:45:54<3:41:16, 12.26s/it] 44%|████▍     | 863/1945 [3:46:01<3:13:14, 10.72s/it][h264 @ 0x562138ac7400] mmco: unref short failure
[h264 @ 0x562138ac7400] mmco: unref short failure
[h264 @ 0x562138ac7400] mmco: unref short failure
[h264 @ 0x562138ac7400] mmco: unref short failure
 44%|████▍     | 864/1945 [3:46:09<2:54:07,  9.66s/it] 44%|████▍     | 865/1945 [3:46:16<2:39:58,  8.89s/it][h264 @ 0x56025e4c43c0] mmco: unref short failure
[h264 @ 0x56025e4c43c0] mmco: unref short failure
[h264 @ 0x560a3beb5ec0] mmco: unref short failure
[h264 @ 0x560a3beb5ec0] mmco: unref short failure
[h264 @ 0x555a478bae80] mmco: unref short failure
[h264 @ 0x56212db6b180] mmco: unref short failure
[h264 @ 0x560a3fbdc840] mmco: unref short failure
[h264 @ 0x560273e35800] mmco: unref short failure
[h264 @ 0x560273e35800] mmco: unref short failure
[h264 @ 0x560273e35800] mmco: unref short failure
[h264 @ 0x560273e35800] mmco: unref short failure
[h264 @ 0x555a4b5c3fc0] mmco: unref short failure
[h264 @ 0x56025e2877c0] mmco: unref short failure
[h264 @ 0x56025e2877c0] mmco: unref short failure
[h264 @ 0x56025e2877c0] mmco: unref short failure
[h264 @ 0x56025e2877c0] mmco: unref short failure
[h264 @ 0x560a3ffbe640] mmco: unref short failure
[h264 @ 0x560a3ffbe640] mmco: unref short failure
[h264 @ 0x56213f962bc0] mmco: unref short failure
[h264 @ 0x560270d6f500] mmco: unref short failure
[h264 @ 0x562139e23680] mmco: unref short failure
[h264 @ 0x562139e23680] mmco: unref short failure
[h264 @ 0x560a41773dc0] mmco: unref short failure
[h264 @ 0x560a41773dc0] mmco: unref short failure
[h264 @ 0x560276741180] mmco: unref short failure
 45%|████▍     | 866/1945 [3:47:23<7:52:52, 26.30s/it] 45%|████▍     | 867/1945 [3:47:30<6:12:38, 20.74s/it][h264 @ 0x56026817ae80] mmco: unref short failure
[h264 @ 0x56026817ae80] mmco: unref short failure
[h264 @ 0x56213dc465c0] mmco: unref short failure
[h264 @ 0x56213dc465c0] mmco: unref short failure
[h264 @ 0x5621388bb080] mmco: unref short failure
[h264 @ 0x560267464d00] mmco: unref short failure
 45%|████▍     | 868/1945 [3:47:43<5:26:39, 18.20s/it][h264 @ 0x56026516d000] mmco: unref short failure
[h264 @ 0x56026516d000] mmco: unref short failure
[h264 @ 0x560a32b63ac0] mmco: unref short failure
[h264 @ 0x560a3a35bb40] mmco: unref short failure
[h264 @ 0x560a3a35bb40] mmco: unref short failure
[h264 @ 0x560266ea7e40] mmco: unref short failure
 45%|████▍     | 869/1945 [3:47:50<4:29:36, 15.03s/it][h264 @ 0x56026582b580] mmco: unref short failure
[h264 @ 0x56026b1cce80] mmco: unref short failure
[h264 @ 0x56026b1cce80] mmco: unref short failure
[h264 @ 0x5602728ab500] mmco: unref short failure
[h264 @ 0x5602728ab500] mmco: unref short failure
[h264 @ 0x56025f4e32c0] mmco: unref short failure
[h264 @ 0x560a4706ce40] mmco: unref short failure
[h264 @ 0x560a4706ce40] mmco: unref short failure
[h264 @ 0x560a4706ce40] mmco: unref short failure
[h264 @ 0x560a4706ce40] mmco: unref short failure
 45%|████▍     | 870/1945 [3:47:59<3:57:20, 13.25s/it][h264 @ 0x5602724adfc0] mmco: unref short failure
 45%|████▍     | 871/1945 [3:48:07<3:26:34, 11.54s/it][h264 @ 0x560a3d65d980] mmco: unref short failure
[h264 @ 0x560a3d65d980] mmco: unref short failure
[h264 @ 0x560a41464b80] mmco: unref short failure
[h264 @ 0x560a41464b80] mmco: unref short failure
[h264 @ 0x56025e4d8100] mmco: unref short failure
[h264 @ 0x56025e4d8100] mmco: unref short failure
 45%|████▍     | 872/1945 [3:48:14<3:04:04, 10.29s/it] 45%|████▍     | 873/1945 [3:48:22<2:49:44,  9.50s/it][h264 @ 0x562127b16f40] mmco: unref short failure
[h264 @ 0x562127b16f40] mmco: unref short failure
[h264 @ 0x560a4706cc40] mmco: unref short failure
[h264 @ 0x560a3e5c0b00] mmco: unref short failure
[h264 @ 0x560a3e5c0b00] mmco: unref short failure
[h264 @ 0x56025f935b00] mmco: unref short failure
[h264 @ 0x5621285ccb00] mmco: unref short failure
[h264 @ 0x5621285ccb00] mmco: unref short failure
[h264 @ 0x56026081b680] mmco: unref short failure
[h264 @ 0x56026081b680] mmco: unref short failure
[h264 @ 0x560a2c4005c0] mmco: unref short failure
[h264 @ 0x560a2cff5f80] mmco: unref short failure
[h264 @ 0x560276740f40] mmco: unref short failure
[h264 @ 0x560276740f40] mmco: unref short failure
[h264 @ 0x560a44ebbd80] mmco: unref short failure
[h264 @ 0x560a44ebbd80] mmco: unref short failure
[h264 @ 0x560a44ebbd80] mmco: unref short failure
[h264 @ 0x560a44ebbd80] mmco: unref short failure
[h264 @ 0x560a44ebbd80] mmco: unref short failure
[h264 @ 0x560a44ebbd80] mmco: unref short failure
[h264 @ 0x560a44ebbd80] mmco: unref short failure
[h264 @ 0x560a44ebbd80] mmco: unref short failure
[h264 @ 0x56025a7449c0] mmco: unref short failure
[h264 @ 0x56025a7449c0] mmco: unref short failure
[h264 @ 0x560a43248600] mmco: unref short failure
[h264 @ 0x562147128840] mmco: unref short failure
[h264 @ 0x56025b2f8440] mmco: unref short failure
[h264 @ 0x56025b2f8440] mmco: unref short failure
[h264 @ 0x56025b2f8440] mmco: unref short failure
 45%|████▍     | 874/1945 [3:49:26<7:42:59, 25.94s/it][h264 @ 0x56027ac1c600] mmco: unref short failure
[h264 @ 0x56213d333780] mmco: unref short failure
[h264 @ 0x56213d333780] mmco: unref short failure
 45%|████▍     | 875/1945 [3:49:33<6:01:56, 20.30s/it][h264 @ 0x56212e14a940] mmco: unref short failure
[h264 @ 0x560a3c65f5c0] mmco: unref short failure
 45%|████▌     | 876/1945 [3:49:49<5:36:39, 18.90s/it][h264 @ 0x562147a14200] mmco: unref short failure
[h264 @ 0x562147a14200] mmco: unref short failure
 45%|████▌     | 877/1945 [3:49:56<4:35:13, 15.46s/it] 45%|████▌     | 878/1945 [3:50:03<3:49:38, 12.91s/it][h264 @ 0x56213de4f480] mmco: unref short failure
[h264 @ 0x56213de4f480] mmco: unref short failure
[h264 @ 0x56027487e600] mmco: unref short failure
[h264 @ 0x56027487e600] mmco: unref short failure
 45%|████▌     | 879/1945 [3:50:11<3:18:42, 11.18s/it] 45%|████▌     | 880/1945 [3:50:18<2:59:32, 10.11s/it] 45%|████▌     | 881/1945 [3:50:25<2:42:52,  9.19s/it][h264 @ 0x56026edb7c40] mmco: unref short failure
[h264 @ 0x555a32d85d00] mmco: unref short failure
[h264 @ 0x56213f802000] mmco: unref short failure
[h264 @ 0x56213f802000] mmco: unref short failure
[h264 @ 0x56213f802000] mmco: unref short failure
[h264 @ 0x56213f802000] mmco: unref short failure
[h264 @ 0x5621427ad800] mmco: unref short failure
[h264 @ 0x5621427ad800] mmco: unref short failure
[h264 @ 0x555a33d8d3c0] mmco: unref short failure
[h264 @ 0x5602770ec4c0] mmco: unref short failure
[h264 @ 0x5602770ec4c0] mmco: unref short failure
[h264 @ 0x56212921c8c0] mmco: unref short failure
[h264 @ 0x560a3e5ef080] mmco: unref short failure
[h264 @ 0x5621445c4e40] mmco: unref short failure
[h264 @ 0x555a3d2e4080] mmco: unref short failure
[h264 @ 0x5602659b7300] mmco: unref short failure
[h264 @ 0x5602659b7300] mmco: unref short failure
[h264 @ 0x5602659b7300] mmco: unref short failure
[h264 @ 0x5602659b7300] mmco: unref short failure
 45%|████▌     | 882/1945 [3:51:21<6:52:44, 23.30s/it][h264 @ 0x555a4d0c63c0] mmco: unref short failure
 45%|████▌     | 883/1945 [3:51:35<6:02:07, 20.46s/it][h264 @ 0x555a4ad971c0] mmco: unref short failure
[h264 @ 0x555a4ad971c0] mmco: unref short failure
[h264 @ 0x56213cdfcdc0] mmco: unref short failure
 45%|████▌     | 884/1945 [3:51:56<6:04:00, 20.58s/it][h264 @ 0x56214215e180] mmco: unref short failure
[h264 @ 0x560a35f1ebc0] mmco: unref short failure
 46%|████▌     | 885/1945 [3:52:04<4:54:32, 16.67s/it] 46%|████▌     | 886/1945 [3:52:11<4:04:46, 13.87s/it][h264 @ 0x5602708b93c0] mmco: unref short failure
[h264 @ 0x5602708b93c0] mmco: unref short failure
[h264 @ 0x560a3e5eee00] mmco: unref short failure
[h264 @ 0x560a3e5eee00] mmco: unref short failure
[h264 @ 0x560a3e5eee00] mmco: unref short failure
[h264 @ 0x560a369c5f40] mmco: unref short failure
 46%|████▌     | 887/1945 [3:52:18<3:28:50, 11.84s/it][h264 @ 0x56025baf8c80] mmco: unref short failure
[h264 @ 0x56213480fe40] mmco: unref short failure
[h264 @ 0x56213480fe40] mmco: unref short failure
 46%|████▌     | 888/1945 [3:52:25<3:04:55, 10.50s/it][h264 @ 0x560275870940] mmco: unref short failure
[h264 @ 0x560275870940] mmco: unref short failure
[h264 @ 0x56026c8b8c00] mmco: unref short failure
[h264 @ 0x555a429cb840] mmco: unref short failure
[h264 @ 0x555a429cb840] mmco: unref short failure
[h264 @ 0x562144d81f00] mmco: unref short failure
[h264 @ 0x562144d81f00] mmco: unref short failure
[h264 @ 0x560a3c7f64c0] mmco: unref short failure
 46%|████▌     | 889/1945 [3:52:32<2:43:24,  9.28s/it][h264 @ 0x56213fafe640] mmco: unref short failure
[h264 @ 0x56213fafe640] mmco: unref short failure
[h264 @ 0x560a3d23fec0] mmco: unref short failure
[h264 @ 0x560a3650e680] mmco: unref short failure
[h264 @ 0x560a3650e680] mmco: unref short failure
[h264 @ 0x56026b1aefc0] mmco: unref short failure
[h264 @ 0x56026b1aefc0] mmco: unref short failure
[h264 @ 0x5602757abac0] mmco: unref short failure
[h264 @ 0x5602757abac0] mmco: unref short failure
[h264 @ 0x560a3e7f0640] mmco: unref short failure
[h264 @ 0x56213fafe3c0] mmco: unref short failure
[h264 @ 0x56213fafe3c0] mmco: unref short failure
 46%|████▌     | 890/1945 [3:53:21<6:11:47, 21.14s/it][h264 @ 0x5602602270c0] mmco: unref short failure
[h264 @ 0x5602602270c0] mmco: unref short failure
[h264 @ 0x555a34d34ac0] mmco: unref short failure
[h264 @ 0x555a34d34ac0] mmco: unref short failure
 46%|████▌     | 891/1945 [3:53:36<5:37:49, 19.23s/it][h264 @ 0x560a314ecd00] mmco: unref short failure
[h264 @ 0x560a314ecd00] mmco: unref short failure
[h264 @ 0x555a488fdbc0] mmco: unref short failure
[h264 @ 0x555a488fdbc0] mmco: unref short failure
[h264 @ 0x555a488fdbc0] mmco: unref short failure
[h264 @ 0x555a488fdbc0] mmco: unref short failure
[h264 @ 0x560a3e6d1640] mmco: unref short failure
[h264 @ 0x560a34141600] mmco: unref short failure
[h264 @ 0x562142fd3e80] mmco: unref short failure
[h264 @ 0x562142fd3e80] mmco: unref short failure
[h264 @ 0x555a36287000] mmco: unref short failure
[h264 @ 0x555a36287000] mmco: unref short failure
[h264 @ 0x5602757abec0] mmco: unref short failure
[h264 @ 0x5602757abec0] mmco: unref short failure
[h264 @ 0x56026a0d7480] mmco: unref short failure
[h264 @ 0x560a3245e600] mmco: unref short failure
[h264 @ 0x5621313bd6c0] mmco: unref short failure
[h264 @ 0x5621313bd6c0] mmco: unref short failure
[h264 @ 0x560a3c568ac0] mmco: unref short failure
[h264 @ 0x560a3c568ac0] mmco: unref short failure
 46%|████▌     | 892/1945 [3:54:02<6:15:14, 21.38s/it][h264 @ 0x560a3c568ac0] mmco: unref short failure
[h264 @ 0x560a3c568ac0] mmco: unref short failure
[h264 @ 0x560a3c568ac0] mmco: unref short failure
[h264 @ 0x560a3c568ac0] mmco: unref short failure
[h264 @ 0x560a3e8c7a00] mmco: unref short failure
[h264 @ 0x560a3c536d80] mmco: unref short failure
[h264 @ 0x560a3c536d80] mmco: unref short failure
 46%|████▌     | 893/1945 [3:54:11<5:09:39, 17.66s/it][h264 @ 0x56026e2f31c0] mmco: unref short failure
[h264 @ 0x56026e2f31c0] mmco: unref short failure
 46%|████▌     | 894/1945 [3:54:19<4:16:41, 14.65s/it][h264 @ 0x560a3bed6100] mmco: unref short failure
 46%|████▌     | 895/1945 [3:54:27<3:44:41, 12.84s/it] 46%|████▌     | 896/1945 [3:54:35<3:16:34, 11.24s/it] 46%|████▌     | 897/1945 [3:54:45<3:14:17, 11.12s/it][h264 @ 0x555a4e343940] mmco: unref short failure
[h264 @ 0x555a4e343940] mmco: unref short failure
[h264 @ 0x555a4e343940] mmco: unref short failure
[h264 @ 0x555a4e343940] mmco: unref short failure
[h264 @ 0x560a3bb7a7c0] mmco: unref short failure
[h264 @ 0x560278bf5a40] mmco: unref short failure
[h264 @ 0x560273518200] mmco: unref short failure
[h264 @ 0x560273518200] mmco: unref short failure
[h264 @ 0x5621321aae00] mmco: unref short failure
[h264 @ 0x5621321aae00] mmco: unref short failure
[h264 @ 0x555a454bf840] mmco: unref short failure
[h264 @ 0x555a454bf840] mmco: unref short failure
[h264 @ 0x560a490ec840] mmco: unref short failure
[h264 @ 0x560a490ec840] mmco: unref short failure
[h264 @ 0x560263cb1f00] mmco: unref short failure
[h264 @ 0x560263cb1f00] mmco: unref short failure
[h264 @ 0x555a31debc00] mmco: unref short failure
[h264 @ 0x560a46e50a80] mmco: unref short failure
[h264 @ 0x562128ae9580] mmco: unref short failure
[h264 @ 0x560a489edb00] mmco: unref short failure
 46%|████▌     | 898/1945 [3:55:23<5:30:28, 18.94s/it][h264 @ 0x560a42a68140] mmco: unref short failure
[h264 @ 0x56213b996bc0] mmco: unref short failure
[h264 @ 0x56213b996bc0] mmco: unref short failure
[h264 @ 0x56213b996bc0] mmco: unref short failure
[h264 @ 0x56213b996bc0] mmco: unref short failure
[h264 @ 0x5602702ecb40] mmco: unref short failure
[h264 @ 0x5602702ecb40] mmco: unref short failure
[h264 @ 0x5602702ecb40] mmco: unref short failure
[h264 @ 0x5602702ecb40] mmco: unref short failure
[h264 @ 0x5602702ecb40] mmco: unref short failure
[h264 @ 0x5602702ecb40] mmco: unref short failure
[h264 @ 0x5602702ecb40] mmco: unref short failure
[h264 @ 0x5602702ecb40] mmco: unref short failure
[h264 @ 0x560a40f0b8c0] mmco: unref short failure
[h264 @ 0x560a40f0b8c0] mmco: unref short failure
 46%|████▌     | 899/1945 [3:55:37<5:07:36, 17.64s/it]09/09/2024 00:36:55 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 00:36:55 - INFO - __main__ -   start running ret%tv validation...
[h264 @ 0x56027acbd200] mmco: unref short failure
[h264 @ 0x56027acbd200] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x560a371a0080] mmco: unref short failure
[h264 @ 0x562145bea800] mmco: unref short failure
[h264 @ 0x562145bea800] mmco: unref short failure
[h264 @ 0x560a417e8e40] mmco: unref short failure
[h264 @ 0x560a417e8e40] mmco: unref short failure
[h264 @ 0x555a33eddf00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x560a489148c0] mmco: unref short failure
[h264 @ 0x560a489148c0] mmco: unref short failure
[h264 @ 0x560a489148c0] mmco: unref short failure
[h264 @ 0x56212e536840] mmco: unref short failure
[h264 @ 0x560a36075d40] mmco: unref short failure
[h264 @ 0x560a463411c0] mmco: unref short failure
[h264 @ 0x560a463411c0] mmco: unref short failure
[h264 @ 0x562145d941c0] mmco: unref short failure
[h264 @ 0x562145d941c0] mmco: unref short failure
[h264 @ 0x555a43199400] mmco: unref short failure
[h264 @ 0x560a3b568200] mmco: unref short failure
[h264 @ 0x560a3b568200] mmco: unref short failure
[h264 @ 0x560272269840] mmco: unref short failure
[h264 @ 0x555a4ab096c0] mmco: unref short failure
[h264 @ 0x560a41bcdec0] mmco: unref short failure
[h264 @ 0x562149b21940] mmco: unref short failure
[h264 @ 0x560a44a24780] mmco: unref short failure
[h264 @ 0x560a44a24780] mmco: unref short failure
[h264 @ 0x555a47df0300] mmco: unref short failure
[h264 @ 0x560278b47680] mmco: unref short failure
[h264 @ 0x560278b47680] mmco: unref short failure
[h264 @ 0x555a4b932640] mmco: unref short failure
[h264 @ 0x555a4b932640] mmco: unref short failure
[h264 @ 0x560a3a639d00] mmco: unref short failure
[h264 @ 0x560a3a639d00] mmco: unref short failure
[h264 @ 0x560a48c3ed00] mmco: unref short failure
[h264 @ 0x56213db9bd80] mmco: unref short failure
[h264 @ 0x56213db9bd80] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:40,  5.48it/s][A
  1%|          | 2/221 [00:00<01:05,  3.34it/s][A
  1%|▏         | 3/221 [00:00<01:01,  3.52it/s][A
  2%|▏         | 4/221 [00:01<00:56,  3.83it/s][A
  2%|▏         | 5/221 [00:01<00:54,  3.98it/s][A
  3%|▎         | 6/221 [00:01<00:49,  4.37it/s][A
  3%|▎         | 7/221 [00:01<00:53,  3.99it/s][A
  4%|▎         | 8/221 [00:01<00:45,  4.72it/s][A
  4%|▍         | 9/221 [00:02<00:39,  5.39it/s][A
  5%|▍         | 10/221 [00:04<03:05,  1.14it/s][A
  5%|▍         | 11/221 [00:04<02:16,  1.54it/s][A
  5%|▌         | 12/221 [00:04<01:42,  2.03it/s][A
  6%|▌         | 13/221 [00:04<01:26,  2.40it/s][A[h264 @ 0x5621450977c0] mmco: unref short failure

  6%|▋         | 14/221 [00:07<03:36,  1.04s/it][A
  7%|▋         | 15/221 [00:07<02:36,  1.31it/s][A
  7%|▋         | 16/221 [00:08<02:48,  1.21it/s][A
  8%|▊         | 17/221 [00:09<03:14,  1.05it/s][A
  8%|▊         | 18/221 [00:10<02:31,  1.34it/s][A
  9%|▉         | 20/221 [00:10<01:28,  2.27it/s][A
 10%|▉         | 22/221 [00:10<00:57,  3.44it/s][A
 11%|█         | 24/221 [00:10<00:41,  4.72it/s][A
 12%|█▏        | 26/221 [00:10<00:34,  5.61it/s][A
 12%|█▏        | 27/221 [00:10<00:33,  5.71it/s][A[h264 @ 0x560a3ffaff40] mmco: unref short failure
[h264 @ 0x560a3ffaff40] mmco: unref short failure

 13%|█▎        | 28/221 [00:11<00:36,  5.25it/s][A[h264 @ 0x562129cad500] mmco: unref short failure
[h264 @ 0x562129cad500] mmco: unref short failure
[h264 @ 0x56026ad58600] mmco: unref short failure

 13%|█▎        | 29/221 [00:15<03:24,  1.07s/it][A
 14%|█▎        | 30/221 [00:15<02:38,  1.20it/s][A
 14%|█▍        | 31/221 [00:15<02:01,  1.56it/s][A[h264 @ 0x560a45ee5240] mmco: unref short failure
[h264 @ 0x560a45ee5240] mmco: unref short failure
[h264 @ 0x560a45ee5240] mmco: unref short failure
[h264 @ 0x560a45ee5240] mmco: unref short failure
[h264 @ 0x560a4aa04a00] mmco: unref short failure
[h264 @ 0x560a4aa04a00] mmco: unref short failure

 15%|█▍        | 33/221 [00:16<01:44,  1.80it/s][A
 16%|█▌        | 35/221 [00:16<01:08,  2.72it/s][A
 16%|█▋        | 36/221 [00:16<00:57,  3.19it/s][A
 17%|█▋        | 38/221 [00:16<00:44,  4.15it/s][A
 18%|█▊        | 39/221 [00:17<00:51,  3.53it/s][A
 18%|█▊        | 40/221 [00:17<00:45,  4.01it/s][A
 19%|█▉        | 42/221 [00:17<00:30,  5.86it/s][A
 20%|██        | 45/221 [00:17<00:19,  8.97it/s][A
 22%|██▏       | 49/221 [00:17<00:14, 11.97it/s][A
 23%|██▎       | 51/221 [00:22<01:47,  1.58it/s][A
 24%|██▍       | 53/221 [00:22<01:24,  2.00it/s][A
 25%|██▍       | 55/221 [00:22<01:03,  2.62it/s][A
 26%|██▌       | 57/221 [00:22<00:51,  3.18it/s][A
 27%|██▋       | 59/221 [00:23<00:46,  3.48it/s][A
 28%|██▊       | 61/221 [00:23<00:36,  4.43it/s][A
 28%|██▊       | 62/221 [00:23<00:32,  4.85it/s][A
 29%|██▉       | 64/221 [00:23<00:26,  5.92it/s][A
 30%|██▉       | 66/221 [00:23<00:20,  7.56it/s][A
 31%|███       | 68/221 [00:24<00:23,  6.62it/s][A
 32%|███▏      | 70/221 [00:24<00:23,  6.50it/s][A
 33%|███▎      | 72/221 [00:24<00:23,  6.35it/s][A
 33%|███▎      | 74/221 [00:25<00:28,  5.17it/s][A
 34%|███▍      | 76/221 [00:25<00:21,  6.59it/s][A
 35%|███▌      | 78/221 [00:25<00:23,  6.05it/s][A
 36%|███▌      | 79/221 [00:26<00:22,  6.24it/s][A
 37%|███▋      | 81/221 [00:26<00:18,  7.70it/s][A[h264 @ 0x56026144c6c0] mmco: unref short failure
[h264 @ 0x56026144c6c0] mmco: unref short failure

 38%|███▊      | 83/221 [00:30<01:56,  1.18it/s][A
 38%|███▊      | 85/221 [00:31<01:20,  1.68it/s][A
 39%|███▉      | 87/221 [00:31<01:05,  2.04it/s][A
 40%|███▉      | 88/221 [00:31<00:57,  2.32it/s][A
 40%|████      | 89/221 [00:32<00:58,  2.26it/s][A
 41%|████      | 90/221 [00:32<00:51,  2.55it/s][A
 41%|████      | 91/221 [00:32<00:45,  2.85it/s][A
 42%|████▏     | 93/221 [00:32<00:29,  4.33it/s][A
 43%|████▎     | 94/221 [00:34<01:13,  1.73it/s][A
 43%|████▎     | 96/221 [00:34<00:49,  2.52it/s][A
 44%|████▍     | 97/221 [00:35<00:51,  2.41it/s][A
 46%|████▌     | 101/221 [00:35<00:24,  4.99it/s][A
 47%|████▋     | 103/221 [00:35<00:19,  6.10it/s][A
 48%|████▊     | 105/221 [00:35<00:16,  7.20it/s][A
 48%|████▊     | 107/221 [00:35<00:16,  6.91it/s][A
 49%|████▉     | 109/221 [00:36<00:17,  6.46it/s][A
 50%|████▉     | 110/221 [00:36<00:16,  6.63it/s][A
 50%|█████     | 111/221 [00:36<00:19,  5.51it/s][A
 51%|█████     | 112/221 [00:36<00:20,  5.40it/s][A
 51%|█████     | 113/221 [00:37<00:34,  3.12it/s][A
 52%|█████▏    | 115/221 [00:37<00:23,  4.61it/s][A[h264 @ 0x56214176f4c0] mmco: unref short failure
[h264 @ 0x56214176f4c0] mmco: unref short failure
[h264 @ 0x56214176f4c0] mmco: unref short failure
[h264 @ 0x56214176f4c0] mmco: unref short failure

 52%|█████▏    | 116/221 [00:38<00:21,  4.78it/s][A
 53%|█████▎    | 117/221 [00:38<00:22,  4.65it/s][A
 54%|█████▍    | 119/221 [00:38<00:16,  6.19it/s][A
 55%|█████▍    | 121/221 [00:38<00:12,  8.00it/s][A
 56%|█████▌    | 123/221 [00:38<00:13,  7.06it/s][A
 57%|█████▋    | 125/221 [00:39<00:11,  8.27it/s][A
 57%|█████▋    | 127/221 [00:39<00:12,  7.44it/s][A
 58%|█████▊    | 129/221 [00:39<00:12,  7.59it/s][A
 59%|█████▉    | 130/221 [00:39<00:11,  7.86it/s][A
 59%|█████▉    | 131/221 [00:40<00:20,  4.49it/s][A
 60%|██████    | 133/221 [00:40<00:15,  5.79it/s][A
 61%|██████    | 135/221 [00:40<00:11,  7.30it/s][A
 62%|██████▏   | 137/221 [00:40<00:10,  8.02it/s][A
 63%|██████▎   | 140/221 [00:40<00:07, 10.96it/s][A
 64%|██████▍   | 142/221 [00:41<00:12,  6.23it/s][A
 65%|██████▌   | 144/221 [00:41<00:11,  6.96it/s][A
 67%|██████▋   | 147/221 [00:42<00:08,  8.47it/s][A
 67%|██████▋   | 149/221 [00:42<00:07,  9.08it/s][A
 68%|██████▊   | 151/221 [00:43<00:14,  4.73it/s][A
 69%|██████▉   | 152/221 [00:43<00:14,  4.78it/s][A
 70%|███████   | 155/221 [00:43<00:09,  7.05it/s][A
 71%|███████   | 157/221 [00:43<00:07,  8.47it/s][A
 72%|███████▏  | 160/221 [00:43<00:05, 11.28it/s][A
 73%|███████▎  | 162/221 [00:43<00:05, 11.31it/s][A
 75%|███████▍  | 165/221 [00:44<00:03, 14.43it/s][A
 76%|███████▌  | 167/221 [00:44<00:03, 14.14it/s][A
 76%|███████▋  | 169/221 [00:44<00:03, 13.59it/s][A
 77%|███████▋  | 171/221 [00:45<00:08,  6.13it/s][A
 78%|███████▊  | 173/221 [00:45<00:09,  4.95it/s][A
 79%|███████▊  | 174/221 [00:46<00:16,  2.84it/s][A
 80%|███████▉  | 176/221 [00:47<00:11,  3.78it/s][A
 80%|████████  | 177/221 [00:47<00:13,  3.29it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.74it/s][A
 81%|████████  | 179/221 [00:48<00:17,  2.35it/s][A
 82%|████████▏ | 181/221 [00:48<00:11,  3.59it/s][A
 83%|████████▎ | 183/221 [00:48<00:08,  4.43it/s][A
 84%|████████▎ | 185/221 [00:49<00:06,  5.97it/s][A
 85%|████████▍ | 187/221 [00:49<00:05,  6.33it/s][A
 86%|████████▌ | 189/221 [00:49<00:04,  7.86it/s][A
 87%|████████▋ | 192/221 [00:49<00:02, 11.20it/s][A
 88%|████████▊ | 194/221 [00:49<00:02, 12.19it/s][A[h264 @ 0x56213e1d1d80] mmco: unref short failure
[h264 @ 0x560a370a3b40] mmco: unref short failure

 89%|████████▊ | 196/221 [00:52<00:11,  2.22it/s][A
 90%|█████████ | 199/221 [00:52<00:06,  3.31it/s][A
 91%|█████████ | 201/221 [00:52<00:05,  3.95it/s][A
 92%|█████████▏| 203/221 [00:53<00:05,  3.25it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.65it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.54it/s][A
 94%|█████████▎| 207/221 [00:54<00:02,  4.83it/s][A
 95%|█████████▌| 210/221 [00:54<00:01,  6.40it/s][A
 96%|█████████▌| 212/221 [00:54<00:01,  7.21it/s][A
 97%|█████████▋| 214/221 [00:54<00:00,  8.59it/s][A
 98%|█████████▊| 216/221 [00:55<00:00,  8.91it/s][A
 99%|█████████▊| 218/221 [00:55<00:00, 10.38it/s][A
100%|█████████▉| 220/221 [00:55<00:00, 11.76it/s][A100%|█████████▉| 220/221 [00:55<00:00,  3.97it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.78it/s][A
  1%|          | 2/221 [00:00<00:57,  3.78it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.78it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.78it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.78it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.78it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.78it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.78it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.78it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.78it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.78it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.78it/s][A
  6%|▌         | 13/221 [00:03<00:55,  3.78it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.78it/s][A
  8%|▊         | 17/221 [00:04<00:54,  3.78it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.78it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.78it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.78it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.78it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.78it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.78it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.78it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.78it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.78it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 28/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.78it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.78it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.78it/s][A
 14%|█▍        | 32/221 [00:08<00:50,  3.78it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.78it/s][A
 15%|█▌        | 34/221 [00:09<00:49,  3.78it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.78it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.78it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.78it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.78it/s][A
 19%|█▉        | 43/221 [00:11<00:47,  3.78it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.78it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.78it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.78it/s][A
 21%|██▏       | 47/221 [00:12<00:46,  3.78it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.78it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.78it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.78it/s][A
 23%|██▎       | 51/221 [00:13<00:45,  3.78it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.78it/s][A
 24%|██▍       | 53/221 [00:14<00:44,  3.78it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.78it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.78it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.78it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.78it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.78it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.78it/s][A
 27%|██▋       | 60/221 [00:16<00:55,  2.92it/s][A
 28%|██▊       | 61/221 [00:16<00:51,  3.14it/s][A
 28%|██▊       | 62/221 [00:16<00:48,  3.31it/s][A
 29%|██▊       | 63/221 [00:16<00:46,  3.43it/s][A
 29%|██▉       | 64/221 [00:17<00:44,  3.53it/s][A
 29%|██▉       | 65/221 [00:17<00:43,  3.60it/s][A
 30%|██▉       | 66/221 [00:17<00:42,  3.65it/s][A
 30%|███       | 67/221 [00:17<00:41,  3.69it/s][A
 31%|███       | 68/221 [00:18<00:41,  3.72it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.74it/s][A
 32%|███▏      | 70/221 [00:18<00:40,  3.75it/s][A
 32%|███▏      | 71/221 [00:19<00:39,  3.76it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.76it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.77it/s][A
 33%|███▎      | 74/221 [00:19<00:39,  3.77it/s][A
 34%|███▍      | 75/221 [00:20<00:38,  3.77it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.77it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.77it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.77it/s][A
 36%|███▌      | 79/221 [00:21<00:37,  3.78it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.78it/s][A
 37%|███▋      | 81/221 [00:21<00:37,  3.78it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.78it/s][A
 38%|███▊      | 83/221 [00:22<00:36,  3.78it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.78it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 86/221 [00:23<00:35,  3.78it/s][A
 39%|███▉      | 87/221 [00:23<00:35,  3.78it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.78it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 90/221 [00:24<00:34,  3.78it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.78it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.78it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 94/221 [00:25<00:33,  3.78it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.78it/s][A
 43%|████▎     | 96/221 [00:25<00:33,  3.78it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.78it/s][A
 44%|████▍     | 98/221 [00:26<00:32,  3.78it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.78it/s][A
 45%|████▌     | 100/221 [00:26<00:32,  3.78it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.78it/s][A
 46%|████▌     | 102/221 [00:27<00:31,  3.78it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.78it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 105/221 [00:28<00:30,  3.78it/s][A
 48%|████▊     | 106/221 [00:28<00:30,  3.78it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.78it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.78it/s][A
 49%|████▉     | 109/221 [00:29<00:29,  3.78it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.78it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.78it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.78it/s][A
 51%|█████     | 113/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 115/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.77it/s][A
 53%|█████▎    | 117/221 [00:31<00:27,  3.77it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.77it/s][A
 54%|█████▍    | 119/221 [00:31<00:27,  3.78it/s][A
 54%|█████▍    | 120/221 [00:32<00:26,  3.78it/s][A
 55%|█████▍    | 121/221 [00:32<00:26,  3.78it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.78it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.78it/s][A
 56%|█████▌    | 124/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 128/221 [00:34<00:24,  3.78it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.78it/s][A
 60%|█████▉    | 132/221 [00:35<00:23,  3.78it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 134/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 136/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 139/221 [00:37<00:21,  3.78it/s][A
 63%|██████▎   | 140/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.78it/s][A
 65%|██████▍   | 143/221 [00:38<00:20,  3.78it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 147/221 [00:39<00:19,  3.78it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.78it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.78it/s][A
 68%|██████▊   | 151/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:41<00:17,  3.78it/s][A
 70%|███████   | 155/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.78it/s][A
 71%|███████▏  | 158/221 [00:42<00:16,  3.78it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.78it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.78it/s][A
 73%|███████▎  | 162/221 [00:43<00:15,  3.78it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.78it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.78it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.78it/s][A
 75%|███████▌  | 166/221 [00:44<00:14,  3.78it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.78it/s][A
 76%|███████▌  | 168/221 [00:44<00:14,  3.78it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 170/221 [00:45<00:13,  3.78it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.78it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.78it/s][A
 78%|███████▊  | 173/221 [00:46<00:12,  3.78it/s][A
 79%|███████▊  | 174/221 [00:46<00:12,  3.78it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.78it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.78it/s][A
 80%|████████  | 177/221 [00:47<00:11,  3.78it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.78it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.78it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 181/221 [00:48<00:10,  3.78it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.78it/s][A
 84%|████████▎ | 185/221 [00:49<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.78it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.78it/s][A
 85%|████████▌ | 188/221 [00:50<00:08,  3.78it/s][A
 86%|████████▌ | 189/221 [00:50<00:08,  3.78it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.78it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 192/221 [00:51<00:07,  3.78it/s][A
 87%|████████▋ | 193/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:52<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:53<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:55<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [00:56<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [00:56<00:02,  3.78it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.78it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.78it/s][A
 97%|█████████▋| 215/221 [00:57<00:01,  3.78it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.78it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.78it/s][A
 99%|█████████▉| 219/221 [00:58<00:00,  3.78it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.76it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:24,  9.09it/s][A
  1%|          | 2/221 [00:00<00:38,  5.71it/s][A
  1%|▏         | 3/221 [00:00<00:39,  5.55it/s][A
  2%|▏         | 4/221 [00:00<00:33,  6.42it/s][A
  2%|▏         | 5/221 [00:00<00:35,  6.07it/s][A
  3%|▎         | 7/221 [00:01<00:38,  5.57it/s][A
  4%|▎         | 8/221 [00:01<00:47,  4.47it/s][A
  4%|▍         | 9/221 [00:01<00:46,  4.59it/s][A
  5%|▍         | 10/221 [00:02<01:05,  3.22it/s][A
  5%|▍         | 11/221 [00:02<00:59,  3.55it/s][A
  5%|▌         | 12/221 [00:02<00:51,  4.05it/s][A
  6%|▌         | 13/221 [00:03<01:26,  2.41it/s][A
  6%|▋         | 14/221 [00:03<01:07,  3.08it/s][A
  7%|▋         | 15/221 [00:03<01:05,  3.16it/s][A
  7%|▋         | 16/221 [00:04<01:07,  3.05it/s][A
  8%|▊         | 17/221 [00:04<01:21,  2.52it/s][A
  8%|▊         | 18/221 [00:05<01:21,  2.50it/s][A
  9%|▊         | 19/221 [00:05<01:17,  2.62it/s][A
  9%|▉         | 20/221 [00:05<01:00,  3.33it/s][A
 10%|▉         | 21/221 [00:05<00:54,  3.68it/s][A
 10%|▉         | 22/221 [00:06<00:45,  4.33it/s][A
 11%|█         | 24/221 [00:06<00:36,  5.34it/s][A
 11%|█▏        | 25/221 [00:06<00:38,  5.07it/s][A
 12%|█▏        | 26/221 [00:06<00:44,  4.41it/s][A
 12%|█▏        | 27/221 [00:06<00:41,  4.70it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.85it/s][A
 13%|█▎        | 29/221 [00:07<00:47,  4.07it/s][A
 14%|█▎        | 30/221 [00:07<00:43,  4.41it/s][A
 14%|█▍        | 31/221 [00:07<00:40,  4.69it/s][A
 14%|█▍        | 32/221 [00:08<00:35,  5.33it/s][A
 15%|█▍        | 33/221 [00:08<00:36,  5.14it/s][A
 15%|█▌        | 34/221 [00:08<00:42,  4.45it/s][A
 16%|█▌        | 35/221 [00:09<00:54,  3.39it/s][A
 16%|█▋        | 36/221 [00:09<00:54,  3.42it/s][A
 17%|█▋        | 37/221 [00:09<00:54,  3.39it/s][A
 17%|█▋        | 38/221 [00:09<00:51,  3.55it/s][A
 18%|█▊        | 39/221 [00:10<00:47,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:56,  3.19it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:10<00:44,  4.03it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.83it/s][A
 20%|█▉        | 44/221 [00:11<00:38,  4.58it/s][A
 20%|██        | 45/221 [00:11<00:36,  4.83it/s][A
 21%|██        | 46/221 [00:11<00:38,  4.57it/s][A
 21%|██▏       | 47/221 [00:11<00:40,  4.33it/s][A
 22%|██▏       | 48/221 [00:12<00:38,  4.44it/s][A
 22%|██▏       | 49/221 [00:12<00:39,  4.36it/s][A
 23%|██▎       | 50/221 [00:12<00:41,  4.10it/s][A
 24%|██▎       | 52/221 [00:13<00:34,  4.88it/s][A
 24%|██▍       | 53/221 [00:13<00:30,  5.52it/s][A
 24%|██▍       | 54/221 [00:13<00:40,  4.13it/s][A
 25%|██▍       | 55/221 [00:13<00:38,  4.26it/s][A
 25%|██▌       | 56/221 [00:13<00:37,  4.42it/s][A
 26%|██▌       | 57/221 [00:14<00:38,  4.24it/s][A
 26%|██▌       | 58/221 [00:14<00:44,  3.65it/s][A
 27%|██▋       | 59/221 [00:14<00:42,  3.84it/s][A
 28%|██▊       | 61/221 [00:15<00:34,  4.65it/s][A
 28%|██▊       | 62/221 [00:15<00:33,  4.74it/s][A
 29%|██▊       | 63/221 [00:15<00:28,  5.47it/s][A
 29%|██▉       | 64/221 [00:15<00:35,  4.41it/s][A
 29%|██▉       | 65/221 [00:15<00:29,  5.21it/s][A
 30%|██▉       | 66/221 [00:16<00:42,  3.68it/s][A
 30%|███       | 67/221 [00:17<00:58,  2.62it/s][A
 31%|███       | 68/221 [00:17<00:48,  3.19it/s][A
 31%|███       | 69/221 [00:17<01:00,  2.51it/s][A
 32%|███▏      | 70/221 [00:17<00:48,  3.13it/s][A
 32%|███▏      | 71/221 [00:18<00:49,  3.04it/s][A
 33%|███▎      | 72/221 [00:18<00:54,  2.73it/s][A
 33%|███▎      | 73/221 [00:18<00:43,  3.39it/s][A
 33%|███▎      | 74/221 [00:18<00:36,  4.05it/s][A
 34%|███▍      | 75/221 [00:19<00:35,  4.09it/s][A
 34%|███▍      | 76/221 [00:19<00:34,  4.21it/s][A
 35%|███▍      | 77/221 [00:19<00:34,  4.16it/s][A
 35%|███▌      | 78/221 [00:19<00:30,  4.70it/s][A
 36%|███▌      | 79/221 [00:20<00:56,  2.52it/s][A
 36%|███▌      | 80/221 [00:20<00:47,  3.00it/s][A
 37%|███▋      | 81/221 [00:21<00:40,  3.49it/s][A
 37%|███▋      | 82/221 [00:21<00:46,  3.01it/s][A
 38%|███▊      | 83/221 [00:21<00:43,  3.14it/s][A
 38%|███▊      | 84/221 [00:21<00:41,  3.34it/s][A
 38%|███▊      | 85/221 [00:22<00:34,  3.89it/s][A
 39%|███▉      | 86/221 [00:22<00:32,  4.17it/s][A
 39%|███▉      | 87/221 [00:22<00:32,  4.11it/s][A
 40%|███▉      | 88/221 [00:23<00:43,  3.07it/s][A
 40%|████      | 89/221 [00:23<00:51,  2.57it/s][A
 41%|████      | 90/221 [00:23<00:46,  2.81it/s][A
 41%|████      | 91/221 [00:24<00:38,  3.34it/s][A
 42%|████▏     | 92/221 [00:24<00:39,  3.25it/s][A
 42%|████▏     | 93/221 [00:25<00:58,  2.19it/s][A
 43%|████▎     | 94/221 [00:25<00:54,  2.31it/s][A
 43%|████▎     | 95/221 [00:25<00:47,  2.64it/s][A
 43%|████▎     | 96/221 [00:26<00:39,  3.19it/s][A
 44%|████▍     | 97/221 [00:26<00:34,  3.63it/s][A
 44%|████▍     | 98/221 [00:26<00:33,  3.69it/s][A
 45%|████▍     | 99/221 [00:26<00:29,  4.15it/s][A
 45%|████▌     | 100/221 [00:26<00:29,  4.09it/s][A
 46%|████▌     | 101/221 [00:27<00:38,  3.12it/s][A
 46%|████▌     | 102/221 [00:27<00:42,  2.82it/s][A
 47%|████▋     | 103/221 [00:28<00:37,  3.16it/s][A
 47%|████▋     | 104/221 [00:28<00:35,  3.26it/s][A
 48%|████▊     | 105/221 [00:28<00:32,  3.60it/s][A
 48%|████▊     | 106/221 [00:28<00:32,  3.50it/s][A
 48%|████▊     | 107/221 [00:29<00:31,  3.62it/s][A
 49%|████▉     | 108/221 [00:29<00:30,  3.73it/s][A
 49%|████▉     | 109/221 [00:29<00:25,  4.38it/s][A
 50%|████▉     | 110/221 [00:29<00:27,  4.00it/s][A
 50%|█████     | 111/221 [00:30<00:32,  3.34it/s][A
 51%|█████     | 112/221 [00:30<00:33,  3.23it/s][A
 51%|█████     | 113/221 [00:30<00:27,  3.93it/s][A
 52%|█████▏    | 115/221 [00:31<00:23,  4.44it/s][A
 52%|█████▏    | 116/221 [00:31<00:27,  3.78it/s][A
 53%|█████▎    | 117/221 [00:31<00:26,  3.95it/s][A
 53%|█████▎    | 118/221 [00:31<00:26,  3.82it/s][A
 54%|█████▍    | 119/221 [00:32<00:37,  2.71it/s][A
 54%|█████▍    | 120/221 [00:32<00:34,  2.95it/s][A
 55%|█████▌    | 122/221 [00:33<00:25,  3.83it/s][A
 56%|█████▌    | 123/221 [00:33<00:25,  3.86it/s][A
 56%|█████▌    | 124/221 [00:33<00:22,  4.25it/s][A
 57%|█████▋    | 125/221 [00:33<00:26,  3.64it/s][A
 57%|█████▋    | 126/221 [00:34<00:27,  3.46it/s][A
 57%|█████▋    | 127/221 [00:34<00:28,  3.28it/s][A
 58%|█████▊    | 128/221 [00:34<00:26,  3.51it/s][A
 58%|█████▊    | 129/221 [00:35<00:23,  3.89it/s][A
 59%|█████▉    | 130/221 [00:35<00:22,  4.00it/s][A
 60%|█████▉    | 132/221 [00:35<00:15,  5.74it/s][A
 60%|██████    | 133/221 [00:35<00:18,  4.72it/s][A
 61%|██████    | 134/221 [00:36<00:18,  4.70it/s][A
 61%|██████    | 135/221 [00:36<00:17,  4.86it/s][A
 62%|██████▏   | 136/221 [00:36<00:18,  4.60it/s][A
 62%|██████▏   | 137/221 [00:36<00:17,  4.89it/s][A
 62%|██████▏   | 138/221 [00:36<00:19,  4.30it/s][A
 63%|██████▎   | 139/221 [00:37<00:24,  3.28it/s][A
 63%|██████▎   | 140/221 [00:37<00:23,  3.51it/s][A
 64%|██████▍   | 141/221 [00:37<00:23,  3.44it/s][A
 64%|██████▍   | 142/221 [00:38<00:20,  3.78it/s][A
 65%|██████▍   | 143/221 [00:38<00:28,  2.75it/s][A
 65%|██████▌   | 144/221 [00:39<00:30,  2.55it/s][A
 66%|██████▌   | 145/221 [00:39<00:23,  3.20it/s][A
 67%|██████▋   | 147/221 [00:39<00:18,  4.01it/s][A
 67%|██████▋   | 148/221 [00:40<00:22,  3.23it/s][A
 67%|██████▋   | 149/221 [00:40<00:19,  3.64it/s][A
 68%|██████▊   | 150/221 [00:40<00:19,  3.60it/s][A
 68%|██████▊   | 151/221 [00:41<00:21,  3.32it/s][A
 69%|██████▉   | 152/221 [00:41<00:27,  2.50it/s][A
 69%|██████▉   | 153/221 [00:41<00:22,  3.01it/s][A
 70%|██████▉   | 154/221 [00:42<00:19,  3.41it/s][A
 70%|███████   | 155/221 [00:42<00:18,  3.51it/s][A
 71%|███████   | 156/221 [00:42<00:21,  2.97it/s][A
 71%|███████   | 157/221 [00:43<00:20,  3.05it/s][A
 71%|███████▏  | 158/221 [00:43<00:19,  3.17it/s][A
 72%|███████▏  | 159/221 [00:43<00:16,  3.65it/s][A
 72%|███████▏  | 160/221 [00:43<00:15,  3.88it/s][A
 73%|███████▎  | 161/221 [00:44<00:19,  3.10it/s][A
 73%|███████▎  | 162/221 [00:44<00:17,  3.40it/s][A
 74%|███████▍  | 163/221 [00:44<00:16,  3.43it/s][A
 74%|███████▍  | 164/221 [00:45<00:16,  3.43it/s][A
 75%|███████▍  | 165/221 [00:45<00:16,  3.43it/s][A
 75%|███████▌  | 166/221 [00:45<00:15,  3.59it/s][A
 76%|███████▌  | 168/221 [00:46<00:13,  3.93it/s][A
 76%|███████▋  | 169/221 [00:46<00:12,  4.08it/s][A
 77%|███████▋  | 170/221 [00:46<00:16,  3.07it/s][A
 77%|███████▋  | 171/221 [00:46<00:13,  3.68it/s][A
 78%|███████▊  | 172/221 [00:47<00:11,  4.18it/s][A
 78%|███████▊  | 173/221 [00:47<00:12,  3.86it/s][A
 79%|███████▊  | 174/221 [00:47<00:14,  3.27it/s][A
 79%|███████▉  | 175/221 [00:48<00:14,  3.23it/s][A
 80%|███████▉  | 176/221 [00:48<00:12,  3.53it/s][A
 80%|████████  | 177/221 [00:48<00:11,  3.87it/s][A
 81%|████████  | 178/221 [00:48<00:09,  4.54it/s][A
 81%|████████  | 179/221 [00:48<00:09,  4.38it/s][A
 81%|████████▏ | 180/221 [00:49<00:08,  4.76it/s][A
 82%|████████▏ | 181/221 [00:49<00:09,  4.22it/s][A
 82%|████████▏ | 182/221 [00:49<00:10,  3.84it/s][A
 83%|████████▎ | 183/221 [00:50<00:11,  3.39it/s][A
 83%|████████▎ | 184/221 [00:50<00:09,  4.09it/s][A
 84%|████████▎ | 185/221 [00:50<00:08,  4.28it/s][A
 84%|████████▍ | 186/221 [00:50<00:10,  3.22it/s][A
 85%|████████▍ | 187/221 [00:51<00:09,  3.49it/s][A
 85%|████████▌ | 188/221 [00:51<00:09,  3.57it/s][A
 86%|████████▌ | 189/221 [00:51<00:09,  3.54it/s][A
 86%|████████▌ | 190/221 [00:52<00:10,  2.96it/s][A
 86%|████████▋ | 191/221 [00:52<00:08,  3.55it/s][A
 87%|████████▋ | 192/221 [00:52<00:09,  3.09it/s][A
 87%|████████▋ | 193/221 [00:52<00:07,  3.80it/s][A
 88%|████████▊ | 194/221 [00:53<00:07,  3.46it/s][A
 88%|████████▊ | 195/221 [00:53<00:07,  3.48it/s][A
 89%|████████▊ | 196/221 [00:53<00:07,  3.23it/s][A
 89%|████████▉ | 197/221 [00:53<00:06,  3.75it/s][A
 90%|████████▉ | 198/221 [00:54<00:08,  2.82it/s][A
 90%|█████████ | 199/221 [00:54<00:07,  3.13it/s][A
 90%|█████████ | 200/221 [00:55<00:07,  2.87it/s][A
 91%|█████████ | 201/221 [00:55<00:06,  3.17it/s][A
 91%|█████████▏| 202/221 [00:55<00:06,  2.90it/s][A
 92%|█████████▏| 203/221 [00:56<00:05,  3.49it/s][A
 92%|█████████▏| 204/221 [00:56<00:06,  2.49it/s][A
 93%|█████████▎| 205/221 [00:56<00:05,  3.12it/s][A
 93%|█████████▎| 206/221 [00:57<00:05,  2.95it/s][A
 94%|█████████▎| 207/221 [00:57<00:04,  3.05it/s][A
 94%|█████████▍| 208/221 [00:57<00:03,  3.65it/s][A
 95%|█████████▍| 209/221 [00:57<00:03,  3.74it/s][A
 95%|█████████▌| 210/221 [00:58<00:02,  4.05it/s][A
 95%|█████████▌| 211/221 [00:58<00:02,  3.53it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  3.75it/s][A
 96%|█████████▋| 213/221 [00:58<00:02,  3.65it/s][A
 97%|█████████▋| 214/221 [00:59<00:02,  2.88it/s][A
 97%|█████████▋| 215/221 [00:59<00:01,  3.05it/s][A
 98%|█████████▊| 216/221 [01:00<00:01,  3.00it/s][A
 98%|█████████▊| 217/221 [01:00<00:01,  3.30it/s][A
 99%|█████████▊| 218/221 [01:00<00:00,  3.36it/s][A
 99%|█████████▉| 219/221 [01:01<00:00,  3.00it/s][A
100%|█████████▉| 220/221 [01:01<00:00,  3.09it/s][A
100%|██████████| 221/221 [01:01<00:00,  3.16it/s][A100%|██████████| 221/221 [01:01<00:00,  3.58it/s]
09/09/2024 00:42:32 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 899--===========

09/09/2024 00:42:32 - INFO - __main__ -   {'area_r1': 27.3, 'area_recall': '27.3/47.7/55.9', 'area_ravg': 43.6}
09/09/2024 00:42:32 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 899--===========

09/09/2024 00:42:32 - INFO - __main__ -   {'forward_r1': 33.9, 'forward_recall': '33.9/60.6/70.4', 'forward_ravg': 55.0}
09/09/2024 00:42:32 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 899--===========

09/09/2024 00:42:32 - INFO - __main__ -   {'area_video_r1': 40.3, 'area_video_recall': '40.3/69.6/79.3', 'area_video_ravg': 63.0}
09/09/2024 00:42:32 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 899=======

09/09/2024 00:42:32 - INFO - __main__ -   {'area_video_r1': 40.3, 'area_video_recall': '40.3/69.6/79.3', 'area_video_ravg': 63.0}
09/09/2024 00:42:32 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 899--===========

09/09/2024 00:42:32 - INFO - __main__ -   {'area_video_r1': 49.1, 'area_video_recall': '49.1/67.9/75.0', 'area_video_ravg': 64.0, 'area_video_back_r1': 49.2, 'area_video_back_recall': '49.2/72.2/79.3', 'area_video_back_ravg': 66.9}
09/09/2024 00:42:32 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 299=======

09/09/2024 00:42:32 - INFO - __main__ -   {'area_video_r1': 50.7, 'area_video_recall': '50.7/75.1/82.8', 'area_video_ravg': 69.5, 'area_video_back_r1': 50.2, 'area_video_back_recall': '50.2/71.5/78.3', 'area_video_back_ravg': 66.7}
09/09/2024 00:42:32 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 899--===========

09/09/2024 00:42:32 - INFO - __main__ -   {'video_r1': 42.9, 'video_recall': '42.9/70.2/81.0', 'video_ravg': 64.7}
09/09/2024 00:42:32 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 599=======

09/09/2024 00:42:32 - INFO - __main__ -   {'video_r1': 43.4, 'video_recall': '43.4/70.9/81.0', 'video_ravg': 65.1}
09/09/2024 00:42:32 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 899--===========

09/09/2024 00:42:32 - INFO - __main__ -   {'video_r1': 51.7, 'video_recall': '51.7/74.8/82.7', 'video_ravg': 69.7}
09/09/2024 00:42:32 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 899=======

09/09/2024 00:42:32 - INFO - __main__ -   {'video_r1': 51.7, 'video_recall': '51.7/74.8/82.7', 'video_ravg': 69.7}
09/09/2024 00:43:02 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 2.8671319484710693, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.038162924349308014, 'loss_ret%tv%ta--finetune_area/loss_area': 1.0976251363754272, 'loss_ret%tv%ta--finetune_area/total_loss': 4.002920150756836}
 46%|████▋     | 900/1945 [4:01:47<35:45:53, 123.21s/it][h264 @ 0x5602721fa980] mmco: unref short failure
[h264 @ 0x5602721fa980] mmco: unref short failure
 46%|████▋     | 901/1945 [4:01:51<25:22:48, 87.52s/it] [h264 @ 0x555a4c8c0c40] mmco: unref short failure
[h264 @ 0x555a4c8c0c40] mmco: unref short failure
[h264 @ 0x560a3f70ad80] mmco: unref short failure
[h264 @ 0x560a3f70ad80] mmco: unref short failure
[h264 @ 0x560a3f70ad80] mmco: unref short failure
[h264 @ 0x560a3f70ad80] mmco: unref short failure
 46%|████▋     | 902/1945 [4:01:55<18:08:01, 62.59s/it][h264 @ 0x5621427bbb40] mmco: unref short failure
[h264 @ 0x560a437e2fc0] mmco: unref short failure
[h264 @ 0x560a437e2fc0] mmco: unref short failure
 46%|████▋     | 903/1945 [4:02:01<13:08:25, 45.40s/it][h264 @ 0x562147b48680] mmco: unref short failure
[h264 @ 0x560a3f540540] mmco: unref short failure
[h264 @ 0x560a43067140] mmco: unref short failure
 46%|████▋     | 904/1945 [4:02:06<9:40:12, 33.44s/it] [h264 @ 0x56213d64ad00] mmco: unref short failure
[h264 @ 0x56213d64ad00] mmco: unref short failure
 47%|████▋     | 905/1945 [4:02:13<7:20:30, 25.41s/it] 47%|████▋     | 906/1945 [4:02:20<5:45:31, 19.95s/it][h264 @ 0x560a3f6bee00] mmco: unref short failure
[h264 @ 0x560a3f6bee00] mmco: unref short failure
 47%|████▋     | 907/1945 [4:02:27<4:38:53, 16.12s/it][h264 @ 0x555a49d2d2c0] mmco: unref short failure
 47%|████▋     | 908/1945 [4:02:35<3:55:36, 13.63s/it] 47%|████▋     | 909/1945 [4:02:42<3:21:38, 11.68s/it] 47%|████▋     | 910/1945 [4:02:50<3:02:27, 10.58s/it] 47%|████▋     | 911/1945 [4:02:57<2:41:21,  9.36s/it][h264 @ 0x5602728b4b40] mmco: unref short failure
[h264 @ 0x555a3627cfc0] mmco: unref short failure
[h264 @ 0x560a43baa740] mmco: unref short failure
[h264 @ 0x560a43baa740] mmco: unref short failure
 47%|████▋     | 912/1945 [4:03:06<2:41:16,  9.37s/it][h264 @ 0x560a41058940] mmco: unref short failure
 47%|████▋     | 913/1945 [4:03:14<2:33:26,  8.92s/it][h264 @ 0x56025ed47180] mmco: unref short failure
[h264 @ 0x56025ed47180] mmco: unref short failure
 47%|████▋     | 914/1945 [4:03:22<2:27:28,  8.58s/it][h264 @ 0x560a3c7f9ac0] mmco: unref short failure
[h264 @ 0x560a3c7f9ac0] mmco: unref short failure
[h264 @ 0x562140772ac0] mmco: unref short failure
[h264 @ 0x562140772ac0] mmco: unref short failure
 47%|████▋     | 915/1945 [4:03:30<2:25:51,  8.50s/it][h264 @ 0x560a3b05d080] mmco: unref short failure
[h264 @ 0x562140a83e80] mmco: unref short failure
[h264 @ 0x56214639b480] mmco: unref short failure
[h264 @ 0x56214639b480] mmco: unref short failure
 47%|████▋     | 916/1945 [4:03:37<2:18:45,  8.09s/it][h264 @ 0x555a4b690e00] mmco: unref short failure
[h264 @ 0x560a49a01880] mmco: unref short failure
 47%|████▋     | 917/1945 [4:03:44<2:12:16,  7.72s/it] 47%|████▋     | 918/1945 [4:03:51<2:08:54,  7.53s/it][h264 @ 0x560a3b36e900] mmco: unref short failure
 47%|████▋     | 919/1945 [4:04:01<2:18:00,  8.07s/it][h264 @ 0x560277def000] mmco: unref short failure
 47%|████▋     | 920/1945 [4:04:14<2:45:44,  9.70s/it][h264 @ 0x562144fd9dc0] mmco: unref short failure
[h264 @ 0x562144fd9dc0] mmco: unref short failure
[h264 @ 0x562145bb3280] mmco: unref short failure
[h264 @ 0x562145bb3280] mmco: unref short failure
[h264 @ 0x560a4bd3acc0] mmco: unref short failure
 47%|████▋     | 921/1945 [4:04:21<2:31:59,  8.91s/it][h264 @ 0x56025dc721c0] mmco: unref short failure
[h264 @ 0x56025dc721c0] mmco: unref short failure
 47%|████▋     | 922/1945 [4:04:29<2:28:18,  8.70s/it][h264 @ 0x560276803740] mmco: unref short failure
[h264 @ 0x562149c84440] mmco: unref short failure
[h264 @ 0x562129913400] mmco: unref short failure
[h264 @ 0x562129913400] mmco: unref short failure
 47%|████▋     | 923/1945 [4:04:37<2:21:45,  8.32s/it][h264 @ 0x555a3cf2c800] mmco: unref short failure
[h264 @ 0x555a3cf2c800] mmco: unref short failure
[h264 @ 0x560a3e81a0c0] mmco: unref short failure
[h264 @ 0x560a3e81a0c0] mmco: unref short failure
[h264 @ 0x555a30e656c0] mmco: unref short failure
[h264 @ 0x555a30e656c0] mmco: unref short failure
[h264 @ 0x5602721fb280] mmco: unref short failure
[h264 @ 0x5602721fb280] mmco: unref short failure
[h264 @ 0x560279daf540] mmco: unref short failure
[h264 @ 0x562146f1f700] mmco: unref short failure
[h264 @ 0x560a2f8e08c0] mmco: unref short failure
[h264 @ 0x56025c548840] mmco: unref short failure
[h264 @ 0x560277248780] mmco: unref short failure
[h264 @ 0x560271202a40] mmco: unref short failure
[h264 @ 0x560271202a40] mmco: unref short failure
 48%|████▊     | 924/1945 [4:05:27<5:57:07, 20.99s/it][h264 @ 0x560274c94900] mmco: unref short failure
[h264 @ 0x555a3d21b000] mmco: unref short failure
[h264 @ 0x555a436f9400] mmco: unref short failure
[h264 @ 0x555a436f9400] mmco: unref short failure
[h264 @ 0x555a436f9400] mmco: unref short failure
[h264 @ 0x555a436f9400] mmco: unref short failure
[h264 @ 0x555a436f9400] mmco: unref short failure
 48%|████▊     | 925/1945 [4:05:38<5:01:36, 17.74s/it][h264 @ 0x555a3cbb4a80] mmco: unref short failure
[h264 @ 0x5621344bcc80] mmco: unref short failure
[h264 @ 0x560a3020fd80] mmco: unref short failure
[h264 @ 0x560a3020fd80] mmco: unref short failure
 48%|████▊     | 926/1945 [4:05:52<4:42:52, 16.66s/it] 48%|████▊     | 927/1945 [4:05:59<3:54:51, 13.84s/it][h264 @ 0x560270c69e40] mmco: unref short failure
[h264 @ 0x560270c69e40] mmco: unref short failure
 48%|████▊     | 928/1945 [4:06:21<4:34:33, 16.20s/it][h264 @ 0x560a4a73c880] mmco: unref short failure
[h264 @ 0x560a4a73c880] mmco: unref short failure
 48%|████▊     | 929/1945 [4:06:28<3:51:43, 13.68s/it][h264 @ 0x555a335d8600] mmco: unref short failure
[h264 @ 0x56027414d780] mmco: unref short failure
 48%|████▊     | 930/1945 [4:06:36<3:19:32, 11.80s/it][h264 @ 0x56026f4dcd80] mmco: unref short failure
[h264 @ 0x56026f4dcd80] mmco: unref short failure
[h264 @ 0x560a2b53a500] mmco: unref short failure
 48%|████▊     | 931/1945 [4:06:48<3:23:18, 12.03s/it][h264 @ 0x560a4d30ba00] mmco: unref short failure
slurmstepd: error: *** STEP 7446915.0 ON lrdn1776 CANCELLED AT 2024-09-09T00:48:14 ***
WARNING:torch.distributed.elastic.agent.server.api:Received 15 death signal, shutting down workers
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 598090 closing signal SIGTERM
srun: Job step aborted: Waiting up to 92 seconds for job step to finish.
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 598091 closing signal SIGTERM
slurmstepd: error: *** JOB 7446915 ON lrdn1776 CANCELLED AT 2024-09-09T00:48:14 ***
