NODELIST=lrdn3102
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/distributed/launch.py:181: FutureWarning: The module torch.distributed.launch is deprecated
and will be removed in future. Use torchrun.
Note that --use-env is set by default in torchrun.
If your script expects `--local-rank` argument to be set, please
change it to read from `os.environ['LOCAL_RANK']` instead. See 
https://pytorch.org/docs/stable/distributed.html#launch-utility for 
further instructions

  warnings.warn(
WARNING:torch.distributed.run:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
30

1
2
DEVICE SET
DEVICE SET
DEVICE SET
DEVICE SET
09/09/2024 15:16:22 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 2
09/09/2024 15:16:22 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 3
09/09/2024 15:16:22 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 1
09/09/2024 15:16:22 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 0
09/09/2024 15:16:22 - INFO - torch.distributed.distributed_c10d -   Rank 2: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/09/2024 15:16:22 - INFO - torch.distributed.distributed_c10d -   Rank 3: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/09/2024 15:16:22 - INFO - torch.distributed.distributed_c10d -   Rank 1: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/09/2024 15:16:22 - INFO - torch.distributed.distributed_c10d -   Rank 0: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/09/2024 15:16:22 - INFO - __main__ -   ==================model_configs==================

09/09/2024 15:16:22 - INFO - __main__ -   model_cfg_model_type : vast
09/09/2024 15:16:22 - INFO - __main__ -   model_cfg_itm_ratio : 0.1
09/09/2024 15:16:22 - INFO - __main__ -   model_cfg_frozen_vision : False
09/09/2024 15:16:22 - INFO - __main__ -   model_cfg_frozen_audio : False
09/09/2024 15:16:22 - INFO - __main__ -   model_cfg_checkpointing : True
09/09/2024 15:16:22 - INFO - __main__ -   model_cfg_max_caption_len : 40
09/09/2024 15:16:22 - INFO - __main__ -   model_cfg_max_omni_caption_len : 70
09/09/2024 15:16:22 - INFO - __main__ -   model_cfg_max_subtitle_len : 70
09/09/2024 15:16:22 - INFO - __main__ -   model_cfg_contra_dim : 512
09/09/2024 15:16:22 - INFO - __main__ -   model_cfg_inherit_keys : ['vision_encoder_type', 'audio_encoder_type', 'audio_melbins', 'audio_target_length']
09/09/2024 15:16:22 - INFO - __main__ -   model_cfg_frame_embedding_type : adaptive
09/09/2024 15:16:22 - INFO - __main__ -   model_cfg_vision_resolution : 224
09/09/2024 15:16:22 - INFO - __main__ -   model_cfg_vision_encoder_type : evaclip01_giant
09/09/2024 15:16:22 - INFO - __main__ -   model_cfg_audio_encoder_type : beats
09/09/2024 15:16:22 - INFO - __main__ -   model_cfg_audio_melbins : 64
09/09/2024 15:16:22 - INFO - __main__ -   model_cfg_audio_target_length : 1024
09/09/2024 15:16:22 - INFO - __main__ -   model_cfg_beam_size : 3
09/09/2024 15:16:22 - INFO - __main__ -   model_cfg_captioner_mode : False
09/09/2024 15:16:22 - INFO - __main__ -   model_cfg_generate_nums : 1
09/09/2024 15:16:22 - INFO - __main__ -   model_cfg_ret_bidirection_evaluation : False
09/09/2024 15:16:22 - INFO - __main__ -   model_cfg_itm_rerank_num : 50
09/09/2024 15:16:22 - INFO - __main__ -   model_cfg_evaluation_type : evaluation_mm
09/09/2024 15:16:22 - INFO - __main__ -   model_cfg_default : ./config/vast/default_model_cfg.json
09/09/2024 15:16:22 - INFO - __main__ -   model_cfg_max_vision_sample_num : 2
09/09/2024 15:16:22 - INFO - __main__ -   model_cfg_max_audio_sample_num : 1
09/09/2024 15:16:22 - INFO - __main__ -   ==================run_configs==================

09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_checkpoint : 
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_output_dir : ./output/vast/pretrain_vast/downstream/finetuneVolume256batchlossmodipesi
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_gradient_accumulation_steps : 1
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_clip_lr : 5e-07
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_optim : adamw
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_learning_rate : 2e-05
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_betas : [0.9, 0.98]
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_weight_decay : 0.01
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_grad_norm : 2.0
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_warmup_ratio : 0.1
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_resume : False
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_seed : 50
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_fp16 : True
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_bf16 : False
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_zero_shot : False
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_scheduler : warmup_linear
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_new_lr : 0
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_new_params_name : []
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_valid_freq : 10
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_dataset_mix_type : random
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_remove_before_ckpt : True
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_first_eval : True
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_pretrain_dir : ./output/vast/pretrain_vast
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_num_train_steps : 0
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_save_best : True
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_pin_mem : True
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_vision_resolution : 224
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_use_ddp : False
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_mode : training
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_log_steps : 100
09/09/2024 15:16:22 - INFO - __main__ -   run_cfg_default : ./config/vast/default_run_cfg.json
09/09/2024 15:16:22 - INFO - __main__ -   ==================data_configs==================

09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_finetune_area_train_type : annoindexed
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_finetune_area_train_training : True
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_finetune_area_train_name : finetune_area
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_finetune_area_train_txt : ../vast27m/annotations100k.json
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_finetune_area_train_vision : ../vast27m/videos/
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_finetune_area_train_audio : ../vast27m/audios
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_finetune_area_train_vision_transforms : crop_flip
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_finetune_area_train_vision_format : video_rawvideo
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_finetune_area_train_vision_sample_num : 2
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_finetune_area_train_audio_sample_num : 1
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_finetune_area_train_task : ret%tv%ta
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_finetune_area_train_epoch : 5
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_finetune_area_train_n_workers : 8
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_finetune_area_train_batch_size : 256
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_msrvtt_ret_val_type : annoindexed
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_msrvtt_ret_val_training : False
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_msrvtt_ret_val_name : msrvtt_ret
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_msrvtt_ret_val_txt : datasets/annotations/msrvtt/descs_ret_test.json
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision : ../MSRVTT/video_test
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_transforms : crop_flip
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_format : video_rawvideo
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_msrvtt_ret_val_audio : ../MSRVTT/audio_test
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_sample_num : 8
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_msrvtt_ret_val_audio_sample_num : 1
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_msrvtt_ret_val_task : ret%tv
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_msrvtt_ret_val_n_workers : 8
09/09/2024 15:16:22 - INFO - __main__ -   data_cfg_msrvtt_ret_val_batch_size : 64
wandb: Tracking run with wandb version 0.17.8
wandb: W&B syncing is set to `offline` in this directory.  
wandb: Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
09/09/2024 15:16:26 - INFO - __main__ -   finetune_area Using clip mean and std.
09/09/2024 15:16:26 - INFO - __main__ -   finetune_area transforms crop_flip
ci sono 99621 labels
ci sono 99621 labelsci sono 99621 labels

09/09/2024 15:17:07 - INFO - __main__ -   Create Dataset finetune_area Success
09/09/2024 15:17:07 - INFO - __main__ -    loader ret%tv%ta--finetune_area , ratio 1945 , bs_pergpu 64, n_workers 8
ci sono 99621 labels
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b714c3f000] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
ci sono 884 labels
ci sono 884 labels
ci sono 884 labels
09/09/2024 15:17:11 - INFO - __main__ -   msrvtt_ret Using clip mean and std.
09/09/2024 15:17:11 - INFO - __main__ -   msrvtt_ret transforms crop_flip
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
ci sono 884 labels
09/09/2024 15:17:11 - INFO - __main__ -   Create Dataset msrvtt_ret Success
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
09/09/2024 15:17:14 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
09/09/2024 15:17:14 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
09/09/2024 15:17:14 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
09/09/2024 15:17:14 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556d9d20bfc0] mmco: unref short failure
[h264 @ 0x55e448548000] mmco: unref short failure
[h264 @ 0x55e448548000] mmco: unref short failure
[h264 @ 0x556d8d8de5c0] mmco: unref short failure
[h264 @ 0x556d8d8de5c0] mmco: unref short failure
[h264 @ 0x556d8ded0d80] mmco: unref short failure
[h264 @ 0x556d8df965c0] mmco: unref short failure
[h264 @ 0x556d8df965c0] mmco: unref short failure
[h264 @ 0x556d91ee4580] mmco: unref short failure
[h264 @ 0x556d91ee4580] mmco: unref short failure
[h264 @ 0x556d9d2b9200] mmco: unref short failure
[h264 @ 0x55e44885f280] mmco: unref short failure
09/09/2024 15:18:22 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
[h264 @ 0x556d8e1b4280] mmco: unref short failure
09/09/2024 15:18:28 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
09/09/2024 15:18:30 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
09/09/2024 15:18:35 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
[h264 @ 0x556d8de5fd80] mmco: unref short failure
[h264 @ 0x556d8de5fd80] mmco: unref short failure
09/09/2024 15:18:37 - INFO - root -   incompatible_keys.missing_keys: []
09/09/2024 15:18:40 - INFO - root -   incompatible_keys.missing_keys: []
09/09/2024 15:18:40 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
[h264 @ 0x55e44d741ec0] mmco: unref short failure
[h264 @ 0x55e44d741ec0] mmco: unref short failure
09/09/2024 15:18:42 - INFO - root -   incompatible_keys.missing_keys: []
09/09/2024 15:18:42 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/09/2024 15:18:43 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
[h264 @ 0x55e45057de40] mmco: unref short failure
[h264 @ 0x55e45057de40] mmco: unref short failure
09/09/2024 15:18:46 - INFO - root -   incompatible_keys.missing_keys: []
09/09/2024 15:18:48 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
[h264 @ 0x55b716b65380] mmco: unref short failure
[h264 @ 0x55b71f4d7180] mmco: unref short failure
09/09/2024 15:18:55 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
09/09/2024 15:18:55 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
09/09/2024 15:18:57 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
[h264 @ 0x55b7169ec1c0] mmco: unref short failure
09/09/2024 15:19:01 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.4.crossattention.self.query.weight', 'cls.predictions.transform.dense.weight', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.self.value.weight', 'cls.predictions.bias', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.7.crossattention.self.key.weight', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.9.crossattention.self.value.bias', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.0.crossattention.self.key.bias', 'cls.predictions.transform.dense.bias', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.output.LayerNorm.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'cls.predictions.transform.dense.bias', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.6.crossattention.self.key.bias', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.self.value.bias', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.5.crossattention.self.value.bias', 'cls.predictions.transform.dense.weight', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'cls.predictions.bias', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.11.crossattention.output.LayerNorm.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.output.dense.weight', 'cls.predictions.transform.dense.bias', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.2.crossattention.self.value.weight', 'cls.predictions.transform.dense.weight', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.4.crossattention.output.dense.bias', 'cls.predictions.bias', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.self.key.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.1.crossattention.self.key.bias', 'cls.predictions.bias', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.key.bias', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.3.crossattention.self.value.weight', 'cls.predictions.transform.dense.bias', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.7.crossattention.self.key.bias', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.output.dense.weight', 'cls.predictions.transform.dense.weight', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.8.crossattention.output.dense.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
[h264 @ 0x556da1779ec0] mmco: unref short failure
[h264 @ 0x556da1779ec0] mmco: unref short failure
[h264 @ 0x55b71697b340] mmco: unref short failure
[h264 @ 0x55b71697b340] mmco: unref short failure
09/09/2024 15:19:29 - INFO - __main__ -   load_from_pretrained: ./output/vast/pretrain_vast/ckpt/model_step_204994.pt
09/09/2024 15:19:29 - INFO - __main__ -   Load from pretrained dir ./output/vast/pretrain_vast
[h264 @ 0x55e450e0e340] mmco: unref short failure
[h264 @ 0x556da675bf00] mmco: unref short failure
[h264 @ 0x556da675bf00] mmco: unref short failure
[h264 @ 0x556d9f5a3dc0] mmco: unref short failure
09/09/2024 15:19:35 - INFO - __main__ -   Unexpected keys ['vision_encoder.text.logit_scale']
09/09/2024 15:19:35 - INFO - __main__ -   missing_keys  ['vision_encoder.logit_scale']
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
09/09/2024 15:19:45 - INFO - __main__ -   ==================learning_rate_settings==================

09/09/2024 15:19:45 - INFO - __main__ -     basic_lr : 2e-05
09/09/2024 15:19:45 - INFO - __main__ -     clip_lr_visual : 5e-07
09/09/2024 15:19:45 - INFO - __main__ -     clip_lr_visual_len : 245
09/09/2024 15:19:45 - INFO - __main__ -     new_lr : 0
09/09/2024 15:19:45 - INFO - __main__ -     new_params_name: []
09/09/2024 15:19:45 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 15:19:45 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556d9028e100] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e44e4ac500] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556d9e5a2b00] mmco: unref short failure
[h264 @ 0x556d9e5a2b00] mmco: unref short failure
[h264 @ 0x556d9247de80] mmco: unref short failure
[h264 @ 0x556d9247de80] mmco: unref short failure
[h264 @ 0x556d9e3f53c0] mmco: unref short failure
[h264 @ 0x556d9e3f53c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
[h264 @ 0x556da55f4b40] mmco: unref short failure
[h264 @ 0x556da55f4b40] mmco: unref short failure
[h264 @ 0x55b71859e2c0] mmco: unref short failure
[h264 @ 0x55b71859e2c0] mmco: unref short failure
[h264 @ 0x55b716cef7c0] mmco: unref short failure
[h264 @ 0x556d9993eb00] mmco: unref short failure
[h264 @ 0x55b7162b2dc0] mmco: unref short failure
[h264 @ 0x55b7162b2dc0] mmco: unref short failure
[h264 @ 0x55b716cee600] mmco: unref short failure
[h264 @ 0x55e450305080] mmco: unref short failure
[h264 @ 0x55e450305080] mmco: unref short failure
[h264 @ 0x556d8f0da0c0] mmco: unref short failure
[h264 @ 0x556da57c4280] mmco: unref short failure
[h264 @ 0x55e44b573200] mmco: unref short failure
[h264 @ 0x55e44b573200] mmco: unref short failure
[h264 @ 0x556d9f941c80] mmco: unref short failure
[h264 @ 0x556d9f941c80] mmco: unref short failure
[h264 @ 0x556d9f941c80] mmco: unref short failure
[h264 @ 0x556d9f941c80] mmco: unref short failure
[h264 @ 0x55e44d2805c0] mmco: unref short failure
[h264 @ 0x556d92267c80] mmco: unref short failure
[h264 @ 0x556d92267c80] mmco: unref short failure
[h264 @ 0x556da0a2d400] mmco: unref short failure
[h264 @ 0x556da0a2d400] mmco: unref short failure
  0%|          | 0/221 [00:00<?, ?it/s][h264 @ 0x55e4489f6740] mmco: unref short failure
[h264 @ 0x55e4489f6740] mmco: unref short failure
  1%|          | 2/221 [00:00<00:21, 10.02it/s]  2%|▏         | 4/221 [00:00<00:24,  8.88it/s]  3%|▎         | 7/221 [00:00<00:19, 10.80it/s]  4%|▍         | 9/221 [00:00<00:19, 11.01it/s]  5%|▍         | 11/221 [00:00<00:16, 12.46it/s]  6%|▌         | 13/221 [00:03<01:26,  2.41it/s]  7%|▋         | 15/221 [00:03<01:01,  3.32it/s]  8%|▊         | 17/221 [00:03<00:49,  4.08it/s]  9%|▊         | 19/221 [00:03<00:39,  5.07it/s] 10%|▉         | 21/221 [00:03<00:30,  6.52it/s] 10%|█         | 23/221 [00:07<02:25,  1.36it/s] 12%|█▏        | 26/221 [00:08<01:31,  2.13it/s] 13%|█▎        | 28/221 [00:08<01:08,  2.82it/s] 14%|█▍        | 31/221 [00:08<00:46,  4.09it/s] 15%|█▍        | 33/221 [00:08<00:36,  5.15it/s] 16%|█▋        | 36/221 [00:08<00:25,  7.19it/s] 17%|█▋        | 38/221 [00:08<00:22,  8.08it/s] 18%|█▊        | 40/221 [00:08<00:19,  9.42it/s] 19%|█▉        | 43/221 [00:09<00:14, 12.24it/s] 20%|██        | 45/221 [00:09<00:20,  8.50it/s] 21%|██▏       | 47/221 [00:13<01:57,  1.48it/s] 23%|██▎       | 50/221 [00:13<01:15,  2.26it/s] 24%|██▍       | 54/221 [00:17<01:45,  1.58it/s] 25%|██▌       | 56/221 [00:18<01:46,  1.56it/s] 27%|██▋       | 60/221 [00:19<01:06,  2.43it/s] 29%|██▉       | 64/221 [00:19<00:43,  3.65it/s] 30%|██▉       | 66/221 [00:23<01:44,  1.49it/s] 31%|███       | 68/221 [00:23<01:23,  1.83it/s] 32%|███▏      | 70/221 [00:24<01:05,  2.31it/s] 33%|███▎      | 72/221 [00:24<00:50,  2.93it/s] 34%|███▍      | 75/221 [00:24<00:35,  4.16it/s] 35%|███▍      | 77/221 [00:24<00:27,  5.20it/s] 36%|███▌      | 79/221 [00:24<00:25,  5.56it/s] 37%|███▋      | 82/221 [00:25<00:19,  7.00it/s] 39%|███▉      | 86/221 [00:25<00:13, 10.16it/s] 40%|███▉      | 88/221 [00:25<00:12, 10.51it/s] 41%|████      | 90/221 [00:25<00:13,  9.82it/s] 42%|████▏     | 93/221 [00:26<00:14,  8.94it/s] 43%|████▎     | 96/221 [00:26<00:13,  9.55it/s] 45%|████▍     | 99/221 [00:26<00:10, 11.37it/s] 46%|████▌     | 102/221 [00:26<00:08, 13.64it/s] 48%|████▊     | 105/221 [00:26<00:07, 15.78it/s] 48%|████▊     | 107/221 [00:27<00:11,  9.85it/s] 50%|████▉     | 110/221 [00:27<00:08, 12.58it/s] 51%|█████     | 112/221 [00:27<00:10, 10.24it/s] 52%|█████▏    | 115/221 [00:27<00:08, 12.97it/s] 53%|█████▎    | 117/221 [00:32<01:07,  1.55it/s] 54%|█████▍    | 119/221 [00:32<00:50,  2.02it/s] 55%|█████▌    | 122/221 [00:32<00:33,  3.00it/s] 56%|█████▌    | 124/221 [00:32<00:25,  3.77it/s] 57%|█████▋    | 126/221 [00:33<00:26,  3.54it/s] 58%|█████▊    | 128/221 [00:34<00:26,  3.54it/s] 59%|█████▉    | 131/221 [00:34<00:17,  5.23it/s] 60%|██████    | 133/221 [00:34<00:15,  5.58it/s] 61%|██████    | 135/221 [00:35<00:28,  3.05it/s] 62%|██████▏   | 136/221 [00:36<00:28,  2.97it/s] 62%|██████▏   | 137/221 [00:38<00:56,  1.48it/s] 62%|██████▏   | 138/221 [00:38<00:48,  1.71it/s] 63%|██████▎   | 139/221 [00:39<00:44,  1.86it/s] 63%|██████▎   | 140/221 [00:39<00:37,  2.19it/s] 64%|██████▍   | 141/221 [00:39<00:31,  2.56it/s] 64%|██████▍   | 142/221 [00:39<00:24,  3.19it/s] 66%|██████▌   | 145/221 [00:39<00:12,  5.98it/s] 67%|██████▋   | 148/221 [00:40<00:09,  7.70it/s] 68%|██████▊   | 150/221 [00:40<00:09,  7.25it/s] 69%|██████▉   | 152/221 [00:40<00:09,  7.23it/s] 70%|███████   | 155/221 [00:40<00:06,  9.99it/s] 71%|███████   | 157/221 [00:45<00:44,  1.44it/s] 72%|███████▏  | 160/221 [00:45<00:27,  2.20it/s] 73%|███████▎  | 162/221 [00:45<00:21,  2.72it/s] 74%|███████▍  | 164/221 [00:45<00:16,  3.39it/s] 75%|███████▌  | 166/221 [00:50<00:46,  1.18it/s] 76%|███████▌  | 167/221 [00:52<00:57,  1.07s/it] 76%|███████▋  | 169/221 [00:53<00:40,  1.27it/s] 77%|███████▋  | 170/221 [00:53<00:34,  1.49it/s] 78%|███████▊  | 173/221 [00:53<00:18,  2.57it/s] 79%|███████▉  | 175/221 [00:53<00:13,  3.41it/s] 80%|████████  | 177/221 [00:53<00:10,  4.40it/s] 81%|████████  | 179/221 [00:54<00:12,  3.26it/s] 82%|████████▏ | 182/221 [00:54<00:08,  4.79it/s] 84%|████████▎ | 185/221 [00:54<00:05,  6.71it/s] 85%|████████▍ | 187/221 [00:54<00:04,  8.05it/s] 86%|████████▌ | 189/221 [00:55<00:03,  8.31it/s] 87%|████████▋ | 193/221 [00:55<00:02, 12.30it/s] 89%|████████▊ | 196/221 [00:55<00:01, 14.90it/s] 90%|█████████ | 199/221 [00:55<00:01, 15.99it/s] 91%|█████████▏| 202/221 [00:55<00:01, 16.25it/s] 93%|█████████▎| 205/221 [00:55<00:01, 15.26it/s] 94%|█████████▍| 208/221 [00:56<00:00, 16.84it/s] 95%|█████████▌| 210/221 [00:56<00:00, 17.28it/s] 96%|█████████▌| 212/221 [00:56<00:00, 15.94it/s] 97%|█████████▋| 214/221 [00:56<00:00, 10.08it/s] 98%|█████████▊| 216/221 [00:58<00:01,  3.24it/s] 99%|█████████▊| 218/221 [00:58<00:00,  4.21it/s]100%|█████████▉| 220/221 [01:03<00:00,  1.22it/s]100%|█████████▉| 220/221 [01:03<00:00,  3.48it/s]
  0%|          | 0/221 [00:00<?, ?it/s]  0%|          | 1/221 [00:00<00:58,  3.79it/s]  1%|          | 2/221 [00:00<00:57,  3.79it/s]  1%|▏         | 3/221 [00:00<00:57,  3.79it/s]  2%|▏         | 4/221 [00:01<00:57,  3.79it/s]  2%|▏         | 5/221 [00:01<00:56,  3.79it/s]  3%|▎         | 6/221 [00:01<00:56,  3.79it/s]  3%|▎         | 7/221 [00:01<00:56,  3.79it/s]  4%|▎         | 8/221 [00:02<00:56,  3.79it/s]  4%|▍         | 9/221 [00:02<00:55,  3.79it/s]  5%|▍         | 10/221 [00:02<00:55,  3.79it/s]  5%|▍         | 11/221 [00:02<00:55,  3.79it/s]  5%|▌         | 12/221 [00:03<00:55,  3.79it/s]  6%|▌         | 13/221 [00:03<00:54,  3.79it/s]  6%|▋         | 14/221 [00:03<00:54,  3.80it/s]  7%|▋         | 15/221 [00:03<00:54,  3.80it/s]  7%|▋         | 16/221 [00:04<00:54,  3.80it/s]  8%|▊         | 17/221 [00:04<00:53,  3.80it/s]  8%|▊         | 18/221 [00:04<00:53,  3.80it/s]  9%|▊         | 19/221 [00:05<00:53,  3.80it/s]  9%|▉         | 20/221 [00:05<00:52,  3.79it/s] 10%|▉         | 21/221 [00:05<00:52,  3.79it/s] 10%|▉         | 22/221 [00:05<00:52,  3.79it/s] 10%|█         | 23/221 [00:06<00:52,  3.79it/s] 11%|█         | 24/221 [00:06<00:51,  3.79it/s] 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s] 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s] 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s] 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s] 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s] 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s] 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s] 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s] 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s] 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s] 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s] 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s] 17%|█▋        | 37/221 [00:09<00:48,  3.80it/s] 17%|█▋        | 38/221 [00:10<00:48,  3.80it/s] 18%|█▊        | 39/221 [00:10<00:47,  3.80it/s] 18%|█▊        | 40/221 [00:10<00:47,  3.80it/s] 19%|█▊        | 41/221 [00:10<00:47,  3.80it/s] 19%|█▉        | 42/221 [00:11<00:47,  3.80it/s] 19%|█▉        | 43/221 [00:11<00:46,  3.80it/s] 20%|█▉        | 44/221 [00:11<00:46,  3.80it/s] 20%|██        | 45/221 [00:11<00:46,  3.80it/s] 21%|██        | 46/221 [00:12<00:46,  3.80it/s] 21%|██▏       | 47/221 [00:12<00:45,  3.80it/s] 22%|██▏       | 48/221 [00:12<00:45,  3.80it/s] 22%|██▏       | 49/221 [00:12<00:45,  3.80it/s] 23%|██▎       | 50/221 [00:13<00:45,  3.80it/s] 23%|██▎       | 51/221 [00:13<00:44,  3.80it/s] 24%|██▎       | 52/221 [00:13<00:44,  3.80it/s] 24%|██▍       | 53/221 [00:13<00:44,  3.80it/s] 24%|██▍       | 54/221 [00:14<00:43,  3.80it/s] 25%|██▍       | 55/221 [00:14<00:43,  3.80it/s] 25%|██▌       | 56/221 [00:14<00:43,  3.80it/s] 26%|██▌       | 57/221 [00:15<00:43,  3.80it/s] 26%|██▌       | 58/221 [00:15<00:42,  3.80it/s] 27%|██▋       | 59/221 [00:15<00:42,  3.80it/s] 27%|██▋       | 60/221 [00:15<00:42,  3.80it/s] 28%|██▊       | 61/221 [00:16<00:42,  3.80it/s] 28%|██▊       | 62/221 [00:16<00:41,  3.80it/s] 29%|██▊       | 63/221 [00:16<00:41,  3.80it/s] 29%|██▉       | 64/221 [00:16<00:41,  3.80it/s] 29%|██▉       | 65/221 [00:17<00:41,  3.80it/s] 30%|██▉       | 66/221 [00:17<00:40,  3.80it/s] 30%|███       | 67/221 [00:17<00:40,  3.80it/s] 31%|███       | 68/221 [00:17<00:40,  3.80it/s] 31%|███       | 69/221 [00:18<00:40,  3.80it/s] 32%|███▏      | 70/221 [00:18<00:39,  3.80it/s] 32%|███▏      | 71/221 [00:18<00:39,  3.80it/s] 33%|███▎      | 72/221 [00:18<00:39,  3.80it/s] 33%|███▎      | 73/221 [00:19<00:38,  3.80it/s] 33%|███▎      | 74/221 [00:19<00:38,  3.80it/s] 34%|███▍      | 75/221 [00:19<00:38,  3.80it/s] 34%|███▍      | 76/221 [00:20<00:38,  3.80it/s] 35%|███▍      | 77/221 [00:20<00:37,  3.80it/s] 35%|███▌      | 78/221 [00:20<00:37,  3.80it/s] 36%|███▌      | 79/221 [00:20<00:37,  3.80it/s] 36%|███▌      | 80/221 [00:21<00:37,  3.80it/s] 37%|███▋      | 81/221 [00:21<00:36,  3.80it/s] 37%|███▋      | 82/221 [00:21<00:36,  3.80it/s] 38%|███▊      | 83/221 [00:21<00:36,  3.80it/s] 38%|███▊      | 84/221 [00:22<00:36,  3.80it/s] 38%|███▊      | 85/221 [00:22<00:35,  3.80it/s] 39%|███▉      | 86/221 [00:22<00:35,  3.80it/s] 39%|███▉      | 87/221 [00:22<00:35,  3.80it/s] 40%|███▉      | 88/221 [00:23<00:35,  3.80it/s] 40%|████      | 89/221 [00:23<00:34,  3.80it/s] 41%|████      | 90/221 [00:23<00:34,  3.80it/s] 41%|████      | 91/221 [00:23<00:34,  3.80it/s] 42%|████▏     | 92/221 [00:24<00:33,  3.80it/s] 42%|████▏     | 93/221 [00:24<00:33,  3.80it/s] 43%|████▎     | 94/221 [00:24<00:33,  3.80it/s] 43%|████▎     | 95/221 [00:25<00:33,  3.80it/s] 43%|████▎     | 96/221 [00:25<00:32,  3.80it/s] 44%|████▍     | 97/221 [00:25<00:32,  3.80it/s] 44%|████▍     | 98/221 [00:25<00:32,  3.80it/s] 45%|████▍     | 99/221 [00:26<00:32,  3.80it/s] 45%|████▌     | 100/221 [00:26<00:31,  3.80it/s] 46%|████▌     | 101/221 [00:26<00:31,  3.80it/s] 46%|████▌     | 102/221 [00:26<00:31,  3.80it/s] 47%|████▋     | 103/221 [00:27<00:31,  3.80it/s] 47%|████▋     | 104/221 [00:27<00:30,  3.80it/s] 48%|████▊     | 105/221 [00:27<00:30,  3.80it/s] 48%|████▊     | 106/221 [00:27<00:30,  3.80it/s] 48%|████▊     | 107/221 [00:28<00:30,  3.80it/s] 49%|████▉     | 108/221 [00:28<00:29,  3.80it/s] 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s] 50%|████▉     | 110/221 [00:28<00:29,  3.80it/s] 50%|█████     | 111/221 [00:29<00:28,  3.80it/s] 51%|█████     | 112/221 [00:29<00:28,  3.80it/s] 51%|█████     | 113/221 [00:29<00:28,  3.79it/s] 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s] 52%|█████▏    | 115/221 [00:30<00:27,  3.80it/s] 52%|█████▏    | 116/221 [00:30<00:27,  3.80it/s] 53%|█████▎    | 117/221 [00:30<00:27,  3.80it/s] 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s] 54%|█████▍    | 119/221 [00:31<00:26,  3.80it/s] 54%|█████▍    | 120/221 [00:31<00:26,  3.80it/s] 55%|█████▍    | 121/221 [00:31<00:26,  3.79it/s] 55%|█████▌    | 122/221 [00:32<00:26,  3.80it/s] 56%|█████▌    | 123/221 [00:32<00:25,  3.80it/s] 56%|█████▌    | 124/221 [00:32<00:25,  3.79it/s] 57%|█████▋    | 125/221 [00:32<00:25,  3.79it/s] 57%|█████▋    | 126/221 [00:33<00:25,  3.79it/s] 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s] 58%|█████▊    | 128/221 [00:33<00:24,  3.79it/s] 58%|█████▊    | 129/221 [00:33<00:24,  3.79it/s] 59%|█████▉    | 130/221 [00:34<00:23,  3.79it/s] 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s] 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s] 60%|██████    | 133/221 [00:35<00:23,  3.79it/s] 61%|██████    | 134/221 [00:35<00:22,  3.79it/s] 61%|██████    | 135/221 [00:35<00:22,  3.79it/s] 62%|██████▏   | 136/221 [00:35<00:22,  3.79it/s] 62%|██████▏   | 137/221 [00:36<00:22,  3.79it/s] 62%|██████▏   | 138/221 [00:36<00:21,  3.79it/s] 63%|██████▎   | 139/221 [00:36<00:21,  3.79it/s] 63%|██████▎   | 140/221 [00:36<00:21,  3.79it/s] 64%|██████▍   | 141/221 [00:37<00:21,  3.79it/s] 64%|██████▍   | 142/221 [00:37<00:20,  3.79it/s] 65%|██████▍   | 143/221 [00:37<00:20,  3.79it/s] 65%|██████▌   | 144/221 [00:37<00:20,  3.79it/s] 66%|██████▌   | 145/221 [00:38<00:20,  3.79it/s] 66%|██████▌   | 146/221 [00:38<00:19,  3.79it/s] 67%|██████▋   | 147/221 [00:38<00:19,  3.79it/s] 67%|██████▋   | 148/221 [00:39<00:19,  3.79it/s] 67%|██████▋   | 149/221 [00:39<00:18,  3.79it/s] 68%|██████▊   | 150/221 [00:39<00:18,  3.79it/s] 68%|██████▊   | 151/221 [00:39<00:18,  3.79it/s] 69%|██████▉   | 152/221 [00:40<00:18,  3.79it/s] 69%|██████▉   | 153/221 [00:40<00:17,  3.79it/s] 70%|██████▉   | 154/221 [00:40<00:17,  3.79it/s] 70%|███████   | 155/221 [00:40<00:17,  3.79it/s] 71%|███████   | 156/221 [00:41<00:17,  3.79it/s] 71%|███████   | 157/221 [00:41<00:16,  3.79it/s] 71%|███████▏  | 158/221 [00:41<00:16,  3.79it/s] 72%|███████▏  | 159/221 [00:41<00:16,  3.79it/s] 72%|███████▏  | 160/221 [00:42<00:16,  3.79it/s] 73%|███████▎  | 161/221 [00:42<00:15,  3.79it/s] 73%|███████▎  | 162/221 [00:42<00:15,  3.79it/s] 74%|███████▍  | 163/221 [00:42<00:15,  3.79it/s] 74%|███████▍  | 164/221 [00:43<00:15,  3.79it/s] 75%|███████▍  | 165/221 [00:43<00:14,  3.79it/s] 75%|███████▌  | 166/221 [00:43<00:14,  3.79it/s] 76%|███████▌  | 167/221 [00:44<00:14,  3.79it/s] 76%|███████▌  | 168/221 [00:44<00:13,  3.79it/s] 76%|███████▋  | 169/221 [00:44<00:13,  3.79it/s] 77%|███████▋  | 170/221 [00:44<00:13,  3.79it/s] 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s] 78%|███████▊  | 172/221 [00:45<00:12,  3.79it/s] 78%|███████▊  | 173/221 [00:45<00:12,  3.80it/s] 79%|███████▊  | 174/221 [00:45<00:12,  3.79it/s] 79%|███████▉  | 175/221 [00:46<00:12,  3.79it/s] 80%|███████▉  | 176/221 [00:46<00:11,  3.79it/s] 80%|████████  | 177/221 [00:46<00:11,  3.79it/s] 81%|████████  | 178/221 [00:46<00:11,  3.79it/s] 81%|████████  | 179/221 [00:47<00:11,  3.79it/s] 81%|████████▏ | 180/221 [00:47<00:10,  3.79it/s] 82%|████████▏ | 181/221 [00:47<00:10,  3.79it/s] 82%|████████▏ | 182/221 [00:47<00:10,  3.79it/s] 83%|████████▎ | 183/221 [00:48<00:10,  3.79it/s] 83%|████████▎ | 184/221 [00:48<00:09,  3.79it/s] 84%|████████▎ | 185/221 [00:48<00:09,  3.79it/s] 84%|████████▍ | 186/221 [00:49<00:09,  3.79it/s] 85%|████████▍ | 187/221 [00:49<00:08,  3.79it/s] 85%|████████▌ | 188/221 [00:49<00:08,  3.79it/s] 86%|████████▌ | 189/221 [00:49<00:08,  3.79it/s] 86%|████████▌ | 190/221 [00:50<00:08,  3.79it/s] 86%|████████▋ | 191/221 [00:50<00:07,  3.79it/s] 87%|████████▋ | 192/221 [00:50<00:07,  3.79it/s] 87%|████████▋ | 193/221 [00:50<00:07,  3.79it/s] 88%|████████▊ | 194/221 [00:51<00:07,  3.79it/s] 88%|████████▊ | 195/221 [00:51<00:06,  3.79it/s] 89%|████████▊ | 196/221 [00:51<00:06,  3.79it/s] 89%|████████▉ | 197/221 [00:51<00:06,  3.79it/s] 90%|████████▉ | 198/221 [00:52<00:06,  3.79it/s] 90%|█████████ | 199/221 [00:52<00:05,  3.79it/s] 90%|█████████ | 200/221 [00:52<00:05,  3.79it/s] 91%|█████████ | 201/221 [00:52<00:05,  3.79it/s] 91%|█████████▏| 202/221 [00:53<00:05,  3.79it/s] 92%|█████████▏| 203/221 [00:53<00:04,  3.79it/s] 92%|█████████▏| 204/221 [00:53<00:04,  3.79it/s] 93%|█████████▎| 205/221 [00:54<00:04,  3.79it/s] 93%|█████████▎| 206/221 [00:54<00:03,  3.79it/s] 94%|█████████▎| 207/221 [00:54<00:03,  3.79it/s] 94%|█████████▍| 208/221 [00:54<00:03,  3.79it/s] 95%|█████████▍| 209/221 [00:55<00:03,  3.79it/s] 95%|█████████▌| 210/221 [00:55<00:02,  3.79it/s] 95%|█████████▌| 211/221 [00:55<00:02,  3.79it/s] 96%|█████████▌| 212/221 [00:55<00:02,  3.79it/s] 96%|█████████▋| 213/221 [00:56<00:02,  3.79it/s] 97%|█████████▋| 214/221 [00:56<00:01,  3.79it/s] 97%|█████████▋| 215/221 [00:56<00:01,  3.79it/s] 98%|█████████▊| 216/221 [00:56<00:01,  3.79it/s] 98%|█████████▊| 217/221 [00:57<00:01,  3.79it/s] 99%|█████████▊| 218/221 [00:57<00:00,  3.79it/s] 99%|█████████▉| 219/221 [00:57<00:00,  3.79it/s]100%|█████████▉| 220/221 [00:58<00:00,  3.79it/s]100%|██████████| 221/221 [00:58<00:00,  3.79it/s]100%|██████████| 221/221 [00:58<00:00,  3.79it/s]
  0%|          | 0/221 [00:00<?, ?it/s]  1%|          | 2/221 [00:00<00:37,  5.77it/s]  1%|▏         | 3/221 [00:00<00:45,  4.78it/s]  2%|▏         | 4/221 [00:00<00:37,  5.81it/s]  2%|▏         | 5/221 [00:00<00:36,  5.99it/s]  3%|▎         | 7/221 [00:01<00:37,  5.72it/s]  4%|▎         | 8/221 [00:01<00:45,  4.65it/s]  4%|▍         | 9/221 [00:01<00:40,  5.18it/s]  5%|▍         | 10/221 [00:02<00:54,  3.89it/s]  5%|▍         | 11/221 [00:02<00:56,  3.75it/s]  5%|▌         | 12/221 [00:02<00:52,  4.01it/s]  6%|▌         | 13/221 [00:03<01:08,  3.04it/s]  6%|▋         | 14/221 [00:03<01:03,  3.26it/s]  7%|▋         | 15/221 [00:03<00:59,  3.46it/s]  7%|▋         | 16/221 [00:04<01:03,  3.22it/s]  8%|▊         | 17/221 [00:04<01:13,  2.77it/s]  8%|▊         | 18/221 [00:04<01:05,  3.12it/s]  9%|▊         | 19/221 [00:05<01:03,  3.21it/s]  9%|▉         | 20/221 [00:05<00:53,  3.72it/s] 10%|▉         | 21/221 [00:05<00:53,  3.74it/s] 10%|▉         | 22/221 [00:05<00:54,  3.68it/s] 11%|█         | 24/221 [00:06<00:45,  4.33it/s] 11%|█▏        | 25/221 [00:06<00:49,  3.96it/s] 12%|█▏        | 26/221 [00:06<00:51,  3.77it/s] 12%|█▏        | 27/221 [00:06<00:47,  4.11it/s] 13%|█▎        | 28/221 [00:07<01:00,  3.20it/s] 13%|█▎        | 29/221 [00:07<00:58,  3.29it/s] 14%|█▎        | 30/221 [00:07<00:59,  3.22it/s] 14%|█▍        | 31/221 [00:08<00:53,  3.57it/s] 14%|█▍        | 32/221 [00:08<00:45,  4.11it/s] 15%|█▍        | 33/221 [00:08<00:43,  4.30it/s] 15%|█▌        | 34/221 [00:08<00:43,  4.33it/s] 16%|█▌        | 35/221 [00:09<00:49,  3.78it/s] 16%|█▋        | 36/221 [00:09<00:50,  3.67it/s] 17%|█▋        | 37/221 [00:09<00:46,  3.94it/s] 17%|█▋        | 38/221 [00:09<00:45,  4.04it/s] 18%|█▊        | 39/221 [00:10<00:43,  4.14it/s] 18%|█▊        | 40/221 [00:10<00:51,  3.53it/s] 19%|█▊        | 41/221 [00:10<00:53,  3.35it/s] 19%|█▉        | 42/221 [00:10<00:44,  4.06it/s] 19%|█▉        | 43/221 [00:11<00:41,  4.31it/s] 20%|█▉        | 44/221 [00:11<00:39,  4.48it/s] 20%|██        | 45/221 [00:11<00:42,  4.15it/s] 21%|██        | 46/221 [00:11<00:43,  4.03it/s] 21%|██▏       | 47/221 [00:12<00:40,  4.35it/s] 22%|██▏       | 48/221 [00:12<00:34,  4.96it/s] 22%|██▏       | 49/221 [00:12<00:35,  4.90it/s] 23%|██▎       | 50/221 [00:12<00:51,  3.30it/s] 23%|██▎       | 51/221 [00:13<00:45,  3.73it/s] 24%|██▎       | 52/221 [00:13<00:46,  3.64it/s] 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s] 24%|██▍       | 54/221 [00:13<00:46,  3.58it/s] 25%|██▍       | 55/221 [00:14<00:43,  3.78it/s] 25%|██▌       | 56/221 [00:14<00:42,  3.89it/s] 26%|██▌       | 57/221 [00:14<00:40,  4.07it/s] 26%|██▌       | 58/221 [00:14<00:43,  3.75it/s] 27%|██▋       | 59/221 [00:15<00:38,  4.19it/s] 27%|██▋       | 60/221 [00:15<00:35,  4.57it/s] 28%|██▊       | 61/221 [00:15<00:35,  4.48it/s] 28%|██▊       | 62/221 [00:15<00:36,  4.39it/s] 29%|██▊       | 63/221 [00:16<00:35,  4.40it/s] 29%|██▉       | 64/221 [00:16<00:39,  3.97it/s] 29%|██▉       | 65/221 [00:16<00:39,  4.00it/s] 30%|██▉       | 66/221 [00:17<00:49,  3.11it/s] 30%|███       | 67/221 [00:17<00:48,  3.15it/s] 31%|███       | 68/221 [00:17<00:43,  3.54it/s] 31%|███       | 69/221 [00:18<01:00,  2.50it/s] 32%|███▏      | 70/221 [00:18<00:55,  2.72it/s] 32%|███▏      | 71/221 [00:18<00:47,  3.19it/s] 33%|███▎      | 72/221 [00:19<00:48,  3.05it/s] 33%|███▎      | 73/221 [00:19<00:42,  3.49it/s] 33%|███▎      | 74/221 [00:19<00:34,  4.24it/s] 34%|███▍      | 75/221 [00:19<00:35,  4.12it/s] 34%|███▍      | 76/221 [00:19<00:32,  4.46it/s] 35%|███▍      | 77/221 [00:20<00:40,  3.54it/s] 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s] 36%|███▌      | 79/221 [00:21<00:51,  2.74it/s] 36%|███▌      | 80/221 [00:21<00:50,  2.77it/s] 37%|███▋      | 81/221 [00:21<00:40,  3.43it/s] 37%|███▋      | 82/221 [00:21<00:42,  3.29it/s] 38%|███▊      | 83/221 [00:22<00:41,  3.32it/s] 38%|███▊      | 84/221 [00:22<00:38,  3.54it/s] 38%|███▊      | 85/221 [00:22<00:33,  4.01it/s] 39%|███▉      | 86/221 [00:22<00:30,  4.46it/s] 39%|███▉      | 87/221 [00:22<00:28,  4.70it/s] 40%|███▉      | 88/221 [00:23<00:39,  3.33it/s] 40%|████      | 89/221 [00:23<00:42,  3.12it/s] 41%|████      | 90/221 [00:24<00:38,  3.44it/s] 41%|████      | 91/221 [00:24<00:33,  3.86it/s] 42%|████▏     | 92/221 [00:24<00:38,  3.34it/s] 42%|████▏     | 93/221 [00:25<00:45,  2.80it/s] 43%|████▎     | 94/221 [00:25<00:43,  2.93it/s] 43%|████▎     | 95/221 [00:25<00:41,  3.07it/s] 43%|████▎     | 96/221 [00:25<00:36,  3.44it/s] 44%|████▍     | 97/221 [00:26<00:36,  3.44it/s] 44%|████▍     | 98/221 [00:26<00:41,  2.99it/s] 45%|████▍     | 99/221 [00:26<00:41,  2.96it/s] 45%|████▌     | 100/221 [00:27<00:40,  3.01it/s] 46%|████▌     | 101/221 [00:27<00:38,  3.11it/s] 46%|████▌     | 102/221 [00:28<00:42,  2.83it/s] 47%|████▋     | 103/221 [00:28<00:36,  3.26it/s] 47%|████▋     | 104/221 [00:28<00:35,  3.32it/s] 48%|████▊     | 105/221 [00:28<00:40,  2.88it/s] 48%|████▊     | 106/221 [00:29<00:35,  3.21it/s] 48%|████▊     | 107/221 [00:29<00:36,  3.14it/s] 49%|████▉     | 108/221 [00:29<00:35,  3.19it/s] 49%|████▉     | 109/221 [00:30<00:30,  3.68it/s] 50%|████▉     | 110/221 [00:30<00:32,  3.46it/s] 50%|█████     | 111/221 [00:30<00:34,  3.23it/s] 51%|█████     | 112/221 [00:31<00:34,  3.17it/s] 51%|█████     | 113/221 [00:31<00:30,  3.50it/s] 52%|█████▏    | 114/221 [00:31<00:25,  4.23it/s] 52%|█████▏    | 115/221 [00:31<00:28,  3.75it/s] 52%|█████▏    | 116/221 [00:31<00:29,  3.61it/s] 53%|█████▎    | 117/221 [00:32<00:28,  3.68it/s] 53%|█████▎    | 118/221 [00:32<00:27,  3.79it/s] 54%|█████▍    | 119/221 [00:32<00:28,  3.63it/s] 54%|█████▍    | 120/221 [00:33<00:26,  3.75it/s] 55%|█████▍    | 121/221 [00:33<00:23,  4.33it/s] 55%|█████▌    | 122/221 [00:33<00:22,  4.39it/s] 56%|█████▌    | 123/221 [00:33<00:23,  4.12it/s] 56%|█████▌    | 124/221 [00:33<00:24,  4.01it/s] 57%|█████▋    | 125/221 [00:34<00:28,  3.37it/s] 57%|█████▋    | 126/221 [00:34<00:25,  3.71it/s] 57%|█████▋    | 127/221 [00:35<00:30,  3.10it/s] 58%|█████▊    | 128/221 [00:35<00:28,  3.23it/s] 58%|█████▊    | 129/221 [00:35<00:23,  3.95it/s] 59%|█████▉    | 130/221 [00:35<00:23,  3.94it/s] 60%|█████▉    | 132/221 [00:36<00:20,  4.41it/s] 60%|██████    | 133/221 [00:36<00:23,  3.79it/s] 61%|██████    | 134/221 [00:36<00:24,  3.60it/s] 61%|██████    | 135/221 [00:36<00:22,  3.88it/s] 62%|██████▏   | 136/221 [00:37<00:22,  3.71it/s] 62%|██████▏   | 137/221 [00:37<00:23,  3.62it/s] 62%|██████▏   | 138/221 [00:37<00:24,  3.34it/s] 63%|██████▎   | 139/221 [00:38<00:25,  3.20it/s] 63%|██████▎   | 140/221 [00:38<00:24,  3.27it/s] 64%|██████▍   | 141/221 [00:38<00:23,  3.34it/s] 64%|██████▍   | 142/221 [00:39<00:21,  3.69it/s] 65%|██████▍   | 143/221 [00:39<00:21,  3.58it/s] 65%|██████▌   | 144/221 [00:39<00:22,  3.37it/s] 66%|██████▌   | 145/221 [00:39<00:20,  3.74it/s] 66%|██████▌   | 146/221 [00:40<00:17,  4.32it/s] 67%|██████▋   | 147/221 [00:40<00:19,  3.75it/s] 67%|██████▋   | 148/221 [00:40<00:21,  3.32it/s] 67%|██████▋   | 149/221 [00:41<00:21,  3.30it/s] 68%|██████▊   | 150/221 [00:41<00:21,  3.33it/s] 68%|██████▊   | 151/221 [00:41<00:24,  2.91it/s] 69%|██████▉   | 152/221 [00:42<00:26,  2.58it/s] 69%|██████▉   | 153/221 [00:42<00:22,  3.02it/s] 70%|██████▉   | 154/221 [00:42<00:19,  3.46it/s] 70%|███████   | 155/221 [00:42<00:19,  3.42it/s] 71%|███████   | 156/221 [00:43<00:19,  3.26it/s] 71%|███████   | 157/221 [00:43<00:21,  3.03it/s] 71%|███████▏  | 158/221 [00:43<00:19,  3.17it/s] 72%|███████▏  | 159/221 [00:44<00:16,  3.84it/s] 72%|███████▏  | 160/221 [00:44<00:14,  4.26it/s] 73%|███████▎  | 161/221 [00:44<00:13,  4.42it/s] 73%|███████▎  | 162/221 [00:44<00:11,  5.16it/s] 74%|███████▍  | 163/221 [00:44<00:13,  4.46it/s] 74%|███████▍  | 164/221 [00:45<00:12,  4.54it/s] 75%|███████▍  | 165/221 [00:45<00:15,  3.73it/s] 75%|███████▌  | 166/221 [00:45<00:14,  3.88it/s] 76%|███████▌  | 167/221 [00:45<00:12,  4.41it/s] 76%|███████▌  | 168/221 [00:46<00:11,  4.45it/s] 76%|███████▋  | 169/221 [00:46<00:10,  4.91it/s] 77%|███████▋  | 170/221 [00:46<00:16,  3.09it/s] 77%|███████▋  | 171/221 [00:47<00:14,  3.50it/s] 78%|███████▊  | 172/221 [00:47<00:13,  3.68it/s] 78%|███████▊  | 173/221 [00:47<00:14,  3.39it/s] 79%|███████▊  | 174/221 [00:48<00:14,  3.16it/s] 79%|███████▉  | 175/221 [00:48<00:14,  3.18it/s] 80%|███████▉  | 176/221 [00:48<00:13,  3.45it/s] 80%|████████  | 177/221 [00:48<00:11,  3.79it/s] 81%|████████  | 178/221 [00:49<00:13,  3.22it/s] 81%|████████  | 179/221 [00:49<00:12,  3.28it/s] 81%|████████▏ | 180/221 [00:49<00:11,  3.70it/s] 82%|████████▏ | 181/221 [00:49<00:09,  4.18it/s] 82%|████████▏ | 182/221 [00:50<00:12,  3.25it/s] 83%|████████▎ | 183/221 [00:50<00:11,  3.25it/s] 83%|████████▎ | 184/221 [00:50<00:09,  3.71it/s] 84%|████████▎ | 185/221 [00:51<00:09,  3.97it/s] 84%|████████▍ | 186/221 [00:51<00:10,  3.43it/s] 85%|████████▍ | 187/221 [00:51<00:10,  3.24it/s] 85%|████████▌ | 188/221 [00:52<00:10,  3.28it/s] 86%|████████▌ | 189/221 [00:52<00:08,  3.63it/s] 86%|████████▌ | 190/221 [00:52<00:09,  3.41it/s] 86%|████████▋ | 191/221 [00:52<00:07,  3.91it/s] 87%|████████▋ | 192/221 [00:53<00:07,  3.88it/s] 87%|████████▋ | 193/221 [00:53<00:06,  4.41it/s] 88%|████████▊ | 194/221 [00:53<00:05,  4.51it/s] 88%|████████▊ | 195/221 [00:53<00:06,  4.19it/s] 89%|████████▊ | 196/221 [00:53<00:06,  3.89it/s] 89%|████████▉ | 197/221 [00:54<00:05,  4.07it/s] 90%|████████▉ | 198/221 [00:54<00:06,  3.57it/s] 90%|█████████ | 199/221 [00:54<00:06,  3.51it/s] 90%|█████████ | 200/221 [00:55<00:06,  3.06it/s] 91%|█████████ | 201/221 [00:55<00:06,  3.19it/s] 91%|█████████▏| 202/221 [00:55<00:06,  2.88it/s] 92%|█████████▏| 203/221 [00:56<00:05,  3.29it/s] 92%|█████████▏| 204/221 [00:56<00:04,  3.55it/s] 93%|█████████▎| 205/221 [00:56<00:03,  4.10it/s] 93%|█████████▎| 206/221 [00:56<00:04,  3.51it/s] 94%|█████████▎| 207/221 [00:57<00:03,  3.64it/s] 94%|█████████▍| 208/221 [00:57<00:03,  3.28it/s] 95%|█████████▍| 209/221 [00:57<00:03,  3.29it/s] 95%|█████████▌| 210/221 [00:58<00:02,  3.67it/s] 95%|█████████▌| 211/221 [00:58<00:03,  3.27it/s] 96%|█████████▌| 212/221 [00:58<00:02,  3.45it/s] 96%|█████████▋| 213/221 [00:58<00:02,  3.97it/s] 97%|█████████▋| 214/221 [00:59<00:02,  3.42it/s] 97%|█████████▋| 215/221 [00:59<00:01,  3.69it/s] 98%|█████████▊| 216/221 [00:59<00:01,  3.51it/s] 98%|█████████▊| 217/221 [01:00<00:01,  3.24it/s] 99%|█████████▊| 218/221 [01:00<00:00,  3.24it/s] 99%|█████████▉| 219/221 [01:00<00:00,  3.08it/s]100%|█████████▉| 220/221 [01:01<00:00,  3.10it/s]100%|██████████| 221/221 [01:01<00:00,  2.97it/s]100%|██████████| 221/221 [01:01<00:00,  3.59it/s]
09/09/2024 15:25:28 - INFO - __main__ -   ==== evaluation--ret%tv--msrvtt_ret_ret_area_forward========

09/09/2024 15:25:28 - INFO - __main__ -   {'area_r1': 24.1, 'area_recall': '24.1/43.1/50.6', 'area_ravg': 39.3}
09/09/2024 15:25:28 - INFO - __main__ -   ==== evaluation--ret%tv--msrvtt_ret_ret_area_backard========

09/09/2024 15:25:28 - INFO - __main__ -   {'forward_r1': 33.3, 'forward_recall': '33.3/64.7/75.1', 'forward_ravg': 57.7}
09/09/2024 15:25:28 - INFO - __main__ -   ==== evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video========

09/09/2024 15:25:28 - INFO - __main__ -   {'area_video_r1': 33.3, 'area_video_recall': '33.3/64.4/75.9', 'area_video_ravg': 57.8}
09/09/2024 15:25:28 - INFO - __main__ -   ==== evaluation--ret%tv--msrvtt_ret_ret_itm_area========

09/09/2024 15:25:28 - INFO - __main__ -   {'area_video_r1': 47.4, 'area_video_recall': '47.4/66.6/72.1', 'area_video_ravg': 62.0, 'area_video_back_r1': 42.8, 'area_video_back_recall': '42.8/67.6/77.0', 'area_video_back_ravg': 62.5}
09/09/2024 15:25:28 - INFO - __main__ -   ==== evaluation--ret%tv--msrvtt_ret_ret_itc_tv========

09/09/2024 15:25:28 - INFO - __main__ -   {'video_r1': 44.9, 'video_recall': '44.9/72.4/82.5', 'video_ravg': 66.6}
09/09/2024 15:25:28 - INFO - __main__ -   ==== evaluation--ret%tv--msrvtt_ret_ret_itm_tv========

09/09/2024 15:25:28 - INFO - __main__ -   {'video_r1': 50.3, 'video_recall': '50.3/72.4/80.4', 'video_ravg': 67.7}
  0%|          | 0/1945 [00:00<?, ?it/s][h264 @ 0x55e44db73c80] mmco: unref short failure
[h264 @ 0x556d92fa5680] mmco: unref short failure
[h264 @ 0x556d92fa5680] mmco: unref short failure
[h264 @ 0x556d92fa5680] mmco: unref short failure
[h264 @ 0x556d92fa5680] mmco: unref short failure
  0%|          | 1/1945 [00:09<5:13:17,  9.67s/it]  0%|          | 2/1945 [00:14<3:38:42,  6.75s/it][h264 @ 0x55e44d1a9d40] mmco: unref short failure
[h264 @ 0x556da71e3d40] mmco: unref short failure
[h264 @ 0x556da71e3d40] mmco: unref short failure
[h264 @ 0x556da71e3d40] mmco: unref short failure
[h264 @ 0x556da71e3d40] mmco: unref short failure
[h264 @ 0x556da71e3d40] mmco: unref short failure
[h264 @ 0x556da71e3d40] mmco: unref short failure
  0%|          | 3/1945 [00:19<3:09:47,  5.86s/it][h264 @ 0x55b71be9fb00] mmco: unref short failure
[h264 @ 0x556da28d4480] mmco: unref short failure
[h264 @ 0x556da28d4480] mmco: unref short failure
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
[h264 @ 0x556d8f39f0c0] mmco: unref short failure
  0%|          | 4/1945 [00:25<3:12:08,  5.94s/it][h264 @ 0x556d8f39f0c0] mmco: unref short failure
[h264 @ 0x556d8f39f0c0] mmco: unref short failure
[h264 @ 0x556d9c13ff40] mmco: unref short failure
[h264 @ 0x556d9c13ff40] mmco: unref short failure
  0%|          | 5/1945 [00:31<3:14:12,  6.01s/it][h264 @ 0x556d9e5b4440] mmco: unref short failure
[h264 @ 0x556d9e5b4440] mmco: unref short failure
[h264 @ 0x55b721c5d0c0] mmco: unref short failure
[h264 @ 0x55b721c5d0c0] mmco: unref short failure
  0%|          | 6/1945 [00:37<3:18:15,  6.13s/it][h264 @ 0x556d97856740] mmco: unref short failure
[h264 @ 0x556d97856740] mmco: unref short failure
  0%|          | 7/1945 [00:45<3:35:32,  6.67s/it]  0%|          | 8/1945 [00:52<3:35:14,  6.67s/it][h264 @ 0x556d9df76fc0] mmco: unref short failure
[h264 @ 0x556d8f90d880] mmco: unref short failure
[h264 @ 0x556d8f90d880] mmco: unref short failure
not have audios 8-qwaveiHMM.3
  0%|          | 9/1945 [00:59<3:44:40,  6.96s/it]  1%|          | 10/1945 [01:06<3:41:56,  6.88s/it]  1%|          | 11/1945 [01:13<3:42:21,  6.90s/it][h264 @ 0x556da16c5b00] mmco: unref short failure
[h264 @ 0x556da16c5b00] mmco: unref short failure
  1%|          | 12/1945 [01:20<3:43:42,  6.94s/it][h264 @ 0x55b71d806040] mmco: unref short failure
[h264 @ 0x55b71d806040] mmco: unref short failure
  1%|          | 13/1945 [01:26<3:37:52,  6.77s/it][h264 @ 0x55b71fdbe780] mmco: unref short failure
[h264 @ 0x55b71fdbe780] mmco: unref short failure
[h264 @ 0x55e449163d00] mmco: unref short failure
  1%|          | 14/1945 [01:33<3:36:54,  6.74s/it]  1%|          | 15/1945 [01:39<3:32:38,  6.61s/it][h264 @ 0x556d99dd2a80] mmco: unref short failure
[h264 @ 0x556d99dd2a80] mmco: unref short failure
[h264 @ 0x556d9dfd4480] mmco: unref short failure
[h264 @ 0x556d9dfd4480] mmco: unref short failure
[h264 @ 0x556d9dfd4480] mmco: unref short failure
  1%|          | 16/1945 [01:45<3:25:37,  6.40s/it]  1%|          | 17/1945 [01:51<3:23:39,  6.34s/it][h264 @ 0x55e44d9ad600] mmco: unref short failure
[h264 @ 0x55e44d9ad600] mmco: unref short failure
[h264 @ 0x55e44d9ad600] mmco: unref short failure
[h264 @ 0x55e44d9ad600] mmco: unref short failure
[h264 @ 0x55b71bc4f4c0] mmco: unref short failure
[h264 @ 0x556d9c495200] mmco: unref short failure
[h264 @ 0x556d9c495200] mmco: unref short failure
[h264 @ 0x556da7369fc0] mmco: unref short failure
[h264 @ 0x556da7369fc0] mmco: unref short failure
[h264 @ 0x556da7369fc0] mmco: unref short failure
[h264 @ 0x556da7369fc0] mmco: unref short failure
[h264 @ 0x556da7369fc0] mmco: unref short failure
[h264 @ 0x556da7369fc0] mmco: unref short failure
[h264 @ 0x556da7369fc0] mmco: unref short failure
[h264 @ 0x556da7369fc0] mmco: unref short failure
[h264 @ 0x55e450384a80] mmco: unref short failure
[h264 @ 0x55e450384a80] mmco: unref short failure
[h264 @ 0x55e450384a80] mmco: unref short failure
[h264 @ 0x55e450384a80] mmco: unref short failure
[h264 @ 0x55e44c243ac0] mmco: unref short failure
[h264 @ 0x55e44c243ac0] mmco: unref short failure
[h264 @ 0x55b72457f2c0] mmco: unref short failure
[h264 @ 0x55b72457f2c0] mmco: unref short failure
[h264 @ 0x556daa813580] mmco: unref short failure
[h264 @ 0x556da7369dc0] mmco: unref short failure
[h264 @ 0x55e449657300] mmco: unref short failure
[h264 @ 0x55e449657300] mmco: unref short failure
[h264 @ 0x55e449670540] mmco: unref short failure
[h264 @ 0x55e449670540] mmco: unref short failure
  1%|          | 18/1945 [02:17<6:33:14, 12.24s/it][h264 @ 0x556da0d04bc0] mmco: unref short failure
[h264 @ 0x556d98f71140] mmco: unref short failure
[h264 @ 0x556d98f71140] mmco: unref short failure
  1%|          | 19/1945 [02:24<5:40:33, 10.61s/it][h264 @ 0x55b71e19f080] mmco: unref short failure
[h264 @ 0x55b7196ac380] mmco: unref short failure
  1%|          | 20/1945 [02:32<5:10:44,  9.69s/it][h264 @ 0x55b718719200] mmco: unref short failure
[h264 @ 0x55b718719200] mmco: unref short failure
[h264 @ 0x55b718719200] mmco: unref short failure
[h264 @ 0x55b718719200] mmco: unref short failure
[h264 @ 0x55e44da0e600] mmco: unref short failure
  1%|          | 21/1945 [02:39<4:43:48,  8.85s/it][h264 @ 0x556d97233bc0] mmco: unref short failure
  1%|          | 22/1945 [02:46<4:31:43,  8.48s/it][h264 @ 0x556d963958c0] mmco: unref short failure
[h264 @ 0x556d9e6a4700] mmco: unref short failure
[h264 @ 0x556d9e6a4700] mmco: unref short failure
[h264 @ 0x556d9d934840] mmco: unref short failure
[h264 @ 0x556d9d934840] mmco: unref short failure
[h264 @ 0x556d9d934840] mmco: unref short failure
[h264 @ 0x556d9d934840] mmco: unref short failure
  1%|          | 23/1945 [02:53<4:14:56,  7.96s/it][h264 @ 0x556d9e6a4900] mmco: unref short failure
[h264 @ 0x556d9e6a4900] mmco: unref short failure
[h264 @ 0x556d9e6a4900] mmco: unref short failure
[h264 @ 0x556d9e6a4900] mmco: unref short failure
[h264 @ 0x55b71ee197c0] mmco: unref short failure
[h264 @ 0x55e4501a12c0] mmco: unref short failure
[h264 @ 0x55e4501a12c0] mmco: unref short failure
[h264 @ 0x55e44d8ad380] mmco: unref short failure
[h264 @ 0x55e44d8ad380] mmco: unref short failure
[h264 @ 0x55b71db9ffc0] mmco: unref short failure
[h264 @ 0x55b71db9ffc0] mmco: unref short failure
[h264 @ 0x556d93394840] mmco: unref short failure
[h264 @ 0x556d93394840] mmco: unref short failure
[h264 @ 0x556d90890b80] mmco: unref short failure
[h264 @ 0x556d90890b80] mmco: unref short failure
[h264 @ 0x556da5a01ac0] mmco: unref short failure
[h264 @ 0x556da5a01ac0] mmco: unref short failure
  1%|          | 24/1945 [03:37<9:57:29, 18.66s/it]  1%|▏         | 25/1945 [03:46<8:25:17, 15.79s/it][h264 @ 0x556d91d80300] mmco: unref short failure
[h264 @ 0x55e44d89b740] mmco: unref short failure
[h264 @ 0x55e450ff6440] mmco: unref short failure
[h264 @ 0x556d9f4b8d80] mmco: unref short failure
[h264 @ 0x55e44db8bc80] mmco: unref short failure
[h264 @ 0x55e4486f3900] mmco: unref short failure
[h264 @ 0x55e4486f3900] mmco: unref short failure
[h264 @ 0x556d95e7ef80] mmco: unref short failure
[h264 @ 0x556d95e7ef80] mmco: unref short failure
[h264 @ 0x55b719d53480] mmco: unref short failure
[h264 @ 0x55b719d53480] mmco: unref short failure
[h264 @ 0x556da73b4cc0] mmco: unref short failure
[h264 @ 0x556da73b4cc0] mmco: unref short failure
[h264 @ 0x556da73b4cc0] mmco: unref short failure
[h264 @ 0x556da73b4cc0] mmco: unref short failure
[h264 @ 0x55e457c61c80] mmco: unref short failure
[h264 @ 0x55e457c61c80] mmco: unref short failure
[h264 @ 0x556da929da00] mmco: unref short failure
  1%|▏         | 26/1945 [04:20<11:26:45, 21.47s/it]  1%|▏         | 27/1945 [04:28<9:10:07, 17.21s/it]   1%|▏         | 28/1945 [04:35<7:32:53, 14.17s/it][h264 @ 0x55e454bd2300] mmco: unref short failure
  1%|▏         | 29/1945 [04:43<6:32:52, 12.30s/it][h264 @ 0x556d9e2a3f00] mmco: unref short failure
  2%|▏         | 30/1945 [04:54<6:22:03, 11.97s/it][h264 @ 0x55e459aaf700] mmco: unref short failure
[h264 @ 0x55e453584c40] mmco: unref short failure
[h264 @ 0x55b71fc811c0] mmco: unref short failure
  2%|▏         | 31/1945 [05:05<6:10:12, 11.61s/it][h264 @ 0x556da5f77f00] mmco: unref short failure
[h264 @ 0x556da5f77f00] mmco: unref short failure
[h264 @ 0x55b71e415100] mmco: unref short failure
[h264 @ 0x556d92d2e400] mmco: unref short failure
[h264 @ 0x556d92d2e400] mmco: unref short failure
[h264 @ 0x556d9aa5af40] mmco: unref short failure
[h264 @ 0x556d9aa5af40] mmco: unref short failure
[h264 @ 0x55b719d53680] mmco: unref short failure
[h264 @ 0x55b719d53680] mmco: unref short failure
[h264 @ 0x55b719d53680] mmco: unref short failure
[h264 @ 0x55b719d53680] mmco: unref short failure
[h264 @ 0x556d97192d00] mmco: unref short failure
[h264 @ 0x55e4519c9280] mmco: unref short failure
[h264 @ 0x556d9f95b100] mmco: unref short failure
[h264 @ 0x556d9f95b100] mmco: unref short failure
  2%|▏         | 32/1945 [05:40<9:58:08, 18.76s/it]  2%|▏         | 33/1945 [05:47<8:06:25, 15.26s/it][h264 @ 0x55b71dab5140] mmco: unref short failure
[h264 @ 0x55b71dab5140] mmco: unref short failure
[h264 @ 0x55e44d8859c0] mmco: unref short failure
[h264 @ 0x55e454f278c0] mmco: unref short failure
[h264 @ 0x55e454f278c0] mmco: unref short failure
[h264 @ 0x55e458a3a380] mmco: unref short failure
[h264 @ 0x55b717db6d40] mmco: unref short failure
[h264 @ 0x55b717db6d40] mmco: unref short failure
[h264 @ 0x55e450be6100] mmco: unref short failure
[h264 @ 0x556d930f73c0] mmco: unref short failure
[h264 @ 0x556d930f73c0] mmco: unref short failure
[h264 @ 0x55b717daf500] mmco: unref short failure
[h264 @ 0x55b717daf500] mmco: unref short failure
[h264 @ 0x55e455cf89c0] mmco: unref short failure
[h264 @ 0x556d8eece680] mmco: unref short failure
  2%|▏         | 34/1945 [06:32<12:51:40, 24.23s/it][h264 @ 0x556da15a0b00] mmco: unref short failure
  2%|▏         | 35/1945 [06:40<10:12:54, 19.25s/it][h264 @ 0x556d9d6d7500] mmco: unref short failure
[h264 @ 0x556d9d6d7500] mmco: unref short failure
[h264 @ 0x55e446f72f80] mmco: unref short failure
[h264 @ 0x55e446f72f80] mmco: unref short failure
[h264 @ 0x55e449ee0940] mmco: unref short failure
  2%|▏         | 36/1945 [06:48<8:25:59, 15.90s/it]   2%|▏         | 37/1945 [06:57<7:14:29, 13.66s/it][h264 @ 0x55e4594c71c0] mmco: unref short failure
[h264 @ 0x55e4594c71c0] mmco: unref short failure
  2%|▏         | 38/1945 [07:04<6:17:07, 11.87s/it][h264 @ 0x55e44db73440] mmco: unref short failure
[h264 @ 0x55e44db73440] mmco: unref short failure
[h264 @ 0x556d9af1ae80] mmco: unref short failure
[h264 @ 0x556d9af1ae80] mmco: unref short failure
[h264 @ 0x55e44b391640] mmco: unref short failure
[h264 @ 0x55b72082a6c0] mmco: unref short failure
[h264 @ 0x55b72082a6c0] mmco: unref short failure
  2%|▏         | 39/1945 [07:12<5:40:37, 10.72s/it][h264 @ 0x55b716076a80] mmco: unref short failure
[h264 @ 0x556da7cadf00] mmco: unref short failure
[h264 @ 0x556da17ce200] mmco: unref short failure
[h264 @ 0x556da17ce200] mmco: unref short failure
[h264 @ 0x556d9f6fcac0] mmco: unref short failure
[h264 @ 0x556d96335180] mmco: unref short failure
[h264 @ 0x556d96335180] mmco: unref short failure
[h264 @ 0x55e4542112c0] mmco: unref short failure
[h264 @ 0x55b7261be2c0] mmco: unref short failure
[h264 @ 0x55b7261be2c0] mmco: unref short failure
  2%|▏         | 40/1945 [07:43<8:46:40, 16.59s/it][h264 @ 0x556d9e4adc40] mmco: unref short failure
[h264 @ 0x556d9e4adc40] mmco: unref short failure
[h264 @ 0x55b72a97bd80] mmco: unref short failure
[h264 @ 0x55b72a97bd80] mmco: unref short failure
[h264 @ 0x55b72a97bd80] mmco: unref short failure
[h264 @ 0x55b72a97bd80] mmco: unref short failure
[h264 @ 0x556daf850b40] mmco: unref short failure
[h264 @ 0x556daf850b40] mmco: unref short failure
  2%|▏         | 41/1945 [07:50<7:18:14, 13.81s/it][h264 @ 0x55e44a0e65c0] mmco: unref short failure
[h264 @ 0x556da1b5ea00] mmco: unref short failure
[h264 @ 0x556da1b5ea00] mmco: unref short failure
[h264 @ 0x55e44c1e3680] mmco: unref short failure
[h264 @ 0x55e44c1e3680] mmco: unref short failure
[h264 @ 0x556dab2ca940] mmco: unref short failure
[h264 @ 0x55e45c47a400] mmco: unref short failure
[h264 @ 0x55e45e7d22c0] mmco: unref short failure
[h264 @ 0x55e44a612c00] mmco: unref short failure
[h264 @ 0x55b72080bf40] mmco: unref short failure
[h264 @ 0x556da06f7740] mmco: unref short failure
  2%|▏         | 42/1945 [08:32<11:50:45, 22.41s/it][h264 @ 0x556d9d949dc0] mmco: unref short failure
  2%|▏         | 43/1945 [08:40<9:26:54, 17.88s/it] [h264 @ 0x556da16ac640] mmco: unref short failure
[h264 @ 0x556da75e6440] mmco: unref short failure
[h264 @ 0x556da75e6440] mmco: unref short failure
  2%|▏         | 44/1945 [08:47<7:50:20, 14.85s/it][h264 @ 0x55b7177079c0] mmco: unref short failure
[h264 @ 0x55b7177079c0] mmco: unref short failure
[h264 @ 0x556da7f85f40] mmco: unref short failure
[h264 @ 0x556da7f85f40] mmco: unref short failure
[h264 @ 0x556da7f85f40] mmco: unref short failure
[h264 @ 0x556da7f85f40] mmco: unref short failure
[h264 @ 0x556d8e923cc0] mmco: unref short failure
  2%|▏         | 45/1945 [08:56<6:52:02, 13.01s/it][h264 @ 0x55e4507f3d00] mmco: unref short failure
  2%|▏         | 46/1945 [09:04<6:00:46, 11.40s/it][h264 @ 0x55b726027100] mmco: unref short failure
  2%|▏         | 47/1945 [09:11<5:24:53, 10.27s/it][h264 @ 0x55e44ee775c0] mmco: unref short failure
[h264 @ 0x556da2268a40] mmco: unref short failure
[h264 @ 0x556da2268a40] mmco: unref short failure
[h264 @ 0x556da2268a40] mmco: unref short failure
[h264 @ 0x556da06e7000] mmco: unref short failure
[h264 @ 0x556da06e7000] mmco: unref short failure
[h264 @ 0x556d91ceca40] mmco: unref short failure
[h264 @ 0x55b72ac6f240] mmco: unref short failure
[h264 @ 0x55b72ac6f240] mmco: unref short failure
[h264 @ 0x556d8e87ba40] mmco: unref short failure
[h264 @ 0x556d8e87ba40] mmco: unref short failure
  2%|▏         | 48/1945 [09:37<7:51:54, 14.93s/it][h264 @ 0x55b71731fd40] mmco: unref short failure
  3%|▎         | 49/1945 [09:45<6:41:45, 12.71s/it]09/09/2024 15:35:13 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 15:35:13 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b71eb959c0] mmco: unref short failure
[h264 @ 0x556da00e0fc0] mmco: unref short failure
[h264 @ 0x556da00e0fc0] mmco: unref short failure
[h264 @ 0x556d9f090c80] mmco: unref short failure
[h264 @ 0x556d9f090c80] mmco: unref short failure
[h264 @ 0x556da9ebcc00] mmco: unref short failure
[h264 @ 0x55e457421d80] mmco: unref short failure
[h264 @ 0x55e457421d80] mmco: unref short failure
[h264 @ 0x55b71a248e40] mmco: unref short failure
[h264 @ 0x55b71a248e40] mmco: unref short failure
[h264 @ 0x55b71ed26c00] mmco: unref short failure
[h264 @ 0x556da571cc00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e46112d5c0] mmco: unref short failure
[h264 @ 0x55b717d9c640] mmco: unref short failure
[h264 @ 0x55b72a20fd00] mmco: unref short failure
[h264 @ 0x556d99eb5e40] mmco: unref short failure
[h264 @ 0x556d99eb5e40] mmco: unref short failure
[h264 @ 0x556d98c88bc0] mmco: unref short failure
[h264 @ 0x556d904b0680] mmco: unref short failure
[h264 @ 0x556d904b0680] mmco: unref short failure
[h264 @ 0x55e44bc64540] mmco: unref short failure
[h264 @ 0x55e44bc64540] mmco: unref short failure
[h264 @ 0x55b71f0d1600] mmco: unref short failure
[h264 @ 0x55b71f0d1600] mmco: unref short failure
[h264 @ 0x556da29578c0] mmco: unref short failure
[h264 @ 0x556db125e700] mmco: unref short failure
[h264 @ 0x556db125e700] mmco: unref short failure
[h264 @ 0x556db125e700] mmco: unref short failure
[h264 @ 0x556db125e700] mmco: unref short failure
[h264 @ 0x556dab80e580] mmco: unref short failure
[h264 @ 0x556dab80e580] mmco: unref short failure
[h264 @ 0x556da8439580] mmco: unref short failure
[h264 @ 0x556da8439580] mmco: unref short failure
[h264 @ 0x55e46009b580] mmco: unref short failure
[h264 @ 0x55e46009b580] mmco: unref short failure
[h264 @ 0x556d8e920080] mmco: unref short failure
[h264 @ 0x556d8e920080] mmco: unref short failure
[h264 @ 0x55b716b53ac0] mmco: unref short failure
[h264 @ 0x556d95023b80] mmco: unref short failure
[h264 @ 0x556d95023b80] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:25,  8.51it/s][A
  1%|          | 2/221 [00:00<00:39,  5.51it/s][A
  1%|▏         | 3/221 [00:00<00:47,  4.59it/s][A
  2%|▏         | 5/221 [00:00<00:32,  6.56it/s][A
  3%|▎         | 6/221 [00:00<00:30,  7.16it/s][A
  3%|▎         | 7/221 [00:01<00:34,  6.17it/s][A
  4%|▎         | 8/221 [00:01<00:32,  6.51it/s][A
  4%|▍         | 9/221 [00:01<00:29,  7.22it/s][A
  5%|▍         | 10/221 [00:01<00:34,  6.11it/s][A
  5%|▍         | 11/221 [00:01<00:38,  5.42it/s][A
  5%|▌         | 12/221 [00:03<02:07,  1.64it/s][A
  6%|▋         | 14/221 [00:03<01:18,  2.62it/s][A
  7%|▋         | 15/221 [00:03<01:10,  2.92it/s][A
  7%|▋         | 16/221 [00:04<00:58,  3.48it/s][A[h264 @ 0x556da1dd6740] mmco: unref short failure
[h264 @ 0x556da1dd6740] mmco: unref short failure

  8%|▊         | 17/221 [00:04<00:58,  3.48it/s][A
  8%|▊         | 18/221 [00:04<00:51,  3.96it/s][A
  9%|▊         | 19/221 [00:04<00:44,  4.51it/s][A
  9%|▉         | 20/221 [00:04<00:37,  5.33it/s][A
 10%|▉         | 21/221 [00:04<00:36,  5.41it/s][A
 10%|▉         | 22/221 [00:07<03:13,  1.03it/s][A
 10%|█         | 23/221 [00:07<02:24,  1.37it/s][A
 11%|█         | 24/221 [00:08<01:49,  1.79it/s][A
 12%|█▏        | 26/221 [00:08<01:11,  2.71it/s][A[h264 @ 0x556d9fc4acc0] mmco: unref short failure

 12%|█▏        | 27/221 [00:08<01:05,  2.95it/s][A
 13%|█▎        | 28/221 [00:08<01:03,  3.03it/s][A
 13%|█▎        | 29/221 [00:09<00:59,  3.23it/s][A
 14%|█▎        | 30/221 [00:09<00:54,  3.48it/s][A
 14%|█▍        | 31/221 [00:09<00:49,  3.84it/s][A
 14%|█▍        | 32/221 [00:09<00:42,  4.48it/s][A
 15%|█▍        | 33/221 [00:09<00:36,  5.09it/s][A
 15%|█▌        | 34/221 [00:09<00:32,  5.69it/s][A
 16%|█▌        | 35/221 [00:10<00:28,  6.46it/s][A
 16%|█▋        | 36/221 [00:10<00:26,  7.02it/s][A
 17%|█▋        | 37/221 [00:10<00:26,  6.94it/s][A
 17%|█▋        | 38/221 [00:10<00:27,  6.64it/s][A
 18%|█▊        | 39/221 [00:10<00:28,  6.32it/s][A[h264 @ 0x55e44cad4200] mmco: unref short failure
[h264 @ 0x55e44cad4200] mmco: unref short failure
[h264 @ 0x55b721b109c0] mmco: unref short failure

 18%|█▊        | 40/221 [00:10<00:29,  6.13it/s][A
 19%|█▊        | 41/221 [00:11<00:31,  5.67it/s][A
 19%|█▉        | 42/221 [00:11<00:29,  6.13it/s][A
 19%|█▉        | 43/221 [00:11<00:25,  6.85it/s][A
 20%|█▉        | 44/221 [00:11<00:23,  7.40it/s][A
 20%|██        | 45/221 [00:11<00:35,  4.91it/s][A
 21%|██        | 46/221 [00:11<00:33,  5.27it/s][A[h264 @ 0x556d9de5b300] mmco: unref short failure

 21%|██▏       | 47/221 [00:16<04:16,  1.48s/it][A
 22%|██▏       | 48/221 [00:16<03:07,  1.08s/it][A
 22%|██▏       | 49/221 [00:16<02:19,  1.23it/s][A
 23%|██▎       | 50/221 [00:16<01:42,  1.66it/s][A
 24%|██▎       | 52/221 [00:17<01:02,  2.71it/s][A
 24%|██▍       | 53/221 [00:17<00:55,  3.03it/s][A[h264 @ 0x55b72acc23c0] mmco: unref short failure
[h264 @ 0x55b72acc23c0] mmco: unref short failure
[h264 @ 0x556dafdc6500] mmco: unref short failure

 24%|██▍       | 54/221 [00:20<03:14,  1.16s/it][A
 25%|██▍       | 55/221 [00:21<02:48,  1.01s/it][A
 25%|██▌       | 56/221 [00:21<02:10,  1.26it/s][A
 26%|██▌       | 57/221 [00:21<01:44,  1.57it/s][A
 26%|██▌       | 58/221 [00:22<01:26,  1.89it/s][A
 27%|██▋       | 59/221 [00:22<01:09,  2.32it/s][A[h264 @ 0x55b72e1a7580] mmco: unref short failure

 27%|██▋       | 60/221 [00:22<01:02,  2.58it/s][A
 28%|██▊       | 61/221 [00:22<00:54,  2.91it/s][A
 28%|██▊       | 62/221 [00:23<00:51,  3.10it/s][A
 29%|██▊       | 63/221 [00:23<00:45,  3.47it/s][A
 29%|██▉       | 64/221 [00:23<00:45,  3.48it/s][A
 29%|██▉       | 65/221 [00:23<00:41,  3.80it/s][A
 30%|██▉       | 66/221 [00:27<03:13,  1.25s/it][A
 30%|███       | 67/221 [00:27<02:39,  1.03s/it][A[h264 @ 0x556db4aa7480] mmco: unref short failure
[h264 @ 0x556db4aa7480] mmco: unref short failure

 31%|███       | 68/221 [00:28<02:02,  1.24it/s][A
 31%|███       | 69/221 [00:28<01:34,  1.60it/s][A
 32%|███▏      | 70/221 [00:28<01:11,  2.12it/s][A
 32%|███▏      | 71/221 [00:28<00:55,  2.70it/s][A
 33%|███▎      | 72/221 [00:28<00:44,  3.35it/s][A
 33%|███▎      | 73/221 [00:28<00:40,  3.69it/s][A
 33%|███▎      | 74/221 [00:29<00:33,  4.41it/s][A
 34%|███▍      | 75/221 [00:29<00:47,  3.05it/s][A
 34%|███▍      | 76/221 [00:29<00:39,  3.63it/s][A
 35%|███▍      | 77/221 [00:29<00:34,  4.23it/s][A
 35%|███▌      | 78/221 [00:30<00:29,  4.92it/s][A[h264 @ 0x556d9b2cf700] mmco: unref short failure
[h264 @ 0x556d9b2cf700] mmco: unref short failure

 36%|███▌      | 79/221 [00:30<00:34,  4.15it/s][A
 36%|███▌      | 80/221 [00:30<00:28,  4.87it/s][A
 37%|███▋      | 81/221 [00:30<00:25,  5.39it/s][A
 37%|███▋      | 82/221 [00:30<00:29,  4.68it/s][A
 38%|███▊      | 83/221 [00:31<00:31,  4.42it/s][A
 38%|███▊      | 84/221 [00:31<00:30,  4.44it/s][A
 38%|███▊      | 85/221 [00:31<00:30,  4.43it/s][A[h264 @ 0x55e451a52c80] mmco: unref short failure

 39%|███▉      | 86/221 [00:31<00:29,  4.56it/s][A
 39%|███▉      | 87/221 [00:31<00:26,  5.11it/s][A
 40%|███▉      | 88/221 [00:32<00:28,  4.63it/s][A
 40%|████      | 89/221 [00:32<00:28,  4.64it/s][A
 41%|████      | 90/221 [00:32<00:24,  5.26it/s][A
 42%|████▏     | 92/221 [00:32<00:21,  5.96it/s][A
 42%|████▏     | 93/221 [00:33<00:30,  4.20it/s][A
 43%|████▎     | 94/221 [00:33<00:27,  4.67it/s][A
 43%|████▎     | 95/221 [00:33<00:26,  4.72it/s][A
 43%|████▎     | 96/221 [00:33<00:27,  4.62it/s][A
 44%|████▍     | 97/221 [00:34<00:24,  5.06it/s][A
 44%|████▍     | 98/221 [00:34<00:22,  5.51it/s][A
 45%|████▍     | 99/221 [00:34<00:20,  6.08it/s][A
 45%|████▌     | 100/221 [00:34<00:17,  6.85it/s][A
 46%|████▌     | 102/221 [00:34<00:15,  7.89it/s][A
 47%|████▋     | 103/221 [00:34<00:14,  7.99it/s][A
 47%|████▋     | 104/221 [00:35<00:17,  6.53it/s][A
 48%|████▊     | 105/221 [00:35<00:17,  6.63it/s][A
 48%|████▊     | 106/221 [00:35<00:23,  4.82it/s][A
 48%|████▊     | 107/221 [00:35<00:22,  5.04it/s][A
 49%|████▉     | 108/221 [00:35<00:19,  5.79it/s][A
 49%|████▉     | 109/221 [00:35<00:17,  6.54it/s][A[h264 @ 0x55e455588880] mmco: unref short failure
[h264 @ 0x55e455588880] mmco: unref short failure

 50%|█████     | 111/221 [00:36<00:19,  5.74it/s][A
 51%|█████     | 112/221 [00:36<00:18,  5.93it/s][A
 51%|█████     | 113/221 [00:36<00:16,  6.60it/s][A
 52%|█████▏    | 114/221 [00:36<00:15,  6.74it/s][A
 52%|█████▏    | 115/221 [00:36<00:15,  7.02it/s][A[h264 @ 0x55b71731ffc0] mmco: unref short failure

 52%|█████▏    | 116/221 [00:41<02:28,  1.41s/it][A
 53%|█████▎    | 117/221 [00:41<01:53,  1.09s/it][A
 53%|█████▎    | 118/221 [00:41<01:23,  1.23it/s][A
 54%|█████▍    | 120/221 [00:42<00:50,  2.01it/s][A
 55%|█████▍    | 121/221 [00:42<00:42,  2.35it/s][A
 55%|█████▌    | 122/221 [00:42<00:36,  2.73it/s][A
 56%|█████▌    | 123/221 [00:42<00:29,  3.31it/s][A
 56%|█████▌    | 124/221 [00:42<00:25,  3.86it/s][A
 57%|█████▋    | 125/221 [00:43<00:33,  2.91it/s][A
 57%|█████▋    | 126/221 [00:43<00:35,  2.70it/s][A
 57%|█████▋    | 127/221 [00:44<00:39,  2.40it/s][A
 58%|█████▊    | 128/221 [00:44<00:43,  2.15it/s][A
 58%|█████▊    | 129/221 [00:45<00:35,  2.60it/s][A
 59%|█████▉    | 130/221 [00:45<00:29,  3.04it/s][A
 59%|█████▉    | 131/221 [00:45<00:25,  3.46it/s][A
 60%|█████▉    | 132/221 [00:45<00:24,  3.58it/s][A
 60%|██████    | 133/221 [00:45<00:23,  3.69it/s][A
 61%|██████    | 134/221 [00:46<00:25,  3.37it/s][A[h264 @ 0x55e457f3a440] mmco: unref short failure
[h264 @ 0x55e457f3a440] mmco: unref short failure

 61%|██████    | 135/221 [00:46<00:28,  3.05it/s][A
 62%|██████▏   | 136/221 [00:48<01:09,  1.23it/s][A
 62%|██████▏   | 137/221 [00:52<02:11,  1.57s/it][A
 62%|██████▏   | 138/221 [00:52<01:41,  1.23s/it][A
 63%|██████▎   | 139/221 [00:53<01:27,  1.06s/it][A
 63%|██████▎   | 140/221 [00:53<01:06,  1.22it/s][A
 64%|██████▍   | 141/221 [00:53<00:53,  1.50it/s][A
 64%|██████▍   | 142/221 [00:53<00:43,  1.81it/s][A
 65%|██████▍   | 143/221 [00:54<00:35,  2.20it/s][A
 66%|██████▌   | 145/221 [00:54<00:21,  3.58it/s][A
 67%|██████▋   | 147/221 [00:54<00:15,  4.71it/s][A
 67%|██████▋   | 148/221 [00:54<00:15,  4.60it/s][A
 68%|██████▊   | 150/221 [00:54<00:11,  6.25it/s][A
 68%|██████▊   | 151/221 [00:55<00:13,  5.11it/s][A
 69%|██████▉   | 152/221 [00:55<00:16,  4.29it/s][A
 69%|██████▉   | 153/221 [00:55<00:13,  4.94it/s][A
 70%|██████▉   | 154/221 [00:55<00:12,  5.42it/s][A
 70%|███████   | 155/221 [00:55<00:10,  6.09it/s][A[h264 @ 0x55e4506d94c0] mmco: unref short failure
[h264 @ 0x55e4506d94c0] mmco: unref short failure
[h264 @ 0x55b72b3c3b40] mmco: unref short failure

 71%|███████   | 157/221 [01:00<01:10,  1.10s/it][A
 71%|███████▏  | 158/221 [01:00<00:55,  1.14it/s][A
 72%|███████▏  | 159/221 [01:00<00:42,  1.47it/s][A
 73%|███████▎  | 161/221 [01:01<00:25,  2.32it/s][A
 74%|███████▍  | 163/221 [01:01<00:19,  3.02it/s][A
 74%|███████▍  | 164/221 [01:01<00:16,  3.44it/s][A
 75%|███████▍  | 165/221 [01:01<00:14,  3.94it/s][A
 75%|███████▌  | 166/221 [01:06<01:12,  1.32s/it][A[h264 @ 0x556dafea5cc0] mmco: unref short failure
[h264 @ 0x556dafea5cc0] mmco: unref short failure
[h264 @ 0x556dafea5cc0] mmco: unref short failure
[h264 @ 0x556dafea5cc0] mmco: unref short failure
[h264 @ 0x556d972d4e00] mmco: unref short failure

 76%|███████▌  | 168/221 [01:09<01:22,  1.56s/it][A
 77%|███████▋  | 170/221 [01:10<00:53,  1.05s/it][A
 77%|███████▋  | 171/221 [01:10<00:44,  1.13it/s][A
 78%|███████▊  | 173/221 [01:10<00:28,  1.70it/s][A
 79%|███████▉  | 175/221 [01:10<00:19,  2.41it/s][A
 80%|████████  | 177/221 [01:11<00:13,  3.19it/s][A
 81%|████████  | 178/221 [01:11<00:12,  3.38it/s][A[h264 @ 0x55e4610e33c0] mmco: unref short failure
[h264 @ 0x55e4610e33c0] mmco: unref short failure
[h264 @ 0x55e4610e33c0] mmco: unref short failure
[h264 @ 0x55e4610e33c0] mmco: unref short failure

 81%|████████  | 179/221 [01:15<00:44,  1.05s/it][A
 82%|████████▏ | 182/221 [01:15<00:22,  1.75it/s][A
 83%|████████▎ | 183/221 [01:15<00:18,  2.03it/s][A
 84%|████████▎ | 185/221 [01:15<00:12,  2.92it/s][A
 85%|████████▍ | 187/221 [01:15<00:08,  4.00it/s][A
 86%|████████▌ | 189/221 [01:15<00:06,  5.02it/s][A
 86%|████████▋ | 191/221 [01:16<00:04,  6.03it/s][A
 88%|████████▊ | 194/221 [01:16<00:03,  8.32it/s][A
 89%|████████▊ | 196/221 [01:16<00:02,  9.36it/s][A
 90%|█████████ | 199/221 [01:16<00:01, 11.42it/s][A
 91%|█████████ | 201/221 [01:16<00:01, 12.39it/s][A
 92%|█████████▏| 203/221 [01:16<00:01, 12.04it/s][A
 93%|█████████▎| 205/221 [01:17<00:01, 12.51it/s][A
 94%|█████████▎| 207/221 [01:17<00:01, 10.80it/s][A
 95%|█████████▍| 209/221 [01:17<00:01, 11.94it/s][A
 95%|█████████▌| 211/221 [01:17<00:00, 10.52it/s][A
 96%|█████████▋| 213/221 [01:17<00:00, 10.28it/s][A
 97%|█████████▋| 215/221 [01:18<00:00,  9.03it/s][A
 98%|█████████▊| 217/221 [01:22<00:02,  1.43it/s][A
 99%|█████████▉| 219/221 [01:22<00:01,  1.96it/s][A
100%|█████████▉| 220/221 [01:27<00:01,  1.22s/it][A100%|██████████| 221/221 [01:27<00:00,  2.54it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.78it/s][A
  1%|          | 2/221 [00:00<00:57,  3.78it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.78it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.79it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.79it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.78it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.78it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.78it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.79it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.78it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.79it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.79it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.79it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.79it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.79it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:51,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.78it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.78it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.78it/s][A
 19%|█▉        | 43/221 [00:11<00:47,  3.78it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.78it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.78it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.78it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.78it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.78it/s][A
 57%|█████▋    | 125/221 [00:32<00:25,  3.78it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.79it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.79it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.79it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.79it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.79it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.78it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.79it/s][A
 67%|██████▋   | 149/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.79it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.79it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.79it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.79it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.79it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.79it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.79it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 159/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.79it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.79it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.79it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.79it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.79it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.79it/s][A
 76%|███████▌  | 168/221 [00:44<00:13,  3.79it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.79it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.79it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.79it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.79it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.79it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 178/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.79it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.79it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.79it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.79it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.79it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.79it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.79it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.79it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.79it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.79it/s][A
 89%|████████▉ | 197/221 [00:51<00:06,  3.79it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.79it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.79it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.79it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.79it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.79it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.78it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.78it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.78it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.78it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.78it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.78it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.79it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  1%|          | 2/221 [00:00<00:49,  4.44it/s][A
  1%|▏         | 3/221 [00:00<00:54,  4.00it/s][A
  2%|▏         | 4/221 [00:00<00:44,  4.83it/s][A
  2%|▏         | 5/221 [00:01<00:44,  4.89it/s][A
  3%|▎         | 7/221 [00:01<00:41,  5.15it/s][A
  4%|▎         | 8/221 [00:01<00:48,  4.42it/s][A
  4%|▍         | 9/221 [00:01<00:44,  4.76it/s][A
  5%|▍         | 10/221 [00:02<01:02,  3.39it/s][A
  5%|▍         | 11/221 [00:02<00:59,  3.54it/s][A
  5%|▌         | 12/221 [00:02<00:54,  3.85it/s][A
  6%|▌         | 13/221 [00:03<01:07,  3.09it/s][A
  6%|▋         | 14/221 [00:03<01:01,  3.37it/s][A
  7%|▋         | 15/221 [00:03<00:58,  3.53it/s][A
  7%|▋         | 16/221 [00:04<01:04,  3.20it/s][A
  8%|▊         | 17/221 [00:04<01:18,  2.59it/s][A
  8%|▊         | 18/221 [00:05<01:07,  3.00it/s][A
  9%|▊         | 19/221 [00:05<01:02,  3.23it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.74it/s][A
 10%|▉         | 21/221 [00:05<00:51,  3.89it/s][A
 10%|▉         | 22/221 [00:05<00:51,  3.90it/s][A
 11%|█         | 24/221 [00:06<00:40,  4.87it/s][A
 11%|█▏        | 25/221 [00:06<00:41,  4.73it/s][A
 12%|█▏        | 26/221 [00:06<00:45,  4.26it/s][A
 12%|█▏        | 27/221 [00:06<00:41,  4.73it/s][A
 13%|█▎        | 28/221 [00:07<00:55,  3.49it/s][A
 13%|█▎        | 29/221 [00:07<00:51,  3.76it/s][A
 14%|█▎        | 30/221 [00:07<00:55,  3.45it/s][A
 14%|█▍        | 31/221 [00:08<00:51,  3.67it/s][A
 14%|█▍        | 32/221 [00:08<00:43,  4.37it/s][A
 15%|█▍        | 33/221 [00:08<00:41,  4.50it/s][A
 15%|█▌        | 34/221 [00:08<00:38,  4.92it/s][A
 16%|█▌        | 35/221 [00:08<00:45,  4.10it/s][A
 16%|█▋        | 36/221 [00:09<00:50,  3.70it/s][A
 17%|█▋        | 37/221 [00:09<00:44,  4.11it/s][A
 17%|█▋        | 38/221 [00:09<00:43,  4.19it/s][A
 18%|█▊        | 39/221 [00:09<00:40,  4.48it/s][A
 18%|█▊        | 40/221 [00:10<00:50,  3.60it/s][A
 19%|█▊        | 41/221 [00:10<00:52,  3.45it/s][A
 19%|█▉        | 42/221 [00:10<00:43,  4.10it/s][A
 19%|█▉        | 43/221 [00:10<00:41,  4.32it/s][A
 20%|█▉        | 44/221 [00:11<00:39,  4.47it/s][A
 20%|██        | 45/221 [00:11<00:44,  3.92it/s][A
 21%|██        | 46/221 [00:11<00:44,  3.94it/s][A
 21%|██▏       | 47/221 [00:11<00:42,  4.07it/s][A
 22%|██▏       | 48/221 [00:12<00:36,  4.73it/s][A
 22%|██▏       | 49/221 [00:12<00:35,  4.79it/s][A
 23%|██▎       | 50/221 [00:12<00:50,  3.41it/s][A
 23%|██▎       | 51/221 [00:12<00:40,  4.16it/s][A
 24%|██▎       | 52/221 [00:13<00:40,  4.21it/s][A
 24%|██▍       | 53/221 [00:13<00:38,  4.33it/s][A
 24%|██▍       | 54/221 [00:13<00:42,  3.89it/s][A
 25%|██▍       | 55/221 [00:13<00:42,  3.88it/s][A
 25%|██▌       | 56/221 [00:14<00:38,  4.29it/s][A
 26%|██▌       | 57/221 [00:14<00:37,  4.32it/s][A
 26%|██▌       | 58/221 [00:14<00:43,  3.77it/s][A
 27%|██▋       | 59/221 [00:14<00:38,  4.20it/s][A
 27%|██▋       | 60/221 [00:15<00:33,  4.82it/s][A
 28%|██▊       | 61/221 [00:15<00:33,  4.80it/s][A
 28%|██▊       | 62/221 [00:15<00:37,  4.28it/s][A
 29%|██▊       | 63/221 [00:15<00:36,  4.36it/s][A
 29%|██▉       | 64/221 [00:16<00:42,  3.72it/s][A
 29%|██▉       | 65/221 [00:16<00:40,  3.87it/s][A
 30%|██▉       | 66/221 [00:16<00:48,  3.18it/s][A
 30%|███       | 67/221 [00:17<00:47,  3.27it/s][A
 31%|███       | 68/221 [00:17<00:41,  3.70it/s][A
 31%|███       | 69/221 [00:17<00:56,  2.70it/s][A
 32%|███▏      | 70/221 [00:18<00:51,  2.92it/s][A
 32%|███▏      | 71/221 [00:18<00:45,  3.33it/s][A
 33%|███▎      | 72/221 [00:18<00:50,  2.96it/s][A
 33%|███▎      | 73/221 [00:18<00:45,  3.24it/s][A
 33%|███▎      | 74/221 [00:19<00:37,  3.96it/s][A
 34%|███▍      | 75/221 [00:19<00:37,  3.92it/s][A
 34%|███▍      | 76/221 [00:19<00:34,  4.25it/s][A
 35%|███▍      | 77/221 [00:20<00:43,  3.31it/s][A
 35%|███▌      | 78/221 [00:20<00:38,  3.73it/s][A
 36%|███▌      | 79/221 [00:20<00:49,  2.87it/s][A
 36%|███▌      | 80/221 [00:21<00:46,  3.01it/s][A
 37%|███▋      | 81/221 [00:21<00:39,  3.53it/s][A
 37%|███▋      | 82/221 [00:21<00:41,  3.38it/s][A
 38%|███▊      | 83/221 [00:21<00:41,  3.36it/s][A
 38%|███▊      | 84/221 [00:22<00:40,  3.37it/s][A
 38%|███▊      | 85/221 [00:22<00:34,  3.93it/s][A
 39%|███▉      | 86/221 [00:22<00:32,  4.21it/s][A
 39%|███▉      | 87/221 [00:22<00:34,  3.90it/s][A
 40%|███▉      | 88/221 [00:23<00:42,  3.10it/s][A
 40%|████      | 89/221 [00:23<00:43,  3.00it/s][A
 41%|████      | 90/221 [00:23<00:39,  3.32it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.75it/s][A
 42%|████▏     | 92/221 [00:24<00:37,  3.41it/s][A
 42%|████▏     | 93/221 [00:24<00:44,  2.87it/s][A
 43%|████▎     | 94/221 [00:25<00:46,  2.72it/s][A
 43%|████▎     | 95/221 [00:25<00:43,  2.91it/s][A
 43%|████▎     | 96/221 [00:25<00:41,  3.02it/s][A
 44%|████▍     | 97/221 [00:26<00:38,  3.24it/s][A
 44%|████▍     | 98/221 [00:26<00:47,  2.59it/s][A
 45%|████▍     | 99/221 [00:27<00:50,  2.43it/s][A
 45%|████▌     | 100/221 [00:27<00:46,  2.60it/s][A
 46%|████▌     | 101/221 [00:27<00:41,  2.89it/s][A
 46%|████▌     | 102/221 [00:28<00:45,  2.63it/s][A
 47%|████▋     | 103/221 [00:28<00:37,  3.15it/s][A
 47%|████▋     | 104/221 [00:28<00:34,  3.37it/s][A
 48%|████▊     | 105/221 [00:29<00:37,  3.07it/s][A
 48%|████▊     | 106/221 [00:29<00:35,  3.25it/s][A
 48%|████▊     | 107/221 [00:29<00:33,  3.41it/s][A
 49%|████▉     | 108/221 [00:29<00:32,  3.47it/s][A
 49%|████▉     | 109/221 [00:29<00:27,  4.03it/s][A
 50%|████▉     | 110/221 [00:30<00:28,  3.86it/s][A
 50%|█████     | 111/221 [00:30<00:31,  3.51it/s][A
 51%|█████     | 112/221 [00:30<00:31,  3.49it/s][A
 51%|█████     | 113/221 [00:31<00:27,  3.95it/s][A
 52%|█████▏    | 114/221 [00:31<00:22,  4.70it/s][A
 52%|█████▏    | 115/221 [00:31<00:24,  4.41it/s][A
 52%|█████▏    | 116/221 [00:31<00:25,  4.08it/s][A
 53%|█████▎    | 117/221 [00:32<00:26,  3.93it/s][A
 53%|█████▎    | 118/221 [00:32<00:25,  4.06it/s][A
 54%|█████▍    | 119/221 [00:32<00:28,  3.54it/s][A
 54%|█████▍    | 120/221 [00:32<00:26,  3.88it/s][A
 55%|█████▍    | 121/221 [00:32<00:22,  4.53it/s][A
 55%|█████▌    | 122/221 [00:33<00:22,  4.37it/s][A
 56%|█████▌    | 123/221 [00:33<00:22,  4.31it/s][A
 56%|█████▌    | 124/221 [00:33<00:25,  3.76it/s][A
 57%|█████▋    | 125/221 [00:34<00:27,  3.43it/s][A
 57%|█████▋    | 126/221 [00:34<00:25,  3.77it/s][A
 57%|█████▋    | 127/221 [00:34<00:28,  3.25it/s][A
 58%|█████▊    | 128/221 [00:35<00:27,  3.35it/s][A
 58%|█████▊    | 129/221 [00:35<00:22,  4.02it/s][A
 59%|█████▉    | 130/221 [00:35<00:22,  4.01it/s][A
 59%|█████▉    | 131/221 [00:35<00:18,  4.76it/s][A
 60%|█████▉    | 132/221 [00:35<00:25,  3.48it/s][A
 60%|██████    | 133/221 [00:36<00:26,  3.32it/s][A
 61%|██████    | 134/221 [00:36<00:29,  2.93it/s][A
 61%|██████    | 135/221 [00:37<00:28,  2.99it/s][A
 62%|██████▏   | 136/221 [00:37<00:26,  3.19it/s][A
 62%|██████▏   | 137/221 [00:37<00:24,  3.48it/s][A
 62%|██████▏   | 138/221 [00:37<00:25,  3.23it/s][A
 63%|██████▎   | 139/221 [00:38<00:26,  3.14it/s][A
 63%|██████▎   | 140/221 [00:38<00:26,  3.02it/s][A
 64%|██████▍   | 141/221 [00:38<00:25,  3.11it/s][A
 64%|██████▍   | 142/221 [00:39<00:22,  3.48it/s][A
 65%|██████▍   | 143/221 [00:39<00:24,  3.22it/s][A
 65%|██████▌   | 144/221 [00:39<00:25,  3.07it/s][A
 66%|██████▌   | 145/221 [00:40<00:21,  3.47it/s][A
 66%|██████▌   | 146/221 [00:40<00:17,  4.19it/s][A
 67%|██████▋   | 147/221 [00:40<00:19,  3.75it/s][A
 67%|██████▋   | 148/221 [00:40<00:23,  3.06it/s][A
 67%|██████▋   | 149/221 [00:41<00:24,  2.94it/s][A
 68%|██████▊   | 150/221 [00:41<00:23,  3.06it/s][A
 68%|██████▊   | 151/221 [00:42<00:24,  2.83it/s][A
 69%|██████▉   | 152/221 [00:42<00:25,  2.75it/s][A
 69%|██████▉   | 153/221 [00:42<00:20,  3.28it/s][A
 70%|██████▉   | 154/221 [00:42<00:18,  3.71it/s][A
 70%|███████   | 155/221 [00:43<00:17,  3.75it/s][A
 71%|███████   | 156/221 [00:43<00:17,  3.63it/s][A
 71%|███████   | 157/221 [00:43<00:18,  3.43it/s][A
 71%|███████▏  | 158/221 [00:43<00:18,  3.43it/s][A
 72%|███████▏  | 159/221 [00:44<00:14,  4.14it/s][A
 72%|███████▏  | 160/221 [00:44<00:13,  4.44it/s][A
 73%|███████▎  | 161/221 [00:44<00:12,  4.66it/s][A
 73%|███████▎  | 162/221 [00:44<00:10,  5.51it/s][A
 74%|███████▍  | 163/221 [00:44<00:12,  4.63it/s][A
 74%|███████▍  | 164/221 [00:45<00:12,  4.49it/s][A
 75%|███████▍  | 165/221 [00:45<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:45<00:14,  3.86it/s][A
 76%|███████▌  | 167/221 [00:45<00:12,  4.30it/s][A
 76%|███████▌  | 168/221 [00:46<00:11,  4.47it/s][A
 76%|███████▋  | 169/221 [00:46<00:10,  5.10it/s][A
 77%|███████▋  | 170/221 [00:46<00:13,  3.82it/s][A
 77%|███████▋  | 171/221 [00:46<00:12,  3.94it/s][A
 78%|███████▊  | 172/221 [00:47<00:13,  3.59it/s][A
 78%|███████▊  | 173/221 [00:47<00:15,  3.14it/s][A
 79%|███████▊  | 174/221 [00:47<00:15,  3.02it/s][A
 79%|███████▉  | 175/221 [00:48<00:14,  3.17it/s][A
 80%|███████▉  | 176/221 [00:48<00:12,  3.67it/s][A
 80%|████████  | 177/221 [00:48<00:11,  3.92it/s][A
 81%|████████  | 178/221 [00:49<00:13,  3.17it/s][A
 81%|████████  | 179/221 [00:49<00:13,  3.21it/s][A
 81%|████████▏ | 180/221 [00:49<00:11,  3.60it/s][A
 82%|████████▏ | 181/221 [00:49<00:10,  3.94it/s][A
 82%|████████▏ | 182/221 [00:50<00:11,  3.30it/s][A
 83%|████████▎ | 183/221 [00:50<00:11,  3.19it/s][A
 83%|████████▎ | 184/221 [00:50<00:10,  3.48it/s][A
 84%|████████▎ | 185/221 [00:50<00:09,  3.95it/s][A
 84%|████████▍ | 186/221 [00:51<00:12,  2.76it/s][A
 85%|████████▍ | 187/221 [00:51<00:11,  2.92it/s][A
 85%|████████▌ | 188/221 [00:52<00:10,  3.09it/s][A
 86%|████████▌ | 189/221 [00:52<00:09,  3.30it/s][A
 86%|████████▌ | 190/221 [00:52<00:09,  3.37it/s][A
 86%|████████▋ | 191/221 [00:52<00:07,  3.93it/s][A
 87%|████████▋ | 192/221 [00:53<00:07,  3.80it/s][A
 87%|████████▋ | 193/221 [00:53<00:06,  4.33it/s][A
 88%|████████▊ | 194/221 [00:53<00:06,  4.31it/s][A
 88%|████████▊ | 195/221 [00:53<00:06,  3.96it/s][A
 89%|████████▊ | 196/221 [00:54<00:07,  3.50it/s][A
 89%|████████▉ | 197/221 [00:54<00:06,  3.83it/s][A
 90%|████████▉ | 198/221 [00:54<00:06,  3.36it/s][A
 90%|█████████ | 199/221 [00:55<00:06,  3.22it/s][A
 90%|█████████ | 200/221 [00:55<00:06,  3.15it/s][A
 91%|█████████ | 201/221 [00:55<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:56<00:06,  3.05it/s][A
 92%|█████████▏| 203/221 [00:56<00:05,  3.36it/s][A
 92%|█████████▏| 204/221 [00:56<00:04,  3.57it/s][A
 93%|█████████▎| 205/221 [00:56<00:03,  4.15it/s][A
 93%|█████████▎| 206/221 [00:57<00:04,  3.62it/s][A
 94%|█████████▎| 207/221 [00:57<00:04,  3.49it/s][A
 94%|█████████▍| 208/221 [00:57<00:04,  3.24it/s][A
 95%|█████████▍| 209/221 [00:58<00:03,  3.28it/s][A
 95%|█████████▌| 210/221 [00:58<00:02,  3.96it/s][A
 95%|█████████▌| 211/221 [00:58<00:02,  3.43it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  3.55it/s][A
 96%|█████████▋| 213/221 [00:58<00:01,  4.00it/s][A
 97%|█████████▋| 214/221 [00:59<00:02,  3.28it/s][A
 97%|█████████▋| 215/221 [00:59<00:01,  3.64it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  3.27it/s][A
 98%|█████████▊| 217/221 [01:00<00:01,  3.06it/s][A
 99%|█████████▊| 218/221 [01:00<00:00,  3.17it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  3.23it/s][A
100%|█████████▉| 220/221 [01:01<00:00,  3.38it/s][A
100%|██████████| 221/221 [01:01<00:00,  3.22it/s][A100%|██████████| 221/221 [01:01<00:00,  3.59it/s]
09/09/2024 15:41:14 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 49--===========

09/09/2024 15:41:14 - INFO - __main__ -   {'area_r1': 33.4, 'area_recall': '33.4/54.1/61.7', 'area_ravg': 49.7}
09/09/2024 15:41:14 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 49--===========

09/09/2024 15:41:14 - INFO - __main__ -   {'forward_r1': 37.9, 'forward_recall': '37.9/68.3/77.8', 'forward_ravg': 61.3}
09/09/2024 15:41:14 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 49--===========

09/09/2024 15:41:14 - INFO - __main__ -   {'area_video_r1': 37.6, 'area_video_recall': '37.6/67.8/78.4', 'area_video_ravg': 61.2}
09/09/2024 15:41:14 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 49=======

09/09/2024 15:41:14 - INFO - __main__ -   {'area_video_r1': 37.6, 'area_video_recall': '37.6/67.8/78.4', 'area_video_ravg': 61.2}
09/09/2024 15:41:14 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 49--===========

09/09/2024 15:41:14 - INFO - __main__ -   {'area_video_r1': 48.9, 'area_video_recall': '48.9/71.5/77.6', 'area_video_ravg': 66.0, 'area_video_back_r1': 45.7, 'area_video_back_recall': '45.7/70.2/80.1', 'area_video_back_ravg': 65.3}
09/09/2024 15:41:14 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 49=======

09/09/2024 15:41:14 - INFO - __main__ -   {'area_video_r1': 48.9, 'area_video_recall': '48.9/71.5/77.6', 'area_video_ravg': 66.0, 'area_video_back_r1': 45.7, 'area_video_back_recall': '45.7/70.2/80.1', 'area_video_back_ravg': 65.3}
09/09/2024 15:41:14 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 49--===========

09/09/2024 15:41:14 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 15:41:14 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 15:41:14 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 15:41:14 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 49--===========

09/09/2024 15:41:14 - INFO - __main__ -   {'video_r1': 49.5, 'video_recall': '49.5/73.5/81.2', 'video_ravg': 68.1}
09/09/2024 15:41:14 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 49=======

09/09/2024 15:41:14 - INFO - __main__ -   {'video_r1': 49.5, 'video_recall': '49.5/73.5/81.2', 'video_ravg': 68.1}
09/09/2024 15:41:54 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.7320929765701294, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.027750693261623383, 'loss_ret%tv%ta--finetune_area/loss_area': 4.111580848693848, 'loss_ret%tv%ta--finetune_area/total_loss': 5.871424674987793}
  3%|▎         | 50/1945 [16:28<68:23:24, 129.92s/it][h264 @ 0x55e44c0ce380] mmco: unref short failure
[h264 @ 0x55e44c0ce380] mmco: unref short failure
  3%|▎         | 51/1945 [16:32<48:30:22, 92.20s/it] [h264 @ 0x55b720203040] mmco: unref short failure
[h264 @ 0x55b720203040] mmco: unref short failure
  3%|▎         | 52/1945 [16:37<34:41:56, 65.99s/it]  3%|▎         | 53/1945 [16:42<25:03:27, 47.68s/it]  3%|▎         | 54/1945 [16:49<18:32:39, 35.30s/it][h264 @ 0x556d8f7c2bc0] mmco: unref short failure
[h264 @ 0x556d8f7c2bc0] mmco: unref short failure
[h264 @ 0x55b72b66e900] mmco: unref short failure
[h264 @ 0x55b72b66e900] mmco: unref short failure
  3%|▎         | 55/1945 [16:55<14:02:23, 26.74s/it]  3%|▎         | 56/1945 [17:02<10:50:57, 20.68s/it][h264 @ 0x556da28d2340] mmco: unref short failure
[h264 @ 0x556da28d2340] mmco: unref short failure
[h264 @ 0x556d8e504bc0] mmco: unref short failure
  3%|▎         | 57/1945 [17:10<8:56:16, 17.04s/it] [h264 @ 0x55b720202b80] mmco: unref short failure
[h264 @ 0x55b720202b80] mmco: unref short failure
  3%|▎         | 58/1945 [17:19<7:35:14, 14.48s/it]  3%|▎         | 59/1945 [17:27<6:36:30, 12.61s/it]  3%|▎         | 60/1945 [17:35<5:47:52, 11.07s/it][h264 @ 0x556d8f22d600] mmco: unref short failure
  3%|▎         | 61/1945 [17:42<5:08:38,  9.83s/it][h264 @ 0x55b7178b6280] mmco: unref short failure
[h264 @ 0x55b7178b6280] mmco: unref short failure
[h264 @ 0x55b72046f600] mmco: unref short failure
  3%|▎         | 62/1945 [17:49<4:44:44,  9.07s/it]  3%|▎         | 63/1945 [17:57<4:32:01,  8.67s/it][h264 @ 0x55b72882f640] mmco: unref short failure
  3%|▎         | 64/1945 [18:04<4:16:32,  8.18s/it][h264 @ 0x556d976aa180] mmco: unref short failure
  3%|▎         | 65/1945 [18:10<4:01:44,  7.71s/it][h264 @ 0x556db5744a40] mmco: unref short failure
[h264 @ 0x556db2ee7c00] mmco: unref short failure
[h264 @ 0x556db2ee7c00] mmco: unref short failure
[h264 @ 0x55b727dbb9c0] mmco: unref short failure
[h264 @ 0x55b727dbb9c0] mmco: unref short failure
  3%|▎         | 66/1945 [18:18<3:59:54,  7.66s/it][h264 @ 0x556db56747c0] mmco: unref short failure
  3%|▎         | 67/1945 [18:24<3:45:28,  7.20s/it]  3%|▎         | 68/1945 [18:30<3:37:47,  6.96s/it][h264 @ 0x556da33d4780] mmco: unref short failure
[h264 @ 0x556da33d4780] mmco: unref short failure
[h264 @ 0x55b726d099c0] mmco: unref short failure
[h264 @ 0x556d9fa97500] mmco: unref short failure
[h264 @ 0x55b72882ff40] mmco: unref short failure
  4%|▎         | 69/1945 [18:43<4:28:55,  8.60s/it][h264 @ 0x55b731709640] mmco: unref short failure
[h264 @ 0x55b731709640] mmco: unref short failure
[h264 @ 0x55b731709640] mmco: unref short failure
[h264 @ 0x55b731709640] mmco: unref short failure
[h264 @ 0x556dad6ed540] mmco: unref short failure
[h264 @ 0x556dad6ed540] mmco: unref short failure
[h264 @ 0x556dad6ed540] mmco: unref short failure
[h264 @ 0x556dad6ed540] mmco: unref short failure
[h264 @ 0x55e44e78e940] mmco: unref short failure
[h264 @ 0x55e44e78e940] mmco: unref short failure
[h264 @ 0x55e447ed7500] mmco: unref short failure
[h264 @ 0x55e4543e5580] mmco: unref short failure
[h264 @ 0x55e4543e5580] mmco: unref short failure
  4%|▎         | 70/1945 [18:58<5:33:12, 10.66s/it]  4%|▎         | 71/1945 [19:05<4:57:49,  9.54s/it][h264 @ 0x556db63865c0] mmco: unref short failure
[h264 @ 0x556db63865c0] mmco: unref short failure
[h264 @ 0x556db63865c0] mmco: unref short failure
[h264 @ 0x556db63865c0] mmco: unref short failure
[h264 @ 0x55b72afd0240] mmco: unref short failure
[h264 @ 0x55b72afd0240] mmco: unref short failure
[h264 @ 0x556d90396300] mmco: unref short failure
[h264 @ 0x55e457315e80] mmco: unref short failure
[h264 @ 0x55e457315e80] mmco: unref short failure
  4%|▎         | 72/1945 [19:12<4:31:16,  8.69s/it][h264 @ 0x55b716214640] mmco: unref short failure
[h264 @ 0x55b716214640] mmco: unref short failure
  4%|▍         | 73/1945 [19:19<4:18:16,  8.28s/it][h264 @ 0x55b722be0e40] mmco: unref short failure
[h264 @ 0x55b722be0e40] mmco: unref short failure
[h264 @ 0x556d95a5ef00] mmco: unref short failure
[h264 @ 0x556da83cc9c0] mmco: unref short failure
[h264 @ 0x556da83cc9c0] mmco: unref short failure
[h264 @ 0x55b725fa7cc0] mmco: unref short failure
[h264 @ 0x55e4604ae340] mmco: unref short failure
[h264 @ 0x55e4604ae340] mmco: unref short failure
[h264 @ 0x55b71f5e92c0] mmco: unref short failure
[h264 @ 0x55b71f5e92c0] mmco: unref short failure
[h264 @ 0x556da83cc7c0] mmco: unref short failure
[h264 @ 0x556da83cc7c0] mmco: unref short failure
[h264 @ 0x556d9158f080] mmco: unref short failure
[h264 @ 0x556db5673e80] mmco: unref short failure
[h264 @ 0x55e44e5f7580] mmco: unref short failure
[h264 @ 0x556db14600c0] mmco: unref short failure
[h264 @ 0x556db14600c0] mmco: unref short failure
[h264 @ 0x556db14600c0] mmco: unref short failure
[h264 @ 0x55e45bba5580] mmco: unref short failure
[h264 @ 0x55e45bba5580] mmco: unref short failure
[h264 @ 0x556da7625680] mmco: unref short failure
[h264 @ 0x556da7625680] mmco: unref short failure
[h264 @ 0x556da7625680] mmco: unref short failure
[h264 @ 0x556da7625680] mmco: unref short failure
[h264 @ 0x55e447c58640] mmco: unref short failure
[h264 @ 0x556d95023640] mmco: unref short failure
[h264 @ 0x556d95023640] mmco: unref short failure
[h264 @ 0x556da7b02d00] mmco: unref short failure
[h264 @ 0x556da7b02d00] mmco: unref short failure
[h264 @ 0x556db566cb00] mmco: unref short failure
[h264 @ 0x556db5d4b9c0] mmco: unref short failure
[h264 @ 0x556db5d4b9c0] mmco: unref short failure
[h264 @ 0x55e4543e5780] mmco: unref short failure
[h264 @ 0x556d90272d80] mmco: unref short failure
[h264 @ 0x556d90272d80] mmco: unref short failure
[h264 @ 0x556d90272d80] mmco: unref short failure
[h264 @ 0x556d90272d80] mmco: unref short failure
[h264 @ 0x55b71b139480] mmco: unref short failure
[h264 @ 0x556db622da80] mmco: unref short failure
  4%|▍         | 74/1945 [20:17<12:01:14, 23.13s/it]  4%|▍         | 75/1945 [20:25<9:38:06, 18.55s/it] [h264 @ 0x55b72ec71980] mmco: unref short failure
[h264 @ 0x55b72ec71980] mmco: unref short failure
[h264 @ 0x55b72ec71980] mmco: unref short failure
[h264 @ 0x55b72ec71980] mmco: unref short failure
[h264 @ 0x556da56e1280] mmco: unref short failure
[h264 @ 0x556da56e1280] mmco: unref short failure
  4%|▍         | 76/1945 [20:32<7:55:15, 15.26s/it][h264 @ 0x55e45f65e0c0] mmco: unref short failure
[h264 @ 0x55b71bba9b40] mmco: unref short failure
[h264 @ 0x55b728dec1c0] mmco: unref short failure
[h264 @ 0x55b714e67340] mmco: unref short failure
[h264 @ 0x55b714e67340] mmco: unref short failure
[h264 @ 0x556d8e1a3080] mmco: unref short failure
[h264 @ 0x556d8e1a3080] mmco: unref short failure
  4%|▍         | 77/1945 [20:47<7:44:51, 14.93s/it][h264 @ 0x556da41be780] mmco: unref short failure
[h264 @ 0x55b71d8b7340] mmco: unref short failure
[h264 @ 0x55b7174582c0] mmco: unref short failure
[h264 @ 0x55b7174582c0] mmco: unref short failure
[h264 @ 0x55e46164b700] mmco: unref short failure
[h264 @ 0x55e46164b700] mmco: unref short failure
[h264 @ 0x55e45e250900] mmco: unref short failure
[h264 @ 0x55e45e250900] mmco: unref short failure
[h264 @ 0x55e45e250900] mmco: unref short failure
[h264 @ 0x55e45e250900] mmco: unref short failure
[h264 @ 0x55e45e250900] mmco: unref short failure
[h264 @ 0x55e45e250900] mmco: unref short failure
[h264 @ 0x55e45e250900] mmco: unref short failure
[h264 @ 0x55e45e250900] mmco: unref short failure
[h264 @ 0x55e45e250900] mmco: unref short failure
[h264 @ 0x55e45e250900] mmco: unref short failure
  4%|▍         | 78/1945 [21:05<8:18:50, 16.03s/it][h264 @ 0x556d97209a80] mmco: unref short failure
[h264 @ 0x556d97209a80] mmco: unref short failure
  4%|▍         | 79/1945 [21:12<6:50:18, 13.19s/it]  4%|▍         | 80/1945 [21:20<5:59:32, 11.57s/it]  4%|▍         | 81/1945 [21:27<5:17:26, 10.22s/it][h264 @ 0x55e461828f80] mmco: unref short failure
[h264 @ 0x55e461828f80] mmco: unref short failure
[h264 @ 0x55b720878ec0] mmco: unref short failure
[h264 @ 0x556dad434000] mmco: unref short failure
[h264 @ 0x556dad434000] mmco: unref short failure
[h264 @ 0x55e45e583d00] mmco: unref short failure
[h264 @ 0x55e45e583d00] mmco: unref short failure
[h264 @ 0x556d9e288240] mmco: unref short failure
[h264 @ 0x556d9e288240] mmco: unref short failure
[h264 @ 0x556dafbb7540] mmco: unref short failure
[h264 @ 0x556dafbb7540] mmco: unref short failure
[h264 @ 0x55b72b364500] mmco: unref short failure
[h264 @ 0x55b72b364500] mmco: unref short failure
[h264 @ 0x55e46190c580] mmco: unref short failure
[h264 @ 0x55e46190c580] mmco: unref short failure
[h264 @ 0x55e46190c580] mmco: unref short failure
[h264 @ 0x556db7644ec0] mmco: unref short failure
[h264 @ 0x556db7644ec0] mmco: unref short failure
[h264 @ 0x55e4637487c0] mmco: unref short failure
[h264 @ 0x55e4637487c0] mmco: unref short failure
[h264 @ 0x556da0fb62c0] mmco: unref short failure
[h264 @ 0x556da0fb62c0] mmco: unref short failure
[h264 @ 0x556da0fb62c0] mmco: unref short failure
[h264 @ 0x556da0fb62c0] mmco: unref short failure
not have audios 7wavFXW3AFw.7
[h264 @ 0x55b725671040] mmco: unref short failure
[h264 @ 0x55b725671040] mmco: unref short failure
[h264 @ 0x556da7f0afc0] mmco: unref short failure
[h264 @ 0x556da7f0afc0] mmco: unref short failure
[h264 @ 0x55b72fbe7440] mmco: unref short failure
[h264 @ 0x55b72b149fc0] mmco: unref short failure
  4%|▍         | 82/1945 [22:24<12:34:15, 24.29s/it][h264 @ 0x556da6b3db80] mmco: unref short failure
[h264 @ 0x556da6b3db80] mmco: unref short failure
[h264 @ 0x556da4136e40] mmco: unref short failure
[h264 @ 0x556da4136e40] mmco: unref short failure
  4%|▍         | 83/1945 [22:32<10:01:58, 19.40s/it]  4%|▍         | 84/1945 [22:39<8:05:32, 15.65s/it] [h264 @ 0x55b71ecf9d40] mmco: unref short failure
[h264 @ 0x55b71aaa95c0] mmco: unref short failure
  4%|▍         | 85/1945 [22:51<7:35:49, 14.70s/it][h264 @ 0x55b72cf0d440] mmco: unref short failure
  4%|▍         | 86/1945 [23:10<8:14:00, 15.94s/it][h264 @ 0x556db154bb00] mmco: unref short failure
[h264 @ 0x556db154bb00] mmco: unref short failure
[h264 @ 0x55b731012cc0] mmco: unref short failure
[h264 @ 0x55b731012cc0] mmco: unref short failure
[h264 @ 0x556d9fb4b9c0] mmco: unref short failure
[h264 @ 0x556d9fb4b9c0] mmco: unref short failure
  4%|▍         | 87/1945 [23:17<6:51:23, 13.28s/it][h264 @ 0x556dac862180] mmco: unref short failure
[h264 @ 0x556dac862180] mmco: unref short failure
[h264 @ 0x55e44c0d8740] mmco: unref short failure
[h264 @ 0x556d9b268b00] mmco: unref short failure
[h264 @ 0x556d9b268b00] mmco: unref short failure
[h264 @ 0x556db4410cc0] mmco: unref short failure
  5%|▍         | 88/1945 [23:24<5:51:44, 11.37s/it][h264 @ 0x55b724d46fc0] mmco: unref short failure
  5%|▍         | 89/1945 [23:32<5:19:30, 10.33s/it][h264 @ 0x556da5bbd780] mmco: unref short failure
[h264 @ 0x556da5bbd780] mmco: unref short failure
[h264 @ 0x556da83ea400] mmco: unref short failure
[h264 @ 0x556da83ea400] mmco: unref short failure
[h264 @ 0x556dac862840] mmco: unref short failure
[h264 @ 0x556dac862840] mmco: unref short failure
[h264 @ 0x55b71fbf0080] mmco: unref short failure
[h264 @ 0x55b71fbf0080] mmco: unref short failure
[h264 @ 0x556d8f3e4600] mmco: unref short failure
[h264 @ 0x556d8f3e4600] mmco: unref short failure
[h264 @ 0x55e455482a80] mmco: unref short failure
[h264 @ 0x55e451ad4b80] mmco: unref short failure
[h264 @ 0x55e451ad4b80] mmco: unref short failure
[h264 @ 0x55e451ad4b80] mmco: unref short failure
[h264 @ 0x55e451ad4b80] mmco: unref short failure
[h264 @ 0x556d92968640] mmco: unref short failure
[h264 @ 0x556d92968640] mmco: unref short failure
[h264 @ 0x55b7254df500] mmco: unref short failure
[h264 @ 0x55e46084cbc0] mmco: unref short failure
[h264 @ 0x55e46084cbc0] mmco: unref short failure
[h264 @ 0x556da3818980] mmco: unref short failure
[h264 @ 0x556da3818980] mmco: unref short failure
[h264 @ 0x556db908a8c0] mmco: unref short failure
[h264 @ 0x556d9764c0c0] mmco: unref short failure
[h264 @ 0x556daca9bbc0] mmco: unref short failure
[h264 @ 0x556daca9bbc0] mmco: unref short failure
[h264 @ 0x556daca9bbc0] mmco: unref short failure
[h264 @ 0x556daca9bbc0] mmco: unref short failure
[h264 @ 0x556daca9bbc0] mmco: unref short failure
[h264 @ 0x556daca9bbc0] mmco: unref short failure
[h264 @ 0x556daab2f940] mmco: unref short failure
[h264 @ 0x556da6248f40] mmco: unref short failure
[h264 @ 0x55b724d1fcc0] mmco: unref short failure
[h264 @ 0x556da9736200] mmco: unref short failure
[h264 @ 0x55e4492f6ec0] mmco: unref short failure
[h264 @ 0x55e4492f6ec0] mmco: unref short failure
  5%|▍         | 90/1945 [24:36<13:36:25, 26.41s/it]  5%|▍         | 91/1945 [24:43<10:42:20, 20.79s/it]  5%|▍         | 92/1945 [24:50<8:34:15, 16.65s/it] [h264 @ 0x55b72bbc3780] mmco: unref short failure
  5%|▍         | 93/1945 [24:57<6:59:24, 13.59s/it][h264 @ 0x556daf94a600] mmco: unref short failure
[h264 @ 0x556daf94a600] mmco: unref short failure
[h264 @ 0x556db3194200] mmco: unref short failure
[h264 @ 0x556db3194200] mmco: unref short failure
[h264 @ 0x556dad52cb00] mmco: unref short failure
  5%|▍         | 94/1945 [25:16<7:51:22, 15.28s/it][h264 @ 0x556db13892c0] mmco: unref short failure
[h264 @ 0x556db13892c0] mmco: unref short failure
[h264 @ 0x556da3ccf400] mmco: unref short failure
[h264 @ 0x556da3ccf400] mmco: unref short failure
[h264 @ 0x55b71bbcddc0] mmco: unref short failure
[h264 @ 0x55e462a97a80] mmco: unref short failure
[h264 @ 0x55e462a97a80] mmco: unref short failure
  5%|▍         | 95/1945 [25:25<6:50:14, 13.31s/it][h264 @ 0x55e4624e1e00] mmco: unref short failure
[h264 @ 0x556d9a1cbb80] mmco: unref short failure
  5%|▍         | 96/1945 [25:32<5:56:19, 11.56s/it][h264 @ 0x556da5af6880] mmco: unref short failure
  5%|▍         | 97/1945 [25:40<5:24:00, 10.52s/it][h264 @ 0x556da7b5e840] mmco: unref short failure
[h264 @ 0x556da7b5e840] mmco: unref short failure
[h264 @ 0x556da776fb80] mmco: unref short failure
[h264 @ 0x556da776fb80] mmco: unref short failure
[h264 @ 0x55e45d7b2f00] mmco: unref short failure
[h264 @ 0x556d93e61cc0] mmco: unref short failure
[h264 @ 0x55b71b03cc40] mmco: unref short failure
[h264 @ 0x55e44b410b00] mmco: unref short failure
[h264 @ 0x556d92b3d4c0] mmco: unref short failure
[h264 @ 0x556d92b3d4c0] mmco: unref short failure
[h264 @ 0x55b728aa6dc0] mmco: unref short failure
[h264 @ 0x55b728aa6dc0] mmco: unref short failure
[h264 @ 0x55b7324d2240] mmco: unref short failure
[h264 @ 0x55b72ab67280] mmco: unref short failure
[h264 @ 0x55b72ab67280] mmco: unref short failure
[h264 @ 0x556da4cad380] mmco: unref short failure
[h264 @ 0x556da4cad380] mmco: unref short failure
[h264 @ 0x556da4cad380] mmco: unref short failure
[h264 @ 0x556da4cad380] mmco: unref short failure
[h264 @ 0x556da4cad380] mmco: unref short failure
[h264 @ 0x55e455482a80] mmco: unref short failure
  5%|▌         | 98/1945 [26:50<14:29:07, 28.23s/it][h264 @ 0x556db4fce9c0] mmco: unref short failure
[h264 @ 0x556db4fce9c0] mmco: unref short failure
[h264 @ 0x556d9f117700] mmco: unref short failure
[h264 @ 0x556d9f117700] mmco: unref short failure
[h264 @ 0x556d9f117700] mmco: unref short failure
[h264 @ 0x556d9f117700] mmco: unref short failure
[h264 @ 0x55e44cafe140] mmco: unref short failure
[h264 @ 0x55e44cafe140] mmco: unref short failure
[h264 @ 0x55e4661431c0] mmco: unref short failure
[h264 @ 0x55e4661431c0] mmco: unref short failure
  5%|▌         | 99/1945 [26:56<11:07:15, 21.69s/it]09/09/2024 15:52:25 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 15:52:25 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b71735a600] mmco: unref short failure
[h264 @ 0x55b71735a600] mmco: unref short failure
[h264 @ 0x55e461829400] mmco: unref short failure
[h264 @ 0x55e460dc9c00] mmco: unref short failure
[h264 @ 0x55e460dc9c00] mmco: unref short failure
[h264 @ 0x55b72432d1c0] mmco: unref short failure
[h264 @ 0x55b72432d1c0] mmco: unref short failure
[h264 @ 0x55b72432d1c0] mmco: unref short failure
[h264 @ 0x55b72432d1c0] mmco: unref short failure
[h264 @ 0x556da2b334c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b72432d1c0] mmco: unref short failure
[h264 @ 0x55b72432d1c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e45d98a9c0] mmco: unref short failure
[h264 @ 0x55e45d98a9c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556dabae6cc0] mmco: unref short failure
[h264 @ 0x556dabae6cc0] mmco: unref short failure
[h264 @ 0x556d9ec90780] mmco: unref short failure
[h264 @ 0x556d9fa97700] mmco: unref short failure
[h264 @ 0x556d9fa97700] mmco: unref short failure
[h264 @ 0x556d9fa97700] mmco: unref short failure
[h264 @ 0x556d9fa97700] mmco: unref short failure
[h264 @ 0x556d9fa97700] mmco: unref short failure
[h264 @ 0x556d9fa97700] mmco: unref short failure
[h264 @ 0x556d9fa97700] mmco: unref short failure
[h264 @ 0x556d9fa97700] mmco: unref short failure
[h264 @ 0x55b716c84dc0] mmco: unref short failure
[h264 @ 0x556daba4e480] mmco: unref short failure
[h264 @ 0x55e4619ef200] mmco: unref short failure
[h264 @ 0x556db4740e00] mmco: unref short failure
[h264 @ 0x55b71f0a59c0] mmco: unref short failure
[h264 @ 0x556dad035380] mmco: unref short failure
[h264 @ 0x55b7333f5940] mmco: unref short failure
[h264 @ 0x55b7333f5940] mmco: unref short failure
[h264 @ 0x55b7333f5940] mmco: unref short failure
[h264 @ 0x55e45aa16080] mmco: unref short failure
[h264 @ 0x55e45aa16080] mmco: unref short failure
[h264 @ 0x55e463a6c280] mmco: unref short failure
[h264 @ 0x55e463a6c280] mmco: unref short failure
[h264 @ 0x55e463a6c280] mmco: unref short failure
[h264 @ 0x55e463a6c280] mmco: unref short failure
[h264 @ 0x55b7333f6000] mmco: unref short failure
[h264 @ 0x55b732674ac0] mmco: unref short failure
[h264 @ 0x55b732674ac0] mmco: unref short failure
[h264 @ 0x55e45cf34880] mmco: unref short failure
[h264 @ 0x55b718527980] mmco: unref short failure
[h264 @ 0x55b718527980] mmco: unref short failure
[h264 @ 0x556da4c64d80] mmco: unref short failure
[h264 @ 0x556da4c64d80] mmco: unref short failure
[h264 @ 0x556da4c64d80] mmco: unref short failure
[h264 @ 0x556da4c64d80] mmco: unref short failure
[h264 @ 0x556da4c64d80] mmco: unref short failure
[h264 @ 0x556da4c64d80] mmco: unref short failure
[h264 @ 0x55e44aa93b80] mmco: unref short failure
[h264 @ 0x55e44aa93b80] mmco: unref short failure
[h264 @ 0x556db9e810c0] mmco: unref short failure
[h264 @ 0x556db9e810c0] mmco: unref short failure
[h264 @ 0x55e45aa16080] mmco: unref short failure
[h264 @ 0x556da9736400] mmco: unref short failure
[h264 @ 0x55e4646c8100] mmco: unref short failure
[h264 @ 0x55e4646c8100] mmco: unref short failure
[h264 @ 0x556daeba2300] mmco: unref short failure
[h264 @ 0x55e456badd40] mmco: unref short failure
[h264 @ 0x55e456badd40] mmco: unref short failure
[h264 @ 0x55e456badd40] mmco: unref short failure
[h264 @ 0x55e456badd40] mmco: unref short failure
[h264 @ 0x556db0b72640] mmco: unref short failure
[h264 @ 0x55e44ba646c0] mmco: unref short failure
[h264 @ 0x55e44e408b80] mmco: unref short failure
[h264 @ 0x55e44e408b80] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:44,  4.95it/s][A
  1%|          | 2/221 [00:00<01:05,  3.34it/s][A
  1%|▏         | 3/221 [00:00<01:14,  2.92it/s][A
  2%|▏         | 4/221 [00:01<01:01,  3.55it/s][A
  2%|▏         | 5/221 [00:01<00:51,  4.17it/s][A
  3%|▎         | 7/221 [00:01<00:42,  4.98it/s][A[h264 @ 0x55e466e9e080] mmco: unref short failure
[h264 @ 0x55e466e9e080] mmco: unref short failure

  4%|▎         | 8/221 [00:01<00:41,  5.15it/s][A
  4%|▍         | 9/221 [00:02<00:41,  5.11it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.79it/s][A
  5%|▌         | 12/221 [00:02<00:46,  4.52it/s][A
  6%|▌         | 13/221 [00:03<00:45,  4.56it/s][A
  6%|▋         | 14/221 [00:03<00:43,  4.72it/s][A
  7%|▋         | 15/221 [00:03<00:41,  5.02it/s][A
  7%|▋         | 16/221 [00:03<00:53,  3.80it/s][A
  8%|▊         | 17/221 [00:04<01:14,  2.75it/s][A
  8%|▊         | 18/221 [00:04<01:09,  2.91it/s][A
  9%|▊         | 19/221 [00:04<00:59,  3.42it/s][A
  9%|▉         | 20/221 [00:05<00:52,  3.83it/s][A
 10%|▉         | 21/221 [00:05<00:51,  3.90it/s][A
 10%|▉         | 22/221 [00:05<01:00,  3.28it/s][A
 10%|█         | 23/221 [00:05<00:49,  4.02it/s][A
 11%|█         | 24/221 [00:06<00:44,  4.44it/s][A
 11%|█▏        | 25/221 [00:06<00:41,  4.67it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.75it/s][A
 13%|█▎        | 28/221 [00:07<00:51,  3.72it/s][A
 13%|█▎        | 29/221 [00:07<00:44,  4.33it/s][A
 14%|█▎        | 30/221 [00:07<00:51,  3.69it/s][A
 14%|█▍        | 31/221 [00:07<00:52,  3.62it/s][A
 15%|█▍        | 33/221 [00:08<00:40,  4.62it/s][A
 16%|█▌        | 35/221 [00:08<00:35,  5.17it/s][A
 16%|█▋        | 36/221 [00:08<00:39,  4.71it/s][A
 17%|█▋        | 37/221 [00:09<00:43,  4.23it/s][A
 17%|█▋        | 38/221 [00:09<00:48,  3.76it/s][A
 18%|█▊        | 39/221 [00:09<00:41,  4.38it/s][A
 18%|█▊        | 40/221 [00:09<00:47,  3.82it/s][A
 19%|█▊        | 41/221 [00:10<00:40,  4.39it/s][A
 19%|█▉        | 42/221 [00:10<00:52,  3.38it/s][A
 19%|█▉        | 43/221 [00:10<00:48,  3.69it/s][A
 20%|█▉        | 44/221 [00:10<00:41,  4.23it/s][A
 20%|██        | 45/221 [00:11<00:51,  3.42it/s][A
 21%|██        | 46/221 [00:11<00:43,  3.99it/s][A
 21%|██▏       | 47/221 [00:12<01:31,  1.91it/s][A
 22%|██▏       | 48/221 [00:12<01:09,  2.50it/s][A
 22%|██▏       | 49/221 [00:13<01:00,  2.83it/s][A
 23%|██▎       | 50/221 [00:13<00:55,  3.09it/s][A
 23%|██▎       | 51/221 [00:13<00:51,  3.28it/s][A
 24%|██▎       | 52/221 [00:13<00:50,  3.34it/s][A
 24%|██▍       | 53/221 [00:13<00:41,  4.03it/s][A[h264 @ 0x55b72798a780] mmco: unref short failure
[h264 @ 0x55b72798a780] mmco: unref short failure

 24%|██▍       | 54/221 [00:15<01:34,  1.76it/s][A
 25%|██▍       | 55/221 [00:15<01:25,  1.95it/s][A
 25%|██▌       | 56/221 [00:15<01:06,  2.48it/s][A
 26%|██▌       | 57/221 [00:15<00:56,  2.88it/s][A
 26%|██▌       | 58/221 [00:16<00:46,  3.52it/s][A
 27%|██▋       | 59/221 [00:16<00:43,  3.74it/s][A
 27%|██▋       | 60/221 [00:16<00:53,  3.00it/s][A
 28%|██▊       | 61/221 [00:17<00:54,  2.94it/s][A
 28%|██▊       | 62/221 [00:17<00:54,  2.90it/s][A
 29%|██▊       | 63/221 [00:17<00:48,  3.23it/s][A
 29%|██▉       | 64/221 [00:18<01:02,  2.52it/s][A
 29%|██▉       | 65/221 [00:18<00:58,  2.65it/s][A[h264 @ 0x556da7645140] mmco: unref short failure

 30%|██▉       | 66/221 [00:19<01:08,  2.25it/s][A
 30%|███       | 67/221 [00:19<00:57,  2.68it/s][A
 31%|███       | 68/221 [00:19<00:49,  3.10it/s][A
 31%|███       | 69/221 [00:20<01:06,  2.29it/s][A
 32%|███▏      | 70/221 [00:20<00:55,  2.71it/s][A
 32%|███▏      | 71/221 [00:20<00:45,  3.26it/s][A
 33%|███▎      | 72/221 [00:21<00:51,  2.89it/s][A
 33%|███▎      | 73/221 [00:21<01:00,  2.45it/s][A
 33%|███▎      | 74/221 [00:21<00:48,  3.06it/s][A
 34%|███▍      | 75/221 [00:22<00:47,  3.05it/s][A
 34%|███▍      | 76/221 [00:22<00:48,  3.02it/s][A
 35%|███▍      | 77/221 [00:22<00:50,  2.86it/s][A
 35%|███▌      | 78/221 [00:23<00:39,  3.58it/s][A
 36%|███▌      | 79/221 [00:23<00:46,  3.07it/s][A
 36%|███▌      | 80/221 [00:23<00:41,  3.43it/s][A
 37%|███▋      | 81/221 [00:24<00:48,  2.89it/s][A
 37%|███▋      | 82/221 [00:24<00:47,  2.94it/s][A
 38%|███▊      | 83/221 [00:24<00:50,  2.75it/s][A[h264 @ 0x556d9ff178c0] mmco: unref short failure
[h264 @ 0x556d9ff178c0] mmco: unref short failure

 38%|███▊      | 84/221 [00:25<00:44,  3.08it/s][A
 38%|███▊      | 85/221 [00:25<00:35,  3.88it/s][A
 39%|███▉      | 86/221 [00:25<00:30,  4.41it/s][A
 39%|███▉      | 87/221 [00:26<00:55,  2.41it/s][A
 40%|███▉      | 88/221 [00:26<00:55,  2.40it/s][A
 40%|████      | 89/221 [00:26<00:46,  2.86it/s][A[h264 @ 0x55b725580440] mmco: unref short failure

 41%|████      | 90/221 [00:27<00:45,  2.86it/s][A
 41%|████      | 91/221 [00:27<00:38,  3.38it/s][A
 42%|████▏     | 92/221 [00:27<00:34,  3.74it/s][A
 42%|████▏     | 93/221 [00:28<00:39,  3.25it/s][A
 43%|████▎     | 94/221 [00:28<00:38,  3.28it/s][A
 43%|████▎     | 95/221 [00:28<00:36,  3.41it/s][A
 43%|████▎     | 96/221 [00:29<00:51,  2.41it/s][A[h264 @ 0x556db9e56500] mmco: unref short failure
[h264 @ 0x556db9e56500] mmco: unref short failure

 44%|████▍     | 97/221 [00:29<00:45,  2.73it/s][A
 44%|████▍     | 98/221 [00:30<01:05,  1.88it/s][A
 45%|████▍     | 99/221 [00:30<00:51,  2.37it/s][A
 45%|████▌     | 100/221 [00:30<00:43,  2.79it/s][A
 46%|████▌     | 101/221 [00:31<00:38,  3.15it/s][A
 46%|████▌     | 102/221 [00:31<00:42,  2.80it/s][A
 47%|████▋     | 103/221 [00:31<00:33,  3.56it/s][A
 47%|████▋     | 104/221 [00:31<00:28,  4.04it/s][A
 48%|████▊     | 105/221 [00:32<00:30,  3.75it/s][A
 48%|████▊     | 106/221 [00:32<00:49,  2.34it/s][A
 48%|████▊     | 107/221 [00:33<00:40,  2.83it/s][A
 49%|████▉     | 108/221 [00:33<00:35,  3.19it/s][A
 49%|████▉     | 109/221 [00:33<00:31,  3.51it/s][A[h264 @ 0x556da2d781c0] mmco: unref short failure

 50%|█████     | 111/221 [00:33<00:27,  4.05it/s][A
 51%|█████     | 112/221 [00:34<00:25,  4.27it/s][A
 51%|█████     | 113/221 [00:34<00:25,  4.32it/s][A
 52%|█████▏    | 115/221 [00:34<00:19,  5.41it/s][A
 52%|█████▏    | 116/221 [00:35<00:37,  2.81it/s][A
 53%|█████▎    | 117/221 [00:35<00:35,  2.89it/s][A
 53%|█████▎    | 118/221 [00:35<00:30,  3.41it/s][A
 54%|█████▍    | 119/221 [00:36<00:31,  3.24it/s][A
 54%|█████▍    | 120/221 [00:36<00:26,  3.84it/s][A
 55%|█████▌    | 122/221 [00:36<00:21,  4.64it/s][A
 56%|█████▌    | 123/221 [00:36<00:20,  4.76it/s][A
 56%|█████▌    | 124/221 [00:37<00:25,  3.87it/s][A
 57%|█████▋    | 125/221 [00:37<00:29,  3.29it/s][A
 57%|█████▋    | 126/221 [00:38<00:29,  3.23it/s][A
 57%|█████▋    | 127/221 [00:38<00:39,  2.39it/s][A
 58%|█████▊    | 128/221 [00:39<00:36,  2.58it/s][A
 59%|█████▉    | 130/221 [00:39<00:24,  3.73it/s][A
 59%|█████▉    | 131/221 [00:39<00:21,  4.14it/s][A
 60%|█████▉    | 132/221 [00:40<00:41,  2.13it/s][A
 60%|██████    | 133/221 [00:40<00:37,  2.33it/s][A
 61%|██████    | 134/221 [00:41<00:44,  1.95it/s][A
 61%|██████    | 135/221 [00:42<00:50,  1.70it/s][A
 62%|██████▏   | 136/221 [00:42<00:43,  1.94it/s][A
 62%|██████▏   | 137/221 [00:43<00:38,  2.16it/s][A[h264 @ 0x55b732ed7c40] mmco: unref short failure

 62%|██████▏   | 138/221 [00:43<00:36,  2.25it/s][A[h264 @ 0x55e4604d9500] mmco: unref short failure
[h264 @ 0x55e4604d9500] mmco: unref short failure
[h264 @ 0x55e4604d9500] mmco: unref short failure
[h264 @ 0x55e4604d9500] mmco: unref short failure

 63%|██████▎   | 139/221 [00:44<00:44,  1.83it/s][A[h264 @ 0x55b7192706c0] mmco: unref short failure

 63%|██████▎   | 140/221 [00:44<00:39,  2.07it/s][A
 64%|██████▍   | 141/221 [00:45<00:37,  2.13it/s][A
 64%|██████▍   | 142/221 [00:45<00:32,  2.42it/s][A
 65%|██████▍   | 143/221 [00:45<00:32,  2.39it/s][A
 65%|██████▌   | 144/221 [00:46<00:27,  2.79it/s][A[h264 @ 0x55e46236c800] mmco: unref short failure

 66%|██████▌   | 145/221 [00:46<00:21,  3.50it/s][A
 66%|██████▌   | 146/221 [00:46<00:17,  4.26it/s][A
 67%|██████▋   | 147/221 [00:46<00:17,  4.14it/s][A
 67%|██████▋   | 148/221 [00:46<00:19,  3.77it/s][A
 67%|██████▋   | 149/221 [00:47<00:21,  3.33it/s][A
 68%|██████▊   | 150/221 [00:47<00:18,  3.76it/s][A
 68%|██████▊   | 151/221 [00:47<00:20,  3.41it/s][A
 69%|██████▉   | 152/221 [00:48<00:26,  2.63it/s][A
 69%|██████▉   | 153/221 [00:48<00:20,  3.34it/s][A
 70%|██████▉   | 154/221 [00:48<00:18,  3.72it/s][A
 70%|███████   | 155/221 [00:48<00:17,  3.82it/s][A
 71%|███████   | 156/221 [00:49<00:17,  3.78it/s][A
 71%|███████   | 157/221 [00:49<00:25,  2.55it/s][A
 71%|███████▏  | 158/221 [00:50<00:21,  2.87it/s][A
 72%|███████▏  | 159/221 [00:50<00:17,  3.56it/s][A[h264 @ 0x55e45ada5100] mmco: unref short failure
[h264 @ 0x55e45ada5100] mmco: unref short failure

 72%|███████▏  | 160/221 [00:50<00:14,  4.21it/s][A
 73%|███████▎  | 162/221 [00:50<00:09,  5.91it/s][A[h264 @ 0x556db512d1c0] mmco: unref short failure

 74%|███████▍  | 163/221 [00:50<00:11,  5.17it/s][A
 74%|███████▍  | 164/221 [00:51<00:12,  4.74it/s][A
 75%|███████▍  | 165/221 [00:51<00:11,  4.75it/s][A
 75%|███████▌  | 166/221 [00:51<00:18,  3.02it/s][A
 76%|███████▌  | 167/221 [00:52<00:14,  3.66it/s][A
 76%|███████▌  | 168/221 [00:53<00:28,  1.88it/s][A
 77%|███████▋  | 170/221 [00:53<00:18,  2.79it/s][A[h264 @ 0x55b72623ce00] mmco: unref short failure

 77%|███████▋  | 171/221 [00:53<00:18,  2.72it/s][A
 78%|███████▊  | 172/221 [00:54<00:16,  3.02it/s][A
 78%|███████▊  | 173/221 [00:54<00:16,  2.88it/s][A
 79%|███████▊  | 174/221 [00:54<00:13,  3.55it/s][A
 79%|███████▉  | 175/221 [00:54<00:12,  3.67it/s][A
 80%|███████▉  | 176/221 [00:55<00:10,  4.46it/s][A
 80%|████████  | 177/221 [00:55<00:08,  5.03it/s][A
 81%|████████  | 178/221 [00:56<00:17,  2.48it/s][A
 81%|████████  | 179/221 [00:56<00:17,  2.45it/s][A
 81%|████████▏ | 180/221 [00:56<00:13,  3.10it/s][A
 82%|████████▏ | 182/221 [00:56<00:09,  4.17it/s][A
 83%|████████▎ | 183/221 [00:57<00:09,  3.98it/s][A
 83%|████████▎ | 184/221 [00:57<00:10,  3.61it/s][A
 84%|████████▍ | 186/221 [00:58<00:10,  3.46it/s][A
 85%|████████▍ | 187/221 [00:58<00:09,  3.64it/s][A
 85%|████████▌ | 188/221 [00:58<00:08,  3.91it/s][A
 86%|████████▌ | 189/221 [00:58<00:08,  3.78it/s][A
 86%|████████▌ | 190/221 [00:59<00:08,  3.66it/s][A
 86%|████████▋ | 191/221 [00:59<00:06,  4.35it/s][A
 87%|████████▋ | 192/221 [00:59<00:06,  4.79it/s][A
 88%|████████▊ | 194/221 [01:00<00:08,  3.06it/s][A
 88%|████████▊ | 195/221 [01:00<00:07,  3.46it/s][A
 89%|████████▊ | 196/221 [01:00<00:06,  4.00it/s][A
 89%|████████▉ | 197/221 [01:00<00:06,  3.76it/s][A
 90%|████████▉ | 198/221 [01:01<00:05,  4.16it/s][A
 90%|█████████ | 199/221 [01:01<00:06,  3.65it/s][A
 90%|█████████ | 200/221 [01:01<00:04,  4.32it/s][A
 91%|█████████ | 201/221 [01:01<00:04,  4.67it/s][A
 91%|█████████▏| 202/221 [01:02<00:04,  4.24it/s][A
 92%|█████████▏| 203/221 [01:02<00:04,  4.45it/s][A
 92%|█████████▏| 204/221 [01:02<00:03,  4.81it/s][A
 93%|█████████▎| 205/221 [01:02<00:02,  5.46it/s][A
 93%|█████████▎| 206/221 [01:02<00:03,  4.09it/s][A
 94%|█████████▍| 208/221 [01:03<00:03,  4.18it/s][A
 95%|█████████▍| 209/221 [01:03<00:02,  4.42it/s][A
 95%|█████████▌| 211/221 [01:04<00:02,  4.69it/s][A
 96%|█████████▌| 212/221 [01:04<00:02,  4.44it/s][A
 96%|█████████▋| 213/221 [01:04<00:01,  4.81it/s][A
 97%|█████████▋| 214/221 [01:04<00:01,  3.70it/s][A
 97%|█████████▋| 215/221 [01:05<00:01,  4.37it/s][A
 98%|█████████▊| 216/221 [01:05<00:01,  4.32it/s][A
 98%|█████████▊| 217/221 [01:05<00:01,  3.44it/s][A
 99%|█████████▊| 218/221 [01:05<00:00,  3.70it/s][A
 99%|█████████▉| 219/221 [01:06<00:00,  3.45it/s][A
100%|█████████▉| 220/221 [01:06<00:00,  2.55it/s][A
100%|██████████| 221/221 [01:06<00:00,  3.26it/s][A100%|██████████| 221/221 [01:06<00:00,  3.30it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.79it/s][A
  1%|          | 2/221 [00:00<00:57,  3.78it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.78it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.78it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.78it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.78it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.78it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.78it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.78it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.78it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.78it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.78it/s][A
  6%|▌         | 13/221 [00:03<00:55,  3.78it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.78it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.78it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.78it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.78it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.78it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.78it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.78it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.78it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.78it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.78it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.78it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 28/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.78it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.78it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.78it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.78it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.78it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.78it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.78it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.78it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.78it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.78it/s][A
 19%|█▉        | 43/221 [00:11<00:47,  3.78it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.78it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.78it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.78it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.78it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.78it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.78it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.78it/s][A
 24%|██▍       | 53/221 [00:14<00:44,  3.78it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.78it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.78it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.78it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.78it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.78it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.78it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.78it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.78it/s][A
 28%|██▊       | 62/221 [00:16<00:42,  3.78it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.78it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.78it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.78it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.78it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.78it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.78it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.78it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:33,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:28<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.78it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.78it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.78it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.78it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 115/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.78it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.78it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.78it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.78it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.78it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.78it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.78it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.79it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.78it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 140/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.78it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.78it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.78it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.78it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.78it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.78it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.78it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.78it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.78it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.78it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.78it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.78it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.78it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.78it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.78it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.78it/s][A
 76%|███████▌  | 168/221 [00:44<00:14,  3.78it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.78it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.78it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.78it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.78it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.78it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.78it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.78it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.78it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.79it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.78it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.78it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.78it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.78it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 193/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [00:56<00:02,  3.78it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.78it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.78it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.78it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.78it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.78it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.78it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.78it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  1%|          | 2/221 [00:00<00:48,  4.48it/s][A
  1%|▏         | 3/221 [00:00<00:55,  3.91it/s][A
  2%|▏         | 4/221 [00:00<00:47,  4.59it/s][A
  2%|▏         | 5/221 [00:01<00:40,  5.28it/s][A
  3%|▎         | 7/221 [00:01<00:36,  5.91it/s][A
  4%|▍         | 9/221 [00:01<00:32,  6.56it/s][A
  5%|▍         | 10/221 [00:02<00:47,  4.46it/s][A
  5%|▍         | 11/221 [00:02<00:41,  5.05it/s][A
  5%|▌         | 12/221 [00:02<00:37,  5.61it/s][A
  6%|▌         | 13/221 [00:02<00:43,  4.83it/s][A
  6%|▋         | 14/221 [00:02<00:39,  5.24it/s][A
  7%|▋         | 15/221 [00:02<00:40,  5.15it/s][A
  7%|▋         | 16/221 [00:03<00:48,  4.27it/s][A
  8%|▊         | 17/221 [00:03<01:16,  2.67it/s][A
  8%|▊         | 18/221 [00:04<01:03,  3.20it/s][A
  9%|▊         | 19/221 [00:04<00:53,  3.76it/s][A
  9%|▉         | 20/221 [00:04<00:45,  4.41it/s][A
 10%|▉         | 21/221 [00:04<00:38,  5.14it/s][A
 10%|▉         | 22/221 [00:04<00:45,  4.42it/s][A
 11%|█         | 24/221 [00:05<00:36,  5.41it/s][A
 11%|█▏        | 25/221 [00:05<00:34,  5.63it/s][A
 12%|█▏        | 26/221 [00:05<00:38,  5.08it/s][A
 13%|█▎        | 28/221 [00:06<00:41,  4.60it/s][A
 13%|█▎        | 29/221 [00:06<00:37,  5.12it/s][A
 14%|█▎        | 30/221 [00:06<00:52,  3.61it/s][A
 14%|█▍        | 31/221 [00:06<00:49,  3.86it/s][A
 15%|█▍        | 33/221 [00:07<00:37,  4.99it/s][A
 16%|█▌        | 35/221 [00:07<00:32,  5.66it/s][A
 16%|█▋        | 36/221 [00:07<00:38,  4.78it/s][A
 17%|█▋        | 37/221 [00:07<00:35,  5.24it/s][A
 17%|█▋        | 38/221 [00:08<00:40,  4.49it/s][A
 18%|█▊        | 39/221 [00:08<00:35,  5.18it/s][A
 18%|█▊        | 40/221 [00:08<00:40,  4.42it/s][A
 19%|█▊        | 41/221 [00:08<00:36,  4.98it/s][A
 19%|█▉        | 42/221 [00:08<00:36,  4.88it/s][A
 19%|█▉        | 43/221 [00:09<00:37,  4.71it/s][A
 20%|█▉        | 44/221 [00:09<00:37,  4.72it/s][A
 20%|██        | 45/221 [00:09<00:44,  3.98it/s][A
 21%|██▏       | 47/221 [00:10<00:35,  4.90it/s][A
 22%|██▏       | 49/221 [00:10<00:31,  5.49it/s][A
 23%|██▎       | 50/221 [00:10<00:34,  5.02it/s][A
 23%|██▎       | 51/221 [00:10<00:30,  5.53it/s][A
 24%|██▎       | 52/221 [00:10<00:30,  5.46it/s][A
 24%|██▍       | 53/221 [00:11<00:27,  6.17it/s][A
 24%|██▍       | 54/221 [00:11<00:47,  3.51it/s][A
 25%|██▍       | 55/221 [00:11<00:49,  3.34it/s][A
 26%|██▌       | 57/221 [00:12<00:36,  4.47it/s][A
 26%|██▌       | 58/221 [00:12<00:37,  4.40it/s][A
 27%|██▋       | 59/221 [00:12<00:32,  4.91it/s][A
 27%|██▋       | 60/221 [00:12<00:41,  3.85it/s][A
 28%|██▊       | 61/221 [00:13<00:37,  4.29it/s][A
 28%|██▊       | 62/221 [00:13<00:39,  4.03it/s][A
 29%|██▊       | 63/221 [00:13<00:47,  3.34it/s][A
 29%|██▉       | 64/221 [00:14<01:01,  2.54it/s][A
 29%|██▉       | 65/221 [00:14<00:54,  2.86it/s][A
 30%|██▉       | 66/221 [00:15<00:53,  2.88it/s][A
 30%|███       | 67/221 [00:15<00:45,  3.41it/s][A
 31%|███       | 68/221 [00:15<00:37,  4.12it/s][A
 31%|███       | 69/221 [00:16<01:03,  2.38it/s][A
 32%|███▏      | 70/221 [00:16<00:54,  2.75it/s][A
 32%|███▏      | 71/221 [00:16<00:48,  3.08it/s][A
 33%|███▎      | 72/221 [00:17<00:58,  2.57it/s][A
 33%|███▎      | 73/221 [00:17<01:00,  2.46it/s][A
 34%|███▍      | 75/221 [00:17<00:42,  3.48it/s][A
 34%|███▍      | 76/221 [00:18<00:38,  3.72it/s][A
 35%|███▍      | 77/221 [00:18<00:47,  3.02it/s][A
 35%|███▌      | 78/221 [00:18<00:38,  3.70it/s][A
 36%|███▌      | 79/221 [00:19<00:41,  3.40it/s][A
 36%|███▌      | 80/221 [00:19<00:37,  3.75it/s][A
 37%|███▋      | 81/221 [00:19<00:37,  3.76it/s][A
 37%|███▋      | 82/221 [00:19<00:39,  3.52it/s][A
 38%|███▊      | 83/221 [00:20<00:51,  2.65it/s][A
 38%|███▊      | 84/221 [00:20<00:45,  2.99it/s][A
 39%|███▉      | 86/221 [00:20<00:29,  4.50it/s][A
 39%|███▉      | 87/221 [00:21<00:52,  2.57it/s][A
 40%|███▉      | 88/221 [00:22<00:51,  2.61it/s][A
 40%|████      | 89/221 [00:22<00:44,  2.95it/s][A
 41%|████      | 90/221 [00:22<00:40,  3.27it/s][A
 41%|████      | 91/221 [00:22<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:22<00:30,  4.26it/s][A
 42%|████▏     | 93/221 [00:23<00:33,  3.78it/s][A
 43%|████▎     | 94/221 [00:23<00:35,  3.57it/s][A
 43%|████▎     | 95/221 [00:23<00:35,  3.51it/s][A
 43%|████▎     | 96/221 [00:24<00:55,  2.25it/s][A
 44%|████▍     | 97/221 [00:24<00:47,  2.62it/s][A
 44%|████▍     | 98/221 [00:25<01:07,  1.83it/s][A
 45%|████▍     | 99/221 [00:26<00:53,  2.29it/s][A
 45%|████▌     | 100/221 [00:26<00:45,  2.67it/s][A
 46%|████▌     | 101/221 [00:26<00:39,  3.01it/s][A
 46%|████▌     | 102/221 [00:27<00:54,  2.19it/s][A
 47%|████▋     | 104/221 [00:27<00:34,  3.37it/s][A
 48%|████▊     | 105/221 [00:27<00:33,  3.48it/s][A
 48%|████▊     | 106/221 [00:28<00:39,  2.93it/s][A
 48%|████▊     | 107/221 [00:28<00:33,  3.45it/s][A
 49%|████▉     | 108/221 [00:28<00:32,  3.46it/s][A
 49%|████▉     | 109/221 [00:28<00:28,  3.98it/s][A
 50%|████▉     | 110/221 [00:29<00:26,  4.16it/s][A
 50%|█████     | 111/221 [00:29<00:26,  4.09it/s][A
 51%|█████     | 112/221 [00:29<00:27,  4.04it/s][A
 51%|█████     | 113/221 [00:29<00:26,  4.12it/s][A
 52%|█████▏    | 115/221 [00:30<00:19,  5.55it/s][A
 52%|█████▏    | 116/221 [00:30<00:20,  5.17it/s][A
 53%|█████▎    | 117/221 [00:30<00:24,  4.22it/s][A
 53%|█████▎    | 118/221 [00:30<00:22,  4.54it/s][A
 54%|█████▍    | 119/221 [00:31<00:27,  3.65it/s][A
 54%|█████▍    | 120/221 [00:31<00:23,  4.29it/s][A
 55%|█████▌    | 122/221 [00:31<00:21,  4.69it/s][A
 56%|█████▌    | 123/221 [00:31<00:19,  4.92it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.81it/s][A
 57%|█████▋    | 125/221 [00:32<00:26,  3.56it/s][A
 57%|█████▋    | 126/221 [00:32<00:21,  4.32it/s][A
 57%|█████▋    | 127/221 [00:33<00:27,  3.45it/s][A
 58%|█████▊    | 128/221 [00:33<00:26,  3.54it/s][A
 59%|█████▉    | 130/221 [00:33<00:18,  4.83it/s][A
 59%|█████▉    | 131/221 [00:33<00:16,  5.49it/s][A
 60%|█████▉    | 132/221 [00:35<00:56,  1.56it/s][A
 60%|██████    | 133/221 [00:36<00:47,  1.86it/s][A
 61%|██████    | 134/221 [00:36<00:54,  1.59it/s][A
 61%|██████    | 135/221 [00:38<01:06,  1.28it/s][A
 62%|██████▏   | 136/221 [00:38<00:53,  1.58it/s][A
 62%|██████▏   | 137/221 [00:38<00:44,  1.88it/s][A
 62%|██████▏   | 138/221 [00:38<00:40,  2.07it/s][A
 63%|██████▎   | 139/221 [00:39<00:38,  2.12it/s][A
 63%|██████▎   | 140/221 [00:39<00:36,  2.20it/s][A
 64%|██████▍   | 141/221 [00:40<00:33,  2.39it/s][A
 64%|██████▍   | 142/221 [00:40<00:29,  2.72it/s][A
 65%|██████▍   | 143/221 [00:40<00:31,  2.51it/s][A
 65%|██████▌   | 144/221 [00:41<00:30,  2.49it/s][A
 66%|██████▌   | 146/221 [00:41<00:18,  4.03it/s][A
 67%|██████▋   | 147/221 [00:41<00:20,  3.66it/s][A
 67%|██████▋   | 148/221 [00:42<00:20,  3.60it/s][A
 67%|██████▋   | 149/221 [00:42<00:26,  2.71it/s][A
 68%|██████▊   | 150/221 [00:42<00:23,  3.03it/s][A
 68%|██████▊   | 151/221 [00:43<00:24,  2.92it/s][A
 69%|██████▉   | 152/221 [00:43<00:23,  2.92it/s][A
 69%|██████▉   | 153/221 [00:43<00:18,  3.60it/s][A
 70%|██████▉   | 154/221 [00:43<00:16,  4.08it/s][A
 70%|███████   | 155/221 [00:44<00:18,  3.57it/s][A
 71%|███████   | 156/221 [00:44<00:17,  3.73it/s][A
 71%|███████   | 157/221 [00:44<00:18,  3.55it/s][A
 71%|███████▏  | 158/221 [00:45<00:17,  3.53it/s][A
 72%|███████▏  | 159/221 [00:45<00:14,  4.32it/s][A
 72%|███████▏  | 160/221 [00:45<00:12,  4.79it/s][A
 73%|███████▎  | 161/221 [00:45<00:11,  5.04it/s][A
 74%|███████▍  | 163/221 [00:45<00:10,  5.41it/s][A
 74%|███████▍  | 164/221 [00:46<00:09,  5.79it/s][A
 75%|███████▍  | 165/221 [00:46<00:12,  4.57it/s][A
 75%|███████▌  | 166/221 [00:46<00:12,  4.53it/s][A
 76%|███████▌  | 167/221 [00:46<00:10,  5.27it/s][A
 76%|███████▌  | 168/221 [00:46<00:09,  5.53it/s][A
 76%|███████▋  | 169/221 [00:46<00:08,  6.24it/s][A
 77%|███████▋  | 170/221 [00:47<00:08,  5.96it/s][A
 77%|███████▋  | 171/221 [00:47<00:12,  3.88it/s][A
 78%|███████▊  | 172/221 [00:47<00:11,  4.11it/s][A
 78%|███████▊  | 173/221 [00:48<00:15,  3.09it/s][A
 79%|███████▊  | 174/221 [00:48<00:15,  3.00it/s][A
 79%|███████▉  | 175/221 [00:48<00:14,  3.14it/s][A
 80%|███████▉  | 176/221 [00:49<00:11,  3.94it/s][A
 80%|████████  | 177/221 [00:49<00:09,  4.42it/s][A
 81%|████████  | 178/221 [00:49<00:15,  2.74it/s][A
 81%|████████  | 179/221 [00:50<00:15,  2.79it/s][A
 81%|████████▏ | 180/221 [00:50<00:12,  3.30it/s][A
 82%|████████▏ | 181/221 [00:50<00:09,  4.09it/s][A
 82%|████████▏ | 182/221 [00:50<00:09,  3.99it/s][A
 83%|████████▎ | 183/221 [00:51<00:10,  3.73it/s][A
 83%|████████▎ | 184/221 [00:51<00:10,  3.46it/s][A
 84%|████████▍ | 186/221 [00:52<00:11,  2.98it/s][A
 85%|████████▍ | 187/221 [00:52<00:11,  3.09it/s][A
 85%|████████▌ | 188/221 [00:52<00:10,  3.19it/s][A
 86%|████████▌ | 189/221 [00:53<00:09,  3.26it/s][A
 86%|████████▌ | 190/221 [00:53<00:08,  3.50it/s][A
 86%|████████▋ | 191/221 [00:53<00:07,  4.16it/s][A
 87%|████████▋ | 192/221 [00:53<00:06,  4.56it/s][A
 88%|████████▊ | 194/221 [00:54<00:06,  4.36it/s][A
 88%|████████▊ | 195/221 [00:54<00:06,  4.31it/s][A
 89%|████████▊ | 196/221 [00:54<00:05,  4.22it/s][A
 89%|████████▉ | 197/221 [00:55<00:06,  3.63it/s][A
 90%|████████▉ | 198/221 [00:55<00:06,  3.54it/s][A
 90%|█████████ | 199/221 [00:55<00:06,  3.49it/s][A
 90%|█████████ | 200/221 [00:55<00:05,  3.97it/s][A
 91%|█████████ | 201/221 [00:55<00:04,  4.47it/s][A
 91%|█████████▏| 202/221 [00:56<00:04,  3.98it/s][A
 92%|█████████▏| 203/221 [00:56<00:04,  4.08it/s][A
 92%|█████████▏| 204/221 [00:56<00:04,  3.98it/s][A
 93%|█████████▎| 206/221 [00:57<00:03,  4.17it/s][A
 94%|█████████▍| 208/221 [00:57<00:03,  4.32it/s][A
 95%|█████████▍| 209/221 [00:57<00:02,  4.21it/s][A
 95%|█████████▌| 211/221 [00:58<00:02,  4.44it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  4.19it/s][A
 96%|█████████▋| 213/221 [00:58<00:01,  4.51it/s][A
 97%|█████████▋| 214/221 [00:59<00:02,  3.12it/s][A
 97%|█████████▋| 215/221 [00:59<00:01,  3.72it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  3.26it/s][A
 98%|█████████▊| 217/221 [01:00<00:01,  2.95it/s][A
 99%|█████████▊| 218/221 [01:00<00:00,  3.10it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  3.19it/s][A
100%|█████████▉| 220/221 [01:01<00:00,  3.71it/s][A
100%|██████████| 221/221 [01:01<00:00,  4.24it/s][A100%|██████████| 221/221 [01:01<00:00,  3.61it/s]
09/09/2024 15:57:56 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 99--===========

09/09/2024 15:57:56 - INFO - __main__ -   {'area_r1': 41.3, 'area_recall': '41.3/70.0/79.9', 'area_ravg': 63.7}
09/09/2024 15:57:56 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 99--===========

09/09/2024 15:57:56 - INFO - __main__ -   {'forward_r1': 37.4, 'forward_recall': '37.4/65.4/76.0', 'forward_ravg': 59.6}
09/09/2024 15:57:56 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 99--===========

09/09/2024 15:57:56 - INFO - __main__ -   {'area_video_r1': 37.4, 'area_video_recall': '37.4/65.4/76.8', 'area_video_ravg': 59.9}
09/09/2024 15:57:56 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 49=======

09/09/2024 15:57:56 - INFO - __main__ -   {'area_video_r1': 37.6, 'area_video_recall': '37.6/67.8/78.4', 'area_video_ravg': 61.2}
09/09/2024 15:57:56 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 99--===========

09/09/2024 15:57:56 - INFO - __main__ -   {'area_video_r1': 50.9, 'area_video_recall': '50.9/75.3/82.9', 'area_video_ravg': 69.7, 'area_video_back_r1': 50.2, 'area_video_back_recall': '50.2/72.2/80.3', 'area_video_back_ravg': 67.6}
09/09/2024 15:57:56 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 99=======

09/09/2024 15:57:56 - INFO - __main__ -   {'area_video_r1': 50.9, 'area_video_recall': '50.9/75.3/82.9', 'area_video_ravg': 69.7, 'area_video_back_r1': 50.2, 'area_video_back_recall': '50.2/72.2/80.3', 'area_video_back_ravg': 67.6}
09/09/2024 15:57:56 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 99--===========

09/09/2024 15:57:56 - INFO - __main__ -   {'video_r1': 42.1, 'video_recall': '42.1/70.1/80.9', 'video_ravg': 64.4}
09/09/2024 15:57:56 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 15:57:56 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 15:57:56 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 99--===========

09/09/2024 15:57:56 - INFO - __main__ -   {'video_r1': 50.6, 'video_recall': '50.6/75.2/82.2', 'video_ravg': 69.3}
09/09/2024 15:57:56 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 99=======

09/09/2024 15:57:56 - INFO - __main__ -   {'video_r1': 50.6, 'video_recall': '50.6/75.2/82.2', 'video_ravg': 69.3}
09/09/2024 15:58:27 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.7426915168762207, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.03082231432199478, 'loss_ret%tv%ta--finetune_area/loss_area': 2.619400978088379, 'loss_ret%tv%ta--finetune_area/total_loss': 4.392914772033691}
[h264 @ 0x556d9d554b40] mmco: unref short failure
[h264 @ 0x556d9d554b40] mmco: unref short failure
  5%|▌         | 100/1945 [33:02<63:55:59, 124.75s/it][h264 @ 0x556d9df4f100] mmco: unref short failure
[h264 @ 0x556d9df4f100] mmco: unref short failure
[h264 @ 0x55e45d1f8040] mmco: unref short failure
  5%|▌         | 101/1945 [33:06<45:21:08, 88.54s/it]   5%|▌         | 102/1945 [33:11<32:28:50, 63.45s/it][h264 @ 0x556da649e280] mmco: unref short failure
[h264 @ 0x55e4620de0c0] mmco: unref short failure
[h264 @ 0x55e4620de0c0] mmco: unref short failure
[h264 @ 0x556da5f03500] mmco: unref short failure
[h264 @ 0x556da5f03500] mmco: unref short failure
[h264 @ 0x556da5f03500] mmco: unref short failure
[h264 @ 0x556da5f03500] mmco: unref short failure
[h264 @ 0x556da5f03500] mmco: unref short failure
[h264 @ 0x556da5f03500] mmco: unref short failure
[h264 @ 0x556da5f03500] mmco: unref short failure
[h264 @ 0x556da5f03500] mmco: unref short failure
  5%|▌         | 103/1945 [33:16<23:29:46, 45.92s/it][h264 @ 0x55e46569cc80] mmco: unref short failure
[h264 @ 0x55e46569cc80] mmco: unref short failure
[h264 @ 0x55e46569cc80] mmco: unref short failure
[h264 @ 0x55e46569cc80] mmco: unref short failure
[h264 @ 0x55e45acbc400] mmco: unref short failure
[h264 @ 0x55e45acbc400] mmco: unref short failure
[h264 @ 0x55e45acbc400] mmco: unref short failure
  5%|▌         | 104/1945 [33:22<17:20:36, 33.91s/it][h264 @ 0x556db7632fc0] mmco: unref short failure
[h264 @ 0x556d990d5680] mmco: unref short failure
  5%|▌         | 105/1945 [33:28<13:06:59, 25.66s/it][h264 @ 0x556d94435200] mmco: unref short failure
[h264 @ 0x556d94435200] mmco: unref short failure
[h264 @ 0x55e452536e00] mmco: unref short failure
[h264 @ 0x55e452536e00] mmco: unref short failure
  5%|▌         | 106/1945 [33:35<10:12:07, 19.97s/it][h264 @ 0x55b73563f740] mmco: unref short failure
[h264 @ 0x55b73563f740] mmco: unref short failure
[h264 @ 0x556db7134f00] mmco: unref short failure
[h264 @ 0x556db7134f00] mmco: unref short failure
  6%|▌         | 107/1945 [33:42<8:15:59, 16.19s/it] [h264 @ 0x55e457a5aec0] mmco: unref short failure
  6%|▌         | 108/1945 [33:49<6:55:24, 13.57s/it]  6%|▌         | 109/1945 [33:56<5:54:54, 11.60s/it][h264 @ 0x556da63cdcc0] mmco: unref short failure
[h264 @ 0x556da63cdcc0] mmco: unref short failure
[h264 @ 0x556da63cdcc0] mmco: unref short failure
[h264 @ 0x556da63cdcc0] mmco: unref short failure
  6%|▌         | 110/1945 [34:03<5:09:54, 10.13s/it][h264 @ 0x55e460d90cc0] mmco: unref short failure
[h264 @ 0x55e460d90cc0] mmco: unref short failure
  6%|▌         | 111/1945 [34:10<4:41:04,  9.20s/it]  6%|▌         | 112/1945 [34:17<4:23:54,  8.64s/it]  6%|▌         | 113/1945 [34:25<4:13:39,  8.31s/it]  6%|▌         | 114/1945 [34:32<4:00:38,  7.89s/it][h264 @ 0x556d935b4400] mmco: unref short failure
[h264 @ 0x556d935b4400] mmco: unref short failure
[h264 @ 0x55b71aa6cfc0] mmco: unref short failure
[h264 @ 0x55b71aa6cfc0] mmco: unref short failure
  6%|▌         | 115/1945 [34:39<3:53:22,  7.65s/it][h264 @ 0x556dad7f6a00] mmco: unref short failure
[h264 @ 0x556dad7f6a00] mmco: unref short failure
[h264 @ 0x556db05d9700] mmco: unref short failure
[h264 @ 0x556dad1850c0] mmco: unref short failure
[h264 @ 0x556dad1850c0] mmco: unref short failure
[h264 @ 0x556dad1850c0] mmco: unref short failure
[h264 @ 0x556daa6bc200] mmco: unref short failure
[h264 @ 0x556d9d5c2ac0] mmco: unref short failure
[h264 @ 0x556d9d5c2ac0] mmco: unref short failure
  6%|▌         | 116/1945 [34:47<4:00:45,  7.90s/it][h264 @ 0x556db11b6200] mmco: unref short failure
[h264 @ 0x55e466e90800] mmco: unref short failure
[h264 @ 0x55e466e90800] mmco: unref short failure
[h264 @ 0x556d90a88f80] mmco: unref short failure
  6%|▌         | 117/1945 [34:55<3:57:19,  7.79s/it][h264 @ 0x55e46433c000] mmco: unref short failure
[h264 @ 0x55e46433c000] mmco: unref short failure
[h264 @ 0x55e4622f0cc0] mmco: unref short failure
[h264 @ 0x55e4622f0cc0] mmco: unref short failure
[h264 @ 0x55e4603a1f80] mmco: unref short failure
[h264 @ 0x55e4603a1f80] mmco: unref short failure
[h264 @ 0x55e457eea6c0] mmco: unref short failure
[h264 @ 0x55e457eea6c0] mmco: unref short failure
[h264 @ 0x55e457eea6c0] mmco: unref short failure
  6%|▌         | 118/1945 [35:09<4:54:06,  9.66s/it][h264 @ 0x55b724613840] mmco: unref short failure
[h264 @ 0x55b724613840] mmco: unref short failure
[h264 @ 0x556dacc3ba40] mmco: unref short failure
[h264 @ 0x556d98c20980] mmco: unref short failure
[h264 @ 0x556d98c20980] mmco: unref short failure
  6%|▌         | 119/1945 [35:16<4:33:01,  8.97s/it][h264 @ 0x556d9ba6b240] mmco: unref short failure
[h264 @ 0x55e4622cddc0] mmco: unref short failure
[h264 @ 0x55e46108b240] mmco: unref short failure
[h264 @ 0x55e46108b240] mmco: unref short failure
  6%|▌         | 120/1945 [35:26<4:39:55,  9.20s/it]  6%|▌         | 121/1945 [35:38<5:00:21,  9.88s/it][h264 @ 0x55b732e890c0] mmco: unref short failure
[h264 @ 0x55b732e890c0] mmco: unref short failure
[h264 @ 0x55b722e7a840] mmco: unref short failure
[h264 @ 0x55e44d6fa7c0] mmco: unref short failure
[h264 @ 0x55b719b0fb00] mmco: unref short failure
  6%|▋         | 122/1945 [35:47<4:52:45,  9.64s/it][h264 @ 0x55e462207a00] mmco: unref short failure
[h264 @ 0x556d98c1aa00] mmco: unref short failure
[h264 @ 0x556d98c1aa00] mmco: unref short failure
  6%|▋         | 123/1945 [35:54<4:35:14,  9.06s/it][h264 @ 0x55b71d3d5d00] mmco: unref short failure
[h264 @ 0x55b71d3d5d00] mmco: unref short failure
[h264 @ 0x556d96c88880] mmco: unref short failure
[h264 @ 0x556d9a69c000] mmco: unref short failure
[h264 @ 0x55b7273c7ac0] mmco: unref short failure
[h264 @ 0x556d9a67c580] mmco: unref short failure
[h264 @ 0x556d9a67c580] mmco: unref short failure
[h264 @ 0x55b72a253200] mmco: unref short failure
[h264 @ 0x55b72a253200] mmco: unref short failure
[h264 @ 0x556da4f72040] mmco: unref short failure
[h264 @ 0x556da4f72040] mmco: unref short failure
[h264 @ 0x556da6611580] mmco: unref short failure
[h264 @ 0x556da6611580] mmco: unref short failure
[h264 @ 0x55b71a248780] mmco: unref short failure
[h264 @ 0x556db606d600] mmco: unref short failure
[h264 @ 0x556db606d600] mmco: unref short failure
  6%|▋         | 124/1945 [36:33<9:06:41, 18.01s/it][h264 @ 0x55b71d3e30c0] mmco: unref short failure
[h264 @ 0x556dad035380] mmco: unref short failure
[h264 @ 0x556dad035380] mmco: unref short failure
[h264 @ 0x55e448f1a080] mmco: unref short failure
[h264 @ 0x55e448f1a080] mmco: unref short failure
[h264 @ 0x55b71865c000] mmco: unref short failure
[h264 @ 0x55b71865c000] mmco: unref short failure
[h264 @ 0x55b7337a9280] mmco: unref short failure
[h264 @ 0x55b7337a9280] mmco: unref short failure
[h264 @ 0x556d8f685f00] mmco: unref short failure
[h264 @ 0x556d8f685f00] mmco: unref short failure
[h264 @ 0x55e463c00e00] mmco: unref short failure
  6%|▋         | 125/1945 [36:55<9:39:32, 19.11s/it][h264 @ 0x55b731498f40] mmco: unref short failure
[h264 @ 0x556da8f36500] mmco: unref short failure
  6%|▋         | 126/1945 [37:10<9:00:10, 17.82s/it]  7%|▋         | 127/1945 [37:17<7:23:34, 14.64s/it][h264 @ 0x556db97f8f40] mmco: unref short failure
[h264 @ 0x55e45e126440] mmco: unref short failure
[h264 @ 0x55e44b251880] mmco: unref short failure
[h264 @ 0x556db9873940] mmco: unref short failure
[h264 @ 0x556db9873940] mmco: unref short failure
[h264 @ 0x556db9873940] mmco: unref short failure
[h264 @ 0x556db9873940] mmco: unref short failure
  7%|▋         | 128/1945 [37:38<8:22:06, 16.58s/it][h264 @ 0x556dbabe5240] mmco: unref short failure
  7%|▋         | 129/1945 [37:46<7:02:04, 13.95s/it][h264 @ 0x55e45e126700] mmco: unref short failure
[h264 @ 0x55e45e126700] mmco: unref short failure
[h264 @ 0x556da8a008c0] mmco: unref short failure
  7%|▋         | 130/1945 [37:53<5:58:50, 11.86s/it]  7%|▋         | 131/1945 [38:00<5:12:28, 10.34s/it][h264 @ 0x55e4565e30c0] mmco: unref short failure
[h264 @ 0x55e4565e30c0] mmco: unref short failure
[h264 @ 0x55e460e48740] mmco: unref short failure
[h264 @ 0x556dbbefc3c0] mmco: unref short failure
[h264 @ 0x556dbbefc3c0] mmco: unref short failure
[h264 @ 0x55e46691ef40] mmco: unref short failure
[h264 @ 0x55e46691ef40] mmco: unref short failure
[h264 @ 0x55b72ed93d00] mmco: unref short failure
[h264 @ 0x55b72ed93d00] mmco: unref short failure
[h264 @ 0x55b72ed93d00] mmco: unref short failure
[h264 @ 0x55e45ec4ef40] mmco: unref short failure
  7%|▋         | 132/1945 [38:45<10:30:42, 20.87s/it][h264 @ 0x55e460d90f40] mmco: unref short failure
[h264 @ 0x55e460d90f40] mmco: unref short failure
[h264 @ 0x55e460d90f40] mmco: unref short failure
[h264 @ 0x55e460d90f40] mmco: unref short failure
[h264 @ 0x556da617aec0] mmco: unref short failure
[h264 @ 0x556daa866180] mmco: unref short failure
[h264 @ 0x556da8b5c800] mmco: unref short failure
[h264 @ 0x55e4492f7140] mmco: unref short failure
[h264 @ 0x55e4492f7140] mmco: unref short failure
[h264 @ 0x556d9ebd0e40] mmco: unref short failure
[h264 @ 0x556d9ebd0e40] mmco: unref short failure
  7%|▋         | 133/1945 [39:05<10:24:20, 20.67s/it][h264 @ 0x556dc02aba00] mmco: unref short failure
[h264 @ 0x556dc02aba00] mmco: unref short failure
[h264 @ 0x556db08f3a40] mmco: unref short failure
[h264 @ 0x556db08f3a40] mmco: unref short failure
  7%|▋         | 134/1945 [39:16<8:50:31, 17.58s/it] [h264 @ 0x55b72bf00e00] mmco: unref short failure
[h264 @ 0x55b72bf00e00] mmco: unref short failure
[h264 @ 0x55e468496640] mmco: unref short failure
  7%|▋         | 135/1945 [39:24<7:21:50, 14.65s/it][h264 @ 0x55b738387b80] mmco: unref short failure
[h264 @ 0x55b738387b80] mmco: unref short failure
[h264 @ 0x55b737675480] mmco: unref short failure
[h264 @ 0x55b737675480] mmco: unref short failure
[h264 @ 0x556d8f684300] mmco: unref short failure
[h264 @ 0x556d8f684300] mmco: unref short failure
[h264 @ 0x556d8f684300] mmco: unref short failure
  7%|▋         | 136/1945 [39:48<8:53:18, 17.69s/it][h264 @ 0x556db64877c0] mmco: unref short failure
  7%|▋         | 137/1945 [39:56<7:19:06, 14.57s/it][h264 @ 0x55e463b33480] mmco: unref short failure
  7%|▋         | 138/1945 [40:03<6:11:51, 12.35s/it][h264 @ 0x55e44874ecc0] mmco: unref short failure
[h264 @ 0x556d978b40c0] mmco: unref short failure
[h264 @ 0x556d978b40c0] mmco: unref short failure
  7%|▋         | 139/1945 [40:10<5:21:50, 10.69s/it][h264 @ 0x556db77e17c0] mmco: unref short failure
[h264 @ 0x556db77e17c0] mmco: unref short failure
[h264 @ 0x556db77e17c0] mmco: unref short failure
[h264 @ 0x556db77e17c0] mmco: unref short failure
[h264 @ 0x55b725b29200] mmco: unref short failure
[h264 @ 0x55b725b29200] mmco: unref short failure
[h264 @ 0x55e45b90e500] mmco: unref short failure
[h264 @ 0x55b71f83e380] mmco: unref short failure
[h264 @ 0x556da51a7440] mmco: unref short failure
[h264 @ 0x55b725b298c0] mmco: unref short failure
  7%|▋         | 140/1945 [40:46<9:09:46, 18.27s/it][h264 @ 0x556d923f8480] mmco: unref short failure
[h264 @ 0x556dbb921640] mmco: unref short failure
  7%|▋         | 141/1945 [41:06<9:25:07, 18.80s/it][h264 @ 0x556da9a3e780] mmco: unref short failure
[h264 @ 0x556da9a3e780] mmco: unref short failure
[h264 @ 0x556da9a3e780] mmco: unref short failure
[h264 @ 0x556da9a3e780] mmco: unref short failure
[h264 @ 0x556dbcd14600] mmco: unref short failure
[h264 @ 0x556dbcd14600] mmco: unref short failure
  7%|▋         | 142/1945 [41:21<8:57:21, 17.88s/it][h264 @ 0x556da5d15580] mmco: unref short failure
[h264 @ 0x556da5d15580] mmco: unref short failure
[h264 @ 0x556da5d15580] mmco: unref short failure
[h264 @ 0x556da5d15580] mmco: unref short failure
[h264 @ 0x556daa929680] mmco: unref short failure
[h264 @ 0x556d9cec8700] mmco: unref short failure
[h264 @ 0x55e46225bf00] mmco: unref short failure
[h264 @ 0x55e46225bf00] mmco: unref short failure
[h264 @ 0x55e458f50580] mmco: unref short failure
  7%|▋         | 143/1945 [41:37<8:41:21, 17.36s/it][h264 @ 0x55b735453900] mmco: unref short failure
[h264 @ 0x556dae817040] mmco: unref short failure
[h264 @ 0x55b73560dfc0] mmco: unref short failure
[h264 @ 0x55b73560dfc0] mmco: unref short failure
  7%|▋         | 144/1945 [41:48<7:35:20, 15.17s/it][h264 @ 0x556db772b380] mmco: unref short failure
  7%|▋         | 145/1945 [41:54<6:20:51, 12.70s/it][h264 @ 0x55e450ca2580] mmco: unref short failure
[h264 @ 0x55e450ca2580] mmco: unref short failure
[h264 @ 0x55e450ca2580] mmco: unref short failure
[h264 @ 0x55e450ca2580] mmco: unref short failure
  8%|▊         | 146/1945 [42:02<5:31:58, 11.07s/it]  8%|▊         | 147/1945 [42:11<5:15:24, 10.53s/it][h264 @ 0x55e44e3def80] mmco: unref short failure
[h264 @ 0x556daa2fd4c0] mmco: unref short failure
[h264 @ 0x55e4667a2100] mmco: unref short failure
[h264 @ 0x556db9b1c8c0] mmco: unref short failure
[h264 @ 0x556db9b1c8c0] mmco: unref short failure
[h264 @ 0x55b736eb23c0] mmco: unref short failure
[h264 @ 0x55b71c1e9e80] mmco: unref short failure
[h264 @ 0x55b71c1e9e80] mmco: unref short failure
[h264 @ 0x55b733a5fc40] mmco: unref short failure
[h264 @ 0x55b7277e6e80] mmco: unref short failure
[h264 @ 0x556da71854c0] mmco: unref short failure
[h264 @ 0x556da71854c0] mmco: unref short failure
[h264 @ 0x55e46552eac0] mmco: unref short failure
[h264 @ 0x55e46552eac0] mmco: unref short failure
[h264 @ 0x55e46552eac0] mmco: unref short failure
  8%|▊         | 148/1945 [42:53<10:01:25, 20.08s/it][h264 @ 0x55e4481feb80] mmco: unref short failure
[h264 @ 0x55e4481feb80] mmco: unref short failure
[h264 @ 0x55e4481feb80] mmco: unref short failure
[h264 @ 0x55e4481feb80] mmco: unref short failure
[h264 @ 0x556db940bdc0] mmco: unref short failure
[h264 @ 0x556db940bdc0] mmco: unref short failure
[h264 @ 0x55e460b25600] mmco: unref short failure
[h264 @ 0x55e460b25600] mmco: unref short failure
[h264 @ 0x55e46a6cb200] mmco: unref short failure
  8%|▊         | 149/1945 [43:05<8:41:43, 17.43s/it] 09/09/2024 16:08:33 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 16:08:33 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556daeae0cc0] mmco: unref short failure
[h264 @ 0x556daeae0cc0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e4685d8900] mmco: unref short failure
[h264 @ 0x55e4685d8900] mmco: unref short failure
[h264 @ 0x556dbca1a040] mmco: unref short failure
[h264 @ 0x556d96ea2940] mmco: unref short failure
[h264 @ 0x556d96ea2940] mmco: unref short failure
[h264 @ 0x55e4663b6980] mmco: unref short failure
[h264 @ 0x55e4663b6980] mmco: unref short failure
[h264 @ 0x556da8d2b940] mmco: unref short failure
[h264 @ 0x556db03b8fc0] mmco: unref short failure
[h264 @ 0x556db03b8fc0] mmco: unref short failure
[h264 @ 0x556d9e7ce640] mmco: unref short failure
[h264 @ 0x556db96fb940] mmco: unref short failure
[h264 @ 0x556db96fb940] mmco: unref short failure
[h264 @ 0x556db03b91c0] mmco: unref short failure
[h264 @ 0x556db03b91c0] mmco: unref short failure
[h264 @ 0x556da9a3ec00] mmco: unref short failure
[h264 @ 0x556da9a3ec00] mmco: unref short failure
[h264 @ 0x556d8f93c8c0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:11,  3.08it/s][A
  1%|          | 2/221 [00:00<01:08,  3.19it/s][A
  1%|▏         | 3/221 [00:00<01:09,  3.12it/s][A
  2%|▏         | 4/221 [00:01<00:58,  3.68it/s][A
  2%|▏         | 5/221 [00:01<00:52,  4.09it/s][A
  3%|▎         | 6/221 [00:01<00:42,  5.00it/s][A[h264 @ 0x556daf747100] mmco: unref short failure
[h264 @ 0x556daf747100] mmco: unref short failure

  3%|▎         | 7/221 [00:01<00:47,  4.52it/s][A
  4%|▎         | 8/221 [00:01<00:43,  4.93it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.75it/s][A
  5%|▍         | 10/221 [00:02<01:11,  2.97it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.78it/s][A
  5%|▌         | 12/221 [00:03<00:50,  4.11it/s][A
  6%|▌         | 13/221 [00:03<00:53,  3.92it/s][A
  6%|▋         | 14/221 [00:03<00:46,  4.44it/s][A
  7%|▋         | 15/221 [00:03<00:47,  4.32it/s][A
  7%|▋         | 16/221 [00:04<01:16,  2.68it/s][A
  8%|▊         | 17/221 [00:05<01:27,  2.34it/s][A
  8%|▊         | 18/221 [00:05<01:20,  2.51it/s][A
  9%|▊         | 19/221 [00:05<01:04,  3.14it/s][A
  9%|▉         | 20/221 [00:05<00:52,  3.83it/s][A
 10%|▉         | 21/221 [00:05<00:49,  4.01it/s][A
 10%|▉         | 22/221 [00:06<00:58,  3.42it/s][A
 10%|█         | 23/221 [00:06<00:54,  3.62it/s][A
 11%|█         | 24/221 [00:06<00:49,  3.99it/s][A
 11%|█▏        | 25/221 [00:06<00:48,  4.08it/s][A
 12%|█▏        | 26/221 [00:07<00:53,  3.67it/s][A
 12%|█▏        | 27/221 [00:07<00:44,  4.40it/s][A
 13%|█▎        | 28/221 [00:07<00:59,  3.23it/s][A
 13%|█▎        | 29/221 [00:08<01:05,  2.94it/s][A
 14%|█▎        | 30/221 [00:08<01:11,  2.66it/s][A
 14%|█▍        | 31/221 [00:08<01:05,  2.91it/s][A
 14%|█▍        | 32/221 [00:09<01:00,  3.10it/s][A
 15%|█▍        | 33/221 [00:09<01:04,  2.93it/s][A
 15%|█▌        | 34/221 [00:09<00:52,  3.58it/s][A
 16%|█▌        | 35/221 [00:09<00:46,  3.97it/s][A
 16%|█▋        | 36/221 [00:10<00:50,  3.68it/s][A
 17%|█▋        | 37/221 [00:10<00:53,  3.46it/s][A
 17%|█▋        | 38/221 [00:10<00:55,  3.31it/s][A
 18%|█▊        | 39/221 [00:11<00:47,  3.81it/s][A
 18%|█▊        | 40/221 [00:11<00:57,  3.16it/s][A
 19%|█▊        | 41/221 [00:11<00:52,  3.43it/s][A
 19%|█▉        | 42/221 [00:12<01:03,  2.82it/s][A
 19%|█▉        | 43/221 [00:12<00:54,  3.25it/s][A
 20%|█▉        | 44/221 [00:12<00:46,  3.83it/s][A
 20%|██        | 45/221 [00:12<00:46,  3.78it/s][A
 21%|██        | 46/221 [00:13<00:42,  4.16it/s][A
 21%|██▏       | 47/221 [00:13<00:51,  3.39it/s][A
 22%|██▏       | 48/221 [00:13<00:47,  3.61it/s][A
 22%|██▏       | 49/221 [00:14<00:51,  3.35it/s][A
 23%|██▎       | 50/221 [00:14<00:46,  3.65it/s][A
 23%|██▎       | 51/221 [00:14<00:40,  4.19it/s][A[h264 @ 0x55e45e2af140] mmco: unref short failure
[h264 @ 0x55e45e2af140] mmco: unref short failure

 24%|██▎       | 52/221 [00:14<00:48,  3.50it/s][A[h264 @ 0x556da3fa7440] mmco: unref short failure
[h264 @ 0x556da3fa7440] mmco: unref short failure

 24%|██▍       | 53/221 [00:15<00:42,  3.93it/s][A
 24%|██▍       | 54/221 [00:16<01:28,  1.90it/s][A
 25%|██▍       | 55/221 [00:16<01:15,  2.19it/s][A
 25%|██▌       | 56/221 [00:16<00:59,  2.78it/s][A[h264 @ 0x55e452332dc0] mmco: unref short failure
[h264 @ 0x55e452332dc0] mmco: unref short failure

 26%|██▌       | 57/221 [00:16<00:58,  2.82it/s][A
 26%|██▌       | 58/221 [00:17<00:47,  3.46it/s][A
 27%|██▋       | 59/221 [00:17<00:42,  3.84it/s][A
 27%|██▋       | 60/221 [00:17<00:54,  2.98it/s][A
 28%|██▊       | 61/221 [00:18<00:54,  2.94it/s][A
 28%|██▊       | 62/221 [00:18<01:05,  2.43it/s][A
 29%|██▊       | 63/221 [00:19<01:00,  2.63it/s][A
 29%|██▉       | 64/221 [00:19<01:09,  2.26it/s][A
 29%|██▉       | 65/221 [00:19<00:56,  2.76it/s][A
 30%|██▉       | 66/221 [00:20<01:00,  2.56it/s][A
 30%|███       | 67/221 [00:20<00:53,  2.88it/s][A
 31%|███       | 68/221 [00:20<00:49,  3.12it/s][A
 31%|███       | 69/221 [00:21<01:12,  2.11it/s][A
 32%|███▏      | 70/221 [00:21<01:00,  2.48it/s][A
 32%|███▏      | 71/221 [00:22<00:53,  2.79it/s][A
 33%|███▎      | 72/221 [00:22<00:57,  2.58it/s][A
 33%|███▎      | 73/221 [00:23<01:00,  2.43it/s][A
 33%|███▎      | 74/221 [00:23<00:52,  2.80it/s][A
 34%|███▍      | 75/221 [00:23<00:52,  2.77it/s][A
 34%|███▍      | 76/221 [00:23<00:49,  2.96it/s][A
 35%|███▍      | 77/221 [00:24<00:50,  2.83it/s][A
 35%|███▌      | 78/221 [00:24<00:43,  3.31it/s][A
 36%|███▌      | 79/221 [00:24<00:47,  2.99it/s][A
 36%|███▌      | 80/221 [00:25<00:47,  2.96it/s][A
 37%|███▋      | 81/221 [00:25<00:46,  3.02it/s][A
 37%|███▋      | 82/221 [00:25<00:44,  3.12it/s][A[h264 @ 0x556d90494580] mmco: unref short failure
[h264 @ 0x556d90494580] mmco: unref short failure

 38%|███▊      | 83/221 [00:26<01:04,  2.15it/s][A
 38%|███▊      | 84/221 [00:26<00:55,  2.48it/s][A
 38%|███▊      | 85/221 [00:27<00:48,  2.78it/s][A
 39%|███▉      | 86/221 [00:27<00:42,  3.18it/s][A[h264 @ 0x556d97b61940] mmco: unref short failure

 39%|███▉      | 87/221 [00:28<01:02,  2.16it/s][A
 40%|███▉      | 88/221 [00:28<01:07,  1.96it/s][A
 40%|████      | 89/221 [00:29<00:59,  2.21it/s][A
 41%|████      | 90/221 [00:29<01:01,  2.12it/s][A
 41%|████      | 91/221 [00:29<00:49,  2.61it/s][A
 42%|████▏     | 92/221 [00:30<00:43,  2.97it/s][A
 42%|████▏     | 93/221 [00:30<00:47,  2.72it/s][A[h264 @ 0x556d9d4e7c00] mmco: unref short failure
[h264 @ 0x556d9d4e7c00] mmco: unref short failure

 43%|████▎     | 94/221 [00:31<00:54,  2.33it/s][A
 43%|████▎     | 95/221 [00:31<00:51,  2.45it/s][A
 43%|████▎     | 96/221 [00:31<00:54,  2.30it/s][A
 44%|████▍     | 97/221 [00:32<00:46,  2.66it/s][A
 44%|████▍     | 98/221 [00:33<01:33,  1.32it/s][A
 45%|████▍     | 99/221 [00:34<01:16,  1.60it/s][A
 45%|████▌     | 100/221 [00:34<01:06,  1.81it/s][A
 46%|████▌     | 101/221 [00:34<00:55,  2.17it/s][A
 46%|████▌     | 102/221 [00:35<00:59,  2.01it/s][A
 47%|████▋     | 103/221 [00:35<00:46,  2.54it/s][A
 47%|████▋     | 104/221 [00:35<00:41,  2.81it/s][A
 48%|████▊     | 105/221 [00:36<00:43,  2.66it/s][A[h264 @ 0x556db18fec40] mmco: unref short failure
[h264 @ 0x55e45722d840] mmco: unref short failure
[h264 @ 0x55e45722d840] mmco: unref short failure

 48%|████▊     | 106/221 [00:36<00:50,  2.26it/s][A
 48%|████▊     | 107/221 [00:37<00:46,  2.44it/s][A
 49%|████▉     | 108/221 [00:37<00:43,  2.60it/s][A
 49%|████▉     | 109/221 [00:37<00:35,  3.15it/s][A
 50%|████▉     | 110/221 [00:37<00:28,  3.86it/s][A
 50%|█████     | 111/221 [00:38<00:28,  3.80it/s][A
 51%|█████     | 112/221 [00:38<00:36,  3.01it/s][A
 51%|█████     | 113/221 [00:38<00:34,  3.09it/s][A
 52%|█████▏    | 114/221 [00:39<00:30,  3.52it/s][A
 52%|█████▏    | 115/221 [00:39<00:25,  4.20it/s][A
 52%|█████▏    | 116/221 [00:39<00:30,  3.39it/s][A
 53%|█████▎    | 117/221 [00:39<00:31,  3.35it/s][A
 53%|█████▎    | 118/221 [00:40<00:28,  3.65it/s][A
 54%|█████▍    | 119/221 [00:40<00:32,  3.11it/s][A
 54%|█████▍    | 120/221 [00:40<00:30,  3.33it/s][A
 55%|█████▍    | 121/221 [00:40<00:24,  4.00it/s][A
 55%|█████▌    | 122/221 [00:41<00:27,  3.63it/s][A
 56%|█████▌    | 123/221 [00:41<00:23,  4.18it/s][A[h264 @ 0x55b71c5ce840] mmco: unref short failure
[h264 @ 0x55b71c5ce840] mmco: unref short failure

 56%|█████▌    | 124/221 [00:41<00:31,  3.06it/s][A
 57%|█████▋    | 125/221 [00:42<00:35,  2.70it/s][A
 57%|█████▋    | 126/221 [00:42<00:32,  2.94it/s][A
 57%|█████▋    | 127/221 [00:43<00:36,  2.54it/s][A
 58%|█████▊    | 128/221 [00:43<00:33,  2.79it/s][A
 58%|█████▊    | 129/221 [00:43<00:26,  3.48it/s][A
 59%|█████▉    | 130/221 [00:43<00:24,  3.79it/s][A
 59%|█████▉    | 131/221 [00:44<00:23,  3.80it/s][A
 60%|█████▉    | 132/221 [00:45<00:51,  1.72it/s][A
 60%|██████    | 133/221 [00:45<00:43,  2.01it/s][A[h264 @ 0x556d9fc8b140] mmco: unref short failure

 61%|██████    | 134/221 [00:46<00:50,  1.73it/s][A
 61%|██████    | 135/221 [00:46<00:46,  1.84it/s][A
 62%|██████▏   | 136/221 [00:47<00:39,  2.15it/s][A
 62%|██████▏   | 137/221 [00:47<00:34,  2.44it/s][A[h264 @ 0x556da5b4b600] mmco: unref short failure

 62%|██████▏   | 138/221 [00:47<00:34,  2.40it/s][A
 63%|██████▎   | 139/221 [00:48<00:38,  2.12it/s][A
 63%|██████▎   | 140/221 [00:48<00:36,  2.21it/s][A[h264 @ 0x556da6d81d00] mmco: unref short failure

 64%|██████▍   | 141/221 [00:49<00:33,  2.35it/s][A
 64%|██████▍   | 142/221 [00:49<00:30,  2.60it/s][A
 65%|██████▍   | 143/221 [00:50<00:32,  2.37it/s][A
 65%|██████▌   | 144/221 [00:50<00:30,  2.53it/s][A
 66%|██████▌   | 145/221 [00:50<00:25,  3.00it/s][A
 66%|██████▌   | 146/221 [00:50<00:22,  3.32it/s][A
 67%|██████▋   | 147/221 [00:51<00:26,  2.82it/s][A
 67%|██████▋   | 148/221 [00:51<00:31,  2.33it/s][A
 67%|██████▋   | 149/221 [00:52<00:34,  2.08it/s][A[h264 @ 0x55b724610bc0] mmco: unref short failure

 68%|██████▊   | 150/221 [00:52<00:30,  2.31it/s][A
 68%|██████▊   | 151/221 [00:53<00:31,  2.24it/s][A
 69%|██████▉   | 152/221 [00:54<00:39,  1.77it/s][A
 69%|██████▉   | 153/221 [00:54<00:31,  2.16it/s][A
 70%|██████▉   | 154/221 [00:54<00:28,  2.37it/s][A
 70%|███████   | 155/221 [00:55<00:28,  2.33it/s][A
 71%|███████   | 156/221 [00:55<00:25,  2.51it/s][A
 71%|███████   | 157/221 [00:55<00:24,  2.65it/s][A
 71%|███████▏  | 158/221 [00:56<00:20,  3.02it/s][A
 72%|███████▏  | 159/221 [00:56<00:16,  3.65it/s][A
 72%|███████▏  | 160/221 [00:56<00:15,  3.85it/s][A
 73%|███████▎  | 161/221 [00:56<00:13,  4.37it/s][A
 73%|███████▎  | 162/221 [00:56<00:12,  4.79it/s][A
 74%|███████▍  | 163/221 [00:56<00:13,  4.28it/s][A
 74%|███████▍  | 164/221 [00:57<00:12,  4.54it/s][A
 75%|███████▍  | 165/221 [00:57<00:13,  4.22it/s][A
 75%|███████▌  | 166/221 [00:57<00:14,  3.73it/s][A
 76%|███████▌  | 167/221 [00:58<00:15,  3.53it/s][A
 76%|███████▌  | 168/221 [00:58<00:19,  2.72it/s][A
 76%|███████▋  | 169/221 [00:58<00:16,  3.08it/s][A
 77%|███████▋  | 170/221 [00:59<00:16,  3.10it/s][A
 77%|███████▋  | 171/221 [00:59<00:18,  2.65it/s][A
 78%|███████▊  | 172/221 [01:00<00:17,  2.83it/s][A
 78%|███████▊  | 173/221 [01:00<00:19,  2.46it/s][A
 79%|███████▊  | 174/221 [01:00<00:16,  2.83it/s][A
 79%|███████▉  | 175/221 [01:01<00:15,  3.05it/s][A
 80%|███████▉  | 176/221 [01:01<00:12,  3.74it/s][A
 80%|████████  | 177/221 [01:01<00:10,  4.23it/s][A
 81%|████████  | 178/221 [01:02<00:18,  2.34it/s][A
 81%|████████  | 179/221 [01:02<00:17,  2.45it/s][A
 81%|████████▏ | 180/221 [01:02<00:13,  3.05it/s][A
 82%|████████▏ | 181/221 [01:02<00:10,  3.75it/s][A
 82%|████████▏ | 182/221 [01:03<00:10,  3.81it/s][A
 83%|████████▎ | 183/221 [01:03<00:09,  3.93it/s][A
 83%|████████▎ | 184/221 [01:03<00:11,  3.26it/s][A
 84%|████████▍ | 186/221 [01:04<00:09,  3.61it/s][A
 85%|████████▍ | 187/221 [01:04<00:09,  3.41it/s][A
 85%|████████▌ | 188/221 [01:04<00:09,  3.52it/s][A[h264 @ 0x556d9f2eb6c0] mmco: unref short failure
[h264 @ 0x556d9f2eb6c0] mmco: unref short failure

 86%|████████▌ | 189/221 [01:05<00:08,  3.59it/s][A
 86%|████████▌ | 190/221 [01:05<00:08,  3.52it/s][A
 86%|████████▋ | 191/221 [01:05<00:07,  4.03it/s][A
 87%|████████▋ | 192/221 [01:05<00:06,  4.36it/s][A
 88%|████████▊ | 194/221 [01:06<00:07,  3.72it/s][A
 88%|████████▊ | 195/221 [01:06<00:06,  3.96it/s][A
 89%|████████▊ | 196/221 [01:06<00:06,  3.91it/s][A
 89%|████████▉ | 197/221 [01:07<00:06,  3.47it/s][A
 90%|████████▉ | 198/221 [01:07<00:06,  3.81it/s][A[h264 @ 0x556d9f2eb900] mmco: unref short failure
[h264 @ 0x556d9f2eb900] mmco: unref short failure
[h264 @ 0x556d9f2eb900] mmco: unref short failure
[h264 @ 0x556d9f2eb900] mmco: unref short failure

 90%|█████████ | 199/221 [01:07<00:07,  3.08it/s][A[h264 @ 0x556da915e840] mmco: unref short failure

 90%|█████████ | 200/221 [01:08<00:06,  3.47it/s][A
 91%|█████████ | 201/221 [01:08<00:05,  3.89it/s][A
 91%|█████████▏| 202/221 [01:08<00:05,  3.52it/s][A
 92%|█████████▏| 203/221 [01:08<00:04,  3.97it/s][A
 92%|█████████▏| 204/221 [01:09<00:04,  3.99it/s][A
 93%|█████████▎| 205/221 [01:09<00:03,  4.61it/s][A
 93%|█████████▎| 206/221 [01:09<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [01:10<00:03,  3.83it/s][A
 95%|█████████▍| 209/221 [01:10<00:02,  4.22it/s][A
 95%|█████████▌| 211/221 [01:10<00:02,  4.54it/s][A
 96%|█████████▌| 212/221 [01:10<00:02,  4.37it/s][A
 96%|█████████▋| 213/221 [01:11<00:01,  4.72it/s][A
 97%|█████████▋| 214/221 [01:11<00:01,  3.54it/s][A
 97%|█████████▋| 215/221 [01:11<00:01,  3.85it/s][A
 98%|█████████▊| 216/221 [01:11<00:01,  3.97it/s][A
 98%|█████████▊| 217/221 [01:12<00:01,  3.43it/s][A
 99%|█████████▊| 218/221 [01:12<00:00,  3.34it/s][A
 99%|█████████▉| 219/221 [01:13<00:00,  3.06it/s][A
100%|█████████▉| 220/221 [01:13<00:00,  2.76it/s][A
100%|██████████| 221/221 [01:13<00:00,  3.32it/s][A100%|██████████| 221/221 [01:13<00:00,  3.00it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:00,  3.67it/s][A
  1%|          | 2/221 [00:00<00:59,  3.66it/s][A
  1%|▏         | 3/221 [00:00<00:58,  3.71it/s][A
  2%|▏         | 4/221 [00:01<00:58,  3.71it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.73it/s][A
  3%|▎         | 6/221 [00:01<00:57,  3.75it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.76it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.76it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.76it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.77it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.77it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.77it/s][A
  6%|▌         | 13/221 [00:03<00:55,  3.77it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.77it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.77it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.77it/s][A
  8%|▊         | 17/221 [00:04<00:54,  3.77it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.77it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.77it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.77it/s][A
 10%|▉         | 21/221 [00:05<00:53,  3.77it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.77it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.77it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.78it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.78it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.78it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 28/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.78it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.78it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.78it/s][A
 14%|█▍        | 32/221 [00:08<00:50,  3.78it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.78it/s][A
 15%|█▌        | 34/221 [00:09<00:49,  3.78it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.78it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:14<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:37,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:23<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:28<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.79it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.79it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.79it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.79it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.79it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.79it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.79it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.79it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.79it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.79it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.79it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.78it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.78it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.78it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.79it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.79it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.79it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.79it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.79it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.79it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.79it/s][A
 76%|███████▌  | 168/221 [00:44<00:13,  3.79it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.78it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.78it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.78it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.78it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.79it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.78it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.78it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.78it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.79it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.79it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.78it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.78it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.78it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [00:56<00:02,  3.78it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.78it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.78it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.78it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.78it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.78it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.78it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.79it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:24,  9.10it/s][A
  1%|          | 2/221 [00:00<00:48,  4.56it/s][A
  1%|▏         | 3/221 [00:00<00:51,  4.27it/s][A
  2%|▏         | 4/221 [00:00<00:45,  4.82it/s][A
  2%|▏         | 5/221 [00:00<00:40,  5.37it/s][A
  3%|▎         | 7/221 [00:01<00:35,  6.10it/s][A
  4%|▍         | 9/221 [00:01<00:32,  6.56it/s][A
  5%|▍         | 10/221 [00:02<00:53,  3.95it/s][A
  5%|▍         | 11/221 [00:02<00:46,  4.55it/s][A
  5%|▌         | 12/221 [00:02<00:40,  5.12it/s][A
  6%|▌         | 13/221 [00:02<00:49,  4.24it/s][A
  6%|▋         | 14/221 [00:02<00:41,  5.02it/s][A
  7%|▋         | 15/221 [00:03<00:42,  4.87it/s][A
  7%|▋         | 16/221 [00:03<00:47,  4.28it/s][A
  8%|▊         | 17/221 [00:04<01:20,  2.54it/s][A
  8%|▊         | 18/221 [00:04<01:06,  3.04it/s][A
  9%|▊         | 19/221 [00:04<00:56,  3.58it/s][A
  9%|▉         | 20/221 [00:04<00:46,  4.28it/s][A
 10%|▉         | 21/221 [00:04<00:39,  5.08it/s][A
 10%|▉         | 22/221 [00:05<00:48,  4.07it/s][A
 11%|█         | 24/221 [00:05<00:37,  5.24it/s][A
 11%|█▏        | 25/221 [00:05<00:36,  5.41it/s][A
 12%|█▏        | 26/221 [00:05<00:39,  4.97it/s][A
 13%|█▎        | 28/221 [00:06<00:41,  4.62it/s][A
 13%|█▎        | 29/221 [00:06<00:37,  5.10it/s][A
 14%|█▎        | 30/221 [00:06<00:48,  3.91it/s][A
 14%|█▍        | 31/221 [00:06<00:43,  4.33it/s][A
 15%|█▍        | 33/221 [00:07<00:33,  5.53it/s][A
 16%|█▌        | 35/221 [00:07<00:31,  5.86it/s][A
 16%|█▋        | 36/221 [00:07<00:38,  4.81it/s][A
 17%|█▋        | 37/221 [00:07<00:36,  5.04it/s][A
 17%|█▋        | 38/221 [00:08<00:43,  4.19it/s][A
 18%|█▊        | 40/221 [00:08<00:40,  4.49it/s][A
 19%|█▊        | 41/221 [00:08<00:36,  4.99it/s][A
 19%|█▉        | 42/221 [00:09<00:38,  4.65it/s][A
 19%|█▉        | 43/221 [00:09<00:41,  4.32it/s][A
 20%|█▉        | 44/221 [00:09<00:40,  4.38it/s][A
 20%|██        | 45/221 [00:09<00:44,  3.99it/s][A
 21%|██▏       | 47/221 [00:10<00:36,  4.76it/s][A
 22%|██▏       | 49/221 [00:10<00:32,  5.35it/s][A
 23%|██▎       | 50/221 [00:10<00:32,  5.33it/s][A
 23%|██▎       | 51/221 [00:10<00:28,  5.95it/s][A
 24%|██▎       | 52/221 [00:10<00:27,  6.07it/s][A
 24%|██▍       | 54/221 [00:11<00:46,  3.57it/s][A
 25%|██▍       | 55/221 [00:12<00:49,  3.35it/s][A
 25%|██▌       | 56/221 [00:12<00:41,  3.99it/s][A
 26%|██▌       | 57/221 [00:12<00:38,  4.28it/s][A
 26%|██▌       | 58/221 [00:12<00:37,  4.40it/s][A
 27%|██▋       | 59/221 [00:12<00:33,  4.81it/s][A
 27%|██▋       | 60/221 [00:13<00:47,  3.40it/s][A
 28%|██▊       | 61/221 [00:13<00:41,  3.86it/s][A
 28%|██▊       | 62/221 [00:13<00:42,  3.78it/s][A
 29%|██▊       | 63/221 [00:14<00:47,  3.31it/s][A
 29%|██▉       | 64/221 [00:14<00:54,  2.90it/s][A
 29%|██▉       | 65/221 [00:14<00:44,  3.49it/s][A
 30%|██▉       | 66/221 [00:15<00:50,  3.06it/s][A
 30%|███       | 67/221 [00:15<00:44,  3.47it/s][A
 31%|███       | 68/221 [00:15<00:36,  4.21it/s][A
 31%|███       | 69/221 [00:16<01:11,  2.12it/s][A
 32%|███▏      | 70/221 [00:16<00:59,  2.53it/s][A
 32%|███▏      | 71/221 [00:17<00:52,  2.87it/s][A
 33%|███▎      | 72/221 [00:17<00:57,  2.59it/s][A
 33%|███▎      | 73/221 [00:17<00:59,  2.48it/s][A
 34%|███▍      | 75/221 [00:18<00:43,  3.40it/s][A
 34%|███▍      | 76/221 [00:18<00:40,  3.62it/s][A
 35%|███▍      | 77/221 [00:18<00:46,  3.12it/s][A
 36%|███▌      | 79/221 [00:19<00:39,  3.56it/s][A
 36%|███▌      | 80/221 [00:19<00:36,  3.82it/s][A
 37%|███▋      | 81/221 [00:19<00:36,  3.86it/s][A
 37%|███▋      | 82/221 [00:20<00:39,  3.54it/s][A
 38%|███▊      | 83/221 [00:20<00:54,  2.53it/s][A
 38%|███▊      | 84/221 [00:21<00:46,  2.97it/s][A
 39%|███▉      | 86/221 [00:21<00:31,  4.33it/s][A
 39%|███▉      | 87/221 [00:22<00:55,  2.42it/s][A
 40%|███▉      | 88/221 [00:22<00:52,  2.53it/s][A
 40%|████      | 89/221 [00:22<00:45,  2.87it/s][A
 41%|████      | 90/221 [00:23<00:42,  3.11it/s][A
 41%|████      | 91/221 [00:23<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:23<00:30,  4.29it/s][A
 42%|████▏     | 93/221 [00:23<00:37,  3.43it/s][A
 43%|████▎     | 94/221 [00:24<00:37,  3.37it/s][A
 43%|████▎     | 95/221 [00:24<00:38,  3.30it/s][A
 43%|████▎     | 96/221 [00:25<00:49,  2.51it/s][A
 44%|████▍     | 97/221 [00:25<00:41,  2.98it/s][A
 44%|████▍     | 98/221 [00:25<00:54,  2.25it/s][A
 45%|████▍     | 99/221 [00:26<00:44,  2.71it/s][A
 45%|████▌     | 100/221 [00:26<00:39,  3.05it/s][A
 46%|████▌     | 101/221 [00:26<00:35,  3.40it/s][A
 46%|████▌     | 102/221 [00:27<01:03,  1.87it/s][A
 47%|████▋     | 104/221 [00:27<00:39,  2.99it/s][A
 48%|████▊     | 105/221 [00:28<00:35,  3.30it/s][A
 48%|████▊     | 106/221 [00:28<00:41,  2.80it/s][A
 48%|████▊     | 107/221 [00:28<00:34,  3.27it/s][A
 49%|████▉     | 108/221 [00:29<00:34,  3.29it/s][A
 49%|████▉     | 109/221 [00:29<00:28,  3.95it/s][A
 50%|████▉     | 110/221 [00:29<00:25,  4.34it/s][A
 50%|█████     | 111/221 [00:29<00:24,  4.42it/s][A
 51%|█████     | 112/221 [00:29<00:26,  4.11it/s][A
 51%|█████     | 113/221 [00:30<00:28,  3.83it/s][A
 52%|█████▏    | 115/221 [00:30<00:19,  5.47it/s][A
 52%|█████▏    | 116/221 [00:30<00:20,  5.03it/s][A
 53%|█████▎    | 117/221 [00:30<00:24,  4.25it/s][A
 53%|█████▎    | 118/221 [00:31<00:22,  4.58it/s][A
 54%|█████▍    | 119/221 [00:31<00:28,  3.59it/s][A
 54%|█████▍    | 120/221 [00:31<00:24,  4.11it/s][A
 55%|█████▌    | 122/221 [00:32<00:21,  4.66it/s][A
 56%|█████▌    | 123/221 [00:32<00:19,  4.95it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.87it/s][A
 57%|█████▋    | 125/221 [00:32<00:27,  3.55it/s][A
 57%|█████▋    | 126/221 [00:33<00:22,  4.21it/s][A
 57%|█████▋    | 127/221 [00:33<00:27,  3.44it/s][A
 58%|█████▊    | 128/221 [00:33<00:25,  3.60it/s][A
 59%|█████▉    | 130/221 [00:34<00:18,  4.91it/s][A
 59%|█████▉    | 131/221 [00:34<00:16,  5.58it/s][A
 60%|█████▉    | 132/221 [00:35<00:54,  1.62it/s][A
 60%|██████    | 133/221 [00:36<00:45,  1.93it/s][A
 61%|██████    | 134/221 [00:37<00:52,  1.66it/s][A
 61%|██████    | 135/221 [00:38<01:02,  1.39it/s][A
 62%|██████▏   | 136/221 [00:38<00:50,  1.70it/s][A
 62%|██████▏   | 137/221 [00:38<00:40,  2.06it/s][A
 62%|██████▏   | 138/221 [00:38<00:37,  2.23it/s][A
 63%|██████▎   | 139/221 [00:39<00:39,  2.06it/s][A
 63%|██████▎   | 140/221 [00:39<00:36,  2.21it/s][A
 64%|██████▍   | 141/221 [00:40<00:32,  2.49it/s][A
 64%|██████▍   | 142/221 [00:40<00:27,  2.86it/s][A
 65%|██████▍   | 143/221 [00:40<00:32,  2.42it/s][A
 65%|██████▌   | 144/221 [00:41<00:32,  2.34it/s][A
 66%|██████▌   | 146/221 [00:41<00:19,  3.77it/s][A
 67%|██████▋   | 147/221 [00:41<00:20,  3.54it/s][A
 67%|██████▋   | 148/221 [00:42<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:42<00:26,  2.74it/s][A
 68%|██████▊   | 150/221 [00:43<00:23,  3.01it/s][A
 68%|██████▊   | 151/221 [00:43<00:24,  2.86it/s][A
 69%|██████▉   | 152/221 [00:44<00:29,  2.33it/s][A
 69%|██████▉   | 153/221 [00:44<00:23,  2.93it/s][A
 70%|██████▉   | 154/221 [00:44<00:20,  3.32it/s][A
 70%|███████   | 155/221 [00:44<00:21,  3.07it/s][A
 71%|███████   | 156/221 [00:45<00:19,  3.29it/s][A
 71%|███████   | 157/221 [00:45<00:19,  3.30it/s][A
 71%|███████▏  | 158/221 [00:45<00:18,  3.47it/s][A
 72%|███████▏  | 159/221 [00:45<00:14,  4.28it/s][A
 72%|███████▏  | 160/221 [00:45<00:12,  4.80it/s][A
 73%|███████▎  | 161/221 [00:46<00:12,  4.87it/s][A
 74%|███████▍  | 163/221 [00:46<00:10,  5.39it/s][A
 74%|███████▍  | 164/221 [00:46<00:09,  5.86it/s][A
 75%|███████▍  | 165/221 [00:46<00:12,  4.37it/s][A
 75%|███████▌  | 166/221 [00:47<00:12,  4.38it/s][A
 76%|███████▌  | 167/221 [00:47<00:10,  5.16it/s][A
 76%|███████▌  | 168/221 [00:47<00:10,  5.06it/s][A
 76%|███████▋  | 169/221 [00:47<00:09,  5.45it/s][A
 77%|███████▋  | 170/221 [00:47<00:09,  5.43it/s][A
 77%|███████▋  | 171/221 [00:48<00:12,  4.07it/s][A
 78%|███████▊  | 172/221 [00:48<00:11,  4.38it/s][A
 78%|███████▊  | 173/221 [00:48<00:15,  3.06it/s][A
 79%|███████▊  | 174/221 [00:49<00:16,  2.90it/s][A
 79%|███████▉  | 175/221 [00:49<00:14,  3.08it/s][A
 80%|████████  | 177/221 [00:49<00:10,  4.39it/s][A
 81%|████████  | 178/221 [00:50<00:14,  2.87it/s][A
 81%|████████  | 179/221 [00:50<00:14,  2.89it/s][A
 81%|████████▏ | 180/221 [00:51<00:12,  3.32it/s][A
 82%|████████▏ | 181/221 [00:51<00:10,  3.83it/s][A
 82%|████████▏ | 182/221 [00:51<00:10,  3.84it/s][A
 83%|████████▎ | 183/221 [00:51<00:09,  3.99it/s][A
 83%|████████▎ | 184/221 [00:51<00:09,  3.73it/s][A
 84%|████████▍ | 186/221 [00:52<00:10,  3.33it/s][A
 85%|████████▍ | 187/221 [00:52<00:10,  3.36it/s][A
 85%|████████▌ | 188/221 [00:53<00:09,  3.39it/s][A
 86%|████████▌ | 189/221 [00:53<00:09,  3.40it/s][A
 86%|████████▌ | 190/221 [00:53<00:08,  3.52it/s][A
 86%|████████▋ | 191/221 [00:53<00:07,  4.18it/s][A
 87%|████████▋ | 192/221 [00:54<00:06,  4.37it/s][A
 88%|████████▊ | 194/221 [00:54<00:06,  3.93it/s][A
 88%|████████▊ | 195/221 [00:54<00:06,  4.10it/s][A
 89%|████████▊ | 196/221 [00:55<00:06,  3.90it/s][A
 89%|████████▉ | 197/221 [00:55<00:06,  3.47it/s][A
 90%|████████▉ | 198/221 [00:55<00:06,  3.46it/s][A
 90%|█████████ | 199/221 [00:56<00:06,  3.39it/s][A
 90%|█████████ | 200/221 [00:56<00:05,  3.74it/s][A
 91%|█████████ | 201/221 [00:56<00:04,  4.18it/s][A
 91%|█████████▏| 202/221 [00:56<00:04,  3.91it/s][A
 92%|█████████▏| 203/221 [00:57<00:04,  4.14it/s][A
 92%|█████████▏| 204/221 [00:57<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:57<00:03,  3.97it/s][A
 94%|█████████▍| 208/221 [00:58<00:02,  4.69it/s][A
 95%|█████████▍| 209/221 [00:58<00:02,  4.50it/s][A
 95%|█████████▌| 211/221 [00:58<00:02,  4.62it/s][A
 96%|█████████▌| 212/221 [00:59<00:02,  4.46it/s][A
 96%|█████████▋| 213/221 [00:59<00:01,  4.71it/s][A
 97%|█████████▋| 214/221 [01:00<00:02,  2.67it/s][A
 97%|█████████▋| 215/221 [01:00<00:01,  3.15it/s][A
 98%|█████████▊| 216/221 [01:00<00:01,  2.93it/s][A
 98%|█████████▊| 217/221 [01:01<00:01,  2.76it/s][A
 99%|█████████▊| 218/221 [01:01<00:01,  2.92it/s][A
 99%|█████████▉| 219/221 [01:01<00:00,  2.94it/s][A
100%|█████████▉| 220/221 [01:01<00:00,  3.49it/s][A
100%|██████████| 221/221 [01:02<00:00,  3.98it/s][A100%|██████████| 221/221 [01:02<00:00,  3.56it/s]
09/09/2024 16:14:10 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 149--===========

09/09/2024 16:14:10 - INFO - __main__ -   {'area_r1': 42.1, 'area_recall': '42.1/70.6/80.1', 'area_ravg': 64.3}
09/09/2024 16:14:10 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 149--===========

09/09/2024 16:14:10 - INFO - __main__ -   {'forward_r1': 37.6, 'forward_recall': '37.6/65.5/76.5', 'forward_ravg': 59.8}
09/09/2024 16:14:10 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 149--===========

09/09/2024 16:14:10 - INFO - __main__ -   {'area_video_r1': 38.2, 'area_video_recall': '38.2/65.8/77.3', 'area_video_ravg': 60.4}
09/09/2024 16:14:10 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 149=======

09/09/2024 16:14:10 - INFO - __main__ -   {'area_video_r1': 38.2, 'area_video_recall': '38.2/65.8/77.3', 'area_video_ravg': 60.4}
09/09/2024 16:14:10 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 149--===========

09/09/2024 16:14:10 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 16:14:10 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 16:14:10 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 16:14:10 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 149--===========

09/09/2024 16:14:10 - INFO - __main__ -   {'video_r1': 40.6, 'video_recall': '40.6/70.2/81.7', 'video_ravg': 64.2}
09/09/2024 16:14:10 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 16:14:10 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 16:14:10 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 149--===========

09/09/2024 16:14:10 - INFO - __main__ -   {'video_r1': 52.1, 'video_recall': '52.1/75.1/82.4', 'video_ravg': 69.9}
09/09/2024 16:14:10 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 149=======

09/09/2024 16:14:10 - INFO - __main__ -   {'video_r1': 52.1, 'video_recall': '52.1/75.1/82.4', 'video_ravg': 69.9}
09/09/2024 16:14:46 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.7674784660339355, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.03151516616344452, 'loss_ret%tv%ta--finetune_area/loss_area': 2.677757501602173, 'loss_ret%tv%ta--finetune_area/total_loss': 4.476751327514648}
  8%|▊         | 150/1945 [49:20<62:15:14, 124.86s/it]  8%|▊         | 151/1945 [49:24<44:10:01, 88.63s/it] [h264 @ 0x55e45bfc9c40] mmco: unref short failure
[h264 @ 0x55e45bfc9c40] mmco: unref short failure
  8%|▊         | 152/1945 [49:29<31:37:24, 63.49s/it]  8%|▊         | 153/1945 [49:35<22:57:16, 46.11s/it][h264 @ 0x556db3a64cc0] mmco: unref short failure
  8%|▊         | 154/1945 [49:41<16:57:25, 34.08s/it][h264 @ 0x556d99b82200] mmco: unref short failure
[h264 @ 0x55e44d89ac00] mmco: unref short failure
[h264 @ 0x55e44d89ac00] mmco: unref short failure
  8%|▊         | 155/1945 [49:47<12:47:26, 25.72s/it][h264 @ 0x55e459de8e40] mmco: unref short failure
  8%|▊         | 156/1945 [49:54<10:04:04, 20.26s/it][h264 @ 0x55e448dc88c0] mmco: unref short failure
[h264 @ 0x556da14cd8c0] mmco: unref short failure
  8%|▊         | 157/1945 [50:02<8:11:46, 16.50s/it] [h264 @ 0x55b7210921c0] mmco: unref short failure
[h264 @ 0x556dac7824c0] mmco: unref short failure
  8%|▊         | 158/1945 [50:11<6:59:52, 14.10s/it][h264 @ 0x55b718dd9d40] mmco: unref short failure
[h264 @ 0x556dacdbbec0] mmco: unref short failure
[h264 @ 0x556dacdbbec0] mmco: unref short failure
  8%|▊         | 159/1945 [50:18<6:00:37, 12.11s/it][h264 @ 0x556d8fd17700] mmco: unref short failure
  8%|▊         | 160/1945 [50:25<5:15:24, 10.60s/it][h264 @ 0x556d9f9abf80] mmco: unref short failure
[h264 @ 0x556d9f9abf80] mmco: unref short failure
[h264 @ 0x556da73922c0] mmco: unref short failure
[h264 @ 0x556da73922c0] mmco: unref short failure
  8%|▊         | 161/1945 [50:32<4:40:50,  9.45s/it][h264 @ 0x55e468122f00] mmco: unref short failure
[h264 @ 0x556d9d3c2840] mmco: unref short failure
[h264 @ 0x556d9d3c2840] mmco: unref short failure
  8%|▊         | 162/1945 [50:40<4:31:12,  9.13s/it]  8%|▊         | 163/1945 [50:48<4:19:13,  8.73s/it][h264 @ 0x556dbbd7c1c0] mmco: unref short failure
[h264 @ 0x556dbbd7c1c0] mmco: unref short failure
  8%|▊         | 164/1945 [50:56<4:12:14,  8.50s/it][h264 @ 0x55e44e351b80] mmco: unref short failure
[h264 @ 0x55e44e351b80] mmco: unref short failure
[h264 @ 0x556da0bc5980] mmco: unref short failure
[h264 @ 0x556da0bc5980] mmco: unref short failure
  8%|▊         | 165/1945 [51:02<3:52:34,  7.84s/it][h264 @ 0x55b73756b500] mmco: unref short failure
  9%|▊         | 166/1945 [51:09<3:43:39,  7.54s/it][h264 @ 0x556da19856c0] mmco: unref short failure
[h264 @ 0x556da26a1080] mmco: unref short failure
  9%|▊         | 167/1945 [51:17<3:47:23,  7.67s/it][h264 @ 0x556da6c9be00] mmco: unref short failure
[h264 @ 0x556da6c9be00] mmco: unref short failure
  9%|▊         | 168/1945 [51:25<3:45:02,  7.60s/it][h264 @ 0x55b72ac6eac0] mmco: unref short failure
[h264 @ 0x556dba84e7c0] mmco: unref short failure
[h264 @ 0x556dba84e7c0] mmco: unref short failure
  9%|▊         | 169/1945 [51:36<4:16:00,  8.65s/it][h264 @ 0x55e460c13f00] mmco: unref short failure
[h264 @ 0x55b732176600] mmco: unref short failure
[h264 @ 0x55b732176600] mmco: unref short failure
[h264 @ 0x556da26ec980] mmco: unref short failure
[h264 @ 0x556d8d7cb940] mmco: unref short failure
  9%|▊         | 170/1945 [51:48<4:52:10,  9.88s/it][h264 @ 0x556da22d0500] mmco: unref short failure
[h264 @ 0x556da22d0500] mmco: unref short failure
  9%|▉         | 171/1945 [51:56<4:27:46,  9.06s/it][h264 @ 0x556d9b78f140] mmco: unref short failure
[h264 @ 0x556d9b78f140] mmco: unref short failure
[h264 @ 0x556db9565300] mmco: unref short failure
  9%|▉         | 172/1945 [52:05<4:28:45,  9.09s/it]  9%|▉         | 173/1945 [52:13<4:19:14,  8.78s/it][h264 @ 0x556da31a1800] mmco: unref short failure
[h264 @ 0x556da31a1800] mmco: unref short failure
[h264 @ 0x55e45d1f7800] mmco: unref short failure
[h264 @ 0x55b731f6d540] mmco: unref short failure
[h264 @ 0x55b717083c40] mmco: unref short failure
[h264 @ 0x556d90bfa040] mmco: unref short failure
[h264 @ 0x556d90bfa040] mmco: unref short failure
[h264 @ 0x556d936bc240] mmco: unref short failure
[h264 @ 0x55e44b10b0c0] mmco: unref short failure
[h264 @ 0x55e44b10b0c0] mmco: unref short failure
[h264 @ 0x55e463b33940] mmco: unref short failure
[h264 @ 0x55e463b33940] mmco: unref short failure
[h264 @ 0x55b71e9f6c80] mmco: unref short failure
[h264 @ 0x55b735139780] mmco: unref short failure
[h264 @ 0x55b735139780] mmco: unref short failure
[h264 @ 0x55b7217cd740] mmco: unref short failure
[h264 @ 0x556d9e4eb4c0] mmco: unref short failure
[h264 @ 0x556d93d85e00] mmco: unref short failure
[h264 @ 0x55e44863ee40] mmco: unref short failure
[h264 @ 0x55e44863ee40] mmco: unref short failure
[h264 @ 0x55e44863ee40] mmco: unref short failure
[h264 @ 0x55e44863ee40] mmco: unref short failure
[h264 @ 0x55e45e74f900] mmco: unref short failure
  9%|▉         | 174/1945 [53:13<11:54:03, 24.19s/it][h264 @ 0x556d8fabe3c0] mmco: unref short failure
  9%|▉         | 175/1945 [53:22<9:43:35, 19.78s/it] [h264 @ 0x55e44a3da580] mmco: unref short failure
[h264 @ 0x55e44a3da580] mmco: unref short failure
[h264 @ 0x55e44a3da580] mmco: unref short failure
[h264 @ 0x55e44a3da580] mmco: unref short failure
[h264 @ 0x55e448216bc0] mmco: unref short failure
[h264 @ 0x55e448216bc0] mmco: unref short failure
[h264 @ 0x556d9f3a6c00] mmco: unref short failure
[h264 @ 0x556d9f3a6c00] mmco: unref short failure
[h264 @ 0x556da51a7900] mmco: unref short failure
[h264 @ 0x556da51a7900] mmco: unref short failure
  9%|▉         | 176/1945 [53:31<8:01:43, 16.34s/it][h264 @ 0x55b71b427c00] mmco: unref short failure
[h264 @ 0x55b71b427c00] mmco: unref short failure
  9%|▉         | 177/1945 [53:38<6:41:31, 13.63s/it][h264 @ 0x556daa6e92c0] mmco: unref short failure
  9%|▉         | 178/1945 [53:48<6:05:40, 12.42s/it][h264 @ 0x556dbdecf400] mmco: unref short failure
[h264 @ 0x556dbdecf400] mmco: unref short failure
  9%|▉         | 179/1945 [53:54<5:13:46, 10.66s/it][h264 @ 0x55b71ef62240] mmco: unref short failure
[h264 @ 0x55b71ef62240] mmco: unref short failure
[h264 @ 0x55b717bf8880] mmco: unref short failure
[h264 @ 0x55b717bf8880] mmco: unref short failure
[h264 @ 0x55b717bf8880] mmco: unref short failure
[h264 @ 0x55b717bf8880] mmco: unref short failure
  9%|▉         | 180/1945 [54:06<5:27:06, 11.12s/it]  9%|▉         | 181/1945 [54:15<5:01:34, 10.26s/it][h264 @ 0x55b71c02d100] mmco: unref short failure
[h264 @ 0x55b71c02d100] mmco: unref short failure
[h264 @ 0x556d9cfd0980] mmco: unref short failure
[h264 @ 0x556d9cfd0980] mmco: unref short failure
[h264 @ 0x556dbdeceac0] mmco: unref short failure
[h264 @ 0x55e45e865840] mmco: unref short failure
[h264 @ 0x55e45e865840] mmco: unref short failure
[h264 @ 0x55e44874ecc0] mmco: unref short failure
[h264 @ 0x55e44874ecc0] mmco: unref short failure
[h264 @ 0x55b7372ada80] mmco: unref short failure
[h264 @ 0x55b7372ada80] mmco: unref short failure
[h264 @ 0x55b7372ada80] mmco: unref short failure
[h264 @ 0x55b7372ada80] mmco: unref short failure
[h264 @ 0x55b7372ada80] mmco: unref short failure
[h264 @ 0x55b7372ada80] mmco: unref short failure
[h264 @ 0x556dbc48aec0] mmco: unref short failure
[h264 @ 0x556dbc48aec0] mmco: unref short failure
[h264 @ 0x55e460d91600] mmco: unref short failure
[h264 @ 0x55b7189f13c0] mmco: unref short failure
[h264 @ 0x55e45e26a400] mmco: unref short failure
[h264 @ 0x55e45e26a400] mmco: unref short failure
[h264 @ 0x55e451938ec0] mmco: unref short failure
[h264 @ 0x55e451938ec0] mmco: unref short failure
[h264 @ 0x55e44b5646c0] mmco: unref short failure
[h264 @ 0x55e44b5646c0] mmco: unref short failure
[h264 @ 0x55b72da24dc0] mmco: unref short failure
[h264 @ 0x55b72da24dc0] mmco: unref short failure
[h264 @ 0x55b7161e1780] mmco: unref short failure
[h264 @ 0x55b7161e1780] mmco: unref short failure
[h264 @ 0x55b72ab4ec00] mmco: unref short failure
  9%|▉         | 182/1945 [55:10<11:38:52, 23.78s/it][h264 @ 0x556d9f740580] mmco: unref short failure
[h264 @ 0x556d9f740580] mmco: unref short failure
[h264 @ 0x55b72f83dc00] mmco: unref short failure
  9%|▉         | 183/1945 [55:23<10:04:51, 20.60s/it][h264 @ 0x556dab2a0440] mmco: unref short failure
  9%|▉         | 184/1945 [55:31<8:09:32, 16.68s/it] [h264 @ 0x556da720a300] mmco: unref short failure
[h264 @ 0x556da720a300] mmco: unref short failure
[h264 @ 0x556da720a300] mmco: unref short failure
[h264 @ 0x556da720a300] mmco: unref short failure
[h264 @ 0x556da720a300] mmco: unref short failure
[h264 @ 0x556da720a300] mmco: unref short failure
[h264 @ 0x556da720a300] mmco: unref short failure
[h264 @ 0x55e44ee30980] mmco: unref short failure
[h264 @ 0x55e44ee30980] mmco: unref short failure
[h264 @ 0x55e44ee30980] mmco: unref short failure
[h264 @ 0x55e44ee30980] mmco: unref short failure
[h264 @ 0x556da46c23c0] mmco: unref short failure
 10%|▉         | 185/1945 [55:47<8:07:27, 16.62s/it][h264 @ 0x556d9b0124c0] mmco: unref short failure
[h264 @ 0x556d9b0124c0] mmco: unref short failure
 10%|▉         | 186/1945 [55:54<6:44:59, 13.81s/it][h264 @ 0x55e46335e740] mmco: unref short failure
 10%|▉         | 187/1945 [56:02<5:49:36, 11.93s/it][h264 @ 0x55e460372c40] mmco: unref short failure
 10%|▉         | 188/1945 [56:10<5:14:02, 10.72s/it][h264 @ 0x556d981c3300] mmco: unref short failure
[h264 @ 0x55e465bfd600] mmco: unref short failure
[h264 @ 0x55e44a814380] mmco: unref short failure
[h264 @ 0x55e460372e40] mmco: unref short failure
[h264 @ 0x55e460372e40] mmco: unref short failure
[h264 @ 0x556d92320740] mmco: unref short failure
[h264 @ 0x556db3d756c0] mmco: unref short failure
[h264 @ 0x556db3d756c0] mmco: unref short failure
[h264 @ 0x556db3d756c0] mmco: unref short failure
[h264 @ 0x556db3d756c0] mmco: unref short failure
[h264 @ 0x556db3d756c0] mmco: unref short failure
[h264 @ 0x55e44ad7d2c0] mmco: unref short failure
[h264 @ 0x55b718480300] mmco: unref short failure
[h264 @ 0x55b718480300] mmco: unref short failure
 10%|▉         | 189/1945 [56:23<5:31:20, 11.32s/it][h264 @ 0x556dbbe88840] mmco: unref short failure
[h264 @ 0x556dbbe88840] mmco: unref short failure
[h264 @ 0x55e44835e740] mmco: unref short failure
[h264 @ 0x55b728993dc0] mmco: unref short failure
[h264 @ 0x55b71bdafbc0] mmco: unref short failure
[h264 @ 0x556d8fc1dc00] mmco: unref short failure
[h264 @ 0x556d8fc1dc00] mmco: unref short failure
[h264 @ 0x556d9d73ba40] mmco: unref short failure
[h264 @ 0x556d9d73ba40] mmco: unref short failure
[h264 @ 0x55e448330880] mmco: unref short failure
[h264 @ 0x55e448330880] mmco: unref short failure
[h264 @ 0x55e45775c840] mmco: unref short failure
[h264 @ 0x55e45775c840] mmco: unref short failure
[h264 @ 0x55e45775c840] mmco: unref short failure
[h264 @ 0x55e4621b6e00] mmco: unref short failure
[h264 @ 0x55e4621b6e00] mmco: unref short failure
[h264 @ 0x556d9eae4ec0] mmco: unref short failure
 10%|▉         | 190/1945 [57:10<10:46:34, 22.11s/it][h264 @ 0x55b725015040] mmco: unref short failure
[h264 @ 0x55b725015040] mmco: unref short failure
 10%|▉         | 191/1945 [57:26<9:57:52, 20.45s/it]  10%|▉         | 192/1945 [57:33<7:58:59, 16.39s/it][h264 @ 0x55e467e41ec0] mmco: unref short failure
[h264 @ 0x55e467e41ec0] mmco: unref short failure
[h264 @ 0x556da076fb00] mmco: unref short failure
[h264 @ 0x556da076fb00] mmco: unref short failure
 10%|▉         | 193/1945 [57:51<8:05:45, 16.64s/it][h264 @ 0x556da8a21740] mmco: unref short failure
[h264 @ 0x556da8a21740] mmco: unref short failure
[h264 @ 0x55e44a0eaec0] mmco: unref short failure
 10%|▉         | 194/1945 [57:58<6:48:22, 13.99s/it] 10%|█         | 195/1945 [58:06<5:50:37, 12.02s/it][h264 @ 0x55b732791bc0] mmco: unref short failure
[h264 @ 0x556d91197740] mmco: unref short failure
[h264 @ 0x556d91197740] mmco: unref short failure
[h264 @ 0x556da5371c80] mmco: unref short failure
[h264 @ 0x556da5371c80] mmco: unref short failure
[h264 @ 0x556da703ca80] mmco: unref short failure
[h264 @ 0x556da703ca80] mmco: unref short failure
 10%|█         | 196/1945 [58:27<7:08:13, 14.69s/it][h264 @ 0x55b719aca0c0] mmco: unref short failure
[h264 @ 0x55b719aca0c0] mmco: unref short failure
[h264 @ 0x556d9c5ac000] mmco: unref short failure
 10%|█         | 197/1945 [58:34<5:58:43, 12.31s/it][h264 @ 0x556dba433f80] mmco: unref short failure
[h264 @ 0x55b716d16b00] mmco: unref short failure
[h264 @ 0x55b722df4b80] mmco: unref short failure
[h264 @ 0x55b722df4b80] mmco: unref short failure
[h264 @ 0x55e468122f00] mmco: unref short failure
[h264 @ 0x55e468122f00] mmco: unref short failure
[h264 @ 0x55e463b423c0] mmco: unref short failure
[h264 @ 0x55e463b423c0] mmco: unref short failure
[h264 @ 0x55e44987e580] mmco: unref short failure
 10%|█         | 198/1945 [59:20<10:56:41, 22.55s/it][h264 @ 0x55b72a253b40] mmco: unref short failure
[h264 @ 0x55b72a253b40] mmco: unref short failure
[h264 @ 0x55b72a253b40] mmco: unref short failure
[h264 @ 0x55b72a253b40] mmco: unref short failure
 10%|█         | 199/1945 [59:31<9:11:55, 18.97s/it] 09/09/2024 16:24:59 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 16:24:59 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b7308ae940] mmco: unref short failure
[h264 @ 0x556d9d166740] mmco: unref short failure
[h264 @ 0x556d9d166740] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b71c02dfc0] mmco: unref short failure
[h264 @ 0x55b71c02dfc0] mmco: unref short failure
[h264 @ 0x55b71c0067c0] mmco: unref short failure
[h264 @ 0x556dbbe88180] mmco: unref short failure
[h264 @ 0x55b72526f0c0] mmco: unref short failure
[h264 @ 0x55b721eac300] mmco: unref short failure
[h264 @ 0x556d96acc200] mmco: unref short failure
[h264 @ 0x55b7226084c0] mmco: unref short failure
[h264 @ 0x55e45168d940] mmco: unref short failure
[h264 @ 0x556db2297c00] mmco: unref short failure
[h264 @ 0x556da1605c00] mmco: unref short failure
[h264 @ 0x556d938d9a80] mmco: unref short failure
[h264 @ 0x556d938d9a80] mmco: unref short failure
[h264 @ 0x556d938d9a80] mmco: unref short failure
[h264 @ 0x556d938d9a80] mmco: unref short failure
[h264 @ 0x556db5f4af80] mmco: unref short failure
[h264 @ 0x55b71bfe74c0] mmco: unref short failure
[h264 @ 0x55b71bfe74c0] mmco: unref short failure
[h264 @ 0x55e44a0ea580] mmco: unref short failure
[h264 @ 0x55e4484e7f80] mmco: unref short failure
[h264 @ 0x55e4484e7f80] mmco: unref short failure
[h264 @ 0x556da774e940] mmco: unref short failure
[h264 @ 0x556da774e940] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:46,  4.71it/s][A
  1%|          | 2/221 [00:00<00:53,  4.11it/s][A
  1%|▏         | 3/221 [00:00<01:03,  3.44it/s][A
  2%|▏         | 4/221 [00:01<00:54,  4.00it/s][A
  2%|▏         | 5/221 [00:01<00:49,  4.34it/s][A
  3%|▎         | 6/221 [00:01<00:49,  4.33it/s][A[h264 @ 0x556d9e646500] mmco: unref short failure
[h264 @ 0x556d9e646500] mmco: unref short failure

  3%|▎         | 7/221 [00:01<00:51,  4.14it/s][A
  4%|▎         | 8/221 [00:01<00:44,  4.76it/s][A
  4%|▍         | 9/221 [00:02<00:47,  4.49it/s][A
  5%|▍         | 10/221 [00:02<01:22,  2.55it/s][A
  5%|▍         | 11/221 [00:03<01:06,  3.16it/s][A[h264 @ 0x55e447cecd40] mmco: unref short failure
[h264 @ 0x55e447cecd40] mmco: unref short failure
[h264 @ 0x55e447cecd40] mmco: unref short failure
[h264 @ 0x55e447cecd40] mmco: unref short failure
[h264 @ 0x55e447cecd40] mmco: unref short failure
[h264 @ 0x55e447cecd40] mmco: unref short failure

  5%|▌         | 12/221 [00:03<01:09,  3.02it/s][A
  6%|▌         | 13/221 [00:03<01:12,  2.85it/s][A
  6%|▋         | 14/221 [00:03<01:01,  3.39it/s][A
  7%|▋         | 15/221 [00:04<00:57,  3.56it/s][A
  7%|▋         | 16/221 [00:04<01:19,  2.59it/s][A[h264 @ 0x55b72067c240] mmco: unref short failure
[h264 @ 0x55b72067c240] mmco: unref short failure

  8%|▊         | 17/221 [00:05<01:34,  2.15it/s][A
  8%|▊         | 18/221 [00:05<01:26,  2.34it/s][A
  9%|▊         | 19/221 [00:05<01:09,  2.92it/s][A
  9%|▉         | 20/221 [00:06<00:57,  3.50it/s][A
 10%|▉         | 21/221 [00:06<00:52,  3.83it/s][A
 10%|▉         | 22/221 [00:06<00:51,  3.84it/s][A
 10%|█         | 23/221 [00:06<00:42,  4.70it/s][A
 11%|█         | 24/221 [00:06<00:43,  4.58it/s][A
 11%|█▏        | 25/221 [00:07<00:49,  3.94it/s][A
 12%|█▏        | 26/221 [00:07<00:52,  3.69it/s][A
 13%|█▎        | 28/221 [00:08<00:48,  3.98it/s][A
 13%|█▎        | 29/221 [00:08<00:52,  3.67it/s][A
 14%|█▎        | 30/221 [00:08<01:00,  3.14it/s][A
 14%|█▍        | 31/221 [00:09<00:56,  3.36it/s][A
 15%|█▍        | 33/221 [00:09<00:43,  4.35it/s][A
 16%|█▌        | 35/221 [00:09<00:37,  4.97it/s][A[h264 @ 0x556db09c2000] mmco: unref short failure

 16%|█▋        | 36/221 [00:10<00:52,  3.54it/s][A
 17%|█▋        | 37/221 [00:10<00:57,  3.20it/s][A
 17%|█▋        | 38/221 [00:10<00:58,  3.13it/s][A
 18%|█▊        | 39/221 [00:11<00:49,  3.67it/s][A
 18%|█▊        | 40/221 [00:11<00:57,  3.14it/s][A
 19%|█▊        | 41/221 [00:11<00:53,  3.38it/s][A
 19%|█▉        | 42/221 [00:12<00:54,  3.31it/s][A
 19%|█▉        | 43/221 [00:12<00:51,  3.44it/s][A
 20%|█▉        | 44/221 [00:12<00:44,  4.01it/s][A[h264 @ 0x55b736860580] mmco: unref short failure

 20%|██        | 45/221 [00:12<00:46,  3.81it/s][A
 21%|██        | 46/221 [00:13<00:46,  3.78it/s][A
 21%|██▏       | 47/221 [00:13<00:50,  3.42it/s][A
 22%|██▏       | 48/221 [00:13<00:45,  3.80it/s][A
 22%|██▏       | 49/221 [00:13<00:41,  4.15it/s][A
 23%|██▎       | 50/221 [00:14<00:44,  3.82it/s][A
 23%|██▎       | 51/221 [00:14<00:39,  4.35it/s][A
 24%|██▎       | 52/221 [00:14<00:44,  3.76it/s][A
 24%|██▍       | 53/221 [00:14<00:36,  4.61it/s][A
 24%|██▍       | 54/221 [00:15<01:13,  2.28it/s][A
 25%|██▍       | 55/221 [00:15<01:04,  2.56it/s][A
 25%|██▌       | 56/221 [00:16<00:51,  3.18it/s][A
 26%|██▌       | 57/221 [00:16<00:55,  2.95it/s][A
 26%|██▌       | 58/221 [00:16<00:52,  3.11it/s][A
 27%|██▋       | 59/221 [00:16<00:46,  3.46it/s][A
 27%|██▋       | 60/221 [00:17<00:56,  2.87it/s][A
 28%|██▊       | 61/221 [00:17<00:52,  3.06it/s][A
 28%|██▊       | 62/221 [00:18<00:51,  3.06it/s][A
 29%|██▊       | 63/221 [00:18<00:46,  3.39it/s][A
 29%|██▉       | 64/221 [00:18<01:00,  2.61it/s][A
 29%|██▉       | 65/221 [00:19<00:55,  2.81it/s][A
 30%|██▉       | 66/221 [00:19<01:07,  2.30it/s][A
 30%|███       | 67/221 [00:20<01:00,  2.54it/s][A
 31%|███       | 68/221 [00:20<00:58,  2.60it/s][A
 31%|███       | 69/221 [00:21<01:08,  2.22it/s][A
 32%|███▏      | 70/221 [00:21<00:59,  2.54it/s][A
 32%|███▏      | 71/221 [00:21<00:53,  2.81it/s][A
 33%|███▎      | 72/221 [00:22<00:56,  2.64it/s][A
 33%|███▎      | 73/221 [00:22<00:58,  2.51it/s][A
 33%|███▎      | 74/221 [00:22<00:46,  3.18it/s][A
 34%|███▍      | 75/221 [00:22<00:44,  3.29it/s][A
 34%|███▍      | 76/221 [00:23<00:42,  3.44it/s][A
 35%|███▍      | 77/221 [00:23<00:49,  2.91it/s][A
 35%|███▌      | 78/221 [00:23<00:40,  3.54it/s][A
 36%|███▌      | 79/221 [00:24<00:46,  3.06it/s][A
 36%|███▌      | 80/221 [00:24<00:38,  3.64it/s][A
 37%|███▋      | 81/221 [00:24<00:38,  3.59it/s][A
 37%|███▋      | 82/221 [00:24<00:41,  3.32it/s][A
 38%|███▊      | 83/221 [00:25<01:06,  2.07it/s][A
 38%|███▊      | 84/221 [00:26<01:00,  2.28it/s][A
 38%|███▊      | 85/221 [00:26<00:45,  2.96it/s][A
 39%|███▉      | 86/221 [00:26<00:42,  3.21it/s][A
 39%|███▉      | 87/221 [00:27<01:03,  2.13it/s][A
 40%|███▉      | 88/221 [00:27<00:59,  2.22it/s][A
 40%|████      | 89/221 [00:28<00:57,  2.28it/s][A
 41%|████      | 90/221 [00:28<01:02,  2.11it/s][A
 41%|████      | 91/221 [00:28<00:50,  2.59it/s][A
 42%|████▏     | 92/221 [00:29<00:43,  2.98it/s][A
 42%|████▏     | 93/221 [00:29<00:46,  2.76it/s][A
 43%|████▎     | 94/221 [00:29<00:42,  2.96it/s][A
 43%|████▎     | 95/221 [00:30<00:44,  2.86it/s][A
 43%|████▎     | 96/221 [00:31<01:01,  2.05it/s][A
 44%|████▍     | 97/221 [00:31<00:54,  2.28it/s][A
 44%|████▍     | 98/221 [00:32<01:29,  1.37it/s][A
 45%|████▍     | 99/221 [00:33<01:09,  1.75it/s][A
 45%|████▌     | 100/221 [00:33<00:58,  2.07it/s][A
 46%|████▌     | 101/221 [00:33<00:47,  2.52it/s][A
 46%|████▌     | 102/221 [00:34<00:57,  2.08it/s][A
 47%|████▋     | 103/221 [00:34<00:46,  2.53it/s][A
 47%|████▋     | 104/221 [00:34<00:41,  2.84it/s][A
 48%|████▊     | 105/221 [00:35<00:46,  2.50it/s][A
 48%|████▊     | 106/221 [00:35<00:50,  2.29it/s][A[h264 @ 0x55b738ea21c0] mmco: unref short failure
[h264 @ 0x55b738ea21c0] mmco: unref short failure

 48%|████▊     | 107/221 [00:36<00:47,  2.40it/s][A
 49%|████▉     | 108/221 [00:36<00:43,  2.61it/s][A
 49%|████▉     | 109/221 [00:36<00:37,  3.00it/s][A
 50%|████▉     | 110/221 [00:36<00:30,  3.69it/s][A
 50%|█████     | 111/221 [00:36<00:30,  3.60it/s][A
 51%|█████     | 112/221 [00:37<00:29,  3.75it/s][A
 51%|█████     | 113/221 [00:37<00:32,  3.33it/s][A
 52%|█████▏    | 114/221 [00:37<00:27,  3.90it/s][A
 52%|█████▏    | 115/221 [00:37<00:24,  4.24it/s][A[h264 @ 0x55b7168a2840] mmco: unref short failure

 52%|█████▏    | 116/221 [00:38<00:29,  3.62it/s][A
 53%|█████▎    | 117/221 [00:38<00:31,  3.29it/s][A[h264 @ 0x556d90e5cc40] mmco: unref short failure
[h264 @ 0x556d90e5cc40] mmco: unref short failure

 53%|█████▎    | 118/221 [00:39<00:33,  3.10it/s][A
 54%|█████▍    | 119/221 [00:39<00:35,  2.83it/s][A
 54%|█████▍    | 120/221 [00:39<00:29,  3.39it/s][A
 55%|█████▍    | 121/221 [00:39<00:25,  3.95it/s][A
 55%|█████▌    | 122/221 [00:40<00:26,  3.76it/s][A
 56%|█████▌    | 123/221 [00:40<00:23,  4.10it/s][A[h264 @ 0x556db7735dc0] mmco: unref short failure

 56%|█████▌    | 124/221 [00:40<00:30,  3.21it/s][A
 57%|█████▋    | 125/221 [00:41<00:31,  3.04it/s][A
 57%|█████▋    | 126/221 [00:41<00:27,  3.47it/s][A
 57%|█████▋    | 127/221 [00:41<00:30,  3.03it/s][A
 58%|█████▊    | 128/221 [00:41<00:29,  3.17it/s][A
 58%|█████▊    | 129/221 [00:42<00:23,  3.90it/s][A
 59%|█████▉    | 130/221 [00:42<00:23,  3.92it/s][A
 59%|█████▉    | 131/221 [00:42<00:23,  3.84it/s][A
 60%|█████▉    | 132/221 [00:43<00:48,  1.82it/s][A
 60%|██████    | 133/221 [00:44<00:40,  2.19it/s][A
 61%|██████    | 134/221 [00:44<00:44,  1.93it/s][A
 61%|██████    | 135/221 [00:44<00:36,  2.35it/s][A
 62%|██████▏   | 136/221 [00:45<00:33,  2.58it/s][A
 62%|██████▏   | 137/221 [00:45<00:28,  2.95it/s][A[h264 @ 0x556d8db3a100] mmco: unref short failure
[h264 @ 0x556d8db3a100] mmco: unref short failure

 62%|██████▏   | 138/221 [00:45<00:29,  2.86it/s][A[h264 @ 0x556d8db3a100] mmco: unref short failure
[h264 @ 0x556d8db3a100] mmco: unref short failure
[h264 @ 0x556d8db3a100] mmco: unref short failure
[h264 @ 0x556d8db3a100] mmco: unref short failure
[h264 @ 0x55e4643fe980] mmco: unref short failure
[h264 @ 0x55e4643fe980] mmco: unref short failure

 63%|██████▎   | 139/221 [00:46<00:32,  2.54it/s][A
 63%|██████▎   | 140/221 [00:46<00:30,  2.69it/s][A
 64%|██████▍   | 141/221 [00:46<00:26,  3.04it/s][A
 64%|██████▍   | 142/221 [00:47<00:25,  3.08it/s][A
 65%|██████▍   | 143/221 [00:47<00:33,  2.36it/s][A
 65%|██████▌   | 144/221 [00:48<00:29,  2.61it/s][A
 66%|██████▌   | 145/221 [00:48<00:24,  3.08it/s][A
 66%|██████▌   | 146/221 [00:48<00:19,  3.79it/s][A
 67%|██████▋   | 147/221 [00:48<00:19,  3.79it/s][A
 67%|██████▋   | 148/221 [00:49<00:24,  2.96it/s][A
 67%|██████▋   | 149/221 [00:49<00:29,  2.47it/s][A
 68%|██████▊   | 150/221 [00:50<00:25,  2.74it/s][A
 68%|██████▊   | 151/221 [00:50<00:26,  2.67it/s][A
 69%|██████▉   | 152/221 [00:51<00:34,  2.01it/s][A
 69%|██████▉   | 153/221 [00:51<00:26,  2.52it/s][A
 70%|██████▉   | 154/221 [00:51<00:23,  2.84it/s][A
 70%|███████   | 155/221 [00:52<00:25,  2.57it/s][A[h264 @ 0x55e44c4145c0] mmco: unref short failure
[h264 @ 0x55e44c4145c0] mmco: unref short failure

 71%|███████   | 156/221 [00:52<00:24,  2.61it/s][A[h264 @ 0x556d909a4b00] mmco: unref short failure

 71%|███████   | 157/221 [00:52<00:22,  2.82it/s][A
 71%|███████▏  | 158/221 [00:53<00:20,  3.14it/s][A
 72%|███████▏  | 160/221 [00:53<00:13,  4.38it/s][A
 73%|███████▎  | 161/221 [00:53<00:15,  3.97it/s][A
 73%|███████▎  | 162/221 [00:53<00:13,  4.45it/s][A
 74%|███████▍  | 163/221 [00:54<00:13,  4.20it/s][A
 74%|███████▍  | 164/221 [00:54<00:11,  4.76it/s][A
 75%|███████▍  | 165/221 [00:54<00:12,  4.57it/s][A
 75%|███████▌  | 166/221 [00:54<00:13,  4.11it/s][A
 76%|███████▌  | 167/221 [00:54<00:13,  4.06it/s][A
 76%|███████▌  | 168/221 [00:55<00:15,  3.44it/s][A
 77%|███████▋  | 170/221 [00:55<00:11,  4.43it/s][A
 77%|███████▋  | 171/221 [00:56<00:13,  3.68it/s][A
 78%|███████▊  | 172/221 [00:56<00:13,  3.65it/s][A
 78%|███████▊  | 173/221 [00:56<00:15,  3.02it/s][A
 79%|███████▊  | 174/221 [00:57<00:15,  3.12it/s][A
 79%|███████▉  | 175/221 [00:57<00:14,  3.24it/s][A
 80%|███████▉  | 176/221 [00:57<00:11,  3.97it/s][A
 80%|████████  | 177/221 [00:57<00:10,  4.39it/s][A
 81%|████████  | 178/221 [00:58<00:15,  2.76it/s][A
 81%|████████  | 179/221 [00:58<00:15,  2.78it/s][A
 81%|████████▏ | 180/221 [00:58<00:12,  3.35it/s][A
 82%|████████▏ | 181/221 [00:59<00:11,  3.53it/s][A
 82%|████████▏ | 182/221 [00:59<00:12,  3.11it/s][A
 83%|████████▎ | 183/221 [00:59<00:10,  3.49it/s][A
 83%|████████▎ | 184/221 [01:00<00:11,  3.15it/s][A
 84%|████████▍ | 186/221 [01:00<00:08,  3.94it/s][A
 85%|████████▍ | 187/221 [01:00<00:09,  3.44it/s][A
 85%|████████▌ | 188/221 [01:01<00:09,  3.53it/s][A
 86%|████████▌ | 189/221 [01:01<00:08,  3.61it/s][A
 86%|████████▌ | 190/221 [01:01<00:08,  3.57it/s][A
 86%|████████▋ | 191/221 [01:01<00:07,  4.08it/s][A
 87%|████████▋ | 192/221 [01:02<00:06,  4.24it/s][A
 87%|████████▋ | 193/221 [01:02<00:06,  4.48it/s][A[h264 @ 0x55e44bc85900] mmco: unref short failure

 88%|████████▊ | 194/221 [01:02<00:09,  2.85it/s][A
 88%|████████▊ | 195/221 [01:03<00:07,  3.33it/s][A
 89%|████████▊ | 196/221 [01:03<00:07,  3.38it/s][A
 89%|████████▉ | 197/221 [01:03<00:07,  3.10it/s][A
 90%|████████▉ | 198/221 [01:04<00:06,  3.29it/s][A
 90%|█████████ | 199/221 [01:04<00:08,  2.68it/s][A
 90%|█████████ | 200/221 [01:04<00:06,  3.10it/s][A
 91%|█████████ | 201/221 [01:04<00:05,  3.47it/s][A
 91%|█████████▏| 202/221 [01:05<00:06,  2.98it/s][A
 92%|█████████▏| 203/221 [01:05<00:05,  3.35it/s][A
 92%|█████████▏| 204/221 [01:05<00:04,  3.41it/s][A
 93%|█████████▎| 205/221 [01:06<00:03,  4.06it/s][A
 93%|█████████▎| 206/221 [01:06<00:04,  3.65it/s][A[h264 @ 0x556d9b0127c0] mmco: unref short failure

 94%|█████████▍| 208/221 [01:06<00:03,  3.91it/s][A
 95%|█████████▍| 209/221 [01:07<00:02,  4.00it/s][A
 95%|█████████▌| 211/221 [01:07<00:02,  4.36it/s][A
 96%|█████████▌| 212/221 [01:07<00:02,  4.35it/s][A
 96%|█████████▋| 213/221 [01:07<00:01,  4.65it/s][A
 97%|█████████▋| 214/221 [01:08<00:02,  3.09it/s][A
 97%|█████████▋| 215/221 [01:08<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:09<00:01,  3.54it/s][A
 98%|█████████▊| 217/221 [01:09<00:01,  3.21it/s][A
 99%|█████████▊| 218/221 [01:09<00:00,  3.16it/s][A
 99%|█████████▉| 219/221 [01:10<00:00,  2.80it/s][A
100%|█████████▉| 220/221 [01:10<00:00,  2.77it/s][A
100%|██████████| 221/221 [01:10<00:00,  3.26it/s][A100%|██████████| 221/221 [01:10<00:00,  3.13it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:00,  3.66it/s][A
  1%|          | 2/221 [00:00<01:00,  3.65it/s][A
  1%|▏         | 3/221 [00:00<00:58,  3.70it/s][A
  2%|▏         | 4/221 [00:01<00:58,  3.72it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.74it/s][A
  3%|▎         | 6/221 [00:01<00:57,  3.74it/s][A
  3%|▎         | 7/221 [00:01<00:57,  3.75it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.76it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.76it/s][A
  5%|▍         | 10/221 [00:02<00:56,  3.76it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.77it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.76it/s][A
  6%|▌         | 13/221 [00:03<00:55,  3.77it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.77it/s][A
  7%|▋         | 15/221 [00:04<00:54,  3.77it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.77it/s][A
  8%|▊         | 17/221 [00:04<00:54,  3.77it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.77it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.77it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.77it/s][A
 10%|▉         | 21/221 [00:05<00:53,  3.77it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.77it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.77it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.77it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.77it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.77it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 28/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.78it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.78it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.78it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.78it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.78it/s][A
 15%|█▌        | 34/221 [00:09<00:49,  3.78it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.78it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.78it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.78it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.78it/s][A
 19%|█▉        | 43/221 [00:11<00:47,  3.78it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.78it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.78it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.78it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:14<00:44,  3.78it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.78it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.78it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.78it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.78it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.78it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.78it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.78it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.78it/s][A
 28%|██▊       | 62/221 [00:16<00:42,  3.78it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.78it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.78it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:18<00:40,  3.78it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.78it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.78it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.78it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.78it/s][A
 37%|███▋      | 81/221 [00:21<00:37,  3.78it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.78it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.78it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.78it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 87/221 [00:23<00:35,  3.78it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.78it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.78it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.78it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.78it/s][A
 43%|████▎     | 96/221 [00:25<00:33,  3.78it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:28<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.78it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.78it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.78it/s][A
 55%|█████▍    | 121/221 [00:32<00:26,  3.78it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.78it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.78it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.78it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.78it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.78it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.78it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 140/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.78it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.78it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.78it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.78it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.78it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.78it/s][A
 70%|███████   | 155/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.78it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.78it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.78it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.78it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.78it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.78it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.78it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.78it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.78it/s][A
 76%|███████▌  | 168/221 [00:44<00:14,  3.78it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.78it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.78it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.78it/s][A
 79%|███████▊  | 174/221 [00:46<00:12,  3.78it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.78it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.78it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.78it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.78it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.78it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.78it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.78it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.78it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 189/221 [00:50<00:08,  3.78it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.78it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 193/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [00:56<00:02,  3.78it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.78it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.78it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.78it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.78it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.78it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.78it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.78it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:29,  7.39it/s][A
  1%|          | 2/221 [00:00<00:52,  4.14it/s][A
  1%|▏         | 3/221 [00:00<00:51,  4.26it/s][A
  2%|▏         | 4/221 [00:01<01:04,  3.34it/s][A
  2%|▏         | 5/221 [00:01<00:51,  4.20it/s][A
  3%|▎         | 7/221 [00:01<00:38,  5.50it/s][A
  4%|▎         | 8/221 [00:01<00:34,  6.15it/s][A
  4%|▍         | 9/221 [00:01<00:34,  6.10it/s][A
  5%|▍         | 10/221 [00:02<01:05,  3.22it/s][A
  5%|▍         | 11/221 [00:02<00:52,  3.98it/s][A
  5%|▌         | 12/221 [00:02<00:44,  4.70it/s][A
  6%|▌         | 13/221 [00:03<01:04,  3.22it/s][A
  7%|▋         | 15/221 [00:03<00:48,  4.26it/s][A
  7%|▋         | 16/221 [00:03<00:53,  3.82it/s][A
  8%|▊         | 17/221 [00:04<01:22,  2.47it/s][A
  8%|▊         | 18/221 [00:04<01:09,  2.91it/s][A
  9%|▊         | 19/221 [00:04<00:58,  3.43it/s][A
  9%|▉         | 20/221 [00:05<00:49,  4.07it/s][A
 10%|▉         | 22/221 [00:05<00:46,  4.28it/s][A
 11%|█         | 24/221 [00:05<00:37,  5.21it/s][A
 11%|█▏        | 25/221 [00:05<00:36,  5.31it/s][A
 12%|█▏        | 26/221 [00:06<00:39,  4.92it/s][A
 13%|█▎        | 28/221 [00:06<00:36,  5.24it/s][A
 13%|█▎        | 29/221 [00:06<00:36,  5.31it/s][A
 14%|█▎        | 30/221 [00:07<00:41,  4.56it/s][A
 14%|█▍        | 31/221 [00:07<00:37,  5.09it/s][A
 15%|█▍        | 33/221 [00:07<00:29,  6.40it/s][A
 16%|█▌        | 35/221 [00:07<00:27,  6.66it/s][A
 16%|█▋        | 36/221 [00:08<00:37,  4.98it/s][A
 17%|█▋        | 37/221 [00:08<00:35,  5.13it/s][A
 17%|█▋        | 38/221 [00:08<00:42,  4.33it/s][A
 18%|█▊        | 39/221 [00:08<00:36,  4.97it/s][A
 18%|█▊        | 40/221 [00:09<00:42,  4.22it/s][A
 19%|█▊        | 41/221 [00:09<00:36,  4.88it/s][A
 19%|█▉        | 42/221 [00:09<00:42,  4.16it/s][A
 19%|█▉        | 43/221 [00:09<00:49,  3.63it/s][A
 20%|█▉        | 44/221 [00:10<00:49,  3.56it/s][A
 20%|██        | 45/221 [00:10<00:47,  3.68it/s][A
 21%|██        | 46/221 [00:10<00:38,  4.49it/s][A
 21%|██▏       | 47/221 [00:10<00:40,  4.28it/s][A
 22%|██▏       | 49/221 [00:11<00:33,  5.14it/s][A
 23%|██▎       | 50/221 [00:11<00:34,  4.98it/s][A
 23%|██▎       | 51/221 [00:11<00:30,  5.58it/s][A
 24%|██▎       | 52/221 [00:11<00:28,  6.02it/s][A
 24%|██▍       | 54/221 [00:12<00:53,  3.15it/s][A
 25%|██▍       | 55/221 [00:12<00:52,  3.19it/s][A
 25%|██▌       | 56/221 [00:12<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:13<00:41,  3.96it/s][A
 26%|██▌       | 58/221 [00:13<00:40,  4.06it/s][A
 27%|██▋       | 59/221 [00:13<00:35,  4.51it/s][A
 27%|██▋       | 60/221 [00:14<00:51,  3.14it/s][A
 28%|██▊       | 61/221 [00:14<00:43,  3.64it/s][A
 28%|██▊       | 62/221 [00:14<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:14<00:43,  3.62it/s][A
 29%|██▉       | 64/221 [00:15<00:51,  3.07it/s][A
 29%|██▉       | 65/221 [00:15<00:41,  3.73it/s][A
 30%|██▉       | 66/221 [00:15<00:55,  2.79it/s][A
 30%|███       | 67/221 [00:16<00:50,  3.02it/s][A
 31%|███       | 69/221 [00:17<01:07,  2.25it/s][A
 32%|███▏      | 70/221 [00:17<00:58,  2.60it/s][A
 32%|███▏      | 71/221 [00:17<00:51,  2.89it/s][A
 33%|███▎      | 72/221 [00:18<00:54,  2.74it/s][A
 33%|███▎      | 73/221 [00:18<00:57,  2.56it/s][A
 34%|███▍      | 75/221 [00:18<00:40,  3.62it/s][A
 34%|███▍      | 76/221 [00:19<00:37,  3.83it/s][A
 35%|███▍      | 77/221 [00:19<00:46,  3.13it/s][A
 35%|███▌      | 78/221 [00:19<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:41,  3.44it/s][A
 36%|███▌      | 80/221 [00:20<00:36,  3.86it/s][A
 37%|███▋      | 81/221 [00:20<00:35,  3.97it/s][A
 37%|███▋      | 82/221 [00:20<00:38,  3.63it/s][A
 38%|███▊      | 83/221 [00:21<00:52,  2.62it/s][A
 38%|███▊      | 84/221 [00:21<00:43,  3.13it/s][A
 39%|███▉      | 86/221 [00:21<00:30,  4.50it/s][A
 39%|███▉      | 87/221 [00:22<00:53,  2.51it/s][A
 40%|███▉      | 88/221 [00:23<00:51,  2.56it/s][A
 40%|████      | 89/221 [00:23<00:44,  2.93it/s][A
 41%|████      | 90/221 [00:23<00:44,  2.94it/s][A
 41%|████      | 91/221 [00:23<00:37,  3.50it/s][A
 42%|████▏     | 92/221 [00:24<00:31,  4.07it/s][A
 42%|████▏     | 93/221 [00:24<00:42,  3.00it/s][A
 43%|████▎     | 94/221 [00:24<00:41,  3.04it/s][A
 43%|████▎     | 95/221 [00:25<00:40,  3.10it/s][A
 43%|████▎     | 96/221 [00:25<00:49,  2.54it/s][A
 44%|████▍     | 97/221 [00:26<00:41,  2.96it/s][A
 44%|████▍     | 98/221 [00:26<00:51,  2.37it/s][A
 45%|████▍     | 99/221 [00:26<00:42,  2.89it/s][A
 45%|████▌     | 100/221 [00:27<00:37,  3.20it/s][A
 46%|████▌     | 101/221 [00:27<00:34,  3.46it/s][A
 46%|████▌     | 102/221 [00:28<01:11,  1.67it/s][A
 47%|████▋     | 104/221 [00:28<00:43,  2.69it/s][A
 48%|████▊     | 105/221 [00:29<00:39,  2.92it/s][A
 48%|████▊     | 106/221 [00:29<00:47,  2.44it/s][A
 48%|████▊     | 107/221 [00:29<00:39,  2.88it/s][A
 49%|████▉     | 108/221 [00:30<00:37,  3.03it/s][A
 49%|████▉     | 109/221 [00:30<00:30,  3.72it/s][A
 50%|████▉     | 110/221 [00:30<00:27,  4.02it/s][A
 50%|█████     | 111/221 [00:30<00:25,  4.37it/s][A
 51%|█████     | 112/221 [00:30<00:25,  4.23it/s][A
 51%|█████     | 113/221 [00:31<00:26,  4.08it/s][A
 52%|█████▏    | 115/221 [00:31<00:18,  5.73it/s][A
 52%|█████▏    | 116/221 [00:31<00:20,  5.14it/s][A
 53%|█████▎    | 117/221 [00:31<00:22,  4.59it/s][A
 53%|█████▎    | 118/221 [00:32<00:21,  4.87it/s][A
 54%|█████▍    | 119/221 [00:32<00:27,  3.77it/s][A
 54%|█████▍    | 120/221 [00:32<00:23,  4.27it/s][A
 55%|█████▌    | 122/221 [00:32<00:19,  5.01it/s][A
 56%|█████▌    | 123/221 [00:33<00:18,  5.28it/s][A
 56%|█████▌    | 124/221 [00:33<00:21,  4.56it/s][A
 57%|█████▋    | 125/221 [00:33<00:24,  3.88it/s][A
 57%|█████▋    | 126/221 [00:33<00:21,  4.52it/s][A
 57%|█████▋    | 127/221 [00:34<00:25,  3.75it/s][A
 58%|█████▊    | 128/221 [00:34<00:24,  3.87it/s][A
 59%|█████▉    | 130/221 [00:34<00:16,  5.51it/s][A
 59%|█████▉    | 131/221 [00:34<00:14,  6.02it/s][A
 60%|█████▉    | 132/221 [00:36<00:47,  1.89it/s][A
 60%|██████    | 133/221 [00:36<00:40,  2.18it/s][A
 61%|██████    | 134/221 [00:37<00:46,  1.88it/s][A
 61%|██████    | 135/221 [00:38<00:49,  1.75it/s][A
 62%|██████▏   | 136/221 [00:38<00:41,  2.07it/s][A
 62%|██████▏   | 137/221 [00:38<00:34,  2.41it/s][A
 62%|██████▏   | 138/221 [00:38<00:33,  2.51it/s][A
 63%|██████▎   | 139/221 [00:39<00:39,  2.09it/s][A
 63%|██████▎   | 140/221 [00:39<00:35,  2.25it/s][A
 64%|██████▍   | 141/221 [00:40<00:30,  2.61it/s][A
 64%|██████▍   | 142/221 [00:40<00:26,  3.00it/s][A
 65%|██████▍   | 143/221 [00:41<00:37,  2.05it/s][A
 65%|██████▌   | 144/221 [00:41<00:37,  2.08it/s][A
 66%|██████▌   | 146/221 [00:41<00:21,  3.46it/s][A
 67%|██████▋   | 147/221 [00:42<00:22,  3.33it/s][A
 67%|██████▋   | 148/221 [00:42<00:23,  3.05it/s][A
 67%|██████▋   | 149/221 [00:43<00:27,  2.65it/s][A
 68%|██████▊   | 150/221 [00:43<00:24,  2.93it/s][A
 68%|██████▊   | 151/221 [00:43<00:24,  2.89it/s][A
 69%|██████▉   | 152/221 [00:44<00:35,  1.97it/s][A
 69%|██████▉   | 153/221 [00:44<00:26,  2.56it/s][A
 70%|██████▉   | 154/221 [00:44<00:23,  2.87it/s][A
 70%|███████   | 155/221 [00:45<00:23,  2.77it/s][A
 71%|███████   | 156/221 [00:45<00:23,  2.73it/s][A
 71%|███████   | 157/221 [00:46<00:22,  2.86it/s][A
 71%|███████▏  | 158/221 [00:46<00:20,  3.12it/s][A
 72%|███████▏  | 159/221 [00:46<00:16,  3.83it/s][A
 72%|███████▏  | 160/221 [00:46<00:13,  4.47it/s][A
 73%|███████▎  | 161/221 [00:46<00:13,  4.43it/s][A
 74%|███████▍  | 163/221 [00:47<00:11,  5.01it/s][A
 74%|███████▍  | 164/221 [00:47<00:10,  5.68it/s][A
 75%|███████▍  | 165/221 [00:47<00:12,  4.34it/s][A
 75%|███████▌  | 166/221 [00:47<00:12,  4.32it/s][A
 76%|███████▌  | 168/221 [00:48<00:10,  4.95it/s][A
 76%|███████▋  | 169/221 [00:48<00:09,  5.24it/s][A
 77%|███████▋  | 170/221 [00:48<00:10,  4.85it/s][A
 77%|███████▋  | 171/221 [00:48<00:11,  4.41it/s][A
 78%|███████▊  | 172/221 [00:49<00:10,  4.75it/s][A
 78%|███████▊  | 173/221 [00:49<00:14,  3.27it/s][A
 79%|███████▊  | 174/221 [00:50<00:16,  2.80it/s][A
 79%|███████▉  | 175/221 [00:50<00:15,  2.92it/s][A
 80%|████████  | 177/221 [00:50<00:10,  4.29it/s][A
 81%|████████  | 178/221 [00:51<00:13,  3.13it/s][A
 81%|████████  | 179/221 [00:51<00:13,  3.06it/s][A
 81%|████████▏ | 180/221 [00:51<00:11,  3.58it/s][A
 82%|████████▏ | 181/221 [00:51<00:09,  4.08it/s][A
 82%|████████▏ | 182/221 [00:52<00:09,  4.01it/s][A
 83%|████████▎ | 183/221 [00:52<00:09,  4.21it/s][A
 83%|████████▎ | 184/221 [00:52<00:09,  4.01it/s][A
 84%|████████▍ | 186/221 [00:53<00:09,  3.69it/s][A
 85%|████████▍ | 187/221 [00:53<00:09,  3.50it/s][A
 85%|████████▌ | 188/221 [00:53<00:09,  3.58it/s][A
 86%|████████▌ | 189/221 [00:53<00:08,  3.67it/s][A
 86%|████████▌ | 190/221 [00:54<00:08,  3.55it/s][A
 86%|████████▋ | 191/221 [00:54<00:07,  4.23it/s][A
 87%|████████▋ | 192/221 [00:54<00:07,  4.09it/s][A
 88%|████████▊ | 194/221 [00:55<00:07,  3.61it/s][A
 88%|████████▊ | 195/221 [00:55<00:06,  3.82it/s][A
 89%|████████▊ | 196/221 [00:55<00:07,  3.48it/s][A
 89%|████████▉ | 197/221 [00:56<00:07,  3.21it/s][A
 90%|████████▉ | 198/221 [00:56<00:07,  3.02it/s][A
 90%|█████████ | 199/221 [00:56<00:07,  3.09it/s][A
 90%|█████████ | 200/221 [00:57<00:06,  3.18it/s][A
 91%|█████████ | 201/221 [00:57<00:05,  3.68it/s][A
 91%|█████████▏| 202/221 [00:57<00:05,  3.59it/s][A
 92%|█████████▏| 203/221 [00:57<00:04,  3.71it/s][A
 92%|█████████▏| 204/221 [00:58<00:04,  3.43it/s][A
 93%|█████████▎| 206/221 [00:58<00:03,  3.90it/s][A
 94%|█████████▍| 208/221 [00:59<00:02,  4.36it/s][A
 95%|█████████▍| 209/221 [00:59<00:02,  4.14it/s][A
 95%|█████████▌| 211/221 [00:59<00:02,  4.45it/s][A
 96%|█████████▌| 212/221 [01:00<00:02,  4.47it/s][A
 96%|█████████▋| 213/221 [01:00<00:01,  4.78it/s][A
 97%|█████████▋| 214/221 [01:01<00:03,  2.33it/s][A
 97%|█████████▋| 215/221 [01:01<00:02,  2.70it/s][A
 98%|█████████▊| 216/221 [01:01<00:01,  2.63it/s][A
 98%|█████████▊| 217/221 [01:02<00:01,  2.57it/s][A
 99%|█████████▊| 218/221 [01:02<00:01,  2.78it/s][A
 99%|█████████▉| 219/221 [01:02<00:00,  2.83it/s][A
100%|█████████▉| 220/221 [01:03<00:00,  3.39it/s][A
100%|██████████| 221/221 [01:03<00:00,  3.75it/s][A100%|██████████| 221/221 [01:03<00:00,  3.49it/s]
09/09/2024 16:30:35 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 199--===========

09/09/2024 16:30:35 - INFO - __main__ -   {'area_r1': 41.9, 'area_recall': '41.9/71.0/79.9', 'area_ravg': 64.3}
09/09/2024 16:30:35 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 199--===========

09/09/2024 16:30:35 - INFO - __main__ -   {'forward_r1': 37.1, 'forward_recall': '37.1/65.3/75.6', 'forward_ravg': 59.3}
09/09/2024 16:30:35 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 199--===========

09/09/2024 16:30:35 - INFO - __main__ -   {'area_video_r1': 38.8, 'area_video_recall': '38.8/65.8/77.3', 'area_video_ravg': 60.6}
09/09/2024 16:30:35 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 199=======

09/09/2024 16:30:35 - INFO - __main__ -   {'area_video_r1': 38.8, 'area_video_recall': '38.8/65.8/77.3', 'area_video_ravg': 60.6}
09/09/2024 16:30:35 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 199--===========

09/09/2024 16:30:35 - INFO - __main__ -   {'area_video_r1': 51.1, 'area_video_recall': '51.1/74.4/82.4', 'area_video_ravg': 69.3, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/71.6/80.3', 'area_video_back_ravg': 67.2}
09/09/2024 16:30:35 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 16:30:35 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 16:30:35 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 199--===========

09/09/2024 16:30:35 - INFO - __main__ -   {'video_r1': 40.8, 'video_recall': '40.8/69.2/80.9', 'video_ravg': 63.7}
09/09/2024 16:30:35 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 16:30:35 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 16:30:35 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 199--===========

09/09/2024 16:30:35 - INFO - __main__ -   {'video_r1': 50.9, 'video_recall': '50.9/74.5/81.9', 'video_ravg': 69.1}
09/09/2024 16:30:35 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 149=======

09/09/2024 16:30:35 - INFO - __main__ -   {'video_r1': 52.1, 'video_recall': '52.1/75.1/82.4', 'video_ravg': 69.9}
09/09/2024 16:31:02 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.8551855087280273, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.032973162829875946, 'loss_ret%tv%ta--finetune_area/loss_area': 2.704972743988037, 'loss_ret%tv%ta--finetune_area/total_loss': 4.5931315422058105}
 10%|█         | 200/1945 [1:05:37<59:41:40, 123.15s/it] 10%|█         | 201/1945 [1:05:41<42:21:07, 87.42s/it] [h264 @ 0x55e450305300] mmco: unref short failure
[h264 @ 0x55e450305300] mmco: unref short failure
[h264 @ 0x55b72b0e9380] mmco: unref short failure
 10%|█         | 202/1945 [1:05:46<30:18:23, 62.60s/it] 10%|█         | 203/1945 [1:05:51<21:59:34, 45.45s/it][h264 @ 0x55e451d8e0c0] mmco: unref short failure
[h264 @ 0x55e451d8e0c0] mmco: unref short failure
 10%|█         | 204/1945 [1:05:57<16:16:19, 33.65s/it][h264 @ 0x55b7256450c0] mmco: unref short failure
[h264 @ 0x55b7256450c0] mmco: unref short failure
[h264 @ 0x55e465abba40] mmco: unref short failure
[h264 @ 0x55e465abba40] mmco: unref short failure
[h264 @ 0x55e465abba40] mmco: unref short failure
[h264 @ 0x55e465abba40] mmco: unref short failure
 11%|█         | 205/1945 [1:06:03<12:14:39, 25.33s/it][h264 @ 0x556da89b4600] mmco: unref short failure
[h264 @ 0x55e460373380] mmco: unref short failure
 11%|█         | 206/1945 [1:06:10<9:33:29, 19.79s/it] [h264 @ 0x55b731d59340] mmco: unref short failure
[h264 @ 0x55b731d59340] mmco: unref short failure
[h264 @ 0x55e45ec43d80] mmco: unref short failure
[h264 @ 0x55e45ec43d80] mmco: unref short failure
[h264 @ 0x55e449559880] mmco: unref short failure
 11%|█         | 207/1945 [1:06:18<7:53:37, 16.35s/it][h264 @ 0x556d93a8fc80] mmco: unref short failure
[h264 @ 0x556d93a8fc80] mmco: unref short failure
 11%|█         | 208/1945 [1:06:26<6:42:05, 13.89s/it][h264 @ 0x556da3dec540] mmco: unref short failure
[h264 @ 0x556da54f5180] mmco: unref short failure
[h264 @ 0x556da54f5180] mmco: unref short failure
[h264 @ 0x55e4687afd00] mmco: unref short failure
[h264 @ 0x55e4687afd00] mmco: unref short failure
[h264 @ 0x55e4687afd00] mmco: unref short failure
[h264 @ 0x55e4687afd00] mmco: unref short failure
 11%|█         | 209/1945 [1:06:34<5:46:43, 11.98s/it][h264 @ 0x55e45673ef00] mmco: unref short failure
[h264 @ 0x55e45673ef00] mmco: unref short failure
[h264 @ 0x556da13a5a00] mmco: unref short failure
[h264 @ 0x556da13a5a00] mmco: unref short failure
 11%|█         | 210/1945 [1:06:42<5:15:04, 10.90s/it][h264 @ 0x556da93ca000] mmco: unref short failure
[h264 @ 0x556d998c0500] mmco: unref short failure
[h264 @ 0x556d998c0500] mmco: unref short failure
 11%|█         | 211/1945 [1:06:51<4:53:38, 10.16s/it] 11%|█         | 212/1945 [1:06:59<4:33:25,  9.47s/it] 11%|█         | 213/1945 [1:07:07<4:20:30,  9.02s/it][h264 @ 0x556d9f0c85c0] mmco: unref short failure
[h264 @ 0x556db3954200] mmco: unref short failure
[h264 @ 0x556db3954200] mmco: unref short failure
[h264 @ 0x55e44d89b080] mmco: unref short failure
 11%|█         | 214/1945 [1:07:14<4:03:49,  8.45s/it][h264 @ 0x55e460373180] mmco: unref short failure
[h264 @ 0x55e460373180] mmco: unref short failure
[h264 @ 0x55e46527df00] mmco: unref short failure
[h264 @ 0x556d909a4900] mmco: unref short failure
[h264 @ 0x556d909a4900] mmco: unref short failure
[h264 @ 0x556d909a4900] mmco: unref short failure
 11%|█         | 215/1945 [1:07:21<3:56:42,  8.21s/it][h264 @ 0x55b723bbfc80] mmco: unref short failure
[h264 @ 0x55e44863f500] mmco: unref short failure
[h264 @ 0x55b737623ac0] mmco: unref short failure
[h264 @ 0x55b737623ac0] mmco: unref short failure
[h264 @ 0x55b72c0ea100] mmco: unref short failure
[h264 @ 0x55b72c0ea100] mmco: unref short failure
[h264 @ 0x556da9ef4b80] mmco: unref short failure
 11%|█         | 216/1945 [1:07:29<3:48:46,  7.94s/it] 11%|█         | 217/1945 [1:07:36<3:45:32,  7.83s/it][h264 @ 0x55e449becf00] mmco: unref short failure
[h264 @ 0x55e449becf00] mmco: unref short failure
[h264 @ 0x55e449becf00] mmco: unref short failure
 11%|█         | 218/1945 [1:07:44<3:49:39,  7.98s/it][h264 @ 0x556d96fd7c00] mmco: unref short failure
 11%|█▏        | 219/1945 [1:07:53<3:50:39,  8.02s/it][h264 @ 0x55b728520140] mmco: unref short failure
[h264 @ 0x55b728520140] mmco: unref short failure
[h264 @ 0x556d8f584440] mmco: unref short failure
 11%|█▏        | 220/1945 [1:08:01<3:53:36,  8.13s/it][h264 @ 0x55b71eb84140] mmco: unref short failure
[h264 @ 0x55b71eb84140] mmco: unref short failure
[h264 @ 0x55b71eb84140] mmco: unref short failure
[h264 @ 0x55b71eb84140] mmco: unref short failure
[h264 @ 0x55e447c80a80] mmco: unref short failure
[h264 @ 0x55e4493ef900] mmco: unref short failure
[h264 @ 0x55e4493ef900] mmco: unref short failure
 11%|█▏        | 221/1945 [1:08:10<4:02:57,  8.46s/it][h264 @ 0x55e4660acf80] mmco: unref short failure
[h264 @ 0x55e4660acf80] mmco: unref short failure
[h264 @ 0x55e467214780] mmco: unref short failure
[h264 @ 0x55b71be0c040] mmco: unref short failure
[h264 @ 0x55b71be0c040] mmco: unref short failure
 11%|█▏        | 222/1945 [1:08:25<4:58:35, 10.40s/it][h264 @ 0x556da41e8800] mmco: unref short failure
[h264 @ 0x556db8b197c0] mmco: unref short failure
[h264 @ 0x556d9cdaf8c0] mmco: unref short failure
[h264 @ 0x556d9cdaf8c0] mmco: unref short failure
 11%|█▏        | 223/1945 [1:08:37<5:14:11, 10.95s/it][h264 @ 0x556da8fddf80] mmco: unref short failure
[h264 @ 0x55e449559880] mmco: unref short failure
[h264 @ 0x55e449559880] mmco: unref short failure
[h264 @ 0x55b71eb6ae80] mmco: unref short failure
[h264 @ 0x55e45c8e2280] mmco: unref short failure
[h264 @ 0x556d8ed07180] mmco: unref short failure
[h264 @ 0x55b72c0e9c80] mmco: unref short failure
[h264 @ 0x55b72c0e9c80] mmco: unref short failure
[h264 @ 0x55e45e6272c0] mmco: unref short failure
[h264 @ 0x55b71cec8cc0] mmco: unref short failure
[h264 @ 0x556d94fb4000] mmco: unref short failure
[h264 @ 0x556d94fb4000] mmco: unref short failure
 12%|█▏        | 224/1945 [1:09:22<10:02:42, 21.01s/it][h264 @ 0x556db7489040] mmco: unref short failure
[h264 @ 0x556db7489040] mmco: unref short failure
[h264 @ 0x55e44f47ecc0] mmco: unref short failure
 12%|█▏        | 225/1945 [1:09:37<9:08:50, 19.15s/it] [h264 @ 0x55b738c973c0] mmco: unref short failure
[h264 @ 0x55b738c973c0] mmco: unref short failure
[h264 @ 0x55b72c0f2280] mmco: unref short failure
[h264 @ 0x556db5f95a80] mmco: unref short failure
[h264 @ 0x556db5f95a80] mmco: unref short failure
 12%|█▏        | 226/1945 [1:09:47<7:53:48, 16.54s/it][h264 @ 0x556db5f95d00] mmco: unref short failure
[h264 @ 0x55b71de37480] mmco: unref short failure
[h264 @ 0x55b71de37480] mmco: unref short failure
[h264 @ 0x556d98f11380] mmco: unref short failure
[h264 @ 0x556d98f11380] mmco: unref short failure
[h264 @ 0x556da6da6380] mmco: unref short failure
[h264 @ 0x55b7161bad80] mmco: unref short failure
[h264 @ 0x55b7161bad80] mmco: unref short failure
 12%|█▏        | 227/1945 [1:09:56<6:50:50, 14.35s/it] 12%|█▏        | 228/1945 [1:10:03<5:40:52, 11.91s/it][h264 @ 0x55e449e3ab00] mmco: unref short failure
[h264 @ 0x55e449e3ab00] mmco: unref short failure
[h264 @ 0x55b728714600] mmco: unref short failure
 12%|█▏        | 229/1945 [1:10:12<5:21:24, 11.24s/it][h264 @ 0x556da0ef9c80] mmco: unref short failure
[h264 @ 0x556da0ef9c80] mmco: unref short failure
[h264 @ 0x556db34ef280] mmco: unref short failure
[h264 @ 0x556db34ef280] mmco: unref short failure
 12%|█▏        | 230/1945 [1:10:22<5:12:52, 10.95s/it][h264 @ 0x55e4488b0c40] mmco: unref short failure
[h264 @ 0x55e4488b0c40] mmco: unref short failure
[h264 @ 0x55b72b6d2880] mmco: unref short failure
[h264 @ 0x55b72b6d2880] mmco: unref short failure
[h264 @ 0x55b72b6d2880] mmco: unref short failure
[h264 @ 0x55b72b6d2880] mmco: unref short failure
[h264 @ 0x55e450b7db80] mmco: unref short failure
[h264 @ 0x556d94fb3b80] mmco: unref short failure
[h264 @ 0x556d94fb3b80] mmco: unref short failure
[h264 @ 0x556d94fb3b80] mmco: unref short failure
[h264 @ 0x556da7d51540] mmco: unref short failure
[h264 @ 0x556db3143bc0] mmco: unref short failure
[h264 @ 0x556db3143bc0] mmco: unref short failure
[h264 @ 0x556da41e8140] mmco: unref short failure
 12%|█▏        | 231/1945 [1:10:37<5:40:54, 11.93s/it][h264 @ 0x556da2ce5e40] mmco: unref short failure
[h264 @ 0x556da2ce5e40] mmco: unref short failure
[h264 @ 0x556da2ce5e40] mmco: unref short failure
[h264 @ 0x556da2ce5e40] mmco: unref short failure
[h264 @ 0x556da2ce5e40] mmco: unref short failure
[h264 @ 0x556da2ce5e40] mmco: unref short failure
[h264 @ 0x55b7387863c0] mmco: unref short failure
[h264 @ 0x556d9dddd900] mmco: unref short failure
[h264 @ 0x556d9dddd900] mmco: unref short failure
[h264 @ 0x556db7cd6bc0] mmco: unref short failure
[h264 @ 0x556db7cd6bc0] mmco: unref short failure
[h264 @ 0x556d988081c0] mmco: unref short failure
[h264 @ 0x556d988081c0] mmco: unref short failure
[h264 @ 0x55e4495b9c80] mmco: unref short failure
[h264 @ 0x55e4495b9c80] mmco: unref short failure
[h264 @ 0x55b71792ce00] mmco: unref short failure
[h264 @ 0x55b71792ce00] mmco: unref short failure
[h264 @ 0x55b71792ce00] mmco: unref short failure
not have audios ua_Kowav7hg.20
[h264 @ 0x556d947d58c0] mmco: unref short failure
[h264 @ 0x556da2897e00] mmco: unref short failure
[h264 @ 0x556dabba4580] mmco: unref short failure
[h264 @ 0x556dabba4580] mmco: unref short failure
[h264 @ 0x556da54f5180] mmco: unref short failure
[h264 @ 0x55b72a253200] mmco: unref short failure
[h264 @ 0x55b72a253200] mmco: unref short failure
[h264 @ 0x55e458c89800] mmco: unref short failure
[h264 @ 0x55e458c89800] mmco: unref short failure
[h264 @ 0x55e458c89800] mmco: unref short failure
[h264 @ 0x55e458c89800] mmco: unref short failure
[h264 @ 0x55e45381e140] mmco: unref short failure
[h264 @ 0x55e45381e140] mmco: unref short failure
[h264 @ 0x55b725cd5940] mmco: unref short failure
[h264 @ 0x55b71b007640] mmco: unref short failure
[h264 @ 0x55b71b007640] mmco: unref short failure
[h264 @ 0x556d8e9c5d80] mmco: unref short failure
[h264 @ 0x556d8e9c5d80] mmco: unref short failure
[h264 @ 0x556da37eb240] mmco: unref short failure
 12%|█▏        | 232/1945 [1:11:31<11:42:46, 24.62s/it][h264 @ 0x556d97eb7140] mmco: unref short failure
[h264 @ 0x556db13ee8c0] mmco: unref short failure
[h264 @ 0x556db13ee8c0] mmco: unref short failure
 12%|█▏        | 233/1945 [1:11:38<9:14:13, 19.42s/it] [h264 @ 0x556d9d64e980] mmco: unref short failure
[h264 @ 0x556d9d64e980] mmco: unref short failure
[h264 @ 0x55e452c7fa40] mmco: unref short failure
 12%|█▏        | 234/1945 [1:11:48<7:50:07, 16.49s/it][h264 @ 0x55e44acf5a00] mmco: unref short failure
[h264 @ 0x55e44acf5a00] mmco: unref short failure
[h264 @ 0x55e44acf5a00] mmco: unref short failure
[h264 @ 0x55e44acf5a00] mmco: unref short failure
[h264 @ 0x55e44acf5a00] mmco: unref short failure
[h264 @ 0x55e44acf5a00] mmco: unref short failure
[h264 @ 0x556d90ff2440] mmco: unref short failure
[h264 @ 0x556d90ff2440] mmco: unref short failure
[h264 @ 0x55e4493d6340] mmco: unref short failure
 12%|█▏        | 235/1945 [1:11:58<6:59:00, 14.70s/it][h264 @ 0x55b734159cc0] mmco: unref short failure
 12%|█▏        | 236/1945 [1:12:05<5:52:59, 12.39s/it][h264 @ 0x55b71e51dd80] mmco: unref short failure
[h264 @ 0x55b71e51dd80] mmco: unref short failure
[h264 @ 0x55b71e51dd80] mmco: unref short failure
[h264 @ 0x55b71e51dd80] mmco: unref short failure
 12%|█▏        | 237/1945 [1:12:19<6:02:17, 12.73s/it][h264 @ 0x556db6242180] mmco: unref short failure
[h264 @ 0x556db6242180] mmco: unref short failure
[h264 @ 0x55e448840580] mmco: unref short failure
[h264 @ 0x556d947d56c0] mmco: unref short failure
[h264 @ 0x556d947d56c0] mmco: unref short failure
[h264 @ 0x55b71d98fd80] mmco: unref short failure
[h264 @ 0x55b71d98fd80] mmco: unref short failure
[h264 @ 0x55b715fe9180] mmco: unref short failure
[h264 @ 0x55b715fe9180] mmco: unref short failure
[h264 @ 0x556da76d5e80] mmco: unref short failure
[h264 @ 0x556da76d5e80] mmco: unref short failure
 12%|█▏        | 238/1945 [1:12:26<5:15:09, 11.08s/it] 12%|█▏        | 239/1945 [1:12:36<5:01:56, 10.62s/it][h264 @ 0x55e460c14c40] mmco: unref short failure
[h264 @ 0x55e460c14c40] mmco: unref short failure
[h264 @ 0x55e45851a480] mmco: unref short failure
[h264 @ 0x556da6b12fc0] mmco: unref short failure
[h264 @ 0x556dbad78a80] mmco: unref short failure
[h264 @ 0x556dbad78a80] mmco: unref short failure
[h264 @ 0x556dbad78a80] mmco: unref short failure
[h264 @ 0x556dbad78a80] mmco: unref short failure
[h264 @ 0x55e45e627540] mmco: unref short failure
[h264 @ 0x55e45e627540] mmco: unref short failure
[h264 @ 0x55e45e627540] mmco: unref short failure
[h264 @ 0x55e45e627540] mmco: unref short failure
[h264 @ 0x55e4494b0d00] mmco: unref short failure
[h264 @ 0x55e451e37bc0] mmco: unref short failure
[h264 @ 0x55e451e37bc0] mmco: unref short failure
[h264 @ 0x556d99b4c0c0] mmco: unref short failure
[h264 @ 0x556d99b4c0c0] mmco: unref short failure
[h264 @ 0x55b72f91bec0] mmco: unref short failure
 12%|█▏        | 240/1945 [1:13:29<11:04:35, 23.39s/it][h264 @ 0x556dbc48ac80] mmco: unref short failure
 12%|█▏        | 241/1945 [1:13:38<9:00:19, 19.03s/it] [h264 @ 0x556da620ab80] mmco: unref short failure
[h264 @ 0x556da620ab80] mmco: unref short failure
[h264 @ 0x556da620ab80] mmco: unref short failure
[h264 @ 0x556da620ab80] mmco: unref short failure
 12%|█▏        | 242/1945 [1:13:54<8:36:40, 18.20s/it][h264 @ 0x556d97974900] mmco: unref short failure
 12%|█▏        | 243/1945 [1:14:03<7:16:00, 15.37s/it][h264 @ 0x55b71e0fe780] mmco: unref short failure
[h264 @ 0x55b71e0fe780] mmco: unref short failure
 13%|█▎        | 244/1945 [1:14:10<6:02:42, 12.79s/it] 13%|█▎        | 245/1945 [1:14:22<6:02:41, 12.80s/it][h264 @ 0x556d9ff17f40] mmco: unref short failure
 13%|█▎        | 246/1945 [1:14:33<5:43:36, 12.13s/it][h264 @ 0x55e4598144c0] mmco: unref short failure
[h264 @ 0x55e4598144c0] mmco: unref short failure
[h264 @ 0x556daa85ce00] mmco: unref short failure
[h264 @ 0x556daa85ce00] mmco: unref short failure
 13%|█▎        | 247/1945 [1:14:40<4:56:55, 10.49s/it][h264 @ 0x556d8dcd4bc0] mmco: unref short failure
[h264 @ 0x556dafcc5680] mmco: unref short failure
[h264 @ 0x556dafcc5680] mmco: unref short failure
[h264 @ 0x55e44ecb2c00] mmco: unref short failure
[h264 @ 0x55b7390d8f40] mmco: unref short failure
[h264 @ 0x55b7390d8f40] mmco: unref short failure
[h264 @ 0x55e452561280] mmco: unref short failure
[h264 @ 0x55e452561280] mmco: unref short failure
[h264 @ 0x55b728921500] mmco: unref short failure
[h264 @ 0x55e455de4b40] mmco: unref short failure
[h264 @ 0x55e455de4b40] mmco: unref short failure
[h264 @ 0x55b72980b6c0] mmco: unref short failure
[h264 @ 0x556da3cfc200] mmco: unref short failure
[h264 @ 0x556da3cfc200] mmco: unref short failure
[h264 @ 0x55e46a26f2c0] mmco: unref short failure
[h264 @ 0x55e46a26f2c0] mmco: unref short failure
[h264 @ 0x556d9cf37580] mmco: unref short failure
[h264 @ 0x556da46c25c0] mmco: unref short failure
[h264 @ 0x556da46c25c0] mmco: unref short failure
[h264 @ 0x556d9bdcde40] mmco: unref short failure
[h264 @ 0x556d9bdcde40] mmco: unref short failure
[h264 @ 0x55b71fda9e40] mmco: unref short failure
[h264 @ 0x556da593aa00] mmco: unref short failure
[h264 @ 0x556da593aa00] mmco: unref short failure
[h264 @ 0x55e4688dc280] mmco: unref short failure
 13%|█▎        | 248/1945 [1:15:30<10:33:27, 22.40s/it][h264 @ 0x55b716da4940] mmco: unref short failure
[h264 @ 0x55e46a6e3900] mmco: unref short failure
[h264 @ 0x55e46a6e3900] mmco: unref short failure
[h264 @ 0x556d8edb62c0] mmco: unref short failure
[h264 @ 0x55b730a17500] mmco: unref short failure
[h264 @ 0x55e460c14e40] mmco: unref short failure
[h264 @ 0x55e460c14e40] mmco: unref short failure
 13%|█▎        | 249/1945 [1:15:42<9:05:53, 19.31s/it] 09/09/2024 16:41:10 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 16:41:10 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556d97017a40] mmco: unref short failure
[h264 @ 0x556d97017a40] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556d97017a40] mmco: unref short failure
[h264 @ 0x556d97017a40] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556d96d59a00] mmco: unref short failure
[h264 @ 0x55b73539d540] mmco: unref short failure
[h264 @ 0x55b73539d540] mmco: unref short failure
[h264 @ 0x55b73539d540] mmco: unref short failure
[h264 @ 0x55b73539d540] mmco: unref short failure
[h264 @ 0x55e45003f540] mmco: unref short failure
[h264 @ 0x55e45003f540] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556db5f953c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b72f91c0c0] mmco: unref short failure
[h264 @ 0x55b72f91c0c0] mmco: unref short failure
[h264 @ 0x55b717c72ac0] mmco: unref short failure
[h264 @ 0x55b717c72ac0] mmco: unref short failure
[h264 @ 0x55b7192dd280] mmco: unref short failure
[h264 @ 0x55b7192dd280] mmco: unref short failure
[h264 @ 0x55b7192dd280] mmco: unref short failure
[h264 @ 0x556db7a3eec0] mmco: unref short failure
[h264 @ 0x556db7a3eec0] mmco: unref short failure
[h264 @ 0x556da88eed40] mmco: unref short failure
[h264 @ 0x55b724d6cdc0] mmco: unref short failure
[h264 @ 0x55e45d1ee300] mmco: unref short failure
[h264 @ 0x556da076fb00] mmco: unref short failure
[h264 @ 0x55b71b2ba340] mmco: unref short failure
[h264 @ 0x55b71b2ba340] mmco: unref short failure
[h264 @ 0x556dbb294ac0] mmco: unref short failure
[h264 @ 0x556dbb294ac0] mmco: unref short failure
[h264 @ 0x55e4604d9380] mmco: unref short failure
[h264 @ 0x55e454d4ad80] mmco: unref short failure
[h264 @ 0x55e454d4ad80] mmco: unref short failure
[h264 @ 0x55e466974300] mmco: unref short failure
[h264 @ 0x55b724d81780] mmco: unref short failure
[h264 @ 0x55b724d81780] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:52,  4.23it/s][A
  1%|          | 2/221 [00:00<01:05,  3.32it/s][A
  1%|▏         | 3/221 [00:01<01:21,  2.68it/s][A
  2%|▏         | 4/221 [00:01<01:16,  2.84it/s][A
  2%|▏         | 5/221 [00:01<01:02,  3.44it/s][A
  3%|▎         | 6/221 [00:01<00:58,  3.69it/s][A
  3%|▎         | 7/221 [00:02<00:57,  3.69it/s][A
  4%|▎         | 8/221 [00:02<00:52,  4.06it/s][A
  4%|▍         | 9/221 [00:02<00:53,  3.97it/s][A
  5%|▍         | 10/221 [00:03<01:12,  2.92it/s][A
  5%|▍         | 11/221 [00:03<01:05,  3.22it/s][A
  5%|▌         | 12/221 [00:03<01:05,  3.21it/s][A
  6%|▌         | 13/221 [00:03<01:09,  2.99it/s][A
  6%|▋         | 14/221 [00:04<01:13,  2.80it/s][A
  7%|▋         | 15/221 [00:04<01:09,  2.97it/s][A
  7%|▋         | 16/221 [00:05<01:35,  2.15it/s][A
  8%|▊         | 17/221 [00:05<01:36,  2.12it/s][A
  8%|▊         | 18/221 [00:06<01:30,  2.26it/s][A
  9%|▊         | 19/221 [00:06<01:16,  2.66it/s][A
  9%|▉         | 20/221 [00:06<01:02,  3.24it/s][A
 10%|▉         | 21/221 [00:06<00:59,  3.34it/s][A
 10%|▉         | 22/221 [00:07<00:54,  3.68it/s][A
 10%|█         | 23/221 [00:07<00:51,  3.88it/s][A
 11%|█         | 24/221 [00:07<00:50,  3.87it/s][A
 11%|█▏        | 25/221 [00:07<00:53,  3.65it/s][A
 12%|█▏        | 26/221 [00:08<00:57,  3.38it/s][A
 12%|█▏        | 27/221 [00:08<00:46,  4.17it/s][A
 13%|█▎        | 28/221 [00:08<01:00,  3.19it/s][A
 13%|█▎        | 29/221 [00:09<01:12,  2.66it/s][A
 14%|█▎        | 30/221 [00:09<01:06,  2.89it/s][A
 14%|█▍        | 31/221 [00:09<01:01,  3.07it/s][A
 14%|█▍        | 32/221 [00:10<00:48,  3.87it/s][A
 15%|█▍        | 33/221 [00:10<00:49,  3.84it/s][A
 15%|█▌        | 34/221 [00:10<00:42,  4.40it/s][A
 16%|█▌        | 35/221 [00:10<00:43,  4.29it/s][A
 16%|█▋        | 36/221 [00:11<00:50,  3.63it/s][A
 17%|█▋        | 37/221 [00:11<00:55,  3.34it/s][A
 17%|█▋        | 38/221 [00:11<01:01,  2.98it/s][A
 18%|█▊        | 39/221 [00:12<00:56,  3.23it/s][A
 18%|█▊        | 40/221 [00:12<00:57,  3.16it/s][A
 19%|█▊        | 41/221 [00:12<01:00,  2.98it/s][A
 19%|█▉        | 42/221 [00:13<01:02,  2.88it/s][A
 19%|█▉        | 43/221 [00:13<00:56,  3.14it/s][A
 20%|█▉        | 44/221 [00:13<00:45,  3.86it/s][A
 20%|██        | 45/221 [00:13<00:46,  3.80it/s][A
 21%|██        | 46/221 [00:14<00:46,  3.75it/s][A[h264 @ 0x556db55c8380] mmco: unref short failure
[h264 @ 0x556db55c8380] mmco: unref short failure

 21%|██▏       | 47/221 [00:14<00:54,  3.22it/s][A
 22%|██▏       | 48/221 [00:14<00:46,  3.68it/s][A
 22%|██▏       | 49/221 [00:14<00:45,  3.77it/s][A
 23%|██▎       | 50/221 [00:15<00:49,  3.42it/s][A
 23%|██▎       | 51/221 [00:15<00:42,  3.99it/s][A
 24%|██▎       | 52/221 [00:15<00:52,  3.24it/s][A
 24%|██▍       | 53/221 [00:16<00:45,  3.72it/s][A
 24%|██▍       | 54/221 [00:16<00:59,  2.82it/s][A
 25%|██▍       | 55/221 [00:17<01:03,  2.62it/s][A
 25%|██▌       | 56/221 [00:17<00:56,  2.92it/s][A
 26%|██▌       | 57/221 [00:17<01:07,  2.42it/s][A
 26%|██▌       | 58/221 [00:18<00:59,  2.76it/s][A
 27%|██▋       | 59/221 [00:18<00:56,  2.88it/s][A
 27%|██▋       | 60/221 [00:19<01:04,  2.49it/s][A
 28%|██▊       | 61/221 [00:19<00:54,  2.91it/s][A
 28%|██▊       | 62/221 [00:19<00:55,  2.88it/s][A
 29%|██▊       | 63/221 [00:19<00:50,  3.14it/s][A[h264 @ 0x55b72f8ec840] mmco: unref short failure
[h264 @ 0x55b72f8ec840] mmco: unref short failure
[h264 @ 0x55b72f8ec840] mmco: unref short failure

 29%|██▉       | 64/221 [00:20<00:53,  2.96it/s][A
 29%|██▉       | 65/221 [00:20<00:49,  3.13it/s][A
 30%|██▉       | 66/221 [00:20<00:54,  2.86it/s][A[h264 @ 0x556d8f443400] mmco: unref short failure
[h264 @ 0x556d8f443400] mmco: unref short failure

 30%|███       | 67/221 [00:21<00:53,  2.90it/s][A
 31%|███       | 68/221 [00:21<00:43,  3.49it/s][A[h264 @ 0x55e4567817c0] mmco: unref short failure

 31%|███       | 69/221 [00:22<00:57,  2.66it/s][A
 32%|███▏      | 70/221 [00:22<00:49,  3.04it/s][A
 32%|███▏      | 71/221 [00:22<00:48,  3.08it/s][A
 33%|███▎      | 72/221 [00:23<00:56,  2.63it/s][A
 33%|███▎      | 73/221 [00:23<01:00,  2.45it/s][A
 33%|███▎      | 74/221 [00:23<00:51,  2.86it/s][A
 34%|███▍      | 75/221 [00:24<00:52,  2.79it/s][A
 34%|███▍      | 76/221 [00:24<00:48,  2.97it/s][A
 35%|███▍      | 77/221 [00:24<00:49,  2.89it/s][A
 35%|███▌      | 78/221 [00:24<00:41,  3.41it/s][A
 36%|███▌      | 79/221 [00:25<00:50,  2.82it/s][A[h264 @ 0x556d9669da40] mmco: unref short failure
[h264 @ 0x556d9669da40] mmco: unref short failure

 36%|███▌      | 80/221 [00:25<00:45,  3.12it/s][A
 37%|███▋      | 81/221 [00:25<00:39,  3.52it/s][A
 37%|███▋      | 82/221 [00:26<00:41,  3.31it/s][A[h264 @ 0x55e449e703c0] mmco: unref short failure
[h264 @ 0x55e449e703c0] mmco: unref short failure
[h264 @ 0x55e449e703c0] mmco: unref short failure
[h264 @ 0x55e449e703c0] mmco: unref short failure

 38%|███▊      | 83/221 [00:27<01:13,  1.87it/s][A
 38%|███▊      | 84/221 [00:27<01:08,  2.00it/s][A
 38%|███▊      | 85/221 [00:27<00:55,  2.44it/s][A
 39%|███▉      | 86/221 [00:28<00:53,  2.52it/s][A
 39%|███▉      | 87/221 [00:29<01:09,  1.92it/s][A
 40%|███▉      | 88/221 [00:29<01:12,  1.84it/s][A
 40%|████      | 89/221 [00:30<01:03,  2.09it/s][A
 41%|████      | 90/221 [00:30<01:08,  1.90it/s][A
 41%|████      | 91/221 [00:30<00:55,  2.36it/s][A
 42%|████▏     | 92/221 [00:31<00:54,  2.36it/s][A
 42%|████▏     | 93/221 [00:31<00:50,  2.55it/s][A[h264 @ 0x55b7359b7980] mmco: unref short failure

 43%|████▎     | 94/221 [00:31<00:44,  2.85it/s][A
 43%|████▎     | 95/221 [00:32<00:47,  2.63it/s][A
 43%|████▎     | 96/221 [00:32<00:51,  2.44it/s][A
 44%|████▍     | 97/221 [00:33<00:46,  2.69it/s][A
 44%|████▍     | 98/221 [00:33<00:51,  2.39it/s][A
 45%|████▍     | 99/221 [00:33<00:41,  2.93it/s][A
 45%|████▌     | 100/221 [00:34<00:40,  2.96it/s][A
 46%|████▌     | 101/221 [00:34<00:36,  3.29it/s][A
 46%|████▌     | 102/221 [00:34<00:37,  3.17it/s][A
 47%|████▋     | 103/221 [00:34<00:31,  3.80it/s][A
 47%|████▋     | 104/221 [00:35<00:32,  3.57it/s][A
 48%|████▊     | 105/221 [00:35<00:35,  3.22it/s][A
 48%|████▊     | 106/221 [00:36<00:44,  2.57it/s][A
 48%|████▊     | 107/221 [00:36<00:41,  2.74it/s][A
 49%|████▉     | 108/221 [00:36<00:40,  2.76it/s][A
 49%|████▉     | 109/221 [00:36<00:34,  3.28it/s][A
 50%|████▉     | 110/221 [00:37<00:29,  3.80it/s][A
 50%|█████     | 111/221 [00:37<00:37,  2.97it/s][A
 51%|█████     | 112/221 [00:37<00:36,  2.96it/s][A
 51%|█████     | 113/221 [00:38<00:38,  2.79it/s][A
 52%|█████▏    | 114/221 [00:38<00:30,  3.50it/s][A[h264 @ 0x55e447c80a80] mmco: unref short failure

 52%|█████▏    | 115/221 [00:38<00:26,  3.97it/s][A
 52%|█████▏    | 116/221 [00:38<00:30,  3.45it/s][A
 53%|█████▎    | 117/221 [00:39<00:32,  3.21it/s][A
 53%|█████▎    | 118/221 [00:39<00:32,  3.22it/s][A[h264 @ 0x55e45c92b140] mmco: unref short failure
[h264 @ 0x55e45c92b140] mmco: unref short failure

 54%|█████▍    | 119/221 [00:40<00:36,  2.82it/s][A
 54%|█████▍    | 120/221 [00:40<00:32,  3.15it/s][A
 55%|█████▍    | 121/221 [00:40<00:27,  3.60it/s][A
 55%|█████▌    | 122/221 [00:40<00:27,  3.59it/s][A
 56%|█████▌    | 123/221 [00:40<00:23,  4.20it/s][A
 56%|█████▌    | 124/221 [00:41<00:26,  3.68it/s][A
 57%|█████▋    | 125/221 [00:41<00:28,  3.42it/s][A[h264 @ 0x55e4533f9e00] mmco: unref short failure

 57%|█████▋    | 126/221 [00:41<00:27,  3.51it/s][A
 57%|█████▋    | 127/221 [00:42<00:28,  3.33it/s][A
 58%|█████▊    | 128/221 [00:42<00:28,  3.27it/s][A
 58%|█████▊    | 129/221 [00:42<00:24,  3.81it/s][A
 59%|█████▉    | 130/221 [00:43<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:43<00:27,  3.31it/s][A
 60%|█████▉    | 132/221 [00:43<00:33,  2.69it/s][A
 60%|██████    | 133/221 [00:44<00:33,  2.62it/s][A
 61%|██████    | 134/221 [00:44<00:33,  2.56it/s][A
 61%|██████    | 135/221 [00:44<00:28,  2.99it/s][A
 62%|██████▏   | 136/221 [00:45<00:26,  3.19it/s][A
 62%|██████▏   | 137/221 [00:45<00:26,  3.20it/s][A
 62%|██████▏   | 138/221 [00:45<00:27,  2.98it/s][A
 63%|██████▎   | 139/221 [00:46<00:26,  3.09it/s][A
 63%|██████▎   | 140/221 [00:46<00:26,  3.00it/s][A
 64%|██████▍   | 141/221 [00:46<00:27,  2.87it/s][A
 64%|██████▍   | 142/221 [00:47<00:27,  2.90it/s][A
 65%|██████▍   | 143/221 [00:47<00:32,  2.38it/s][A
 65%|██████▌   | 144/221 [00:48<00:29,  2.62it/s][A
 66%|██████▌   | 145/221 [00:48<00:23,  3.24it/s][A
 66%|██████▌   | 146/221 [00:48<00:18,  3.97it/s][A
 67%|██████▋   | 147/221 [00:48<00:18,  3.91it/s][A
 67%|██████▋   | 148/221 [00:49<00:26,  2.75it/s][A[h264 @ 0x55b71fdaa2c0] mmco: unref short failure
[h264 @ 0x55b71fdaa2c0] mmco: unref short failure

 67%|██████▋   | 149/221 [00:49<00:30,  2.37it/s][A
 68%|██████▊   | 150/221 [00:50<00:28,  2.46it/s][A
 68%|██████▊   | 151/221 [00:50<00:26,  2.67it/s][A
 69%|██████▉   | 152/221 [00:51<00:32,  2.12it/s][A
 69%|██████▉   | 153/221 [00:51<00:28,  2.36it/s][A[h264 @ 0x556d9f162c00] mmco: unref short failure
[h264 @ 0x556d9f162c00] mmco: unref short failure

 70%|██████▉   | 154/221 [00:51<00:25,  2.60it/s][A[h264 @ 0x556d9f162c00] mmco: unref short failure
[h264 @ 0x556d9f162c00] mmco: unref short failure
[h264 @ 0x556d9f162c00] mmco: unref short failure

 70%|███████   | 155/221 [00:52<00:24,  2.75it/s][A
 71%|███████   | 156/221 [00:52<00:25,  2.51it/s][A
 71%|███████   | 157/221 [00:52<00:21,  2.91it/s][A
 71%|███████▏  | 158/221 [00:53<00:19,  3.16it/s][A
 72%|███████▏  | 160/221 [00:53<00:14,  4.10it/s][A
 73%|███████▎  | 161/221 [00:53<00:13,  4.39it/s][A
 73%|███████▎  | 162/221 [00:53<00:11,  4.94it/s][A
 74%|███████▍  | 163/221 [00:54<00:13,  4.33it/s][A[h264 @ 0x556db7a3f540] mmco: unref short failure
[h264 @ 0x556db7a3f540] mmco: unref short failure

 74%|███████▍  | 164/221 [00:54<00:13,  4.11it/s][A
 75%|███████▍  | 165/221 [00:54<00:15,  3.66it/s][A
 75%|███████▌  | 166/221 [00:54<00:15,  3.47it/s][A
 76%|███████▌  | 167/221 [00:55<00:14,  3.83it/s][A
 76%|███████▌  | 168/221 [00:55<00:15,  3.39it/s][A
 76%|███████▋  | 169/221 [00:55<00:14,  3.66it/s][A
 77%|███████▋  | 170/221 [00:56<00:13,  3.74it/s][A
 77%|███████▋  | 171/221 [00:56<00:16,  2.99it/s][A
 78%|███████▊  | 172/221 [00:56<00:14,  3.37it/s][A
 78%|███████▊  | 173/221 [00:57<00:17,  2.69it/s][A
 79%|███████▊  | 174/221 [00:57<00:15,  2.98it/s][A
 79%|███████▉  | 175/221 [00:57<00:15,  3.02it/s][A
 80%|███████▉  | 176/221 [00:57<00:12,  3.70it/s][A
 80%|████████  | 177/221 [00:58<00:10,  4.10it/s][A
 81%|████████  | 178/221 [00:58<00:15,  2.73it/s][A
 81%|████████  | 179/221 [00:59<00:14,  2.88it/s][A
 81%|████████▏ | 180/221 [00:59<00:11,  3.60it/s][A
 82%|████████▏ | 181/221 [00:59<00:09,  4.27it/s][A
 82%|████████▏ | 182/221 [00:59<00:10,  3.70it/s][A
 83%|████████▎ | 183/221 [00:59<00:09,  4.11it/s][A
 83%|████████▎ | 184/221 [01:00<00:09,  3.80it/s][A
 84%|████████▍ | 186/221 [01:00<00:07,  4.64it/s][A[h264 @ 0x556d9da64c40] mmco: unref short failure
[h264 @ 0x556d9da64c40] mmco: unref short failure
[h264 @ 0x55b7316c41c0] mmco: unref short failure
[h264 @ 0x55b7316c41c0] mmco: unref short failure

 85%|████████▍ | 187/221 [01:01<00:10,  3.40it/s][A
 85%|████████▌ | 188/221 [01:01<00:09,  3.52it/s][A
 86%|████████▌ | 189/221 [01:01<00:09,  3.52it/s][A
 86%|████████▌ | 190/221 [01:01<00:08,  3.54it/s][A
 86%|████████▋ | 191/221 [01:02<00:07,  4.20it/s][A
 87%|████████▋ | 192/221 [01:02<00:06,  4.44it/s][A
 87%|████████▋ | 193/221 [01:02<00:05,  5.27it/s][A
 88%|████████▊ | 194/221 [01:02<00:08,  3.16it/s][A
 88%|████████▊ | 195/221 [01:03<00:07,  3.58it/s][A
 89%|████████▊ | 196/221 [01:03<00:07,  3.27it/s][A
 89%|████████▉ | 197/221 [01:03<00:06,  3.49it/s][A
 90%|████████▉ | 198/221 [01:03<00:06,  3.75it/s][A
 90%|█████████ | 199/221 [01:04<00:05,  3.81it/s][A
 90%|█████████ | 200/221 [01:04<00:05,  3.85it/s][A
 91%|█████████ | 201/221 [01:04<00:04,  4.09it/s][A
 91%|█████████▏| 202/221 [01:05<00:05,  3.27it/s][A
 92%|█████████▏| 203/221 [01:05<00:05,  3.52it/s][A
 92%|█████████▏| 204/221 [01:05<00:05,  3.25it/s][A
 93%|█████████▎| 205/221 [01:05<00:03,  4.01it/s][A
 93%|█████████▎| 206/221 [01:06<00:04,  3.20it/s][A
 94%|█████████▎| 207/221 [01:06<00:03,  4.02it/s][A
 94%|█████████▍| 208/221 [01:06<00:02,  4.37it/s][A
 95%|█████████▍| 209/221 [01:06<00:02,  4.54it/s][A
 95%|█████████▌| 210/221 [01:06<00:02,  5.40it/s][A
 95%|█████████▌| 211/221 [01:07<00:02,  4.35it/s][A
 96%|█████████▌| 212/221 [01:07<00:02,  4.26it/s][A
 96%|█████████▋| 213/221 [01:07<00:01,  4.05it/s][A
 97%|█████████▋| 214/221 [01:07<00:01,  4.05it/s][A
 97%|█████████▋| 215/221 [01:08<00:01,  4.14it/s][A
 98%|█████████▊| 216/221 [01:08<00:01,  3.70it/s][A
 98%|█████████▊| 217/221 [01:08<00:01,  3.38it/s][A[h264 @ 0x556d8edb6300] mmco: unref short failure
[h264 @ 0x556d8edb6300] mmco: unref short failure

 99%|█████████▊| 218/221 [01:09<00:00,  3.41it/s][A
 99%|█████████▉| 219/221 [01:09<00:00,  2.79it/s][A
100%|█████████▉| 220/221 [01:10<00:00,  2.67it/s][A
100%|██████████| 221/221 [01:10<00:00,  2.96it/s][A100%|██████████| 221/221 [01:10<00:00,  3.14it/s]
[h264 @ 0x556da88eed40] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.78it/s][A
  1%|          | 2/221 [00:00<00:58,  3.75it/s][A
  1%|▏         | 3/221 [00:00<00:58,  3.73it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.74it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.75it/s][A[h264 @ 0x556d9669da40] mmco: unref short failure

  3%|▎         | 6/221 [00:01<00:57,  3.76it/s][A
  3%|▎         | 7/221 [00:01<00:57,  3.75it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.75it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.76it/s][A
  5%|▍         | 10/221 [00:02<00:56,  3.75it/s][A
  5%|▍         | 11/221 [00:02<00:58,  3.59it/s][A
  5%|▌         | 12/221 [00:03<00:57,  3.63it/s][A
  6%|▌         | 13/221 [00:03<00:56,  3.66it/s][A
  6%|▋         | 14/221 [00:03<00:56,  3.65it/s][A
  7%|▋         | 15/221 [00:04<00:56,  3.63it/s][A
  7%|▋         | 16/221 [00:04<00:55,  3.67it/s][A
  8%|▊         | 17/221 [00:04<00:55,  3.70it/s][A
  8%|▊         | 18/221 [00:04<00:54,  3.70it/s][A
  9%|▊         | 19/221 [00:05<00:54,  3.72it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.73it/s][A
 10%|▉         | 21/221 [00:05<00:53,  3.71it/s][A
 10%|▉         | 22/221 [00:05<00:53,  3.73it/s][A
 10%|█         | 23/221 [00:06<00:53,  3.71it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.73it/s][A
 11%|█▏        | 25/221 [00:06<00:52,  3.70it/s][A
 12%|█▏        | 26/221 [00:07<00:52,  3.72it/s][A
 12%|█▏        | 27/221 [00:07<00:53,  3.63it/s][A
 13%|█▎        | 28/221 [00:07<00:52,  3.66it/s][A
 13%|█▎        | 29/221 [00:07<00:52,  3.69it/s][A
 14%|█▎        | 30/221 [00:08<00:51,  3.71it/s][A
 14%|█▍        | 31/221 [00:08<00:51,  3.72it/s][A
 14%|█▍        | 32/221 [00:08<00:51,  3.69it/s][A
 15%|█▍        | 33/221 [00:08<00:50,  3.71it/s][A
 15%|█▌        | 34/221 [00:09<00:50,  3.73it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.74it/s][A
 16%|█▋        | 36/221 [00:09<00:49,  3.75it/s][A
 17%|█▋        | 37/221 [00:09<00:49,  3.75it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.75it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.73it/s][A
 18%|█▊        | 40/221 [00:10<00:50,  3.58it/s][A
 19%|█▊        | 41/221 [00:11<00:49,  3.63it/s][A
 19%|█▉        | 42/221 [00:11<00:48,  3.67it/s][A
 19%|█▉        | 43/221 [00:11<00:48,  3.70it/s][A
 20%|█▉        | 44/221 [00:11<00:47,  3.72it/s][A
 20%|██        | 45/221 [00:12<00:47,  3.73it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.75it/s][A
 21%|██▏       | 47/221 [00:12<00:46,  3.75it/s][A
 22%|██▏       | 48/221 [00:12<00:46,  3.76it/s][A
 22%|██▏       | 49/221 [00:13<00:45,  3.76it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.76it/s][A
 23%|██▎       | 51/221 [00:13<00:45,  3.76it/s][A
 24%|██▎       | 52/221 [00:14<00:44,  3.77it/s][A
 24%|██▍       | 53/221 [00:14<00:44,  3.77it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.77it/s][A
 25%|██▍       | 55/221 [00:14<00:44,  3.77it/s][A
 25%|██▌       | 56/221 [00:15<00:43,  3.77it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.78it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.78it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.78it/s][A
 27%|██▋       | 60/221 [00:16<00:42,  3.78it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.78it/s][A
 28%|██▊       | 62/221 [00:16<00:42,  3.78it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.78it/s][A
 29%|██▉       | 64/221 [00:17<00:41,  3.78it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.78it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:18<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 75/221 [00:20<00:38,  3.78it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.78it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.78it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:21<00:37,  3.78it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:23<00:35,  3.78it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.78it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 90/221 [00:24<00:34,  3.78it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.78it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.78it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 94/221 [00:25<00:33,  3.78it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.78it/s][A
 43%|████▎     | 96/221 [00:25<00:33,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:26<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:28<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:28<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:29<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:31<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:32<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:34<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:35<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.78it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 136/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 140/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.78it/s][A
 65%|██████▍   | 143/221 [00:38<00:20,  3.78it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 147/221 [00:39<00:19,  3.78it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.78it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.78it/s][A
 68%|██████▊   | 151/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.78it/s][A
 70%|███████   | 155/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.78it/s][A
 71%|███████▏  | 158/221 [00:42<00:16,  3.78it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.78it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.78it/s][A
 73%|███████▎  | 162/221 [00:43<00:15,  3.78it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.78it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.78it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.78it/s][A
 75%|███████▌  | 166/221 [00:44<00:14,  3.78it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.78it/s][A
 76%|███████▌  | 168/221 [00:44<00:14,  3.78it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 170/221 [00:45<00:13,  3.78it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.78it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.78it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.78it/s][A
 79%|███████▊  | 174/221 [00:46<00:12,  3.78it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.78it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.78it/s][A
 80%|████████  | 177/221 [00:47<00:11,  3.78it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.78it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.78it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 181/221 [00:48<00:10,  3.78it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.78it/s][A
 84%|████████▎ | 185/221 [00:49<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.78it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.78it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 189/221 [00:50<00:08,  3.78it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.78it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 192/221 [00:51<00:07,  3.78it/s][A
 87%|████████▋ | 193/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:52<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:53<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [00:56<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [00:56<00:02,  3.78it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.78it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.78it/s][A
 97%|█████████▋| 215/221 [00:57<00:01,  3.78it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.78it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.78it/s][A
 99%|█████████▉| 219/221 [00:58<00:00,  3.78it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.77it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:38,  5.71it/s][A
  1%|          | 2/221 [00:00<00:55,  3.94it/s][A
  1%|▏         | 3/221 [00:00<00:52,  4.19it/s][A
  2%|▏         | 4/221 [00:00<00:49,  4.42it/s][A
  2%|▏         | 5/221 [00:01<00:43,  4.98it/s][A
  3%|▎         | 6/221 [00:01<00:35,  5.98it/s][A
  3%|▎         | 7/221 [00:01<00:39,  5.36it/s][A
  4%|▎         | 8/221 [00:01<00:38,  5.59it/s][A
  4%|▍         | 9/221 [00:01<00:36,  5.83it/s][A
  5%|▍         | 10/221 [00:02<01:08,  3.07it/s][A
  5%|▍         | 11/221 [00:02<00:57,  3.62it/s][A
  5%|▌         | 12/221 [00:02<00:48,  4.29it/s][A
  6%|▌         | 13/221 [00:03<01:11,  2.92it/s][A
  7%|▋         | 15/221 [00:03<00:52,  3.92it/s][A
  7%|▋         | 16/221 [00:03<00:58,  3.49it/s][A
  8%|▊         | 17/221 [00:04<01:25,  2.37it/s][A
  8%|▊         | 18/221 [00:04<01:14,  2.71it/s][A
  9%|▊         | 19/221 [00:05<01:06,  3.02it/s][A
  9%|▉         | 20/221 [00:05<00:55,  3.64it/s][A
 10%|▉         | 21/221 [00:05<00:47,  4.20it/s][A
 10%|▉         | 22/221 [00:05<00:48,  4.09it/s][A
 10%|█         | 23/221 [00:05<00:40,  4.92it/s][A
 11%|█         | 24/221 [00:06<00:39,  4.95it/s][A
 11%|█▏        | 25/221 [00:06<00:40,  4.85it/s][A
 12%|█▏        | 26/221 [00:06<00:45,  4.29it/s][A
 13%|█▎        | 28/221 [00:06<00:40,  4.79it/s][A
 13%|█▎        | 29/221 [00:07<00:37,  5.06it/s][A
 14%|█▎        | 30/221 [00:07<00:40,  4.71it/s][A
 14%|█▍        | 31/221 [00:07<00:35,  5.29it/s][A
 15%|█▍        | 33/221 [00:07<00:29,  6.48it/s][A
 16%|█▌        | 35/221 [00:08<00:29,  6.31it/s][A
 16%|█▋        | 36/221 [00:08<00:36,  5.10it/s][A
 17%|█▋        | 37/221 [00:08<00:36,  5.01it/s][A
 17%|█▋        | 38/221 [00:08<00:44,  4.10it/s][A
 18%|█▊        | 39/221 [00:09<00:41,  4.37it/s][A
 18%|█▊        | 40/221 [00:09<00:41,  4.34it/s][A
 19%|█▊        | 41/221 [00:09<00:36,  4.98it/s][A
 19%|█▉        | 42/221 [00:09<00:48,  3.69it/s][A
 19%|█▉        | 43/221 [00:10<00:58,  3.05it/s][A
 20%|█▉        | 44/221 [00:10<00:58,  3.01it/s][A
 20%|██        | 45/221 [00:11<00:54,  3.26it/s][A
 21%|██        | 46/221 [00:11<00:44,  3.96it/s][A
 21%|██▏       | 47/221 [00:11<00:47,  3.64it/s][A
 22%|██▏       | 48/221 [00:11<00:39,  4.36it/s][A
 22%|██▏       | 49/221 [00:11<00:38,  4.41it/s][A
 23%|██▎       | 50/221 [00:12<00:40,  4.25it/s][A
 24%|██▎       | 52/221 [00:12<00:31,  5.37it/s][A
 24%|██▍       | 54/221 [00:13<00:51,  3.21it/s][A
 25%|██▍       | 55/221 [00:13<00:52,  3.17it/s][A
 25%|██▌       | 56/221 [00:13<00:44,  3.69it/s][A
 26%|██▌       | 57/221 [00:13<00:42,  3.89it/s][A
 26%|██▌       | 58/221 [00:14<00:41,  3.88it/s][A
 27%|██▋       | 59/221 [00:14<00:40,  4.00it/s][A
 27%|██▋       | 60/221 [00:14<00:48,  3.31it/s][A
 28%|██▊       | 61/221 [00:15<00:42,  3.74it/s][A
 28%|██▊       | 62/221 [00:15<00:42,  3.75it/s][A
 29%|██▊       | 63/221 [00:15<00:38,  4.06it/s][A
 29%|██▉       | 64/221 [00:15<00:45,  3.48it/s][A
 29%|██▉       | 65/221 [00:16<00:38,  4.03it/s][A
 30%|██▉       | 66/221 [00:16<00:52,  2.95it/s][A
 30%|███       | 67/221 [00:16<00:50,  3.03it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.75it/s][A
 31%|███       | 69/221 [00:17<01:05,  2.33it/s][A
 32%|███▏      | 70/221 [00:18<00:52,  2.86it/s][A
 32%|███▏      | 71/221 [00:18<00:47,  3.18it/s][A
 33%|███▎      | 72/221 [00:18<00:49,  2.99it/s][A
 33%|███▎      | 73/221 [00:19<00:57,  2.58it/s][A
 34%|███▍      | 75/221 [00:19<00:40,  3.57it/s][A
 34%|███▍      | 76/221 [00:19<00:37,  3.88it/s][A
 35%|███▍      | 77/221 [00:19<00:37,  3.87it/s][A
 35%|███▌      | 78/221 [00:20<00:31,  4.54it/s][A
 36%|███▌      | 79/221 [00:20<00:43,  3.28it/s][A
 36%|███▌      | 80/221 [00:20<00:39,  3.61it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:40,  3.46it/s][A
 38%|███▊      | 83/221 [00:21<00:48,  2.87it/s][A
 38%|███▊      | 84/221 [00:22<00:39,  3.44it/s][A
 38%|███▊      | 85/221 [00:22<00:32,  4.22it/s][A
 39%|███▉      | 86/221 [00:22<00:26,  5.02it/s][A
 39%|███▉      | 87/221 [00:23<00:59,  2.26it/s][A
 40%|███▉      | 88/221 [00:23<01:00,  2.21it/s][A
 40%|████      | 89/221 [00:23<00:50,  2.60it/s][A
 41%|████      | 90/221 [00:24<00:46,  2.79it/s][A
 41%|████      | 91/221 [00:24<00:37,  3.43it/s][A
 42%|████▏     | 92/221 [00:24<00:33,  3.84it/s][A
 42%|████▏     | 93/221 [00:25<00:44,  2.88it/s][A
 43%|████▎     | 94/221 [00:25<00:43,  2.92it/s][A
 43%|████▎     | 95/221 [00:25<00:43,  2.90it/s][A
 43%|████▎     | 96/221 [00:26<00:40,  3.06it/s][A
 44%|████▍     | 97/221 [00:26<00:35,  3.45it/s][A
 44%|████▍     | 98/221 [00:26<00:38,  3.17it/s][A
 45%|████▍     | 99/221 [00:26<00:31,  3.82it/s][A
 45%|████▌     | 100/221 [00:27<00:30,  3.93it/s][A
 46%|████▌     | 101/221 [00:27<00:30,  3.90it/s][A
 46%|████▌     | 102/221 [00:28<00:53,  2.23it/s][A
 47%|████▋     | 104/221 [00:28<00:35,  3.32it/s][A
 48%|████▊     | 105/221 [00:28<00:33,  3.51it/s][A
 48%|████▊     | 106/221 [00:29<00:41,  2.78it/s][A
 48%|████▊     | 107/221 [00:29<00:37,  3.01it/s][A
 49%|████▉     | 108/221 [00:29<00:34,  3.23it/s][A
 49%|████▉     | 109/221 [00:29<00:28,  3.91it/s][A
 50%|████▉     | 110/221 [00:30<00:26,  4.13it/s][A
 50%|█████     | 111/221 [00:30<00:26,  4.21it/s][A
 51%|█████     | 112/221 [00:30<00:27,  3.94it/s][A
 51%|█████     | 113/221 [00:30<00:27,  3.94it/s][A
 52%|█████▏    | 115/221 [00:31<00:20,  5.19it/s][A
 52%|█████▏    | 116/221 [00:31<00:22,  4.63it/s][A
 53%|█████▎    | 117/221 [00:31<00:24,  4.24it/s][A
 53%|█████▎    | 118/221 [00:31<00:23,  4.34it/s][A
 54%|█████▍    | 119/221 [00:32<00:28,  3.54it/s][A
 54%|█████▍    | 120/221 [00:32<00:26,  3.83it/s][A
 55%|█████▌    | 122/221 [00:32<00:20,  4.74it/s][A
 56%|█████▌    | 123/221 [00:33<00:20,  4.81it/s][A
 56%|█████▌    | 124/221 [00:33<00:22,  4.27it/s][A
 57%|█████▋    | 125/221 [00:33<00:26,  3.63it/s][A
 57%|█████▋    | 126/221 [00:33<00:23,  4.05it/s][A
 57%|█████▋    | 127/221 [00:34<00:26,  3.59it/s][A
 58%|█████▊    | 128/221 [00:34<00:24,  3.73it/s][A
 59%|█████▉    | 130/221 [00:34<00:17,  5.22it/s][A
 59%|█████▉    | 131/221 [00:34<00:16,  5.53it/s][A
 60%|█████▉    | 132/221 [00:35<00:29,  3.00it/s][A
 60%|██████    | 133/221 [00:35<00:27,  3.25it/s][A
 61%|██████    | 134/221 [00:36<00:31,  2.74it/s][A
 61%|██████    | 135/221 [00:36<00:30,  2.85it/s][A
 62%|██████▏   | 136/221 [00:36<00:27,  3.08it/s][A
 62%|██████▏   | 137/221 [00:37<00:24,  3.40it/s][A
 62%|██████▏   | 138/221 [00:37<00:26,  3.11it/s][A
 63%|██████▎   | 139/221 [00:38<00:30,  2.72it/s][A
 63%|██████▎   | 140/221 [00:38<00:27,  2.89it/s][A
 64%|██████▍   | 141/221 [00:38<00:25,  3.15it/s][A
 64%|██████▍   | 142/221 [00:38<00:22,  3.54it/s][A
 65%|██████▍   | 143/221 [00:39<00:37,  2.07it/s][A
 65%|██████▌   | 144/221 [00:40<00:37,  2.06it/s][A
 66%|██████▌   | 146/221 [00:40<00:22,  3.37it/s][A
 67%|██████▋   | 147/221 [00:40<00:22,  3.26it/s][A
 67%|██████▋   | 148/221 [00:41<00:24,  3.04it/s][A
 67%|██████▋   | 149/221 [00:41<00:26,  2.68it/s][A
 68%|██████▊   | 150/221 [00:41<00:24,  2.91it/s][A
 68%|██████▊   | 151/221 [00:42<00:23,  3.01it/s][A
 69%|██████▉   | 152/221 [00:43<00:42,  1.63it/s][A
 69%|██████▉   | 153/221 [00:43<00:32,  2.10it/s][A
 70%|██████▉   | 154/221 [00:43<00:26,  2.57it/s][A
 70%|███████   | 155/221 [00:44<00:24,  2.72it/s][A
 71%|███████   | 156/221 [00:44<00:30,  2.16it/s][A
 71%|███████   | 157/221 [00:45<00:26,  2.43it/s][A
 71%|███████▏  | 158/221 [00:45<00:22,  2.79it/s][A
 72%|███████▏  | 159/221 [00:45<00:17,  3.55it/s][A
 72%|███████▏  | 160/221 [00:45<00:14,  4.09it/s][A
 73%|███████▎  | 161/221 [00:45<00:13,  4.31it/s][A
 73%|███████▎  | 162/221 [00:45<00:12,  4.73it/s][A
 74%|███████▍  | 163/221 [00:46<00:12,  4.50it/s][A
 74%|███████▍  | 164/221 [00:46<00:11,  4.95it/s][A
 75%|███████▍  | 165/221 [00:46<00:14,  3.80it/s][A
 75%|███████▌  | 166/221 [00:47<00:14,  3.83it/s][A
 76%|███████▌  | 168/221 [00:47<00:11,  4.56it/s][A
 76%|███████▋  | 169/221 [00:47<00:10,  4.77it/s][A
 77%|███████▋  | 170/221 [00:47<00:12,  4.16it/s][A
 77%|███████▋  | 171/221 [00:48<00:12,  4.13it/s][A
 78%|███████▊  | 172/221 [00:48<00:10,  4.71it/s][A
 78%|███████▊  | 173/221 [00:48<00:16,  2.96it/s][A
 79%|███████▊  | 174/221 [00:49<00:17,  2.74it/s][A
 79%|███████▉  | 175/221 [00:49<00:16,  2.74it/s][A
 80%|███████▉  | 176/221 [00:49<00:13,  3.43it/s][A
 80%|████████  | 177/221 [00:49<00:11,  3.98it/s][A
 81%|████████  | 178/221 [00:50<00:12,  3.45it/s][A
 81%|████████  | 179/221 [00:50<00:12,  3.25it/s][A
 81%|████████▏ | 180/221 [00:50<00:10,  3.75it/s][A
 82%|████████▏ | 181/221 [00:51<00:09,  4.32it/s][A
 82%|████████▏ | 182/221 [00:51<00:10,  3.90it/s][A
 83%|████████▎ | 183/221 [00:51<00:09,  4.18it/s][A
 83%|████████▎ | 184/221 [00:51<00:08,  4.33it/s][A
 84%|████████▍ | 186/221 [00:52<00:09,  3.85it/s][A
 85%|████████▍ | 187/221 [00:52<00:09,  3.44it/s][A
 85%|████████▌ | 188/221 [00:52<00:09,  3.54it/s][A
 86%|████████▌ | 189/221 [00:53<00:08,  3.73it/s][A
 86%|████████▌ | 190/221 [00:53<00:08,  3.47it/s][A
 86%|████████▋ | 191/221 [00:53<00:07,  4.11it/s][A
 87%|████████▋ | 192/221 [00:53<00:07,  3.87it/s][A
 88%|████████▊ | 194/221 [00:54<00:07,  3.49it/s][A
 88%|████████▊ | 195/221 [00:54<00:06,  3.81it/s][A
 89%|████████▊ | 196/221 [00:55<00:07,  3.33it/s][A
 89%|████████▉ | 197/221 [00:55<00:07,  3.16it/s][A
 90%|████████▉ | 198/221 [00:55<00:07,  3.05it/s][A
 90%|█████████ | 199/221 [00:56<00:06,  3.37it/s][A
 90%|█████████ | 200/221 [00:56<00:06,  3.25it/s][A
 91%|█████████ | 201/221 [00:56<00:05,  3.66it/s][A
 91%|█████████▏| 202/221 [00:56<00:05,  3.62it/s][A
 92%|█████████▏| 203/221 [00:57<00:04,  3.87it/s][A
 92%|█████████▏| 204/221 [00:57<00:05,  3.28it/s][A
 93%|█████████▎| 206/221 [00:58<00:04,  3.57it/s][A
 94%|█████████▍| 208/221 [00:58<00:03,  4.06it/s][A
 95%|█████████▍| 209/221 [00:58<00:03,  3.82it/s][A
 95%|█████████▌| 211/221 [00:59<00:02,  4.07it/s][A
 96%|█████████▌| 212/221 [00:59<00:02,  4.05it/s][A
 96%|█████████▋| 213/221 [00:59<00:01,  4.44it/s][A
 97%|█████████▋| 214/221 [01:00<00:02,  3.12it/s][A
 97%|█████████▋| 215/221 [01:00<00:01,  3.40it/s][A
 98%|█████████▊| 216/221 [01:00<00:01,  2.95it/s][A
 98%|█████████▊| 217/221 [01:01<00:01,  2.84it/s][A
 99%|█████████▊| 218/221 [01:01<00:01,  3.00it/s][A
 99%|█████████▉| 219/221 [01:01<00:00,  2.85it/s][A
100%|█████████▉| 220/221 [01:02<00:00,  3.37it/s][A
100%|██████████| 221/221 [01:02<00:00,  3.57it/s][A100%|██████████| 221/221 [01:02<00:00,  3.54it/s]
09/09/2024 16:46:47 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 249--===========

09/09/2024 16:46:47 - INFO - __main__ -   {'area_r1': 42.3, 'area_recall': '42.3/69.6/79.2', 'area_ravg': 63.7}
09/09/2024 16:46:47 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 249--===========

09/09/2024 16:46:47 - INFO - __main__ -   {'forward_r1': 36.9, 'forward_recall': '36.9/62.6/73.4', 'forward_ravg': 57.6}
09/09/2024 16:46:47 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 249--===========

09/09/2024 16:46:47 - INFO - __main__ -   {'area_video_r1': 39.5, 'area_video_recall': '39.5/66.7/77.9', 'area_video_ravg': 61.4}
09/09/2024 16:46:47 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 249=======

09/09/2024 16:46:47 - INFO - __main__ -   {'area_video_r1': 39.5, 'area_video_recall': '39.5/66.7/77.9', 'area_video_ravg': 61.4}
09/09/2024 16:46:47 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 249--===========

09/09/2024 16:46:47 - INFO - __main__ -   {'area_video_r1': 51.5, 'area_video_recall': '51.5/75.5/82.5', 'area_video_ravg': 69.8, 'area_video_back_r1': 49.8, 'area_video_back_recall': '49.8/72.6/80.2', 'area_video_back_ravg': 67.5}
09/09/2024 16:46:47 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 16:46:47 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 16:46:47 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 249--===========

09/09/2024 16:46:47 - INFO - __main__ -   {'video_r1': 41.6, 'video_recall': '41.6/69.2/79.9', 'video_ravg': 63.6}
09/09/2024 16:46:47 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 16:46:47 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 16:46:47 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 249--===========

09/09/2024 16:46:47 - INFO - __main__ -   {'video_r1': 52.1, 'video_recall': '52.1/76.0/82.5', 'video_ravg': 70.2}
09/09/2024 16:46:47 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 249=======

09/09/2024 16:46:47 - INFO - __main__ -   {'video_r1': 52.1, 'video_recall': '52.1/76.0/82.5', 'video_ravg': 70.2}
09/09/2024 16:47:18 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.7877967357635498, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.030324814841151237, 'loss_ret%tv%ta--finetune_area/loss_area': 2.0442161560058594, 'loss_ret%tv%ta--finetune_area/total_loss': 3.862337589263916}
 13%|█▎        | 250/1945 [1:21:52<58:36:54, 124.49s/it][h264 @ 0x556db10b1280] mmco: unref short failure
[h264 @ 0x55e449e6ff40] mmco: unref short failure
[h264 @ 0x55e449e6ff40] mmco: unref short failure
 13%|█▎        | 251/1945 [1:21:56<41:38:25, 88.49s/it] [h264 @ 0x55b71a65ae80] mmco: unref short failure
[h264 @ 0x55b737628c40] mmco: unref short failure
[h264 @ 0x55b737628c40] mmco: unref short failure
[h264 @ 0x556db0807ec0] mmco: unref short failure
[h264 @ 0x556db0807ec0] mmco: unref short failure
[h264 @ 0x556db39fc8c0] mmco: unref short failure
[h264 @ 0x556db39fc8c0] mmco: unref short failure
 13%|█▎        | 252/1945 [1:22:01<29:46:58, 63.33s/it][h264 @ 0x556dbc48a800] mmco: unref short failure
[h264 @ 0x556dbc48a800] mmco: unref short failure
[h264 @ 0x55b725636180] mmco: unref short failure
[h264 @ 0x55b725636180] mmco: unref short failure
 13%|█▎        | 253/1945 [1:22:06<21:36:46, 45.98s/it][h264 @ 0x556d9da64a40] mmco: unref short failure
[h264 @ 0x556d9da64a40] mmco: unref short failure
[h264 @ 0x556d90f9b840] mmco: unref short failure
 13%|█▎        | 254/1945 [1:22:12<15:55:31, 33.90s/it][h264 @ 0x55e448cba0c0] mmco: unref short failure
[h264 @ 0x55e448cba0c0] mmco: unref short failure
 13%|█▎        | 255/1945 [1:22:19<12:02:34, 25.65s/it][h264 @ 0x55b719259b40] mmco: unref short failure
[h264 @ 0x55b719259b40] mmco: unref short failure
[h264 @ 0x55b719259b40] mmco: unref short failure
[h264 @ 0x55b719259b40] mmco: unref short failure
[h264 @ 0x55e45fd11300] mmco: unref short failure
[h264 @ 0x55e45fd11300] mmco: unref short failure
 13%|█▎        | 256/1945 [1:22:25<9:18:08, 19.83s/it] [h264 @ 0x556d9e82ce80] mmco: unref short failure
[h264 @ 0x556d9e82ce80] mmco: unref short failure
 13%|█▎        | 257/1945 [1:22:32<7:31:25, 16.05s/it] 13%|█▎        | 258/1945 [1:22:39<6:10:36, 13.18s/it] 13%|█▎        | 259/1945 [1:22:45<5:17:57, 11.32s/it][h264 @ 0x55e45854cac0] mmco: unref short failure
 13%|█▎        | 260/1945 [1:22:54<4:53:21, 10.45s/it][h264 @ 0x55e44df59b40] mmco: unref short failure
 13%|█▎        | 261/1945 [1:23:01<4:25:57,  9.48s/it][h264 @ 0x556db10b0bc0] mmco: unref short failure
[h264 @ 0x556db10b0bc0] mmco: unref short failure
[h264 @ 0x556d90f9ba40] mmco: unref short failure
[h264 @ 0x556d90f9ba40] mmco: unref short failure
 13%|█▎        | 262/1945 [1:23:09<4:12:18,  9.00s/it] 14%|█▎        | 263/1945 [1:23:16<3:53:06,  8.32s/it][h264 @ 0x55b72a1ac580] mmco: unref short failure
[h264 @ 0x55b72a1ac580] mmco: unref short failure
[h264 @ 0x55b72a1ac580] mmco: unref short failure
[h264 @ 0x556da0bb9640] mmco: unref short failure
 14%|█▎        | 264/1945 [1:23:23<3:43:36,  7.98s/it][h264 @ 0x55b7273ede40] mmco: unref short failure
[h264 @ 0x55b7273ede40] mmco: unref short failure
[h264 @ 0x55e44a7c2cc0] mmco: unref short failure
[h264 @ 0x55e453cfb580] mmco: unref short failure
[h264 @ 0x55e453cfb580] mmco: unref short failure
[h264 @ 0x55e453cfb580] mmco: unref short failure
[h264 @ 0x55e453cfb580] mmco: unref short failure
 14%|█▎        | 265/1945 [1:23:30<3:38:07,  7.79s/it][h264 @ 0x556db9c9a3c0] mmco: unref short failure
[h264 @ 0x556d9214e6c0] mmco: unref short failure
[h264 @ 0x556d9214e6c0] mmco: unref short failure
 14%|█▎        | 266/1945 [1:23:37<3:32:23,  7.59s/it][h264 @ 0x55b7316c4440] mmco: unref short failure
[h264 @ 0x55b7316c4440] mmco: unref short failure
[h264 @ 0x55e450da7680] mmco: unref short failure
 14%|█▎        | 267/1945 [1:23:45<3:30:45,  7.54s/it][h264 @ 0x556d96bdc140] mmco: unref short failure
[h264 @ 0x55b718c1ca00] mmco: unref short failure
[h264 @ 0x55b718c1ca00] mmco: unref short failure
[h264 @ 0x55b7170b1780] mmco: unref short failure
[h264 @ 0x55b7170b1780] mmco: unref short failure
[h264 @ 0x556da9069500] mmco: unref short failure
[h264 @ 0x556da9069500] mmco: unref short failure
[h264 @ 0x556da9069500] mmco: unref short failure
[h264 @ 0x556da9069500] mmco: unref short failure
[h264 @ 0x556d8da32a40] mmco: unref short failure
[h264 @ 0x55e44df596c0] mmco: unref short failure
[h264 @ 0x55e44df596c0] mmco: unref short failure
[h264 @ 0x556d8da32a40] mmco: unref short failure
 14%|█▍        | 268/1945 [1:23:52<3:30:07,  7.52s/it][h264 @ 0x556da3fafe00] mmco: unref short failure
[h264 @ 0x556da3fafe00] mmco: unref short failure
[h264 @ 0x55b71c74de40] mmco: unref short failure
[h264 @ 0x556da02e5fc0] mmco: unref short failure
[h264 @ 0x556da02e5fc0] mmco: unref short failure
[h264 @ 0x55b730a17300] mmco: unref short failure
 14%|█▍        | 269/1945 [1:24:05<4:17:04,  9.20s/it][h264 @ 0x556da88eef40] mmco: unref short failure
 14%|█▍        | 270/1945 [1:24:17<4:38:12,  9.97s/it][h264 @ 0x55b71e0fe300] mmco: unref short failure
[h264 @ 0x55b71e0fe300] mmco: unref short failure
 14%|█▍        | 271/1945 [1:24:26<4:27:48,  9.60s/it][h264 @ 0x556da86a4dc0] mmco: unref short failure
[h264 @ 0x556da86a4dc0] mmco: unref short failure
 14%|█▍        | 272/1945 [1:24:33<4:09:54,  8.96s/it][h264 @ 0x556d99a3fc40] mmco: unref short failure
[h264 @ 0x556d99a3fc40] mmco: unref short failure
[h264 @ 0x556da5bd79c0] mmco: unref short failure
[h264 @ 0x556d936afd80] mmco: unref short failure
[h264 @ 0x55e4603d4040] mmco: unref short failure
[h264 @ 0x55e4603d4040] mmco: unref short failure
 14%|█▍        | 273/1945 [1:24:45<4:30:49,  9.72s/it][h264 @ 0x556d8f5f5600] mmco: unref short failure
[h264 @ 0x55b7189797c0] mmco: unref short failure
[h264 @ 0x55b7189797c0] mmco: unref short failure
[h264 @ 0x556da4446200] mmco: unref short failure
[h264 @ 0x55b7170b1780] mmco: unref short failure
[h264 @ 0x55b7170b1780] mmco: unref short failure
[h264 @ 0x55b716035cc0] mmco: unref short failure
[h264 @ 0x55b716035cc0] mmco: unref short failure
[h264 @ 0x55b7170b1980] mmco: unref short failure
[h264 @ 0x55b7170b1980] mmco: unref short failure
[h264 @ 0x556d9dd05d00] mmco: unref short failure
[h264 @ 0x556d9dd05d00] mmco: unref short failure
[h264 @ 0x556d8e389a40] mmco: unref short failure
[h264 @ 0x556d8e389a40] mmco: unref short failure
[h264 @ 0x556d8e389a40] mmco: unref short failure
[h264 @ 0x556d8e389a40] mmco: unref short failure
[h264 @ 0x55b7213e6dc0] mmco: unref short failure
[h264 @ 0x55b7273ee2c0] mmco: unref short failure
[h264 @ 0x55b7273ee2c0] mmco: unref short failure
[h264 @ 0x55b7273ee2c0] mmco: unref short failure
[h264 @ 0x55b7273ee2c0] mmco: unref short failure
[h264 @ 0x556daeae0e00] mmco: unref short failure
[h264 @ 0x556daeae0e00] mmco: unref short failure
[h264 @ 0x55b71c74d680] mmco: unref short failure
[h264 @ 0x55b71c74d680] mmco: unref short failure
 14%|█▍        | 274/1945 [1:25:23<8:25:37, 18.16s/it][h264 @ 0x55e460c14e40] mmco: unref short failure
[h264 @ 0x55e460c14e40] mmco: unref short failure
[h264 @ 0x55b71f83e6c0] mmco: unref short failure
[h264 @ 0x55b71f83e6c0] mmco: unref short failure
[h264 @ 0x55b71b2b9cc0] mmco: unref short failure
[h264 @ 0x556d92674480] mmco: unref short failure
[h264 @ 0x556d92674480] mmco: unref short failure
[h264 @ 0x556da8b44b00] mmco: unref short failure
[h264 @ 0x55b72e29a680] mmco: unref short failure
[h264 @ 0x55b72e29a680] mmco: unref short failure
[h264 @ 0x55b72e29a680] mmco: unref short failure
[h264 @ 0x55b72e29a680] mmco: unref short failure
 14%|█▍        | 275/1945 [1:25:43<8:46:33, 18.92s/it][h264 @ 0x55b7240070c0] mmco: unref short failure
[h264 @ 0x55e4533f9a00] mmco: unref short failure
 14%|█▍        | 276/1945 [1:26:03<8:54:59, 19.23s/it][h264 @ 0x55b735458fc0] mmco: unref short failure
[h264 @ 0x55b735458fc0] mmco: unref short failure
[h264 @ 0x55b735458fc0] mmco: unref short failure
[h264 @ 0x55b735458fc0] mmco: unref short failure
[h264 @ 0x55b735458fc0] mmco: unref short failure
 14%|█▍        | 277/1945 [1:26:11<7:16:42, 15.71s/it][h264 @ 0x55b71c03c1c0] mmco: unref short failure
 14%|█▍        | 278/1945 [1:26:19<6:16:49, 13.56s/it][h264 @ 0x556daf05ac80] mmco: unref short failure
[h264 @ 0x556daf05ac80] mmco: unref short failure
 14%|█▍        | 279/1945 [1:26:30<5:55:48, 12.81s/it][h264 @ 0x556daaccfdc0] mmco: unref short failure
[h264 @ 0x55e4506fdd80] mmco: unref short failure
 14%|█▍        | 280/1945 [1:26:42<5:42:55, 12.36s/it][h264 @ 0x55b715b4ae80] mmco: unref short failure
[h264 @ 0x55e44c504200] mmco: unref short failure
 14%|█▍        | 281/1945 [1:26:51<5:14:19, 11.33s/it][h264 @ 0x55e457495a40] mmco: unref short failure
[h264 @ 0x55e457495a40] mmco: unref short failure
[h264 @ 0x556d9abe6180] mmco: unref short failure
[h264 @ 0x55b7216f9980] mmco: unref short failure
[h264 @ 0x556d8d85eb80] mmco: unref short failure
[h264 @ 0x556d8d85eb80] mmco: unref short failure
[h264 @ 0x556d9570a9c0] mmco: unref short failure
[h264 @ 0x556d9570a9c0] mmco: unref short failure
[h264 @ 0x55e44b5e4fc0] mmco: unref short failure
[h264 @ 0x55b7329a2b80] mmco: unref short failure
 14%|█▍        | 282/1945 [1:27:26<8:34:54, 18.58s/it][h264 @ 0x55b72286ca00] mmco: unref short failure
[h264 @ 0x55b72286ca00] mmco: unref short failure
[h264 @ 0x55b71b2a80c0] mmco: unref short failure
[h264 @ 0x55b71b2a80c0] mmco: unref short failure
[h264 @ 0x556d931d5400] mmco: unref short failure
[h264 @ 0x556d931d5400] mmco: unref short failure
 15%|█▍        | 283/1945 [1:27:43<8:16:46, 17.93s/it][h264 @ 0x556d9b9fcdc0] mmco: unref short failure
[h264 @ 0x556d9b9fcdc0] mmco: unref short failure
[h264 @ 0x556d9e1f0a40] mmco: unref short failure
[h264 @ 0x556da24f38c0] mmco: unref short failure
[h264 @ 0x55b724ee4c00] mmco: unref short failure
[h264 @ 0x55b724ee4c00] mmco: unref short failure
[h264 @ 0x55b7353d3dc0] mmco: unref short failure
[h264 @ 0x55b71cfa6540] mmco: unref short failure
[h264 @ 0x55b71cfa6540] mmco: unref short failure
[h264 @ 0x556d92cf8c80] mmco: unref short failure
 15%|█▍        | 284/1945 [1:28:04<8:44:40, 18.95s/it] 15%|█▍        | 285/1945 [1:28:11<7:04:25, 15.34s/it][h264 @ 0x556d8e71f8c0] mmco: unref short failure
[h264 @ 0x55b7353d3dc0] mmco: unref short failure
[h264 @ 0x556dbbb502c0] mmco: unref short failure
[h264 @ 0x556dbbb502c0] mmco: unref short failure
[h264 @ 0x556d8d9f6c40] mmco: unref short failure
 15%|█▍        | 286/1945 [1:28:25<6:54:25, 14.99s/it][h264 @ 0x556d97efd340] mmco: unref short failure
[h264 @ 0x55e453b00a80] mmco: unref short failure
 15%|█▍        | 287/1945 [1:28:40<6:51:28, 14.89s/it][h264 @ 0x55b7353d4200] mmco: unref short failure
[h264 @ 0x55e463ade4c0] mmco: unref short failure
[h264 @ 0x55e463ade4c0] mmco: unref short failure
 15%|█▍        | 288/1945 [1:28:47<5:50:30, 12.69s/it][h264 @ 0x55b72fddc140] mmco: unref short failure
[h264 @ 0x55b724b94000] mmco: unref short failure
[h264 @ 0x556da127fe40] mmco: unref short failure
[h264 @ 0x556da127fe40] mmco: unref short failure
[h264 @ 0x556da127fe40] mmco: unref short failure
[h264 @ 0x556da127fe40] mmco: unref short failure
[h264 @ 0x556da127fe40] mmco: unref short failure
[h264 @ 0x556da127fe40] mmco: unref short failure
 15%|█▍        | 289/1945 [1:28:55<5:07:50, 11.15s/it][h264 @ 0x55b724d6d040] mmco: unref short failure
[h264 @ 0x55b71b3caf00] mmco: unref short failure
[h264 @ 0x55b7170cdb80] mmco: unref short failure
[h264 @ 0x556d99094980] mmco: unref short failure
[h264 @ 0x556d9eee8d80] mmco: unref short failure
[h264 @ 0x55b729892700] mmco: unref short failure
 15%|█▍        | 290/1945 [1:29:26<7:56:08, 17.26s/it][h264 @ 0x55b72f91c0c0] mmco: unref short failure
[h264 @ 0x55b72f91c0c0] mmco: unref short failure
[h264 @ 0x556db7737280] mmco: unref short failure
[h264 @ 0x556db7737280] mmco: unref short failure
[h264 @ 0x55b727292fc0] mmco: unref short failure
 15%|█▍        | 291/1945 [1:29:48<8:30:39, 18.52s/it][h264 @ 0x556db9b1f780] mmco: unref short failure
[h264 @ 0x55e4639e3c40] mmco: unref short failure
[h264 @ 0x55e4639e3c40] mmco: unref short failure
[h264 @ 0x556dbe1c2a80] mmco: unref short failure
[h264 @ 0x55e45c266300] mmco: unref short failure
[h264 @ 0x55e45c266300] mmco: unref short failure
[h264 @ 0x556da4d79ec0] mmco: unref short failure
[h264 @ 0x556da4d79ec0] mmco: unref short failure
[h264 @ 0x55b730a23d40] mmco: unref short failure
 15%|█▌        | 292/1945 [1:30:08<8:44:18, 19.03s/it][h264 @ 0x55b71d677e40] mmco: unref short failure
[h264 @ 0x556da6eabbc0] mmco: unref short failure
[h264 @ 0x556d900fbdc0] mmco: unref short failure
[h264 @ 0x556d900fbdc0] mmco: unref short failure
[h264 @ 0x556d900fbdc0] mmco: unref short failure
[h264 @ 0x556d900fbdc0] mmco: unref short failure
 15%|█▌        | 293/1945 [1:30:16<7:09:50, 15.61s/it][h264 @ 0x55e451312340] mmco: unref short failure
[h264 @ 0x55e451312340] mmco: unref short failure
 15%|█▌        | 294/1945 [1:30:25<6:18:18, 13.75s/it][h264 @ 0x556d97463c00] mmco: unref short failure
[h264 @ 0x556d97463c00] mmco: unref short failure
[h264 @ 0x55b724611d80] mmco: unref short failure
[h264 @ 0x55b724611d80] mmco: unref short failure
[h264 @ 0x55e4539ad4c0] mmco: unref short failure
[h264 @ 0x55e4539ad4c0] mmco: unref short failure
[h264 @ 0x55b7399da200] mmco: unref short failure
[h264 @ 0x55b7399da200] mmco: unref short failure
 15%|█▌        | 295/1945 [1:30:49<7:44:45, 16.90s/it][h264 @ 0x55e450b9aac0] mmco: unref short failure
[h264 @ 0x55b71bde1a00] mmco: unref short failure
[h264 @ 0x55b71bde1a00] mmco: unref short failure
 15%|█▌        | 296/1945 [1:30:57<6:30:38, 14.21s/it][h264 @ 0x55e448c000c0] mmco: unref short failure
[h264 @ 0x55e448c000c0] mmco: unref short failure
 15%|█▌        | 297/1945 [1:31:05<5:33:55, 12.16s/it][h264 @ 0x55b736d7bc00] mmco: unref short failure
[h264 @ 0x55b736d7bc00] mmco: unref short failure
[h264 @ 0x55b72c763200] mmco: unref short failure
[h264 @ 0x55b72c763200] mmco: unref short failure
[h264 @ 0x556da378a380] mmco: unref short failure
[h264 @ 0x556da378a380] mmco: unref short failure
[h264 @ 0x55b736d7bc00] mmco: unref short failure
[h264 @ 0x55b736d7bc00] mmco: unref short failure
[h264 @ 0x556dabcc6e80] mmco: unref short failure
[h264 @ 0x556d972c7a40] mmco: unref short failure
[h264 @ 0x556db00b34c0] mmco: unref short failure
 15%|█▌        | 298/1945 [1:31:31<7:28:51, 16.35s/it][h264 @ 0x556da4fd0b00] mmco: unref short failure
[h264 @ 0x556daf65d000] mmco: unref short failure
[h264 @ 0x556daf65d000] mmco: unref short failure
[h264 @ 0x55b718390140] mmco: unref short failure
[h264 @ 0x55b718390140] mmco: unref short failure
[h264 @ 0x55b718390140] mmco: unref short failure
[h264 @ 0x55b718390140] mmco: unref short failure
[h264 @ 0x55b718e5f300] mmco: unref short failure
[h264 @ 0x55b718e5f300] mmco: unref short failure
[h264 @ 0x556dba61eb00] mmco: unref short failure
[h264 @ 0x556d983f1c80] mmco: unref short failure
[h264 @ 0x556da3452d00] mmco: unref short failure
[h264 @ 0x55b7207fa900] mmco: unref short failure
[h264 @ 0x556db0815580] mmco: unref short failure
[h264 @ 0x55b72bbad9c0] mmco: unref short failure
 15%|█▌        | 299/1945 [1:31:52<8:07:46, 17.78s/it]09/09/2024 16:57:20 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 16:57:20 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556da6206f80] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b71abd2980] mmco: unref short failure
[h264 @ 0x55b71abd2980] mmco: unref short failure
[h264 @ 0x556dae444800] mmco: unref short failure
[h264 @ 0x556dae444800] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556da9ca4500] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b734428b40] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b718979a80] mmco: unref short failure
[h264 @ 0x556d8f9a0980] mmco: unref short failure
[h264 @ 0x556d8f9a0980] mmco: unref short failure
[h264 @ 0x55b718979a80] mmco: unref short failure
[h264 @ 0x55e44d336800] mmco: unref short failure
[h264 @ 0x556d9adb55c0] mmco: unref short failure
[h264 @ 0x556d9adb55c0] mmco: unref short failure
[h264 @ 0x556d9adb55c0] mmco: unref short failure
[h264 @ 0x556d9adb55c0] mmco: unref short failure
[h264 @ 0x55e448bffec0] mmco: unref short failure
[h264 @ 0x556da2dc7e40] mmco: unref short failure
[h264 @ 0x556da2dc7e40] mmco: unref short failure
[h264 @ 0x556da76c2d00] mmco: unref short failure
[h264 @ 0x556db854d980] mmco: unref short failure
[h264 @ 0x55e460c4f5c0] mmco: unref short failure
[h264 @ 0x55e460c4f5c0] mmco: unref short failure
[h264 @ 0x55b723be1400] mmco: unref short failure
[h264 @ 0x55b723be1400] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:56,  3.87it/s][A
  1%|          | 2/221 [00:00<01:25,  2.55it/s][A
  1%|▏         | 3/221 [00:01<01:15,  2.90it/s][A
  2%|▏         | 4/221 [00:01<01:00,  3.61it/s][A
  2%|▏         | 5/221 [00:01<00:54,  3.97it/s][A
  3%|▎         | 6/221 [00:01<00:48,  4.44it/s][A
  3%|▎         | 7/221 [00:01<00:50,  4.22it/s][A[h264 @ 0x55b727077a00] mmco: unref short failure

  4%|▎         | 8/221 [00:02<00:58,  3.64it/s][A
  4%|▍         | 9/221 [00:02<01:02,  3.38it/s][A
  5%|▍         | 10/221 [00:03<01:31,  2.30it/s][A
  5%|▍         | 11/221 [00:03<01:18,  2.66it/s][A[h264 @ 0x556da570e300] mmco: unref short failure

  5%|▌         | 12/221 [00:03<01:10,  2.98it/s][A
  6%|▌         | 13/221 [00:04<01:31,  2.28it/s][A
  6%|▋         | 14/221 [00:05<01:57,  1.77it/s][A
  7%|▋         | 15/221 [00:05<01:37,  2.12it/s][A
  7%|▋         | 16/221 [00:06<01:45,  1.95it/s][A
  8%|▊         | 17/221 [00:06<01:51,  1.84it/s][A
  8%|▊         | 18/221 [00:07<01:54,  1.78it/s][A
  9%|▊         | 19/221 [00:07<01:36,  2.10it/s][A
  9%|▉         | 20/221 [00:07<01:23,  2.42it/s][A
 10%|▉         | 21/221 [00:08<01:11,  2.82it/s][A
 10%|▉         | 22/221 [00:08<01:05,  3.05it/s][A
 10%|█         | 23/221 [00:08<00:56,  3.53it/s][A
 11%|█         | 24/221 [00:08<00:54,  3.60it/s][A
 11%|█▏        | 25/221 [00:09<00:49,  3.93it/s][A
 12%|█▏        | 26/221 [00:09<00:54,  3.56it/s][A
 12%|█▏        | 27/221 [00:09<00:44,  4.34it/s][A
 13%|█▎        | 28/221 [00:10<01:00,  3.18it/s][A
 13%|█▎        | 29/221 [00:11<01:55,  1.66it/s][A
 14%|█▎        | 30/221 [00:11<01:40,  1.90it/s][A
 14%|█▍        | 31/221 [00:11<01:27,  2.17it/s][A
 14%|█▍        | 32/221 [00:12<01:07,  2.81it/s][A
 15%|█▍        | 33/221 [00:12<01:06,  2.84it/s][A
 15%|█▌        | 34/221 [00:12<00:59,  3.12it/s][A
 16%|█▌        | 35/221 [00:12<00:57,  3.25it/s][A
 16%|█▋        | 36/221 [00:13<00:53,  3.48it/s][A
 17%|█▋        | 37/221 [00:13<00:51,  3.55it/s][A
 17%|█▋        | 38/221 [00:13<01:00,  3.04it/s][A
 18%|█▊        | 39/221 [00:14<01:00,  3.00it/s][A[h264 @ 0x556dab03b800] mmco: unref short failure

 18%|█▊        | 40/221 [00:14<01:05,  2.75it/s][A
 19%|█▊        | 41/221 [00:14<00:54,  3.28it/s][A
 19%|█▉        | 42/221 [00:15<00:51,  3.49it/s][A
 19%|█▉        | 43/221 [00:15<00:42,  4.18it/s][A
 20%|█▉        | 44/221 [00:15<00:36,  4.87it/s][A
 20%|██        | 45/221 [00:15<00:41,  4.25it/s][A
 21%|██        | 46/221 [00:15<00:39,  4.44it/s][A
 21%|██▏       | 47/221 [00:16<00:49,  3.49it/s][A
 22%|██▏       | 48/221 [00:16<00:52,  3.28it/s][A
 22%|██▏       | 49/221 [00:16<00:54,  3.18it/s][A
 23%|██▎       | 50/221 [00:17<01:09,  2.46it/s][A
 24%|██▎       | 52/221 [00:17<00:53,  3.18it/s][A
 24%|██▍       | 53/221 [00:18<00:47,  3.57it/s][A
 24%|██▍       | 54/221 [00:18<00:48,  3.45it/s][A
 25%|██▍       | 55/221 [00:18<00:49,  3.33it/s][A
 25%|██▌       | 56/221 [00:19<00:44,  3.67it/s][A
 26%|██▌       | 57/221 [00:19<00:44,  3.70it/s][A
 26%|██▌       | 58/221 [00:19<00:44,  3.69it/s][A
 27%|██▋       | 59/221 [00:19<00:42,  3.84it/s][A[h264 @ 0x556da02a6a40] mmco: unref short failure
[h264 @ 0x556da02a6a40] mmco: unref short failure

 27%|██▋       | 60/221 [00:20<00:52,  3.08it/s][A
 28%|██▊       | 61/221 [00:20<00:46,  3.43it/s][A
 28%|██▊       | 62/221 [00:20<00:50,  3.14it/s][A
 29%|██▊       | 63/221 [00:21<00:55,  2.87it/s][A
 29%|██▉       | 64/221 [00:21<00:50,  3.10it/s][A
 29%|██▉       | 65/221 [00:21<00:46,  3.32it/s][A[h264 @ 0x55e4626f4640] mmco: unref short failure
[h264 @ 0x55e4626f4640] mmco: unref short failure
[h264 @ 0x55e4626f4640] mmco: unref short failure
[h264 @ 0x55e4626f4640] mmco: unref short failure
[h264 @ 0x55e4626f4640] mmco: unref short failure
[h264 @ 0x55e4626f4640] mmco: unref short failure

 30%|██▉       | 66/221 [00:22<00:44,  3.49it/s][A
 30%|███       | 67/221 [00:22<00:48,  3.16it/s][A
 31%|███       | 68/221 [00:22<00:41,  3.66it/s][A
 31%|███       | 69/221 [00:23<00:50,  3.01it/s][A
 32%|███▏      | 70/221 [00:23<00:46,  3.24it/s][A
 32%|███▏      | 71/221 [00:23<00:49,  3.02it/s][A
 33%|███▎      | 72/221 [00:24<00:54,  2.71it/s][A
 33%|███▎      | 73/221 [00:24<01:05,  2.25it/s][A
 33%|███▎      | 74/221 [00:25<00:54,  2.70it/s][A
 34%|███▍      | 75/221 [00:25<00:54,  2.67it/s][A
 34%|███▍      | 76/221 [00:25<00:45,  3.21it/s][A
 35%|███▍      | 77/221 [00:25<00:45,  3.17it/s][A
 35%|███▌      | 78/221 [00:26<00:44,  3.20it/s][A
 36%|███▌      | 79/221 [00:26<00:49,  2.89it/s][A
 36%|███▌      | 80/221 [00:26<00:43,  3.24it/s][A
 37%|███▋      | 81/221 [00:26<00:36,  3.88it/s][A
 37%|███▋      | 82/221 [00:27<00:44,  3.14it/s][A
 38%|███▊      | 83/221 [00:29<01:54,  1.20it/s][A
 38%|███▊      | 84/221 [00:29<01:37,  1.41it/s][A
 38%|███▊      | 85/221 [00:30<01:17,  1.75it/s][A
 39%|███▉      | 86/221 [00:30<01:07,  2.01it/s][A
 39%|███▉      | 87/221 [00:31<01:09,  1.94it/s][A
 40%|███▉      | 88/221 [00:31<01:13,  1.82it/s][A
 40%|████      | 89/221 [00:31<01:01,  2.15it/s][A
 41%|████      | 90/221 [00:32<00:55,  2.37it/s][A
 41%|████      | 91/221 [00:32<00:51,  2.54it/s][A
 42%|████▏     | 92/221 [00:33<01:00,  2.12it/s][A
 42%|████▏     | 93/221 [00:33<00:59,  2.14it/s][A
 43%|████▎     | 94/221 [00:33<00:54,  2.33it/s][A
 43%|████▎     | 95/221 [00:34<01:09,  1.81it/s][A
 43%|████▎     | 96/221 [00:35<00:55,  2.25it/s][A
 44%|████▍     | 97/221 [00:35<00:49,  2.53it/s][A[h264 @ 0x556d8e5e8ac0] mmco: unref short failure
[h264 @ 0x556d8e5e8ac0] mmco: unref short failure

 44%|████▍     | 98/221 [00:35<00:51,  2.39it/s][A
 45%|████▍     | 99/221 [00:35<00:41,  2.92it/s][A
 45%|████▌     | 100/221 [00:36<00:41,  2.94it/s][A
 46%|████▌     | 101/221 [00:36<00:35,  3.37it/s][A
 46%|████▌     | 102/221 [00:36<00:29,  4.10it/s][A
 47%|████▋     | 103/221 [00:36<00:27,  4.36it/s][A
 47%|████▋     | 104/221 [00:36<00:22,  5.13it/s][A
 48%|████▊     | 105/221 [00:37<00:27,  4.28it/s][A
 48%|████▊     | 106/221 [00:37<00:35,  3.22it/s][A
 48%|████▊     | 107/221 [00:37<00:33,  3.38it/s][A
 49%|████▉     | 108/221 [00:38<00:38,  2.95it/s][A
 49%|████▉     | 109/221 [00:38<00:34,  3.27it/s][A
 50%|████▉     | 110/221 [00:38<00:33,  3.27it/s][A
 50%|█████     | 111/221 [00:39<00:38,  2.84it/s][A
 51%|█████     | 112/221 [00:39<00:36,  2.96it/s][A
 51%|█████     | 113/221 [00:40<00:37,  2.89it/s][A
 52%|█████▏    | 114/221 [00:40<00:31,  3.35it/s][A
 52%|█████▏    | 115/221 [00:40<00:27,  3.80it/s][A
 52%|█████▏    | 116/221 [00:40<00:32,  3.19it/s][A
 53%|█████▎    | 117/221 [00:41<00:40,  2.58it/s][A
 53%|█████▎    | 118/221 [00:41<00:42,  2.43it/s][A
 54%|█████▍    | 119/221 [00:42<00:43,  2.33it/s][A
 54%|█████▍    | 120/221 [00:42<00:39,  2.56it/s][A
 55%|█████▍    | 121/221 [00:42<00:33,  2.98it/s][A
 55%|█████▌    | 122/221 [00:43<00:29,  3.34it/s][A
 56%|█████▌    | 123/221 [00:43<00:26,  3.72it/s][A
 56%|█████▌    | 124/221 [00:43<00:27,  3.55it/s][A
 57%|█████▋    | 125/221 [00:43<00:29,  3.24it/s][A
 57%|█████▋    | 126/221 [00:44<00:25,  3.79it/s][A
 57%|█████▋    | 127/221 [00:44<00:24,  3.84it/s][A
 58%|█████▊    | 128/221 [00:44<00:26,  3.54it/s][A
 59%|█████▉    | 130/221 [00:45<00:23,  3.79it/s][A
 59%|█████▉    | 131/221 [00:45<00:26,  3.41it/s][A
 60%|█████▉    | 132/221 [00:45<00:25,  3.45it/s][A
 60%|██████    | 133/221 [00:46<00:26,  3.26it/s][A
 61%|██████    | 134/221 [00:46<00:24,  3.53it/s][A
 61%|██████    | 135/221 [00:46<00:21,  4.06it/s][A
 62%|██████▏   | 136/221 [00:46<00:21,  3.93it/s][A
 62%|██████▏   | 137/221 [00:47<00:18,  4.45it/s][A
 62%|██████▏   | 138/221 [00:47<00:23,  3.60it/s][A
 63%|██████▎   | 139/221 [00:47<00:21,  3.75it/s][A
 63%|██████▎   | 140/221 [00:47<00:21,  3.83it/s][A
 64%|██████▍   | 141/221 [00:48<00:19,  4.05it/s][A[h264 @ 0x556d900fbdc0] mmco: unref short failure

 64%|██████▍   | 142/221 [00:48<00:21,  3.74it/s][A
 65%|██████▍   | 143/221 [00:48<00:20,  3.80it/s][A
 65%|██████▌   | 144/221 [00:48<00:20,  3.69it/s][A
 66%|██████▌   | 145/221 [00:49<00:18,  4.09it/s][A
 66%|██████▌   | 146/221 [00:49<00:15,  4.88it/s][A
 67%|██████▋   | 147/221 [00:49<00:16,  4.54it/s][A[h264 @ 0x556da3c7bdc0] mmco: unref short failure
[h264 @ 0x556da3c7bdc0] mmco: unref short failure
[h264 @ 0x556da3c7bdc0] mmco: unref short failure
[h264 @ 0x556da3c7bdc0] mmco: unref short failure

 67%|██████▋   | 148/221 [00:50<00:23,  3.15it/s][A
 67%|██████▋   | 149/221 [00:50<00:21,  3.34it/s][A
 68%|██████▊   | 150/221 [00:50<00:22,  3.21it/s][A
 68%|██████▊   | 151/221 [00:51<00:26,  2.67it/s][A
 69%|██████▉   | 152/221 [00:51<00:32,  2.13it/s][A
 69%|██████▉   | 153/221 [00:52<00:29,  2.31it/s][A
 70%|██████▉   | 154/221 [00:52<00:25,  2.67it/s][A
 70%|███████   | 155/221 [00:52<00:20,  3.21it/s][A
 71%|███████   | 156/221 [00:52<00:18,  3.60it/s][A
 71%|███████   | 157/221 [00:53<00:17,  3.69it/s][A
 71%|███████▏  | 158/221 [00:53<00:16,  3.91it/s][A
 72%|███████▏  | 160/221 [00:53<00:12,  4.70it/s][A
 73%|███████▎  | 161/221 [00:53<00:13,  4.43it/s][A
 73%|███████▎  | 162/221 [00:54<00:12,  4.87it/s][A
 74%|███████▍  | 163/221 [00:54<00:13,  4.36it/s][A
 74%|███████▍  | 164/221 [00:54<00:14,  4.06it/s][A
 75%|███████▍  | 165/221 [00:54<00:13,  4.27it/s][A
 75%|███████▌  | 166/221 [00:55<00:13,  4.09it/s][A
 76%|███████▌  | 167/221 [00:55<00:12,  4.38it/s][A
 76%|███████▌  | 168/221 [00:55<00:12,  4.14it/s][A
 76%|███████▋  | 169/221 [00:55<00:11,  4.56it/s][A
 77%|███████▋  | 170/221 [00:55<00:11,  4.49it/s][A
 77%|███████▋  | 171/221 [00:56<00:15,  3.27it/s][A
 78%|███████▊  | 172/221 [00:56<00:12,  3.96it/s][A
 78%|███████▊  | 173/221 [00:56<00:13,  3.65it/s][A
 79%|███████▊  | 174/221 [00:57<00:15,  3.13it/s][A
 79%|███████▉  | 175/221 [00:57<00:16,  2.74it/s][A[h264 @ 0x55e45cebbe00] mmco: unref short failure

 80%|███████▉  | 176/221 [00:58<00:15,  2.95it/s][A
 80%|████████  | 177/221 [00:58<00:13,  3.26it/s][A
 81%|████████  | 178/221 [00:58<00:13,  3.08it/s][A
 81%|████████  | 179/221 [00:58<00:12,  3.25it/s][A
 81%|████████▏ | 180/221 [00:59<00:12,  3.37it/s][A
 82%|████████▏ | 181/221 [00:59<00:11,  3.60it/s][A
 82%|████████▏ | 182/221 [00:59<00:09,  4.00it/s][A
 83%|████████▎ | 183/221 [00:59<00:08,  4.38it/s][A
 83%|████████▎ | 184/221 [01:00<00:10,  3.50it/s][A
 84%|████████▎ | 185/221 [01:00<00:09,  3.98it/s][A
 84%|████████▍ | 186/221 [01:00<00:08,  3.99it/s][A
 85%|████████▍ | 187/221 [01:00<00:09,  3.71it/s][A
 85%|████████▌ | 188/221 [01:01<00:09,  3.41it/s][A
 86%|████████▌ | 189/221 [01:01<00:09,  3.33it/s][A
 86%|████████▌ | 190/221 [01:01<00:09,  3.36it/s][A
 86%|████████▋ | 191/221 [01:02<00:08,  3.70it/s][A
 87%|████████▋ | 192/221 [01:02<00:07,  4.10it/s][A
 88%|████████▊ | 194/221 [01:02<00:07,  3.74it/s][A[h264 @ 0x55e4527c2280] mmco: unref short failure
[h264 @ 0x55e4527c2280] mmco: unref short failure

 88%|████████▊ | 195/221 [01:03<00:06,  3.90it/s][A
 89%|████████▊ | 196/221 [01:03<00:09,  2.68it/s][A
 89%|████████▉ | 197/221 [01:04<00:07,  3.02it/s][A
 90%|████████▉ | 198/221 [01:04<00:06,  3.38it/s][A
 90%|█████████ | 199/221 [01:04<00:05,  4.02it/s][A
 90%|█████████ | 200/221 [01:04<00:05,  3.98it/s][A
 91%|█████████ | 201/221 [01:04<00:04,  4.33it/s][A
 91%|█████████▏| 202/221 [01:05<00:05,  3.38it/s][A
 92%|█████████▏| 203/221 [01:05<00:04,  3.86it/s][A
 92%|█████████▏| 204/221 [01:06<00:06,  2.62it/s][A
 93%|█████████▎| 205/221 [01:06<00:05,  3.08it/s][A
 93%|█████████▎| 206/221 [01:06<00:05,  2.64it/s][A
 94%|█████████▎| 207/221 [01:07<00:04,  2.97it/s][A
 94%|█████████▍| 208/221 [01:07<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:07<00:03,  3.75it/s][A
 95%|█████████▌| 210/221 [01:07<00:02,  4.45it/s][A
 95%|█████████▌| 211/221 [01:07<00:02,  3.71it/s][A
 96%|█████████▌| 212/221 [01:08<00:02,  3.88it/s][A
 96%|█████████▋| 213/221 [01:08<00:02,  3.95it/s][A
 97%|█████████▋| 214/221 [01:08<00:01,  4.60it/s][A
 97%|█████████▋| 215/221 [01:08<00:01,  4.71it/s][A
 98%|█████████▊| 216/221 [01:09<00:01,  4.06it/s][A
 98%|█████████▊| 217/221 [01:09<00:01,  3.62it/s][A
 99%|█████████▊| 218/221 [01:09<00:00,  3.62it/s][A
 99%|█████████▉| 219/221 [01:09<00:00,  3.71it/s][A
100%|█████████▉| 220/221 [01:10<00:00,  3.38it/s][A
100%|██████████| 221/221 [01:10<00:00,  3.39it/s][A100%|██████████| 221/221 [01:10<00:00,  3.13it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:59,  3.71it/s][A
  1%|          | 2/221 [00:00<00:58,  3.74it/s][A
  1%|▏         | 3/221 [00:00<00:58,  3.75it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.75it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.75it/s][A
  3%|▎         | 6/221 [00:01<00:57,  3.75it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.76it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.76it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.76it/s][A
  5%|▍         | 10/221 [00:02<00:56,  3.76it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.76it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.76it/s][A
  6%|▌         | 13/221 [00:03<00:55,  3.76it/s][A
  6%|▋         | 14/221 [00:03<00:55,  3.76it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.76it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.76it/s][A
  8%|▊         | 17/221 [00:04<00:54,  3.76it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.77it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.77it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.77it/s][A
 10%|▉         | 21/221 [00:05<00:53,  3.77it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.77it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.77it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.77it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.78it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.78it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 28/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.78it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.78it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.78it/s][A
 14%|█▍        | 32/221 [00:08<00:50,  3.78it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.78it/s][A
 15%|█▌        | 34/221 [00:09<00:49,  3.78it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.78it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.78it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.78it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.78it/s][A
 19%|█▉        | 43/221 [00:11<00:47,  3.78it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.78it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.78it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.78it/s][A
 21%|██▏       | 47/221 [00:12<00:46,  3.78it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.78it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.78it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.78it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.78it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.78it/s][A
 24%|██▍       | 53/221 [00:14<00:44,  3.78it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.78it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.78it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.78it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.78it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.78it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.78it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.78it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.78it/s][A
 28%|██▊       | 62/221 [00:16<00:42,  3.78it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.78it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.78it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.78it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.78it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.78it/s][A
 31%|███       | 68/221 [00:18<00:40,  3.78it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.78it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.78it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.78it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.78it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.78it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.78it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.78it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.78it/s][A
 37%|███▋      | 81/221 [00:21<00:37,  3.78it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.78it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.78it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.78it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:23<00:35,  3.78it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.78it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.78it/s][A
 43%|████▎     | 96/221 [00:25<00:33,  3.78it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.78it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.78it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.78it/s][A
 45%|████▌     | 100/221 [00:26<00:32,  3.78it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.78it/s][A
 46%|████▌     | 102/221 [00:27<00:31,  3.78it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.78it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 106/221 [00:28<00:30,  3.78it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.78it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.78it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.78it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.78it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.78it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.78it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.78it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 115/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.78it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.78it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.78it/s][A
 55%|█████▍    | 121/221 [00:32<00:26,  3.78it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.78it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.78it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.78it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.78it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.78it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 134/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 140/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.78it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.78it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.78it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.78it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.78it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.78it/s][A
 70%|███████   | 155/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.78it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.78it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.78it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.78it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.78it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.78it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.78it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.78it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.78it/s][A
 76%|███████▌  | 168/221 [00:44<00:14,  3.78it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.78it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.78it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.78it/s][A
 79%|███████▊  | 174/221 [00:46<00:12,  3.78it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.78it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.78it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.78it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.78it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.78it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.78it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.78it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.78it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 189/221 [00:50<00:08,  3.78it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.78it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 193/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [00:56<00:02,  3.78it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.78it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.78it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.78it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.78it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.78it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.78it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.78it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:45,  4.81it/s][A
  1%|          | 2/221 [00:00<00:55,  3.93it/s][A
  1%|▏         | 3/221 [00:00<00:53,  4.08it/s][A
  2%|▏         | 4/221 [00:00<00:50,  4.28it/s][A
  2%|▏         | 5/221 [00:01<00:45,  4.73it/s][A
  3%|▎         | 6/221 [00:01<00:37,  5.75it/s][A
  3%|▎         | 7/221 [00:01<00:40,  5.23it/s][A
  4%|▎         | 8/221 [00:01<00:41,  5.09it/s][A
  4%|▍         | 9/221 [00:01<00:40,  5.17it/s][A
  5%|▍         | 10/221 [00:02<01:15,  2.80it/s][A
  5%|▍         | 11/221 [00:02<01:04,  3.28it/s][A
  5%|▌         | 12/221 [00:02<00:52,  3.97it/s][A
  6%|▌         | 13/221 [00:03<01:20,  2.57it/s][A
  7%|▋         | 15/221 [00:03<00:56,  3.62it/s][A
  7%|▋         | 16/221 [00:04<00:58,  3.49it/s][A
  8%|▊         | 17/221 [00:04<01:24,  2.42it/s][A
  8%|▊         | 18/221 [00:05<01:14,  2.74it/s][A
  9%|▊         | 19/221 [00:05<01:05,  3.08it/s][A
  9%|▉         | 20/221 [00:05<00:54,  3.71it/s][A
 10%|▉         | 21/221 [00:05<00:44,  4.48it/s][A
 10%|▉         | 22/221 [00:05<00:43,  4.53it/s][A
 10%|█         | 23/221 [00:05<00:36,  5.38it/s][A
 11%|█         | 24/221 [00:06<00:37,  5.24it/s][A
 11%|█▏        | 25/221 [00:06<00:37,  5.27it/s][A
 12%|█▏        | 26/221 [00:06<00:40,  4.78it/s][A
 13%|█▎        | 28/221 [00:07<00:40,  4.80it/s][A
 13%|█▎        | 29/221 [00:07<00:38,  5.00it/s][A
 14%|█▎        | 30/221 [00:07<00:41,  4.64it/s][A
 14%|█▍        | 31/221 [00:07<00:38,  4.94it/s][A
 15%|█▍        | 33/221 [00:07<00:33,  5.68it/s][A
 16%|█▌        | 35/221 [00:08<00:31,  5.90it/s][A
 16%|█▋        | 36/221 [00:08<00:38,  4.83it/s][A
 17%|█▋        | 37/221 [00:08<00:39,  4.62it/s][A
 17%|█▋        | 38/221 [00:09<00:45,  4.02it/s][A
 18%|█▊        | 39/221 [00:09<00:43,  4.20it/s][A
 18%|█▊        | 40/221 [00:09<00:41,  4.40it/s][A
 19%|█▊        | 41/221 [00:09<00:35,  5.05it/s][A
 19%|█▉        | 42/221 [00:10<00:52,  3.44it/s][A
 19%|█▉        | 43/221 [00:10<01:01,  2.88it/s][A
 20%|█▉        | 44/221 [00:11<01:00,  2.91it/s][A
 20%|██        | 45/221 [00:11<00:52,  3.33it/s][A
 21%|██        | 46/221 [00:11<00:43,  4.02it/s][A
 21%|██▏       | 47/221 [00:11<00:45,  3.82it/s][A
 22%|██▏       | 48/221 [00:11<00:38,  4.52it/s][A
 22%|██▏       | 49/221 [00:12<00:37,  4.56it/s][A
 23%|██▎       | 50/221 [00:12<00:38,  4.39it/s][A
 23%|██▎       | 51/221 [00:12<00:33,  5.10it/s][A
 24%|██▎       | 52/221 [00:12<00:32,  5.15it/s][A
 24%|██▍       | 53/221 [00:12<00:28,  5.84it/s][A
 24%|██▍       | 54/221 [00:13<00:57,  2.91it/s][A
 25%|██▍       | 55/221 [00:13<00:55,  2.98it/s][A
 25%|██▌       | 56/221 [00:13<00:46,  3.58it/s][A
 26%|██▌       | 57/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:14<00:42,  3.81it/s][A
 27%|██▋       | 59/221 [00:14<00:42,  3.82it/s][A
 27%|██▋       | 60/221 [00:15<00:49,  3.25it/s][A
 28%|██▊       | 61/221 [00:15<00:43,  3.68it/s][A
 28%|██▊       | 62/221 [00:15<00:43,  3.66it/s][A
 29%|██▊       | 63/221 [00:15<00:38,  4.14it/s][A
 29%|██▉       | 64/221 [00:16<00:42,  3.70it/s][A
 29%|██▉       | 65/221 [00:16<00:35,  4.41it/s][A
 30%|██▉       | 66/221 [00:16<00:50,  3.08it/s][A
 30%|███       | 67/221 [00:17<00:53,  2.91it/s][A
 31%|███       | 68/221 [00:17<00:44,  3.47it/s][A
 31%|███       | 69/221 [00:17<01:03,  2.39it/s][A
 32%|███▏      | 70/221 [00:18<00:51,  2.95it/s][A
 32%|███▏      | 71/221 [00:18<00:43,  3.41it/s][A
 33%|███▎      | 72/221 [00:18<00:48,  3.09it/s][A
 33%|███▎      | 73/221 [00:19<00:54,  2.71it/s][A
 34%|███▍      | 75/221 [00:19<00:40,  3.59it/s][A
 34%|███▍      | 76/221 [00:19<00:36,  4.01it/s][A
 35%|███▍      | 77/221 [00:19<00:33,  4.29it/s][A
 35%|███▌      | 78/221 [00:19<00:29,  4.93it/s][A
 36%|███▌      | 79/221 [00:20<00:44,  3.20it/s][A
 36%|███▌      | 80/221 [00:20<00:39,  3.53it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.84it/s][A
 37%|███▋      | 82/221 [00:21<00:38,  3.62it/s][A
 38%|███▊      | 83/221 [00:21<00:45,  3.02it/s][A
 38%|███▊      | 84/221 [00:21<00:36,  3.71it/s][A
 38%|███▊      | 85/221 [00:22<00:31,  4.39it/s][A
 39%|███▉      | 86/221 [00:22<00:26,  5.03it/s][A
 39%|███▉      | 87/221 [00:23<00:52,  2.54it/s][A
 40%|███▉      | 88/221 [00:23<00:55,  2.38it/s][A
 40%|████      | 89/221 [00:23<00:48,  2.75it/s][A
 41%|████      | 90/221 [00:24<00:44,  2.93it/s][A
 41%|████      | 91/221 [00:24<00:37,  3.48it/s][A
 42%|████▏     | 92/221 [00:24<00:33,  3.83it/s][A
 42%|████▏     | 93/221 [00:25<00:54,  2.37it/s][A
 43%|████▎     | 94/221 [00:25<00:49,  2.58it/s][A
 43%|████▎     | 95/221 [00:25<00:45,  2.76it/s][A
 43%|████▎     | 96/221 [00:25<00:37,  3.31it/s][A
 44%|████▍     | 97/221 [00:26<00:34,  3.62it/s][A
 44%|████▍     | 98/221 [00:26<00:33,  3.67it/s][A
 45%|████▌     | 100/221 [00:26<00:27,  4.48it/s][A
 46%|████▌     | 101/221 [00:27<00:30,  3.96it/s][A
 46%|████▌     | 102/221 [00:27<00:43,  2.76it/s][A
 47%|████▋     | 103/221 [00:27<00:35,  3.32it/s][A
 47%|████▋     | 104/221 [00:28<00:28,  4.06it/s][A
 48%|████▊     | 105/221 [00:28<00:27,  4.16it/s][A
 48%|████▊     | 106/221 [00:28<00:38,  3.00it/s][A
 48%|████▊     | 107/221 [00:29<00:33,  3.39it/s][A
 49%|████▉     | 108/221 [00:29<00:31,  3.56it/s][A
 49%|████▉     | 109/221 [00:29<00:26,  4.23it/s][A
 50%|████▉     | 110/221 [00:29<00:25,  4.37it/s][A
 50%|█████     | 111/221 [00:29<00:25,  4.27it/s][A
 51%|█████     | 112/221 [00:30<00:28,  3.87it/s][A
 51%|█████     | 113/221 [00:30<00:26,  4.02it/s][A
 52%|█████▏    | 115/221 [00:30<00:20,  5.16it/s][A
 52%|█████▏    | 116/221 [00:30<00:23,  4.54it/s][A
 53%|█████▎    | 117/221 [00:31<00:24,  4.31it/s][A
 53%|█████▎    | 118/221 [00:31<00:24,  4.22it/s][A
 54%|█████▍    | 119/221 [00:31<00:31,  3.26it/s][A
 54%|█████▍    | 120/221 [00:32<00:28,  3.55it/s][A
 55%|█████▌    | 122/221 [00:32<00:21,  4.57it/s][A
 56%|█████▌    | 123/221 [00:32<00:22,  4.26it/s][A
 56%|█████▌    | 124/221 [00:33<00:24,  3.94it/s][A
 57%|█████▋    | 125/221 [00:33<00:28,  3.39it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.66it/s][A
 57%|█████▋    | 127/221 [00:34<00:30,  3.11it/s][A
 58%|█████▊    | 128/221 [00:34<00:27,  3.33it/s][A
 59%|█████▉    | 130/221 [00:34<00:18,  4.89it/s][A
 59%|█████▉    | 131/221 [00:34<00:17,  5.18it/s][A
 60%|█████▉    | 132/221 [00:35<00:20,  4.45it/s][A
 60%|██████    | 133/221 [00:35<00:21,  4.18it/s][A
 61%|██████    | 134/221 [00:35<00:24,  3.61it/s][A
 61%|██████    | 135/221 [00:36<00:27,  3.13it/s][A
 62%|██████▏   | 136/221 [00:36<00:25,  3.30it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.66it/s][A
 62%|██████▏   | 138/221 [00:36<00:24,  3.35it/s][A
 63%|██████▎   | 139/221 [00:37<00:29,  2.82it/s][A
 63%|██████▎   | 140/221 [00:37<00:26,  3.07it/s][A
 64%|██████▍   | 141/221 [00:37<00:24,  3.26it/s][A
 64%|██████▍   | 142/221 [00:38<00:21,  3.73it/s][A
 65%|██████▍   | 143/221 [00:38<00:33,  2.30it/s][A
 65%|██████▌   | 144/221 [00:39<00:35,  2.17it/s][A
 66%|██████▌   | 146/221 [00:39<00:21,  3.51it/s][A
 67%|██████▋   | 147/221 [00:39<00:21,  3.45it/s][A
 67%|██████▋   | 148/221 [00:40<00:22,  3.26it/s][A
 67%|██████▋   | 149/221 [00:40<00:23,  3.09it/s][A
 68%|██████▊   | 150/221 [00:40<00:22,  3.20it/s][A
 68%|██████▊   | 151/221 [00:41<00:22,  3.04it/s][A
 69%|██████▉   | 152/221 [00:42<00:43,  1.57it/s][A
 69%|██████▉   | 153/221 [00:42<00:34,  1.98it/s][A
 70%|██████▉   | 154/221 [00:43<00:27,  2.44it/s][A
 70%|███████   | 155/221 [00:43<00:28,  2.33it/s][A
 71%|███████   | 156/221 [00:44<00:29,  2.19it/s][A
 71%|███████   | 157/221 [00:44<00:25,  2.54it/s][A
 71%|███████▏  | 158/221 [00:44<00:22,  2.83it/s][A
 72%|███████▏  | 159/221 [00:44<00:17,  3.59it/s][A
 72%|███████▏  | 160/221 [00:44<00:15,  3.90it/s][A
 73%|███████▎  | 161/221 [00:45<00:14,  4.12it/s][A
 73%|███████▎  | 162/221 [00:45<00:12,  4.58it/s][A
 74%|███████▍  | 163/221 [00:45<00:12,  4.48it/s][A
 74%|███████▍  | 164/221 [00:45<00:11,  4.81it/s][A
 75%|███████▍  | 165/221 [00:45<00:13,  4.27it/s][A
 75%|███████▌  | 166/221 [00:46<00:13,  4.16it/s][A
 76%|███████▌  | 168/221 [00:46<00:11,  4.78it/s][A
 76%|███████▋  | 169/221 [00:46<00:10,  5.00it/s][A
 77%|███████▋  | 170/221 [00:47<00:12,  4.03it/s][A
 77%|███████▋  | 171/221 [00:47<00:12,  4.07it/s][A
 78%|███████▊  | 173/221 [00:47<00:12,  3.75it/s][A
 79%|███████▊  | 174/221 [00:48<00:14,  3.21it/s][A
 79%|███████▉  | 175/221 [00:48<00:14,  3.07it/s][A
 80%|███████▉  | 176/221 [00:48<00:12,  3.63it/s][A
 80%|████████  | 177/221 [00:49<00:10,  4.11it/s][A
 81%|████████  | 178/221 [00:49<00:10,  4.19it/s][A
 81%|████████  | 179/221 [00:49<00:11,  3.74it/s][A
 81%|████████▏ | 180/221 [00:49<00:09,  4.13it/s][A
 82%|████████▏ | 181/221 [00:49<00:08,  4.54it/s][A
 82%|████████▏ | 182/221 [00:50<00:09,  4.29it/s][A
 83%|████████▎ | 183/221 [00:50<00:08,  4.46it/s][A
 83%|████████▎ | 184/221 [00:50<00:08,  4.58it/s][A
 84%|████████▎ | 185/221 [00:50<00:06,  5.31it/s][A
 84%|████████▍ | 186/221 [00:51<00:09,  3.59it/s][A
 85%|████████▍ | 187/221 [00:51<00:10,  3.38it/s][A
 85%|████████▌ | 188/221 [00:51<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:52<00:08,  3.64it/s][A
 86%|████████▌ | 190/221 [00:52<00:09,  3.26it/s][A
 86%|████████▋ | 191/221 [00:52<00:08,  3.65it/s][A
 87%|████████▋ | 192/221 [00:52<00:08,  3.60it/s][A
 88%|████████▊ | 194/221 [00:53<00:07,  3.40it/s][A
 88%|████████▊ | 195/221 [00:53<00:06,  3.73it/s][A
 89%|████████▊ | 196/221 [00:54<00:07,  3.35it/s][A
 89%|████████▉ | 197/221 [00:54<00:07,  3.24it/s][A
 90%|████████▉ | 198/221 [00:54<00:07,  2.97it/s][A
 90%|█████████ | 199/221 [00:55<00:06,  3.43it/s][A
 90%|█████████ | 200/221 [00:55<00:06,  3.35it/s][A
 91%|█████████ | 201/221 [00:55<00:05,  3.69it/s][A
 91%|█████████▏| 202/221 [00:55<00:05,  3.67it/s][A
 92%|█████████▏| 203/221 [00:56<00:04,  3.89it/s][A
 92%|█████████▏| 204/221 [00:56<00:06,  2.78it/s][A
 93%|█████████▎| 205/221 [00:56<00:04,  3.41it/s][A
 93%|█████████▎| 206/221 [00:57<00:04,  3.36it/s][A
 94%|█████████▍| 208/221 [00:57<00:03,  4.23it/s][A
 95%|█████████▍| 209/221 [00:57<00:03,  3.65it/s][A
 95%|█████████▌| 211/221 [00:58<00:02,  3.89it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  3.90it/s][A
 96%|█████████▋| 213/221 [00:58<00:01,  4.24it/s][A
 97%|█████████▋| 214/221 [00:59<00:02,  3.34it/s][A
 97%|█████████▋| 215/221 [00:59<00:01,  3.55it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  3.10it/s][A
 98%|█████████▊| 217/221 [01:00<00:01,  3.01it/s][A
 99%|█████████▊| 218/221 [01:00<00:00,  3.01it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  2.83it/s][A
100%|█████████▉| 220/221 [01:01<00:00,  3.23it/s][A
100%|██████████| 221/221 [01:01<00:00,  3.53it/s][A100%|██████████| 221/221 [01:01<00:00,  3.60it/s]
09/09/2024 17:03:00 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 299--===========

09/09/2024 17:03:00 - INFO - __main__ -   {'area_r1': 41.4, 'area_recall': '41.4/67.1/76.6', 'area_ravg': 61.7}
09/09/2024 17:03:00 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 299--===========

09/09/2024 17:03:00 - INFO - __main__ -   {'forward_r1': 35.4, 'forward_recall': '35.4/61.0/71.7', 'forward_ravg': 56.0}
09/09/2024 17:03:00 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 299--===========

09/09/2024 17:03:00 - INFO - __main__ -   {'area_video_r1': 40.6, 'area_video_recall': '40.6/66.7/79.0', 'area_video_ravg': 62.1}
09/09/2024 17:03:00 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 299=======

09/09/2024 17:03:00 - INFO - __main__ -   {'area_video_r1': 40.6, 'area_video_recall': '40.6/66.7/79.0', 'area_video_ravg': 62.1}
09/09/2024 17:03:00 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 299--===========

09/09/2024 17:03:00 - INFO - __main__ -   {'area_video_r1': 50.2, 'area_video_recall': '50.2/74.0/81.8', 'area_video_ravg': 68.7, 'area_video_back_r1': 49.0, 'area_video_back_recall': '49.0/72.5/79.6', 'area_video_back_ravg': 67.0}
09/09/2024 17:03:00 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 17:03:00 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 17:03:00 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 299--===========

09/09/2024 17:03:00 - INFO - __main__ -   {'video_r1': 41.9, 'video_recall': '41.9/69.6/80.5', 'video_ravg': 64.0}
09/09/2024 17:03:00 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 17:03:00 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 17:03:00 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 299--===========

09/09/2024 17:03:00 - INFO - __main__ -   {'video_r1': 50.8, 'video_recall': '50.8/75.9/82.7', 'video_ravg': 69.8}
09/09/2024 17:03:00 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 249=======

09/09/2024 17:03:00 - INFO - __main__ -   {'video_r1': 52.1, 'video_recall': '52.1/76.0/82.5', 'video_ravg': 70.2}
09/09/2024 17:03:27 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.6224582195281982, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.02506989613175392, 'loss_ret%tv%ta--finetune_area/loss_area': 1.4573795795440674, 'loss_ret%tv%ta--finetune_area/total_loss': 3.104907751083374}
[h264 @ 0x55b73515fa00] mmco: unref short failure
[h264 @ 0x55b73515fa00] mmco: unref short failure
[h264 @ 0x55b73515fa00] mmco: unref short failure
[h264 @ 0x55b73515fa00] mmco: unref short failure
[h264 @ 0x55b73515fa00] mmco: unref short failure
[h264 @ 0x55b73515fa00] mmco: unref short failure
 15%|█▌        | 300/1945 [1:38:01<56:15:57, 123.14s/it] 15%|█▌        | 301/1945 [1:38:05<39:56:04, 87.45s/it] [h264 @ 0x556d9a340680] mmco: unref short failure
 16%|█▌        | 302/1945 [1:38:10<28:33:54, 62.59s/it] 16%|█▌        | 303/1945 [1:38:15<20:44:54, 45.49s/it][h264 @ 0x556da064f980] mmco: unref short failure
 16%|█▌        | 304/1945 [1:38:21<15:21:36, 33.70s/it][h264 @ 0x556dbb8cf0c0] mmco: unref short failure
 16%|█▌        | 305/1945 [1:38:27<11:32:59, 25.35s/it][h264 @ 0x55b7383fa400] mmco: unref short failure
 16%|█▌        | 306/1945 [1:38:34<9:01:35, 19.83s/it] [h264 @ 0x556db1b45d00] mmco: unref short failure
[h264 @ 0x556da88f7500] mmco: unref short failure
[h264 @ 0x556da88f7500] mmco: unref short failure
[h264 @ 0x556da4d50340] mmco: unref short failure
[h264 @ 0x556da4d50340] mmco: unref short failure
[h264 @ 0x556da4d50340] mmco: unref short failure
 16%|█▌        | 307/1945 [1:38:41<7:18:01, 16.04s/it][h264 @ 0x55b722e57140] mmco: unref short failure
[h264 @ 0x55b72e3a3a80] mmco: unref short failure
[h264 @ 0x55b72e3a3a80] mmco: unref short failure
 16%|█▌        | 308/1945 [1:38:49<6:06:39, 13.44s/it][h264 @ 0x55e46475e500] mmco: unref short failure
[h264 @ 0x556da253f180] mmco: unref short failure
 16%|█▌        | 309/1945 [1:38:56<5:13:39, 11.50s/it][h264 @ 0x55e44945f000] mmco: unref short failure
[h264 @ 0x55e44945f000] mmco: unref short failure
[h264 @ 0x556da7b17cc0] mmco: unref short failure
[h264 @ 0x556d9efcddc0] mmco: unref short failure
 16%|█▌        | 310/1945 [1:39:04<4:43:09, 10.39s/it][h264 @ 0x55e452b58a40] mmco: unref short failure
[h264 @ 0x55e452b58a40] mmco: unref short failure
[h264 @ 0x55e452b58a40] mmco: unref short failure
[h264 @ 0x55e452b58a40] mmco: unref short failure
[h264 @ 0x55e452b58a40] mmco: unref short failure
[h264 @ 0x55e452b58a40] mmco: unref short failure
 16%|█▌        | 311/1945 [1:39:11<4:16:05,  9.40s/it][h264 @ 0x55b71c68f9c0] mmco: unref short failure
[h264 @ 0x55b71c68f9c0] mmco: unref short failure
[h264 @ 0x556db0fe58c0] mmco: unref short failure
[h264 @ 0x55b732fbf040] mmco: unref short failure
[h264 @ 0x55b732fbf040] mmco: unref short failure
 16%|█▌        | 312/1945 [1:39:18<3:58:28,  8.76s/it] 16%|█▌        | 313/1945 [1:39:25<3:47:15,  8.36s/it][h264 @ 0x55b736eb1900] mmco: unref short failure
[h264 @ 0x556da4192cc0] mmco: unref short failure
[h264 @ 0x55e44c981300] mmco: unref short failure
 16%|█▌        | 314/1945 [1:39:33<3:39:48,  8.09s/it][h264 @ 0x55b72fbee580] mmco: unref short failure
 16%|█▌        | 315/1945 [1:39:42<3:48:32,  8.41s/it] 16%|█▌        | 316/1945 [1:39:50<3:48:28,  8.42s/it][h264 @ 0x556dadedb1c0] mmco: unref short failure
[h264 @ 0x55e44c9032c0] mmco: unref short failure
[h264 @ 0x55e44c9032c0] mmco: unref short failure
 16%|█▋        | 317/1945 [1:39:58<3:42:52,  8.21s/it][h264 @ 0x55e4499629c0] mmco: unref short failure
[h264 @ 0x55e46c1bb380] mmco: unref short failure
[h264 @ 0x55e46c1bb380] mmco: unref short failure
[h264 @ 0x55e46c1bb380] mmco: unref short failure
[h264 @ 0x55e46c1bb380] mmco: unref short failure
[h264 @ 0x556db102b000] mmco: unref short failure
[h264 @ 0x556db102b000] mmco: unref short failure
 16%|█▋        | 318/1945 [1:40:06<3:40:24,  8.13s/it][h264 @ 0x556d9f405c00] mmco: unref short failure
[h264 @ 0x556d9f405c00] mmco: unref short failure
 16%|█▋        | 319/1945 [1:40:13<3:32:21,  7.84s/it][h264 @ 0x556db9b1f880] mmco: unref short failure
[h264 @ 0x55e46a0f8580] mmco: unref short failure
[h264 @ 0x55b71b427800] mmco: unref short failure
[h264 @ 0x55b71b427800] mmco: unref short failure
 16%|█▋        | 320/1945 [1:40:23<3:48:51,  8.45s/it][h264 @ 0x556dbb409a00] mmco: unref short failure
[h264 @ 0x556dbb409a00] mmco: unref short failure
[h264 @ 0x556d9032cf00] mmco: unref short failure
[h264 @ 0x556d9032cf00] mmco: unref short failure
[h264 @ 0x556da4924080] mmco: unref short failure
[h264 @ 0x556da4924080] mmco: unref short failure
[h264 @ 0x55b72a1ac800] mmco: unref short failure
[h264 @ 0x55b72a1ac800] mmco: unref short failure
[h264 @ 0x55b71b427800] mmco: unref short failure
[h264 @ 0x55b71b427800] mmco: unref short failure
[h264 @ 0x556d9acefdc0] mmco: unref short failure
 17%|█▋        | 321/1945 [1:40:39<4:48:06, 10.64s/it][h264 @ 0x55e447d4bd00] mmco: unref short failure
[h264 @ 0x55e447d4bd00] mmco: unref short failure
 17%|█▋        | 322/1945 [1:40:46<4:22:08,  9.69s/it][h264 @ 0x556d9c9c0bc0] mmco: unref short failure
 17%|█▋        | 323/1945 [1:40:54<4:09:41,  9.24s/it][h264 @ 0x55e460cb4340] mmco: unref short failure
[h264 @ 0x55e460cb4340] mmco: unref short failure
[h264 @ 0x55b718daedc0] mmco: unref short failure
[h264 @ 0x556d8e1b1c40] mmco: unref short failure
[h264 @ 0x55b718daedc0] mmco: unref short failure
[h264 @ 0x556d8e1b1c40] mmco: unref short failure
[h264 @ 0x556d9df60a40] mmco: unref short failure
[h264 @ 0x556d8ea839c0] mmco: unref short failure
[h264 @ 0x556d8ea839c0] mmco: unref short failure
[h264 @ 0x55e45ad2aa40] mmco: unref short failure
[h264 @ 0x556d9414f8c0] mmco: unref short failure
[h264 @ 0x55b7175bfd80] mmco: unref short failure
[h264 @ 0x55b7175bfd80] mmco: unref short failure
[h264 @ 0x556d9e7ce640] mmco: unref short failure
[h264 @ 0x55b72c6d2d00] mmco: unref short failure
[h264 @ 0x55b72c6d2d00] mmco: unref short failure
[h264 @ 0x556d9bdf8700] mmco: unref short failure
[h264 @ 0x55e4612e5a00] mmco: unref short failure
[h264 @ 0x55e4612e5a00] mmco: unref short failure
[h264 @ 0x556da810a840] mmco: unref short failure
[h264 @ 0x556da810a840] mmco: unref short failure
[h264 @ 0x556da810a840] mmco: unref short failure
[h264 @ 0x556d9f9a6980] mmco: unref short failure
[h264 @ 0x556d9f9a6980] mmco: unref short failure
[h264 @ 0x55e45a10bb80] mmco: unref short failure
 17%|█▋        | 324/1945 [1:41:43<9:26:14, 20.96s/it][h264 @ 0x556da8e50c00] mmco: unref short failure
[h264 @ 0x556da2cb9f00] mmco: unref short failure
[h264 @ 0x556da2cb9f00] mmco: unref short failure
[h264 @ 0x556da4cc0dc0] mmco: unref short failure
[h264 @ 0x55b738787880] mmco: unref short failure
[h264 @ 0x55b738787880] mmco: unref short failure
 17%|█▋        | 325/1945 [1:42:09<10:04:24, 22.39s/it][h264 @ 0x55e44d6b16c0] mmco: unref short failure
[h264 @ 0x55e44d6b16c0] mmco: unref short failure
 17%|█▋        | 326/1945 [1:42:16<8:05:59, 18.01s/it] [h264 @ 0x55e44a498140] mmco: unref short failure
[h264 @ 0x55e44a498140] mmco: unref short failure
[h264 @ 0x556d9013cc80] mmco: unref short failure
[h264 @ 0x556d9013cc80] mmco: unref short failure
[h264 @ 0x556da6f1d680] mmco: unref short failure
[h264 @ 0x556da88b5480] mmco: unref short failure
[h264 @ 0x556da88b5480] mmco: unref short failure
 17%|█▋        | 327/1945 [1:42:23<6:34:50, 14.64s/it][h264 @ 0x55e462364ec0] mmco: unref short failure
[h264 @ 0x556dbd0571c0] mmco: unref short failure
 17%|█▋        | 328/1945 [1:42:31<5:43:12, 12.73s/it][h264 @ 0x55b7330e4100] mmco: unref short failure
 17%|█▋        | 329/1945 [1:42:49<6:19:15, 14.08s/it][h264 @ 0x55e44d321a40] mmco: unref short failure
[h264 @ 0x55e44d321a40] mmco: unref short failure
[h264 @ 0x55e44d321a40] mmco: unref short failure
[h264 @ 0x55e44d321a40] mmco: unref short failure
 17%|█▋        | 330/1945 [1:42:56<5:22:12, 11.97s/it][h264 @ 0x55e44a813540] mmco: unref short failure
 17%|█▋        | 331/1945 [1:43:04<4:50:32, 10.80s/it][h264 @ 0x55b7317d9700] mmco: unref short failure
[h264 @ 0x55b7317d9700] mmco: unref short failure
[h264 @ 0x556da7ff1640] mmco: unref short failure
[h264 @ 0x556da7ff1640] mmco: unref short failure
[h264 @ 0x55b7315f8d40] mmco: unref short failure
[h264 @ 0x556dad7e6100] mmco: unref short failure
[h264 @ 0x556d8fd31b00] mmco: unref short failure
[h264 @ 0x556da4da79c0] mmco: unref short failure
[h264 @ 0x556da4da79c0] mmco: unref short failure
[h264 @ 0x556da4da79c0] mmco: unref short failure
[h264 @ 0x556da4da79c0] mmco: unref short failure
[h264 @ 0x556da4da79c0] mmco: unref short failure
[h264 @ 0x556da4da79c0] mmco: unref short failure
[h264 @ 0x556da4da79c0] mmco: unref short failure
[h264 @ 0x556da4da79c0] mmco: unref short failure
[h264 @ 0x556da4da79c0] mmco: unref short failure
[h264 @ 0x556da6f1d680] mmco: unref short failure
[h264 @ 0x556da6f1d680] mmco: unref short failure
[h264 @ 0x55b722cd7340] mmco: unref short failure
[h264 @ 0x55b722cd7340] mmco: unref short failure
[h264 @ 0x556da6d92fc0] mmco: unref short failure
[h264 @ 0x55b71849eac0] mmco: unref short failure
[h264 @ 0x55b71849eac0] mmco: unref short failure
[h264 @ 0x55b718600100] mmco: unref short failure
[h264 @ 0x55e463eaf840] mmco: unref short failure
[h264 @ 0x55e463eaf840] mmco: unref short failure
[h264 @ 0x55e463eaf840] mmco: unref short failure
[h264 @ 0x556d9774e5c0] mmco: unref short failure
[h264 @ 0x556d9774e5c0] mmco: unref short failure
[h264 @ 0x556d9774e5c0] mmco: unref short failure
[h264 @ 0x556d9774e5c0] mmco: unref short failure
[h264 @ 0x55b71733c280] mmco: unref short failure
 17%|█▋        | 332/1945 [1:43:51<9:43:06, 21.69s/it][h264 @ 0x55e44941e6c0] mmco: unref short failure
[h264 @ 0x55e45a3a7080] mmco: unref short failure
[h264 @ 0x55e45a3a7080] mmco: unref short failure
 17%|█▋        | 333/1945 [1:44:08<9:04:54, 20.28s/it] 17%|█▋        | 334/1945 [1:44:16<7:25:18, 16.59s/it][h264 @ 0x55b716177680] mmco: unref short failure
[h264 @ 0x556d8e39fec0] mmco: unref short failure
[h264 @ 0x556d8e39fec0] mmco: unref short failure
[h264 @ 0x556db92c7d00] mmco: unref short failure
[h264 @ 0x556db92c7d00] mmco: unref short failure
 17%|█▋        | 335/1945 [1:44:32<7:24:16, 16.56s/it] 17%|█▋        | 336/1945 [1:44:40<6:10:06, 13.80s/it][h264 @ 0x556d8e940f80] mmco: unref short failure
[h264 @ 0x556d90e89200] mmco: unref short failure
[h264 @ 0x556d951439c0] mmco: unref short failure
[h264 @ 0x556d951439c0] mmco: unref short failure
[h264 @ 0x556d9fc78a80] mmco: unref short failure
 17%|█▋        | 337/1945 [1:44:55<6:20:35, 14.20s/it][h264 @ 0x556d9fc78a80] mmco: unref short failure
 17%|█▋        | 338/1945 [1:45:02<5:24:16, 12.11s/it][h264 @ 0x556da88aabc0] mmco: unref short failure
[h264 @ 0x556d9877be00] mmco: unref short failure
[h264 @ 0x556d9877be00] mmco: unref short failure
[h264 @ 0x556d8e940f80] mmco: unref short failure
[h264 @ 0x556d8e940f80] mmco: unref short failure
 17%|█▋        | 339/1945 [1:45:10<4:48:18, 10.77s/it][h264 @ 0x55e467655900] mmco: unref short failure
[h264 @ 0x556db0fe58c0] mmco: unref short failure
[h264 @ 0x556db0fe58c0] mmco: unref short failure
[h264 @ 0x556db6c54680] mmco: unref short failure
[h264 @ 0x556db6c54680] mmco: unref short failure
[h264 @ 0x556db6c54680] mmco: unref short failure
[h264 @ 0x556db6c54680] mmco: unref short failure
[h264 @ 0x55e45ceb8c40] mmco: unref short failure
[h264 @ 0x55e45ceb8c40] mmco: unref short failure
[h264 @ 0x556d94391180] mmco: unref short failure
[h264 @ 0x55e463e18040] mmco: unref short failure
[h264 @ 0x55e463e18040] mmco: unref short failure
[h264 @ 0x556d9be03380] mmco: unref short failure
[h264 @ 0x556d98d82740] mmco: unref short failure
[h264 @ 0x556d98d82740] mmco: unref short failure
[h264 @ 0x556db9587740] mmco: unref short failure
[h264 @ 0x556db9587740] mmco: unref short failure
[h264 @ 0x55b71d312840] mmco: unref short failure
[h264 @ 0x556da2cb9f00] mmco: unref short failure
[h264 @ 0x556da2cb9f00] mmco: unref short failure
[h264 @ 0x556da2cb9f00] mmco: unref short failure
[h264 @ 0x556da2cb9f00] mmco: unref short failure
[h264 @ 0x55b72ed78c80] mmco: unref short failure
[h264 @ 0x55e461df9e80] mmco: unref short failure
[h264 @ 0x55e461df9e80] mmco: unref short failure
[h264 @ 0x556db9f8ab00] mmco: unref short failure
[h264 @ 0x556db9f8ab00] mmco: unref short failure
[h264 @ 0x55b730a174c0] mmco: unref short failure
[h264 @ 0x55b730a174c0] mmco: unref short failure
[h264 @ 0x556da12dd000] mmco: unref short failure
 17%|█▋        | 340/1945 [1:45:51<8:56:10, 20.04s/it][h264 @ 0x55b72f9bf740] mmco: unref short failure
[h264 @ 0x55b72f9bf740] mmco: unref short failure
[h264 @ 0x556d8fe43c80] mmco: unref short failure
[h264 @ 0x55e46cf61ec0] mmco: unref short failure
 18%|█▊        | 341/1945 [1:46:09<8:36:13, 19.31s/it] 18%|█▊        | 342/1945 [1:46:16<6:57:52, 15.64s/it][h264 @ 0x556da40b6600] mmco: unref short failure
[h264 @ 0x556dbc6c3f00] mmco: unref short failure
[h264 @ 0x556dac3c3840] mmco: unref short failure
[h264 @ 0x556da40b6600] mmco: unref short failure
[h264 @ 0x556da40b6600] mmco: unref short failure
[h264 @ 0x55e44bb99dc0] mmco: unref short failure
[h264 @ 0x55e44bb99dc0] mmco: unref short failure
 18%|█▊        | 343/1945 [1:46:30<6:46:42, 15.23s/it] 18%|█▊        | 344/1945 [1:46:38<5:44:21, 12.91s/it][h264 @ 0x55e4666a6f40] mmco: unref short failure
[h264 @ 0x55e4666a6f40] mmco: unref short failure
[h264 @ 0x556dab4c6340] mmco: unref short failure
[h264 @ 0x556dab4c6340] mmco: unref short failure
[h264 @ 0x556d8dded080] mmco: unref short failure
[h264 @ 0x55e45cf83240] mmco: unref short failure
[h264 @ 0x55e45cf83240] mmco: unref short failure
[h264 @ 0x556dafc72500] mmco: unref short failure
 18%|█▊        | 345/1945 [1:47:01<7:04:23, 15.91s/it] 18%|█▊        | 346/1945 [1:47:09<6:04:32, 13.68s/it][h264 @ 0x556db05662c0] mmco: unref short failure
[h264 @ 0x55b733b35b80] mmco: unref short failure
 18%|█▊        | 347/1945 [1:47:17<5:17:40, 11.93s/it][h264 @ 0x55b71f8a8680] mmco: unref short failure
[h264 @ 0x556d930c1300] mmco: unref short failure
[h264 @ 0x556da60cea00] mmco: unref short failure
[h264 @ 0x556d9e05e840] mmco: unref short failure
[h264 @ 0x556d9e05e840] mmco: unref short failure
[h264 @ 0x55e458d5c980] mmco: unref short failure
[h264 @ 0x556d8fe1f140] mmco: unref short failure
[h264 @ 0x556d8fe1f140] mmco: unref short failure
[h264 @ 0x55b719ac99c0] mmco: unref short failure
[h264 @ 0x55b719ac99c0] mmco: unref short failure
[h264 @ 0x556da906a3c0] mmco: unref short failure
[h264 @ 0x556da906a3c0] mmco: unref short failure
 18%|█▊        | 348/1945 [1:47:57<9:02:52, 20.40s/it][h264 @ 0x556dafc651c0] mmco: unref short failure
[h264 @ 0x556dafc651c0] mmco: unref short failure
[h264 @ 0x55e44a0f7640] mmco: unref short failure
[h264 @ 0x55e44a0f7640] mmco: unref short failure
[h264 @ 0x55b71d7895c0] mmco: unref short failure
 18%|█▊        | 349/1945 [1:48:09<7:58:07, 17.97s/it]09/09/2024 17:13:38 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 17:13:38 - INFO - __main__ -   start running ret%tv validation...
[h264 @ 0x556d9dde3f80] mmco: unref short failure
[h264 @ 0x556d9dde3f80] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e457f8d100] mmco: unref short failure
[h264 @ 0x556d96e29dc0] mmco: unref short failure
[h264 @ 0x556d96e29dc0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556dbbaf11c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556d8ffa6b80] mmco: unref short failure
[h264 @ 0x556d8ffa6b80] mmco: unref short failure
[h264 @ 0x556d8ffa6b80] mmco: unref short failure
[h264 @ 0x556d8ffa6b80] mmco: unref short failure
[h264 @ 0x55e46cbae100] mmco: unref short failure
[h264 @ 0x55e46cbae100] mmco: unref short failure
[h264 @ 0x55e46cbae100] mmco: unref short failure
[h264 @ 0x55e46cbae100] mmco: unref short failure
[h264 @ 0x55b72ab19a00] mmco: unref short failure
[h264 @ 0x55b72ab19a00] mmco: unref short failure
[h264 @ 0x556dac3c0e80] mmco: unref short failure
[h264 @ 0x556dac3c0e80] mmco: unref short failure
[h264 @ 0x55e44d783d40] mmco: unref short failure
[h264 @ 0x55b71fee5700] mmco: unref short failure
[h264 @ 0x55e461d789c0] mmco: unref short failure
[h264 @ 0x55e461d789c0] mmco: unref short failure
[h264 @ 0x55e461d789c0] mmco: unref short failure
[h264 @ 0x55e461d789c0] mmco: unref short failure
[h264 @ 0x55b71ebba380] mmco: unref short failure
[h264 @ 0x55b71ebba380] mmco: unref short failure
[h264 @ 0x55b71ebba380] mmco: unref short failure
[h264 @ 0x55b71ebba380] mmco: unref short failure
[h264 @ 0x55b72f945780] mmco: unref short failure
[h264 @ 0x55e4615c1c80] mmco: unref short failure
[h264 @ 0x55b723512500] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:34,  6.34it/s][A
  1%|          | 2/221 [00:00<01:19,  2.76it/s][A
  1%|▏         | 3/221 [00:00<01:02,  3.47it/s][A
  2%|▏         | 4/221 [00:01<00:51,  4.24it/s][A
  2%|▏         | 5/221 [00:01<00:48,  4.42it/s][A
  3%|▎         | 6/221 [00:01<00:45,  4.73it/s][A
  3%|▎         | 7/221 [00:01<00:44,  4.79it/s][A
  4%|▎         | 8/221 [00:01<00:50,  4.23it/s][A
  4%|▍         | 9/221 [00:02<01:02,  3.39it/s][A
  5%|▍         | 10/221 [00:03<01:49,  1.93it/s][A
  5%|▍         | 11/221 [00:03<01:31,  2.30it/s][A
  5%|▌         | 12/221 [00:03<01:12,  2.88it/s][A
  6%|▌         | 13/221 [00:04<01:21,  2.54it/s][A
  6%|▋         | 14/221 [00:06<02:54,  1.19it/s][A
  7%|▋         | 15/221 [00:06<02:18,  1.49it/s][A
  7%|▋         | 16/221 [00:07<02:13,  1.54it/s][A
  8%|▊         | 17/221 [00:07<02:19,  1.47it/s][A[h264 @ 0x55b71ce99240] mmco: unref short failure

  8%|▊         | 18/221 [00:08<01:54,  1.77it/s][A
  9%|▊         | 19/221 [00:08<01:27,  2.32it/s][A
  9%|▉         | 20/221 [00:08<01:14,  2.71it/s][A
 10%|▉         | 21/221 [00:08<01:11,  2.79it/s][A
 10%|▉         | 22/221 [00:08<01:02,  3.17it/s][A
 10%|█         | 23/221 [00:09<00:52,  3.78it/s][A
 11%|█         | 24/221 [00:09<00:48,  4.06it/s][A
 11%|█▏        | 25/221 [00:09<00:43,  4.55it/s][A
 12%|█▏        | 26/221 [00:09<00:47,  4.10it/s][A
 12%|█▏        | 27/221 [00:09<00:43,  4.49it/s][A
 13%|█▎        | 28/221 [00:10<00:53,  3.59it/s][A
 13%|█▎        | 29/221 [00:12<02:33,  1.25it/s][A
 14%|█▎        | 30/221 [00:12<01:59,  1.59it/s][A
 14%|█▍        | 31/221 [00:12<01:38,  1.93it/s][A
 14%|█▍        | 32/221 [00:12<01:15,  2.52it/s][A
 15%|█▍        | 33/221 [00:13<01:13,  2.56it/s][A
 15%|█▌        | 34/221 [00:13<01:00,  3.08it/s][A
 16%|█▌        | 35/221 [00:13<00:55,  3.37it/s][A
 16%|█▋        | 36/221 [00:13<00:52,  3.51it/s][A
 17%|█▋        | 37/221 [00:14<00:48,  3.82it/s][A
 17%|█▋        | 38/221 [00:14<00:55,  3.31it/s][A
 18%|█▊        | 39/221 [00:14<00:54,  3.32it/s][A
 18%|█▊        | 40/221 [00:15<01:00,  2.98it/s][A
 19%|█▊        | 41/221 [00:15<00:49,  3.66it/s][A
 19%|█▉        | 42/221 [00:15<00:44,  4.06it/s][A
 19%|█▉        | 43/221 [00:15<00:46,  3.81it/s][A
 20%|█▉        | 44/221 [00:16<00:43,  4.03it/s][A
 20%|██        | 45/221 [00:16<00:48,  3.62it/s][A
 21%|██        | 46/221 [00:16<00:42,  4.15it/s][A
 21%|██▏       | 47/221 [00:16<00:43,  4.03it/s][A
 22%|██▏       | 48/221 [00:17<00:37,  4.59it/s][A
 22%|██▏       | 49/221 [00:17<00:44,  3.90it/s][A
 23%|██▎       | 50/221 [00:19<01:59,  1.44it/s][A
 23%|██▎       | 51/221 [00:19<01:34,  1.80it/s][A
 24%|██▎       | 52/221 [00:19<01:29,  1.89it/s][A
 24%|██▍       | 53/221 [00:20<01:13,  2.28it/s][A
 24%|██▍       | 54/221 [00:20<01:01,  2.71it/s][A
 25%|██▍       | 55/221 [00:20<00:56,  2.95it/s][A
 25%|██▌       | 56/221 [00:20<00:49,  3.32it/s][A
 26%|██▌       | 57/221 [00:20<00:44,  3.65it/s][A
 26%|██▌       | 58/221 [00:21<00:42,  3.88it/s][A
 27%|██▋       | 59/221 [00:21<00:47,  3.39it/s][A
 27%|██▋       | 60/221 [00:21<00:48,  3.30it/s][A
 28%|██▊       | 61/221 [00:22<00:42,  3.74it/s][A
 28%|██▊       | 62/221 [00:22<00:43,  3.67it/s][A
 29%|██▊       | 63/221 [00:22<00:57,  2.77it/s][A
 29%|██▉       | 64/221 [00:23<00:48,  3.25it/s][A[h264 @ 0x556da6f1d680] mmco: unref short failure
[h264 @ 0x556da6f1d680] mmco: unref short failure

 29%|██▉       | 65/221 [00:23<00:42,  3.64it/s][A
 30%|██▉       | 66/221 [00:23<00:39,  3.97it/s][A
 30%|███       | 67/221 [00:23<00:43,  3.53it/s][A
 31%|███       | 68/221 [00:24<00:38,  3.96it/s][A
 31%|███       | 69/221 [00:24<00:45,  3.31it/s][A
 32%|███▏      | 70/221 [00:24<00:41,  3.60it/s][A
 32%|███▏      | 71/221 [00:25<00:53,  2.83it/s][A
 33%|███▎      | 72/221 [00:25<01:01,  2.42it/s][A[h264 @ 0x556daaf3c900] mmco: unref short failure

 33%|███▎      | 73/221 [00:26<01:06,  2.21it/s][A
 33%|███▎      | 74/221 [00:26<00:53,  2.75it/s][A
 34%|███▍      | 75/221 [00:26<00:57,  2.54it/s][A
 34%|███▍      | 76/221 [00:27<00:46,  3.12it/s][A
 35%|███▍      | 77/221 [00:27<00:44,  3.22it/s][A
 35%|███▌      | 78/221 [00:27<00:46,  3.08it/s][A
 36%|███▌      | 79/221 [00:28<00:49,  2.86it/s][A
 36%|███▌      | 80/221 [00:28<00:43,  3.27it/s][A
 37%|███▋      | 81/221 [00:28<00:39,  3.54it/s][A[h264 @ 0x556dad5c1580] mmco: unref short failure

 37%|███▋      | 82/221 [00:28<00:43,  3.16it/s][A[h264 @ 0x55e44be56f00] mmco: unref short failure
[h264 @ 0x556d8f08ad80] mmco: unref short failure
[h264 @ 0x556d8f08ad80] mmco: unref short failure

 38%|███▊      | 83/221 [00:31<02:27,  1.07s/it][A
 38%|███▊      | 84/221 [00:32<01:58,  1.16it/s][A
 38%|███▊      | 85/221 [00:32<01:32,  1.47it/s][A
 39%|███▉      | 86/221 [00:32<01:13,  1.85it/s][A
 39%|███▉      | 87/221 [00:33<01:12,  1.85it/s][A
 40%|███▉      | 88/221 [00:33<01:04,  2.05it/s][A
 40%|████      | 89/221 [00:33<00:55,  2.39it/s][A
 41%|████      | 90/221 [00:34<00:52,  2.49it/s][A
 41%|████      | 91/221 [00:34<00:46,  2.79it/s][A
 42%|████▏     | 92/221 [00:34<00:45,  2.83it/s][A
 42%|████▏     | 93/221 [00:35<00:42,  3.02it/s][A
 43%|████▎     | 94/221 [00:35<00:38,  3.31it/s][A[h264 @ 0x55b71953c040] mmco: unref short failure

 43%|████▎     | 95/221 [00:36<01:15,  1.67it/s][A
 43%|████▎     | 96/221 [00:36<01:00,  2.06it/s][A
 44%|████▍     | 97/221 [00:37<00:52,  2.36it/s][A[h264 @ 0x55b72474db80] mmco: unref short failure
[h264 @ 0x55b72474db80] mmco: unref short failure

 44%|████▍     | 98/221 [00:37<00:55,  2.23it/s][A
 45%|████▍     | 99/221 [00:37<00:42,  2.89it/s][A
 45%|████▌     | 100/221 [00:37<00:37,  3.26it/s][A
 46%|████▌     | 101/221 [00:37<00:29,  4.03it/s][A
 46%|████▌     | 102/221 [00:38<00:26,  4.53it/s][A
 47%|████▋     | 103/221 [00:38<00:28,  4.08it/s][A
 47%|████▋     | 104/221 [00:38<00:26,  4.48it/s][A
 48%|████▊     | 105/221 [00:38<00:26,  4.45it/s][A
 48%|████▊     | 106/221 [00:39<00:25,  4.48it/s][A
 48%|████▊     | 107/221 [00:39<00:23,  4.82it/s][A
 49%|████▉     | 108/221 [00:39<00:25,  4.47it/s][A[h264 @ 0x55e466a70740] mmco: unref short failure
[h264 @ 0x55e466a70740] mmco: unref short failure

 49%|████▉     | 109/221 [00:39<00:28,  3.93it/s][A[h264 @ 0x55b736f663c0] mmco: unref short failure

 50%|████▉     | 110/221 [00:40<00:29,  3.71it/s][A
 50%|█████     | 111/221 [00:40<00:32,  3.43it/s][A
 51%|█████     | 112/221 [00:40<00:29,  3.67it/s][A
 51%|█████     | 113/221 [00:40<00:30,  3.60it/s][A
 52%|█████▏    | 114/221 [00:41<00:32,  3.30it/s][A
 52%|█████▏    | 115/221 [00:41<00:31,  3.37it/s][A
 52%|█████▏    | 116/221 [00:41<00:30,  3.50it/s][A[h264 @ 0x556dab3b2a40] mmco: unref short failure

 53%|█████▎    | 117/221 [00:42<00:32,  3.16it/s][A
 53%|█████▎    | 118/221 [00:42<00:32,  3.13it/s][A
 54%|█████▍    | 119/221 [00:42<00:31,  3.21it/s][A
 54%|█████▍    | 120/221 [00:43<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:43<00:27,  3.66it/s][A
 55%|█████▌    | 122/221 [00:43<00:24,  4.11it/s][A
 56%|█████▌    | 123/221 [00:43<00:21,  4.65it/s][A
 56%|█████▌    | 124/221 [00:43<00:22,  4.28it/s][A
 57%|█████▋    | 125/221 [00:44<00:24,  3.97it/s][A
 57%|█████▋    | 126/221 [00:44<00:20,  4.62it/s][A
 57%|█████▋    | 127/221 [00:44<00:19,  4.70it/s][A
 58%|█████▊    | 128/221 [00:44<00:22,  4.12it/s][A
 59%|█████▉    | 130/221 [00:45<00:20,  4.42it/s][A
 59%|█████▉    | 131/221 [00:45<00:20,  4.36it/s][A
 60%|█████▉    | 132/221 [00:45<00:20,  4.24it/s][A
 60%|██████    | 133/221 [00:46<00:22,  3.89it/s][A
 61%|██████    | 134/221 [00:46<00:21,  4.00it/s][A
 61%|██████    | 135/221 [00:46<00:20,  4.16it/s][A
 62%|██████▏   | 136/221 [00:46<00:20,  4.15it/s][A
 62%|██████▏   | 137/221 [00:47<00:19,  4.40it/s][A
 62%|██████▏   | 138/221 [00:47<00:21,  3.85it/s][A
 63%|██████▎   | 139/221 [00:47<00:18,  4.55it/s][A
 63%|██████▎   | 140/221 [00:47<00:16,  5.04it/s][A
 64%|██████▍   | 141/221 [00:47<00:16,  4.77it/s][A
 64%|██████▍   | 142/221 [00:48<00:18,  4.23it/s][A
 65%|██████▍   | 143/221 [00:48<00:15,  5.05it/s][A
 65%|██████▌   | 144/221 [00:48<00:16,  4.77it/s][A
 66%|██████▌   | 145/221 [00:48<00:15,  4.77it/s][A
 66%|██████▌   | 146/221 [00:48<00:13,  5.36it/s][A
 67%|██████▋   | 147/221 [00:49<00:14,  5.19it/s][A
 67%|██████▋   | 148/221 [00:49<00:19,  3.68it/s][A
 67%|██████▋   | 149/221 [00:49<00:19,  3.77it/s][A
 68%|██████▊   | 150/221 [00:50<00:20,  3.49it/s][A
 68%|██████▊   | 151/221 [00:50<00:26,  2.67it/s][A
 69%|██████▉   | 152/221 [00:51<00:30,  2.30it/s][A[h264 @ 0x556db6e9bf00] mmco: unref short failure
[h264 @ 0x556db6e9bf00] mmco: unref short failure

 69%|██████▉   | 153/221 [00:51<00:26,  2.56it/s][A
 70%|██████▉   | 154/221 [00:51<00:21,  3.09it/s][A
 70%|███████   | 155/221 [00:51<00:17,  3.86it/s][A
 71%|███████   | 156/221 [00:51<00:14,  4.38it/s][A
 71%|███████   | 157/221 [00:52<00:14,  4.35it/s][A
 71%|███████▏  | 158/221 [00:52<00:13,  4.73it/s][A
 72%|███████▏  | 160/221 [00:52<00:11,  5.52it/s][A
 73%|███████▎  | 161/221 [00:52<00:11,  5.39it/s][A
 73%|███████▎  | 162/221 [00:52<00:09,  6.06it/s][A
 74%|███████▍  | 163/221 [00:53<00:11,  5.06it/s][A
 74%|███████▍  | 164/221 [00:53<00:12,  4.61it/s][A
 75%|███████▌  | 166/221 [00:53<00:09,  5.60it/s][A
 76%|███████▌  | 167/221 [00:53<00:09,  5.63it/s][A
 76%|███████▌  | 168/221 [00:54<00:09,  5.74it/s][A
 76%|███████▋  | 169/221 [00:54<00:08,  6.34it/s][A
 77%|███████▋  | 170/221 [00:54<00:08,  5.68it/s][A
 77%|███████▋  | 171/221 [00:54<00:13,  3.76it/s][A
 78%|███████▊  | 172/221 [00:55<00:10,  4.52it/s][A
 78%|███████▊  | 173/221 [00:55<00:10,  4.62it/s][A
 79%|███████▊  | 174/221 [00:55<00:15,  3.05it/s][A
 79%|███████▉  | 175/221 [00:56<00:17,  2.57it/s][A
 80%|███████▉  | 176/221 [00:56<00:14,  3.20it/s][A
 80%|████████  | 177/221 [00:56<00:12,  3.52it/s][A
 81%|████████  | 178/221 [00:56<00:10,  3.91it/s][A
 81%|████████  | 179/221 [00:57<00:10,  3.89it/s][A
 81%|████████▏ | 180/221 [00:57<00:09,  4.21it/s][A
 82%|████████▏ | 181/221 [00:57<00:09,  4.34it/s][A
 82%|████████▏ | 182/221 [00:57<00:08,  4.86it/s][A
 83%|████████▎ | 183/221 [00:57<00:07,  5.30it/s][A
 83%|████████▎ | 184/221 [00:58<00:08,  4.27it/s][A
 84%|████████▍ | 186/221 [00:58<00:06,  5.19it/s][A
 85%|████████▍ | 187/221 [00:58<00:06,  5.17it/s][A
 85%|████████▌ | 188/221 [00:59<00:08,  4.09it/s][A
 86%|████████▌ | 189/221 [00:59<00:08,  3.84it/s][A
 86%|████████▌ | 190/221 [00:59<00:07,  3.97it/s][A
 86%|████████▋ | 191/221 [00:59<00:06,  4.41it/s][A[h264 @ 0x556dae81ef80] mmco: unref short failure
[h264 @ 0x556dae81ef80] mmco: unref short failure

 87%|████████▋ | 192/221 [00:59<00:05,  5.17it/s][A
 87%|████████▋ | 193/221 [01:00<00:04,  5.95it/s][A
 88%|████████▊ | 194/221 [01:00<00:05,  4.52it/s][A
 88%|████████▊ | 195/221 [01:00<00:05,  4.78it/s][A
 89%|████████▊ | 196/221 [01:01<00:10,  2.34it/s][A
 89%|████████▉ | 197/221 [01:01<00:08,  2.82it/s][A
 90%|████████▉ | 198/221 [01:01<00:07,  3.14it/s][A
 90%|█████████ | 199/221 [01:02<00:05,  3.90it/s][A
 90%|█████████ | 200/221 [01:02<00:05,  4.02it/s][A
 91%|█████████ | 201/221 [01:02<00:04,  4.37it/s][A
 91%|█████████▏| 202/221 [01:02<00:05,  3.47it/s][A
 92%|█████████▏| 203/221 [01:02<00:04,  4.28it/s][A[h264 @ 0x556d9f3a5cc0] mmco: unref short failure
[h264 @ 0x556d9f3a5cc0] mmco: unref short failure

[h264 @ 0x556d9f3a5cc0] mmco: unref short failure
 92%|█████████▏| 204/221 [01:03<00:06,  2.52it/s][A
 93%|█████████▎| 205/221 [01:03<00:05,  3.02it/s][A
 93%|█████████▎| 206/221 [01:04<00:06,  2.38it/s][A
 94%|█████████▎| 207/221 [01:05<00:06,  2.33it/s][A
 94%|█████████▍| 208/221 [01:05<00:04,  2.93it/s][A
 95%|█████████▍| 209/221 [01:05<00:03,  3.45it/s][A
 95%|█████████▌| 211/221 [01:05<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [01:05<00:02,  4.05it/s][A
 96%|█████████▋| 213/221 [01:06<00:02,  3.93it/s][A
 97%|█████████▋| 214/221 [01:06<00:01,  4.17it/s][A
 97%|█████████▋| 215/221 [01:06<00:01,  4.47it/s][A
 98%|█████████▊| 216/221 [01:06<00:01,  4.40it/s][A
 98%|█████████▊| 217/221 [01:07<00:00,  4.11it/s][A
 99%|█████████▊| 218/221 [01:07<00:00,  4.15it/s][A[h264 @ 0x556da906a3c0] mmco: unref short failure
[h264 @ 0x556da906a3c0] mmco: unref short failure

 99%|█████████▉| 219/221 [01:07<00:00,  4.44it/s][A
100%|█████████▉| 220/221 [01:07<00:00,  4.15it/s][A
100%|██████████| 221/221 [01:08<00:00,  3.65it/s][A100%|██████████| 221/221 [01:08<00:00,  3.24it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.78it/s][A
  1%|          | 2/221 [00:00<00:58,  3.77it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.77it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.77it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.77it/s][A
  3%|▎         | 6/221 [00:01<00:57,  3.77it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.77it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.77it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.78it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.78it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.78it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.77it/s][A
  6%|▌         | 13/221 [00:03<00:55,  3.77it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.77it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.78it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.78it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.78it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.78it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.78it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.78it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.78it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.78it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.78it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.78it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.78it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 28/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.78it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.78it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.78it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.78it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.78it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.78it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.78it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.78it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.78it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.78it/s][A
 19%|█▉        | 43/221 [00:11<00:47,  3.78it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.78it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.78it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.78it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.78it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.78it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.78it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.78it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.78it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.78it/s][A
 24%|██▍       | 53/221 [00:14<00:44,  3.78it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.78it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.78it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.78it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.78it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.78it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.78it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.78it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.78it/s][A
 28%|██▊       | 62/221 [00:16<00:42,  3.78it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.78it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.78it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.78it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.78it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.78it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.78it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.78it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.78it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.78it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.78it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.78it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.78it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.78it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:23<00:35,  3.78it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.78it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.78it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.78it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.78it/s][A
 43%|████▎     | 96/221 [00:25<00:33,  3.78it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.78it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.78it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.78it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.78it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.78it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.78it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.78it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 106/221 [00:28<00:30,  3.78it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.78it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.78it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.78it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.78it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.78it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.78it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.78it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 115/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.78it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.78it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.78it/s][A
 55%|█████▍    | 121/221 [00:32<00:26,  3.78it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.78it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.78it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.78it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.78it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.78it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 134/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 140/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.78it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.78it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.78it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.78it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.78it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.78it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.78it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.78it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.78it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.78it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.78it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.78it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.78it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.78it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.78it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.78it/s][A
 76%|███████▌  | 168/221 [00:44<00:14,  3.78it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.78it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.78it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.78it/s][A
 79%|███████▊  | 174/221 [00:46<00:12,  3.78it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.78it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.78it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.78it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.78it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.78it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.78it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.78it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.78it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.78it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 193/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:54<00:05,  3.00it/s][A
 93%|█████████▎| 205/221 [00:54<00:05,  3.20it/s][A
 93%|█████████▎| 206/221 [00:54<00:04,  3.35it/s][A
 94%|█████████▎| 207/221 [00:54<00:04,  3.47it/s][A
 94%|█████████▍| 208/221 [00:55<00:03,  3.56it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.62it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.67it/s][A
 95%|█████████▌| 211/221 [00:56<00:02,  3.70it/s][A
 96%|█████████▌| 212/221 [00:56<00:02,  3.73it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.74it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.75it/s][A
 97%|█████████▋| 215/221 [00:57<00:01,  3.76it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.77it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.77it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.78it/s][A
 99%|█████████▉| 219/221 [00:58<00:00,  3.78it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.77it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:45,  4.81it/s][A
  1%|          | 2/221 [00:00<00:49,  4.42it/s][A
  1%|▏         | 3/221 [00:00<00:48,  4.52it/s][A
  2%|▏         | 4/221 [00:00<00:48,  4.47it/s][A
  2%|▏         | 5/221 [00:01<00:45,  4.76it/s][A
  3%|▎         | 7/221 [00:01<00:41,  5.20it/s][A
  4%|▎         | 8/221 [00:01<00:45,  4.65it/s][A
  4%|▍         | 9/221 [00:01<00:44,  4.75it/s][A
  5%|▍         | 10/221 [00:02<01:19,  2.64it/s][A
  5%|▍         | 11/221 [00:02<01:08,  3.05it/s][A
  5%|▌         | 12/221 [00:03<00:56,  3.68it/s][A
  6%|▌         | 13/221 [00:03<01:25,  2.43it/s][A
  7%|▋         | 15/221 [00:04<01:01,  3.36it/s][A
  7%|▋         | 16/221 [00:04<01:03,  3.25it/s][A
  8%|▊         | 17/221 [00:05<01:25,  2.39it/s][A
  8%|▊         | 18/221 [00:05<01:16,  2.66it/s][A
  9%|▊         | 19/221 [00:05<01:08,  2.94it/s][A
  9%|▉         | 20/221 [00:05<00:56,  3.57it/s][A
 10%|▉         | 21/221 [00:05<00:47,  4.24it/s][A
 10%|▉         | 22/221 [00:06<00:46,  4.29it/s][A
 10%|█         | 23/221 [00:06<00:38,  5.12it/s][A
 11%|█         | 24/221 [00:06<00:38,  5.17it/s][A
 11%|█▏        | 25/221 [00:06<00:38,  5.03it/s][A
 12%|█▏        | 26/221 [00:06<00:43,  4.44it/s][A
 13%|█▎        | 28/221 [00:07<00:43,  4.48it/s][A
 13%|█▎        | 29/221 [00:07<00:38,  4.96it/s][A
 14%|█▎        | 30/221 [00:07<00:41,  4.62it/s][A
 14%|█▍        | 31/221 [00:07<00:38,  4.95it/s][A
 15%|█▍        | 33/221 [00:08<00:31,  5.89it/s][A
 15%|█▌        | 34/221 [00:08<00:29,  6.43it/s][A
 16%|█▌        | 35/221 [00:08<00:29,  6.31it/s][A
 16%|█▋        | 36/221 [00:08<00:38,  4.84it/s][A
 17%|█▋        | 37/221 [00:09<00:40,  4.57it/s][A
 17%|█▋        | 38/221 [00:09<00:48,  3.80it/s][A
 18%|█▊        | 39/221 [00:09<00:43,  4.18it/s][A
 18%|█▊        | 40/221 [00:09<00:43,  4.14it/s][A
 19%|█▊        | 41/221 [00:10<00:36,  4.98it/s][A
 19%|█▉        | 42/221 [00:10<00:47,  3.75it/s][A
 19%|█▉        | 43/221 [00:10<00:56,  3.16it/s][A
 20%|█▉        | 44/221 [00:11<00:55,  3.18it/s][A
 20%|██        | 45/221 [00:11<00:48,  3.62it/s][A
 21%|██        | 46/221 [00:11<00:42,  4.13it/s][A
 21%|██▏       | 47/221 [00:11<00:44,  3.93it/s][A
 22%|██▏       | 48/221 [00:11<00:37,  4.63it/s][A
 22%|██▏       | 49/221 [00:12<00:37,  4.63it/s][A
 23%|██▎       | 50/221 [00:12<00:39,  4.37it/s][A
 23%|██▎       | 51/221 [00:12<00:33,  5.11it/s][A
 24%|██▎       | 52/221 [00:12<00:32,  5.28it/s][A
 24%|██▍       | 53/221 [00:12<00:28,  5.87it/s][A
 24%|██▍       | 54/221 [00:13<00:47,  3.52it/s][A
 25%|██▍       | 55/221 [00:13<00:47,  3.47it/s][A
 25%|██▌       | 56/221 [00:13<00:40,  4.06it/s][A
 26%|██▌       | 57/221 [00:14<00:40,  4.10it/s][A
 26%|██▌       | 58/221 [00:14<00:38,  4.22it/s][A
 27%|██▋       | 59/221 [00:14<00:39,  4.10it/s][A
 27%|██▋       | 60/221 [00:14<00:43,  3.68it/s][A
 28%|██▊       | 61/221 [00:15<00:38,  4.14it/s][A
 28%|██▊       | 62/221 [00:15<00:38,  4.15it/s][A
 29%|██▊       | 63/221 [00:15<00:35,  4.45it/s][A
 29%|██▉       | 64/221 [00:15<00:39,  3.97it/s][A
 29%|██▉       | 65/221 [00:15<00:32,  4.81it/s][A
 30%|██▉       | 66/221 [00:16<00:45,  3.41it/s][A
 30%|███       | 67/221 [00:16<00:52,  2.92it/s][A
 31%|███       | 68/221 [00:17<00:44,  3.41it/s][A
 31%|███       | 69/221 [00:17<00:58,  2.59it/s][A
 32%|███▏      | 70/221 [00:17<00:48,  3.10it/s][A
 32%|███▏      | 71/221 [00:17<00:42,  3.57it/s][A
 33%|███▎      | 72/221 [00:18<00:45,  3.29it/s][A
 33%|███▎      | 73/221 [00:18<00:47,  3.11it/s][A
 34%|███▍      | 75/221 [00:19<00:36,  4.00it/s][A
 34%|███▍      | 76/221 [00:19<00:33,  4.27it/s][A
 35%|███▍      | 77/221 [00:19<00:32,  4.40it/s][A
 35%|███▌      | 78/221 [00:19<00:28,  4.97it/s][A
 36%|███▌      | 79/221 [00:20<00:45,  3.10it/s][A
 36%|███▌      | 80/221 [00:20<00:40,  3.52it/s][A
 37%|███▋      | 81/221 [00:20<00:37,  3.76it/s][A
 37%|███▋      | 82/221 [00:20<00:35,  3.90it/s][A
 38%|███▊      | 83/221 [00:21<00:43,  3.20it/s][A
 38%|███▊      | 84/221 [00:21<00:34,  3.92it/s][A
 38%|███▊      | 85/221 [00:21<00:29,  4.62it/s][A
 39%|███▉      | 86/221 [00:21<00:26,  5.04it/s][A
 39%|███▉      | 87/221 [00:22<00:45,  2.91it/s][A
 40%|███▉      | 88/221 [00:22<00:48,  2.73it/s][A
 40%|████      | 89/221 [00:23<00:43,  3.06it/s][A
 41%|████      | 90/221 [00:23<00:41,  3.15it/s][A
 41%|████      | 91/221 [00:23<00:34,  3.72it/s][A
 42%|████▏     | 92/221 [00:23<00:32,  3.98it/s][A
 42%|████▏     | 93/221 [00:24<00:58,  2.20it/s][A
 43%|████▎     | 94/221 [00:24<00:53,  2.38it/s][A
 43%|████▎     | 95/221 [00:25<00:47,  2.68it/s][A
 43%|████▎     | 96/221 [00:25<00:39,  3.19it/s][A
 44%|████▍     | 97/221 [00:25<00:35,  3.47it/s][A
 44%|████▍     | 98/221 [00:25<00:33,  3.62it/s][A
 45%|████▍     | 99/221 [00:25<00:27,  4.42it/s][A
 45%|████▌     | 100/221 [00:26<00:27,  4.38it/s][A
 46%|████▌     | 101/221 [00:26<00:34,  3.48it/s][A
 46%|████▌     | 102/221 [00:27<00:42,  2.82it/s][A
 47%|████▋     | 103/221 [00:27<00:35,  3.31it/s][A
 47%|████▋     | 104/221 [00:27<00:29,  3.99it/s][A
 48%|████▊     | 105/221 [00:27<00:28,  4.07it/s][A
 48%|████▊     | 106/221 [00:28<00:38,  2.99it/s][A
 48%|████▊     | 107/221 [00:28<00:34,  3.29it/s][A
 49%|████▉     | 108/221 [00:28<00:32,  3.44it/s][A
 49%|████▉     | 109/221 [00:28<00:27,  4.14it/s][A
 50%|████▉     | 110/221 [00:29<00:25,  4.32it/s][A
 50%|█████     | 111/221 [00:29<00:25,  4.39it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.82it/s][A
 51%|█████     | 113/221 [00:29<00:26,  4.12it/s][A
 52%|█████▏    | 115/221 [00:30<00:20,  5.21it/s][A
 52%|█████▏    | 116/221 [00:30<00:22,  4.59it/s][A
 53%|█████▎    | 117/221 [00:30<00:23,  4.41it/s][A
 53%|█████▎    | 118/221 [00:30<00:23,  4.35it/s][A
 54%|█████▍    | 119/221 [00:31<00:29,  3.45it/s][A
 54%|█████▍    | 120/221 [00:31<00:27,  3.70it/s][A
 55%|█████▌    | 122/221 [00:31<00:21,  4.67it/s][A
 56%|█████▌    | 123/221 [00:32<00:22,  4.33it/s][A
 56%|█████▌    | 124/221 [00:32<00:23,  4.08it/s][A
 57%|█████▋    | 125/221 [00:32<00:28,  3.39it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.67it/s][A
 57%|█████▋    | 127/221 [00:33<00:29,  3.22it/s][A
 58%|█████▊    | 128/221 [00:33<00:27,  3.38it/s][A
 59%|█████▉    | 130/221 [00:33<00:19,  4.77it/s][A
 59%|█████▉    | 131/221 [00:34<00:16,  5.40it/s][A
 60%|█████▉    | 132/221 [00:34<00:17,  5.10it/s][A
 60%|██████    | 133/221 [00:34<00:19,  4.59it/s][A
 61%|██████    | 134/221 [00:34<00:20,  4.21it/s][A
 61%|██████    | 135/221 [00:35<00:23,  3.69it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.75it/s][A
 62%|██████▏   | 137/221 [00:35<00:20,  4.01it/s][A
 62%|██████▏   | 138/221 [00:36<00:23,  3.47it/s][A
 63%|██████▎   | 139/221 [00:36<00:27,  2.96it/s][A
 63%|██████▎   | 140/221 [00:36<00:25,  3.19it/s][A
 64%|██████▍   | 141/221 [00:37<00:24,  3.27it/s][A
 64%|██████▍   | 142/221 [00:37<00:21,  3.65it/s][A
 65%|██████▍   | 143/221 [00:37<00:31,  2.50it/s][A
 65%|██████▌   | 144/221 [00:38<00:34,  2.23it/s][A
 66%|██████▌   | 146/221 [00:38<00:20,  3.61it/s][A
 67%|██████▋   | 147/221 [00:38<00:21,  3.49it/s][A
 67%|██████▋   | 148/221 [00:39<00:21,  3.33it/s][A
 67%|██████▋   | 149/221 [00:39<00:22,  3.23it/s][A
 68%|██████▊   | 150/221 [00:39<00:21,  3.23it/s][A
 68%|██████▊   | 151/221 [00:40<00:22,  3.08it/s][A
 69%|██████▉   | 152/221 [00:41<00:40,  1.70it/s][A
 69%|██████▉   | 153/221 [00:41<00:31,  2.13it/s][A
 70%|██████▉   | 154/221 [00:41<00:27,  2.48it/s][A
 70%|███████   | 155/221 [00:42<00:28,  2.30it/s][A
 71%|███████   | 156/221 [00:42<00:29,  2.23it/s][A
 71%|███████   | 157/221 [00:43<00:24,  2.63it/s][A
 71%|███████▏  | 158/221 [00:43<00:21,  2.89it/s][A
 72%|███████▏  | 159/221 [00:43<00:16,  3.67it/s][A
 72%|███████▏  | 160/221 [00:43<00:15,  3.89it/s][A
 73%|███████▎  | 161/221 [00:43<00:15,  3.97it/s][A
 73%|███████▎  | 162/221 [00:44<00:13,  4.45it/s][A
 74%|███████▍  | 163/221 [00:44<00:13,  4.43it/s][A
 74%|███████▍  | 164/221 [00:44<00:12,  4.68it/s][A
 75%|███████▍  | 165/221 [00:44<00:12,  4.37it/s][A
 75%|███████▌  | 166/221 [00:45<00:12,  4.31it/s][A
 76%|███████▌  | 168/221 [00:45<00:11,  4.61it/s][A
 76%|███████▋  | 169/221 [00:45<00:10,  4.84it/s][A
 77%|███████▋  | 170/221 [00:46<00:13,  3.81it/s][A
 77%|███████▋  | 171/221 [00:46<00:12,  3.98it/s][A
 78%|███████▊  | 172/221 [00:46<00:10,  4.73it/s][A
 78%|███████▊  | 173/221 [00:46<00:13,  3.45it/s][A
 79%|███████▊  | 174/221 [00:47<00:16,  2.89it/s][A
 79%|███████▉  | 175/221 [00:47<00:15,  2.90it/s][A
 80%|███████▉  | 176/221 [00:47<00:13,  3.46it/s][A
 80%|████████  | 177/221 [00:48<00:11,  3.93it/s][A
 81%|████████  | 178/221 [00:48<00:10,  4.09it/s][A
 81%|████████  | 179/221 [00:48<00:11,  3.71it/s][A
 81%|████████▏ | 180/221 [00:48<00:09,  4.25it/s][A
 82%|████████▏ | 181/221 [00:48<00:08,  4.66it/s][A
 82%|████████▏ | 182/221 [00:49<00:09,  4.28it/s][A
 83%|████████▎ | 183/221 [00:49<00:08,  4.30it/s][A
 83%|████████▎ | 184/221 [00:49<00:08,  4.55it/s][A
 84%|████████▎ | 185/221 [00:49<00:07,  5.14it/s][A
 84%|████████▍ | 186/221 [00:50<00:09,  3.64it/s][A
 85%|████████▍ | 187/221 [00:50<00:10,  3.26it/s][A
 85%|████████▌ | 188/221 [00:50<00:10,  3.30it/s][A
 86%|████████▌ | 189/221 [00:51<00:09,  3.52it/s][A
 86%|████████▌ | 190/221 [00:51<00:09,  3.25it/s][A
 86%|████████▋ | 191/221 [00:51<00:07,  3.79it/s][A
 87%|████████▋ | 192/221 [00:51<00:08,  3.62it/s][A
 88%|████████▊ | 194/221 [00:52<00:07,  3.58it/s][A
 88%|████████▊ | 195/221 [00:52<00:06,  3.89it/s][A
 89%|████████▊ | 196/221 [00:53<00:07,  3.33it/s][A
 89%|████████▉ | 197/221 [00:53<00:07,  3.36it/s][A
 90%|████████▉ | 198/221 [00:53<00:07,  3.11it/s][A
 90%|█████████ | 199/221 [00:54<00:06,  3.37it/s][A
 90%|█████████ | 200/221 [00:54<00:06,  3.26it/s][A
 91%|█████████ | 201/221 [00:54<00:05,  3.45it/s][A
 91%|█████████▏| 202/221 [00:54<00:05,  3.41it/s][A
 92%|█████████▏| 203/221 [00:55<00:04,  3.75it/s][A
 92%|█████████▏| 204/221 [00:55<00:06,  2.57it/s][A
 93%|█████████▎| 205/221 [00:55<00:05,  3.08it/s][A
 93%|█████████▎| 206/221 [00:56<00:04,  3.16it/s][A
 94%|█████████▍| 208/221 [00:56<00:03,  3.89it/s][A
 95%|█████████▍| 209/221 [00:57<00:03,  3.49it/s][A
 95%|█████████▌| 211/221 [00:57<00:02,  3.72it/s][A
 96%|█████████▌| 212/221 [00:57<00:02,  3.67it/s][A
 96%|█████████▋| 213/221 [00:57<00:02,  3.97it/s][A
 97%|█████████▋| 214/221 [00:58<00:02,  3.11it/s][A
 97%|█████████▋| 215/221 [00:58<00:01,  3.32it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  3.16it/s][A
 98%|█████████▊| 217/221 [00:59<00:01,  3.10it/s][A
 99%|█████████▊| 218/221 [00:59<00:01,  2.93it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  2.81it/s][A
100%|█████████▉| 220/221 [01:00<00:00,  3.21it/s][A
100%|██████████| 221/221 [01:00<00:00,  3.49it/s][A100%|██████████| 221/221 [01:00<00:00,  3.64it/s]
09/09/2024 17:19:16 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 349--===========

09/09/2024 17:19:16 - INFO - __main__ -   {'area_r1': 37.8, 'area_recall': '37.8/65.0/73.4', 'area_ravg': 58.7}
09/09/2024 17:19:16 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 349--===========

09/09/2024 17:19:16 - INFO - __main__ -   {'forward_r1': 32.8, 'forward_recall': '32.8/57.8/70.0', 'forward_ravg': 53.5}
09/09/2024 17:19:16 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 349--===========

09/09/2024 17:19:16 - INFO - __main__ -   {'area_video_r1': 40.4, 'area_video_recall': '40.4/67.0/77.9', 'area_video_ravg': 61.8}
09/09/2024 17:19:16 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 299=======

09/09/2024 17:19:16 - INFO - __main__ -   {'area_video_r1': 40.6, 'area_video_recall': '40.6/66.7/79.0', 'area_video_ravg': 62.1}
09/09/2024 17:19:16 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 349--===========

09/09/2024 17:19:16 - INFO - __main__ -   {'area_video_r1': 50.6, 'area_video_recall': '50.6/73.3/80.8', 'area_video_ravg': 68.2, 'area_video_back_r1': 47.7, 'area_video_back_recall': '47.7/71.7/79.2', 'area_video_back_ravg': 66.2}
09/09/2024 17:19:16 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 17:19:16 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 17:19:16 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 349--===========

09/09/2024 17:19:16 - INFO - __main__ -   {'video_r1': 42.9, 'video_recall': '42.9/69.8/81.0', 'video_ravg': 64.6}
09/09/2024 17:19:16 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 17:19:16 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 17:19:16 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 349--===========

09/09/2024 17:19:16 - INFO - __main__ -   {'video_r1': 51.5, 'video_recall': '51.5/75.3/82.5', 'video_ravg': 69.8}
09/09/2024 17:19:16 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 249=======

09/09/2024 17:19:16 - INFO - __main__ -   {'video_r1': 52.1, 'video_recall': '52.1/76.0/82.5', 'video_ravg': 70.2}
09/09/2024 17:19:36 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.6282899379730225, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.025936458259820938, 'loss_ret%tv%ta--finetune_area/loss_area': 1.4209848642349243, 'loss_ret%tv%ta--finetune_area/total_loss': 3.0752112865448}
[h264 @ 0x556db9f7d5c0] mmco: unref short failure
[h264 @ 0x556db9f7d5c0] mmco: unref short failure
[h264 @ 0x556da6e9db80] mmco: unref short failure
 18%|█▊        | 350/1945 [1:54:10<53:31:02, 120.79s/it][h264 @ 0x556da12d2740] mmco: unref short failure
[h264 @ 0x556da12d2740] mmco: unref short failure
[h264 @ 0x55e468133000] mmco: unref short failure
[h264 @ 0x55e468133000] mmco: unref short failure
 18%|█▊        | 351/1945 [1:54:14<37:59:21, 85.80s/it] [h264 @ 0x55e4578f3780] mmco: unref short failure
[h264 @ 0x55e4578f3780] mmco: unref short failure
[h264 @ 0x556d90d747c0] mmco: unref short failure
 18%|█▊        | 352/1945 [1:54:19<27:11:59, 61.47s/it][h264 @ 0x55b72c705940] mmco: unref short failure
 18%|█▊        | 353/1945 [1:54:24<19:43:13, 44.59s/it][h264 @ 0x55b71fee5700] mmco: unref short failure
[h264 @ 0x55b71fee5700] mmco: unref short failure
[h264 @ 0x556db1b386c0] mmco: unref short failure
[h264 @ 0x556db1b386c0] mmco: unref short failure
 18%|█▊        | 354/1945 [1:54:30<14:35:46, 33.03s/it][h264 @ 0x55e457d441c0] mmco: unref short failure
[h264 @ 0x55e457d441c0] mmco: unref short failure
 18%|█▊        | 355/1945 [1:54:36<10:58:16, 24.84s/it][h264 @ 0x556da44da8c0] mmco: unref short failure
 18%|█▊        | 356/1945 [1:54:43<8:34:58, 19.45s/it] [h264 @ 0x55e4519d0ec0] mmco: unref short failure
[h264 @ 0x55e4519d0ec0] mmco: unref short failure
 18%|█▊        | 357/1945 [1:54:50<6:59:41, 15.86s/it][h264 @ 0x55b719194700] mmco: unref short failure
[h264 @ 0x55b719194700] mmco: unref short failure
 18%|█▊        | 358/1945 [1:54:58<5:52:08, 13.31s/it] 18%|█▊        | 359/1945 [1:55:05<5:06:56, 11.61s/it][h264 @ 0x556da7a6eec0] mmco: unref short failure
 19%|█▊        | 360/1945 [1:55:13<4:31:54, 10.29s/it] 19%|█▊        | 361/1945 [1:55:20<4:08:12,  9.40s/it][h264 @ 0x55b72a13a6c0] mmco: unref short failure
[h264 @ 0x55b72a13a6c0] mmco: unref short failure
[h264 @ 0x556d9f486c80] mmco: unref short failure
[h264 @ 0x556dadf2bd40] mmco: unref short failure
[h264 @ 0x556dadf2bd40] mmco: unref short failure
 19%|█▊        | 362/1945 [1:55:28<3:54:55,  8.90s/it][h264 @ 0x55e44f97dac0] mmco: unref short failure
[h264 @ 0x55e44f97dac0] mmco: unref short failure
[h264 @ 0x556da34cf740] mmco: unref short failure
[h264 @ 0x556da34cf740] mmco: unref short failure
[h264 @ 0x55b7297b2040] mmco: unref short failure
[h264 @ 0x55b7297b2040] mmco: unref short failure
[h264 @ 0x55b737178580] mmco: unref short failure
 19%|█▊        | 363/1945 [1:55:34<3:38:27,  8.29s/it][h264 @ 0x55b736037740] mmco: unref short failure
[h264 @ 0x55b736037740] mmco: unref short failure
 19%|█▊        | 364/1945 [1:55:42<3:35:06,  8.16s/it][h264 @ 0x55b7169b7a80] mmco: unref short failure
[h264 @ 0x55b7169b7a80] mmco: unref short failure
 19%|█▉        | 365/1945 [1:55:49<3:26:41,  7.85s/it][h264 @ 0x55e465b53040] mmco: unref short failure
[h264 @ 0x55e465b53040] mmco: unref short failure
[h264 @ 0x556db4fab600] mmco: unref short failure
[h264 @ 0x556db4fab600] mmco: unref short failure
[h264 @ 0x556db1e311c0] mmco: unref short failure
[h264 @ 0x55e4507f8200] mmco: unref short failure
[h264 @ 0x55e4507f8200] mmco: unref short failure
 19%|█▉        | 366/1945 [1:55:57<3:24:42,  7.78s/it] 19%|█▉        | 367/1945 [1:56:05<3:23:12,  7.73s/it][h264 @ 0x55b737110ac0] mmco: unref short failure
[h264 @ 0x55b737110ac0] mmco: unref short failure
 19%|█▉        | 368/1945 [1:56:12<3:22:37,  7.71s/it][h264 @ 0x55e44fa9dc00] mmco: unref short failure
[h264 @ 0x556db3d65dc0] mmco: unref short failure
[h264 @ 0x556db3d65dc0] mmco: unref short failure
[h264 @ 0x556db3d65dc0] mmco: unref short failure
[h264 @ 0x556db3d65dc0] mmco: unref short failure
[h264 @ 0x556d8da430c0] mmco: unref short failure
[h264 @ 0x556d9be3c180] mmco: unref short failure
[h264 @ 0x556d9be3c180] mmco: unref short failure
[h264 @ 0x556d9be3c180] mmco: unref short failure
[h264 @ 0x556d9be3c180] mmco: unref short failure
[h264 @ 0x55e45396ff80] mmco: unref short failure
[h264 @ 0x55e4680f2980] mmco: unref short failure
[h264 @ 0x55e4680f2980] mmco: unref short failure
[h264 @ 0x55b728933840] mmco: unref short failure
 19%|█▉        | 369/1945 [1:56:29<4:32:46, 10.38s/it][h264 @ 0x55b721d41e00] mmco: unref short failure
[h264 @ 0x55b721d41e00] mmco: unref short failure
[h264 @ 0x556da5c18b40] mmco: unref short failure
[h264 @ 0x556da5c18b40] mmco: unref short failure
[h264 @ 0x556dbec38800] mmco: unref short failure
[h264 @ 0x556dbec38800] mmco: unref short failure
 19%|█▉        | 370/1945 [1:56:36<4:08:40,  9.47s/it][h264 @ 0x55e4635028c0] mmco: unref short failure
[h264 @ 0x556d9e6ef900] mmco: unref short failure
[h264 @ 0x556d972c3e40] mmco: unref short failure
 19%|█▉        | 371/1945 [1:56:45<3:58:38,  9.10s/it][h264 @ 0x556db9ad0680] mmco: unref short failure
[h264 @ 0x556db9ad0680] mmco: unref short failure
[h264 @ 0x556d9ea65f00] mmco: unref short failure
[h264 @ 0x556d9ea65f00] mmco: unref short failure
[h264 @ 0x556d9ea65f00] mmco: unref short failure
[h264 @ 0x556d9ea65f00] mmco: unref short failure
[h264 @ 0x556db05662c0] mmco: unref short failure
[h264 @ 0x556db05662c0] mmco: unref short failure
[h264 @ 0x556da9837d80] mmco: unref short failure
 19%|█▉        | 372/1945 [1:56:56<4:13:52,  9.68s/it][h264 @ 0x556da1cd5e40] mmco: unref short failure
[h264 @ 0x55e450a224c0] mmco: unref short failure
 19%|█▉        | 373/1945 [1:57:12<5:05:29, 11.66s/it][h264 @ 0x556d972c3e40] mmco: unref short failure
[h264 @ 0x556d972c3e40] mmco: unref short failure
[h264 @ 0x55b72474db80] mmco: unref short failure
[h264 @ 0x556da38ed280] mmco: unref short failure
[h264 @ 0x556da38ed280] mmco: unref short failure
[h264 @ 0x556da38ed280] mmco: unref short failure
[h264 @ 0x556da38ed280] mmco: unref short failure
[h264 @ 0x55b71d5add80] mmco: unref short failure
[h264 @ 0x55b71d5add80] mmco: unref short failure
[h264 @ 0x556dae668c40] mmco: unref short failure
[h264 @ 0x556dae668c40] mmco: unref short failure
[h264 @ 0x55e44e6baf40] mmco: unref short failure
[h264 @ 0x55e46cf61ec0] mmco: unref short failure
[h264 @ 0x55e46cf61ec0] mmco: unref short failure
[h264 @ 0x55e46cf61ec0] mmco: unref short failure
[h264 @ 0x55e46cf61ec0] mmco: unref short failure
[h264 @ 0x55b72ed79dc0] mmco: unref short failure
[h264 @ 0x55b72ed79dc0] mmco: unref short failure
[h264 @ 0x55b72ed79dc0] mmco: unref short failure
[h264 @ 0x556da9f49c40] mmco: unref short failure
[h264 @ 0x556da9f49c40] mmco: unref short failure
 19%|█▉        | 374/1945 [1:57:46<8:04:33, 18.51s/it][h264 @ 0x556da4f36a00] mmco: unref short failure
[h264 @ 0x556d8e216880] mmco: unref short failure
[h264 @ 0x556db7692980] mmco: unref short failure
[h264 @ 0x556db7692980] mmco: unref short failure
[h264 @ 0x556db7692980] mmco: unref short failure
[h264 @ 0x556db7692980] mmco: unref short failure
 19%|█▉        | 375/1945 [1:58:05<8:06:42, 18.60s/it][h264 @ 0x55b735e14540] mmco: unref short failure
[h264 @ 0x55b735e14540] mmco: unref short failure
[h264 @ 0x556dadf2bd40] mmco: unref short failure
[h264 @ 0x556dadf2bd40] mmco: unref short failure
[h264 @ 0x556da6b83240] mmco: unref short failure
[h264 @ 0x556da6b83240] mmco: unref short failure
[h264 @ 0x556da6b83240] mmco: unref short failure
[h264 @ 0x556da6b83240] mmco: unref short failure
[h264 @ 0x556d9ccd3180] mmco: unref short failure
[h264 @ 0x556d9ccd3180] mmco: unref short failure
 19%|█▉        | 376/1945 [1:58:16<7:07:29, 16.35s/it][h264 @ 0x556daf17cc00] mmco: unref short failure
[h264 @ 0x556dbec340c0] mmco: unref short failure
[h264 @ 0x556dbec340c0] mmco: unref short failure
[h264 @ 0x55e44c7813c0] mmco: unref short failure
[h264 @ 0x556da8a3b980] mmco: unref short failure
[h264 @ 0x556da8a3b980] mmco: unref short failure
[h264 @ 0x556da8a3b980] mmco: unref short failure
[h264 @ 0x556da8a3b980] mmco: unref short failure
[h264 @ 0x556d92d04480] mmco: unref short failure
[h264 @ 0x556d92d04480] mmco: unref short failure
[h264 @ 0x556d933609c0] mmco: unref short failure
[h264 @ 0x556d933609c0] mmco: unref short failure
[h264 @ 0x55b71f6db400] mmco: unref short failure
[h264 @ 0x55b71f6db400] mmco: unref short failure
[h264 @ 0x556d9be56980] mmco: unref short failure
[h264 @ 0x556d9be56980] mmco: unref short failure
[h264 @ 0x556d9be56980] mmco: unref short failure
[h264 @ 0x556d9be56980] mmco: unref short failure
[h264 @ 0x556dbdebbcc0] mmco: unref short failure
[h264 @ 0x556dbdebbcc0] mmco: unref short failure
[h264 @ 0x556d92135c00] mmco: unref short failure
[h264 @ 0x556d92135c00] mmco: unref short failure
 19%|█▉        | 377/1945 [1:58:42<8:20:07, 19.14s/it][h264 @ 0x55b717f29000] mmco: unref short failure
[h264 @ 0x55b717f29000] mmco: unref short failure
[h264 @ 0x55b717f29000] mmco: unref short failure
[h264 @ 0x55b717f29000] mmco: unref short failure
[h264 @ 0x556da1eb94c0] mmco: unref short failure
[h264 @ 0x556da1eb94c0] mmco: unref short failure
[h264 @ 0x556da1eb94c0] mmco: unref short failure
 19%|█▉        | 378/1945 [1:58:48<6:40:22, 15.33s/it] 19%|█▉        | 379/1945 [1:58:55<5:29:19, 12.62s/it] 20%|█▉        | 380/1945 [1:59:01<4:43:38, 10.87s/it][h264 @ 0x556db3d65dc0] mmco: unref short failure
[h264 @ 0x556d94e2bc00] mmco: unref short failure
[h264 @ 0x556d94e2bc00] mmco: unref short failure
 20%|█▉        | 381/1945 [1:59:12<4:40:47, 10.77s/it][h264 @ 0x55b72799a340] mmco: unref short failure
[h264 @ 0x55b72799a340] mmco: unref short failure
[h264 @ 0x55b71b530700] mmco: unref short failure
[h264 @ 0x55b71b530700] mmco: unref short failure
[h264 @ 0x556da12c9bc0] mmco: unref short failure
[h264 @ 0x556daf6235c0] mmco: unref short failure
 20%|█▉        | 382/1945 [1:59:39<6:49:18, 15.71s/it] 20%|█▉        | 383/1945 [1:59:49<6:01:38, 13.89s/it][h264 @ 0x55b72b0b8dc0] mmco: unref short failure
[h264 @ 0x556d95140f40] mmco: unref short failure
[h264 @ 0x55b718881f80] mmco: unref short failure
[h264 @ 0x55b718881f80] mmco: unref short failure
[h264 @ 0x55b718881f80] mmco: unref short failure
[h264 @ 0x556d8e7dfd00] mmco: unref short failure
[h264 @ 0x556d8e7dfd00] mmco: unref short failure
 20%|█▉        | 384/1945 [2:00:00<5:38:58, 13.03s/it] 20%|█▉        | 385/1945 [2:00:09<5:04:47, 11.72s/it] 20%|█▉        | 386/1945 [2:00:12<4:02:48,  9.34s/it] 20%|█▉        | 387/1945 [2:00:16<3:19:24,  7.68s/it] 20%|█▉        | 388/1945 [2:00:20<2:49:03,  6.51s/it]/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b7ca865580] mmco: unref short failure
[h264 @ 0x55b7ca865580] mmco: unref short failure
[h264 @ 0x55b7ca865580] mmco: unref short failure
[h264 @ 0x55b7ca865580] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e51bb7400] mmco: unref short failure
[h264 @ 0x556e51bb7400] mmco: unref short failure
[h264 @ 0x55b7cb429ec0] mmco: unref short failure
[h264 @ 0x556e427b7f40] mmco: unref short failure
[h264 @ 0x556e427b7f40] mmco: unref short failure
[h264 @ 0x556e427b7f40] mmco: unref short failure
[h264 @ 0x556e427b7f40] mmco: unref short failure
[h264 @ 0x55e4ffc89380] mmco: unref short failure
[h264 @ 0x55e4ffc89380] mmco: unref short failure
[h264 @ 0x55e4ffc89380] mmco: unref short failure
[h264 @ 0x55e4ffc89380] mmco: unref short failure
[h264 @ 0x556e51bf6c00] mmco: unref short failure
[h264 @ 0x55b7cb486fc0] mmco: unref short failure
[h264 @ 0x55b7cb486fc0] mmco: unref short failure
[h264 @ 0x55b7cb486fc0] mmco: unref short failure
[h264 @ 0x55b7cb486fc0] mmco: unref short failure
[h264 @ 0x55b7cb368e40] mmco: unref short failure
[h264 @ 0x556e5299ae00] mmco: unref short failure
[h264 @ 0x556e5299ae00] mmco: unref short failure
[h264 @ 0x55b7cb53efc0] mmco: unref short failure
[h264 @ 0x556e52b31f00] mmco: unref short failure
[h264 @ 0x556e52831440] mmco: unref short failure
[h264 @ 0x55b7cf6bb680] mmco: unref short failure
[h264 @ 0x55b7cf6bb680] mmco: unref short failure
[h264 @ 0x556e52d05b80] mmco: unref short failure
[h264 @ 0x556e52d05b80] mmco: unref short failure
[h264 @ 0x556e52d05b80] mmco: unref short failure
[h264 @ 0x556e52d05b80] mmco: unref short failure
[h264 @ 0x556e52d05b80] mmco: unref short failure
[h264 @ 0x556e52d05b80] mmco: unref short failure
[h264 @ 0x55e4fcdd2680] mmco: unref short failure
[h264 @ 0x55b7cbe7ffc0] mmco: unref short failure
[h264 @ 0x55b7cbe7ffc0] mmco: unref short failure
[h264 @ 0x55b7cbb06280] mmco: unref short failure
[h264 @ 0x55b7cce54480] mmco: unref short failure
[h264 @ 0x55b7cce54480] mmco: unref short failure
[h264 @ 0x55b7cbb06280] mmco: unref short failure
[h264 @ 0x55b7cbb06280] mmco: unref short failure
[h264 @ 0x55b7cce54480] mmco: unref short failure
[h264 @ 0x55b7cce54480] mmco: unref short failure
[h264 @ 0x55b7cce54480] mmco: unref short failure
[h264 @ 0x55b7cce54480] mmco: unref short failure
[h264 @ 0x55e4fee6dd40] mmco: unref short failure
[h264 @ 0x556e53ccd580] mmco: unref short failure
[h264 @ 0x556e53ccd580] mmco: unref short failure
[h264 @ 0x556e4804eb80] mmco: unref short failure
[h264 @ 0x556e4804eb80] mmco: unref short failure
[h264 @ 0x55e500dd04c0] mmco: unref short failure
[h264 @ 0x55e500dd04c0] mmco: unref short failure
[h264 @ 0x55e500dd04c0] mmco: unref short failure
[h264 @ 0x55e500dd04c0] mmco: unref short failure
[h264 @ 0x556e42f8a840] mmco: unref short failure
[h264 @ 0x55e4ffc63380] mmco: unref short failure
[h264 @ 0x55e4ffc63380] mmco: unref short failure
[h264 @ 0x556e558d8040] mmco: unref short failure
[h264 @ 0x556e45307b80] mmco: unref short failure
[h264 @ 0x55b7cdbf1980] mmco: unref short failure
[h264 @ 0x55b7cdbf1980] mmco: unref short failure
[h264 @ 0x556e583ba000] mmco: unref short failure
[h264 @ 0x556e583ba000] mmco: unref short failure
[h264 @ 0x556e52e6dc00] mmco: unref short failure
 20%|██        | 389/1945 [2:02:43<20:27:36, 47.34s/it][h264 @ 0x556e43c38240] mmco: unref short failure
[h264 @ 0x556e52e5ff40] mmco: unref short failure
[h264 @ 0x556e52e5ff40] mmco: unref short failure
[h264 @ 0x556e52e5ff40] mmco: unref short failure
[h264 @ 0x556e52e5ff40] mmco: unref short failure
[h264 @ 0x556e52e5ff40] mmco: unref short failure
[h264 @ 0x556e437eb300] mmco: unref short failure
[h264 @ 0x556e437eb300] mmco: unref short failure
[h264 @ 0x556e57768f40] mmco: unref short failure
[h264 @ 0x556e57768f40] mmco: unref short failure
 20%|██        | 390/1945 [2:02:50<15:14:25, 35.28s/it][h264 @ 0x556e42a60340] mmco: unref short failure
[h264 @ 0x556e42a60340] mmco: unref short failure
 20%|██        | 391/1945 [2:02:58<11:41:47, 27.10s/it] 20%|██        | 392/1945 [2:03:05<9:09:01, 21.21s/it] [h264 @ 0x556e5655dfc0] mmco: unref short failure
[h264 @ 0x556e5655dfc0] mmco: unref short failure
 20%|██        | 393/1945 [2:03:12<7:20:38, 17.04s/it][h264 @ 0x556e5c8511c0] mmco: unref short failure
[h264 @ 0x556e5c8511c0] mmco: unref short failure
[h264 @ 0x556e5724a100] mmco: unref short failure
 20%|██        | 394/1945 [2:03:20<6:08:03, 14.24s/it][h264 @ 0x55e4fd9bc400] mmco: unref short failure
[h264 @ 0x55e4fd9bc400] mmco: unref short failure
[h264 @ 0x556e56407640] mmco: unref short failure
 20%|██        | 395/1945 [2:03:28<5:17:15, 12.28s/it][h264 @ 0x55e4fcd7a700] mmco: unref short failure
[h264 @ 0x55e4fcd7a700] mmco: unref short failure
[h264 @ 0x55b7d49ad580] mmco: unref short failure
[h264 @ 0x55b7d49ad580] mmco: unref short failure
[h264 @ 0x55b7ccc4ff40] mmco: unref short failure
[h264 @ 0x55b7ccc4ff40] mmco: unref short failure
 20%|██        | 396/1945 [2:03:35<4:39:27, 10.82s/it][h264 @ 0x55b7cff819c0] mmco: unref short failure
[h264 @ 0x556e46c81880] mmco: unref short failure
[h264 @ 0x556e46c81880] mmco: unref short failure
[h264 @ 0x556e571bbe80] mmco: unref short failure
[h264 @ 0x556e4937f300] mmco: unref short failure
[h264 @ 0x556e4937f300] mmco: unref short failure
[h264 @ 0x556e44b67b00] mmco: unref short failure
[h264 @ 0x556e44b67b00] mmco: unref short failure
[h264 @ 0x556e44b67b00] mmco: unref short failure
[h264 @ 0x556e44b67b00] mmco: unref short failure
[h264 @ 0x55e4fd9c94c0] mmco: unref short failure
[h264 @ 0x556e57c7fa00] mmco: unref short failure
[h264 @ 0x55e4ffc46140] mmco: unref short failure
[h264 @ 0x556e528389c0] mmco: unref short failure
[h264 @ 0x556e528389c0] mmco: unref short failure
[h264 @ 0x55e4ff04a340] mmco: unref short failure
[h264 @ 0x55e4ff04a340] mmco: unref short failure
[h264 @ 0x556e42ac5280] mmco: unref short failure
[h264 @ 0x556e42ac5280] mmco: unref short failure
[h264 @ 0x556e530d1180] mmco: unref short failure
[h264 @ 0x556e530d1180] mmco: unref short failure
[h264 @ 0x55b7ced01900] mmco: unref short failure
[h264 @ 0x55e5084a6840] mmco: unref short failure
[h264 @ 0x55e5084a6840] mmco: unref short failure
[h264 @ 0x55e5084a6840] mmco: unref short failure
[h264 @ 0x556e575da0c0] mmco: unref short failure
[h264 @ 0x556e575da0c0] mmco: unref short failure
[h264 @ 0x556e5aecb0c0] mmco: unref short failure
[h264 @ 0x556e5aecb0c0] mmco: unref short failure
[h264 @ 0x556e5aecb0c0] mmco: unref short failure
[h264 @ 0x556e5aecb0c0] mmco: unref short failure
[h264 @ 0x556e5aecb0c0] mmco: unref short failure
[h264 @ 0x556e5aecb0c0] mmco: unref short failure
[h264 @ 0x556e5aecb0c0] mmco: unref short failure
[h264 @ 0x556e5aecb0c0] mmco: unref short failure
[h264 @ 0x556e5aecb0c0] mmco: unref short failure
[h264 @ 0x556e5aecb0c0] mmco: unref short failure
[h264 @ 0x556e4367ef40] mmco: unref short failure
[h264 @ 0x55e501d29bc0] mmco: unref short failure
[h264 @ 0x55e501d29bc0] mmco: unref short failure
[h264 @ 0x556e42a04e00] mmco: unref short failure
[h264 @ 0x55e4fda1f140] mmco: unref short failure
[h264 @ 0x55e4fda1f140] mmco: unref short failure
[h264 @ 0x55b7d19d9040] mmco: unref short failure
[h264 @ 0x55e500a20380] mmco: unref short failure
 20%|██        | 397/1945 [2:04:50<12:56:22, 30.09s/it][h264 @ 0x556e52b9ec40] mmco: unref short failure
 20%|██        | 398/1945 [2:04:58<10:01:51, 23.34s/it][h264 @ 0x55b7cf21be80] mmco: unref short failure
 21%|██        | 399/1945 [2:05:06<7:59:50, 18.62s/it] 09/09/2024 17:30:34 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 17:30:34 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e483cdc80] mmco: unref short failure
[h264 @ 0x556e483cdc80] mmco: unref short failure
[h264 @ 0x556e483cdc80] mmco: unref short failure
[h264 @ 0x556e483cdc80] mmco: unref short failure
[h264 @ 0x55e50430ab80] mmco: unref short failure
[h264 @ 0x55e50430ab80] mmco: unref short failure
[h264 @ 0x55b7ca23f8c0] mmco: unref short failure
[h264 @ 0x556e55396a40] mmco: unref short failure
[h264 @ 0x556e55396a40] mmco: unref short failure
[h264 @ 0x55b7d3e53200] mmco: unref short failure
[h264 @ 0x55b7cb7cccc0] mmco: unref short failure
[h264 @ 0x55b7cb7cccc0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e4ff8cc580] mmco: unref short failure
[h264 @ 0x55e4ff8cc580] mmco: unref short failure
[h264 @ 0x55b7ce2076c0] mmco: unref short failure
[h264 @ 0x556e42931940] mmco: unref short failure
[h264 @ 0x55b7d09e2380] mmco: unref short failure
[h264 @ 0x55b7d09e2380] mmco: unref short failure
[h264 @ 0x556e543af600] mmco: unref short failure
[h264 @ 0x556e543af600] mmco: unref short failure
[h264 @ 0x556e543af600] mmco: unref short failure
[h264 @ 0x556e543af600] mmco: unref short failure
[h264 @ 0x55e505fd3800] mmco: unref short failure
[h264 @ 0x556e54398480] mmco: unref short failure
[h264 @ 0x556e54398480] mmco: unref short failure
[h264 @ 0x556e45ef4880] mmco: unref short failure
[h264 @ 0x556e45ef4880] mmco: unref short failure
[h264 @ 0x55b7d8ef0d80] mmco: unref short failure
[h264 @ 0x55e50650d880] mmco: unref short failure
[h264 @ 0x55e50650d880] mmco: unref short failure
[h264 @ 0x556e608d1180] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:25,  8.62it/s][A[h264 @ 0x556e5b5ad640] mmco: unref short failure

  1%|          | 2/221 [00:00<01:07,  3.22it/s][A
  1%|▏         | 3/221 [00:00<00:47,  4.57it/s][A
  2%|▏         | 5/221 [00:00<00:38,  5.60it/s][A
  3%|▎         | 6/221 [00:01<00:34,  6.31it/s][A
  3%|▎         | 7/221 [00:01<00:38,  5.49it/s][A
  4%|▎         | 8/221 [00:01<00:45,  4.69it/s][A
  4%|▍         | 9/221 [00:01<00:48,  4.37it/s][A
  5%|▍         | 10/221 [00:03<01:57,  1.79it/s][A
  5%|▍         | 11/221 [00:03<01:33,  2.25it/s][A
  5%|▌         | 12/221 [00:03<01:11,  2.92it/s][A
  6%|▌         | 13/221 [00:03<01:13,  2.83it/s][A
  6%|▋         | 14/221 [00:05<02:55,  1.18it/s][A
  7%|▋         | 15/221 [00:06<02:15,  1.52it/s][A
  7%|▋         | 16/221 [00:06<02:06,  1.62it/s][A
  8%|▊         | 17/221 [00:07<02:23,  1.42it/s][A
  8%|▊         | 18/221 [00:07<01:55,  1.76it/s][A
  9%|▉         | 20/221 [00:08<01:13,  2.75it/s][A
 10%|▉         | 21/221 [00:08<01:02,  3.18it/s][A
 10%|█         | 23/221 [00:08<00:43,  4.56it/s][A
 11%|█         | 24/221 [00:08<00:39,  4.99it/s][A
 11%|█▏        | 25/221 [00:08<00:35,  5.52it/s][A
 12%|█▏        | 26/221 [00:08<00:41,  4.74it/s][A
 12%|█▏        | 27/221 [00:09<00:36,  5.29it/s][A
 13%|█▎        | 28/221 [00:09<00:47,  4.03it/s][A
 13%|█▎        | 29/221 [00:12<02:59,  1.07it/s][A
 14%|█▎        | 30/221 [00:12<02:16,  1.40it/s][A
 14%|█▍        | 31/221 [00:12<01:49,  1.73it/s][A
 14%|█▍        | 32/221 [00:12<01:25,  2.21it/s][A
 15%|█▍        | 33/221 [00:13<01:25,  2.20it/s][A[h264 @ 0x55b7cbdb02c0] mmco: unref short failure

 15%|█▌        | 34/221 [00:13<01:08,  2.73it/s][A
 16%|█▌        | 35/221 [00:13<01:04,  2.87it/s][A
 16%|█▋        | 36/221 [00:13<00:56,  3.25it/s][A
 17%|█▋        | 37/221 [00:14<00:50,  3.64it/s][A[h264 @ 0x55e508be5e80] mmco: unref short failure
[h264 @ 0x55e508be5e80] mmco: unref short failure
[h264 @ 0x55e508be5e80] mmco: unref short failure
[h264 @ 0x55e508be5e80] mmco: unref short failure

 17%|█▋        | 38/221 [00:14<00:53,  3.41it/s][A
 18%|█▊        | 39/221 [00:14<01:05,  2.77it/s][A[h264 @ 0x556e582d9800] mmco: unref short failure
[h264 @ 0x55b7cbda24c0] mmco: unref short failure

 18%|█▊        | 40/221 [00:15<00:59,  3.03it/s][A
 19%|█▊        | 41/221 [00:15<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:15<00:32,  5.47it/s][A
 20%|██        | 45/221 [00:15<00:31,  5.57it/s][A[h264 @ 0x556e4be1ea40] mmco: unref short failure

 21%|██        | 46/221 [00:15<00:29,  5.90it/s][A
 21%|██▏       | 47/221 [00:16<00:32,  5.33it/s][A
 22%|██▏       | 49/221 [00:16<00:33,  5.14it/s][A
 23%|██▎       | 50/221 [00:18<01:35,  1.80it/s][A
 24%|██▎       | 52/221 [00:18<01:09,  2.45it/s][A
 24%|██▍       | 54/221 [00:18<00:51,  3.26it/s][A
 25%|██▍       | 55/221 [00:19<00:46,  3.55it/s][A
 25%|██▌       | 56/221 [00:19<00:43,  3.82it/s][A
 26%|██▌       | 57/221 [00:19<00:41,  4.00it/s][A
 26%|██▌       | 58/221 [00:19<00:38,  4.26it/s][A
 27%|██▋       | 59/221 [00:20<00:42,  3.82it/s][A
 27%|██▋       | 60/221 [00:20<00:40,  3.96it/s][A
 28%|██▊       | 61/221 [00:20<00:35,  4.46it/s][A
 28%|██▊       | 62/221 [00:20<00:37,  4.23it/s][A
 29%|██▊       | 63/221 [00:21<00:47,  3.30it/s][A
 29%|██▉       | 64/221 [00:21<00:40,  3.88it/s][A
 29%|██▉       | 65/221 [00:21<00:34,  4.55it/s][A
 30%|██▉       | 66/221 [00:21<00:29,  5.25it/s][A
 30%|███       | 67/221 [00:21<00:32,  4.68it/s][A
 31%|███       | 68/221 [00:21<00:29,  5.26it/s][A
 31%|███       | 69/221 [00:22<00:39,  3.80it/s][A
 32%|███▏      | 70/221 [00:22<00:35,  4.23it/s][A
 32%|███▏      | 71/221 [00:23<00:51,  2.93it/s][A
 33%|███▎      | 72/221 [00:23<00:44,  3.38it/s][A
 33%|███▎      | 73/221 [00:23<00:48,  3.08it/s][A
 33%|███▎      | 74/221 [00:23<00:38,  3.78it/s][A
 34%|███▍      | 75/221 [00:24<00:48,  3.03it/s][A
 34%|███▍      | 76/221 [00:24<00:37,  3.82it/s][A
 35%|███▍      | 77/221 [00:24<00:36,  3.94it/s][A
 35%|███▌      | 78/221 [00:25<00:41,  3.45it/s][A
 36%|███▌      | 79/221 [00:25<00:39,  3.58it/s][A
 36%|███▌      | 80/221 [00:25<00:34,  4.11it/s][A
 37%|███▋      | 82/221 [00:26<00:39,  3.56it/s][A
 38%|███▊      | 83/221 [00:28<02:04,  1.10it/s][A
 38%|███▊      | 84/221 [00:29<01:40,  1.37it/s][A
 38%|███▊      | 85/221 [00:29<01:16,  1.77it/s][A
 39%|███▉      | 86/221 [00:29<00:59,  2.25it/s][A
 39%|███▉      | 87/221 [00:29<01:00,  2.21it/s][A
 40%|███▉      | 88/221 [00:30<00:52,  2.54it/s][A
 40%|████      | 89/221 [00:30<00:50,  2.62it/s][A
 41%|████      | 90/221 [00:30<00:50,  2.61it/s][A
 41%|████      | 91/221 [00:31<00:45,  2.84it/s][A
 42%|████▏     | 92/221 [00:31<00:41,  3.08it/s][A
 42%|████▏     | 93/221 [00:31<00:38,  3.28it/s][A
 43%|████▎     | 94/221 [00:31<00:33,  3.82it/s][A
 43%|████▎     | 95/221 [00:33<01:10,  1.79it/s][A
 43%|████▎     | 96/221 [00:33<00:53,  2.33it/s][A
 44%|████▍     | 97/221 [00:33<00:44,  2.76it/s][A
 44%|████▍     | 98/221 [00:33<00:43,  2.85it/s][A
 45%|████▌     | 100/221 [00:34<00:30,  4.03it/s][A
 46%|████▌     | 102/221 [00:34<00:21,  5.58it/s][A
 47%|████▋     | 103/221 [00:34<00:20,  5.63it/s][A
 47%|████▋     | 104/221 [00:34<00:18,  6.16it/s][A
 48%|████▊     | 105/221 [00:34<00:19,  5.85it/s][A
 48%|████▊     | 106/221 [00:34<00:18,  6.19it/s][A
 48%|████▊     | 107/221 [00:34<00:17,  6.63it/s][A
 49%|████▉     | 108/221 [00:35<00:17,  6.34it/s][A
 49%|████▉     | 109/221 [00:35<00:19,  5.64it/s][A
 50%|████▉     | 110/221 [00:35<00:22,  4.97it/s][A
 50%|█████     | 111/221 [00:35<00:27,  4.01it/s][A
 51%|█████     | 112/221 [00:36<00:26,  4.16it/s][A
 51%|█████     | 113/221 [00:36<00:26,  4.09it/s][A
 52%|█████▏    | 114/221 [00:36<00:30,  3.54it/s][A
 52%|█████▏    | 116/221 [00:37<00:23,  4.45it/s][A
 53%|█████▎    | 117/221 [00:37<00:24,  4.27it/s][A
 53%|█████▎    | 118/221 [00:37<00:23,  4.33it/s][A
 54%|█████▍    | 119/221 [00:37<00:21,  4.82it/s][A
 54%|█████▍    | 120/221 [00:37<00:21,  4.61it/s][A
 55%|█████▌    | 122/221 [00:38<00:16,  5.97it/s][A
 56%|█████▌    | 124/221 [00:38<00:16,  5.97it/s][A
 57%|█████▋    | 125/221 [00:38<00:16,  5.72it/s][A
 57%|█████▋    | 126/221 [00:38<00:15,  6.03it/s][A
 57%|█████▋    | 127/221 [00:39<00:18,  5.17it/s][A
 58%|█████▊    | 128/221 [00:39<00:21,  4.33it/s][A
 59%|█████▉    | 130/221 [00:39<00:18,  4.97it/s][A
 59%|█████▉    | 131/221 [00:39<00:17,  5.11it/s][A
 60%|█████▉    | 132/221 [00:40<00:19,  4.64it/s][A
 60%|██████    | 133/221 [00:40<00:21,  4.16it/s][A
 61%|██████    | 134/221 [00:40<00:17,  4.89it/s][A[h264 @ 0x55b7cc14f9c0] mmco: unref short failure
[h264 @ 0x55b7cc14f9c0] mmco: unref short failure

 61%|██████    | 135/221 [00:40<00:16,  5.09it/s][A
 62%|██████▏   | 136/221 [00:41<00:16,  5.02it/s][A
 62%|██████▏   | 137/221 [00:41<00:16,  5.14it/s][A
 62%|██████▏   | 138/221 [00:41<00:18,  4.48it/s][A
 63%|██████▎   | 139/221 [00:41<00:15,  5.16it/s][A
 63%|██████▎   | 140/221 [00:41<00:13,  5.90it/s][A
 64%|██████▍   | 141/221 [00:41<00:12,  6.40it/s][A
 64%|██████▍   | 142/221 [00:42<00:16,  4.89it/s][A
 65%|██████▍   | 143/221 [00:42<00:14,  5.54it/s][A
 65%|██████▌   | 144/221 [00:42<00:14,  5.28it/s][A[h264 @ 0x55e507d22040] mmco: unref short failure

 66%|██████▌   | 145/221 [00:42<00:16,  4.70it/s][A
 66%|██████▌   | 146/221 [00:42<00:15,  4.90it/s][A
 67%|██████▋   | 147/221 [00:43<00:13,  5.43it/s][A
 67%|██████▋   | 148/221 [00:43<00:17,  4.23it/s][A
 67%|██████▋   | 149/221 [00:43<00:15,  4.75it/s][A
 68%|██████▊   | 150/221 [00:43<00:15,  4.60it/s][A
 68%|██████▊   | 151/221 [00:44<00:33,  2.10it/s][A
 69%|██████▉   | 152/221 [00:45<00:34,  1.98it/s][A
 69%|██████▉   | 153/221 [00:45<00:30,  2.24it/s][A
 70%|██████▉   | 154/221 [00:45<00:23,  2.83it/s][A
 70%|███████   | 155/221 [00:46<00:18,  3.56it/s][A
 71%|███████   | 156/221 [00:46<00:15,  4.23it/s][A
 71%|███████   | 157/221 [00:46<00:14,  4.32it/s][A
 72%|███████▏  | 159/221 [00:46<00:10,  6.16it/s][A
 72%|███████▏  | 160/221 [00:46<00:09,  6.16it/s][A
 73%|███████▎  | 161/221 [00:46<00:10,  5.97it/s][A
 74%|███████▍  | 163/221 [00:47<00:09,  6.13it/s][A
 74%|███████▍  | 164/221 [00:47<00:09,  5.91it/s][A
 75%|███████▌  | 166/221 [00:47<00:08,  6.63it/s][A
 76%|███████▌  | 167/221 [00:47<00:07,  7.02it/s][A
 76%|███████▌  | 168/221 [00:47<00:07,  7.17it/s][A
 76%|███████▋  | 169/221 [00:48<00:06,  7.63it/s][A
 77%|███████▋  | 170/221 [00:48<00:08,  6.33it/s][A
 77%|███████▋  | 171/221 [00:48<00:11,  4.21it/s][A
 78%|███████▊  | 172/221 [00:48<00:10,  4.61it/s][A
 78%|███████▊  | 173/221 [00:49<00:09,  4.99it/s][A
 79%|███████▊  | 174/221 [00:49<00:15,  3.10it/s][A
 79%|███████▉  | 175/221 [00:50<00:18,  2.48it/s][A
 80%|███████▉  | 176/221 [00:50<00:14,  3.12it/s][A
 80%|████████  | 177/221 [00:50<00:11,  3.87it/s][A
 81%|████████  | 178/221 [00:50<00:10,  3.98it/s][A
 81%|████████  | 179/221 [00:50<00:10,  3.91it/s][A
 81%|████████▏ | 180/221 [00:51<00:09,  4.33it/s][A[h264 @ 0x55b7de6bb540] mmco: unref short failure

 82%|████████▏ | 181/221 [00:51<00:08,  5.00it/s][A
 82%|████████▏ | 182/221 [00:51<00:06,  5.64it/s][A
 83%|████████▎ | 184/221 [00:51<00:07,  5.27it/s][A
 84%|████████▍ | 186/221 [00:52<00:06,  5.60it/s][A
 85%|████████▍ | 187/221 [00:52<00:05,  6.16it/s][A
 85%|████████▌ | 188/221 [00:52<00:07,  4.47it/s][A
 86%|████████▌ | 189/221 [00:52<00:07,  4.15it/s][A
 86%|████████▌ | 190/221 [00:53<00:07,  4.12it/s][A
 86%|████████▋ | 191/221 [00:53<00:06,  4.88it/s][A
 87%|████████▋ | 192/221 [00:53<00:05,  5.61it/s][A
 88%|████████▊ | 194/221 [00:53<00:04,  5.61it/s][A
 88%|████████▊ | 195/221 [00:53<00:04,  6.04it/s][A
 89%|████████▊ | 196/221 [00:54<00:09,  2.67it/s][A
 89%|████████▉ | 197/221 [00:55<00:07,  3.22it/s][A
 90%|████████▉ | 198/221 [00:55<00:06,  3.73it/s][A
 90%|█████████ | 199/221 [00:55<00:04,  4.50it/s][A
 90%|█████████ | 200/221 [00:55<00:04,  4.82it/s][A
 91%|█████████ | 201/221 [00:55<00:03,  5.20it/s][A
 91%|█████████▏| 202/221 [00:55<00:04,  4.36it/s][A
 92%|█████████▏| 204/221 [00:56<00:05,  3.15it/s][A
 93%|█████████▎| 205/221 [00:56<00:04,  3.70it/s][A
 93%|█████████▎| 206/221 [00:57<00:05,  2.84it/s][A
 94%|█████████▎| 207/221 [00:57<00:05,  2.66it/s][A
 94%|█████████▍| 208/221 [00:58<00:03,  3.29it/s][A
 95%|█████████▍| 209/221 [00:58<00:03,  3.98it/s][A
 95%|█████████▌| 211/221 [00:58<00:02,  4.42it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  4.47it/s][A
 96%|█████████▋| 213/221 [00:59<00:01,  4.32it/s][A
 97%|█████████▋| 214/221 [00:59<00:01,  4.32it/s][A
 97%|█████████▋| 215/221 [00:59<00:01,  4.76it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  4.65it/s][A
 98%|█████████▊| 217/221 [00:59<00:00,  4.22it/s][A
 99%|█████████▊| 218/221 [01:00<00:00,  4.59it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  4.96it/s][A
100%|█████████▉| 220/221 [01:00<00:00,  4.57it/s][A
100%|██████████| 221/221 [01:00<00:00,  4.36it/s][A100%|██████████| 221/221 [01:00<00:00,  3.64it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.78it/s][A
  1%|          | 2/221 [00:00<00:57,  3.78it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.78it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.78it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.78it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.78it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.78it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.78it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.78it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.78it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.78it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.78it/s][A
  6%|▌         | 13/221 [00:03<00:55,  3.78it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.78it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.78it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.78it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.78it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.78it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.78it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.78it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.78it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.78it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.78it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.78it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 28/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.78it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.78it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.78it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.78it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.78it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.78it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.78it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.78it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.77it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.77it/s][A
 19%|█▉        | 43/221 [00:11<00:47,  3.78it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.78it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.78it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.78it/s][A
 21%|██▏       | 47/221 [00:12<00:46,  3.78it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.78it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.78it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.78it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.78it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.78it/s][A
 24%|██▍       | 53/221 [00:14<00:44,  3.78it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.78it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.78it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.78it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.78it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.78it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.78it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.78it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.78it/s][A
 28%|██▊       | 62/221 [00:16<00:42,  3.78it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.78it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.78it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.78it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.78it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.78it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.78it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.78it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.78it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.78it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.78it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.78it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.78it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.78it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.78it/s][A
 37%|███▋      | 81/221 [00:21<00:37,  3.78it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.78it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.78it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.78it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 87/221 [00:23<00:35,  3.78it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.78it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.78it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.78it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.78it/s][A
 43%|████▎     | 96/221 [00:25<00:33,  3.78it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.78it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.78it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.78it/s][A
 45%|████▌     | 100/221 [00:26<00:32,  3.78it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.78it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.78it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.78it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 106/221 [00:28<00:30,  3.78it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.78it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.78it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.78it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.78it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.78it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.78it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.78it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 115/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.78it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.78it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.78it/s][A
 55%|█████▍    | 121/221 [00:32<00:26,  3.78it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.78it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.78it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.78it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.78it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.78it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 134/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 140/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.78it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.78it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.78it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.78it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.78it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.78it/s][A
 70%|███████   | 155/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.78it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.78it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.78it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.78it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.78it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.78it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.78it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.78it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.78it/s][A
 76%|███████▌  | 168/221 [00:44<00:14,  3.78it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.78it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.78it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.78it/s][A
 79%|███████▊  | 174/221 [00:46<00:12,  3.78it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.78it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.78it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.78it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.78it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.78it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.78it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.78it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.78it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 189/221 [00:50<00:08,  3.78it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.78it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 193/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [00:56<00:02,  3.78it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.78it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.78it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.78it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.78it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.78it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.78it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.78it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:40,  5.37it/s][A
  1%|          | 2/221 [00:00<00:41,  5.32it/s][A
  1%|▏         | 3/221 [00:00<00:45,  4.82it/s][A
  2%|▏         | 4/221 [00:00<00:43,  5.02it/s][A
  2%|▏         | 5/221 [00:00<00:41,  5.20it/s][A
  3%|▎         | 7/221 [00:01<00:39,  5.39it/s][A
  4%|▎         | 8/221 [00:01<00:41,  5.13it/s][A
  4%|▍         | 9/221 [00:01<00:40,  5.28it/s][A
  5%|▍         | 10/221 [00:02<01:06,  3.15it/s][A
  5%|▍         | 11/221 [00:02<00:59,  3.51it/s][A
  5%|▌         | 12/221 [00:02<00:49,  4.20it/s][A
  6%|▌         | 13/221 [00:03<01:23,  2.48it/s][A
  7%|▋         | 15/221 [00:03<00:58,  3.51it/s][A
  7%|▋         | 16/221 [00:04<01:01,  3.35it/s][A
  8%|▊         | 17/221 [00:04<01:23,  2.43it/s][A
  8%|▊         | 18/221 [00:05<01:17,  2.62it/s][A
  9%|▊         | 19/221 [00:05<01:09,  2.89it/s][A
  9%|▉         | 20/221 [00:05<00:56,  3.53it/s][A
 10%|▉         | 21/221 [00:05<00:47,  4.20it/s][A
 10%|▉         | 22/221 [00:05<00:43,  4.60it/s][A
 10%|█         | 23/221 [00:05<00:36,  5.39it/s][A
 11%|█         | 24/221 [00:06<00:37,  5.28it/s][A
 11%|█▏        | 25/221 [00:06<00:38,  5.13it/s][A
 12%|█▏        | 26/221 [00:06<00:44,  4.37it/s][A
 13%|█▎        | 28/221 [00:07<00:44,  4.38it/s][A
 13%|█▎        | 29/221 [00:07<00:41,  4.67it/s][A
 14%|█▎        | 30/221 [00:07<00:43,  4.42it/s][A
 14%|█▍        | 31/221 [00:07<00:40,  4.73it/s][A
 15%|█▍        | 33/221 [00:07<00:33,  5.63it/s][A
 15%|█▌        | 34/221 [00:08<00:31,  5.97it/s][A
 16%|█▌        | 35/221 [00:08<00:33,  5.48it/s][A
 16%|█▋        | 36/221 [00:08<00:38,  4.75it/s][A
 17%|█▋        | 37/221 [00:08<00:40,  4.53it/s][A
 17%|█▋        | 38/221 [00:09<00:48,  3.75it/s][A
 18%|█▊        | 39/221 [00:09<00:43,  4.20it/s][A
 18%|█▊        | 40/221 [00:09<00:45,  3.96it/s][A
 19%|█▊        | 41/221 [00:09<00:38,  4.67it/s][A
 19%|█▉        | 42/221 [00:10<00:51,  3.50it/s][A
 19%|█▉        | 43/221 [00:10<00:58,  3.05it/s][A
 20%|█▉        | 44/221 [00:11<00:56,  3.13it/s][A
 20%|██        | 45/221 [00:11<00:48,  3.60it/s][A
 21%|██        | 46/221 [00:11<00:43,  4.04it/s][A
 21%|██▏       | 47/221 [00:11<00:45,  3.86it/s][A
 22%|██▏       | 48/221 [00:11<00:40,  4.31it/s][A
 22%|██▏       | 49/221 [00:12<00:39,  4.32it/s][A
 23%|██▎       | 50/221 [00:12<00:39,  4.32it/s][A
 23%|██▎       | 51/221 [00:12<00:32,  5.16it/s][A
 24%|██▎       | 52/221 [00:12<00:33,  5.05it/s][A
 24%|██▍       | 53/221 [00:12<00:29,  5.75it/s][A
 24%|██▍       | 54/221 [00:13<00:44,  3.71it/s][A
 25%|██▍       | 55/221 [00:13<00:50,  3.32it/s][A
 25%|██▌       | 56/221 [00:13<00:41,  4.02it/s][A
 26%|██▌       | 57/221 [00:13<00:41,  3.94it/s][A
 26%|██▌       | 58/221 [00:14<00:44,  3.68it/s][A
 27%|██▋       | 59/221 [00:14<00:43,  3.71it/s][A
 27%|██▋       | 60/221 [00:14<00:47,  3.38it/s][A
 28%|██▊       | 61/221 [00:15<00:41,  3.83it/s][A
 28%|██▊       | 62/221 [00:15<00:40,  3.93it/s][A
 29%|██▊       | 63/221 [00:15<00:36,  4.33it/s][A
 29%|██▉       | 64/221 [00:15<00:38,  4.08it/s][A
 29%|██▉       | 65/221 [00:15<00:32,  4.84it/s][A
 30%|██▉       | 66/221 [00:16<00:46,  3.35it/s][A
 30%|███       | 67/221 [00:16<00:51,  3.00it/s][A
 31%|███       | 68/221 [00:16<00:42,  3.60it/s][A
 31%|███       | 69/221 [00:17<01:00,  2.52it/s][A
 32%|███▏      | 70/221 [00:17<00:49,  3.03it/s][A
 32%|███▏      | 71/221 [00:18<00:44,  3.40it/s][A
 33%|███▎      | 72/221 [00:18<00:46,  3.17it/s][A
 33%|███▎      | 73/221 [00:18<00:47,  3.14it/s][A
 34%|███▍      | 75/221 [00:19<00:36,  3.99it/s][A
 34%|███▍      | 76/221 [00:19<00:33,  4.39it/s][A
 35%|███▍      | 77/221 [00:19<00:33,  4.33it/s][A
 35%|███▌      | 78/221 [00:19<00:30,  4.74it/s][A
 36%|███▌      | 79/221 [00:20<00:46,  3.06it/s][A
 36%|███▌      | 80/221 [00:20<00:41,  3.39it/s][A
 37%|███▋      | 81/221 [00:20<00:37,  3.74it/s][A
 37%|███▋      | 82/221 [00:20<00:39,  3.55it/s][A
 38%|███▊      | 83/221 [00:21<00:44,  3.09it/s][A
 38%|███▊      | 84/221 [00:21<00:36,  3.77it/s][A
 39%|███▉      | 86/221 [00:21<00:27,  4.89it/s][A
 39%|███▉      | 87/221 [00:22<00:40,  3.34it/s][A
 40%|███▉      | 88/221 [00:22<00:44,  3.00it/s][A
 40%|████      | 89/221 [00:23<00:41,  3.17it/s][A
 41%|████      | 90/221 [00:23<00:41,  3.19it/s][A
 41%|████      | 91/221 [00:23<00:34,  3.72it/s][A
 42%|████▏     | 92/221 [00:23<00:34,  3.75it/s][A
 42%|████▏     | 93/221 [00:24<00:57,  2.24it/s][A
 43%|████▎     | 94/221 [00:25<00:53,  2.37it/s][A
 43%|████▎     | 95/221 [00:25<00:47,  2.67it/s][A
 43%|████▎     | 96/221 [00:25<00:39,  3.13it/s][A
 44%|████▍     | 97/221 [00:25<00:36,  3.41it/s][A
 44%|████▍     | 98/221 [00:26<00:34,  3.54it/s][A
 45%|████▍     | 99/221 [00:26<00:28,  4.33it/s][A
 45%|████▌     | 100/221 [00:26<00:27,  4.33it/s][A
 46%|████▌     | 101/221 [00:26<00:32,  3.64it/s][A
 46%|████▌     | 102/221 [00:27<00:42,  2.82it/s][A
 47%|████▋     | 103/221 [00:27<00:35,  3.32it/s][A
 47%|████▋     | 104/221 [00:27<00:29,  3.91it/s][A
 48%|████▊     | 105/221 [00:27<00:29,  3.93it/s][A
 48%|████▊     | 106/221 [00:28<00:36,  3.16it/s][A
 48%|████▊     | 107/221 [00:28<00:33,  3.43it/s][A
 49%|████▉     | 108/221 [00:28<00:31,  3.64it/s][A
 49%|████▉     | 109/221 [00:28<00:25,  4.32it/s][A
 50%|████▉     | 110/221 [00:29<00:24,  4.51it/s][A
 50%|█████     | 111/221 [00:29<00:25,  4.27it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.89it/s][A
 51%|█████     | 113/221 [00:29<00:27,  3.86it/s][A
 52%|█████▏    | 115/221 [00:30<00:21,  4.95it/s][A
 52%|█████▏    | 116/221 [00:30<00:23,  4.44it/s][A
 53%|█████▎    | 117/221 [00:30<00:23,  4.39it/s][A
 53%|█████▎    | 118/221 [00:30<00:23,  4.43it/s][A
 54%|█████▍    | 119/221 [00:31<00:29,  3.47it/s][A
 54%|█████▍    | 120/221 [00:31<00:27,  3.68it/s][A
 55%|█████▌    | 122/221 [00:31<00:21,  4.63it/s][A
 56%|█████▌    | 123/221 [00:32<00:22,  4.43it/s][A
 56%|█████▌    | 124/221 [00:32<00:23,  4.07it/s][A
 57%|█████▋    | 125/221 [00:32<00:28,  3.41it/s][A
 57%|█████▋    | 126/221 [00:33<00:26,  3.60it/s][A
 57%|█████▋    | 127/221 [00:33<00:30,  3.13it/s][A
 58%|█████▊    | 128/221 [00:33<00:27,  3.39it/s][A
 59%|█████▉    | 130/221 [00:34<00:19,  4.65it/s][A
 60%|█████▉    | 132/221 [00:34<00:17,  5.14it/s][A
 60%|██████    | 133/221 [00:34<00:20,  4.40it/s][A
 61%|██████    | 134/221 [00:35<00:21,  4.14it/s][A
 61%|██████    | 135/221 [00:35<00:24,  3.57it/s][A
 62%|██████▏   | 136/221 [00:35<00:23,  3.66it/s][A
 62%|██████▏   | 137/221 [00:35<00:21,  3.92it/s][A
 62%|██████▏   | 138/221 [00:36<00:24,  3.41it/s][A
 63%|██████▎   | 139/221 [00:36<00:29,  2.81it/s][A
 63%|██████▎   | 140/221 [00:37<00:26,  3.07it/s][A
 64%|██████▍   | 141/221 [00:37<00:24,  3.28it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.76it/s][A
 65%|██████▍   | 143/221 [00:38<00:32,  2.42it/s][A
 65%|██████▌   | 144/221 [00:38<00:34,  2.21it/s][A
 66%|██████▌   | 146/221 [00:38<00:21,  3.54it/s][A
 67%|██████▋   | 147/221 [00:39<00:21,  3.47it/s][A
 67%|██████▋   | 148/221 [00:39<00:22,  3.19it/s][A
 67%|██████▋   | 149/221 [00:39<00:22,  3.24it/s][A
 68%|██████▊   | 150/221 [00:40<00:21,  3.26it/s][A
 68%|██████▊   | 151/221 [00:40<00:22,  3.05it/s][A
 69%|██████▉   | 152/221 [00:41<00:38,  1.80it/s][A
 69%|██████▉   | 153/221 [00:41<00:30,  2.20it/s][A
 70%|██████▉   | 154/221 [00:42<00:25,  2.62it/s][A
 70%|███████   | 155/221 [00:42<00:27,  2.43it/s][A
 71%|███████   | 156/221 [00:43<00:28,  2.32it/s][A
 71%|███████   | 157/221 [00:43<00:24,  2.56it/s][A
 71%|███████▏  | 158/221 [00:43<00:22,  2.85it/s][A
 72%|███████▏  | 159/221 [00:43<00:17,  3.53it/s][A
 72%|███████▏  | 160/221 [00:43<00:15,  3.83it/s][A
 73%|███████▎  | 161/221 [00:44<00:15,  3.76it/s][A
 73%|███████▎  | 162/221 [00:44<00:13,  4.23it/s][A
 74%|███████▍  | 163/221 [00:44<00:13,  4.32it/s][A
 74%|███████▍  | 164/221 [00:44<00:13,  4.32it/s][A
 75%|███████▍  | 165/221 [00:45<00:13,  4.03it/s][A
 75%|███████▌  | 166/221 [00:45<00:13,  4.04it/s][A
 76%|███████▌  | 167/221 [00:45<00:11,  4.84it/s][A
 76%|███████▌  | 168/221 [00:45<00:12,  4.31it/s][A
 76%|███████▋  | 169/221 [00:45<00:11,  4.65it/s][A
 77%|███████▋  | 170/221 [00:46<00:14,  3.58it/s][A
 77%|███████▋  | 171/221 [00:46<00:13,  3.74it/s][A
 78%|███████▊  | 172/221 [00:46<00:10,  4.47it/s][A
 78%|███████▊  | 173/221 [00:47<00:14,  3.29it/s][A
 79%|███████▊  | 174/221 [00:47<00:17,  2.73it/s][A
 79%|███████▉  | 175/221 [00:48<00:16,  2.80it/s][A
 80%|███████▉  | 176/221 [00:48<00:13,  3.39it/s][A
 80%|████████  | 177/221 [00:48<00:10,  4.05it/s][A
 81%|████████  | 178/221 [00:48<00:10,  4.13it/s][A
 81%|████████  | 179/221 [00:48<00:11,  3.81it/s][A
 81%|████████▏ | 180/221 [00:49<00:09,  4.38it/s][A
 82%|████████▏ | 181/221 [00:49<00:08,  4.56it/s][A
 82%|████████▏ | 182/221 [00:49<00:08,  4.35it/s][A
 83%|████████▎ | 183/221 [00:49<00:08,  4.43it/s][A
 83%|████████▎ | 184/221 [00:49<00:07,  4.67it/s][A
 84%|████████▎ | 185/221 [00:50<00:07,  5.04it/s][A
 84%|████████▍ | 186/221 [00:50<00:10,  3.48it/s][A
 85%|████████▍ | 187/221 [00:50<00:10,  3.31it/s][A
 85%|████████▌ | 188/221 [00:51<00:09,  3.33it/s][A
 86%|████████▌ | 189/221 [00:51<00:09,  3.50it/s][A
 86%|████████▌ | 190/221 [00:51<00:09,  3.10it/s][A
 86%|████████▋ | 191/221 [00:52<00:08,  3.66it/s][A
 87%|████████▋ | 192/221 [00:52<00:08,  3.29it/s][A
 87%|████████▋ | 193/221 [00:52<00:06,  4.09it/s][A
 88%|████████▊ | 194/221 [00:52<00:08,  3.33it/s][A
 88%|████████▊ | 195/221 [00:53<00:06,  3.75it/s][A
 89%|████████▊ | 196/221 [00:53<00:07,  3.21it/s][A
 89%|████████▉ | 197/221 [00:53<00:07,  3.26it/s][A
 90%|████████▉ | 198/221 [00:54<00:07,  3.16it/s][A
 90%|█████████ | 199/221 [00:54<00:06,  3.45it/s][A
 90%|█████████ | 200/221 [00:54<00:06,  3.43it/s][A
 91%|█████████ | 201/221 [00:54<00:05,  3.64it/s][A
 91%|█████████▏| 202/221 [00:55<00:05,  3.58it/s][A
 92%|█████████▏| 203/221 [00:55<00:04,  4.00it/s][A
 92%|█████████▏| 204/221 [00:56<00:06,  2.65it/s][A
 93%|█████████▎| 205/221 [00:56<00:04,  3.31it/s][A
 93%|█████████▎| 206/221 [00:56<00:04,  3.29it/s][A
 94%|█████████▎| 207/221 [00:56<00:03,  3.99it/s][A
 94%|█████████▍| 208/221 [00:56<00:03,  4.09it/s][A
 95%|█████████▍| 209/221 [00:57<00:03,  3.67it/s][A
 95%|█████████▌| 211/221 [00:57<00:02,  3.79it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  3.69it/s][A
 96%|█████████▋| 213/221 [00:58<00:01,  4.02it/s][A
 97%|█████████▋| 214/221 [00:58<00:02,  2.96it/s][A
 97%|█████████▋| 215/221 [00:59<00:01,  3.18it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  3.05it/s][A
 98%|█████████▊| 217/221 [00:59<00:01,  3.00it/s][A
 99%|█████████▊| 218/221 [01:00<00:01,  2.98it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  2.76it/s][A
100%|█████████▉| 220/221 [01:00<00:00,  3.11it/s][A
100%|██████████| 221/221 [01:00<00:00,  3.36it/s][A100%|██████████| 221/221 [01:00<00:00,  3.62it/s]
09/09/2024 17:35:58 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 399--===========

09/09/2024 17:35:58 - INFO - __main__ -   {'area_r1': 37.8, 'area_recall': '37.8/63.5/72.2', 'area_ravg': 57.8}
09/09/2024 17:35:58 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 399--===========

09/09/2024 17:35:58 - INFO - __main__ -   {'forward_r1': 33.3, 'forward_recall': '33.3/58.6/68.6', 'forward_ravg': 53.5}
09/09/2024 17:35:58 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 399--===========

09/09/2024 17:35:58 - INFO - __main__ -   {'area_video_r1': 37.9, 'area_video_recall': '37.9/66.9/77.3', 'area_video_ravg': 60.7}
09/09/2024 17:35:58 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 299=======

09/09/2024 17:35:58 - INFO - __main__ -   {'area_video_r1': 40.6, 'area_video_recall': '40.6/66.7/79.0', 'area_video_ravg': 62.1}
09/09/2024 17:35:58 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 399--===========

09/09/2024 17:35:58 - INFO - __main__ -   {'area_video_r1': 50.8, 'area_video_recall': '50.8/73.6/81.7', 'area_video_ravg': 68.7, 'area_video_back_r1': 49.9, 'area_video_back_recall': '49.9/73.0/80.4', 'area_video_back_ravg': 67.8}
09/09/2024 17:35:58 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 17:35:58 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 17:35:58 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 399--===========

09/09/2024 17:35:58 - INFO - __main__ -   {'video_r1': 43.4, 'video_recall': '43.4/70.2/81.4', 'video_ravg': 65.0}
09/09/2024 17:35:58 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 17:35:58 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 17:35:58 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 399--===========

09/09/2024 17:35:58 - INFO - __main__ -   {'video_r1': 51.6, 'video_recall': '51.6/76.4/82.6', 'video_ravg': 70.2}
09/09/2024 17:35:58 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 249=======

09/09/2024 17:35:58 - INFO - __main__ -   {'video_r1': 52.1, 'video_recall': '52.1/76.0/82.5', 'video_ravg': 70.2}
09/09/2024 17:36:17 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.6496357917785645, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.029764210805296898, 'loss_ret%tv%ta--finetune_area/loss_area': 1.312300205230713, 'loss_ret%tv%ta--finetune_area/total_loss': 2.9917001724243164}
 21%|██        | 400/1945 [2:10:51<50:05:26, 116.72s/it] 21%|██        | 401/1945 [2:10:55<35:33:34, 82.91s/it] [h264 @ 0x55b7d2f567c0] mmco: unref short failure
 21%|██        | 402/1945 [2:11:00<25:27:11, 59.39s/it][h264 @ 0x55e500612200] mmco: unref short failure
 21%|██        | 403/1945 [2:11:05<18:28:05, 43.12s/it] 21%|██        | 404/1945 [2:11:10<13:36:19, 31.78s/it][h264 @ 0x55e502be1940] mmco: unref short failure
 21%|██        | 405/1945 [2:11:16<10:16:20, 24.01s/it][h264 @ 0x55b7cbe95d80] mmco: unref short failure
[h264 @ 0x55e4ff51ffc0] mmco: unref short failure
 21%|██        | 406/1945 [2:11:23<8:02:40, 18.82s/it] [h264 @ 0x556e4de23bc0] mmco: unref short failure
 21%|██        | 407/1945 [2:11:30<6:32:30, 15.31s/it][h264 @ 0x55b7cb80aa00] mmco: unref short failure
[h264 @ 0x55b7cb80aa00] mmco: unref short failure
[h264 @ 0x55e507b6ff80] mmco: unref short failure
 21%|██        | 408/1945 [2:11:37<5:32:42, 12.99s/it][h264 @ 0x55b7d1052f00] mmco: unref short failure
[h264 @ 0x55b7d1052f00] mmco: unref short failure
 21%|██        | 409/1945 [2:11:45<4:48:55, 11.29s/it][h264 @ 0x556e56117ac0] mmco: unref short failure
 21%|██        | 410/1945 [2:11:52<4:17:55, 10.08s/it] 21%|██        | 411/1945 [2:12:00<4:03:23,  9.52s/it][h264 @ 0x55b7ce46ea00] mmco: unref short failure
[h264 @ 0x556e5c528b00] mmco: unref short failure
[h264 @ 0x556e5c528b00] mmco: unref short failure
 21%|██        | 412/1945 [2:12:09<3:55:26,  9.22s/it][h264 @ 0x55e5069b0d40] mmco: unref short failure
[h264 @ 0x55b7ce46dec0] mmco: unref short failure
[h264 @ 0x556e51ffc040] mmco: unref short failure
[h264 @ 0x556e51ffc040] mmco: unref short failure
[h264 @ 0x556e51ffc040] mmco: unref short failure
[h264 @ 0x556e51ffc040] mmco: unref short failure
 21%|██        | 413/1945 [2:12:18<3:56:31,  9.26s/it][h264 @ 0x55b7d32ab380] mmco: unref short failure
[h264 @ 0x556e433c6600] mmco: unref short failure
[h264 @ 0x556e433c6600] mmco: unref short failure
[h264 @ 0x556e433c6600] mmco: unref short failure
[h264 @ 0x556e433c6600] mmco: unref short failure
 21%|██▏       | 414/1945 [2:12:26<3:48:23,  8.95s/it][h264 @ 0x556e5a7226c0] mmco: unref short failure
[h264 @ 0x556e5a7226c0] mmco: unref short failure
[h264 @ 0x55e5000e78c0] mmco: unref short failure
[h264 @ 0x55e5000e78c0] mmco: unref short failure
 21%|██▏       | 415/1945 [2:12:34<3:40:47,  8.66s/it][h264 @ 0x556e52d1d300] mmco: unref short failure
[h264 @ 0x556e52d1d300] mmco: unref short failure
 21%|██▏       | 416/1945 [2:12:42<3:34:16,  8.41s/it][h264 @ 0x556e49f378c0] mmco: unref short failure
[h264 @ 0x556e49f378c0] mmco: unref short failure
[h264 @ 0x55b7ce5da080] mmco: unref short failure
[h264 @ 0x55b7ce5da080] mmco: unref short failure
[h264 @ 0x55b7ce5da080] mmco: unref short failure
[h264 @ 0x55b7ce5da080] mmco: unref short failure
 21%|██▏       | 417/1945 [2:12:49<3:20:43,  7.88s/it][h264 @ 0x55e5041a85c0] mmco: unref short failure
[h264 @ 0x55e5041a85c0] mmco: unref short failure
[h264 @ 0x55e5041a85c0] mmco: unref short failure
[h264 @ 0x55e5041a85c0] mmco: unref short failure
[h264 @ 0x55e5041a85c0] mmco: unref short failure
 21%|██▏       | 418/1945 [2:12:56<3:14:46,  7.65s/it][h264 @ 0x55b7d4e70f40] mmco: unref short failure
 22%|██▏       | 419/1945 [2:13:12<4:18:48, 10.18s/it][h264 @ 0x556e51077100] mmco: unref short failure
[h264 @ 0x55e504252a00] mmco: unref short failure
[h264 @ 0x55e504252a00] mmco: unref short failure
 22%|██▏       | 420/1945 [2:13:19<3:54:45,  9.24s/it][h264 @ 0x55b7cd35ab00] mmco: unref short failure
[h264 @ 0x55e50574d2c0] mmco: unref short failure
[h264 @ 0x55e50574d2c0] mmco: unref short failure
[h264 @ 0x55e5022bb900] mmco: unref short failure
[h264 @ 0x556e48e15a40] mmco: unref short failure
 22%|██▏       | 421/1945 [2:13:31<4:12:37,  9.95s/it][h264 @ 0x556e51befd40] mmco: unref short failure
[h264 @ 0x55b7cb2e1280] mmco: unref short failure
 22%|██▏       | 422/1945 [2:13:38<3:55:01,  9.26s/it][h264 @ 0x55b7dce20500] mmco: unref short failure
[h264 @ 0x55b7dce20500] mmco: unref short failure
 22%|██▏       | 423/1945 [2:13:46<3:39:14,  8.64s/it][h264 @ 0x55b7d1e9ba00] mmco: unref short failure
[h264 @ 0x55b7d1e9ba00] mmco: unref short failure
[h264 @ 0x55b7dda59080] mmco: unref short failure
[h264 @ 0x55b7dda59080] mmco: unref short failure
[h264 @ 0x556e42f89740] mmco: unref short failure
[h264 @ 0x556e42f89740] mmco: unref short failure
[h264 @ 0x556e42f89740] mmco: unref short failure
[h264 @ 0x556e42f89740] mmco: unref short failure
[h264 @ 0x55e509ab21c0] mmco: unref short failure
[h264 @ 0x55e509ab21c0] mmco: unref short failure
[h264 @ 0x556e454c1400] mmco: unref short failure
[h264 @ 0x556e557d5380] mmco: unref short failure
[h264 @ 0x556e5a59fbc0] mmco: unref short failure
[h264 @ 0x55b7d223b7c0] mmco: unref short failure
[h264 @ 0x55b7d223b7c0] mmco: unref short failure
[h264 @ 0x556e582c8dc0] mmco: unref short failure
[h264 @ 0x556e582c8dc0] mmco: unref short failure
[h264 @ 0x556e582c8dc0] mmco: unref short failure
[h264 @ 0x556e582c8dc0] mmco: unref short failure
[h264 @ 0x556e582c8dc0] mmco: unref short failure
[h264 @ 0x556e582c8dc0] mmco: unref short failure
[h264 @ 0x556e582c8dc0] mmco: unref short failure
[h264 @ 0x556e582c8dc0] mmco: unref short failure
[h264 @ 0x55e50e7b1100] mmco: unref short failure
[h264 @ 0x55e50e7b1100] mmco: unref short failure
[h264 @ 0x55e510551cc0] mmco: unref short failure
[h264 @ 0x55e510551cc0] mmco: unref short failure
 22%|██▏       | 424/1945 [2:14:31<8:18:50, 19.68s/it] 22%|██▏       | 425/1945 [2:14:43<7:22:14, 17.46s/it][h264 @ 0x556e58a058c0] mmco: unref short failure
[h264 @ 0x556e58a058c0] mmco: unref short failure
[h264 @ 0x55e508e44d80] mmco: unref short failure
[h264 @ 0x55e508e44d80] mmco: unref short failure
[h264 @ 0x55e500f42cc0] mmco: unref short failure
[h264 @ 0x556e5a6b8f40] mmco: unref short failure
[h264 @ 0x556e5a6b8f40] mmco: unref short failure
[h264 @ 0x556e58a9f880] mmco: unref short failure
 22%|██▏       | 426/1945 [2:15:08<8:20:07, 19.75s/it][h264 @ 0x55e5089a0300] mmco: unref short failure
[h264 @ 0x55b7da20a6c0] mmco: unref short failure
[h264 @ 0x55b7da20a6c0] mmco: unref short failure
 22%|██▏       | 427/1945 [2:15:17<6:56:53, 16.48s/it] 22%|██▏       | 428/1945 [2:15:24<5:42:51, 13.56s/it][h264 @ 0x55e507ce8c80] mmco: unref short failure
[h264 @ 0x55e507ce8c80] mmco: unref short failure
 22%|██▏       | 429/1945 [2:15:31<4:53:59, 11.64s/it] 22%|██▏       | 430/1945 [2:15:39<4:26:10, 10.54s/it][h264 @ 0x55b7cb75a900] mmco: unref short failure
[h264 @ 0x55b7cb75a900] mmco: unref short failure
[h264 @ 0x556e5c2a83c0] mmco: unref short failure
 22%|██▏       | 431/1945 [2:15:46<4:01:44,  9.58s/it][h264 @ 0x556e5887d200] mmco: unref short failure
[h264 @ 0x556e5887d200] mmco: unref short failure
[h264 @ 0x556e45412d80] mmco: unref short failure
[h264 @ 0x556e45412d80] mmco: unref short failure
[h264 @ 0x556e591d9f00] mmco: unref short failure
[h264 @ 0x556e591d9f00] mmco: unref short failure
[h264 @ 0x556e5a38b440] mmco: unref short failure
[h264 @ 0x556e5a38b440] mmco: unref short failure
[h264 @ 0x55b7e1034980] mmco: unref short failure
[h264 @ 0x556e4f69a200] mmco: unref short failure
[h264 @ 0x556e4f69a200] mmco: unref short failure
[h264 @ 0x556e555e29c0] mmco: unref short failure
[h264 @ 0x556e5279afc0] mmco: unref short failure
[h264 @ 0x55e50de7b400] mmco: unref short failure
[h264 @ 0x55e50de7b400] mmco: unref short failure
[h264 @ 0x55e4fed43900] mmco: unref short failure
[h264 @ 0x55b7d7d6bd00] mmco: unref short failure
[h264 @ 0x55b7d2c53500] mmco: unref short failure
[h264 @ 0x55b7d2c53500] mmco: unref short failure
[h264 @ 0x556e535d5280] mmco: unref short failure
 22%|██▏       | 432/1945 [2:16:32<8:31:04, 20.27s/it][h264 @ 0x556e5d8dea40] mmco: unref short failure
[h264 @ 0x556e5d8dea40] mmco: unref short failure
[h264 @ 0x556e5d8dea40] mmco: unref short failure
 22%|██▏       | 433/1945 [2:16:52<8:32:20, 20.33s/it][h264 @ 0x55b7dfe58680] mmco: unref short failure
[h264 @ 0x55e50289ae80] mmco: unref short failure
[h264 @ 0x55e50289ae80] mmco: unref short failure
[h264 @ 0x55e50289ae80] mmco: unref short failure
[h264 @ 0x55e50289ae80] mmco: unref short failure
[h264 @ 0x55e5056304c0] mmco: unref short failure
[h264 @ 0x55e5056304c0] mmco: unref short failure
[h264 @ 0x55e4feef44c0] mmco: unref short failure
[h264 @ 0x55e4feef44c0] mmco: unref short failure
[h264 @ 0x556e50846a80] mmco: unref short failure
[h264 @ 0x55e502907540] mmco: unref short failure
[h264 @ 0x556e56223300] mmco: unref short failure
 22%|██▏       | 434/1945 [2:17:14<8:42:12, 20.74s/it][h264 @ 0x55e4fe947a40] mmco: unref short failure
[h264 @ 0x55e4fe947a40] mmco: unref short failure
 22%|██▏       | 435/1945 [2:17:21<6:59:49, 16.68s/it] 22%|██▏       | 436/1945 [2:17:28<5:47:42, 13.83s/it][h264 @ 0x55e5006a69c0] mmco: unref short failure
 22%|██▏       | 437/1945 [2:17:35<4:56:18, 11.79s/it][h264 @ 0x556e583ffa00] mmco: unref short failure
[h264 @ 0x556e583ffa00] mmco: unref short failure
 23%|██▎       | 438/1945 [2:17:42<4:19:32, 10.33s/it][h264 @ 0x55b7ce5d2d00] mmco: unref short failure
[h264 @ 0x55b7ce5d2d00] mmco: unref short failure
[h264 @ 0x55b7ce5d2d00] mmco: unref short failure
[h264 @ 0x55b7ce5d2d00] mmco: unref short failure
[h264 @ 0x55b7ce5d2d00] mmco: unref short failure
[h264 @ 0x55b7ce5d2d00] mmco: unref short failure
 23%|██▎       | 439/1945 [2:17:50<3:57:11,  9.45s/it][h264 @ 0x55b7e10a1380] mmco: unref short failure
[h264 @ 0x55b7e10a1380] mmco: unref short failure
[h264 @ 0x55b7d6880980] mmco: unref short failure
[h264 @ 0x55b7da3c3a00] mmco: unref short failure
[h264 @ 0x55b7da3c3a00] mmco: unref short failure
[h264 @ 0x556e6234bb00] mmco: unref short failure
[h264 @ 0x556e6234bb00] mmco: unref short failure
[h264 @ 0x556e6234bb00] mmco: unref short failure
[h264 @ 0x556e6234bb00] mmco: unref short failure
[h264 @ 0x556e59f9cec0] mmco: unref short failure
[h264 @ 0x556e59f9cec0] mmco: unref short failure
[h264 @ 0x55e50213ed80] mmco: unref short failure
[h264 @ 0x556e583fb680] mmco: unref short failure
[h264 @ 0x556e63fae240] mmco: unref short failure
[h264 @ 0x556e63fae240] mmco: unref short failure
[h264 @ 0x55b7d2c52bc0] mmco: unref short failure
[h264 @ 0x556e54971fc0] mmco: unref short failure
[h264 @ 0x556e54971fc0] mmco: unref short failure
 23%|██▎       | 440/1945 [2:18:34<8:24:20, 20.11s/it][h264 @ 0x556e45ef5140] mmco: unref short failure
[h264 @ 0x556e45ef5140] mmco: unref short failure
[h264 @ 0x556e44d696c0] mmco: unref short failure
[h264 @ 0x556e45174e00] mmco: unref short failure
[h264 @ 0x556e45174e00] mmco: unref short failure
 23%|██▎       | 441/1945 [2:18:56<8:32:56, 20.46s/it][h264 @ 0x55b7d160fe00] mmco: unref short failure
[h264 @ 0x55b7d160fe00] mmco: unref short failure
[h264 @ 0x556e57976600] mmco: unref short failure
[h264 @ 0x55e504855300] mmco: unref short failure
[h264 @ 0x556e4fa157c0] mmco: unref short failure
 23%|██▎       | 442/1945 [2:19:17<8:39:01, 20.72s/it][h264 @ 0x55e50d88b480] mmco: unref short failure
[h264 @ 0x55e50d88b480] mmco: unref short failure
 23%|██▎       | 443/1945 [2:19:25<6:59:37, 16.76s/it][h264 @ 0x556e5a579740] mmco: unref short failure
[h264 @ 0x556e5a579740] mmco: unref short failure
[h264 @ 0x55b7dd88eb40] mmco: unref short failure
[h264 @ 0x55b7dd88eb40] mmco: unref short failure
 23%|██▎       | 444/1945 [2:19:32<5:45:33, 13.81s/it][h264 @ 0x556e5ab7e2c0] mmco: unref short failure
[h264 @ 0x556e5ab7e2c0] mmco: unref short failure
 23%|██▎       | 445/1945 [2:19:38<4:52:03, 11.68s/it] 23%|██▎       | 446/1945 [2:19:46<4:20:56, 10.44s/it][h264 @ 0x556e67d4ec40] mmco: unref short failure
[h264 @ 0x556e67d4ec40] mmco: unref short failure
[h264 @ 0x556e42c54a80] mmco: unref short failure
[h264 @ 0x556e42c54a80] mmco: unref short failure
[h264 @ 0x55e50566e500] mmco: unref short failure
[h264 @ 0x55e50566e500] mmco: unref short failure
 23%|██▎       | 447/1945 [2:19:54<4:04:27,  9.79s/it][h264 @ 0x556e5a34af00] mmco: unref short failure
[h264 @ 0x556e5a34af00] mmco: unref short failure
[h264 @ 0x556e46686180] mmco: unref short failure
[h264 @ 0x556e46686180] mmco: unref short failure
[h264 @ 0x556e686ab300] mmco: unref short failure
[h264 @ 0x556e686ab300] mmco: unref short failure
[h264 @ 0x55b7ce235680] mmco: unref short failure
[h264 @ 0x55b7ce235680] mmco: unref short failure
[h264 @ 0x556e56d536c0] mmco: unref short failure
[h264 @ 0x556e56d536c0] mmco: unref short failure
[h264 @ 0x55b7d9dbed00] mmco: unref short failure
[h264 @ 0x55e51248f880] mmco: unref short failure
[h264 @ 0x556e5849d0c0] mmco: unref short failure
 23%|██▎       | 448/1945 [2:20:30<7:23:01, 17.76s/it][h264 @ 0x55b7e17b8dc0] mmco: unref short failure
[h264 @ 0x55b7e17b8dc0] mmco: unref short failure
 23%|██▎       | 449/1945 [2:20:52<7:49:05, 18.81s/it]09/09/2024 17:46:20 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 17:46:20 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e446a33c0] mmco: unref short failure
[h264 @ 0x556e446a33c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e446a33c0] mmco: unref short failure
[h264 @ 0x556e446a33c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e4f703140] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e50d36ed40] mmco: unref short failure
[h264 @ 0x55e50d36ed40] mmco: unref short failure
[h264 @ 0x556e62471c00] mmco: unref short failure
[h264 @ 0x556e48c8fe80] mmco: unref short failure
[h264 @ 0x556e48c8fe80] mmco: unref short failure
[h264 @ 0x556e62328f00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e62328f00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e6137dc40] mmco: unref short failure
[h264 @ 0x556e6137dc40] mmco: unref short failure
[h264 @ 0x556e66e63780] mmco: unref short failure
[h264 @ 0x55b7d1943a80] mmco: unref short failure
[h264 @ 0x55e51034c3c0] mmco: unref short failure
[h264 @ 0x55e51034c3c0] mmco: unref short failure
[h264 @ 0x55b7daa066c0] mmco: unref short failure
[h264 @ 0x55b7daa066c0] mmco: unref short failure
[h264 @ 0x556e5724f940] mmco: unref short failure
[h264 @ 0x556e63fadfc0] mmco: unref short failure
[h264 @ 0x556e63fadfc0] mmco: unref short failure
[h264 @ 0x55e50265a800] mmco: unref short failure
[h264 @ 0x55e50265a800] mmco: unref short failure
[h264 @ 0x55e50d248380] mmco: unref short failure
[h264 @ 0x55e50d248380] mmco: unref short failure
[h264 @ 0x556e57cf4200] mmco: unref short failure
[h264 @ 0x556e6f0bcfc0] mmco: unref short failure
[h264 @ 0x556e5391d600] mmco: unref short failure
[h264 @ 0x556e6f0bcfc0] mmco: unref short failure
[h264 @ 0x55b7d88d1c40] mmco: unref short failure
[h264 @ 0x55e509a35b80] mmco: unref short failure
[h264 @ 0x55e509a35b80] mmco: unref short failure
[h264 @ 0x55e509a35b80] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:56,  3.87it/s][A
  1%|          | 2/221 [00:01<02:08,  1.71it/s][A
  1%|▏         | 3/221 [00:01<01:34,  2.31it/s][A
  2%|▏         | 4/221 [00:01<01:19,  2.72it/s][A
  2%|▏         | 5/221 [00:01<01:04,  3.36it/s][A
  3%|▎         | 6/221 [00:01<00:57,  3.71it/s][A
  3%|▎         | 7/221 [00:02<00:56,  3.78it/s][A
  4%|▎         | 8/221 [00:02<00:54,  3.91it/s][A
  4%|▍         | 9/221 [00:02<00:53,  3.98it/s][A[h264 @ 0x55e50e790b40] mmco: unref short failure

  5%|▍         | 10/221 [00:04<02:16,  1.55it/s][A
  5%|▍         | 11/221 [00:04<01:52,  1.87it/s][A
  5%|▌         | 12/221 [00:04<01:25,  2.44it/s][A
  6%|▌         | 13/221 [00:05<01:25,  2.42it/s][A
  6%|▋         | 14/221 [00:07<04:01,  1.17s/it][A[h264 @ 0x55e51810c840] mmco: unref short failure
[h264 @ 0x55e51810c840] mmco: unref short failure

  7%|▋         | 15/221 [00:08<02:59,  1.15it/s][A
  7%|▋         | 16/221 [00:08<02:50,  1.20it/s][A
  8%|▊         | 17/221 [00:09<02:52,  1.18it/s][A
  8%|▊         | 18/221 [00:09<02:11,  1.55it/s][A
  9%|▉         | 20/221 [00:10<01:25,  2.35it/s][A
 10%|▉         | 21/221 [00:10<01:28,  2.27it/s][A
 10%|▉         | 22/221 [00:11<01:19,  2.52it/s][A
 10%|█         | 23/221 [00:11<01:09,  2.85it/s][A
 11%|█         | 24/221 [00:11<01:02,  3.14it/s][A[h264 @ 0x556e47388fc0] mmco: unref short failure
[h264 @ 0x556e47388fc0] mmco: unref short failure

 11%|█▏        | 25/221 [00:11<00:59,  3.30it/s][A
 12%|█▏        | 26/221 [00:12<01:01,  3.15it/s][A
 12%|█▏        | 27/221 [00:12<00:52,  3.67it/s][A
 13%|█▎        | 28/221 [00:12<00:55,  3.50it/s][A
 13%|█▎        | 29/221 [00:15<03:31,  1.10s/it][A
 14%|█▎        | 30/221 [00:15<02:43,  1.16it/s][A
 14%|█▍        | 31/221 [00:16<02:09,  1.46it/s][A
 14%|█▍        | 32/221 [00:16<01:38,  1.92it/s][A
 15%|█▍        | 33/221 [00:16<01:35,  1.97it/s][A
 15%|█▌        | 34/221 [00:16<01:13,  2.53it/s][A
 16%|█▌        | 35/221 [00:17<01:07,  2.76it/s][A
 16%|█▋        | 36/221 [00:17<01:13,  2.51it/s][A
 17%|█▋        | 37/221 [00:17<01:03,  2.90it/s][A
 17%|█▋        | 38/221 [00:18<01:01,  2.99it/s][A
 18%|█▊        | 39/221 [00:18<01:15,  2.40it/s][A
 18%|█▊        | 40/221 [00:19<01:07,  2.70it/s][A
 19%|█▊        | 41/221 [00:19<00:53,  3.35it/s][A
 19%|█▉        | 42/221 [00:19<00:43,  4.08it/s][A
 19%|█▉        | 43/221 [00:19<00:43,  4.05it/s][A
 20%|██        | 45/221 [00:20<00:39,  4.49it/s][A
 21%|██        | 46/221 [00:20<00:35,  4.94it/s][A
 21%|██▏       | 47/221 [00:20<00:33,  5.19it/s][A
 22%|██▏       | 49/221 [00:20<00:35,  4.88it/s][A
 23%|██▎       | 50/221 [00:23<02:02,  1.40it/s][A
 23%|██▎       | 51/221 [00:23<01:42,  1.66it/s][A
 24%|██▎       | 52/221 [00:23<01:36,  1.75it/s][A
 24%|██▍       | 53/221 [00:24<01:17,  2.18it/s][A
 24%|██▍       | 54/221 [00:24<01:04,  2.60it/s][A
 25%|██▍       | 55/221 [00:24<00:58,  2.85it/s][A
 25%|██▌       | 56/221 [00:24<00:50,  3.28it/s][A
 26%|██▌       | 57/221 [00:24<00:45,  3.64it/s][A[h264 @ 0x55b7dfc03c00] mmco: unref short failure
[h264 @ 0x55b7dfc03c00] mmco: unref short failure

 26%|██▌       | 58/221 [00:25<00:49,  3.26it/s][A
 27%|██▋       | 59/221 [00:25<00:52,  3.08it/s][A
 27%|██▋       | 60/221 [00:25<00:49,  3.23it/s][A
 28%|██▊       | 61/221 [00:26<00:41,  3.82it/s][A
 28%|██▊       | 62/221 [00:26<00:42,  3.71it/s][A
 29%|██▊       | 63/221 [00:26<00:48,  3.25it/s][A
 29%|██▉       | 64/221 [00:26<00:41,  3.77it/s][A
 29%|██▉       | 65/221 [00:27<00:36,  4.33it/s][A
 30%|██▉       | 66/221 [00:27<00:34,  4.48it/s][A
 30%|███       | 67/221 [00:27<00:42,  3.60it/s][A
 31%|███       | 68/221 [00:27<00:36,  4.24it/s][A
 31%|███       | 69/221 [00:28<00:50,  3.04it/s][A
 32%|███▏      | 70/221 [00:28<00:45,  3.29it/s][A[h264 @ 0x556e4b81d500] mmco: unref short failure

 32%|███▏      | 71/221 [00:29<01:09,  2.16it/s][A
 33%|███▎      | 72/221 [00:29<00:57,  2.60it/s][A
 33%|███▎      | 73/221 [00:30<00:56,  2.60it/s][A
 33%|███▎      | 74/221 [00:30<00:50,  2.93it/s][A
 34%|███▍      | 75/221 [00:30<00:56,  2.60it/s][A
 34%|███▍      | 76/221 [00:30<00:47,  3.06it/s][A
 35%|███▍      | 77/221 [00:31<00:43,  3.30it/s][A
 35%|███▌      | 78/221 [00:31<00:46,  3.05it/s][A
 36%|███▌      | 79/221 [00:31<00:43,  3.23it/s][A
 36%|███▌      | 80/221 [00:32<00:40,  3.45it/s][A
 37%|███▋      | 81/221 [00:32<00:35,  3.90it/s][A
 37%|███▋      | 82/221 [00:32<00:47,  2.91it/s][A
 38%|███▊      | 83/221 [00:36<02:43,  1.19s/it][A
 38%|███▊      | 84/221 [00:36<02:05,  1.09it/s][A
 38%|███▊      | 85/221 [00:36<01:36,  1.40it/s][A
 39%|███▉      | 86/221 [00:36<01:15,  1.79it/s][A
 39%|███▉      | 87/221 [00:37<01:14,  1.79it/s][A
 40%|███▉      | 88/221 [00:37<01:03,  2.10it/s][A
 40%|████      | 89/221 [00:37<00:59,  2.23it/s][A
 41%|████      | 90/221 [00:38<00:53,  2.47it/s][A
 41%|████      | 91/221 [00:38<00:46,  2.82it/s][A
 42%|████▏     | 92/221 [00:38<00:40,  3.19it/s][A
 42%|████▏     | 93/221 [00:38<00:37,  3.44it/s][A
 43%|████▎     | 94/221 [00:39<00:30,  4.13it/s][A[h264 @ 0x55e511619c00] mmco: unref short failure
[h264 @ 0x55b7d41d7cc0] mmco: unref short failure
[h264 @ 0x55b7d41d7cc0] mmco: unref short failure

 43%|████▎     | 95/221 [00:40<01:07,  1.87it/s][A[h264 @ 0x55e516cbcfc0] mmco: unref short failure

 43%|████▎     | 96/221 [00:40<00:52,  2.38it/s][A[h264 @ 0x55e516cbcfc0] mmco: unref short failure

 44%|████▍     | 97/221 [00:40<00:44,  2.77it/s][A
 44%|████▍     | 98/221 [00:41<00:44,  2.75it/s][A
 45%|████▍     | 99/221 [00:41<00:38,  3.20it/s][A
 45%|████▌     | 100/221 [00:41<00:32,  3.78it/s][A
 46%|████▌     | 101/221 [00:41<00:26,  4.53it/s][A
 47%|████▋     | 103/221 [00:41<00:20,  5.83it/s][A
 47%|████▋     | 104/221 [00:41<00:19,  6.10it/s][A
 48%|████▊     | 105/221 [00:42<00:19,  5.84it/s][A
 48%|████▊     | 106/221 [00:42<00:17,  6.39it/s][A
 48%|████▊     | 107/221 [00:42<00:17,  6.59it/s][A
 49%|████▉     | 108/221 [00:42<00:20,  5.60it/s][A
 49%|████▉     | 109/221 [00:42<00:23,  4.78it/s][A
 50%|████▉     | 110/221 [00:43<00:22,  4.83it/s][A
 50%|█████     | 111/221 [00:43<00:27,  4.01it/s][A
 51%|█████     | 112/221 [00:43<00:28,  3.84it/s][A
 51%|█████     | 113/221 [00:43<00:29,  3.63it/s][A
 52%|█████▏    | 114/221 [00:44<00:39,  2.73it/s][A
 52%|█████▏    | 115/221 [00:44<00:30,  3.46it/s][A
 52%|█████▏    | 116/221 [00:44<00:29,  3.62it/s][A
 53%|█████▎    | 117/221 [00:45<00:31,  3.29it/s][A
 53%|█████▎    | 118/221 [00:45<00:29,  3.46it/s][A
 54%|█████▍    | 119/221 [00:45<00:25,  4.07it/s][A
 54%|█████▍    | 120/221 [00:45<00:26,  3.88it/s][A
 55%|█████▌    | 122/221 [00:46<00:18,  5.27it/s][A
 56%|█████▌    | 123/221 [00:46<00:17,  5.69it/s][A[h264 @ 0x55b7da9f2ac0] mmco: unref short failure
[h264 @ 0x55b7da9f2ac0] mmco: unref short failure

 56%|█████▌    | 124/221 [00:46<00:19,  5.01it/s][A
 57%|█████▋    | 125/221 [00:46<00:18,  5.32it/s][A
 57%|█████▋    | 126/221 [00:47<00:19,  4.94it/s][A
 57%|█████▋    | 127/221 [00:47<00:19,  4.88it/s][A
 58%|█████▊    | 128/221 [00:47<00:22,  4.18it/s][A
 59%|█████▉    | 130/221 [00:47<00:18,  4.89it/s][A
 59%|█████▉    | 131/221 [00:48<00:18,  4.85it/s][A
 60%|█████▉    | 132/221 [00:48<00:20,  4.27it/s][A
 60%|██████    | 133/221 [00:48<00:25,  3.43it/s][A
 61%|██████    | 134/221 [00:48<00:22,  3.90it/s][A
 61%|██████    | 135/221 [00:49<00:19,  4.41it/s][A
 62%|██████▏   | 136/221 [00:49<00:18,  4.56it/s][A
 62%|██████▏   | 137/221 [00:49<00:16,  5.05it/s][A
 62%|██████▏   | 138/221 [00:49<00:18,  4.56it/s][A
 63%|██████▎   | 139/221 [00:49<00:15,  5.42it/s][A
 64%|██████▍   | 141/221 [00:50<00:11,  6.81it/s][A
 64%|██████▍   | 142/221 [00:50<00:15,  5.04it/s][A
 65%|██████▍   | 143/221 [00:50<00:14,  5.31it/s][A
 65%|██████▌   | 144/221 [00:50<00:14,  5.44it/s][A
 66%|██████▌   | 145/221 [00:50<00:14,  5.19it/s][A
 67%|██████▋   | 147/221 [00:51<00:11,  6.21it/s][A
 67%|██████▋   | 148/221 [00:51<00:14,  5.10it/s][A
 67%|██████▋   | 149/221 [00:51<00:12,  5.64it/s][A
 68%|██████▊   | 150/221 [00:51<00:12,  5.50it/s][A
 68%|██████▊   | 151/221 [00:53<00:31,  2.22it/s][A
 69%|██████▉   | 152/221 [00:53<00:31,  2.20it/s][A
 69%|██████▉   | 153/221 [00:53<00:27,  2.46it/s][A
 70%|██████▉   | 154/221 [00:53<00:21,  3.09it/s][A
 71%|███████   | 156/221 [00:54<00:14,  4.51it/s][A[h264 @ 0x55b7cabd7e80] mmco: unref short failure

 71%|███████   | 157/221 [00:54<00:14,  4.48it/s][A
 72%|███████▏  | 159/221 [00:54<00:10,  6.11it/s][A
 72%|███████▏  | 160/221 [00:54<00:09,  6.37it/s][A
 73%|███████▎  | 161/221 [00:54<00:10,  5.93it/s][A
 73%|███████▎  | 162/221 [00:55<00:10,  5.47it/s][A
 74%|███████▍  | 163/221 [00:55<00:11,  5.07it/s][A
 74%|███████▍  | 164/221 [00:55<00:11,  5.13it/s][A
 75%|███████▌  | 166/221 [00:55<00:07,  7.37it/s][A
 76%|███████▌  | 167/221 [00:55<00:07,  7.49it/s][A
 76%|███████▌  | 168/221 [00:55<00:06,  7.66it/s][A
 76%|███████▋  | 169/221 [00:55<00:07,  7.18it/s][A
 77%|███████▋  | 170/221 [00:56<00:08,  5.99it/s][A
 77%|███████▋  | 171/221 [00:56<00:12,  3.98it/s][A
 78%|███████▊  | 172/221 [00:57<00:13,  3.69it/s][A
 78%|███████▊  | 173/221 [00:57<00:10,  4.42it/s][A
 79%|███████▊  | 174/221 [00:58<00:19,  2.38it/s][A
 79%|███████▉  | 175/221 [00:58<00:22,  2.02it/s][A
 80%|███████▉  | 176/221 [00:58<00:17,  2.61it/s][A
 80%|████████  | 177/221 [00:58<00:13,  3.33it/s][A
 81%|████████  | 178/221 [00:59<00:13,  3.30it/s][A
 81%|████████  | 179/221 [00:59<00:12,  3.49it/s][A[h264 @ 0x55b7ce63ab40] mmco: unref short failure
[h264 @ 0x55b7ce63ab40] mmco: unref short failure

 81%|████████▏ | 180/221 [00:59<00:10,  3.73it/s][A
 82%|████████▏ | 181/221 [00:59<00:09,  4.31it/s][A
 82%|████████▏ | 182/221 [00:59<00:07,  5.19it/s][A
 83%|████████▎ | 184/221 [01:00<00:07,  4.74it/s][A
 84%|████████▍ | 186/221 [01:00<00:06,  5.29it/s][A
 85%|████████▌ | 188/221 [01:01<00:06,  4.90it/s][A
 86%|████████▌ | 189/221 [01:01<00:07,  4.48it/s][A
 86%|████████▌ | 190/221 [01:01<00:07,  4.40it/s][A
 86%|████████▋ | 191/221 [01:01<00:05,  5.03it/s][A
 87%|████████▋ | 192/221 [01:01<00:05,  5.70it/s][A
 88%|████████▊ | 194/221 [01:02<00:04,  6.08it/s][A
 88%|████████▊ | 195/221 [01:02<00:04,  6.31it/s][A
 89%|████████▊ | 196/221 [01:03<00:09,  2.58it/s][A
 89%|████████▉ | 197/221 [01:03<00:07,  3.16it/s][A
 90%|████████▉ | 198/221 [01:03<00:06,  3.40it/s][A
 90%|█████████ | 200/221 [01:04<00:04,  4.49it/s][A
 91%|█████████ | 201/221 [01:04<00:04,  4.98it/s][A
 91%|█████████▏| 202/221 [01:04<00:03,  4.88it/s][A
 92%|█████████▏| 204/221 [01:05<00:05,  3.39it/s][A
 93%|█████████▎| 205/221 [01:05<00:04,  3.92it/s][A
 93%|█████████▎| 206/221 [01:05<00:05,  2.91it/s][A
 94%|█████████▎| 207/221 [01:06<00:04,  2.84it/s][A
 94%|█████████▍| 208/221 [01:06<00:03,  3.37it/s][A
 95%|█████████▍| 209/221 [01:06<00:02,  4.12it/s][A
 95%|█████████▌| 211/221 [01:06<00:02,  4.59it/s][A
 96%|█████████▌| 212/221 [01:07<00:01,  4.86it/s][A
 96%|█████████▋| 213/221 [01:07<00:01,  4.66it/s][A
 97%|█████████▋| 214/221 [01:07<00:01,  4.64it/s][A
 97%|█████████▋| 215/221 [01:07<00:01,  5.23it/s][A
 98%|█████████▊| 216/221 [01:07<00:00,  5.09it/s][A
 98%|█████████▊| 217/221 [01:08<00:00,  4.68it/s][A
 99%|█████████▊| 218/221 [01:08<00:00,  5.06it/s][A
 99%|█████████▉| 219/221 [01:08<00:00,  5.34it/s][A
100%|█████████▉| 220/221 [01:08<00:00,  4.97it/s][A
100%|██████████| 221/221 [01:08<00:00,  4.93it/s][A100%|██████████| 221/221 [01:08<00:00,  3.20it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.78it/s][A
  1%|          | 2/221 [00:00<00:58,  3.77it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.77it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.76it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.76it/s][A
  3%|▎         | 6/221 [00:01<00:57,  3.76it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.76it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.77it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.77it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.77it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.78it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.78it/s][A
  6%|▌         | 13/221 [00:03<00:55,  3.78it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.78it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.78it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.78it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.78it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.78it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.78it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.78it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.78it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.78it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.78it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.78it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 28/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.78it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.78it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.78it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.78it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.78it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.78it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.78it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.78it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.78it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.78it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.78it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.78it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.78it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.78it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.78it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.78it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.78it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.78it/s][A
 24%|██▍       | 53/221 [00:14<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.78it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.78it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.78it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.78it/s][A
 28%|██▊       | 62/221 [00:16<00:42,  3.78it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.78it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.78it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.78it/s][A
 30%|██▉       | 66/221 [00:17<00:41,  3.78it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.78it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.78it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.78it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.78it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.78it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.78it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.78it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.78it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.78it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.78it/s][A
 37%|███▋      | 81/221 [00:21<00:37,  3.78it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.78it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.78it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.78it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 87/221 [00:23<00:35,  3.78it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.78it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.78it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.78it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.78it/s][A
 43%|████▎     | 96/221 [00:25<00:33,  3.78it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.78it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.78it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.78it/s][A
 45%|████▌     | 100/221 [00:26<00:32,  3.78it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.78it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.78it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.78it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 106/221 [00:28<00:30,  3.78it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.78it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.78it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.78it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.78it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.78it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.78it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.78it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 115/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.78it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.78it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.78it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.78it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.78it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.78it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.78it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.78it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.78it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 134/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 140/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.78it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.78it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.78it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.78it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.78it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.78it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.78it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.78it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.78it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.78it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.78it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.78it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.78it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.78it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.78it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.78it/s][A
 76%|███████▌  | 168/221 [00:44<00:14,  3.78it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.78it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.78it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.78it/s][A
 79%|███████▊  | 174/221 [00:46<00:12,  3.78it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.78it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.78it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.78it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.78it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.78it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.78it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.78it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.78it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.78it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 193/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [00:56<00:02,  3.78it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.78it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.78it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.78it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.78it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.78it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.78it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.78it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:41,  5.29it/s][A
  1%|          | 2/221 [00:00<00:45,  4.82it/s][A
  1%|▏         | 3/221 [00:00<00:50,  4.33it/s][A
  2%|▏         | 4/221 [00:00<00:44,  4.86it/s][A
  2%|▏         | 5/221 [00:01<00:43,  5.00it/s][A
  3%|▎         | 7/221 [00:01<00:40,  5.29it/s][A
  4%|▎         | 8/221 [00:01<00:43,  4.86it/s][A
  4%|▍         | 9/221 [00:01<00:41,  5.13it/s][A
  5%|▍         | 10/221 [00:02<01:04,  3.26it/s][A
  5%|▍         | 11/221 [00:02<01:00,  3.46it/s][A
  5%|▌         | 12/221 [00:02<00:50,  4.11it/s][A
  6%|▌         | 13/221 [00:03<01:27,  2.38it/s][A
  7%|▋         | 15/221 [00:03<01:00,  3.39it/s][A
  7%|▋         | 16/221 [00:04<01:02,  3.27it/s][A
  8%|▊         | 17/221 [00:04<01:23,  2.44it/s][A
  8%|▊         | 18/221 [00:05<01:16,  2.66it/s][A
  9%|▊         | 19/221 [00:05<01:09,  2.90it/s][A
  9%|▉         | 20/221 [00:05<00:57,  3.51it/s][A
 10%|▉         | 21/221 [00:05<00:47,  4.20it/s][A
 10%|▉         | 22/221 [00:05<00:42,  4.63it/s][A
 10%|█         | 23/221 [00:06<00:36,  5.46it/s][A
 11%|█         | 24/221 [00:06<00:36,  5.40it/s][A
 11%|█▏        | 25/221 [00:06<00:38,  5.11it/s][A
 12%|█▏        | 26/221 [00:06<00:43,  4.51it/s][A
 13%|█▎        | 28/221 [00:07<00:40,  4.72it/s][A
 13%|█▎        | 29/221 [00:07<00:38,  4.95it/s][A
 14%|█▎        | 30/221 [00:07<00:42,  4.51it/s][A
 14%|█▍        | 31/221 [00:07<00:40,  4.70it/s][A
 15%|█▍        | 33/221 [00:08<00:33,  5.60it/s][A
 15%|█▌        | 34/221 [00:08<00:33,  5.65it/s][A
 16%|█▌        | 35/221 [00:08<00:35,  5.19it/s][A
 16%|█▋        | 36/221 [00:08<00:37,  5.00it/s][A
 17%|█▋        | 37/221 [00:08<00:38,  4.82it/s][A
 17%|█▋        | 38/221 [00:09<00:43,  4.20it/s][A
 18%|█▊        | 39/221 [00:09<00:40,  4.55it/s][A
 18%|█▊        | 40/221 [00:09<00:47,  3.82it/s][A
 19%|█▊        | 41/221 [00:09<00:39,  4.61it/s][A
 19%|█▉        | 42/221 [00:10<00:47,  3.74it/s][A
 19%|█▉        | 43/221 [00:10<00:58,  3.04it/s][A
 20%|█▉        | 44/221 [00:11<00:56,  3.13it/s][A
 20%|██        | 45/221 [00:11<00:49,  3.57it/s][A
 21%|██        | 46/221 [00:11<00:45,  3.81it/s][A
 21%|██▏       | 47/221 [00:11<00:47,  3.67it/s][A
 22%|██▏       | 48/221 [00:11<00:41,  4.13it/s][A
 22%|██▏       | 49/221 [00:12<00:41,  4.19it/s][A
 23%|██▎       | 50/221 [00:12<00:39,  4.29it/s][A
 23%|██▎       | 51/221 [00:12<00:33,  5.09it/s][A
 24%|██▎       | 52/221 [00:12<00:33,  4.99it/s][A
 24%|██▍       | 53/221 [00:12<00:32,  5.21it/s][A
 24%|██▍       | 54/221 [00:13<00:46,  3.56it/s][A
 25%|██▍       | 55/221 [00:13<00:53,  3.12it/s][A
 25%|██▌       | 56/221 [00:13<00:44,  3.69it/s][A
 26%|██▌       | 57/221 [00:14<00:45,  3.59it/s][A
 26%|██▌       | 58/221 [00:14<00:50,  3.25it/s][A
 27%|██▋       | 59/221 [00:14<00:48,  3.35it/s][A
 27%|██▋       | 60/221 [00:15<00:47,  3.40it/s][A
 28%|██▊       | 61/221 [00:15<00:41,  3.87it/s][A
 28%|██▊       | 62/221 [00:15<00:42,  3.72it/s][A
 29%|██▊       | 63/221 [00:15<00:37,  4.18it/s][A
 29%|██▉       | 64/221 [00:16<00:40,  3.90it/s][A
 30%|██▉       | 66/221 [00:16<00:44,  3.52it/s][A
 30%|███       | 67/221 [00:17<00:51,  2.99it/s][A
 31%|███       | 68/221 [00:17<00:44,  3.46it/s][A
 31%|███       | 69/221 [00:18<01:02,  2.43it/s][A
 32%|███▏      | 70/221 [00:18<00:51,  2.94it/s][A
 32%|███▏      | 71/221 [00:18<00:45,  3.27it/s][A
 33%|███▎      | 72/221 [00:18<00:46,  3.18it/s][A
 33%|███▎      | 73/221 [00:19<00:45,  3.25it/s][A
 34%|███▍      | 75/221 [00:19<00:35,  4.12it/s][A
 34%|███▍      | 76/221 [00:19<00:32,  4.42it/s][A
 35%|███▍      | 77/221 [00:19<00:33,  4.32it/s][A
 35%|███▌      | 78/221 [00:19<00:30,  4.74it/s][A
 36%|███▌      | 79/221 [00:20<00:45,  3.12it/s][A
 36%|███▌      | 80/221 [00:20<00:40,  3.50it/s][A
 37%|███▋      | 81/221 [00:20<00:34,  4.00it/s][A
 37%|███▋      | 82/221 [00:21<00:38,  3.63it/s][A
 38%|███▊      | 83/221 [00:21<00:42,  3.25it/s][A
 38%|███▊      | 84/221 [00:21<00:35,  3.81it/s][A
 38%|███▊      | 85/221 [00:21<00:30,  4.53it/s][A
 39%|███▉      | 86/221 [00:22<00:27,  4.92it/s][A
 39%|███▉      | 87/221 [00:22<00:41,  3.23it/s][A
 40%|███▉      | 88/221 [00:23<00:45,  2.93it/s][A
 40%|████      | 89/221 [00:23<00:40,  3.26it/s][A
 41%|████      | 90/221 [00:23<00:41,  3.16it/s][A
 41%|████      | 91/221 [00:23<00:34,  3.75it/s][A
 42%|████▏     | 92/221 [00:24<00:33,  3.80it/s][A
 42%|████▏     | 93/221 [00:24<00:57,  2.21it/s][A
 43%|████▎     | 94/221 [00:25<00:54,  2.31it/s][A
 43%|████▎     | 95/221 [00:25<00:47,  2.63it/s][A
 43%|████▎     | 96/221 [00:25<00:40,  3.07it/s][A
 44%|████▍     | 97/221 [00:25<00:35,  3.46it/s][A
 44%|████▍     | 98/221 [00:26<00:35,  3.50it/s][A
 45%|████▍     | 99/221 [00:26<00:30,  4.06it/s][A
 45%|████▌     | 100/221 [00:26<00:29,  4.12it/s][A
 46%|████▌     | 101/221 [00:27<00:33,  3.54it/s][A
 46%|████▌     | 102/221 [00:27<00:43,  2.75it/s][A
 47%|████▋     | 103/221 [00:27<00:36,  3.24it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:28<00:30,  3.87it/s][A
 48%|████▊     | 106/221 [00:28<00:36,  3.11it/s][A
 48%|████▊     | 107/221 [00:28<00:33,  3.37it/s][A
 49%|████▉     | 108/221 [00:29<00:31,  3.61it/s][A
 49%|████▉     | 109/221 [00:29<00:27,  4.10it/s][A
 50%|████▉     | 110/221 [00:29<00:24,  4.45it/s][A
 50%|█████     | 111/221 [00:29<00:24,  4.53it/s][A
 51%|█████     | 112/221 [00:29<00:26,  4.05it/s][A
 51%|█████     | 113/221 [00:30<00:27,  3.99it/s][A
 52%|█████▏    | 115/221 [00:30<00:21,  4.91it/s][A
 52%|█████▏    | 116/221 [00:30<00:23,  4.41it/s][A
 53%|█████▎    | 117/221 [00:31<00:23,  4.38it/s][A
 53%|█████▎    | 118/221 [00:31<00:23,  4.37it/s][A
 54%|█████▍    | 119/221 [00:31<00:31,  3.23it/s][A
 54%|█████▍    | 120/221 [00:32<00:29,  3.43it/s][A
 55%|█████▌    | 122/221 [00:32<00:22,  4.38it/s][A
 56%|█████▌    | 123/221 [00:32<00:22,  4.27it/s][A
 56%|█████▌    | 124/221 [00:32<00:24,  4.04it/s][A
 57%|█████▋    | 125/221 [00:33<00:27,  3.48it/s][A
 57%|█████▋    | 126/221 [00:33<00:26,  3.62it/s][A
 57%|█████▋    | 127/221 [00:33<00:29,  3.14it/s][A
 58%|█████▊    | 128/221 [00:34<00:26,  3.45it/s][A
 58%|█████▊    | 129/221 [00:34<00:21,  4.25it/s][A
 59%|█████▉    | 130/221 [00:34<00:19,  4.62it/s][A
 60%|█████▉    | 132/221 [00:34<00:16,  5.38it/s][A
 60%|██████    | 133/221 [00:35<00:19,  4.58it/s][A
 61%|██████    | 134/221 [00:35<00:20,  4.21it/s][A
 61%|██████    | 135/221 [00:35<00:23,  3.71it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.80it/s][A
 62%|██████▏   | 137/221 [00:36<00:20,  4.08it/s][A
 62%|██████▏   | 138/221 [00:36<00:22,  3.67it/s][A
 63%|██████▎   | 139/221 [00:37<00:27,  2.94it/s][A
 63%|██████▎   | 140/221 [00:37<00:25,  3.18it/s][A
 64%|██████▍   | 141/221 [00:37<00:23,  3.35it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.80it/s][A
 65%|██████▍   | 143/221 [00:38<00:32,  2.43it/s][A
 65%|██████▌   | 144/221 [00:38<00:34,  2.26it/s][A
 66%|██████▌   | 146/221 [00:39<00:20,  3.66it/s][A
 67%|██████▋   | 147/221 [00:39<00:20,  3.57it/s][A
 67%|██████▋   | 148/221 [00:39<00:23,  3.09it/s][A
 67%|██████▋   | 149/221 [00:40<00:22,  3.21it/s][A
 68%|██████▊   | 150/221 [00:40<00:22,  3.22it/s][A
 68%|██████▊   | 151/221 [00:40<00:21,  3.20it/s][A
 69%|██████▉   | 152/221 [00:41<00:35,  1.96it/s][A
 69%|██████▉   | 153/221 [00:41<00:28,  2.37it/s][A
 70%|██████▉   | 154/221 [00:42<00:24,  2.78it/s][A
 70%|███████   | 155/221 [00:42<00:25,  2.64it/s][A
 71%|███████   | 156/221 [00:43<00:26,  2.48it/s][A
 71%|███████   | 157/221 [00:43<00:22,  2.79it/s][A
 71%|███████▏  | 158/221 [00:43<00:21,  2.94it/s][A
 72%|███████▏  | 159/221 [00:43<00:17,  3.61it/s][A
 72%|███████▏  | 160/221 [00:43<00:14,  4.07it/s][A
 73%|███████▎  | 161/221 [00:44<00:15,  3.89it/s][A
 73%|███████▎  | 162/221 [00:44<00:12,  4.56it/s][A
 74%|███████▍  | 163/221 [00:44<00:12,  4.56it/s][A
 74%|███████▍  | 164/221 [00:44<00:12,  4.61it/s][A
 75%|███████▍  | 165/221 [00:45<00:13,  4.20it/s][A
 75%|███████▌  | 166/221 [00:45<00:12,  4.24it/s][A
 76%|███████▌  | 167/221 [00:45<00:11,  4.86it/s][A
 76%|███████▌  | 168/221 [00:45<00:12,  4.30it/s][A
 76%|███████▋  | 169/221 [00:45<00:11,  4.66it/s][A
 77%|███████▋  | 170/221 [00:46<00:13,  3.86it/s][A
 77%|███████▋  | 171/221 [00:46<00:13,  3.63it/s][A
 78%|███████▊  | 172/221 [00:46<00:11,  4.21it/s][A
 78%|███████▊  | 173/221 [00:47<00:14,  3.36it/s][A
 79%|███████▊  | 174/221 [00:47<00:16,  2.81it/s][A
 79%|███████▉  | 175/221 [00:47<00:15,  2.91it/s][A
 80%|███████▉  | 176/221 [00:48<00:13,  3.44it/s][A
 80%|████████  | 177/221 [00:48<00:11,  3.94it/s][A
 81%|████████  | 178/221 [00:48<00:11,  3.75it/s][A
 81%|████████  | 179/221 [00:48<00:11,  3.67it/s][A
 81%|████████▏ | 180/221 [00:49<00:09,  4.21it/s][A
 82%|████████▏ | 181/221 [00:49<00:09,  4.23it/s][A
 82%|████████▏ | 182/221 [00:49<00:09,  4.11it/s][A
 83%|████████▎ | 183/221 [00:49<00:08,  4.35it/s][A
 83%|████████▎ | 184/221 [00:49<00:08,  4.59it/s][A
 84%|████████▎ | 185/221 [00:50<00:07,  4.94it/s][A
 84%|████████▍ | 186/221 [00:50<00:10,  3.48it/s][A
 85%|████████▍ | 187/221 [00:50<00:09,  3.40it/s][A
 85%|████████▌ | 188/221 [00:51<00:09,  3.56it/s][A
 86%|████████▌ | 189/221 [00:51<00:08,  3.62it/s][A
 86%|████████▌ | 190/221 [00:51<00:09,  3.21it/s][A
 86%|████████▋ | 191/221 [00:51<00:08,  3.73it/s][A
 87%|████████▋ | 192/221 [00:52<00:08,  3.30it/s][A
 87%|████████▋ | 193/221 [00:52<00:06,  4.04it/s][A
 88%|████████▊ | 194/221 [00:52<00:08,  3.36it/s][A
 88%|████████▊ | 195/221 [00:53<00:07,  3.66it/s][A
 89%|████████▊ | 196/221 [00:53<00:08,  3.07it/s][A
 89%|████████▉ | 197/221 [00:53<00:07,  3.19it/s][A
 90%|████████▉ | 198/221 [00:54<00:07,  3.01it/s][A
 90%|█████████ | 199/221 [00:54<00:06,  3.25it/s][A
 90%|█████████ | 200/221 [00:54<00:06,  3.29it/s][A
 91%|█████████ | 201/221 [00:54<00:05,  3.54it/s][A
 91%|█████████▏| 202/221 [00:55<00:05,  3.47it/s][A
 92%|█████████▏| 203/221 [00:55<00:04,  3.79it/s][A
 92%|█████████▏| 204/221 [00:56<00:06,  2.52it/s][A
 93%|█████████▎| 205/221 [00:56<00:05,  3.17it/s][A
 93%|█████████▎| 206/221 [00:56<00:04,  3.16it/s][A
 94%|█████████▎| 207/221 [00:56<00:03,  3.86it/s][A
 94%|█████████▍| 208/221 [00:57<00:03,  3.70it/s][A
 95%|█████████▍| 209/221 [00:57<00:03,  3.38it/s][A
 95%|█████████▌| 211/221 [00:57<00:02,  3.56it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  3.55it/s][A
 96%|█████████▋| 213/221 [00:58<00:02,  3.88it/s][A
 97%|█████████▋| 214/221 [00:58<00:02,  2.94it/s][A
 97%|█████████▋| 215/221 [00:59<00:01,  3.15it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  2.99it/s][A
 98%|█████████▊| 217/221 [00:59<00:01,  3.01it/s][A
 99%|█████████▊| 218/221 [01:00<00:01,  2.95it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  2.76it/s][A
100%|█████████▉| 220/221 [01:00<00:00,  3.14it/s][A
100%|██████████| 221/221 [01:01<00:00,  3.31it/s][A100%|██████████| 221/221 [01:01<00:00,  3.61it/s]
09/09/2024 17:52:03 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 449--===========

09/09/2024 17:52:03 - INFO - __main__ -   {'area_r1': 36.2, 'area_recall': '36.2/61.4/70.4', 'area_ravg': 56.0}
09/09/2024 17:52:03 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 449--===========

09/09/2024 17:52:03 - INFO - __main__ -   {'forward_r1': 32.2, 'forward_recall': '32.2/58.9/69.5', 'forward_ravg': 53.5}
09/09/2024 17:52:03 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 449--===========

09/09/2024 17:52:03 - INFO - __main__ -   {'area_video_r1': 36.8, 'area_video_recall': '36.8/66.4/76.7', 'area_video_ravg': 60.0}
09/09/2024 17:52:03 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 299=======

09/09/2024 17:52:03 - INFO - __main__ -   {'area_video_r1': 40.6, 'area_video_recall': '40.6/66.7/79.0', 'area_video_ravg': 62.1}
09/09/2024 17:52:03 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 449--===========

09/09/2024 17:52:03 - INFO - __main__ -   {'area_video_r1': 49.9, 'area_video_recall': '49.9/73.5/80.4', 'area_video_ravg': 67.9, 'area_video_back_r1': 49.5, 'area_video_back_recall': '49.5/72.7/79.9', 'area_video_back_ravg': 67.4}
09/09/2024 17:52:03 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 17:52:03 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 17:52:03 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 449--===========

09/09/2024 17:52:03 - INFO - __main__ -   {'video_r1': 43.7, 'video_recall': '43.7/70.7/81.4', 'video_ravg': 65.3}
09/09/2024 17:52:03 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 17:52:03 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 17:52:03 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 449--===========

09/09/2024 17:52:03 - INFO - __main__ -   {'video_r1': 51.4, 'video_recall': '51.4/75.2/82.6', 'video_ravg': 69.7}
09/09/2024 17:52:03 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 249=======

09/09/2024 17:52:03 - INFO - __main__ -   {'video_r1': 52.1, 'video_recall': '52.1/76.0/82.5', 'video_ravg': 70.2}
09/09/2024 17:52:24 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.6112549304962158, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.025984108448028564, 'loss_ret%tv%ta--finetune_area/loss_area': 1.2617701292037964, 'loss_ret%tv%ta--finetune_area/total_loss': 2.8990092277526855}
 23%|██▎       | 450/1945 [2:26:58<51:08:02, 123.13s/it][h264 @ 0x55b7e57076c0] mmco: unref short failure
[h264 @ 0x55e50a0b1e40] mmco: unref short failure
[h264 @ 0x55e50a0b1e40] mmco: unref short failure
 23%|██▎       | 451/1945 [2:27:02<36:16:37, 87.41s/it] [h264 @ 0x55b7d9582180] mmco: unref short failure
[h264 @ 0x55e502bd0400] mmco: unref short failure
[h264 @ 0x55b7d9de5d40] mmco: unref short failure
[h264 @ 0x55b7d9de5d40] mmco: unref short failure
 23%|██▎       | 452/1945 [2:27:07<25:56:43, 62.56s/it][h264 @ 0x556e4f362bc0] mmco: unref short failure
[h264 @ 0x556e4f362bc0] mmco: unref short failure
[h264 @ 0x556e5bc62180] mmco: unref short failure
[h264 @ 0x55b7cb23a300] mmco: unref short failure
[h264 @ 0x556e50e38c40] mmco: unref short failure
[h264 @ 0x556e50e38c40] mmco: unref short failure
 23%|██▎       | 453/1945 [2:27:12<18:49:07, 45.41s/it][h264 @ 0x556e69753c80] mmco: unref short failure
[h264 @ 0x556e69753c80] mmco: unref short failure
 23%|██▎       | 454/1945 [2:27:18<13:53:49, 33.55s/it][h264 @ 0x556e65b945c0] mmco: unref short failure
[h264 @ 0x556e65b945c0] mmco: unref short failure
not have audios 7wavFXW3AFw.7
 23%|██▎       | 455/1945 [2:27:24<10:30:17, 25.38s/it][h264 @ 0x55e50aa82600] mmco: unref short failure
 23%|██▎       | 456/1945 [2:27:32<8:16:55, 20.02s/it]  23%|██▎       | 457/1945 [2:27:40<6:46:27, 16.39s/it][h264 @ 0x556e48442fc0] mmco: unref short failure
[h264 @ 0x556e48442fc0] mmco: unref short failure
[h264 @ 0x556e53493340] mmco: unref short failure
[h264 @ 0x556e53493340] mmco: unref short failure
[h264 @ 0x556e53448e80] mmco: unref short failure
 24%|██▎       | 458/1945 [2:27:47<5:40:19, 13.73s/it][h264 @ 0x556e6a5a9e40] mmco: unref short failure
 24%|██▎       | 459/1945 [2:27:55<4:50:58, 11.75s/it][h264 @ 0x55b7e22f5580] mmco: unref short failure
[h264 @ 0x55b7e22f5580] mmco: unref short failure
[h264 @ 0x556e57e3f600] mmco: unref short failure
[h264 @ 0x556e57e3f600] mmco: unref short failure
 24%|██▎       | 460/1945 [2:28:03<4:24:24, 10.68s/it][h264 @ 0x55e51435a900] mmco: unref short failure
 24%|██▎       | 461/1945 [2:28:11<4:05:29,  9.93s/it][h264 @ 0x556e6e638000] mmco: unref short failure
[h264 @ 0x556e6e638000] mmco: unref short failure
[h264 @ 0x556e6e638000] mmco: unref short failure
[h264 @ 0x556e6e638000] mmco: unref short failure
[h264 @ 0x556e6e638000] mmco: unref short failure
[h264 @ 0x556e6e638000] mmco: unref short failure
 24%|██▍       | 462/1945 [2:28:18<3:40:42,  8.93s/it][h264 @ 0x55b7cf5be8c0] mmco: unref short failure
[h264 @ 0x55b7cf5be8c0] mmco: unref short failure
[h264 @ 0x55b7cf5be8c0] mmco: unref short failure
[h264 @ 0x55b7d8df1180] mmco: unref short failure
[h264 @ 0x55b7d8df1180] mmco: unref short failure
 24%|██▍       | 463/1945 [2:28:25<3:28:10,  8.43s/it][h264 @ 0x55e500c0e0c0] mmco: unref short failure
[h264 @ 0x55e500c0e0c0] mmco: unref short failure
[h264 @ 0x55e500c0e0c0] mmco: unref short failure
[h264 @ 0x55e500c0e0c0] mmco: unref short failure
[h264 @ 0x556e4306a580] mmco: unref short failure
 24%|██▍       | 464/1945 [2:28:32<3:17:05,  7.98s/it][h264 @ 0x55e50260bf00] mmco: unref short failure
[h264 @ 0x55b7e2b5cc80] mmco: unref short failure
[h264 @ 0x556e64b0cc80] mmco: unref short failure
[h264 @ 0x556e64b0cc80] mmco: unref short failure
 24%|██▍       | 465/1945 [2:28:39<3:09:53,  7.70s/it][h264 @ 0x55b7cbdbec00] mmco: unref short failure
[h264 @ 0x55b7cbdbec00] mmco: unref short failure
[h264 @ 0x55b7da2bb180] mmco: unref short failure
 24%|██▍       | 466/1945 [2:28:46<3:05:22,  7.52s/it][h264 @ 0x556e580e0980] mmco: unref short failure
[h264 @ 0x556e580e0980] mmco: unref short failure
 24%|██▍       | 467/1945 [2:28:53<2:58:48,  7.26s/it][h264 @ 0x556e56523d80] mmco: unref short failure
[h264 @ 0x556e53ba31c0] mmco: unref short failure
 24%|██▍       | 468/1945 [2:28:59<2:56:20,  7.16s/it][h264 @ 0x556e581fee80] mmco: unref short failure
[h264 @ 0x556e581fee80] mmco: unref short failure
[h264 @ 0x556e69bca100] mmco: unref short failure
 24%|██▍       | 469/1945 [2:29:16<4:07:46, 10.07s/it][h264 @ 0x55e5009bf100] mmco: unref short failure
 24%|██▍       | 470/1945 [2:29:22<3:38:50,  8.90s/it][h264 @ 0x55e50be90d00] mmco: unref short failure
[h264 @ 0x556e6a4e4580] mmco: unref short failure
[h264 @ 0x55e519c1d800] mmco: unref short failure
[h264 @ 0x55b7d9549940] mmco: unref short failure
 24%|██▍       | 471/1945 [2:29:36<4:09:19, 10.15s/it][h264 @ 0x55e511aab380] mmco: unref short failure
[h264 @ 0x55e511aab380] mmco: unref short failure
 24%|██▍       | 472/1945 [2:29:43<3:50:05,  9.37s/it][h264 @ 0x556e65ee9580] mmco: unref short failure
 24%|██▍       | 473/1945 [2:29:52<3:44:16,  9.14s/it][h264 @ 0x55e513a2f880] mmco: unref short failure
[h264 @ 0x556e5338d580] mmco: unref short failure
[h264 @ 0x55e50dcb1500] mmco: unref short failure
[h264 @ 0x55e50dcb1500] mmco: unref short failure
[h264 @ 0x556e679b9880] mmco: unref short failure
[h264 @ 0x55b7d0089c80] mmco: unref short failure
[h264 @ 0x55b7d8df1180] mmco: unref short failure
 24%|██▍       | 474/1945 [2:30:30<7:16:19, 17.80s/it][h264 @ 0x556e5451b880] mmco: unref short failure
[h264 @ 0x556e5451b880] mmco: unref short failure
[h264 @ 0x55b7d9617c40] mmco: unref short failure
[h264 @ 0x55b7d9617c40] mmco: unref short failure
[h264 @ 0x556e65f96ac0] mmco: unref short failure
[h264 @ 0x556e65f96ac0] mmco: unref short failure
[h264 @ 0x556e65f96ac0] mmco: unref short failure
[h264 @ 0x556e65f96ac0] mmco: unref short failure
[h264 @ 0x556e64af4c00] mmco: unref short failure
[h264 @ 0x556e64af4c00] mmco: unref short failure
[h264 @ 0x556e52ecd940] mmco: unref short failure
[h264 @ 0x556e52ecd940] mmco: unref short failure
[h264 @ 0x55e5132c4a40] mmco: unref short failure
[h264 @ 0x55e5132c4a40] mmco: unref short failure
 24%|██▍       | 475/1945 [2:30:54<8:01:57, 19.67s/it][h264 @ 0x556e5a581840] mmco: unref short failure
[h264 @ 0x556e5a581840] mmco: unref short failure
 24%|██▍       | 476/1945 [2:31:05<6:56:47, 17.02s/it][h264 @ 0x55e5049b5800] mmco: unref short failure
[h264 @ 0x55e5049b5800] mmco: unref short failure
[h264 @ 0x556e5b45f500] mmco: unref short failure
[h264 @ 0x556e5b45f500] mmco: unref short failure
[h264 @ 0x556e5b45f500] mmco: unref short failure
[h264 @ 0x556e5b45f500] mmco: unref short failure
[h264 @ 0x55b7e550c680] mmco: unref short failure
 25%|██▍       | 477/1945 [2:31:29<7:54:09, 19.38s/it][h264 @ 0x55e5161fdfc0] mmco: unref short failure
[h264 @ 0x55e5161fdfc0] mmco: unref short failure
[h264 @ 0x55e5161fdfc0] mmco: unref short failure
[h264 @ 0x55b7cda53740] mmco: unref short failure
[h264 @ 0x55b7cda53740] mmco: unref short failure
[h264 @ 0x556e6b52c7c0] mmco: unref short failure
[h264 @ 0x556e6d0b9640] mmco: unref short failure
[h264 @ 0x556e6d0b9640] mmco: unref short failure
[h264 @ 0x556e6d0b9640] mmco: unref short failure
[h264 @ 0x556e6d0b9640] mmco: unref short failure
 25%|██▍       | 478/1945 [2:31:37<6:28:41, 15.90s/it][h264 @ 0x556e42eae680] mmco: unref short failure
[h264 @ 0x55b7da366e80] mmco: unref short failure
[h264 @ 0x55b7da366e80] mmco: unref short failure
[h264 @ 0x55e50e73f880] mmco: unref short failure
[h264 @ 0x55e50e73f880] mmco: unref short failure
[h264 @ 0x556e586b3900] mmco: unref short failure
[h264 @ 0x556e586b3900] mmco: unref short failure
[h264 @ 0x556e64be0600] mmco: unref short failure
 25%|██▍       | 479/1945 [2:31:45<5:25:19, 13.31s/it][h264 @ 0x55b7d16cc080] mmco: unref short failure
[h264 @ 0x55e5162695c0] mmco: unref short failure
[h264 @ 0x55e5162695c0] mmco: unref short failure
 25%|██▍       | 480/1945 [2:31:52<4:41:24, 11.53s/it][h264 @ 0x55b7cbb46240] mmco: unref short failure
[h264 @ 0x55b7cbb46240] mmco: unref short failure
[h264 @ 0x55e5049ebf00] mmco: unref short failure
[h264 @ 0x55e5049ebf00] mmco: unref short failure
[h264 @ 0x55e5049ebf00] mmco: unref short failure
[h264 @ 0x55e5049ebf00] mmco: unref short failure
 25%|██▍       | 481/1945 [2:31:59<4:08:05, 10.17s/it][h264 @ 0x556e60d06a00] mmco: unref short failure
[h264 @ 0x556e60d06a00] mmco: unref short failure
[h264 @ 0x55e50c6fb1c0] mmco: unref short failure
[h264 @ 0x55e50c6fb1c0] mmco: unref short failure
[h264 @ 0x55b7d7d47240] mmco: unref short failure
[h264 @ 0x55b7e4be4440] mmco: unref short failure
[h264 @ 0x556e4a8a1900] mmco: unref short failure
[h264 @ 0x556e4a8a1900] mmco: unref short failure
[h264 @ 0x55b7ce5e4980] mmco: unref short failure
[h264 @ 0x55b7ce5e4980] mmco: unref short failure
[h264 @ 0x556e5a921700] mmco: unref short failure
[h264 @ 0x556e5a921700] mmco: unref short failure
[h264 @ 0x556e6d7e4f80] mmco: unref short failure
[h264 @ 0x55b7d2d60e00] mmco: unref short failure
[h264 @ 0x55b7d2d60e00] mmco: unref short failure
 25%|██▍       | 482/1945 [2:32:33<7:02:12, 17.32s/it][h264 @ 0x556e580e0980] mmco: unref short failure
[h264 @ 0x556e580e0980] mmco: unref short failure
[h264 @ 0x55e51592fe80] mmco: unref short failure
[h264 @ 0x55e51592fe80] mmco: unref short failure
[h264 @ 0x55b7d6658800] mmco: unref short failure
[h264 @ 0x55b7e19c4bc0] mmco: unref short failure
 25%|██▍       | 483/1945 [2:32:55<7:37:15, 18.77s/it][h264 @ 0x556e56f19c40] mmco: unref short failure
[h264 @ 0x55e50ae03180] mmco: unref short failure
[h264 @ 0x556e5262dbc0] mmco: unref short failure
[h264 @ 0x556e5262dbc0] mmco: unref short failure
 25%|██▍       | 484/1945 [2:33:05<6:31:41, 16.09s/it][h264 @ 0x55e51a807640] mmco: unref short failure
[h264 @ 0x55e51a807640] mmco: unref short failure
[h264 @ 0x556e5c93a580] mmco: unref short failure
[h264 @ 0x556e5c93a580] mmco: unref short failure
[h264 @ 0x55e50fe29f80] mmco: unref short failure
[h264 @ 0x556e56508200] mmco: unref short failure
[h264 @ 0x556e6bf87200] mmco: unref short failure
[h264 @ 0x556e6bf87200] mmco: unref short failure
[h264 @ 0x556e58cfe900] mmco: unref short failure
[h264 @ 0x556e58cfe900] mmco: unref short failure
[h264 @ 0x55e506d8f400] mmco: unref short failure
[h264 @ 0x55b7df7d7240] mmco: unref short failure
[h264 @ 0x556e6fab55c0] mmco: unref short failure
[h264 @ 0x556e53af6e40] mmco: unref short failure
[h264 @ 0x556e53af6e40] mmco: unref short failure
[h264 @ 0x556e53af6e40] mmco: unref short failure
[h264 @ 0x556e53af6e40] mmco: unref short failure
[h264 @ 0x556e67a02380] mmco: unref short failure
[h264 @ 0x556e67a02380] mmco: unref short failure
[h264 @ 0x556e5afeb400] mmco: unref short failure
[h264 @ 0x556e5afeb400] mmco: unref short failure
[h264 @ 0x556e69c7bec0] mmco: unref short failure
[h264 @ 0x556e5901cf80] mmco: unref short failure
[h264 @ 0x556e5901cf80] mmco: unref short failure
[h264 @ 0x556e5ad25580] mmco: unref short failure
[h264 @ 0x556e5ad25580] mmco: unref short failure
[h264 @ 0x556e65f368c0] mmco: unref short failure
[h264 @ 0x556e65f368c0] mmco: unref short failure
[h264 @ 0x55e5055b6a80] mmco: unref short failure
[h264 @ 0x55e5055b6a80] mmco: unref short failure
 25%|██▍       | 485/1945 [2:33:32<7:52:01, 19.40s/it][h264 @ 0x556e5653b7c0] mmco: unref short failure
 25%|██▍       | 486/1945 [2:33:40<6:27:48, 15.95s/it][h264 @ 0x55e5163b8540] mmco: unref short failure
[h264 @ 0x55e5163b8540] mmco: unref short failure
[h264 @ 0x556e5377db80] mmco: unref short failure
[h264 @ 0x556e5377db80] mmco: unref short failure
[h264 @ 0x556e545dd800] mmco: unref short failure
[h264 @ 0x556e47925dc0] mmco: unref short failure
[h264 @ 0x556e47925dc0] mmco: unref short failure
 25%|██▌       | 487/1945 [2:33:47<5:24:06, 13.34s/it] 25%|██▌       | 488/1945 [2:33:54<4:38:20, 11.46s/it][h264 @ 0x55b7cdd392c0] mmco: unref short failure
[h264 @ 0x55e514854b40] mmco: unref short failure
 25%|██▌       | 489/1945 [2:34:02<4:14:01, 10.47s/it][h264 @ 0x55b7d0089a80] mmco: unref short failure
[h264 @ 0x55b7d0089a80] mmco: unref short failure
[h264 @ 0x55e5133e33c0] mmco: unref short failure
[h264 @ 0x55e507bd7a40] mmco: unref short failure
[h264 @ 0x556e55cb2040] mmco: unref short failure
[h264 @ 0x556e4794fc40] mmco: unref short failure
[h264 @ 0x556e4794fc40] mmco: unref short failure
[h264 @ 0x556e4794fc40] mmco: unref short failure
[h264 @ 0x556e435b2fc0] mmco: unref short failure
[h264 @ 0x556e435b2fc0] mmco: unref short failure
[h264 @ 0x55e5082d2c00] mmco: unref short failure
[h264 @ 0x55e5082d2c00] mmco: unref short failure
[h264 @ 0x556e532b5780] mmco: unref short failure
[h264 @ 0x556e532b5780] mmco: unref short failure
 25%|██▌       | 490/1945 [2:34:35<6:57:02, 17.20s/it][h264 @ 0x55e50d000240] mmco: unref short failure
[h264 @ 0x55e50d000240] mmco: unref short failure
[h264 @ 0x55e515111700] mmco: unref short failure
[h264 @ 0x55e515111700] mmco: unref short failure
[h264 @ 0x556e499dcf40] mmco: unref short failure
[h264 @ 0x556e499dcf40] mmco: unref short failure
[h264 @ 0x55b7ce6dbb80] mmco: unref short failure
[h264 @ 0x55b7ce6dbb80] mmco: unref short failure
[h264 @ 0x556e52de63c0] mmco: unref short failure
[h264 @ 0x556e5fc82c80] mmco: unref short failure
 25%|██▌       | 491/1945 [2:34:58<7:39:08, 18.95s/it][h264 @ 0x556e5fc82c80] mmco: unref short failure
[h264 @ 0x556e5fc82c80] mmco: unref short failure
[h264 @ 0x556e54133a40] mmco: unref short failure
[h264 @ 0x556e54133a40] mmco: unref short failure
 25%|██▌       | 492/1945 [2:35:07<6:22:24, 15.79s/it][h264 @ 0x55b7df8b6300] mmco: unref short failure
[h264 @ 0x55b7df8b6300] mmco: unref short failure
[h264 @ 0x55b7d769b900] mmco: unref short failure
[h264 @ 0x55e513db38c0] mmco: unref short failure
[h264 @ 0x556e5c966300] mmco: unref short failure
[h264 @ 0x556e5c966300] mmco: unref short failure
[h264 @ 0x556e6bf55000] mmco: unref short failure
[h264 @ 0x556e6bf55000] mmco: unref short failure
[h264 @ 0x55e5058eaa00] mmco: unref short failure
[h264 @ 0x55e5058eaa00] mmco: unref short failure
[h264 @ 0x55e5058eaa00] mmco: unref short failure
[h264 @ 0x55e5058eaa00] mmco: unref short failure
 25%|██▌       | 493/1945 [2:35:32<7:30:17, 18.61s/it][h264 @ 0x55b7e165cc80] mmco: unref short failure
 25%|██▌       | 494/1945 [2:35:39<6:06:14, 15.14s/it][h264 @ 0x55e51644e3c0] mmco: unref short failure
[h264 @ 0x55e51644e3c0] mmco: unref short failure
[h264 @ 0x55e51644e3c0] mmco: unref short failure
[h264 @ 0x55e51644e3c0] mmco: unref short failure
[h264 @ 0x556e4c434a00] mmco: unref short failure
 25%|██▌       | 495/1945 [2:35:50<5:38:59, 14.03s/it][h264 @ 0x556e6d682740] mmco: unref short failure
[h264 @ 0x55b7cf496600] mmco: unref short failure
[h264 @ 0x55b7cf496600] mmco: unref short failure
 26%|██▌       | 496/1945 [2:35:58<4:55:32, 12.24s/it][h264 @ 0x556e71138ac0] mmco: unref short failure
 26%|██▌       | 497/1945 [2:36:06<4:22:05, 10.86s/it][h264 @ 0x55e507b01400] mmco: unref short failure
[h264 @ 0x55b7e2b23c40] mmco: unref short failure
[h264 @ 0x55b7e2b23c40] mmco: unref short failure
[h264 @ 0x55b7e2b23c40] mmco: unref short failure
[h264 @ 0x55b7e2b23c40] mmco: unref short failure
[h264 @ 0x55e516052000] mmco: unref short failure
[h264 @ 0x55b7e94dc580] mmco: unref short failure
[h264 @ 0x55e4fe750780] mmco: unref short failure
[h264 @ 0x55e4fe750780] mmco: unref short failure
[h264 @ 0x556e5e694340] mmco: unref short failure
[h264 @ 0x556e5e694340] mmco: unref short failure
[h264 @ 0x556e4833e440] mmco: unref short failure
[h264 @ 0x55e5196c9740] mmco: unref short failure
[h264 @ 0x55e5196c9740] mmco: unref short failure
[h264 @ 0x55b7d9dea340] mmco: unref short failure
[h264 @ 0x55b7d9dea340] mmco: unref short failure
[h264 @ 0x55b7d9dea340] mmco: unref short failure
[h264 @ 0x55b7d9dea340] mmco: unref short failure
[h264 @ 0x55b7e4f1cb00] mmco: unref short failure
[h264 @ 0x55e50023b600] mmco: unref short failure
[h264 @ 0x55e50023b600] mmco: unref short failure
[h264 @ 0x556e64792b00] mmco: unref short failure
[h264 @ 0x556e64792b00] mmco: unref short failure
[h264 @ 0x556e64792b00] mmco: unref short failure
[h264 @ 0x556e64792b00] mmco: unref short failure
[h264 @ 0x556e64792b00] mmco: unref short failure
[h264 @ 0x556e64792b00] mmco: unref short failure
[h264 @ 0x55b7db7fd980] mmco: unref short failure
[h264 @ 0x55b7db7fd980] mmco: unref short failure
[h264 @ 0x556e6cee7c80] mmco: unref short failure
[h264 @ 0x556e5aa2c8c0] mmco: unref short failure
[h264 @ 0x55b7e2b23c40] mmco: unref short failure
[h264 @ 0x55b7da6cabc0] mmco: unref short failure
 26%|██▌       | 498/1945 [2:36:52<8:37:52, 21.47s/it] 26%|██▌       | 499/1945 [2:37:02<7:14:10, 18.02s/it]09/09/2024 18:02:31 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 18:02:31 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b7d0ffaf00] mmco: unref short failure
[h264 @ 0x55b7d0ffaf00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b7e76d1d80] mmco: unref short failure
[h264 @ 0x55b7e76d1d80] mmco: unref short failure
[h264 @ 0x55e505110580] mmco: unref short failure
[h264 @ 0x556e586b31c0] mmco: unref short failure
[h264 @ 0x556e586b31c0] mmco: unref short failure
[h264 @ 0x55e515002480] mmco: unref short failure
[h264 @ 0x55e515002480] mmco: unref short failure
[h264 @ 0x556e53005fc0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e59bf3300] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e5df7e980] mmco: unref short failure
[h264 @ 0x556e5df7e980] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e4fe9ad080] mmco: unref short failure
[h264 @ 0x55e4fe9ad080] mmco: unref short failure
[h264 @ 0x55e4fe9ad080] mmco: unref short failure
[h264 @ 0x556e67fda6c0] mmco: unref short failure
[h264 @ 0x556e67fda6c0] mmco: unref short failure
[h264 @ 0x55b7e3492e40] mmco: unref short failure
[h264 @ 0x556e6a4e4800] mmco: unref short failure
[h264 @ 0x556e6a4e4800] mmco: unref short failure
[h264 @ 0x556e52881b00] mmco: unref short failure
[h264 @ 0x55b7cef00fc0] mmco: unref short failure
[h264 @ 0x556e631a4900] mmco: unref short failure
[h264 @ 0x556e631a4900] mmco: unref short failure
[h264 @ 0x556e58dddf80] mmco: unref short failure
[h264 @ 0x55e518083640] mmco: unref short failure
[h264 @ 0x556e613292c0] mmco: unref short failure
[h264 @ 0x556e613292c0] mmco: unref short failure
[h264 @ 0x55e501807180] mmco: unref short failure
[h264 @ 0x55b7d415af00] mmco: unref short failure
[h264 @ 0x55e514840340] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:49,  4.44it/s][A[h264 @ 0x556e6bc7a980] mmco: unref short failure
[h264 @ 0x556e6bc7a980] mmco: unref short failure
[h264 @ 0x55e503f4bc40] mmco: unref short failure

  1%|          | 2/221 [00:00<01:27,  2.50it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.79it/s][A
  2%|▏         | 4/221 [00:00<00:44,  4.88it/s][A
  2%|▏         | 5/221 [00:01<00:42,  5.08it/s][A
  3%|▎         | 6/221 [00:01<00:36,  5.90it/s][A
  3%|▎         | 7/221 [00:01<00:39,  5.37it/s][A
  4%|▎         | 8/221 [00:01<00:44,  4.73it/s][A
  4%|▍         | 9/221 [00:02<00:49,  4.30it/s][A
  5%|▍         | 10/221 [00:03<02:09,  1.63it/s][A
  5%|▍         | 11/221 [00:03<01:45,  2.00it/s][A
  5%|▌         | 12/221 [00:03<01:20,  2.59it/s][A
  6%|▌         | 13/221 [00:04<01:19,  2.62it/s][A[h264 @ 0x55b7e36e4080] mmco: unref short failure

  6%|▋         | 14/221 [00:07<04:39,  1.35s/it][A
  7%|▋         | 15/221 [00:08<03:24,  1.01it/s][A[h264 @ 0x556e540e5080] mmco: unref short failure

  7%|▋         | 16/221 [00:08<02:58,  1.15it/s][A
  8%|▊         | 17/221 [00:09<03:07,  1.09it/s][A[h264 @ 0x55e5050fb580] mmco: unref short failure

  8%|▊         | 18/221 [00:09<02:17,  1.48it/s][A[h264 @ 0x55e5050fb580] mmco: unref short failure

  9%|▊         | 19/221 [00:10<01:52,  1.79it/s][A
  9%|▉         | 20/221 [00:10<01:29,  2.24it/s][A
 10%|▉         | 21/221 [00:10<01:16,  2.61it/s][A
 10%|▉         | 22/221 [00:10<01:00,  3.30it/s][A
 10%|█         | 23/221 [00:10<00:49,  4.04it/s][A
 11%|█         | 24/221 [00:10<00:46,  4.24it/s][A
 11%|█▏        | 25/221 [00:11<00:44,  4.42it/s][A
 12%|█▏        | 26/221 [00:11<00:46,  4.18it/s][A
 12%|█▏        | 27/221 [00:11<00:45,  4.28it/s][A
 13%|█▎        | 28/221 [00:11<00:48,  4.01it/s][A[h264 @ 0x55e51b7e1c40] mmco: unref short failure
[h264 @ 0x55e51b7e1c40] mmco: unref short failure

 13%|█▎        | 29/221 [00:15<04:09,  1.30s/it][A
 14%|█▎        | 30/221 [00:15<03:03,  1.04it/s][A
 14%|█▍        | 31/221 [00:16<02:22,  1.34it/s][A
 14%|█▍        | 32/221 [00:16<01:46,  1.78it/s][A
 15%|█▍        | 33/221 [00:16<01:44,  1.79it/s][A
 15%|█▌        | 34/221 [00:16<01:21,  2.30it/s][A
 16%|█▌        | 35/221 [00:17<01:11,  2.60it/s][A
 16%|█▋        | 36/221 [00:17<00:59,  3.11it/s][A
 17%|█▋        | 37/221 [00:17<00:47,  3.84it/s][A
 17%|█▋        | 38/221 [00:17<00:51,  3.53it/s][A
 18%|█▊        | 39/221 [00:18<01:29,  2.03it/s][A
 18%|█▊        | 40/221 [00:19<01:23,  2.17it/s][A
 19%|█▊        | 41/221 [00:19<01:07,  2.67it/s][A
 19%|█▉        | 42/221 [00:19<00:53,  3.33it/s][A
 20%|█▉        | 44/221 [00:19<00:41,  4.28it/s][A
 20%|██        | 45/221 [00:19<00:40,  4.34it/s][A
 21%|██▏       | 47/221 [00:20<00:31,  5.59it/s][A
 22%|██▏       | 49/221 [00:20<00:33,  5.08it/s][A[h264 @ 0x55b7d7c1a400] mmco: unref short failure
[h264 @ 0x55b7d7c1a400] mmco: unref short failure

 23%|██▎       | 50/221 [00:23<02:23,  1.19it/s][A
 23%|██▎       | 51/221 [00:24<01:56,  1.46it/s][A
 24%|██▎       | 52/221 [00:24<01:41,  1.67it/s][A
 24%|██▍       | 53/221 [00:24<01:20,  2.10it/s][A[h264 @ 0x556e6ea698c0] mmco: unref short failure

 24%|██▍       | 54/221 [00:24<01:05,  2.54it/s][A
 25%|██▍       | 55/221 [00:24<00:53,  3.09it/s][A
 25%|██▌       | 56/221 [00:24<00:46,  3.53it/s][A
 26%|██▌       | 57/221 [00:25<00:42,  3.85it/s][A
 26%|██▌       | 58/221 [00:25<00:47,  3.46it/s][A
 27%|██▋       | 59/221 [00:25<00:53,  3.01it/s][A
 27%|██▋       | 60/221 [00:26<00:46,  3.45it/s][A
 28%|██▊       | 61/221 [00:26<00:39,  4.05it/s][A
 28%|██▊       | 62/221 [00:26<00:36,  4.36it/s][A
 29%|██▊       | 63/221 [00:26<00:39,  4.05it/s][A
 29%|██▉       | 64/221 [00:26<00:33,  4.66it/s][A
 29%|██▉       | 65/221 [00:27<00:32,  4.82it/s][A
 30%|██▉       | 66/221 [00:27<00:32,  4.82it/s][A
 30%|███       | 67/221 [00:27<00:31,  4.87it/s][A
 31%|███       | 68/221 [00:27<00:32,  4.72it/s][A
 31%|███       | 69/221 [00:28<00:47,  3.17it/s][A
 32%|███▏      | 70/221 [00:28<00:41,  3.60it/s][A
 32%|███▏      | 71/221 [00:28<00:50,  2.99it/s][A
 33%|███▎      | 72/221 [00:29<00:41,  3.58it/s][A
 33%|███▎      | 73/221 [00:29<00:43,  3.40it/s][A
 33%|███▎      | 74/221 [00:29<00:39,  3.72it/s][A[h264 @ 0x556e46336d80] mmco: unref short failure

 34%|███▍      | 75/221 [00:30<00:52,  2.78it/s][A
 34%|███▍      | 76/221 [00:30<00:41,  3.46it/s][A
 35%|███▍      | 77/221 [00:30<00:42,  3.42it/s][A
 35%|███▌      | 78/221 [00:31<00:46,  3.05it/s][A
 36%|███▌      | 79/221 [00:31<00:40,  3.51it/s][A
 36%|███▌      | 80/221 [00:31<00:35,  3.98it/s][A
 37%|███▋      | 81/221 [00:31<00:31,  4.41it/s][A
 37%|███▋      | 82/221 [00:32<00:46,  3.00it/s][A[h264 @ 0x556e4f295b00] mmco: unref short failure

 38%|███▊      | 83/221 [00:35<03:03,  1.33s/it][A
 38%|███▊      | 84/221 [00:36<02:23,  1.05s/it][A
 38%|███▊      | 85/221 [00:36<01:47,  1.27it/s][A
 39%|███▉      | 86/221 [00:36<01:19,  1.69it/s][A
 39%|███▉      | 87/221 [00:37<01:14,  1.79it/s][A
 40%|███▉      | 88/221 [00:37<00:59,  2.24it/s][A
 40%|████      | 89/221 [00:37<00:54,  2.44it/s][A
 41%|████      | 90/221 [00:37<00:48,  2.70it/s][A
 41%|████      | 91/221 [00:38<00:49,  2.64it/s][A
 42%|████▏     | 92/221 [00:38<00:44,  2.91it/s][A
 42%|████▏     | 93/221 [00:38<00:38,  3.29it/s][A
 43%|████▎     | 94/221 [00:38<00:32,  3.89it/s][A
 43%|████▎     | 95/221 [00:40<01:20,  1.57it/s][A
 43%|████▎     | 96/221 [00:40<01:02,  1.99it/s][A[h264 @ 0x55b7d7361180] mmco: unref short failure
[h264 @ 0x55e50e7b4d00] mmco: unref short failure
[h264 @ 0x55e50e7b4d00] mmco: unref short failure

 44%|████▍     | 97/221 [00:40<00:52,  2.35it/s][A
 44%|████▍     | 98/221 [00:41<00:50,  2.45it/s][A
 45%|████▌     | 100/221 [00:41<00:32,  3.75it/s][A
 46%|████▌     | 102/221 [00:41<00:22,  5.25it/s][A[h264 @ 0x55b7d7361180] mmco: unref short failure

 47%|████▋     | 103/221 [00:41<00:21,  5.46it/s][A
 47%|████▋     | 104/221 [00:41<00:19,  6.07it/s][A
 48%|████▊     | 105/221 [00:42<00:20,  5.53it/s][A
 48%|████▊     | 106/221 [00:42<00:18,  6.25it/s][A
 48%|████▊     | 107/221 [00:42<00:18,  6.22it/s][A
 49%|████▉     | 108/221 [00:42<00:23,  4.78it/s][A
 49%|████▉     | 109/221 [00:42<00:24,  4.50it/s][A
 50%|████▉     | 110/221 [00:43<00:23,  4.73it/s][A
 50%|█████     | 111/221 [00:43<00:28,  3.92it/s][A
 51%|█████     | 112/221 [00:43<00:29,  3.69it/s][A
 51%|█████     | 113/221 [00:43<00:28,  3.73it/s][A
 52%|█████▏    | 114/221 [00:44<00:42,  2.52it/s][A
 52%|█████▏    | 115/221 [00:44<00:37,  2.81it/s][A
 52%|█████▏    | 116/221 [00:45<00:34,  3.04it/s][A
 53%|█████▎    | 117/221 [00:45<00:34,  2.98it/s][A
 53%|█████▎    | 118/221 [00:45<00:35,  2.88it/s][A
 54%|█████▍    | 119/221 [00:46<00:32,  3.10it/s][A
 54%|█████▍    | 120/221 [00:46<00:34,  2.92it/s][A
 55%|█████▍    | 121/221 [00:46<00:30,  3.24it/s][A
 55%|█████▌    | 122/221 [00:47<00:27,  3.55it/s][A
 56%|█████▌    | 123/221 [00:47<00:24,  4.02it/s][A
 56%|█████▌    | 124/221 [00:47<00:27,  3.48it/s][A
 57%|█████▋    | 125/221 [00:47<00:24,  3.91it/s][A
 57%|█████▋    | 126/221 [00:47<00:22,  4.20it/s][A
 57%|█████▋    | 127/221 [00:48<00:27,  3.45it/s][A
 58%|█████▊    | 128/221 [00:48<00:28,  3.30it/s][A
 58%|█████▊    | 129/221 [00:48<00:23,  3.89it/s][A
 59%|█████▉    | 130/221 [00:49<00:26,  3.47it/s][A
 59%|█████▉    | 131/221 [00:49<00:24,  3.74it/s][A
 60%|█████▉    | 132/221 [00:49<00:28,  3.16it/s][A
 60%|██████    | 133/221 [00:50<00:25,  3.39it/s][A
 61%|██████    | 134/221 [00:50<00:23,  3.73it/s][A
 61%|██████    | 135/221 [00:50<00:21,  3.93it/s][A
 62%|██████▏   | 136/221 [00:50<00:19,  4.32it/s][A
 62%|██████▏   | 137/221 [00:50<00:17,  4.85it/s][A
 62%|██████▏   | 138/221 [00:51<00:18,  4.50it/s][A
 63%|██████▎   | 139/221 [00:51<00:15,  5.36it/s][A
 63%|██████▎   | 140/221 [00:51<00:14,  5.76it/s][A
 64%|██████▍   | 141/221 [00:51<00:12,  6.57it/s][A
 64%|██████▍   | 142/221 [00:51<00:16,  4.90it/s][A
 65%|██████▍   | 143/221 [00:51<00:14,  5.37it/s][A
 65%|██████▌   | 144/221 [00:52<00:13,  5.77it/s][A
 66%|██████▌   | 145/221 [00:52<00:14,  5.12it/s][A
 66%|██████▌   | 146/221 [00:52<00:15,  4.92it/s][A
 67%|██████▋   | 147/221 [00:52<00:12,  5.72it/s][A
 67%|██████▋   | 148/221 [00:52<00:14,  4.99it/s][A
 67%|██████▋   | 149/221 [00:53<00:13,  5.16it/s][A
 68%|██████▊   | 150/221 [00:53<00:13,  5.41it/s][A
 68%|██████▊   | 151/221 [00:54<00:32,  2.16it/s][A
 69%|██████▉   | 152/221 [00:54<00:32,  2.15it/s][A[h264 @ 0x556e59fb8940] mmco: unref short failure
[h264 @ 0x556e59fb8940] mmco: unref short failure

 69%|██████▉   | 153/221 [00:55<00:27,  2.45it/s][A
 70%|██████▉   | 154/221 [00:55<00:23,  2.86it/s][A
 71%|███████   | 156/221 [00:55<00:15,  4.31it/s][A
 71%|███████   | 157/221 [00:55<00:15,  4.19it/s][A
 71%|███████▏  | 158/221 [00:55<00:13,  4.51it/s][A
 72%|███████▏  | 160/221 [00:56<00:10,  5.61it/s][A
 73%|███████▎  | 161/221 [00:56<00:10,  5.87it/s][A
 73%|███████▎  | 162/221 [00:56<00:09,  6.07it/s][A
 74%|███████▍  | 163/221 [00:56<00:09,  5.83it/s][A
 74%|███████▍  | 164/221 [00:56<00:09,  5.93it/s][A
 75%|███████▌  | 166/221 [00:56<00:07,  7.66it/s][A
 76%|███████▌  | 167/221 [00:57<00:07,  7.67it/s][A
 76%|███████▌  | 168/221 [00:57<00:06,  8.00it/s][A
 76%|███████▋  | 169/221 [00:57<00:06,  7.69it/s][A
 77%|███████▋  | 170/221 [00:57<00:08,  6.07it/s][A
 77%|███████▋  | 171/221 [00:58<00:12,  4.10it/s][A
 78%|███████▊  | 172/221 [00:58<00:10,  4.50it/s][A
 78%|███████▊  | 173/221 [00:58<00:09,  5.08it/s][A
 79%|███████▊  | 174/221 [00:59<00:26,  1.75it/s][A
 79%|███████▉  | 175/221 [01:00<00:32,  1.43it/s][A
 80%|███████▉  | 176/221 [01:00<00:23,  1.90it/s][A
 80%|████████  | 177/221 [01:01<00:17,  2.50it/s][A
 81%|████████  | 178/221 [01:01<00:14,  2.91it/s][A
 81%|████████  | 179/221 [01:01<00:13,  3.04it/s][A
 81%|████████▏ | 180/221 [01:01<00:13,  3.14it/s][A
 82%|████████▏ | 181/221 [01:01<00:10,  3.92it/s][A
 83%|████████▎ | 183/221 [01:02<00:06,  5.46it/s][A
 83%|████████▎ | 184/221 [01:02<00:07,  4.76it/s][A
 84%|████████▍ | 186/221 [01:02<00:05,  6.14it/s][A
 85%|████████▌ | 188/221 [01:03<00:06,  5.42it/s][A
 86%|████████▌ | 189/221 [01:03<00:06,  5.04it/s][A
 86%|████████▌ | 190/221 [01:03<00:06,  5.14it/s][A
 87%|████████▋ | 192/221 [01:03<00:04,  6.59it/s][A
 88%|████████▊ | 194/221 [01:03<00:03,  7.05it/s][A
 88%|████████▊ | 195/221 [01:04<00:03,  7.03it/s][A
 89%|████████▊ | 196/221 [01:05<00:10,  2.48it/s][A
 90%|████████▉ | 198/221 [01:05<00:06,  3.45it/s][A
 90%|█████████ | 199/221 [01:05<00:05,  3.86it/s][A
 90%|█████████ | 200/221 [01:05<00:04,  4.30it/s][A[h264 @ 0x55b7df486640] mmco: unref short failure

 91%|█████████ | 201/221 [01:06<00:04,  4.80it/s][A
 91%|█████████▏| 202/221 [01:06<00:03,  5.14it/s][A
 92%|█████████▏| 203/221 [01:06<00:03,  5.88it/s][A
 92%|█████████▏| 204/221 [01:07<00:06,  2.57it/s][A
 93%|█████████▎| 205/221 [01:07<00:04,  3.23it/s][A
 93%|█████████▎| 206/221 [01:07<00:05,  2.79it/s][A
 94%|█████████▎| 207/221 [01:08<00:05,  2.66it/s][A
 94%|█████████▍| 208/221 [01:08<00:03,  3.31it/s][A
 95%|█████████▌| 210/221 [01:08<00:02,  5.14it/s][A
 95%|█████████▌| 211/221 [01:08<00:02,  4.53it/s][A
 96%|█████████▌| 212/221 [01:08<00:01,  4.96it/s][A
 96%|█████████▋| 213/221 [01:09<00:01,  4.64it/s][A
 97%|█████████▋| 214/221 [01:09<00:01,  5.02it/s][A
 97%|█████████▋| 215/221 [01:09<00:01,  5.81it/s][A
 98%|█████████▊| 216/221 [01:09<00:00,  5.81it/s][A
 98%|█████████▊| 217/221 [01:09<00:00,  5.60it/s][A
 99%|█████████▊| 218/221 [01:09<00:00,  6.15it/s][A
 99%|█████████▉| 219/221 [01:10<00:00,  6.86it/s][A
100%|█████████▉| 220/221 [01:10<00:00,  6.39it/s][A
100%|██████████| 221/221 [01:10<00:00,  6.32it/s][A100%|██████████| 221/221 [01:10<00:00,  3.14it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:03,  3.49it/s][A
  1%|          | 2/221 [00:00<01:00,  3.60it/s][A
  1%|▏         | 3/221 [00:00<00:59,  3.67it/s][A
  2%|▏         | 4/221 [00:01<00:58,  3.70it/s][A
  2%|▏         | 5/221 [00:01<00:58,  3.69it/s][A
  3%|▎         | 6/221 [00:01<00:57,  3.71it/s][A
  3%|▎         | 7/221 [00:01<00:57,  3.73it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.74it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.75it/s][A
  5%|▍         | 10/221 [00:02<00:56,  3.72it/s][A
  5%|▍         | 11/221 [00:02<00:56,  3.73it/s][A
  5%|▌         | 12/221 [00:03<00:56,  3.71it/s][A
  6%|▌         | 13/221 [00:03<00:55,  3.72it/s][A
  6%|▋         | 14/221 [00:03<00:55,  3.73it/s][A
  7%|▋         | 15/221 [00:04<00:55,  3.74it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.74it/s][A
  8%|▊         | 17/221 [00:04<00:54,  3.75it/s][A
  8%|▊         | 18/221 [00:04<00:54,  3.75it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.75it/s][A[h264 @ 0x55e519b67e40] mmco: unref short failure

  9%|▉         | 20/221 [00:05<00:53,  3.76it/s][A
 10%|▉         | 21/221 [00:05<00:53,  3.76it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.76it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.76it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.76it/s][A
 11%|█▏        | 25/221 [00:06<00:52,  3.76it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.76it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.76it/s][A
 13%|█▎        | 28/221 [00:07<00:51,  3.76it/s][A
 13%|█▎        | 29/221 [00:07<00:51,  3.76it/s][A
 14%|█▎        | 30/221 [00:08<00:50,  3.76it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.76it/s][A
 14%|█▍        | 32/221 [00:08<00:50,  3.76it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.77it/s][A
 15%|█▌        | 34/221 [00:09<00:49,  3.77it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.77it/s][A
 16%|█▋        | 36/221 [00:09<00:49,  3.78it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.78it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.78it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.78it/s][A
 19%|█▉        | 43/221 [00:11<00:47,  3.78it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.78it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.78it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.78it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.78it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:13<00:45,  3.78it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.78it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.78it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.78it/s][A
 24%|██▍       | 53/221 [00:14<00:44,  3.78it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.78it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.78it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.78it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.78it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.78it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.78it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.78it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.78it/s][A
 28%|██▊       | 62/221 [00:16<00:42,  3.78it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.78it/s][A
 29%|██▉       | 64/221 [00:17<00:41,  3.78it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.78it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.78it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.78it/s][A
 31%|███       | 68/221 [00:18<00:40,  3.78it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.78it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.78it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.78it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.78it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.78it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.78it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.78it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.78it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.78it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:22<00:36,  3.78it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.78it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 87/221 [00:23<00:35,  3.78it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.78it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.78it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.78it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.78it/s][A
 43%|████▎     | 96/221 [00:25<00:33,  3.78it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.78it/s][A
 44%|████▍     | 98/221 [00:26<00:32,  3.78it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.78it/s][A
 45%|████▌     | 100/221 [00:26<00:32,  3.78it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.78it/s][A
 46%|████▌     | 102/221 [00:27<00:31,  3.78it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.78it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 106/221 [00:28<00:30,  3.78it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.78it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.78it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.78it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.78it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.78it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.78it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.78it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 115/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 117/221 [00:31<00:27,  3.78it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.78it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.78it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.78it/s][A
 55%|█████▍    | 121/221 [00:32<00:26,  3.78it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.78it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.78it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.78it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.78it/s][A
 60%|█████▉    | 132/221 [00:35<00:23,  3.78it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 134/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 136/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 140/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.78it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.78it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.78it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.78it/s][A
 68%|██████▊   | 151/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.78it/s][A
 70%|███████   | 155/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.78it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.78it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.78it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.78it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.78it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.78it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.78it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.78it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.78it/s][A
 76%|███████▌  | 168/221 [00:44<00:14,  3.78it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 170/221 [00:45<00:13,  3.78it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.78it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.78it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.78it/s][A
 79%|███████▊  | 174/221 [00:46<00:12,  3.78it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.78it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.78it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.78it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.78it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.78it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.78it/s][A
 84%|████████▎ | 185/221 [00:49<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.78it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.78it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 189/221 [00:50<00:08,  3.78it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.78it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 193/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [00:56<00:02,  3.78it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.78it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.78it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.78it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.78it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.78it/s][A
 99%|█████████▉| 219/221 [00:58<00:00,  3.78it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.78it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:38,  5.71it/s][A
  1%|          | 2/221 [00:00<00:44,  4.96it/s][A
  1%|▏         | 3/221 [00:00<00:46,  4.65it/s][A
  2%|▏         | 4/221 [00:00<00:42,  5.14it/s][A
  2%|▏         | 5/221 [00:00<00:41,  5.22it/s][A
  3%|▎         | 7/221 [00:01<00:41,  5.19it/s][A
  4%|▎         | 8/221 [00:01<00:45,  4.64it/s][A
  4%|▍         | 9/221 [00:01<00:43,  4.86it/s][A
  5%|▍         | 10/221 [00:02<01:04,  3.25it/s][A
  5%|▍         | 11/221 [00:02<00:59,  3.50it/s][A
  5%|▌         | 12/221 [00:02<00:51,  4.07it/s][A
  6%|▌         | 13/221 [00:03<01:27,  2.36it/s][A
  7%|▋         | 15/221 [00:03<01:01,  3.33it/s][A
  7%|▋         | 16/221 [00:04<01:03,  3.24it/s][A
  8%|▊         | 17/221 [00:04<01:20,  2.54it/s][A
  8%|▊         | 18/221 [00:05<01:14,  2.74it/s][A
  9%|▊         | 19/221 [00:05<01:09,  2.90it/s][A
  9%|▉         | 20/221 [00:05<00:57,  3.51it/s][A
 10%|▉         | 21/221 [00:05<00:47,  4.18it/s][A
 10%|▉         | 22/221 [00:05<00:42,  4.66it/s][A
 10%|█         | 23/221 [00:05<00:36,  5.49it/s][A
 11%|█         | 24/221 [00:06<00:35,  5.63it/s][A
 11%|█▏        | 25/221 [00:06<00:36,  5.40it/s][A
 12%|█▏        | 26/221 [00:06<00:41,  4.70it/s][A
 12%|█▏        | 27/221 [00:06<00:36,  5.38it/s][A
 13%|█▎        | 28/221 [00:07<00:43,  4.45it/s][A
 13%|█▎        | 29/221 [00:07<00:39,  4.85it/s][A
 14%|█▎        | 30/221 [00:07<00:42,  4.53it/s][A
 14%|█▍        | 31/221 [00:07<00:38,  4.92it/s][A
 15%|█▍        | 33/221 [00:07<00:33,  5.64it/s][A
 15%|█▌        | 34/221 [00:08<00:34,  5.41it/s][A
 16%|█▌        | 35/221 [00:08<00:41,  4.47it/s][A
 16%|█▋        | 36/221 [00:08<00:41,  4.42it/s][A
 17%|█▋        | 37/221 [00:08<00:43,  4.24it/s][A
 17%|█▋        | 38/221 [00:09<00:48,  3.80it/s][A
 18%|█▊        | 39/221 [00:09<00:43,  4.21it/s][A
 18%|█▊        | 40/221 [00:09<00:50,  3.58it/s][A
 19%|█▊        | 41/221 [00:10<00:42,  4.29it/s][A
 19%|█▉        | 42/221 [00:10<00:48,  3.69it/s][A
 19%|█▉        | 43/221 [00:10<00:53,  3.34it/s][A
 20%|█▉        | 44/221 [00:10<00:50,  3.50it/s][A
 20%|██        | 45/221 [00:11<00:43,  4.02it/s][A
 21%|██        | 46/221 [00:11<00:41,  4.23it/s][A
 21%|██▏       | 47/221 [00:11<00:42,  4.13it/s][A
 22%|██▏       | 48/221 [00:11<00:38,  4.51it/s][A
 22%|██▏       | 49/221 [00:12<00:39,  4.31it/s][A
 23%|██▎       | 50/221 [00:12<00:39,  4.32it/s][A
 24%|██▎       | 52/221 [00:12<00:33,  5.12it/s][A
 24%|██▍       | 53/221 [00:12<00:32,  5.18it/s][A
 24%|██▍       | 54/221 [00:13<00:44,  3.73it/s][A
 25%|██▍       | 55/221 [00:13<00:42,  3.88it/s][A
 25%|██▌       | 56/221 [00:13<00:37,  4.40it/s][A
 26%|██▌       | 57/221 [00:13<00:38,  4.25it/s][A
 26%|██▌       | 58/221 [00:14<00:43,  3.77it/s][A
 27%|██▋       | 59/221 [00:14<00:42,  3.77it/s][A
 27%|██▋       | 60/221 [00:14<00:41,  3.88it/s][A
 28%|██▊       | 61/221 [00:14<00:37,  4.23it/s][A
 28%|██▊       | 62/221 [00:15<00:39,  3.98it/s][A
 29%|██▊       | 63/221 [00:15<00:33,  4.72it/s][A
 29%|██▉       | 64/221 [00:15<00:37,  4.15it/s][A
 30%|██▉       | 66/221 [00:16<00:42,  3.64it/s][A
 30%|███       | 67/221 [00:16<00:52,  2.93it/s][A
 31%|███       | 68/221 [00:16<00:45,  3.38it/s][A
 31%|███       | 69/221 [00:17<01:01,  2.47it/s][A
 32%|███▏      | 70/221 [00:17<00:49,  3.08it/s][A
 32%|███▏      | 71/221 [00:18<00:44,  3.35it/s][A
 33%|███▎      | 72/221 [00:18<00:48,  3.06it/s][A
 33%|███▎      | 73/221 [00:18<00:42,  3.49it/s][A
 33%|███▎      | 74/221 [00:18<00:34,  4.23it/s][A
 34%|███▍      | 75/221 [00:18<00:35,  4.08it/s][A
 34%|███▍      | 76/221 [00:19<00:34,  4.26it/s][A
 35%|███▍      | 77/221 [00:19<00:34,  4.15it/s][A
 35%|███▌      | 78/221 [00:19<00:30,  4.69it/s][A
 36%|███▌      | 79/221 [00:20<00:48,  2.90it/s][A
 36%|███▌      | 80/221 [00:20<00:42,  3.29it/s][A
 37%|███▋      | 81/221 [00:20<00:37,  3.76it/s][A
 37%|███▋      | 82/221 [00:20<00:39,  3.50it/s][A
 38%|███▊      | 83/221 [00:21<00:43,  3.15it/s][A
 38%|███▊      | 84/221 [00:21<00:37,  3.67it/s][A
 38%|███▊      | 85/221 [00:21<00:30,  4.47it/s][A
 39%|███▉      | 86/221 [00:21<00:29,  4.59it/s][A
 39%|███▉      | 87/221 [00:22<00:37,  3.55it/s][A
 40%|███▉      | 88/221 [00:22<00:43,  3.08it/s][A
 40%|████      | 89/221 [00:23<00:42,  3.10it/s][A
 41%|████      | 90/221 [00:23<00:42,  3.05it/s][A
 41%|████      | 91/221 [00:23<00:35,  3.61it/s][A
 42%|████▏     | 92/221 [00:23<00:36,  3.52it/s][A
 42%|████▏     | 93/221 [00:24<01:00,  2.13it/s][A
 43%|████▎     | 94/221 [00:25<00:55,  2.27it/s][A
 43%|████▎     | 95/221 [00:25<00:49,  2.54it/s][A
 43%|████▎     | 96/221 [00:25<00:41,  3.04it/s][A
 44%|████▍     | 97/221 [00:25<00:36,  3.43it/s][A
 44%|████▍     | 98/221 [00:26<00:34,  3.57it/s][A
 45%|████▍     | 99/221 [00:26<00:28,  4.22it/s][A
 45%|████▌     | 100/221 [00:26<00:28,  4.25it/s][A
 46%|████▌     | 101/221 [00:26<00:34,  3.44it/s][A
 46%|████▌     | 102/221 [00:27<00:42,  2.78it/s][A
 47%|████▋     | 103/221 [00:27<00:36,  3.26it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 105/221 [00:27<00:28,  4.04it/s][A
 48%|████▊     | 106/221 [00:28<00:35,  3.25it/s][A
 48%|████▊     | 107/221 [00:28<00:32,  3.50it/s][A
 49%|████▉     | 108/221 [00:28<00:30,  3.65it/s][A
 49%|████▉     | 109/221 [00:28<00:27,  4.02it/s][A
 50%|████▉     | 110/221 [00:29<00:25,  4.42it/s][A
 50%|█████     | 111/221 [00:29<00:25,  4.26it/s][A
 51%|█████     | 112/221 [00:29<00:30,  3.58it/s][A
 51%|█████     | 113/221 [00:30<00:28,  3.82it/s][A
 52%|█████▏    | 115/221 [00:30<00:22,  4.69it/s][A
 52%|█████▏    | 116/221 [00:30<00:25,  4.19it/s][A
 53%|█████▎    | 117/221 [00:30<00:24,  4.23it/s][A
 53%|█████▎    | 118/221 [00:31<00:24,  4.14it/s][A
 54%|█████▍    | 119/221 [00:31<00:32,  3.15it/s][A
 54%|█████▍    | 120/221 [00:31<00:30,  3.35it/s][A
 55%|█████▌    | 122/221 [00:32<00:23,  4.30it/s][A
 56%|█████▌    | 123/221 [00:32<00:22,  4.33it/s][A
 56%|█████▌    | 124/221 [00:32<00:22,  4.40it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.71it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.66it/s][A
 57%|█████▋    | 127/221 [00:33<00:28,  3.27it/s][A
 58%|█████▊    | 128/221 [00:33<00:26,  3.52it/s][A
 58%|█████▊    | 129/221 [00:34<00:21,  4.20it/s][A
 59%|█████▉    | 130/221 [00:34<00:20,  4.41it/s][A
 60%|█████▉    | 132/221 [00:34<00:16,  5.43it/s][A
 60%|██████    | 133/221 [00:34<00:19,  4.51it/s][A
 61%|██████    | 134/221 [00:35<00:19,  4.38it/s][A
 61%|██████    | 135/221 [00:35<00:21,  3.92it/s][A
 62%|██████▏   | 136/221 [00:35<00:21,  3.95it/s][A
 62%|██████▏   | 137/221 [00:35<00:19,  4.21it/s][A
 62%|██████▏   | 138/221 [00:36<00:22,  3.66it/s][A
 63%|██████▎   | 139/221 [00:36<00:26,  3.11it/s][A
 63%|██████▎   | 140/221 [00:36<00:24,  3.31it/s][A
 64%|██████▍   | 141/221 [00:37<00:23,  3.37it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.84it/s][A
 65%|██████▍   | 143/221 [00:38<00:30,  2.57it/s][A
 65%|██████▌   | 144/221 [00:38<00:33,  2.29it/s][A
 66%|██████▌   | 146/221 [00:38<00:20,  3.64it/s][A
 67%|██████▋   | 147/221 [00:39<00:20,  3.55it/s][A
 67%|██████▋   | 148/221 [00:39<00:23,  3.08it/s][A
 67%|██████▋   | 149/221 [00:39<00:22,  3.26it/s][A
 68%|██████▊   | 150/221 [00:40<00:21,  3.32it/s][A
 68%|██████▊   | 151/221 [00:40<00:21,  3.27it/s][A
 69%|██████▉   | 152/221 [00:41<00:33,  2.09it/s][A
 69%|██████▉   | 153/221 [00:41<00:27,  2.50it/s][A
 70%|██████▉   | 154/221 [00:41<00:23,  2.91it/s][A
 70%|███████   | 155/221 [00:42<00:22,  2.94it/s][A
 71%|███████   | 156/221 [00:42<00:26,  2.49it/s][A
 71%|███████   | 157/221 [00:42<00:22,  2.78it/s][A
 71%|███████▏  | 158/221 [00:43<00:21,  2.93it/s][A
 72%|███████▏  | 159/221 [00:43<00:17,  3.59it/s][A
 72%|███████▏  | 160/221 [00:43<00:15,  3.89it/s][A
 73%|███████▎  | 161/221 [00:43<00:16,  3.66it/s][A
 73%|███████▎  | 162/221 [00:44<00:14,  3.95it/s][A
 74%|███████▍  | 163/221 [00:44<00:14,  4.07it/s][A
 74%|███████▍  | 164/221 [00:44<00:13,  4.17it/s][A
 75%|███████▍  | 165/221 [00:44<00:14,  3.95it/s][A
 75%|███████▌  | 166/221 [00:45<00:13,  3.98it/s][A
 76%|███████▌  | 167/221 [00:45<00:11,  4.79it/s][A
 76%|███████▌  | 168/221 [00:45<00:12,  4.14it/s][A
 76%|███████▋  | 169/221 [00:45<00:11,  4.37it/s][A
 77%|███████▋  | 170/221 [00:46<00:14,  3.45it/s][A
 77%|███████▋  | 171/221 [00:46<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:46<00:11,  4.21it/s][A
 78%|███████▊  | 173/221 [00:46<00:14,  3.28it/s][A
 79%|███████▊  | 174/221 [00:47<00:16,  2.77it/s][A
 79%|███████▉  | 175/221 [00:47<00:16,  2.74it/s][A
 80%|███████▉  | 176/221 [00:47<00:13,  3.28it/s][A
 80%|████████  | 177/221 [00:48<00:11,  3.76it/s][A
 81%|████████  | 178/221 [00:48<00:10,  3.99it/s][A
 81%|████████  | 179/221 [00:48<00:10,  3.95it/s][A
 81%|████████▏ | 180/221 [00:48<00:09,  4.35it/s][A
 82%|████████▏ | 181/221 [00:48<00:09,  4.41it/s][A
 82%|████████▏ | 182/221 [00:49<00:09,  4.04it/s][A
 83%|████████▎ | 183/221 [00:49<00:08,  4.23it/s][A
 83%|████████▎ | 184/221 [00:49<00:07,  4.76it/s][A
 84%|████████▎ | 185/221 [00:49<00:06,  5.16it/s][A
 84%|████████▍ | 186/221 [00:50<00:09,  3.72it/s][A
 85%|████████▍ | 187/221 [00:50<00:09,  3.46it/s][A
 85%|████████▌ | 188/221 [00:50<00:09,  3.50it/s][A
 86%|████████▌ | 189/221 [00:51<00:08,  3.65it/s][A
 86%|████████▌ | 190/221 [00:51<00:09,  3.26it/s][A
 86%|████████▋ | 191/221 [00:51<00:07,  3.81it/s][A
 87%|████████▋ | 192/221 [00:52<00:08,  3.36it/s][A
 87%|████████▋ | 193/221 [00:52<00:06,  4.01it/s][A
 88%|████████▊ | 194/221 [00:52<00:07,  3.55it/s][A
 88%|████████▊ | 195/221 [00:52<00:06,  3.77it/s][A
 89%|████████▊ | 196/221 [00:53<00:07,  3.34it/s][A
 89%|████████▉ | 197/221 [00:53<00:06,  3.50it/s][A
 90%|████████▉ | 198/221 [00:53<00:07,  3.17it/s][A
 90%|█████████ | 199/221 [00:54<00:06,  3.38it/s][A
 90%|█████████ | 200/221 [00:54<00:06,  3.27it/s][A
 91%|█████████ | 201/221 [00:54<00:05,  3.45it/s][A
 91%|█████████▏| 202/221 [00:54<00:05,  3.39it/s][A
 92%|█████████▏| 203/221 [00:55<00:04,  3.95it/s][A
 92%|█████████▏| 204/221 [00:55<00:06,  2.45it/s][A
 93%|█████████▎| 205/221 [00:55<00:05,  3.06it/s][A
 93%|█████████▎| 206/221 [00:56<00:04,  3.11it/s][A
 94%|█████████▎| 207/221 [00:56<00:03,  3.88it/s][A
 94%|█████████▍| 208/221 [00:56<00:03,  4.05it/s][A
 95%|█████████▍| 209/221 [00:56<00:03,  3.60it/s][A
 95%|█████████▌| 210/221 [00:57<00:02,  4.35it/s][A
 95%|█████████▌| 211/221 [00:57<00:02,  3.51it/s][A
 96%|█████████▌| 212/221 [00:57<00:02,  3.47it/s][A
 96%|█████████▋| 213/221 [00:57<00:02,  3.87it/s][A
 97%|█████████▋| 214/221 [00:58<00:02,  3.05it/s][A
 97%|█████████▋| 215/221 [00:58<00:01,  3.18it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  3.11it/s][A
 98%|█████████▊| 217/221 [00:59<00:01,  3.16it/s][A
 99%|█████████▊| 218/221 [00:59<00:00,  3.07it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  2.80it/s][A
100%|█████████▉| 220/221 [01:00<00:00,  3.16it/s][A
100%|██████████| 221/221 [01:00<00:00,  3.28it/s][A100%|██████████| 221/221 [01:00<00:00,  3.64it/s]
09/09/2024 18:08:10 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 499--===========

09/09/2024 18:08:10 - INFO - __main__ -   {'area_r1': 35.6, 'area_recall': '35.6/58.5/68.2', 'area_ravg': 54.1}
09/09/2024 18:08:10 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 499--===========

09/09/2024 18:08:10 - INFO - __main__ -   {'forward_r1': 33.0, 'forward_recall': '33.0/59.5/69.3', 'forward_ravg': 54.0}
09/09/2024 18:08:10 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 499--===========

09/09/2024 18:08:10 - INFO - __main__ -   {'area_video_r1': 36.8, 'area_video_recall': '36.8/67.0/77.3', 'area_video_ravg': 60.3}
09/09/2024 18:08:10 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 299=======

09/09/2024 18:08:10 - INFO - __main__ -   {'area_video_r1': 40.6, 'area_video_recall': '40.6/66.7/79.0', 'area_video_ravg': 62.1}
09/09/2024 18:08:10 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 499--===========

09/09/2024 18:08:10 - INFO - __main__ -   {'area_video_r1': 50.7, 'area_video_recall': '50.7/73.0/79.1', 'area_video_ravg': 67.6, 'area_video_back_r1': 49.2, 'area_video_back_recall': '49.2/72.5/80.4', 'area_video_back_ravg': 67.4}
09/09/2024 18:08:10 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 18:08:10 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 18:08:10 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 499--===========

09/09/2024 18:08:10 - INFO - __main__ -   {'video_r1': 43.3, 'video_recall': '43.3/71.3/81.0', 'video_ravg': 65.2}
09/09/2024 18:08:10 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 18:08:10 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 18:08:10 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 499--===========

09/09/2024 18:08:10 - INFO - __main__ -   {'video_r1': 51.8, 'video_recall': '51.8/75.2/83.0', 'video_ravg': 70.0}
09/09/2024 18:08:10 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 249=======

09/09/2024 18:08:10 - INFO - __main__ -   {'video_r1': 52.1, 'video_recall': '52.1/76.0/82.5', 'video_ravg': 70.2}
09/09/2024 18:08:31 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.7985126972198486, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.03115835413336754, 'loss_ret%tv%ta--finetune_area/loss_area': 1.3913936614990234, 'loss_ret%tv%ta--finetune_area/total_loss': 3.221064567565918}
 26%|██▌       | 500/1945 [2:43:05<48:43:16, 121.38s/it] 26%|██▌       | 501/1945 [2:43:09<34:34:08, 86.18s/it] [h264 @ 0x556e454e0bc0] mmco: unref short failure
[h264 @ 0x556e589b7600] mmco: unref short failure
[h264 @ 0x556e589b7600] mmco: unref short failure
 26%|██▌       | 502/1945 [2:43:14<24:45:53, 61.78s/it][h264 @ 0x55e50a812900] mmco: unref short failure
[h264 @ 0x55e50a812900] mmco: unref short failure
 26%|██▌       | 503/1945 [2:43:19<17:58:57, 44.89s/it][h264 @ 0x55b7e37b3000] mmco: unref short failure
[h264 @ 0x55b7e37b3000] mmco: unref short failure
 26%|██▌       | 504/1945 [2:43:25<13:18:31, 33.25s/it][h264 @ 0x55b7e61ba240] mmco: unref short failure
 26%|██▌       | 505/1945 [2:43:32<10:04:49, 25.20s/it][h264 @ 0x55e5040a8880] mmco: unref short failure
 26%|██▌       | 506/1945 [2:43:38<7:50:18, 19.61s/it] [h264 @ 0x556e5cbfe9c0] mmco: unref short failure
 26%|██▌       | 507/1945 [2:43:46<6:27:37, 16.17s/it][h264 @ 0x55e5140167c0] mmco: unref short failure
 26%|██▌       | 508/1945 [2:43:54<5:24:35, 13.55s/it][h264 @ 0x55b7ec189d00] mmco: unref short failure
 26%|██▌       | 509/1945 [2:44:02<4:45:49, 11.94s/it][h264 @ 0x55b7d7226a00] mmco: unref short failure
[h264 @ 0x55b7d7226a00] mmco: unref short failure
[h264 @ 0x556e69bb5600] mmco: unref short failure
[h264 @ 0x556e69bb5600] mmco: unref short failure
 26%|██▌       | 510/1945 [2:44:09<4:11:02, 10.50s/it] 26%|██▋       | 511/1945 [2:44:17<3:50:59,  9.66s/it][h264 @ 0x55b7df466000] mmco: unref short failure
[h264 @ 0x55b7df466000] mmco: unref short failure
[h264 @ 0x556e6bbac100] mmco: unref short failure
[h264 @ 0x556e6bbac100] mmco: unref short failure
 26%|██▋       | 512/1945 [2:44:24<3:34:20,  8.97s/it][h264 @ 0x556e5178bc80] mmco: unref short failure
[h264 @ 0x556e5178bc80] mmco: unref short failure
 26%|██▋       | 513/1945 [2:44:32<3:22:37,  8.49s/it][h264 @ 0x556e5290d140] mmco: unref short failure
[h264 @ 0x55b7d374e240] mmco: unref short failure
[h264 @ 0x55b7d374e240] mmco: unref short failure
 26%|██▋       | 514/1945 [2:44:39<3:15:30,  8.20s/it][h264 @ 0x55b7d1961b00] mmco: unref short failure
[h264 @ 0x55b7d1961b00] mmco: unref short failure
 26%|██▋       | 515/1945 [2:44:46<3:07:11,  7.85s/it] 27%|██▋       | 516/1945 [2:44:55<3:12:15,  8.07s/it][h264 @ 0x55e50fe9a640] mmco: unref short failure
[h264 @ 0x55e50fe9a640] mmco: unref short failure
[h264 @ 0x556e64b4d4c0] mmco: unref short failure
[h264 @ 0x556e64b4d4c0] mmco: unref short failure
 27%|██▋       | 517/1945 [2:45:03<3:15:11,  8.20s/it][h264 @ 0x55e515715700] mmco: unref short failure
[h264 @ 0x55e503bf1d80] mmco: unref short failure
[h264 @ 0x55e503bf1d80] mmco: unref short failure
[h264 @ 0x55e503bf1d80] mmco: unref short failure
 27%|██▋       | 518/1945 [2:45:11<3:11:58,  8.07s/it][h264 @ 0x55e51b6ad6c0] mmco: unref short failure
[h264 @ 0x556e5a5b6700] mmco: unref short failure
 27%|██▋       | 519/1945 [2:45:19<3:11:13,  8.05s/it] 27%|██▋       | 520/1945 [2:45:30<3:32:01,  8.93s/it] 27%|██▋       | 521/1945 [2:45:40<3:42:17,  9.37s/it][h264 @ 0x55e510eea8c0] mmco: unref short failure
[h264 @ 0x556e71df1ac0] mmco: unref short failure
[h264 @ 0x556e71df1ac0] mmco: unref short failure
[h264 @ 0x55e50ce4abc0] mmco: unref short failure
 27%|██▋       | 522/1945 [2:45:52<3:54:26,  9.89s/it][h264 @ 0x556e62e7e1c0] mmco: unref short failure
[h264 @ 0x556e62e7e1c0] mmco: unref short failure
 27%|██▋       | 523/1945 [2:45:59<3:36:04,  9.12s/it][h264 @ 0x55e51bb73a00] mmco: unref short failure
[h264 @ 0x55b7e737eb00] mmco: unref short failure
[h264 @ 0x55b7e737eb00] mmco: unref short failure
[h264 @ 0x556e47f359c0] mmco: unref short failure
[h264 @ 0x556e69bb5600] mmco: unref short failure
[h264 @ 0x556e69bb5600] mmco: unref short failure
[h264 @ 0x55b7e0d2ddc0] mmco: unref short failure
[h264 @ 0x55e5133b1940] mmco: unref short failure
[h264 @ 0x556e4a003f40] mmco: unref short failure
[h264 @ 0x55e5188deb80] mmco: unref short failure
[h264 @ 0x55e5188deb80] mmco: unref short failure
[h264 @ 0x55e5188deb80] mmco: unref short failure
[h264 @ 0x55e5188deb80] mmco: unref short failure
[h264 @ 0x556e5452a7c0] mmco: unref short failure
[h264 @ 0x556e5452a7c0] mmco: unref short failure
[h264 @ 0x556e4ac21640] mmco: unref short failure
[h264 @ 0x556e4ac21640] mmco: unref short failure
[h264 @ 0x556e51214000] mmco: unref short failure
[h264 @ 0x556e51214000] mmco: unref short failure
 27%|██▋       | 524/1945 [2:46:36<6:54:02, 17.48s/it][h264 @ 0x55b7e7aa8700] mmco: unref short failure
[h264 @ 0x55b7cc7e1e80] mmco: unref short failure
[h264 @ 0x55e5094007c0] mmco: unref short failure
[h264 @ 0x55e5094007c0] mmco: unref short failure
[h264 @ 0x55e5163b5940] mmco: unref short failure
[h264 @ 0x556e538f3080] mmco: unref short failure
[h264 @ 0x556e589a3e00] mmco: unref short failure
[h264 @ 0x556e5d601e40] mmco: unref short failure
[h264 @ 0x556e5d601e40] mmco: unref short failure
[h264 @ 0x55e51b7b9180] mmco: unref short failure
[h264 @ 0x55e51b7b9180] mmco: unref short failure
 27%|██▋       | 525/1945 [2:47:05<8:13:29, 20.85s/it][h264 @ 0x55e516c37100] mmco: unref short failure
[h264 @ 0x55e516c37100] mmco: unref short failure
 27%|██▋       | 526/1945 [2:47:17<7:10:11, 18.19s/it][h264 @ 0x556e6ace1a40] mmco: unref short failure
[h264 @ 0x556e6ace1a40] mmco: unref short failure
[h264 @ 0x55b7e59b0c80] mmco: unref short failure
[h264 @ 0x55b7e59b0c80] mmco: unref short failure
[h264 @ 0x55e5163b6040] mmco: unref short failure
[h264 @ 0x55e5163b6040] mmco: unref short failure
 27%|██▋       | 527/1945 [2:47:25<5:58:43, 15.18s/it][h264 @ 0x55e51c6829c0] mmco: unref short failure
[h264 @ 0x55e51c6829c0] mmco: unref short failure
[h264 @ 0x55e501ebf200] mmco: unref short failure
[h264 @ 0x55e501ebf200] mmco: unref short failure
[h264 @ 0x55e5156caf40] mmco: unref short failure
[h264 @ 0x55e5156caf40] mmco: unref short failure
[h264 @ 0x556e6a2cf6c0] mmco: unref short failure
[h264 @ 0x556e6a2cf6c0] mmco: unref short failure
[h264 @ 0x556e726b73c0] mmco: unref short failure
[h264 @ 0x55b7cac153c0] mmco: unref short failure
[h264 @ 0x55b7cac153c0] mmco: unref short failure
 27%|██▋       | 528/1945 [2:47:38<5:47:10, 14.70s/it][h264 @ 0x556e52c152c0] mmco: unref short failure
[h264 @ 0x55b7dfcab480] mmco: unref short failure
[h264 @ 0x55e5064f6040] mmco: unref short failure
[h264 @ 0x55e5064f6040] mmco: unref short failure
[h264 @ 0x55b7cbd04a40] mmco: unref short failure
[h264 @ 0x55e51c6829c0] mmco: unref short failure
[h264 @ 0x55e51c6829c0] mmco: unref short failure
[h264 @ 0x556e6a82f8c0] mmco: unref short failure
[h264 @ 0x556e6a82f8c0] mmco: unref short failure
 27%|██▋       | 529/1945 [2:48:02<6:47:48, 17.28s/it][h264 @ 0x556e5bab1f80] mmco: unref short failure
 27%|██▋       | 530/1945 [2:48:09<5:40:46, 14.45s/it] 27%|██▋       | 531/1945 [2:48:17<4:50:57, 12.35s/it][h264 @ 0x55b7e59b0800] mmco: unref short failure
[h264 @ 0x55b7e59b0800] mmco: unref short failure
[h264 @ 0x55b7e59b0800] mmco: unref short failure
[h264 @ 0x55b7e59b0800] mmco: unref short failure
[h264 @ 0x55e519cf3dc0] mmco: unref short failure
[h264 @ 0x55e519cf3dc0] mmco: unref short failure
[h264 @ 0x556e53914400] mmco: unref short failure
[h264 @ 0x55e503bf24c0] mmco: unref short failure
[h264 @ 0x55e503bf24c0] mmco: unref short failure
[h264 @ 0x55e503bf24c0] mmco: unref short failure
[h264 @ 0x55e503bf24c0] mmco: unref short failure
[h264 @ 0x556e57025a00] mmco: unref short failure
[h264 @ 0x556e5213a940] mmco: unref short failure
 27%|██▋       | 532/1945 [2:48:54<7:47:38, 19.86s/it][h264 @ 0x55b7cc1654c0] mmco: unref short failure
[h264 @ 0x55b7cc1654c0] mmco: unref short failure
[h264 @ 0x556e6aab6740] mmco: unref short failure
[h264 @ 0x556e6aab6740] mmco: unref short failure
[h264 @ 0x556e55fdc1c0] mmco: unref short failure
[h264 @ 0x556e55fdc1c0] mmco: unref short failure
[h264 @ 0x55b7dabd73c0] mmco: unref short failure
[h264 @ 0x55e514396d40] mmco: unref short failure
[h264 @ 0x55e514396d40] mmco: unref short failure
[h264 @ 0x556e700dbb80] mmco: unref short failure
[h264 @ 0x556e700dbb80] mmco: unref short failure
[h264 @ 0x556e700dbb80] mmco: unref short failure
[h264 @ 0x556e700dbb80] mmco: unref short failure
[h264 @ 0x556e700dbb80] mmco: unref short failure
[h264 @ 0x556e700dbb80] mmco: unref short failure
[h264 @ 0x55b7dabd73c0] mmco: unref short failure
[h264 @ 0x55b7dabd73c0] mmco: unref short failure
 27%|██▋       | 533/1945 [2:49:08<7:02:28, 17.95s/it][h264 @ 0x556e6aab6940] mmco: unref short failure
[h264 @ 0x556e6ddcc900] mmco: unref short failure
[h264 @ 0x556e6ddcc900] mmco: unref short failure
[h264 @ 0x556e569c1900] mmco: unref short failure
[h264 @ 0x556e569c1900] mmco: unref short failure
 27%|██▋       | 534/1945 [2:49:18<6:07:53, 15.64s/it][h264 @ 0x55e51637cc80] mmco: unref short failure
[h264 @ 0x55e51637cc80] mmco: unref short failure
[h264 @ 0x556e57d2fec0] mmco: unref short failure
[h264 @ 0x556e57d2fec0] mmco: unref short failure
[h264 @ 0x556e646e8b40] mmco: unref short failure
 28%|██▊       | 535/1945 [2:49:27<5:18:00, 13.53s/it][h264 @ 0x556e5f36cc00] mmco: unref short failure
[h264 @ 0x556e438d1140] mmco: unref short failure
[h264 @ 0x55b7e1390100] mmco: unref short failure
[h264 @ 0x55b7e1390100] mmco: unref short failure
[h264 @ 0x556e443098c0] mmco: unref short failure
 28%|██▊       | 536/1945 [2:49:39<5:06:27, 13.05s/it][h264 @ 0x55b7e9c54540] mmco: unref short failure
[h264 @ 0x55e517691080] mmco: unref short failure
[h264 @ 0x55e517691080] mmco: unref short failure
[h264 @ 0x556e70b68040] mmco: unref short failure
[h264 @ 0x556e70b68040] mmco: unref short failure
[h264 @ 0x556e70b68040] mmco: unref short failure
[h264 @ 0x55e4fe5c26c0] mmco: unref short failure
[h264 @ 0x55e4fe5c26c0] mmco: unref short failure
 28%|██▊       | 537/1945 [2:50:05<6:41:20, 17.10s/it] 28%|██▊       | 538/1945 [2:50:13<5:32:49, 14.19s/it] 28%|██▊       | 539/1945 [2:50:20<4:47:46, 12.28s/it][h264 @ 0x556e4be46ec0] mmco: unref short failure
[h264 @ 0x556e520f3a40] mmco: unref short failure
[h264 @ 0x55e4fd203480] mmco: unref short failure
[h264 @ 0x55e4fd203480] mmco: unref short failure
[h264 @ 0x55b7ce2e5040] mmco: unref short failure
[h264 @ 0x55b7ce2e5040] mmco: unref short failure
[h264 @ 0x556e45d45840] mmco: unref short failure
[h264 @ 0x556e569d0b00] mmco: unref short failure
[h264 @ 0x556e569d0b00] mmco: unref short failure
[h264 @ 0x556e6a2d4d40] mmco: unref short failure
[h264 @ 0x556e6a2d4d40] mmco: unref short failure
[h264 @ 0x55b7eb25de80] mmco: unref short failure
[h264 @ 0x55b7d9270200] mmco: unref short failure
[h264 @ 0x55b7d9270200] mmco: unref short failure
[h264 @ 0x556e54d1da40] mmco: unref short failure
[h264 @ 0x556e54d1da40] mmco: unref short failure
[h264 @ 0x556e5b39b580] mmco: unref short failure
[h264 @ 0x556e5b39b580] mmco: unref short failure
[h264 @ 0x55e51abf13c0] mmco: unref short failure
[h264 @ 0x55e51abf13c0] mmco: unref short failure
[h264 @ 0x55e51abf13c0] mmco: unref short failure
[h264 @ 0x55e51abf13c0] mmco: unref short failure
[h264 @ 0x55e51abf13c0] mmco: unref short failure
[h264 @ 0x55e51abf13c0] mmco: unref short failure
[h264 @ 0x55e51abf13c0] mmco: unref short failure
[h264 @ 0x55e51abf13c0] mmco: unref short failure
[h264 @ 0x55e51abf13c0] mmco: unref short failure
[h264 @ 0x55e51abf13c0] mmco: unref short failure
[h264 @ 0x55e51abf13c0] mmco: unref short failure
[h264 @ 0x55e51abf13c0] mmco: unref short failure
[h264 @ 0x55e51db8d900] mmco: unref short failure
[h264 @ 0x55e51db8d900] mmco: unref short failure
[h264 @ 0x556e5f9411c0] mmco: unref short failure
[h264 @ 0x556e5f9411c0] mmco: unref short failure
[h264 @ 0x55e50acacb40] mmco: unref short failure
[h264 @ 0x55e50acacb40] mmco: unref short failure
[h264 @ 0x55e50d1d9500] mmco: unref short failure
[h264 @ 0x55e50d1d9500] mmco: unref short failure
 28%|██▊       | 540/1945 [2:50:59<7:51:15, 20.13s/it][h264 @ 0x55e51539ad00] mmco: unref short failure
[h264 @ 0x55e51539ad00] mmco: unref short failure
[h264 @ 0x55e4fea7d880] mmco: unref short failure
[h264 @ 0x55e4fea7d880] mmco: unref short failure
 28%|██▊       | 541/1945 [2:51:11<6:53:35, 17.67s/it][h264 @ 0x556e4285bc40] mmco: unref short failure
[h264 @ 0x556e4285bc40] mmco: unref short failure
[h264 @ 0x556e4285bc40] mmco: unref short failure
[h264 @ 0x556e4285bc40] mmco: unref short failure
 28%|██▊       | 542/1945 [2:51:17<5:36:09, 14.38s/it][h264 @ 0x55e501c8f840] mmco: unref short failure
 28%|██▊       | 543/1945 [2:51:34<5:54:39, 15.18s/it] 28%|██▊       | 544/1945 [2:51:42<5:01:15, 12.90s/it][h264 @ 0x55e51eaaaf00] mmco: unref short failure
[h264 @ 0x55e51eaaaf00] mmco: unref short failure
[h264 @ 0x55b7cd1e8100] mmco: unref short failure
[h264 @ 0x556e71a02b80] mmco: unref short failure
[h264 @ 0x556e71a02b80] mmco: unref short failure
[h264 @ 0x556e52c607c0] mmco: unref short failure
[h264 @ 0x55b7cb4d5580] mmco: unref short failure
 28%|██▊       | 545/1945 [2:52:05<6:13:21, 16.00s/it][h264 @ 0x556e5f391b00] mmco: unref short failure
[h264 @ 0x556e62e30c00] mmco: unref short failure
 28%|██▊       | 546/1945 [2:52:13<5:15:23, 13.53s/it][h264 @ 0x556e6de4d200] mmco: unref short failure
[h264 @ 0x55b7ccfb3580] mmco: unref short failure
[h264 @ 0x55b7ccfb3580] mmco: unref short failure
[h264 @ 0x55e516c37100] mmco: unref short failure
[h264 @ 0x55b7dd53e040] mmco: unref short failure
 28%|██▊       | 547/1945 [2:52:22<4:40:22, 12.03s/it][h264 @ 0x55e50199dd80] mmco: unref short failure
[h264 @ 0x55e50199dd80] mmco: unref short failure
[h264 @ 0x55b7d9d7e780] mmco: unref short failure
[h264 @ 0x55b7d9d7e780] mmco: unref short failure
[h264 @ 0x55b7d9d7e780] mmco: unref short failure
[h264 @ 0x556e6de4cac0] mmco: unref short failure
[h264 @ 0x556e6de4cac0] mmco: unref short failure
[h264 @ 0x556e580644c0] mmco: unref short failure
[h264 @ 0x556e580644c0] mmco: unref short failure
[h264 @ 0x55e518894440] mmco: unref short failure
[h264 @ 0x556e5b6cbfc0] mmco: unref short failure
[h264 @ 0x556e5b6cbfc0] mmco: unref short failure
[h264 @ 0x556e532a93c0] mmco: unref short failure
[h264 @ 0x556e532a93c0] mmco: unref short failure
[h264 @ 0x556e43cdb180] mmco: unref short failure
[h264 @ 0x556e43cdb180] mmco: unref short failure
 28%|██▊       | 548/1945 [2:53:03<8:08:09, 20.97s/it][h264 @ 0x55e5208ba8c0] mmco: unref short failure
[h264 @ 0x55e50e24f1c0] mmco: unref short failure
[h264 @ 0x55e50e24f1c0] mmco: unref short failure
[h264 @ 0x556e750ea980] mmco: unref short failure
[h264 @ 0x556e750ea980] mmco: unref short failure
[h264 @ 0x556e750ea980] mmco: unref short failure
[h264 @ 0x556e750ea980] mmco: unref short failure
[h264 @ 0x55b7d7714f80] mmco: unref short failure
[h264 @ 0x55b7d7714f80] mmco: unref short failure
 28%|██▊       | 549/1945 [2:53:15<7:04:09, 18.23s/it]09/09/2024 18:18:44 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 18:18:44 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b7ce24ba00] mmco: unref short failure
[h264 @ 0x55b7ce24ba00] mmco: unref short failure
[h264 @ 0x55b7cda034c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b7cb3197c0] mmco: unref short failure
[h264 @ 0x55b7cb3197c0] mmco: unref short failure
[h264 @ 0x55e505d93180] mmco: unref short failure
[h264 @ 0x55e505d93180] mmco: unref short failure
[h264 @ 0x55e512dc7b00] mmco: unref short failure
[h264 @ 0x55b7cc1bd900] mmco: unref short failure
[h264 @ 0x556e57d0ed80] mmco: unref short failure
[h264 @ 0x556e55acb080] mmco: unref short failure
[h264 @ 0x556e55acb080] mmco: unref short failure
[h264 @ 0x55e517690c00] mmco: unref short failure
[h264 @ 0x55e517690c00] mmco: unref short failure
[h264 @ 0x556e58aab280] mmco: unref short failure
[h264 @ 0x556e58aab280] mmco: unref short failure
[h264 @ 0x55b7cb7a0f00] mmco: unref short failure
[h264 @ 0x55b7cb7a0f00] mmco: unref short failure
[h264 @ 0x55b7e14f7040] mmco: unref short failure
[h264 @ 0x55b7e14f7040] mmco: unref short failure
[h264 @ 0x55b7eb8cfb00] mmco: unref short failure
[h264 @ 0x55b7eb8cfb00] mmco: unref short failure
[h264 @ 0x556e5d607f00] mmco: unref short failure
[h264 @ 0x55b7cedef540] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:29,  7.56it/s][A
  1%|          | 2/221 [00:00<01:29,  2.45it/s][A
  1%|▏         | 3/221 [00:00<01:12,  3.00it/s][A
  2%|▏         | 4/221 [00:01<01:00,  3.60it/s][A
  2%|▏         | 5/221 [00:01<01:00,  3.60it/s][A[h264 @ 0x55b7cad9e600] mmco: unref short failure

  3%|▎         | 6/221 [00:01<00:52,  4.12it/s][A
  3%|▎         | 7/221 [00:01<00:55,  3.86it/s][A
  4%|▎         | 8/221 [00:02<00:51,  4.17it/s][A
  4%|▍         | 9/221 [00:02<00:44,  4.72it/s][A
  5%|▍         | 10/221 [00:04<02:40,  1.31it/s][A
  5%|▍         | 11/221 [00:04<02:03,  1.70it/s][A
  6%|▌         | 13/221 [00:04<01:29,  2.33it/s][A
  6%|▋         | 14/221 [00:08<04:16,  1.24s/it][A
  7%|▋         | 15/221 [00:08<03:15,  1.05it/s][A
  7%|▋         | 16/221 [00:09<02:57,  1.15it/s][A
  8%|▊         | 17/221 [00:10<03:09,  1.08it/s][A
  8%|▊         | 18/221 [00:10<02:26,  1.38it/s][A
  9%|▊         | 19/221 [00:10<01:53,  1.79it/s][A
  9%|▉         | 20/221 [00:11<01:29,  2.25it/s][A
 10%|▉         | 21/221 [00:11<01:09,  2.86it/s][A
 10%|▉         | 22/221 [00:11<00:55,  3.57it/s][A
 10%|█         | 23/221 [00:11<00:45,  4.39it/s][A
 11%|█         | 24/221 [00:11<00:42,  4.62it/s][A
 11%|█▏        | 25/221 [00:11<00:37,  5.20it/s][A
 12%|█▏        | 26/221 [00:11<00:41,  4.67it/s][A
 12%|█▏        | 27/221 [00:12<00:40,  4.75it/s][A
 13%|█▎        | 28/221 [00:12<00:41,  4.60it/s][A
 13%|█▎        | 29/221 [00:16<04:19,  1.35s/it][A
 14%|█▎        | 30/221 [00:16<03:08,  1.01it/s][A
 14%|█▍        | 31/221 [00:16<02:20,  1.35it/s][A[h264 @ 0x556e46313340] mmco: unref short failure

 15%|█▍        | 33/221 [00:17<01:45,  1.79it/s][A
 15%|█▌        | 34/221 [00:17<01:24,  2.22it/s][A
 16%|█▌        | 35/221 [00:17<01:13,  2.55it/s][A
 16%|█▋        | 36/221 [00:17<01:00,  3.06it/s][A
 17%|█▋        | 37/221 [00:18<00:49,  3.68it/s][A
 17%|█▋        | 38/221 [00:18<00:46,  3.91it/s][A[h264 @ 0x55b7cffa1b80] mmco: unref short failure

 18%|█▊        | 39/221 [00:19<01:24,  2.16it/s][A
 18%|█▊        | 40/221 [00:19<01:13,  2.46it/s][A
 19%|█▊        | 41/221 [00:19<01:02,  2.87it/s][A[h264 @ 0x556e42bde700] mmco: unref short failure

[h264 @ 0x556e42bde700] mmco: unref short failure
 19%|█▉        | 43/221 [00:19<00:43,  4.11it/s][A
 20%|█▉        | 44/221 [00:20<00:40,  4.42it/s][A
 20%|██        | 45/221 [00:20<00:36,  4.80it/s][A
 21%|██        | 46/221 [00:20<00:32,  5.33it/s][A
 21%|██▏       | 47/221 [00:20<00:29,  5.85it/s][A
 22%|██▏       | 49/221 [00:20<00:32,  5.36it/s][A
 23%|██▎       | 50/221 [00:24<03:02,  1.07s/it][A
 23%|██▎       | 51/221 [00:24<02:23,  1.19it/s][A
 24%|██▎       | 52/221 [00:25<01:56,  1.45it/s][A
 24%|██▍       | 53/221 [00:25<01:28,  1.89it/s][A
 24%|██▍       | 54/221 [00:25<01:10,  2.38it/s][A
 25%|██▍       | 55/221 [00:25<00:55,  2.99it/s][A
 25%|██▌       | 56/221 [00:25<00:47,  3.47it/s][A
 26%|██▌       | 57/221 [00:25<00:41,  3.98it/s][A
 26%|██▌       | 58/221 [00:26<00:41,  3.90it/s][A
 27%|██▋       | 59/221 [00:26<00:43,  3.73it/s][A
 27%|██▋       | 60/221 [00:26<00:35,  4.56it/s][A
 28%|██▊       | 62/221 [00:26<00:29,  5.41it/s][A[h264 @ 0x55e500ce1cc0] mmco: unref short failure
[h264 @ 0x55e500ce1cc0] mmco: unref short failure

 29%|██▊       | 63/221 [00:27<00:33,  4.66it/s][A
 29%|██▉       | 64/221 [00:27<00:29,  5.32it/s][A
 30%|██▉       | 66/221 [00:27<00:22,  7.01it/s][A
 30%|███       | 67/221 [00:27<00:20,  7.46it/s][A
 31%|███       | 68/221 [00:27<00:22,  6.85it/s][A
 31%|███       | 69/221 [00:28<00:31,  4.77it/s][A
 32%|███▏      | 70/221 [00:28<00:33,  4.56it/s][A
 32%|███▏      | 71/221 [00:28<00:40,  3.68it/s][A
 33%|███▎      | 72/221 [00:29<00:38,  3.91it/s][A
 33%|███▎      | 73/221 [00:29<00:39,  3.77it/s][A
 33%|███▎      | 74/221 [00:29<00:32,  4.57it/s][A
 34%|███▍      | 75/221 [00:29<00:41,  3.52it/s][A
 34%|███▍      | 76/221 [00:29<00:34,  4.26it/s][A
 35%|███▍      | 77/221 [00:30<00:29,  4.90it/s][A
 35%|███▌      | 78/221 [00:30<00:35,  4.06it/s][A
 36%|███▌      | 79/221 [00:30<00:31,  4.54it/s][A
 36%|███▌      | 80/221 [00:30<00:27,  5.13it/s][A
 37%|███▋      | 81/221 [00:30<00:28,  4.92it/s][A
 37%|███▋      | 82/221 [00:31<00:39,  3.51it/s][A
 38%|███▊      | 83/221 [00:35<03:15,  1.42s/it][A
 38%|███▊      | 84/221 [00:35<02:24,  1.06s/it][A
 38%|███▊      | 85/221 [00:35<01:48,  1.25it/s][A
 39%|███▉      | 86/221 [00:36<01:23,  1.62it/s][A
 39%|███▉      | 87/221 [00:36<01:15,  1.78it/s][A
 40%|███▉      | 88/221 [00:36<00:59,  2.25it/s][A
 40%|████      | 89/221 [00:37<00:56,  2.34it/s][A
 41%|████      | 90/221 [00:37<00:52,  2.51it/s][A
 41%|████      | 91/221 [00:37<00:43,  2.97it/s][A[h264 @ 0x556e6412e280] mmco: unref short failure
[h264 @ 0x556e6412e280] mmco: unref short failure

 42%|████▏     | 92/221 [00:37<00:39,  3.26it/s][A
 42%|████▏     | 93/221 [00:38<00:32,  3.96it/s][A
 43%|████▎     | 95/221 [00:39<01:08,  1.84it/s][A
 43%|████▎     | 96/221 [00:39<00:55,  2.24it/s][A
 44%|████▍     | 97/221 [00:40<00:48,  2.57it/s][A
 44%|████▍     | 98/221 [00:40<00:45,  2.72it/s][A
 45%|████▌     | 100/221 [00:40<00:29,  4.06it/s][A
 46%|████▌     | 102/221 [00:40<00:21,  5.43it/s][A
 47%|████▋     | 103/221 [00:40<00:20,  5.85it/s][A
 48%|████▊     | 105/221 [00:41<00:18,  6.13it/s][A
 48%|████▊     | 106/221 [00:41<00:19,  5.78it/s][A
 48%|████▊     | 107/221 [00:41<00:17,  6.34it/s][A
 49%|████▉     | 108/221 [00:41<00:18,  6.26it/s][A
 49%|████▉     | 109/221 [00:41<00:20,  5.57it/s][A
 50%|████▉     | 110/221 [00:42<00:18,  5.87it/s][A
 50%|█████     | 111/221 [00:42<00:23,  4.59it/s][A
 51%|█████     | 112/221 [00:42<00:26,  4.07it/s][A
 51%|█████     | 113/221 [00:43<00:26,  4.01it/s][A
 52%|█████▏    | 114/221 [00:43<00:35,  3.02it/s][A
 52%|█████▏    | 116/221 [00:43<00:24,  4.24it/s][A
 53%|█████▎    | 117/221 [00:44<00:24,  4.30it/s][A
 53%|█████▎    | 118/221 [00:44<00:25,  4.11it/s][A
 54%|█████▍    | 120/221 [00:44<00:19,  5.14it/s][A
 55%|█████▍    | 121/221 [00:44<00:18,  5.35it/s][A
 56%|█████▌    | 123/221 [00:44<00:13,  7.11it/s][A
 56%|█████▌    | 124/221 [00:45<00:16,  5.84it/s][A
 57%|█████▋    | 125/221 [00:45<00:17,  5.64it/s][A
 57%|█████▋    | 126/221 [00:45<00:15,  6.10it/s][A
 57%|█████▋    | 127/221 [00:45<00:16,  5.63it/s][A
 58%|█████▊    | 128/221 [00:45<00:18,  4.96it/s][A
 59%|█████▉    | 130/221 [00:46<00:15,  5.76it/s][A
 59%|█████▉    | 131/221 [00:46<00:15,  5.67it/s][A
 60%|█████▉    | 132/221 [00:46<00:21,  4.21it/s][A
 60%|██████    | 133/221 [00:47<00:21,  4.13it/s][A
 61%|██████    | 134/221 [00:47<00:17,  4.86it/s][A
 61%|██████    | 135/221 [00:47<00:15,  5.57it/s][A
 62%|██████▏   | 136/221 [00:47<00:14,  5.70it/s][A
 62%|██████▏   | 137/221 [00:47<00:13,  6.29it/s][A
 62%|██████▏   | 138/221 [00:47<00:14,  5.56it/s][A
 63%|██████▎   | 139/221 [00:47<00:13,  5.88it/s][A
 63%|██████▎   | 140/221 [00:48<00:12,  6.35it/s][A
 64%|██████▍   | 141/221 [00:48<00:11,  6.75it/s][A
 64%|██████▍   | 142/221 [00:48<00:21,  3.71it/s][A
 65%|██████▍   | 143/221 [00:48<00:18,  4.21it/s][A
 65%|██████▌   | 144/221 [00:49<00:15,  4.95it/s][A
 66%|██████▌   | 145/221 [00:49<00:14,  5.33it/s][A
 67%|██████▋   | 147/221 [00:49<00:10,  7.12it/s][A
 67%|██████▋   | 148/221 [00:49<00:12,  5.76it/s][A
 67%|██████▋   | 149/221 [00:49<00:11,  6.41it/s][A
 68%|██████▊   | 150/221 [00:49<00:12,  5.88it/s][A
 68%|██████▊   | 151/221 [00:50<00:26,  2.65it/s][A
 69%|██████▉   | 152/221 [00:51<00:29,  2.38it/s][A
 69%|██████▉   | 153/221 [00:51<00:26,  2.56it/s][A
 70%|██████▉   | 154/221 [00:51<00:21,  3.17it/s][A
 71%|███████   | 156/221 [00:52<00:13,  4.71it/s][A
 71%|███████   | 157/221 [00:52<00:12,  5.03it/s][A
 71%|███████▏  | 158/221 [00:52<00:11,  5.69it/s][A
 72%|███████▏  | 160/221 [00:52<00:09,  6.61it/s][A
 73%|███████▎  | 161/221 [00:52<00:08,  6.78it/s][A
 74%|███████▍  | 163/221 [00:52<00:07,  7.70it/s][A
 74%|███████▍  | 164/221 [00:52<00:07,  7.95it/s][A
 75%|███████▌  | 166/221 [00:53<00:05, 10.07it/s][A
 76%|███████▌  | 168/221 [00:53<00:05,  8.94it/s][A[h264 @ 0x556e5f4d8fc0] mmco: unref short failure

 77%|███████▋  | 170/221 [00:53<00:06,  7.36it/s][A
 77%|███████▋  | 171/221 [00:54<00:09,  5.08it/s][A
 78%|███████▊  | 172/221 [00:54<00:09,  5.15it/s][A
 78%|███████▊  | 173/221 [00:54<00:08,  5.60it/s][A[h264 @ 0x556e43702a00] mmco: unref short failure
[h264 @ 0x55e506bd9f00] mmco: unref short failure

 79%|███████▊  | 174/221 [00:55<00:21,  2.21it/s][A
 79%|███████▉  | 175/221 [00:56<00:25,  1.79it/s][A
 80%|███████▉  | 176/221 [00:56<00:19,  2.28it/s][A
 81%|████████  | 178/221 [00:57<00:13,  3.14it/s][A
 81%|████████  | 179/221 [00:57<00:12,  3.48it/s][A
 81%|████████▏ | 180/221 [00:57<00:12,  3.41it/s][A
 82%|████████▏ | 182/221 [00:57<00:08,  4.84it/s][A
 83%|████████▎ | 184/221 [00:58<00:06,  5.37it/s][A
 84%|████████▍ | 186/221 [00:58<00:05,  6.65it/s][A
 85%|████████▌ | 188/221 [00:58<00:05,  5.59it/s][A[h264 @ 0x556e69bb5600] mmco: unref short failure
[h264 @ 0x556e69bb5600] mmco: unref short failure
[h264 @ 0x556e69bb5600] mmco: unref short failure
[h264 @ 0x556e69bb5600] mmco: unref short failure

 86%|████████▌ | 189/221 [00:58<00:05,  5.35it/s][A
 86%|████████▌ | 190/221 [00:59<00:05,  5.54it/s][A[h264 @ 0x556e43d5a140] mmco: unref short failure

 87%|████████▋ | 192/221 [00:59<00:03,  7.37it/s][A
 88%|████████▊ | 194/221 [00:59<00:03,  7.75it/s][A
 89%|████████▊ | 196/221 [01:01<00:09,  2.71it/s][A
 90%|████████▉ | 198/221 [01:01<00:06,  3.60it/s][A
 90%|█████████ | 200/221 [01:01<00:04,  4.49it/s][A
 91%|█████████ | 201/221 [01:01<00:04,  5.00it/s][A
 91%|█████████▏| 202/221 [01:01<00:03,  5.42it/s][A
 92%|█████████▏| 204/221 [01:02<00:04,  3.46it/s][A
 93%|█████████▎| 205/221 [01:02<00:04,  3.91it/s][A
 93%|█████████▎| 206/221 [01:03<00:04,  3.34it/s][A[h264 @ 0x55e5006a41c0] mmco: unref short failure

 94%|█████████▎| 207/221 [01:03<00:04,  3.34it/s][A
 94%|█████████▍| 208/221 [01:03<00:03,  4.03it/s][A
 95%|█████████▌| 211/221 [01:03<00:01,  5.66it/s][A
 96%|█████████▌| 212/221 [01:04<00:01,  6.15it/s][A
 96%|█████████▋| 213/221 [01:04<00:01,  5.50it/s][A
 97%|█████████▋| 214/221 [01:04<00:01,  5.67it/s][A
 98%|█████████▊| 216/221 [01:04<00:00,  6.80it/s][A
 98%|█████████▊| 217/221 [01:04<00:00,  6.42it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  6.98it/s][A[h264 @ 0x55e51a232080] mmco: unref short failure
[h264 @ 0x55e51a232080] mmco: unref short failure

100%|█████████▉| 220/221 [01:05<00:00,  7.56it/s][A
100%|██████████| 221/221 [01:05<00:00,  7.66it/s][A100%|██████████| 221/221 [01:05<00:00,  3.38it/s]
[h264 @ 0x556e4b712680] mmco: unref short failure
[h264 @ 0x556e4b712680] mmco: unref short failure
[h264 @ 0x556e5bd57d40] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.78it/s][A
  1%|          | 2/221 [00:00<00:58,  3.77it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.77it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.77it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.77it/s][A
  3%|▎         | 6/221 [00:01<00:57,  3.77it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.77it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.77it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.77it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.77it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.77it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.78it/s][A
  6%|▌         | 13/221 [00:03<00:55,  3.78it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.78it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.78it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:51,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 28/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.78it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.78it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.78it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.78it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.78it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:14<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:37,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.78it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.78it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.78it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.78it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.78it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 115/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.78it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.78it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.78it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.78it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.78it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.78it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.78it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.78it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.78it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 134/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.78it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.78it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.78it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.78it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.78it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.78it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.78it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.78it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.78it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.78it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.78it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.78it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.78it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.78it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.78it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.78it/s][A
 76%|███████▌  | 168/221 [00:44<00:14,  3.78it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.78it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.78it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.78it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.78it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.78it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.78it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.78it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.78it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.78it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.78it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.78it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.78it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.78it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [00:56<00:02,  3.78it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.78it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.78it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.78it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.78it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.78it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.78it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.78it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:36,  5.99it/s][A
  1%|          | 2/221 [00:00<00:44,  4.89it/s][A
  1%|▏         | 3/221 [00:00<00:47,  4.62it/s][A
  2%|▏         | 4/221 [00:00<00:42,  5.08it/s][A
  2%|▏         | 5/221 [00:00<00:42,  5.06it/s][A
  3%|▎         | 7/221 [00:01<00:40,  5.24it/s][A
  4%|▎         | 8/221 [00:01<00:44,  4.75it/s][A
  4%|▍         | 9/221 [00:01<00:42,  5.00it/s][A
  5%|▍         | 10/221 [00:02<01:02,  3.37it/s][A
  5%|▍         | 11/221 [00:02<00:57,  3.66it/s][A
  5%|▌         | 12/221 [00:02<00:49,  4.22it/s][A
  6%|▌         | 13/221 [00:03<01:32,  2.25it/s][A
  7%|▋         | 15/221 [00:03<01:05,  3.15it/s][A
  7%|▋         | 16/221 [00:04<01:06,  3.10it/s][A
  8%|▊         | 17/221 [00:04<01:24,  2.42it/s][A
  8%|▊         | 18/221 [00:05<01:18,  2.60it/s][A
  9%|▊         | 19/221 [00:05<01:13,  2.75it/s][A
  9%|▉         | 20/221 [00:05<00:59,  3.40it/s][A
 10%|▉         | 21/221 [00:05<00:50,  3.97it/s][A
 10%|▉         | 22/221 [00:06<00:43,  4.59it/s][A
 10%|█         | 23/221 [00:06<00:36,  5.45it/s][A
 11%|█         | 24/221 [00:06<00:34,  5.64it/s][A
 11%|█▏        | 25/221 [00:06<00:38,  5.11it/s][A
 12%|█▏        | 26/221 [00:06<00:42,  4.63it/s][A
 12%|█▏        | 27/221 [00:06<00:35,  5.42it/s][A
 13%|█▎        | 28/221 [00:07<00:41,  4.62it/s][A
 13%|█▎        | 29/221 [00:07<00:38,  5.03it/s][A
 14%|█▎        | 30/221 [00:07<00:40,  4.69it/s][A
 14%|█▍        | 31/221 [00:07<00:37,  5.01it/s][A
 15%|█▍        | 33/221 [00:08<00:32,  5.81it/s][A
 15%|█▌        | 34/221 [00:08<00:34,  5.38it/s][A
 16%|█▌        | 35/221 [00:08<00:41,  4.49it/s][A
 16%|█▋        | 36/221 [00:08<00:42,  4.32it/s][A
 17%|█▋        | 37/221 [00:09<00:44,  4.15it/s][A
 17%|█▋        | 38/221 [00:09<00:45,  3.98it/s][A
 18%|█▊        | 39/221 [00:09<00:41,  4.33it/s][A
 18%|█▊        | 40/221 [00:09<00:49,  3.63it/s][A
 19%|█▊        | 41/221 [00:10<00:41,  4.32it/s][A
 19%|█▉        | 42/221 [00:10<00:48,  3.73it/s][A
 19%|█▉        | 43/221 [00:10<00:52,  3.38it/s][A
 20%|█▉        | 44/221 [00:11<00:47,  3.70it/s][A
 20%|██        | 45/221 [00:11<00:42,  4.18it/s][A
 21%|██        | 46/221 [00:11<00:40,  4.33it/s][A
 21%|██▏       | 47/221 [00:11<00:42,  4.05it/s][A
 22%|██▏       | 48/221 [00:11<00:38,  4.46it/s][A
 22%|██▏       | 49/221 [00:12<00:38,  4.44it/s][A
 23%|██▎       | 50/221 [00:12<00:40,  4.25it/s][A
 24%|██▎       | 52/221 [00:12<00:33,  5.07it/s][A
 24%|██▍       | 53/221 [00:12<00:31,  5.40it/s][A
 24%|██▍       | 54/221 [00:13<00:45,  3.67it/s][A
 25%|██▍       | 55/221 [00:13<00:43,  3.85it/s][A
 25%|██▌       | 56/221 [00:13<00:38,  4.25it/s][A
 26%|██▌       | 57/221 [00:13<00:40,  4.04it/s][A
 26%|██▌       | 58/221 [00:14<00:42,  3.80it/s][A
 27%|██▋       | 59/221 [00:14<00:43,  3.72it/s][A
 27%|██▋       | 60/221 [00:14<00:40,  3.97it/s][A
 28%|██▊       | 61/221 [00:14<00:38,  4.19it/s][A
 28%|██▊       | 62/221 [00:15<00:39,  4.06it/s][A
 29%|██▊       | 63/221 [00:15<00:32,  4.89it/s][A
 29%|██▉       | 64/221 [00:15<00:37,  4.24it/s][A
 29%|██▉       | 65/221 [00:15<00:30,  5.05it/s][A
 30%|██▉       | 66/221 [00:16<00:45,  3.39it/s][A
 30%|███       | 67/221 [00:16<00:54,  2.81it/s][A
 31%|███       | 68/221 [00:16<00:46,  3.32it/s][A
 31%|███       | 69/221 [00:17<01:02,  2.44it/s][A
 32%|███▏      | 70/221 [00:17<00:48,  3.10it/s][A
 32%|███▏      | 71/221 [00:17<00:45,  3.30it/s][A
 33%|███▎      | 72/221 [00:18<00:50,  2.96it/s][A
 33%|███▎      | 73/221 [00:18<00:43,  3.44it/s][A
 33%|███▎      | 74/221 [00:18<00:34,  4.23it/s][A
 34%|███▍      | 75/221 [00:18<00:36,  4.02it/s][A
 34%|███▍      | 76/221 [00:19<00:35,  4.11it/s][A
 35%|███▍      | 77/221 [00:19<00:35,  4.05it/s][A
 35%|███▌      | 78/221 [00:19<00:30,  4.75it/s][A
 36%|███▌      | 79/221 [00:20<00:51,  2.74it/s][A
 36%|███▌      | 80/221 [00:20<00:44,  3.16it/s][A
 37%|███▋      | 81/221 [00:20<00:39,  3.56it/s][A
 37%|███▋      | 82/221 [00:21<00:43,  3.22it/s][A
 38%|███▊      | 83/221 [00:21<00:44,  3.08it/s][A
 38%|███▊      | 84/221 [00:21<00:37,  3.64it/s][A
 38%|███▊      | 85/221 [00:21<00:30,  4.47it/s][A
 39%|███▉      | 86/221 [00:21<00:28,  4.71it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.82it/s][A
 40%|███▉      | 88/221 [00:22<00:41,  3.19it/s][A
 40%|████      | 89/221 [00:23<00:44,  3.00it/s][A
 41%|████      | 90/221 [00:23<00:42,  3.10it/s][A
 41%|████      | 91/221 [00:23<00:35,  3.65it/s][A
 42%|████▏     | 92/221 [00:23<00:36,  3.51it/s][A
 42%|████▏     | 93/221 [00:24<00:58,  2.18it/s][A
 43%|████▎     | 94/221 [00:25<00:54,  2.34it/s][A
 43%|████▎     | 95/221 [00:25<00:47,  2.65it/s][A
 43%|████▎     | 96/221 [00:25<00:39,  3.14it/s][A
 44%|████▍     | 97/221 [00:25<00:34,  3.63it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.75it/s][A
 45%|████▍     | 99/221 [00:26<00:28,  4.29it/s][A
 45%|████▌     | 100/221 [00:26<00:28,  4.28it/s][A
 46%|████▌     | 101/221 [00:26<00:34,  3.48it/s][A
 46%|████▌     | 102/221 [00:27<00:43,  2.74it/s][A
 47%|████▋     | 103/221 [00:27<00:37,  3.16it/s][A
 47%|████▋     | 104/221 [00:27<00:32,  3.59it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.83it/s][A
 48%|████▊     | 106/221 [00:28<00:37,  3.07it/s][A
 48%|████▊     | 107/221 [00:28<00:36,  3.17it/s][A
 49%|████▉     | 108/221 [00:28<00:32,  3.46it/s][A
 49%|████▉     | 109/221 [00:29<00:28,  3.92it/s][A
 50%|████▉     | 110/221 [00:29<00:26,  4.18it/s][A
 50%|█████     | 111/221 [00:29<00:28,  3.81it/s][A
 51%|█████     | 112/221 [00:29<00:31,  3.44it/s][A
 51%|█████     | 113/221 [00:30<00:27,  3.99it/s][A
 52%|█████▏    | 115/221 [00:30<00:21,  4.83it/s][A
 52%|█████▏    | 116/221 [00:30<00:25,  4.20it/s][A
 53%|█████▎    | 117/221 [00:30<00:24,  4.23it/s][A
 53%|█████▎    | 118/221 [00:31<00:24,  4.14it/s][A
 54%|█████▍    | 119/221 [00:31<00:33,  3.09it/s][A
 54%|█████▍    | 120/221 [00:32<00:30,  3.30it/s][A
 55%|█████▌    | 122/221 [00:32<00:23,  4.23it/s][A
 56%|█████▌    | 123/221 [00:32<00:22,  4.34it/s][A
 56%|█████▌    | 124/221 [00:32<00:21,  4.57it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.71it/s][A
 57%|█████▋    | 126/221 [00:33<00:26,  3.59it/s][A
 57%|█████▋    | 127/221 [00:33<00:28,  3.25it/s][A
 58%|█████▊    | 128/221 [00:34<00:26,  3.49it/s][A
 58%|█████▊    | 129/221 [00:34<00:22,  4.02it/s][A
 59%|█████▉    | 130/221 [00:34<00:21,  4.25it/s][A
 60%|█████▉    | 132/221 [00:34<00:16,  5.55it/s][A
 60%|██████    | 133/221 [00:35<00:19,  4.48it/s][A
 61%|██████    | 134/221 [00:35<00:19,  4.54it/s][A
 61%|██████    | 135/221 [00:35<00:19,  4.48it/s][A
 62%|██████▏   | 136/221 [00:35<00:19,  4.35it/s][A
 62%|██████▏   | 137/221 [00:35<00:18,  4.64it/s][A
 62%|██████▏   | 138/221 [00:36<00:20,  3.95it/s][A
 63%|██████▎   | 139/221 [00:36<00:25,  3.17it/s][A
 63%|██████▎   | 140/221 [00:36<00:24,  3.35it/s][A
 64%|██████▍   | 141/221 [00:37<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.88it/s][A
 65%|██████▍   | 143/221 [00:38<00:28,  2.69it/s][A
 65%|██████▌   | 144/221 [00:38<00:31,  2.42it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.80it/s][A
 67%|██████▋   | 147/221 [00:39<00:20,  3.67it/s][A
 67%|██████▋   | 148/221 [00:39<00:22,  3.19it/s][A
 67%|██████▋   | 149/221 [00:39<00:20,  3.45it/s][A
 68%|██████▊   | 150/221 [00:39<00:20,  3.41it/s][A
 68%|██████▊   | 151/221 [00:40<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:41<00:31,  2.19it/s][A
 69%|██████▉   | 153/221 [00:41<00:25,  2.63it/s][A
 70%|██████▉   | 154/221 [00:41<00:22,  2.95it/s][A
 70%|███████   | 155/221 [00:41<00:22,  2.90it/s][A
 71%|███████   | 156/221 [00:42<00:25,  2.55it/s][A
 71%|███████   | 157/221 [00:42<00:23,  2.75it/s][A
 71%|███████▏  | 158/221 [00:43<00:21,  2.91it/s][A
 72%|███████▏  | 159/221 [00:43<00:17,  3.60it/s][A
 72%|███████▏  | 160/221 [00:43<00:15,  4.00it/s][A
 73%|███████▎  | 161/221 [00:43<00:16,  3.66it/s][A
 73%|███████▎  | 162/221 [00:43<00:14,  4.03it/s][A
 74%|███████▍  | 163/221 [00:44<00:14,  4.07it/s][A
 74%|███████▍  | 164/221 [00:44<00:13,  4.23it/s][A
 75%|███████▍  | 165/221 [00:44<00:13,  4.17it/s][A
 75%|███████▌  | 166/221 [00:44<00:13,  4.11it/s][A
 76%|███████▌  | 168/221 [00:45<00:11,  4.45it/s][A
 76%|███████▋  | 169/221 [00:45<00:11,  4.56it/s][A
 77%|███████▋  | 170/221 [00:45<00:14,  3.54it/s][A
 77%|███████▋  | 171/221 [00:46<00:12,  3.96it/s][A
 78%|███████▊  | 172/221 [00:46<00:10,  4.55it/s][A
 78%|███████▊  | 173/221 [00:46<00:12,  3.73it/s][A
 79%|███████▊  | 174/221 [00:47<00:14,  3.17it/s][A
 79%|███████▉  | 175/221 [00:47<00:14,  3.08it/s][A
 80%|███████▉  | 176/221 [00:47<00:12,  3.57it/s][A
 80%|████████  | 177/221 [00:47<00:11,  3.83it/s][A
 81%|████████  | 178/221 [00:47<00:10,  3.98it/s][A
 81%|████████  | 179/221 [00:48<00:10,  3.94it/s][A
 81%|████████▏ | 180/221 [00:48<00:08,  4.58it/s][A
 82%|████████▏ | 181/221 [00:48<00:08,  4.49it/s][A
 82%|████████▏ | 182/221 [00:48<00:09,  3.93it/s][A
 83%|████████▎ | 183/221 [00:49<00:09,  4.10it/s][A
 83%|████████▎ | 184/221 [00:49<00:07,  4.64it/s][A
 84%|████████▎ | 185/221 [00:49<00:06,  5.22it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.86it/s][A
 85%|████████▍ | 187/221 [00:50<00:09,  3.63it/s][A
 85%|████████▌ | 188/221 [00:50<00:09,  3.53it/s][A
 86%|████████▌ | 189/221 [00:50<00:08,  3.64it/s][A
 86%|████████▌ | 190/221 [00:51<00:09,  3.16it/s][A
 86%|████████▋ | 191/221 [00:51<00:07,  3.76it/s][A
 87%|████████▋ | 192/221 [00:51<00:09,  3.16it/s][A
 87%|████████▋ | 193/221 [00:51<00:07,  3.84it/s][A
 88%|████████▊ | 194/221 [00:52<00:08,  3.35it/s][A
 88%|████████▊ | 195/221 [00:52<00:07,  3.61it/s][A
 89%|████████▊ | 196/221 [00:52<00:08,  3.12it/s][A
 89%|████████▉ | 197/221 [00:53<00:06,  3.48it/s][A
 90%|████████▉ | 198/221 [00:53<00:07,  3.16it/s][A
 90%|█████████ | 199/221 [00:53<00:06,  3.34it/s][A
 90%|█████████ | 200/221 [00:54<00:06,  3.18it/s][A
 91%|█████████ | 201/221 [00:54<00:05,  3.38it/s][A
 91%|█████████▏| 202/221 [00:54<00:05,  3.26it/s][A
 92%|█████████▏| 203/221 [00:54<00:04,  3.70it/s][A
 92%|█████████▏| 204/221 [00:55<00:07,  2.39it/s][A
 93%|█████████▎| 205/221 [00:55<00:05,  3.00it/s][A
 93%|█████████▎| 206/221 [00:56<00:04,  3.04it/s][A
 94%|█████████▎| 207/221 [00:56<00:03,  3.60it/s][A
 94%|█████████▍| 208/221 [00:56<00:03,  3.70it/s][A
 95%|█████████▍| 209/221 [00:56<00:03,  3.44it/s][A
 95%|█████████▌| 210/221 [00:56<00:02,  4.27it/s][A
 95%|█████████▌| 211/221 [00:57<00:02,  3.61it/s][A
 96%|█████████▌| 212/221 [00:57<00:02,  3.57it/s][A
 96%|█████████▋| 213/221 [00:57<00:02,  3.89it/s][A
 97%|█████████▋| 214/221 [00:58<00:02,  3.00it/s][A
 97%|█████████▋| 215/221 [00:58<00:01,  3.21it/s][A
 98%|█████████▊| 216/221 [00:58<00:01,  3.23it/s][A
 98%|█████████▊| 217/221 [00:59<00:01,  3.26it/s][A
 99%|█████████▊| 218/221 [00:59<00:00,  3.16it/s][A
 99%|█████████▉| 219/221 [00:59<00:00,  2.96it/s][A
100%|█████████▉| 220/221 [01:00<00:00,  3.19it/s][A
100%|██████████| 221/221 [01:00<00:00,  3.19it/s][A100%|██████████| 221/221 [01:00<00:00,  3.65it/s]
09/09/2024 18:24:21 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 549--===========

09/09/2024 18:24:21 - INFO - __main__ -   {'area_r1': 32.9, 'area_recall': '32.9/56.1/64.6', 'area_ravg': 51.2}
09/09/2024 18:24:21 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 549--===========

09/09/2024 18:24:21 - INFO - __main__ -   {'forward_r1': 33.1, 'forward_recall': '33.1/59.4/69.3', 'forward_ravg': 54.0}
09/09/2024 18:24:21 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 549--===========

09/09/2024 18:24:21 - INFO - __main__ -   {'area_video_r1': 36.5, 'area_video_recall': '36.5/66.3/77.0', 'area_video_ravg': 60.0}
09/09/2024 18:24:21 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 299=======

09/09/2024 18:24:21 - INFO - __main__ -   {'area_video_r1': 40.6, 'area_video_recall': '40.6/66.7/79.0', 'area_video_ravg': 62.1}
09/09/2024 18:24:21 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 549--===========

09/09/2024 18:24:21 - INFO - __main__ -   {'area_video_r1': 50.0, 'area_video_recall': '50.0/72.3/79.5', 'area_video_ravg': 67.3, 'area_video_back_r1': 49.3, 'area_video_back_recall': '49.3/72.7/80.2', 'area_video_back_ravg': 67.4}
09/09/2024 18:24:21 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 18:24:21 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 18:24:21 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 549--===========

09/09/2024 18:24:21 - INFO - __main__ -   {'video_r1': 43.6, 'video_recall': '43.6/71.2/80.9', 'video_ravg': 65.2}
09/09/2024 18:24:21 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 18:24:21 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 18:24:21 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 549--===========

09/09/2024 18:24:21 - INFO - __main__ -   {'video_r1': 51.0, 'video_recall': '51.0/76.2/81.9', 'video_ravg': 69.7}
09/09/2024 18:24:21 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 249=======

09/09/2024 18:24:21 - INFO - __main__ -   {'video_r1': 52.1, 'video_recall': '52.1/76.0/82.5', 'video_ravg': 70.2}
09/09/2024 18:24:41 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.5622634887695312, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.024789143353700638, 'loss_ret%tv%ta--finetune_area/loss_area': 1.2578787803649902, 'loss_ret%tv%ta--finetune_area/total_loss': 2.8449313640594482}
[h264 @ 0x55e50692c140] mmco: unref short failure
[h264 @ 0x55e50692c140] mmco: unref short failure
 28%|██▊       | 550/1945 [2:59:16<46:51:10, 120.91s/it][h264 @ 0x55e4ff11a6c0] mmco: unref short failure
 28%|██▊       | 551/1945 [2:59:21<33:21:06, 86.13s/it]  28%|██▊       | 552/1945 [2:59:26<23:53:42, 61.75s/it] 28%|██▊       | 553/1945 [2:59:32<17:29:10, 45.22s/it] 28%|██▊       | 554/1945 [2:59:38<12:56:48, 33.51s/it][h264 @ 0x556e45d923c0] mmco: unref short failure
[h264 @ 0x556e45d923c0] mmco: unref short failure
 29%|██▊       | 555/1945 [2:59:44<9:44:46, 25.24s/it] [h264 @ 0x556e72a79700] mmco: unref short failure
[h264 @ 0x556e72a79700] mmco: unref short failure
 29%|██▊       | 556/1945 [2:59:51<7:36:22, 19.71s/it][h264 @ 0x556e431f56c0] mmco: unref short failure
[h264 @ 0x556e431f56c0] mmco: unref short failure
[h264 @ 0x556e431f56c0] mmco: unref short failure
[h264 @ 0x556e431f56c0] mmco: unref short failure
[h264 @ 0x556e431f56c0] mmco: unref short failure
[h264 @ 0x556e431f56c0] mmco: unref short failure
[h264 @ 0x556e6cb81980] mmco: unref short failure
[h264 @ 0x556e6cb81980] mmco: unref short failure
 29%|██▊       | 557/1945 [2:59:58<6:09:54, 15.99s/it][h264 @ 0x556e5aec6100] mmco: unref short failure
[h264 @ 0x556e600b9200] mmco: unref short failure
[h264 @ 0x556e5bea3f00] mmco: unref short failure
[h264 @ 0x55b7e83cc6c0] mmco: unref short failure
[h264 @ 0x556e5470cf40] mmco: unref short failure
[h264 @ 0x556e5470cf40] mmco: unref short failure
[h264 @ 0x556e56d2b200] mmco: unref short failure
 29%|██▊       | 558/1945 [3:00:05<5:06:31, 13.26s/it][h264 @ 0x55e502b2cf00] mmco: unref short failure
[h264 @ 0x55e502b2cf00] mmco: unref short failure
[h264 @ 0x55e502de6340] mmco: unref short failure
[h264 @ 0x55e502de6340] mmco: unref short failure
[h264 @ 0x55e502de6340] mmco: unref short failure
 29%|██▊       | 559/1945 [3:00:13<4:27:01, 11.56s/it][h264 @ 0x55e5006a3a80] mmco: unref short failure
[h264 @ 0x55e5006a3a80] mmco: unref short failure
[h264 @ 0x55e5006a3a80] mmco: unref short failure
[h264 @ 0x55e5006a3a80] mmco: unref short failure
 29%|██▉       | 560/1945 [3:00:20<3:56:24, 10.24s/it][h264 @ 0x556e70342140] mmco: unref short failure
[h264 @ 0x556e70342140] mmco: unref short failure
[h264 @ 0x556e42170f40] mmco: unref short failure
 29%|██▉       | 561/1945 [3:00:28<3:37:14,  9.42s/it][h264 @ 0x55b7d58bd580] mmco: unref short failure
[h264 @ 0x55b7d58bd580] mmco: unref short failure
[h264 @ 0x556e552b9040] mmco: unref short failure
 29%|██▉       | 562/1945 [3:00:36<3:31:43,  9.19s/it] 29%|██▉       | 563/1945 [3:00:44<3:23:48,  8.85s/it][h264 @ 0x556e45981fc0] mmco: unref short failure
 29%|██▉       | 564/1945 [3:00:51<3:09:02,  8.21s/it][h264 @ 0x55e502a35d80] mmco: unref short failure
 29%|██▉       | 565/1945 [3:00:59<3:05:44,  8.08s/it][h264 @ 0x55e5027e9980] mmco: unref short failure
[h264 @ 0x55e5027e9980] mmco: unref short failure
[h264 @ 0x55e5027e9980] mmco: unref short failure
[h264 @ 0x55e5027e9980] mmco: unref short failure
 29%|██▉       | 566/1945 [3:01:06<2:59:29,  7.81s/it] 29%|██▉       | 567/1945 [3:01:13<2:51:11,  7.45s/it][h264 @ 0x556e732ddd80] mmco: unref short failure
 29%|██▉       | 568/1945 [3:01:23<3:09:29,  8.26s/it] 29%|██▉       | 569/1945 [3:01:30<3:04:36,  8.05s/it][h264 @ 0x556e5dcf2740] mmco: unref short failure
[h264 @ 0x556e5dcf2740] mmco: unref short failure
 29%|██▉       | 570/1945 [3:01:38<3:04:55,  8.07s/it][h264 @ 0x556e56233940] mmco: unref short failure
[h264 @ 0x556e538f3500] mmco: unref short failure
[h264 @ 0x556e538f3500] mmco: unref short failure
 29%|██▉       | 571/1945 [3:01:50<3:26:25,  9.01s/it] 29%|██▉       | 572/1945 [3:02:04<4:02:42, 10.61s/it][h264 @ 0x556e600b88c0] mmco: unref short failure
[h264 @ 0x55b7cb572480] mmco: unref short failure
[h264 @ 0x55b7cb572480] mmco: unref short failure
[h264 @ 0x556e42170f40] mmco: unref short failure
[h264 @ 0x556e42170f40] mmco: unref short failure
 29%|██▉       | 573/1945 [3:02:12<3:43:53,  9.79s/it][h264 @ 0x556e572521c0] mmco: unref short failure
[h264 @ 0x556e572521c0] mmco: unref short failure
[h264 @ 0x55e5068e4800] mmco: unref short failure
[h264 @ 0x55e5068e4800] mmco: unref short failure
[h264 @ 0x55e500ab3580] mmco: unref short failure
[h264 @ 0x55e500ab3580] mmco: unref short failure
[h264 @ 0x556e51faaac0] mmco: unref short failure
[h264 @ 0x556e51faaac0] mmco: unref short failure
[h264 @ 0x55b7cf706000] mmco: unref short failure
[h264 @ 0x55b7cf706000] mmco: unref short failure
[h264 @ 0x55e4ffff9dc0] mmco: unref short failure
[h264 @ 0x55e4ffff9dc0] mmco: unref short failure
[h264 @ 0x55e503f16340] mmco: unref short failure
[h264 @ 0x55e503f16340] mmco: unref short failure
[h264 @ 0x55e51ff06200] mmco: unref short failure
[h264 @ 0x55e51ff06200] mmco: unref short failure
[h264 @ 0x556e6d9ce0c0] mmco: unref short failure
[h264 @ 0x55b7d37127c0] mmco: unref short failure
[h264 @ 0x55b7d37127c0] mmco: unref short failure
[h264 @ 0x55e4fceb9c00] mmco: unref short failure
[h264 @ 0x55e4fceb9c00] mmco: unref short failure
[h264 @ 0x55e5015af300] mmco: unref short failure
[h264 @ 0x556e52cd3e40] mmco: unref short failure
[h264 @ 0x556e52cd3e40] mmco: unref short failure
[h264 @ 0x55b7cd9c2140] mmco: unref short failure
 30%|██▉       | 574/1945 [3:02:47<6:37:38, 17.40s/it][h264 @ 0x55b7d4503d40] mmco: unref short failure
[h264 @ 0x55b7d4503d40] mmco: unref short failure
 30%|██▉       | 575/1945 [3:03:07<6:54:09, 18.14s/it][h264 @ 0x556e52d0d540] mmco: unref short failure
[h264 @ 0x556e52d0d540] mmco: unref short failure
[h264 @ 0x55e505a1b240] mmco: unref short failure
 30%|██▉       | 576/1945 [3:03:25<6:54:50, 18.18s/it][h264 @ 0x55e4fe4df6c0] mmco: unref short failure
[h264 @ 0x55e4fe4df6c0] mmco: unref short failure
 30%|██▉       | 577/1945 [3:03:33<5:41:42, 14.99s/it][h264 @ 0x55e5014f3180] mmco: unref short failure
[h264 @ 0x55b7cba64700] mmco: unref short failure
[h264 @ 0x55b7cba64700] mmco: unref short failure
[h264 @ 0x55b7cba64700] mmco: unref short failure
[h264 @ 0x55e503f16800] mmco: unref short failure
[h264 @ 0x55b7dfa3b380] mmco: unref short failure
[h264 @ 0x55b7dfa3b380] mmco: unref short failure
[h264 @ 0x55b7d3a51d80] mmco: unref short failure
[h264 @ 0x55b7d3a51d80] mmco: unref short failure
 30%|██▉       | 578/1945 [3:03:49<5:49:44, 15.35s/it][h264 @ 0x55b7d3a51d80] mmco: unref short failure
[h264 @ 0x55b7d3a51d80] mmco: unref short failure
 30%|██▉       | 579/1945 [3:03:56<4:53:30, 12.89s/it][h264 @ 0x556e52cac900] mmco: unref short failure
[h264 @ 0x556e52cac900] mmco: unref short failure
 30%|██▉       | 580/1945 [3:04:05<4:25:37, 11.68s/it] 30%|██▉       | 581/1945 [3:04:11<3:49:33, 10.10s/it][h264 @ 0x556e4d0f1840] mmco: unref short failure
[h264 @ 0x556e4d0f1840] mmco: unref short failure
[h264 @ 0x556e5f4fef80] mmco: unref short failure
[h264 @ 0x556e5f4fef80] mmco: unref short failure
[h264 @ 0x556e5f4fef80] mmco: unref short failure
[h264 @ 0x556e5f4fef80] mmco: unref short failure
[h264 @ 0x55b7d8ee3d40] mmco: unref short failure
[h264 @ 0x556e5361e640] mmco: unref short failure
[h264 @ 0x556e5361e640] mmco: unref short failure
[h264 @ 0x556e51ef3e40] mmco: unref short failure
[h264 @ 0x556e51ef3e40] mmco: unref short failure
[h264 @ 0x556e43809600] mmco: unref short failure
[h264 @ 0x556e4c490400] mmco: unref short failure
[h264 @ 0x55b7cf8b6f00] mmco: unref short failure
[h264 @ 0x55b7cf8b6f00] mmco: unref short failure
[h264 @ 0x55e5059f4000] mmco: unref short failure
[h264 @ 0x556e647c0240] mmco: unref short failure
[h264 @ 0x556e647c0240] mmco: unref short failure
[h264 @ 0x55e4fe8b19c0] mmco: unref short failure
 30%|██▉       | 582/1945 [3:04:47<6:42:49, 17.73s/it][h264 @ 0x55e4fedaa680] mmco: unref short failure
[h264 @ 0x556e4fb5a4c0] mmco: unref short failure
[h264 @ 0x556e4fb5a4c0] mmco: unref short failure
[h264 @ 0x55e51a119880] mmco: unref short failure
[h264 @ 0x556e4ae0f740] mmco: unref short failure
[h264 @ 0x55b7d8e6ff00] mmco: unref short failure
[h264 @ 0x55b7cae82280] mmco: unref short failure
[h264 @ 0x55b7cae82280] mmco: unref short failure
[h264 @ 0x556e5db63ac0] mmco: unref short failure
[h264 @ 0x556e451c4f00] mmco: unref short failure
[h264 @ 0x55e5189e6900] mmco: unref short failure
[h264 @ 0x55b7cbd6f840] mmco: unref short failure
[h264 @ 0x55b7cbd6f840] mmco: unref short failure
 30%|██▉       | 583/1945 [3:05:16<8:01:36, 21.22s/it][h264 @ 0x55e50e22d580] mmco: unref short failure
[h264 @ 0x55e50e22d580] mmco: unref short failure
[h264 @ 0x556e4f6ec280] mmco: unref short failure
[h264 @ 0x556e5ac10c80] mmco: unref short failure
[h264 @ 0x556e5ac10c80] mmco: unref short failure
 30%|███       | 584/1945 [3:05:30<7:12:42, 19.08s/it][h264 @ 0x556e43cdb180] mmco: unref short failure
 30%|███       | 585/1945 [3:05:38<5:52:17, 15.54s/it][h264 @ 0x556e5280f240] mmco: unref short failure
[h264 @ 0x556e5280f240] mmco: unref short failure
[h264 @ 0x556e5280f240] mmco: unref short failure
[h264 @ 0x556e5280f240] mmco: unref short failure
 30%|███       | 586/1945 [3:05:45<4:57:59, 13.16s/it][h264 @ 0x55e50fc6d780] mmco: unref short failure
[h264 @ 0x55e50fc6d780] mmco: unref short failure
[h264 @ 0x55b7cc21f9c0] mmco: unref short failure
[h264 @ 0x55b7cc21f9c0] mmco: unref short failure
[h264 @ 0x556e529faec0] mmco: unref short failure
[h264 @ 0x556e529faec0] mmco: unref short failure
[h264 @ 0x556e5d52f6c0] mmco: unref short failure
 30%|███       | 587/1945 [3:05:56<4:43:51, 12.54s/it][h264 @ 0x556e438c6300] mmco: unref short failure
[h264 @ 0x556e438c6300] mmco: unref short failure
[h264 @ 0x556e5fbdf180] mmco: unref short failure
[h264 @ 0x556e52205d40] mmco: unref short failure
[h264 @ 0x556e52205d40] mmco: unref short failure
[h264 @ 0x55e516b94b40] mmco: unref short failure
[h264 @ 0x55b7cbbffbc0] mmco: unref short failure
 30%|███       | 588/1945 [3:06:10<4:51:10, 12.87s/it][h264 @ 0x556e4f2f0740] mmco: unref short failure
[h264 @ 0x556e4f2f0740] mmco: unref short failure
 30%|███       | 589/1945 [3:06:17<4:12:19, 11.16s/it][h264 @ 0x556e559aa0c0] mmco: unref short failure
[h264 @ 0x55b7cfd73a40] mmco: unref short failure
[h264 @ 0x55b7cfd73a40] mmco: unref short failure
[h264 @ 0x55e50159bbc0] mmco: unref short failure
[h264 @ 0x556e457690c0] mmco: unref short failure
[h264 @ 0x556e457690c0] mmco: unref short failure
[h264 @ 0x556e4294bac0] mmco: unref short failure
[h264 @ 0x55e4ff36a180] mmco: unref short failure
[h264 @ 0x55e4ff36a180] mmco: unref short failure
[h264 @ 0x55e519906e00] mmco: unref short failure
[h264 @ 0x55e519906e00] mmco: unref short failure
[h264 @ 0x55e519906e00] mmco: unref short failure
[h264 @ 0x55e519906e00] mmco: unref short failure
[h264 @ 0x55e505bdea00] mmco: unref short failure
[h264 @ 0x55e51772e8c0] mmco: unref short failure
[h264 @ 0x55e51772e8c0] mmco: unref short failure
[h264 @ 0x55e50b80b400] mmco: unref short failure
[h264 @ 0x55e50b80b400] mmco: unref short failure
[h264 @ 0x55e501a81480] mmco: unref short failure
[h264 @ 0x55e501a81480] mmco: unref short failure
[h264 @ 0x55e501a81480] mmco: unref short failure
[h264 @ 0x55b7ce46e540] mmco: unref short failure
[h264 @ 0x55b7ce46e540] mmco: unref short failure
 30%|███       | 590/1945 [3:06:56<7:21:22, 19.54s/it][h264 @ 0x556e5db63640] mmco: unref short failure
[h264 @ 0x556e5db63640] mmco: unref short failure
[h264 @ 0x55e4fe992d40] mmco: unref short failure
[h264 @ 0x556e5496a740] mmco: unref short failure
[h264 @ 0x556e647c0440] mmco: unref short failure
[h264 @ 0x55b7d2409980] mmco: unref short failure
[h264 @ 0x55b7d2409980] mmco: unref short failure
[h264 @ 0x556e51449f00] mmco: unref short failure
[h264 @ 0x556e51449f00] mmco: unref short failure
[h264 @ 0x556e51449f00] mmco: unref short failure
[h264 @ 0x556e51449f00] mmco: unref short failure
 30%|███       | 591/1945 [3:07:15<7:15:22, 19.29s/it][h264 @ 0x556e44289500] mmco: unref short failure
[h264 @ 0x556e44289500] mmco: unref short failure
[h264 @ 0x55b7caee6140] mmco: unref short failure
[h264 @ 0x55b7caee6140] mmco: unref short failure
[h264 @ 0x55e50d294a00] mmco: unref short failure
[h264 @ 0x55e50d294a00] mmco: unref short failure
 30%|███       | 592/1945 [3:07:30<6:45:06, 17.96s/it][h264 @ 0x55e4fefc8e40] mmco: unref short failure
[h264 @ 0x55e4fefc8e40] mmco: unref short failure
[h264 @ 0x55b7e8ebbb80] mmco: unref short failure
 30%|███       | 593/1945 [3:07:40<5:53:51, 15.70s/it] 31%|███       | 594/1945 [3:07:48<4:58:21, 13.25s/it] 31%|███       | 595/1945 [3:07:56<4:21:21, 11.62s/it][h264 @ 0x55e50661ee80] mmco: unref short failure
[h264 @ 0x55e50661ee80] mmco: unref short failure
[h264 @ 0x556e58848080] mmco: unref short failure
[h264 @ 0x55b7cb8979c0] mmco: unref short failure
 31%|███       | 596/1945 [3:08:14<5:05:22, 13.58s/it][h264 @ 0x556e438c6a40] mmco: unref short failure
[h264 @ 0x556e438c6a40] mmco: unref short failure
[h264 @ 0x556e438c6a40] mmco: unref short failure
[h264 @ 0x556e438c6a40] mmco: unref short failure
 31%|███       | 597/1945 [3:08:21<4:22:17, 11.67s/it][h264 @ 0x556e5b6305c0] mmco: unref short failure
[h264 @ 0x556e5b6305c0] mmco: unref short failure
[h264 @ 0x55b7cae82500] mmco: unref short failure
[h264 @ 0x55b7de159e40] mmco: unref short failure
[h264 @ 0x556e56818c80] mmco: unref short failure
[h264 @ 0x55e4fe1a3440] mmco: unref short failure
not have audios ua_Kowav7hg.20
[h264 @ 0x55b7cd3c5700] mmco: unref short failure
 31%|███       | 598/1945 [3:08:54<6:46:12, 18.09s/it][h264 @ 0x556e44aae480] mmco: unref short failure
[h264 @ 0x556e44aae480] mmco: unref short failure
[h264 @ 0x55b7e76dba80] mmco: unref short failure
[h264 @ 0x556e4c35afc0] mmco: unref short failure
[h264 @ 0x556e4c35afc0] mmco: unref short failure
 31%|███       | 599/1945 [3:09:13<6:49:42, 18.26s/it]09/09/2024 18:34:41 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 18:34:41 - INFO - __main__ -   start running ret%tv validation...
[h264 @ 0x55b7dd53e040] mmco: unref short failure
[h264 @ 0x55b7dd53e040] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e517b4f440] mmco: unref short failure
[h264 @ 0x55e503f16c80] mmco: unref short failure
[h264 @ 0x556e5470cf40] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e713f4d40] mmco: unref short failure
[h264 @ 0x556e713f4d40] mmco: unref short failure
[h264 @ 0x55b7e79fb840] mmco: unref short failure
[h264 @ 0x556e6bf83f40] mmco: unref short failure
[h264 @ 0x556e6bf83f40] mmco: unref short failure
[h264 @ 0x55e4fe4df000] mmco: unref short failure
[h264 @ 0x55e4fe4df000] mmco: unref short failure
[h264 @ 0x556e6bf83ac0] mmco: unref short failure
[h264 @ 0x556e58486b00] mmco: unref short failure
[h264 @ 0x556e58486b00] mmco: unref short failure
[h264 @ 0x556e605c3e00] mmco: unref short failure
[h264 @ 0x556e51705400] mmco: unref short failure
[h264 @ 0x55e50fe9af80] mmco: unref short failure
[h264 @ 0x55e503f16800] mmco: unref short failure
[h264 @ 0x556e51400800] mmco: unref short failure
[h264 @ 0x55b7d373c500] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:55,  3.95it/s][A
  1%|          | 2/221 [00:00<01:41,  2.15it/s][A
  1%|▏         | 3/221 [00:01<01:10,  3.11it/s][A
  2%|▏         | 4/221 [00:01<00:53,  4.05it/s][A
  2%|▏         | 5/221 [00:01<00:50,  4.27it/s][A
  3%|▎         | 6/221 [00:01<00:45,  4.78it/s][A
  3%|▎         | 7/221 [00:01<00:49,  4.30it/s][A
  4%|▎         | 8/221 [00:02<00:47,  4.48it/s][A[h264 @ 0x55e50f79f1c0] mmco: unref short failure
[h264 @ 0x55e50f79f1c0] mmco: unref short failure

  4%|▍         | 9/221 [00:02<00:50,  4.24it/s][A[h264 @ 0x55e5090dae40] mmco: unref short failure
[h264 @ 0x55e5090dae40] mmco: unref short failure

  5%|▍         | 10/221 [00:03<02:13,  1.58it/s][A
  5%|▍         | 11/221 [00:04<01:47,  1.96it/s][A
  5%|▌         | 12/221 [00:04<01:26,  2.41it/s][A
  6%|▌         | 13/221 [00:04<01:24,  2.46it/s][A
  6%|▋         | 14/221 [00:07<04:10,  1.21s/it][A
  7%|▋         | 15/221 [00:07<03:05,  1.11it/s][A
  7%|▋         | 16/221 [00:08<02:48,  1.22it/s][A
  8%|▊         | 17/221 [00:09<03:14,  1.05it/s][A
  8%|▊         | 18/221 [00:09<02:23,  1.41it/s][A
  9%|▉         | 20/221 [00:10<01:26,  2.31it/s][A
 10%|▉         | 21/221 [00:10<01:14,  2.69it/s][A
 10%|▉         | 22/221 [00:10<01:00,  3.28it/s][A
 10%|█         | 23/221 [00:10<00:49,  3.99it/s][A
 11%|█         | 24/221 [00:10<00:42,  4.67it/s][A
 11%|█▏        | 25/221 [00:10<00:40,  4.85it/s][A
 12%|█▏        | 26/221 [00:11<00:42,  4.60it/s][A
 12%|█▏        | 27/221 [00:11<00:45,  4.23it/s][A[h264 @ 0x55e4fe570d00] mmco: unref short failure

 13%|█▎        | 28/221 [00:11<00:50,  3.80it/s][A[h264 @ 0x55e50032efc0] mmco: unref short failure

 13%|█▎        | 29/221 [00:15<04:19,  1.35s/it][A
 14%|█▎        | 30/221 [00:15<03:10,  1.00it/s][A
 14%|█▍        | 31/221 [00:15<02:22,  1.33it/s][A[h264 @ 0x55b7d2a788c0] mmco: unref short failure
[h264 @ 0x55b7d2a788c0] mmco: unref short failure

 15%|█▍        | 33/221 [00:16<01:55,  1.62it/s][A
 15%|█▌        | 34/221 [00:17<01:38,  1.90it/s][A
 16%|█▌        | 35/221 [00:17<01:21,  2.29it/s][A
 16%|█▋        | 36/221 [00:17<01:08,  2.70it/s][A
 17%|█▋        | 37/221 [00:17<00:58,  3.17it/s][A
 17%|█▋        | 38/221 [00:17<00:55,  3.28it/s][A
 18%|█▊        | 39/221 [00:19<01:36,  1.90it/s][A
 18%|█▊        | 40/221 [00:19<01:21,  2.22it/s][A
 19%|█▊        | 41/221 [00:19<01:05,  2.77it/s][A
 19%|█▉        | 42/221 [00:19<00:53,  3.37it/s][A
 19%|█▉        | 43/221 [00:19<00:51,  3.48it/s][A
 20%|█▉        | 44/221 [00:20<00:50,  3.52it/s][A
 20%|██        | 45/221 [00:20<00:45,  3.87it/s][A
 21%|██        | 46/221 [00:20<00:44,  3.94it/s][A
 21%|██▏       | 47/221 [00:20<00:36,  4.75it/s][A
 22%|██▏       | 48/221 [00:20<00:32,  5.32it/s][A
 22%|██▏       | 49/221 [00:21<00:40,  4.29it/s][A[h264 @ 0x55e51588adc0] mmco: unref short failure

 23%|██▎       | 50/221 [00:25<03:53,  1.36s/it][A
 23%|██▎       | 51/221 [00:25<02:49,  1.00it/s][A
 24%|██▎       | 52/221 [00:25<02:09,  1.31it/s][A
 24%|██▍       | 53/221 [00:25<01:35,  1.76it/s][A
 24%|██▍       | 54/221 [00:25<01:13,  2.27it/s][A
 25%|██▍       | 55/221 [00:26<01:04,  2.58it/s][A[h264 @ 0x55b7d4503400] mmco: unref short failure
[h264 @ 0x55b7d4503400] mmco: unref short failure

 25%|██▌       | 56/221 [00:26<00:55,  2.98it/s][A
 26%|██▌       | 57/221 [00:26<00:50,  3.24it/s][A
 26%|██▌       | 58/221 [00:26<00:51,  3.15it/s][A
 27%|██▋       | 59/221 [00:27<00:54,  2.98it/s][A
 27%|██▋       | 60/221 [00:27<00:49,  3.26it/s][A
 28%|██▊       | 61/221 [00:27<00:46,  3.42it/s][A[h264 @ 0x55b7d4e60d40] mmco: unref short failure

 28%|██▊       | 62/221 [00:27<00:43,  3.69it/s][A
 29%|██▊       | 63/221 [00:28<00:37,  4.26it/s][A
 29%|██▉       | 64/221 [00:28<00:34,  4.53it/s][A
 29%|██▉       | 65/221 [00:28<00:30,  5.19it/s][A
 30%|██▉       | 66/221 [00:28<00:25,  5.97it/s][A
 30%|███       | 67/221 [00:28<00:26,  5.82it/s][A
 31%|███       | 68/221 [00:28<00:23,  6.50it/s][A
 31%|███       | 69/221 [00:29<00:35,  4.28it/s][A[h264 @ 0x55b7cf0d0800] mmco: unref short failure
[h264 @ 0x55b7cf0d0800] mmco: unref short failure

 32%|███▏      | 70/221 [00:29<00:34,  4.43it/s][A
 32%|███▏      | 71/221 [00:29<00:36,  4.15it/s][A
 33%|███▎      | 72/221 [00:29<00:30,  4.83it/s][A
 33%|███▎      | 73/221 [00:30<00:38,  3.87it/s][A
 33%|███▎      | 74/221 [00:30<00:35,  4.18it/s][A
 34%|███▍      | 75/221 [00:30<00:40,  3.59it/s][A
 34%|███▍      | 76/221 [00:30<00:36,  3.92it/s][A[h264 @ 0x556e43124f00] mmco: unref short failure
[h264 @ 0x556e43124f00] mmco: unref short failure

 35%|███▍      | 77/221 [00:31<00:38,  3.75it/s][A
 35%|███▌      | 78/221 [00:31<00:44,  3.18it/s][A
 36%|███▌      | 79/221 [00:31<00:42,  3.33it/s][A
 36%|███▌      | 80/221 [00:32<00:38,  3.62it/s][A
 37%|███▋      | 81/221 [00:32<00:31,  4.39it/s][A
 37%|███▋      | 82/221 [00:32<00:34,  4.04it/s][A[h264 @ 0x556e63a74040] mmco: unref short failure
[h264 @ 0x55b7e649a340] mmco: unref short failure
[h264 @ 0x55b7e649a340] mmco: unref short failure

 38%|███▊      | 83/221 [00:36<03:24,  1.48s/it][A
 38%|███▊      | 84/221 [00:37<02:33,  1.12s/it][A
 38%|███▊      | 85/221 [00:37<01:54,  1.19it/s][A
 39%|███▉      | 86/221 [00:37<01:28,  1.52it/s][A
 39%|███▉      | 87/221 [00:38<01:18,  1.71it/s][A
 40%|███▉      | 88/221 [00:38<01:02,  2.13it/s][A
 40%|████      | 89/221 [00:38<00:56,  2.35it/s][A
 41%|████      | 90/221 [00:38<00:54,  2.39it/s][A
 41%|████      | 91/221 [00:39<00:46,  2.79it/s][A
 42%|████▏     | 92/221 [00:39<00:43,  2.94it/s][A
 42%|████▏     | 93/221 [00:39<00:35,  3.56it/s][A
 43%|████▎     | 94/221 [00:39<00:29,  4.31it/s][A[h264 @ 0x556e452b26c0] mmco: unref short failure

 43%|████▎     | 95/221 [00:41<01:38,  1.28it/s][A
 43%|████▎     | 96/221 [00:42<01:15,  1.65it/s][A
 44%|████▍     | 97/221 [00:42<00:58,  2.11it/s][A
 44%|████▍     | 98/221 [00:42<00:53,  2.31it/s][A
 45%|████▍     | 99/221 [00:42<00:46,  2.64it/s][A
 45%|████▌     | 100/221 [00:43<00:40,  2.95it/s][A
 46%|████▌     | 101/221 [00:43<00:36,  3.32it/s][A
 46%|████▌     | 102/221 [00:43<00:31,  3.78it/s][A
 47%|████▋     | 103/221 [00:43<00:26,  4.37it/s][A
 47%|████▋     | 104/221 [00:43<00:23,  5.01it/s][A
 48%|████▊     | 105/221 [00:43<00:22,  5.09it/s][A
 48%|████▊     | 106/221 [00:44<00:24,  4.65it/s][A
 48%|████▊     | 107/221 [00:44<00:24,  4.70it/s][A
 49%|████▉     | 108/221 [00:44<00:24,  4.65it/s][A
 49%|████▉     | 109/221 [00:44<00:25,  4.34it/s][A
 50%|████▉     | 110/221 [00:44<00:22,  5.01it/s][A
 50%|█████     | 111/221 [00:45<00:24,  4.54it/s][A
 51%|█████     | 112/221 [00:45<00:29,  3.73it/s][A
 51%|█████     | 113/221 [00:45<00:27,  3.94it/s][A
 52%|█████▏    | 114/221 [00:46<00:47,  2.27it/s][A
 52%|█████▏    | 116/221 [00:46<00:29,  3.54it/s][A
 53%|█████▎    | 117/221 [00:47<00:28,  3.67it/s][A
 53%|█████▎    | 118/221 [00:47<00:29,  3.44it/s][A[h264 @ 0x55b7ee485280] mmco: unref short failure
[h264 @ 0x55b7ee485280] mmco: unref short failure

 54%|█████▍    | 120/221 [00:47<00:23,  4.37it/s][A
 55%|█████▍    | 121/221 [00:47<00:22,  4.53it/s][A
 56%|█████▌    | 123/221 [00:48<00:18,  5.36it/s][A
 56%|█████▌    | 124/221 [00:48<00:19,  5.09it/s][A
 57%|█████▋    | 125/221 [00:48<00:17,  5.43it/s][A
 57%|█████▋    | 126/221 [00:48<00:15,  5.97it/s][A
 57%|█████▋    | 127/221 [00:48<00:16,  5.76it/s][A
 58%|█████▊    | 128/221 [00:49<00:17,  5.39it/s][A
 59%|█████▉    | 130/221 [00:49<00:15,  5.89it/s][A[h264 @ 0x55e51c91c0c0] mmco: unref short failure
[h264 @ 0x55e51c91c0c0] mmco: unref short failure

 59%|█████▉    | 131/221 [00:49<00:17,  5.26it/s][A
 60%|█████▉    | 132/221 [00:50<00:24,  3.66it/s][A
 60%|██████    | 133/221 [00:50<00:22,  3.89it/s][A
 61%|██████    | 134/221 [00:50<00:19,  4.51it/s][A
 61%|██████    | 135/221 [00:50<00:16,  5.16it/s][A
 62%|██████▏   | 136/221 [00:50<00:15,  5.60it/s][A
 62%|██████▏   | 137/221 [00:51<00:15,  5.31it/s][A
 62%|██████▏   | 138/221 [00:51<00:15,  5.30it/s][A
 63%|██████▎   | 139/221 [00:51<00:15,  5.15it/s][A[h264 @ 0x556e46af3e40] mmco: unref short failure

 63%|██████▎   | 140/221 [00:51<00:13,  5.96it/s][A
 64%|██████▍   | 141/221 [00:51<00:12,  6.52it/s][A
 64%|██████▍   | 142/221 [00:51<00:16,  4.80it/s][A
 65%|██████▍   | 143/221 [00:52<00:13,  5.68it/s][A
 66%|██████▌   | 145/221 [00:52<00:11,  6.39it/s][A
 66%|██████▌   | 146/221 [00:52<00:11,  6.74it/s][A
 67%|██████▋   | 147/221 [00:52<00:11,  6.68it/s][A
 67%|██████▋   | 148/221 [00:52<00:12,  5.72it/s][A
 68%|██████▊   | 150/221 [00:53<00:10,  6.78it/s][A
 68%|██████▊   | 151/221 [00:53<00:21,  3.25it/s][A
 69%|██████▉   | 152/221 [00:54<00:25,  2.67it/s][A
 69%|██████▉   | 153/221 [00:54<00:23,  2.95it/s][A
 70%|██████▉   | 154/221 [00:54<00:20,  3.34it/s][A
 71%|███████   | 156/221 [00:55<00:13,  4.98it/s][A
 71%|███████   | 157/221 [00:55<00:12,  5.33it/s][A
 71%|███████▏  | 158/221 [00:55<00:10,  6.04it/s][A
 72%|███████▏  | 160/221 [00:55<00:07,  7.68it/s][A
 73%|███████▎  | 161/221 [00:55<00:08,  6.85it/s][A[h264 @ 0x55b7cb94ea00] mmco: unref short failure
[h264 @ 0x55b7cb94ea00] mmco: unref short failure
[h264 @ 0x55b7cb94ea00] mmco: unref short failure
[h264 @ 0x55b7cb94ea00] mmco: unref short failure

 74%|███████▍  | 163/221 [00:55<00:07,  7.50it/s][A[h264 @ 0x55b7cb94ea00] mmco: unref short failure
[h264 @ 0x55b7cb94ea00] mmco: unref short failure

 74%|███████▍  | 164/221 [00:56<00:07,  7.46it/s][A
 75%|███████▍  | 165/221 [00:56<00:08,  6.84it/s][A
 75%|███████▌  | 166/221 [00:56<00:08,  6.34it/s][A
 76%|███████▌  | 167/221 [00:56<00:08,  6.74it/s][A
 76%|███████▋  | 169/221 [00:56<00:06,  7.95it/s][A
 77%|███████▋  | 170/221 [00:57<00:08,  6.22it/s][A
 77%|███████▋  | 171/221 [00:57<00:12,  4.04it/s][A
 78%|███████▊  | 172/221 [00:57<00:11,  4.32it/s][A
 78%|███████▊  | 173/221 [00:57<00:09,  4.87it/s][A
 79%|███████▊  | 174/221 [00:58<00:19,  2.38it/s][A[h264 @ 0x55e500411400] mmco: unref short failure
[h264 @ 0x55e500411400] mmco: unref short failure

 79%|███████▉  | 175/221 [00:59<00:28,  1.62it/s][A
 80%|███████▉  | 176/221 [01:00<00:22,  1.98it/s][A
 80%|████████  | 177/221 [01:00<00:18,  2.42it/s][A
 81%|████████  | 178/221 [01:00<00:15,  2.75it/s][A
 81%|████████  | 179/221 [01:00<00:12,  3.29it/s][A
 81%|████████▏ | 180/221 [01:01<00:13,  3.10it/s][A
 82%|████████▏ | 181/221 [01:01<00:10,  3.69it/s][A
 82%|████████▏ | 182/221 [01:01<00:08,  4.40it/s][A
 83%|████████▎ | 184/221 [01:01<00:06,  5.31it/s][A
 84%|████████▍ | 186/221 [01:01<00:05,  5.97it/s][A
 85%|████████▌ | 188/221 [01:02<00:07,  4.71it/s][A
 86%|████████▌ | 189/221 [01:02<00:06,  4.82it/s][A
 86%|████████▌ | 190/221 [01:02<00:06,  5.16it/s][A
 87%|████████▋ | 192/221 [01:03<00:04,  6.74it/s][A
 88%|████████▊ | 194/221 [01:03<00:03,  7.21it/s][A
 88%|████████▊ | 195/221 [01:03<00:03,  7.15it/s][A
 89%|████████▊ | 196/221 [01:05<00:12,  1.98it/s][A[h264 @ 0x556e48da2480] mmco: unref short failure

 90%|████████▉ | 198/221 [01:05<00:08,  2.76it/s][A
 90%|█████████ | 200/221 [01:05<00:05,  3.70it/s][A
 91%|█████████ | 201/221 [01:05<00:04,  4.13it/s][A
 91%|█████████▏| 202/221 [01:05<00:04,  4.40it/s][A
 92%|█████████▏| 204/221 [01:06<00:05,  3.01it/s][A
 93%|█████████▎| 205/221 [01:07<00:04,  3.32it/s][A
 93%|█████████▎| 206/221 [01:07<00:05,  2.74it/s][A
 94%|█████████▎| 207/221 [01:07<00:04,  2.98it/s][A
 94%|█████████▍| 208/221 [01:08<00:03,  3.66it/s][A
 95%|█████████▌| 211/221 [01:08<00:01,  5.30it/s][A
 96%|█████████▌| 212/221 [01:08<00:01,  5.61it/s][A
 96%|█████████▋| 213/221 [01:08<00:01,  5.42it/s][A
 97%|█████████▋| 214/221 [01:08<00:01,  5.36it/s][A
 98%|█████████▊| 216/221 [01:09<00:00,  6.28it/s][A
 98%|█████████▊| 217/221 [01:09<00:00,  6.22it/s][A
 99%|█████████▉| 219/221 [01:09<00:00,  7.16it/s][A
100%|█████████▉| 220/221 [01:09<00:00,  6.87it/s][A
100%|██████████| 221/221 [01:09<00:00,  7.17it/s][A100%|██████████| 221/221 [01:09<00:00,  3.16it/s]
[h264 @ 0x556e58486880] mmco: unref short failure
[h264 @ 0x556e58486880] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.77it/s][A
  1%|          | 2/221 [00:00<00:58,  3.76it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.76it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.76it/s][A
  2%|▏         | 5/221 [00:01<00:59,  3.64it/s][A
  3%|▎         | 6/221 [00:01<00:58,  3.68it/s][A
  3%|▎         | 7/221 [00:01<00:57,  3.70it/s][A
  4%|▎         | 8/221 [00:02<00:57,  3.72it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.74it/s][A
  5%|▍         | 10/221 [00:02<00:56,  3.75it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.76it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.76it/s][A
  6%|▌         | 13/221 [00:03<00:55,  3.77it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.77it/s][A
  7%|▋         | 15/221 [00:04<00:54,  3.77it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.78it/s][A
  8%|▊         | 17/221 [00:04<00:54,  3.78it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.78it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.78it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.78it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.78it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.78it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.78it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.78it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:09<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.78it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.78it/s][A
 19%|█▉        | 43/221 [00:11<00:47,  3.78it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.78it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.78it/s][A
 24%|██▍       | 53/221 [00:14<00:44,  3.78it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.78it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.78it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.78it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.78it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.78it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.78it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.78it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.78it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.78it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.78it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.78it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.78it/s][A
 31%|███       | 68/221 [00:18<00:40,  3.78it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.78it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.78it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.78it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.78it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.78it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.78it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.78it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.78it/s][A
 37%|███▋      | 81/221 [00:21<00:37,  3.78it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.78it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.78it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.78it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 87/221 [00:23<00:35,  3.78it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.78it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:33,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.78it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.78it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.78it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.78it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.78it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 106/221 [00:28<00:30,  3.78it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.78it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.78it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.78it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.78it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.78it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.78it/s][A
 55%|█████▍    | 121/221 [00:32<00:26,  3.78it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.78it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.78it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.78it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.78it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.79it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 140/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.78it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.78it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.78it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.78it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.78it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.78it/s][A
 70%|███████   | 155/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.78it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.78it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.78it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.78it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.78it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.78it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.78it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.78it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.78it/s][A
 76%|███████▌  | 168/221 [00:44<00:14,  3.78it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.78it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.78it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.78it/s][A
 79%|███████▊  | 174/221 [00:46<00:12,  3.78it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.78it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.78it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.78it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.78it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.78it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.78it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.78it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.78it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.78it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 193/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [00:56<00:02,  3.78it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.78it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.78it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.78it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.78it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.78it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.78it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.78it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:36,  5.99it/s][A
  1%|          | 2/221 [00:00<00:42,  5.19it/s][A
  1%|▏         | 3/221 [00:00<00:44,  4.92it/s][A
  2%|▏         | 4/221 [00:00<00:38,  5.67it/s][A
  2%|▏         | 5/221 [00:00<00:40,  5.30it/s][A
  3%|▎         | 7/221 [00:01<00:40,  5.28it/s][A
  4%|▎         | 8/221 [00:01<00:46,  4.57it/s][A
  4%|▍         | 9/221 [00:01<00:42,  4.94it/s][A
  5%|▍         | 10/221 [00:02<01:02,  3.37it/s][A
  5%|▍         | 11/221 [00:02<00:59,  3.51it/s][A
  5%|▌         | 12/221 [00:02<00:50,  4.17it/s][A
  6%|▌         | 13/221 [00:03<01:35,  2.17it/s][A
  7%|▋         | 15/221 [00:04<01:06,  3.08it/s][A
  7%|▋         | 16/221 [00:04<01:07,  3.03it/s][A
  8%|▊         | 17/221 [00:04<01:22,  2.47it/s][A
  8%|▊         | 18/221 [00:05<01:17,  2.62it/s][A
  9%|▊         | 19/221 [00:05<01:11,  2.84it/s][A
  9%|▉         | 20/221 [00:05<00:56,  3.56it/s][A
 10%|▉         | 21/221 [00:05<00:50,  3.97it/s][A
 10%|▉         | 22/221 [00:05<00:42,  4.67it/s][A
 11%|█         | 24/221 [00:06<00:34,  5.63it/s][A
 11%|█▏        | 25/221 [00:06<00:38,  5.14it/s][A
 12%|█▏        | 26/221 [00:06<00:43,  4.50it/s][A
 12%|█▏        | 27/221 [00:06<00:39,  4.90it/s][A
 13%|█▎        | 28/221 [00:07<00:45,  4.24it/s][A
 13%|█▎        | 29/221 [00:07<00:43,  4.39it/s][A
 14%|█▎        | 30/221 [00:07<00:43,  4.39it/s][A
 14%|█▍        | 31/221 [00:07<00:40,  4.73it/s][A
 14%|█▍        | 32/221 [00:07<00:33,  5.58it/s][A
 15%|█▍        | 33/221 [00:08<00:34,  5.52it/s][A
 15%|█▌        | 34/221 [00:08<00:36,  5.13it/s][A
 16%|█▌        | 35/221 [00:08<00:45,  4.10it/s][A
 16%|█▋        | 36/221 [00:08<00:44,  4.15it/s][A
 17%|█▋        | 37/221 [00:09<00:46,  3.97it/s][A
 17%|█▋        | 38/221 [00:09<00:47,  3.85it/s][A
 18%|█▊        | 39/221 [00:09<00:42,  4.24it/s][A
 18%|█▊        | 40/221 [00:10<00:51,  3.48it/s][A
 19%|█▊        | 41/221 [00:10<00:42,  4.19it/s][A
 19%|█▉        | 42/221 [00:10<00:45,  3.91it/s][A
 19%|█▉        | 43/221 [00:10<00:52,  3.40it/s][A
 20%|█▉        | 44/221 [00:11<00:49,  3.57it/s][A
 20%|██        | 45/221 [00:11<00:43,  4.06it/s][A
 21%|██        | 46/221 [00:11<00:41,  4.22it/s][A
 21%|██▏       | 47/221 [00:11<00:42,  4.10it/s][A
 22%|██▏       | 48/221 [00:11<00:38,  4.50it/s][A
 22%|██▏       | 49/221 [00:12<00:38,  4.45it/s][A
 23%|██▎       | 50/221 [00:12<00:40,  4.22it/s][A
 24%|██▎       | 52/221 [00:12<00:33,  5.12it/s][A
 24%|██▍       | 53/221 [00:12<00:31,  5.31it/s][A
 24%|██▍       | 54/221 [00:13<00:44,  3.76it/s][A
 25%|██▍       | 55/221 [00:13<00:42,  3.92it/s][A
 25%|██▌       | 56/221 [00:13<00:38,  4.33it/s][A
 26%|██▌       | 57/221 [00:14<00:51,  3.18it/s][A
 26%|██▌       | 58/221 [00:14<00:52,  3.12it/s][A
 27%|██▋       | 59/221 [00:14<00:49,  3.29it/s][A
 27%|██▋       | 60/221 [00:15<00:43,  3.73it/s][A
 28%|██▊       | 61/221 [00:15<00:39,  4.04it/s][A
 28%|██▊       | 62/221 [00:15<00:39,  4.00it/s][A
 29%|██▉       | 64/221 [00:16<00:36,  4.32it/s][A
 29%|██▉       | 65/221 [00:16<00:32,  4.82it/s][A
 30%|██▉       | 66/221 [00:16<00:46,  3.36it/s][A
 30%|███       | 67/221 [00:17<00:52,  2.93it/s][A
 31%|███       | 68/221 [00:17<00:43,  3.52it/s][A
 31%|███       | 69/221 [00:17<00:58,  2.61it/s][A
 32%|███▏      | 70/221 [00:18<00:46,  3.26it/s][A
 32%|███▏      | 71/221 [00:18<00:45,  3.33it/s][A
 33%|███▎      | 72/221 [00:18<00:52,  2.86it/s][A
 33%|███▎      | 73/221 [00:18<00:43,  3.36it/s][A
 33%|███▎      | 74/221 [00:19<00:36,  4.08it/s][A
 34%|███▍      | 75/221 [00:19<00:36,  4.01it/s][A
 34%|███▍      | 76/221 [00:19<00:35,  4.08it/s][A
 35%|███▍      | 77/221 [00:19<00:36,  3.99it/s][A
 35%|███▌      | 78/221 [00:20<00:31,  4.54it/s][A
 36%|███▌      | 79/221 [00:20<00:55,  2.58it/s][A
 36%|███▌      | 80/221 [00:20<00:47,  2.99it/s][A
 37%|███▋      | 81/221 [00:21<00:40,  3.44it/s][A
 37%|███▋      | 82/221 [00:21<00:44,  3.13it/s][A
 38%|███▊      | 83/221 [00:21<00:44,  3.08it/s][A
 38%|███▊      | 84/221 [00:22<00:40,  3.41it/s][A
 38%|███▊      | 85/221 [00:22<00:33,  4.11it/s][A
 39%|███▉      | 86/221 [00:22<00:31,  4.35it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.80it/s][A
 40%|███▉      | 88/221 [00:23<00:44,  3.02it/s][A
 40%|████      | 89/221 [00:23<00:46,  2.87it/s][A
 41%|████      | 90/221 [00:23<00:42,  3.05it/s][A
 41%|████      | 91/221 [00:24<00:36,  3.58it/s][A
 42%|████▏     | 92/221 [00:24<00:39,  3.27it/s][A
 42%|████▏     | 93/221 [00:25<00:59,  2.15it/s][A
 43%|████▎     | 94/221 [00:25<00:55,  2.28it/s][A
 43%|████▎     | 95/221 [00:25<00:49,  2.55it/s][A
 43%|████▎     | 96/221 [00:26<00:41,  3.01it/s][A
 44%|████▍     | 97/221 [00:26<00:35,  3.47it/s][A
 44%|████▍     | 98/221 [00:26<00:35,  3.44it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.76it/s][A
 45%|████▌     | 100/221 [00:27<00:31,  3.84it/s][A
 46%|████▌     | 101/221 [00:27<00:35,  3.37it/s][A
 46%|████▌     | 102/221 [00:28<00:44,  2.68it/s][A
 47%|████▋     | 103/221 [00:28<00:37,  3.11it/s][A
 47%|████▋     | 104/221 [00:28<00:34,  3.39it/s][A
 48%|████▊     | 105/221 [00:28<00:31,  3.64it/s][A
 48%|████▊     | 106/221 [00:29<00:37,  3.09it/s][A
 48%|████▊     | 107/221 [00:29<00:35,  3.23it/s][A
 49%|████▉     | 108/221 [00:29<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:29<00:28,  3.92it/s][A
 50%|████▉     | 110/221 [00:30<00:28,  3.92it/s][A
 50%|█████     | 111/221 [00:30<00:29,  3.69it/s][A
 51%|█████     | 112/221 [00:30<00:30,  3.56it/s][A
 51%|█████     | 113/221 [00:30<00:25,  4.21it/s][A
 52%|█████▏    | 115/221 [00:31<00:21,  4.86it/s][A
 52%|█████▏    | 116/221 [00:31<00:25,  4.20it/s][A
 53%|█████▎    | 117/221 [00:31<00:24,  4.22it/s][A
 53%|█████▎    | 118/221 [00:32<00:24,  4.13it/s][A
 54%|█████▍    | 119/221 [00:32<00:30,  3.34it/s][A
 54%|█████▍    | 120/221 [00:32<00:28,  3.49it/s][A
 55%|█████▌    | 122/221 [00:33<00:22,  4.36it/s][A
 56%|█████▌    | 123/221 [00:33<00:22,  4.45it/s][A
 56%|█████▌    | 124/221 [00:33<00:20,  4.65it/s][A
 57%|█████▋    | 125/221 [00:33<00:24,  3.85it/s][A
 57%|█████▋    | 126/221 [00:34<00:25,  3.71it/s][A
 57%|█████▋    | 127/221 [00:34<00:27,  3.38it/s][A
 58%|█████▊    | 128/221 [00:34<00:25,  3.61it/s][A
 58%|█████▊    | 129/221 [00:34<00:21,  4.24it/s][A
 59%|█████▉    | 130/221 [00:35<00:21,  4.32it/s][A
 60%|█████▉    | 132/221 [00:35<00:15,  5.62it/s][A
 60%|██████    | 133/221 [00:35<00:19,  4.51it/s][A
 61%|██████    | 134/221 [00:35<00:18,  4.59it/s][A
 61%|██████    | 135/221 [00:36<00:18,  4.77it/s][A
 62%|██████▏   | 136/221 [00:36<00:18,  4.59it/s][A
 62%|██████▏   | 137/221 [00:36<00:16,  5.05it/s][A
 62%|██████▏   | 138/221 [00:36<00:19,  4.20it/s][A
 63%|██████▎   | 139/221 [00:37<00:23,  3.45it/s][A
 63%|██████▎   | 140/221 [00:37<00:22,  3.58it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.68it/s][A
 64%|██████▍   | 142/221 [00:37<00:19,  4.09it/s][A
 65%|██████▍   | 143/221 [00:38<00:26,  2.92it/s][A
 65%|██████▌   | 144/221 [00:38<00:29,  2.64it/s][A
 66%|██████▌   | 145/221 [00:38<00:22,  3.38it/s][A
 67%|██████▋   | 147/221 [00:39<00:18,  4.06it/s][A
 67%|██████▋   | 148/221 [00:39<00:22,  3.22it/s][A
 67%|██████▋   | 149/221 [00:40<00:21,  3.36it/s][A
 68%|██████▊   | 150/221 [00:40<00:21,  3.37it/s][A
 68%|██████▊   | 151/221 [00:40<00:20,  3.38it/s][A
 69%|██████▉   | 152/221 [00:41<00:29,  2.36it/s][A
 69%|██████▉   | 153/221 [00:41<00:23,  2.86it/s][A
 70%|██████▉   | 154/221 [00:41<00:20,  3.23it/s][A
 70%|███████   | 155/221 [00:42<00:20,  3.21it/s][A
 71%|███████   | 156/221 [00:42<00:24,  2.68it/s][A
 71%|███████   | 157/221 [00:42<00:22,  2.88it/s][A
 71%|███████▏  | 158/221 [00:43<00:21,  2.92it/s][A
 72%|███████▏  | 159/221 [00:43<00:17,  3.58it/s][A
 72%|███████▏  | 160/221 [00:43<00:15,  4.04it/s][A
 73%|███████▎  | 161/221 [00:43<00:17,  3.50it/s][A
 73%|███████▎  | 162/221 [00:44<00:15,  3.76it/s][A
 74%|███████▍  | 163/221 [00:44<00:15,  3.81it/s][A
 74%|███████▍  | 164/221 [00:44<00:14,  3.97it/s][A
 75%|███████▍  | 165/221 [00:45<00:15,  3.60it/s][A
 75%|███████▌  | 166/221 [00:45<00:14,  3.73it/s][A
 76%|███████▌  | 167/221 [00:45<00:11,  4.53it/s][A
 76%|███████▌  | 168/221 [00:45<00:13,  4.01it/s][A
 76%|███████▋  | 169/221 [00:45<00:12,  4.21it/s][A
 77%|███████▋  | 170/221 [00:46<00:17,  2.97it/s][A
 77%|███████▋  | 171/221 [00:46<00:14,  3.53it/s][A
 78%|███████▊  | 172/221 [00:46<00:11,  4.08it/s][A
 78%|███████▊  | 173/221 [00:47<00:14,  3.23it/s][A
 79%|███████▊  | 174/221 [00:47<00:16,  2.88it/s][A
 79%|███████▉  | 175/221 [00:48<00:16,  2.80it/s][A
 80%|███████▉  | 176/221 [00:48<00:14,  3.16it/s][A
 80%|████████  | 177/221 [00:48<00:12,  3.48it/s][A
 81%|████████  | 178/221 [00:48<00:11,  3.61it/s][A
 81%|████████  | 179/221 [00:48<00:11,  3.77it/s][A
 81%|████████▏ | 180/221 [00:49<00:09,  4.34it/s][A
 82%|████████▏ | 181/221 [00:49<00:09,  4.22it/s][A
 82%|████████▏ | 182/221 [00:49<00:10,  3.75it/s][A
 83%|████████▎ | 183/221 [00:49<00:10,  3.76it/s][A
 83%|████████▎ | 184/221 [00:50<00:08,  4.41it/s][A
 84%|████████▎ | 185/221 [00:50<00:07,  4.85it/s][A
 84%|████████▍ | 186/221 [00:50<00:09,  3.64it/s][A
 85%|████████▍ | 187/221 [00:51<00:09,  3.61it/s][A
 85%|████████▌ | 188/221 [00:51<00:09,  3.49it/s][A
 86%|████████▌ | 189/221 [00:51<00:08,  3.61it/s][A
 86%|████████▌ | 190/221 [00:52<00:10,  3.05it/s][A
 86%|████████▋ | 191/221 [00:52<00:08,  3.64it/s][A
 87%|████████▋ | 192/221 [00:52<00:09,  3.07it/s][A
 87%|████████▋ | 193/221 [00:52<00:07,  3.67it/s][A
 88%|████████▊ | 194/221 [00:53<00:07,  3.44it/s][A
 88%|████████▊ | 195/221 [00:53<00:07,  3.54it/s][A
 89%|████████▊ | 196/221 [00:53<00:08,  3.06it/s][A
 89%|████████▉ | 197/221 [00:54<00:07,  3.37it/s][A
 90%|████████▉ | 198/221 [00:54<00:08,  2.82it/s][A
 90%|█████████ | 199/221 [00:54<00:07,  3.09it/s][A
 90%|█████████ | 200/221 [00:55<00:07,  2.85it/s][A
 91%|█████████ | 201/221 [00:55<00:06,  3.15it/s][A
 91%|█████████▏| 202/221 [00:55<00:06,  3.01it/s][A
 92%|█████████▏| 203/221 [00:55<00:05,  3.51it/s][A
 92%|█████████▏| 204/221 [00:56<00:07,  2.39it/s][A
 93%|█████████▎| 205/221 [00:56<00:05,  3.03it/s][A
 93%|█████████▎| 206/221 [00:57<00:04,  3.00it/s][A
 94%|█████████▎| 207/221 [00:57<00:03,  3.70it/s][A
 94%|█████████▍| 208/221 [00:57<00:03,  3.92it/s][A
 95%|█████████▍| 209/221 [00:57<00:03,  3.39it/s][A
 95%|█████████▌| 210/221 [00:58<00:02,  3.98it/s][A
 95%|█████████▌| 211/221 [00:58<00:02,  3.46it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  3.47it/s][A
 96%|█████████▋| 213/221 [00:58<00:02,  3.88it/s][A
 97%|█████████▋| 214/221 [00:59<00:02,  3.14it/s][A
 97%|█████████▋| 215/221 [00:59<00:01,  3.35it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  3.28it/s][A
 98%|█████████▊| 217/221 [01:00<00:01,  3.33it/s][A
 99%|█████████▊| 218/221 [01:00<00:00,  3.13it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  2.97it/s][A
100%|█████████▉| 220/221 [01:01<00:00,  3.14it/s][A
100%|██████████| 221/221 [01:01<00:00,  3.14it/s][A100%|██████████| 221/221 [01:01<00:00,  3.59it/s]
09/09/2024 18:40:25 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 599--===========

09/09/2024 18:40:25 - INFO - __main__ -   {'area_r1': 32.1, 'area_recall': '32.1/55.7/63.8', 'area_ravg': 50.5}
09/09/2024 18:40:25 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 599--===========

09/09/2024 18:40:25 - INFO - __main__ -   {'forward_r1': 33.4, 'forward_recall': '33.4/59.4/69.9', 'forward_ravg': 54.2}
09/09/2024 18:40:25 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 599--===========

09/09/2024 18:40:25 - INFO - __main__ -   {'area_video_r1': 38.1, 'area_video_recall': '38.1/68.4/78.3', 'area_video_ravg': 61.6}
09/09/2024 18:40:25 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 299=======

09/09/2024 18:40:25 - INFO - __main__ -   {'area_video_r1': 40.6, 'area_video_recall': '40.6/66.7/79.0', 'area_video_ravg': 62.1}
09/09/2024 18:40:25 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 599--===========

09/09/2024 18:40:25 - INFO - __main__ -   {'area_video_r1': 51.2, 'area_video_recall': '51.2/72.6/79.9', 'area_video_ravg': 67.9, 'area_video_back_r1': 48.8, 'area_video_back_recall': '48.8/72.4/79.4', 'area_video_back_ravg': 66.9}
09/09/2024 18:40:25 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 18:40:25 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 18:40:25 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 599--===========

09/09/2024 18:40:25 - INFO - __main__ -   {'video_r1': 43.8, 'video_recall': '43.8/70.0/80.8', 'video_ravg': 64.9}
09/09/2024 18:40:25 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 18:40:25 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 18:40:25 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 599--===========

09/09/2024 18:40:25 - INFO - __main__ -   {'video_r1': 52.7, 'video_recall': '52.7/76.1/82.8', 'video_ravg': 70.6}
09/09/2024 18:40:25 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 599=======

09/09/2024 18:40:25 - INFO - __main__ -   {'video_r1': 52.7, 'video_recall': '52.7/76.1/82.8', 'video_ravg': 70.6}
09/09/2024 18:40:54 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.4792060852050781, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.026346823200583458, 'loss_ret%tv%ta--finetune_area/loss_area': 1.435397744178772, 'loss_ret%tv%ta--finetune_area/total_loss': 2.940950632095337}
 31%|███       | 600/1945 [3:15:28<46:53:53, 125.53s/it][h264 @ 0x556e6d648500] mmco: unref short failure
 31%|███       | 601/1945 [3:15:33<33:15:30, 89.09s/it]  31%|███       | 602/1945 [3:15:37<23:46:57, 63.75s/it] 31%|███       | 603/1945 [3:15:43<17:17:11, 46.37s/it] 31%|███       | 604/1945 [3:15:49<12:42:39, 34.12s/it][h264 @ 0x55b7d6feff00] mmco: unref short failure
[h264 @ 0x55b7d6feff00] mmco: unref short failure
 31%|███       | 605/1945 [3:15:55<9:39:32, 25.95s/it] [h264 @ 0x556e5bac6000] mmco: unref short failure
[h264 @ 0x55b7ea6f1d80] mmco: unref short failure
[h264 @ 0x55b7ea6f1d80] mmco: unref short failure
 31%|███       | 606/1945 [3:16:02<7:29:43, 20.15s/it][h264 @ 0x556e58aab700] mmco: unref short failure
[h264 @ 0x556e650d3380] mmco: unref short failure
 31%|███       | 607/1945 [3:16:11<6:12:18, 16.70s/it][h264 @ 0x556e629d21c0] mmco: unref short failure
[h264 @ 0x556e629d21c0] mmco: unref short failure
[h264 @ 0x556e629d21c0] mmco: unref short failure
[h264 @ 0x556e499dd5c0] mmco: unref short failure
[h264 @ 0x556e499dd5c0] mmco: unref short failure
[h264 @ 0x556e499dd5c0] mmco: unref short failure
[h264 @ 0x556e499dd5c0] mmco: unref short failure
[h264 @ 0x556e499dd5c0] mmco: unref short failure
[h264 @ 0x556e499dd5c0] mmco: unref short failure
[h264 @ 0x556e499dd5c0] mmco: unref short failure
[h264 @ 0x556e499dd5c0] mmco: unref short failure
 31%|███▏      | 608/1945 [3:16:18<5:06:27, 13.75s/it][h264 @ 0x556e58486d40] mmco: unref short failure
[h264 @ 0x556e58486d40] mmco: unref short failure
 31%|███▏      | 609/1945 [3:16:26<4:29:51, 12.12s/it][h264 @ 0x556e6b5b5680] mmco: unref short failure
[h264 @ 0x55b7cb822b40] mmco: unref short failure
[h264 @ 0x55e501956640] mmco: unref short failure
[h264 @ 0x55e501956640] mmco: unref short failure
[h264 @ 0x556e56f1c980] mmco: unref short failure
 31%|███▏      | 610/1945 [3:16:34<4:03:13, 10.93s/it][h264 @ 0x556e4be47340] mmco: unref short failure
[h264 @ 0x556e4be47340] mmco: unref short failure
[h264 @ 0x556e600ec680] mmco: unref short failure
[h264 @ 0x556e600ec680] mmco: unref short failure
[h264 @ 0x55e51c648f40] mmco: unref short failure
[h264 @ 0x55e51c648f40] mmco: unref short failure
 31%|███▏      | 611/1945 [3:16:41<3:34:47,  9.66s/it][h264 @ 0x556e6968f240] mmco: unref short failure
[h264 @ 0x556e6968f240] mmco: unref short failure
 31%|███▏      | 612/1945 [3:16:48<3:18:33,  8.94s/it][h264 @ 0x556e52c607c0] mmco: unref short failure
[h264 @ 0x556e52c607c0] mmco: unref short failure
[h264 @ 0x556e4dfa0980] mmco: unref short failure
[h264 @ 0x556e4dfa0980] mmco: unref short failure
[h264 @ 0x556e4be47340] mmco: unref short failure
 32%|███▏      | 613/1945 [3:16:58<3:23:57,  9.19s/it] 32%|███▏      | 614/1945 [3:17:05<3:10:27,  8.59s/it][h264 @ 0x55b7edacc240] mmco: unref short failure
[h264 @ 0x55b7edacc240] mmco: unref short failure
[h264 @ 0x55e5074eb900] mmco: unref short failure
[h264 @ 0x556e487243c0] mmco: unref short failure
[h264 @ 0x556e487243c0] mmco: unref short failure
 32%|███▏      | 615/1945 [3:17:12<3:03:42,  8.29s/it][h264 @ 0x55b7d67cb900] mmco: unref short failure
[h264 @ 0x55e5022b6040] mmco: unref short failure
[h264 @ 0x55e5022b6040] mmco: unref short failure
[h264 @ 0x55e5022b6040] mmco: unref short failure
[h264 @ 0x55e5022b6040] mmco: unref short failure
 32%|███▏      | 616/1945 [3:17:20<2:57:32,  8.02s/it][h264 @ 0x556e55a14c00] mmco: unref short failure
[h264 @ 0x556e5db48580] mmco: unref short failure
[h264 @ 0x556e5db48580] mmco: unref short failure
[h264 @ 0x556e5bac56c0] mmco: unref short failure
[h264 @ 0x556e5bac56c0] mmco: unref short failure
[h264 @ 0x556e5bac56c0] mmco: unref short failure
[h264 @ 0x556e5bac56c0] mmco: unref short failure
 32%|███▏      | 617/1945 [3:17:28<3:00:29,  8.15s/it][h264 @ 0x556e4a0b7d80] mmco: unref short failure
[h264 @ 0x556e4a0b7d80] mmco: unref short failure
[h264 @ 0x55b7cb4d5780] mmco: unref short failure
[h264 @ 0x556e5fae2b00] mmco: unref short failure
[h264 @ 0x556e5fae2b00] mmco: unref short failure
[h264 @ 0x55e50b451540] mmco: unref short failure
[h264 @ 0x55e50b451540] mmco: unref short failure
 32%|███▏      | 618/1945 [3:17:38<3:10:34,  8.62s/it][h264 @ 0x556e4d0f1a40] mmco: unref short failure
[h264 @ 0x556e48945140] mmco: unref short failure
 32%|███▏      | 619/1945 [3:17:47<3:13:35,  8.76s/it][h264 @ 0x55b7d00bb680] mmco: unref short failure
[h264 @ 0x55b7d00bb680] mmco: unref short failure
 32%|███▏      | 620/1945 [3:18:01<3:45:26, 10.21s/it][h264 @ 0x55e4fed00b00] mmco: unref short failure
[h264 @ 0x55e4fed00b00] mmco: unref short failure
[h264 @ 0x55e4fed00b00] mmco: unref short failure
[h264 @ 0x556e6cead800] mmco: unref short failure
[h264 @ 0x556e60af8280] mmco: unref short failure
[h264 @ 0x556e60af8280] mmco: unref short failure
[h264 @ 0x556e60af8280] mmco: unref short failure
[h264 @ 0x556e60af8280] mmco: unref short failure
 32%|███▏      | 621/1945 [3:18:09<3:31:33,  9.59s/it][h264 @ 0x55e50dd1ab80] mmco: unref short failure
[h264 @ 0x556e5bb44900] mmco: unref short failure
[h264 @ 0x556e6ff25400] mmco: unref short failure
[h264 @ 0x556e4a0b7700] mmco: unref short failure
 32%|███▏      | 622/1945 [3:18:16<3:18:27,  9.00s/it][h264 @ 0x556e4ae03180] mmco: unref short failure
 32%|███▏      | 623/1945 [3:18:24<3:07:04,  8.49s/it][h264 @ 0x55b7d15c75c0] mmco: unref short failure
[h264 @ 0x55b7d15c75c0] mmco: unref short failure
[h264 @ 0x55b7e5909600] mmco: unref short failure
[h264 @ 0x556e6aea4280] mmco: unref short failure
not have audios 8-qwaveiHMM.3
[h264 @ 0x55e5069c7940] mmco: unref short failure
[h264 @ 0x55e5069c7940] mmco: unref short failure
[h264 @ 0x55b7d1af2900] mmco: unref short failure
[h264 @ 0x55b7d6dd2a40] mmco: unref short failure
[h264 @ 0x55b7d6dd2a40] mmco: unref short failure
[h264 @ 0x55b7cabfb4c0] mmco: unref short failure
[h264 @ 0x55b7cabfb4c0] mmco: unref short failure
[h264 @ 0x55e50e1b7780] mmco: unref short failure
[h264 @ 0x55e50e1b7780] mmco: unref short failure
 32%|███▏      | 624/1945 [3:19:13<7:36:40, 20.74s/it][h264 @ 0x55e506ff3c00] mmco: unref short failure
[h264 @ 0x55e506ff3c00] mmco: unref short failure
[h264 @ 0x556e4f90dc80] mmco: unref short failure
[h264 @ 0x556e52d1aa40] mmco: unref short failure
[h264 @ 0x556e52d1aa40] mmco: unref short failure
[h264 @ 0x55e4feaf08c0] mmco: unref short failure
[h264 @ 0x55e4feaf08c0] mmco: unref short failure
[h264 @ 0x556e5bb44900] mmco: unref short failure
[h264 @ 0x556e5bb44900] mmco: unref short failure
[h264 @ 0x556e54d1e0c0] mmco: unref short failure
[h264 @ 0x556e54d1e0c0] mmco: unref short failure
 32%|███▏      | 625/1945 [3:19:31<7:16:38, 19.85s/it][h264 @ 0x556e5174f540] mmco: unref short failure
[h264 @ 0x556e5174f540] mmco: unref short failure
[h264 @ 0x556e6d648080] mmco: unref short failure
[h264 @ 0x556e6d648080] mmco: unref short failure
[h264 @ 0x55b7cd451640] mmco: unref short failure
[h264 @ 0x55b7cd451640] mmco: unref short failure
[h264 @ 0x55b7cf503fc0] mmco: unref short failure
[h264 @ 0x55b7cb465cc0] mmco: unref short failure
[h264 @ 0x55b7cb465cc0] mmco: unref short failure
 32%|███▏      | 626/1945 [3:19:45<6:41:01, 18.24s/it][h264 @ 0x556e45077240] mmco: unref short failure
[h264 @ 0x556e45077240] mmco: unref short failure
[h264 @ 0x55b7dd53e040] mmco: unref short failure
[h264 @ 0x55b7dd53e040] mmco: unref short failure
[h264 @ 0x55b7dd53e040] mmco: unref short failure
[h264 @ 0x55b7dd53e040] mmco: unref short failure
[h264 @ 0x556e719f8c80] mmco: unref short failure
[h264 @ 0x556e719f8c80] mmco: unref short failure
[h264 @ 0x556e6717ee00] mmco: unref short failure
[h264 @ 0x55e4fe6470c0] mmco: unref short failure
 32%|███▏      | 627/1945 [3:19:52<5:24:34, 14.78s/it][h264 @ 0x556e54273e00] mmco: unref short failure
[h264 @ 0x556e54273e00] mmco: unref short failure
[h264 @ 0x556e42133980] mmco: unref short failure
[h264 @ 0x556e42133980] mmco: unref short failure
[h264 @ 0x55b7cb6aed80] mmco: unref short failure
[h264 @ 0x55b7cb6aed80] mmco: unref short failure
 32%|███▏      | 628/1945 [3:20:06<5:21:22, 14.64s/it][h264 @ 0x55b7e3dc9900] mmco: unref short failure
[h264 @ 0x55b7e3dc9900] mmco: unref short failure
[h264 @ 0x556e58963180] mmco: unref short failure
 32%|███▏      | 629/1945 [3:20:14<4:37:44, 12.66s/it] 32%|███▏      | 630/1945 [3:20:23<4:09:03, 11.36s/it][h264 @ 0x556e6fc10d40] mmco: unref short failure
[h264 @ 0x556e6fc10d40] mmco: unref short failure
[h264 @ 0x556e42fc0e40] mmco: unref short failure
[h264 @ 0x556e469d7e40] mmco: unref short failure
[h264 @ 0x556e469d7e40] mmco: unref short failure
[h264 @ 0x55e50e02e340] mmco: unref short failure
[h264 @ 0x556e55fdbd40] mmco: unref short failure
[h264 @ 0x556e4987f900] mmco: unref short failure
[h264 @ 0x55b7d61d3a40] mmco: unref short failure
[h264 @ 0x55b7d61d3a40] mmco: unref short failure
[h264 @ 0x55b7d61d3a40] mmco: unref short failure
[h264 @ 0x556e63fbc780] mmco: unref short failure
[h264 @ 0x556e63fbc780] mmco: unref short failure
 32%|███▏      | 631/1945 [3:20:47<5:34:44, 15.28s/it][h264 @ 0x55b7ceeec440] mmco: unref short failure
[h264 @ 0x55b7dc5b1c40] mmco: unref short failure
[h264 @ 0x55b7dc5b1c40] mmco: unref short failure
[h264 @ 0x556e4ac0c800] mmco: unref short failure
[h264 @ 0x55b7d3c9e5c0] mmco: unref short failure
[h264 @ 0x55b7d3c9e5c0] mmco: unref short failure
[h264 @ 0x55b7cce3b7c0] mmco: unref short failure
[h264 @ 0x55b7cce3b7c0] mmco: unref short failure
[h264 @ 0x556e65315600] mmco: unref short failure
 32%|███▏      | 632/1945 [3:21:20<7:30:17, 20.58s/it][h264 @ 0x55b7d8cc0d00] mmco: unref short failure
[h264 @ 0x55b7d8cc0d00] mmco: unref short failure
[h264 @ 0x55e5003a2300] mmco: unref short failure
[h264 @ 0x55e5003a2300] mmco: unref short failure
[h264 @ 0x556e713f4680] mmco: unref short failure
 33%|███▎      | 633/1945 [3:21:29<6:11:13, 16.98s/it][h264 @ 0x55b7dbc62480] mmco: unref short failure
[h264 @ 0x556e53432440] mmco: unref short failure
[h264 @ 0x556e53432440] mmco: unref short failure
[h264 @ 0x556e656c8f00] mmco: unref short failure
[h264 @ 0x556e656c8f00] mmco: unref short failure
[h264 @ 0x55b7e113cec0] mmco: unref short failure
 33%|███▎      | 634/1945 [3:21:52<6:53:16, 18.91s/it][h264 @ 0x55e5116a2a40] mmco: unref short failure
[h264 @ 0x55e5116a2a40] mmco: unref short failure
 33%|███▎      | 635/1945 [3:22:00<5:43:19, 15.73s/it][h264 @ 0x556e5b7e9d40] mmco: unref short failure
[h264 @ 0x556e585a9fc0] mmco: unref short failure
[h264 @ 0x556e70244800] mmco: unref short failure
 33%|███▎      | 636/1945 [3:22:17<5:47:16, 15.92s/it][h264 @ 0x556e420b0080] mmco: unref short failure
[h264 @ 0x55e513866a00] mmco: unref short failure
[h264 @ 0x55e513866a00] mmco: unref short failure
 33%|███▎      | 637/1945 [3:22:24<4:51:33, 13.37s/it] 33%|███▎      | 638/1945 [3:22:31<4:10:33, 11.50s/it][h264 @ 0x55b7cb689000] mmco: unref short failure
[h264 @ 0x55b7cb689000] mmco: unref short failure
[h264 @ 0x556e427eac40] mmco: unref short failure
[h264 @ 0x556e5d005480] mmco: unref short failure
 33%|███▎      | 639/1945 [3:22:52<5:09:25, 14.22s/it][h264 @ 0x556e5f8cc9c0] mmco: unref short failure
[h264 @ 0x556e5f8cc9c0] mmco: unref short failure
[h264 @ 0x556e5f8cc9c0] mmco: unref short failure
[h264 @ 0x556e5f8cc9c0] mmco: unref short failure
[h264 @ 0x556e5f8cc9c0] mmco: unref short failure
[h264 @ 0x556e5f8cc9c0] mmco: unref short failure
[h264 @ 0x556e713d8600] mmco: unref short failure
[h264 @ 0x55e50559f040] mmco: unref short failure
[h264 @ 0x55e50559f040] mmco: unref short failure
[h264 @ 0x556e68548c40] mmco: unref short failure
[h264 @ 0x556e68548c40] mmco: unref short failure
[h264 @ 0x55b7cbc1f4c0] mmco: unref short failure
[h264 @ 0x55e50e02e340] mmco: unref short failure
[h264 @ 0x55e50e02e340] mmco: unref short failure
 33%|███▎      | 640/1945 [3:23:25<7:11:38, 19.85s/it][h264 @ 0x55b7df84d140] mmco: unref short failure
[h264 @ 0x55e51fc65ec0] mmco: unref short failure
[h264 @ 0x55e51fc65ec0] mmco: unref short failure
[h264 @ 0x55e51fc65ec0] mmco: unref short failure
[h264 @ 0x55e51fc65ec0] mmco: unref short failure
 33%|███▎      | 641/1945 [3:23:33<5:52:22, 16.21s/it][h264 @ 0x556e5b7b4c80] mmco: unref short failure
[h264 @ 0x55b7d1054f00] mmco: unref short failure
[h264 @ 0x55b7d1054f00] mmco: unref short failure
[h264 @ 0x55b7d4e61180] mmco: unref short failure
[h264 @ 0x55b7d4e61180] mmco: unref short failure
[h264 @ 0x55b7d4e61180] mmco: unref short failure
[h264 @ 0x55b7d4e61180] mmco: unref short failure
 33%|███▎      | 642/1945 [3:23:55<6:32:20, 18.07s/it][h264 @ 0x556e4e06cf80] mmco: unref short failure
[h264 @ 0x556e4e06cf80] mmco: unref short failure
[h264 @ 0x55e51c41b0c0] mmco: unref short failure
 33%|███▎      | 643/1945 [3:24:04<5:29:49, 15.20s/it][h264 @ 0x55b7d67e70c0] mmco: unref short failure
 33%|███▎      | 644/1945 [3:24:21<5:41:27, 15.75s/it][h264 @ 0x556e65b7db40] mmco: unref short failure
[h264 @ 0x556e65b7db40] mmco: unref short failure
[h264 @ 0x556e5c043b00] mmco: unref short failure
[h264 @ 0x556e5c043b00] mmco: unref short failure
[h264 @ 0x55e51ff1bb80] mmco: unref short failure
[h264 @ 0x556e6bd9ce00] mmco: unref short failure
[h264 @ 0x556e6bd9ce00] mmco: unref short failure
 33%|███▎      | 645/1945 [3:24:28<4:45:47, 13.19s/it][h264 @ 0x556e56dc1580] mmco: unref short failure
[h264 @ 0x556e56dc1580] mmco: unref short failure
 33%|███▎      | 646/1945 [3:24:35<4:09:38, 11.53s/it][h264 @ 0x55e503f69800] mmco: unref short failure
[h264 @ 0x55e503f69800] mmco: unref short failure
[h264 @ 0x556e538f3080] mmco: unref short failure
[h264 @ 0x556e538f3080] mmco: unref short failure
[h264 @ 0x556e625ad080] mmco: unref short failure
[h264 @ 0x556e625ad080] mmco: unref short failure
[h264 @ 0x55b7d9655500] mmco: unref short failure
[h264 @ 0x55b7d9655500] mmco: unref short failure
[h264 @ 0x55e5003a2500] mmco: unref short failure
[h264 @ 0x55e5003a2500] mmco: unref short failure
[h264 @ 0x55b7d8be4900] mmco: unref short failure
[h264 @ 0x55b7d8be4900] mmco: unref short failure
[h264 @ 0x556e5d8b5840] mmco: unref short failure
[h264 @ 0x556e58deb900] mmco: unref short failure
[h264 @ 0x556e6144d500] mmco: unref short failure
[h264 @ 0x556e6144d500] mmco: unref short failure
[h264 @ 0x55e50fced300] mmco: unref short failure
[h264 @ 0x55e50fced300] mmco: unref short failure
[h264 @ 0x55e50fced300] mmco: unref short failure
[h264 @ 0x55e50fced300] mmco: unref short failure
 33%|███▎      | 647/1945 [3:25:03<5:52:00, 16.27s/it][h264 @ 0x55e51a124700] mmco: unref short failure
[h264 @ 0x55e51a124700] mmco: unref short failure
[h264 @ 0x55e50318bf80] mmco: unref short failure
[h264 @ 0x55e50318bf80] mmco: unref short failure
[h264 @ 0x556e4867ae00] mmco: unref short failure
[h264 @ 0x556e44aae680] mmco: unref short failure
[h264 @ 0x556e44aae680] mmco: unref short failure
[h264 @ 0x55b7cb60f200] mmco: unref short failure
[h264 @ 0x55b7cb60f200] mmco: unref short failure
 33%|███▎      | 648/1945 [3:25:33<7:20:01, 20.36s/it][h264 @ 0x55b7d675d2c0] mmco: unref short failure
[h264 @ 0x55b7d675d2c0] mmco: unref short failure
 33%|███▎      | 649/1945 [3:25:40<5:56:28, 16.50s/it]09/09/2024 18:51:09 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 18:51:09 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b7dfb27340] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e42f33180] mmco: unref short failure
[h264 @ 0x556e42f33180] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b7dfd21800] mmco: unref short failure
[h264 @ 0x55b7dfd21800] mmco: unref short failure
[h264 @ 0x55b7cc3266c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b7dfd21800] mmco: unref short failure
[h264 @ 0x55e50b843ec0] mmco: unref short failure
[h264 @ 0x55e50b843ec0] mmco: unref short failure
[h264 @ 0x55b7ccb7e2c0] mmco: unref short failure
[h264 @ 0x556e66132fc0] mmco: unref short failure
[h264 @ 0x556e66132fc0] mmco: unref short failure
[h264 @ 0x55b7e02afc40] mmco: unref short failure
[h264 @ 0x55b7e02afc40] mmco: unref short failure
[h264 @ 0x55b7e8de1a00] mmco: unref short failure
[h264 @ 0x55b7e8de1a00] mmco: unref short failure
[h264 @ 0x55b7d373c080] mmco: unref short failure
[h264 @ 0x55b7d373c080] mmco: unref short failure
[h264 @ 0x55b7d373c080] mmco: unref short failure
[h264 @ 0x55b7d373c080] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e67df2f00] mmco: unref short failure
[h264 @ 0x556e67df2f00] mmco: unref short failure
[h264 @ 0x556e6efb7cc0] mmco: unref short failure
[h264 @ 0x55b7e0983bc0] mmco: unref short failure
[h264 @ 0x556e7034f200] mmco: unref short failure
[h264 @ 0x556e7034f200] mmco: unref short failure
[h264 @ 0x55b7cabc45c0] mmco: unref short failure
[h264 @ 0x55e51887b940] mmco: unref short failure
[h264 @ 0x556e4dbbcd00] mmco: unref short failure
[h264 @ 0x556e4dbbcd00] mmco: unref short failure
[h264 @ 0x556e4dbbcd00] mmco: unref short failure
[h264 @ 0x556e4dbbcd00] mmco: unref short failure
[h264 @ 0x55b7ced63e00] mmco: unref short failure
[h264 @ 0x55b7ced63e00] mmco: unref short failure
[h264 @ 0x55b7cedd3800] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:26,  8.34it/s][A
  1%|          | 2/221 [00:00<01:09,  3.16it/s][A
  1%|▏         | 3/221 [00:00<01:03,  3.45it/s][A
  2%|▏         | 4/221 [00:01<00:52,  4.12it/s][A
  2%|▏         | 5/221 [00:01<00:43,  4.92it/s][A
  3%|▎         | 7/221 [00:01<00:39,  5.48it/s][A
  4%|▎         | 8/221 [00:01<00:41,  5.16it/s][A
  4%|▍         | 9/221 [00:01<00:39,  5.42it/s][A[h264 @ 0x55b7f2adaf40] mmco: unref short failure
[h264 @ 0x55b7f2adaf40] mmco: unref short failure

  5%|▍         | 10/221 [00:04<03:11,  1.10it/s][A
  5%|▍         | 11/221 [00:04<02:24,  1.46it/s][A
  5%|▌         | 12/221 [00:04<01:49,  1.91it/s][A
  6%|▌         | 13/221 [00:05<01:37,  2.14it/s][A
  6%|▋         | 14/221 [00:08<04:51,  1.41s/it][A
  7%|▋         | 15/221 [00:08<03:31,  1.03s/it][A
  7%|▋         | 16/221 [00:09<03:15,  1.05it/s][A
  8%|▊         | 17/221 [00:10<03:30,  1.03s/it][A
  8%|▊         | 18/221 [00:11<02:36,  1.30it/s][A
  9%|▊         | 19/221 [00:11<01:58,  1.71it/s][A
  9%|▉         | 20/221 [00:11<01:31,  2.20it/s][A
 10%|▉         | 21/221 [00:11<01:12,  2.76it/s][A
 10%|▉         | 22/221 [00:11<00:57,  3.46it/s][A
 10%|█         | 23/221 [00:11<00:47,  4.14it/s][A
 11%|█         | 24/221 [00:11<00:43,  4.52it/s][A
 11%|█▏        | 25/221 [00:12<00:41,  4.73it/s][A
 12%|█▏        | 26/221 [00:12<00:40,  4.77it/s][A
 13%|█▎        | 28/221 [00:12<00:33,  5.70it/s][A[h264 @ 0x556e44e78480] mmco: unref short failure
[h264 @ 0x556e44e78480] mmco: unref short failure

 13%|█▎        | 29/221 [00:16<03:37,  1.13s/it][A
 14%|█▎        | 30/221 [00:16<02:48,  1.13it/s][A
 14%|█▍        | 31/221 [00:17<02:12,  1.43it/s][A
 14%|█▍        | 32/221 [00:17<01:42,  1.84it/s][A
 15%|█▍        | 33/221 [00:17<01:48,  1.73it/s][A
 15%|█▌        | 34/221 [00:18<01:31,  2.04it/s][A
 16%|█▌        | 35/221 [00:18<01:17,  2.41it/s][A
 16%|█▋        | 36/221 [00:18<01:06,  2.79it/s][A[h264 @ 0x55b7dfb1dcc0] mmco: unref short failure
[h264 @ 0x55b7dfb1dcc0] mmco: unref short failure

 17%|█▋        | 37/221 [00:18<00:55,  3.30it/s][A
 17%|█▋        | 38/221 [00:19<00:50,  3.63it/s][A[h264 @ 0x55e513348780] mmco: unref short failure

 18%|█▊        | 39/221 [00:19<01:20,  2.26it/s][A
 18%|█▊        | 40/221 [00:20<01:22,  2.20it/s][A
 19%|█▊        | 41/221 [00:20<01:06,  2.69it/s][A
 19%|█▉        | 42/221 [00:20<00:52,  3.41it/s][A
 20%|█▉        | 44/221 [00:20<00:35,  5.04it/s][A
 20%|██        | 45/221 [00:20<00:32,  5.43it/s][A
 21%|██        | 46/221 [00:21<00:28,  6.15it/s][A
 21%|██▏       | 47/221 [00:21<00:29,  5.82it/s][A[h264 @ 0x55e50b1cb540] mmco: unref short failure

 22%|██▏       | 48/221 [00:21<00:32,  5.36it/s][A
 22%|██▏       | 49/221 [00:21<00:36,  4.71it/s][A[h264 @ 0x556e52d0fbc0] mmco: unref short failure
[h264 @ 0x556e52d0fbc0] mmco: unref short failure
[h264 @ 0x55b7dfb277c0] mmco: unref short failure
[h264 @ 0x55b7dfb277c0] mmco: unref short failure

 23%|██▎       | 50/221 [00:25<03:34,  1.26s/it][A
 23%|██▎       | 51/221 [00:25<02:36,  1.09it/s][A
 24%|██▎       | 52/221 [00:25<02:02,  1.38it/s][A
 24%|██▍       | 53/221 [00:26<01:35,  1.76it/s][A
 24%|██▍       | 54/221 [00:26<01:17,  2.17it/s][A
 25%|██▍       | 55/221 [00:26<01:00,  2.76it/s][A
 25%|██▌       | 56/221 [00:26<00:48,  3.38it/s][A[h264 @ 0x55e513866800] mmco: unref short failure
[h264 @ 0x55e513866800] mmco: unref short failure
[h264 @ 0x55e513866800] mmco: unref short failure
[h264 @ 0x55e513866800] mmco: unref short failure

 26%|██▌       | 57/221 [00:26<00:43,  3.75it/s][A
 26%|██▌       | 58/221 [00:26<00:40,  4.04it/s][A
 27%|██▋       | 59/221 [00:27<00:47,  3.42it/s][A
 27%|██▋       | 60/221 [00:27<00:45,  3.56it/s][A
 28%|██▊       | 61/221 [00:27<00:36,  4.34it/s][A
 28%|██▊       | 62/221 [00:27<00:34,  4.66it/s][A
 29%|██▊       | 63/221 [00:28<00:33,  4.68it/s][A[h264 @ 0x55b7d36a4880] mmco: unref short failure
[h264 @ 0x55b7d36a4880] mmco: unref short failure

 29%|██▉       | 64/221 [00:28<00:30,  5.22it/s][A
 29%|██▉       | 65/221 [00:28<00:29,  5.36it/s][A
 30%|██▉       | 66/221 [00:28<00:30,  5.12it/s][A
 30%|███       | 67/221 [00:28<00:34,  4.45it/s][A
 31%|███       | 68/221 [00:29<00:34,  4.43it/s][A
 31%|███       | 69/221 [00:29<00:47,  3.22it/s][A
 32%|███▏      | 70/221 [00:29<00:44,  3.41it/s][A
 32%|███▏      | 71/221 [00:30<00:42,  3.55it/s][A
 33%|███▎      | 72/221 [00:30<00:35,  4.15it/s][A
 33%|███▎      | 73/221 [00:30<00:38,  3.87it/s][A
 33%|███▎      | 74/221 [00:30<00:39,  3.72it/s][A
 34%|███▍      | 75/221 [00:31<00:44,  3.30it/s][A
 35%|███▍      | 77/221 [00:31<00:30,  4.70it/s][A
 35%|███▌      | 78/221 [00:31<00:32,  4.37it/s][A
 36%|███▌      | 79/221 [00:31<00:28,  4.99it/s][A
 36%|███▌      | 80/221 [00:32<00:27,  5.06it/s][A
[h264 @ 0x55b7e01a4cc0] mmco: unref short failure
[h264 @ 0x55b7e01a4cc0] mmco: unref short failure
 37%|███▋      | 82/221 [00:32<00:25,  5.39it/s][A
 38%|███▊      | 83/221 [00:36<02:32,  1.10s/it][A
 38%|███▊      | 84/221 [00:36<02:02,  1.12it/s][A
 39%|███▉      | 86/221 [00:36<01:15,  1.80it/s][A
 39%|███▉      | 87/221 [00:37<01:09,  1.92it/s][A
 40%|███▉      | 88/221 [00:37<00:57,  2.31it/s][A
 40%|████      | 89/221 [00:37<00:54,  2.43it/s][A
 41%|████      | 90/221 [00:38<00:55,  2.38it/s][A
 41%|████      | 91/221 [00:38<00:50,  2.58it/s][A
 42%|████▏     | 92/221 [00:38<00:44,  2.90it/s][A
 42%|████▏     | 93/221 [00:39<00:37,  3.37it/s][A
 43%|████▎     | 94/221 [00:39<00:31,  4.01it/s][A
 43%|████▎     | 95/221 [00:40<01:21,  1.55it/s][A
 43%|████▎     | 96/221 [00:40<01:04,  1.93it/s][A
 44%|████▍     | 97/221 [00:41<00:49,  2.51it/s][A
 44%|████▍     | 98/221 [00:41<00:49,  2.50it/s][A
 45%|████▍     | 99/221 [00:41<00:38,  3.14it/s][A
 45%|████▌     | 100/221 [00:41<00:31,  3.89it/s][A
 46%|████▌     | 102/221 [00:41<00:21,  5.51it/s][A
 47%|████▋     | 103/221 [00:42<00:20,  5.82it/s][A
 47%|████▋     | 104/221 [00:42<00:17,  6.50it/s][A
 48%|████▊     | 105/221 [00:42<00:18,  6.29it/s][A
 48%|████▊     | 106/221 [00:42<00:16,  7.02it/s][A
 48%|████▊     | 107/221 [00:42<00:18,  6.24it/s][A
 49%|████▉     | 108/221 [00:42<00:19,  5.77it/s][A
 49%|████▉     | 109/221 [00:43<00:22,  5.07it/s][A
 50%|████▉     | 110/221 [00:43<00:20,  5.40it/s][A
 50%|█████     | 111/221 [00:43<00:23,  4.73it/s][A
 51%|█████     | 112/221 [00:43<00:25,  4.34it/s][A
 51%|█████     | 113/221 [00:44<00:25,  4.28it/s][A
 52%|█████▏    | 114/221 [00:44<00:44,  2.42it/s][A
 52%|█████▏    | 115/221 [00:44<00:33,  3.12it/s][A
 52%|█████▏    | 116/221 [00:45<00:27,  3.80it/s][A
 53%|█████▎    | 117/221 [00:45<00:25,  4.13it/s][A
 53%|█████▎    | 118/221 [00:45<00:28,  3.57it/s][A
 54%|█████▍    | 119/221 [00:46<00:30,  3.39it/s][A
 54%|█████▍    | 120/221 [00:46<00:30,  3.29it/s][A
 55%|█████▍    | 121/221 [00:46<00:25,  3.93it/s][A
 55%|█████▌    | 122/221 [00:46<00:20,  4.79it/s][A
 56%|█████▌    | 123/221 [00:46<00:17,  5.66it/s][A
 56%|█████▌    | 124/221 [00:46<00:20,  4.74it/s][A
 57%|█████▋    | 125/221 [00:47<00:18,  5.29it/s][A
 57%|█████▋    | 126/221 [00:47<00:15,  6.10it/s][A
 57%|█████▋    | 127/221 [00:47<00:19,  4.87it/s][A
 58%|█████▊    | 128/221 [00:47<00:23,  3.92it/s][A
 58%|█████▊    | 129/221 [00:48<00:20,  4.56it/s][A
 59%|█████▉    | 130/221 [00:48<00:19,  4.57it/s][A
 59%|█████▉    | 131/221 [00:48<00:17,  5.04it/s][A
 60%|█████▉    | 132/221 [00:49<00:29,  3.00it/s][A
 60%|██████    | 133/221 [00:49<00:25,  3.51it/s][A
 61%|██████    | 134/221 [00:49<00:22,  3.80it/s][A
 61%|██████    | 135/221 [00:49<00:19,  4.46it/s][A
 62%|██████▏   | 136/221 [00:49<00:16,  5.12it/s][A
 62%|██████▏   | 137/221 [00:49<00:14,  5.87it/s][A
 62%|██████▏   | 138/221 [00:50<00:15,  5.24it/s][A
 63%|██████▎   | 139/221 [00:50<00:14,  5.73it/s][A
 63%|██████▎   | 140/221 [00:50<00:13,  6.17it/s][A
 64%|██████▍   | 141/221 [00:50<00:17,  4.52it/s][A
 64%|██████▍   | 142/221 [00:51<00:24,  3.27it/s][A
 65%|██████▍   | 143/221 [00:51<00:19,  4.06it/s][A
 66%|██████▌   | 145/221 [00:51<00:14,  5.39it/s][A
 67%|██████▋   | 147/221 [00:51<00:10,  6.90it/s][A
 67%|██████▋   | 148/221 [00:51<00:12,  6.04it/s][A
 67%|██████▋   | 149/221 [00:52<00:13,  5.21it/s][A
 68%|██████▊   | 150/221 [00:52<00:13,  5.24it/s][A
 68%|██████▊   | 151/221 [00:53<00:22,  3.17it/s][A
 69%|██████▉   | 152/221 [00:53<00:26,  2.58it/s][A
 69%|██████▉   | 153/221 [00:53<00:25,  2.62it/s][A
 70%|██████▉   | 154/221 [00:54<00:21,  3.13it/s][A
 70%|███████   | 155/221 [00:54<00:17,  3.73it/s][A
 71%|███████   | 156/221 [00:54<00:14,  4.46it/s][A
 71%|███████   | 157/221 [00:54<00:12,  4.94it/s][A
 71%|███████▏  | 158/221 [00:54<00:11,  5.41it/s][A
 72%|███████▏  | 160/221 [00:54<00:09,  6.58it/s][A
 73%|███████▎  | 162/221 [00:55<00:07,  8.10it/s][A[h264 @ 0x556e6717e740] mmco: unref short failure

 74%|███████▍  | 163/221 [00:55<00:09,  6.39it/s][A
 74%|███████▍  | 164/221 [00:55<00:10,  5.68it/s][A
[h264 @ 0x55b7d675d000] mmco: unref short failure
 75%|███████▍  | 165/221 [00:55<00:09,  6.06it/s][A
 75%|███████▌  | 166/221 [00:55<00:09,  6.10it/s][A
 76%|███████▌  | 167/221 [00:56<00:08,  6.70it/s][A
 76%|███████▌  | 168/221 [00:56<00:09,  5.75it/s][A
 76%|███████▋  | 169/221 [00:56<00:10,  5.00it/s][A
 77%|███████▋  | 170/221 [00:56<00:10,  4.65it/s][A
 77%|███████▋  | 171/221 [00:57<00:20,  2.47it/s][A
 78%|███████▊  | 172/221 [00:57<00:18,  2.64it/s][A
 78%|███████▊  | 173/221 [00:58<00:15,  3.01it/s][A
 79%|███████▊  | 174/221 [00:59<00:28,  1.65it/s][A
 79%|███████▉  | 175/221 [01:00<00:29,  1.54it/s][A
 80%|████████  | 177/221 [01:00<00:18,  2.42it/s][A
 81%|████████  | 178/221 [01:00<00:17,  2.50it/s][A
 81%|████████  | 179/221 [01:01<00:15,  2.72it/s][A
 81%|████████▏ | 180/221 [01:01<00:15,  2.71it/s][A
 82%|████████▏ | 182/221 [01:01<00:09,  4.01it/s][A
 83%|████████▎ | 184/221 [01:02<00:08,  4.32it/s][A
 84%|████████▎ | 185/221 [01:02<00:08,  4.18it/s][A
 84%|████████▍ | 186/221 [01:02<00:08,  4.04it/s][A
 85%|████████▍ | 187/221 [01:02<00:07,  4.68it/s][A
 85%|████████▌ | 188/221 [01:03<00:08,  3.89it/s][A
 86%|████████▌ | 189/221 [01:03<00:07,  4.13it/s][A
 86%|████████▌ | 190/221 [01:03<00:06,  4.50it/s][A
 87%|████████▋ | 192/221 [01:03<00:04,  6.34it/s][A
 88%|████████▊ | 194/221 [01:03<00:04,  6.72it/s][A
 88%|████████▊ | 195/221 [01:04<00:03,  6.72it/s][A
 89%|████████▊ | 196/221 [01:06<00:15,  1.66it/s][A
 90%|████████▉ | 198/221 [01:06<00:08,  2.56it/s][A
 90%|█████████ | 200/221 [01:06<00:05,  3.51it/s][A
 91%|█████████ | 201/221 [01:06<00:05,  4.00it/s][A
 91%|█████████▏| 202/221 [01:06<00:04,  4.50it/s][A
 92%|█████████▏| 204/221 [01:07<00:04,  3.44it/s][A
 93%|█████████▎| 205/221 [01:07<00:04,  3.89it/s][A
 93%|█████████▎| 206/221 [01:08<00:05,  2.96it/s][A
 94%|█████████▎| 207/221 [01:08<00:04,  3.19it/s][A
 94%|█████████▍| 208/221 [01:08<00:03,  3.81it/s][A
 95%|█████████▍| 209/221 [01:08<00:02,  4.40it/s][A
 95%|█████████▌| 211/221 [01:09<00:02,  4.97it/s][A
 96%|█████████▌| 212/221 [01:09<00:01,  5.36it/s][A
 96%|█████████▋| 213/221 [01:09<00:01,  5.12it/s][A
 97%|█████████▋| 214/221 [01:09<00:01,  4.87it/s][A
 97%|█████████▋| 215/221 [01:09<00:01,  5.55it/s][A
 98%|█████████▊| 216/221 [01:09<00:00,  5.94it/s][A
 98%|█████████▊| 217/221 [01:10<00:00,  6.25it/s][A
 99%|█████████▊| 218/221 [01:10<00:00,  6.86it/s][A
 99%|█████████▉| 219/221 [01:10<00:00,  7.38it/s][A
100%|█████████▉| 220/221 [01:10<00:00,  7.26it/s][A100%|██████████| 221/221 [01:10<00:00,  3.14it/s]
[h264 @ 0x55e511976c80] mmco: unref short failure
[h264 @ 0x556e717bc300] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.77it/s][A
  1%|          | 2/221 [00:00<00:58,  3.76it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.76it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.75it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.75it/s][A
  3%|▎         | 6/221 [00:01<00:58,  3.69it/s][A
  3%|▎         | 7/221 [00:01<00:57,  3.71it/s][A
  4%|▎         | 8/221 [00:02<00:57,  3.70it/s][A
  4%|▍         | 9/221 [00:02<00:57,  3.72it/s][A
  5%|▍         | 10/221 [00:02<00:56,  3.73it/s][A
  5%|▍         | 11/221 [00:02<00:56,  3.74it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.74it/s][A
  6%|▌         | 13/221 [00:03<00:55,  3.75it/s][A
  6%|▋         | 14/221 [00:03<00:55,  3.75it/s][A
  7%|▋         | 15/221 [00:04<00:54,  3.75it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.75it/s][A
  8%|▊         | 17/221 [00:04<00:54,  3.75it/s][A
  8%|▊         | 18/221 [00:04<00:54,  3.74it/s][A[h264 @ 0x556e50c453c0] mmco: unref short failure

  9%|▊         | 19/221 [00:05<00:53,  3.75it/s][A[h264 @ 0x556e57506540] mmco: unref short failure

  9%|▉         | 20/221 [00:05<00:53,  3.76it/s][A
 10%|▉         | 21/221 [00:05<00:53,  3.70it/s][A[h264 @ 0x55e51e45e140] mmco: unref short failure
[h264 @ 0x55e51e45e140] mmco: unref short failure

 10%|▉         | 22/221 [00:05<00:54,  3.67it/s][A
 10%|█         | 23/221 [00:06<00:53,  3.70it/s][A
 11%|█         | 24/221 [00:06<00:53,  3.72it/s][A
 11%|█▏        | 25/221 [00:06<00:52,  3.70it/s][A
 12%|█▏        | 26/221 [00:06<00:52,  3.72it/s][A
 12%|█▏        | 27/221 [00:07<00:52,  3.73it/s][A
 13%|█▎        | 28/221 [00:07<00:51,  3.74it/s][A
 13%|█▎        | 29/221 [00:07<00:51,  3.74it/s][A
 14%|█▎        | 30/221 [00:08<00:50,  3.75it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.75it/s][A
 14%|█▍        | 32/221 [00:08<00:50,  3.76it/s][A
 15%|█▍        | 33/221 [00:08<00:50,  3.76it/s][A
 15%|█▌        | 34/221 [00:09<00:49,  3.76it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.76it/s][A
 16%|█▋        | 36/221 [00:09<00:49,  3.76it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.77it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.77it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.77it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.77it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.78it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.78it/s][A
 19%|█▉        | 43/221 [00:11<00:47,  3.78it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.78it/s][A
 20%|██        | 45/221 [00:12<00:46,  3.78it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.78it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.78it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.78it/s][A
 22%|██▏       | 49/221 [00:13<00:45,  3.78it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.78it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.78it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.78it/s][A
 24%|██▍       | 53/221 [00:14<00:44,  3.78it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.78it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.78it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:42,  3.78it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:17<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:18<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.78it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.78it/s][A
 37%|███▋      | 81/221 [00:21<00:37,  3.78it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.78it/s][A
 38%|███▊      | 83/221 [00:22<00:36,  3.78it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.78it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 87/221 [00:23<00:35,  3.78it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.78it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:26<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:28<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:31<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:32<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.78it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.78it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.79it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.79it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 136/221 [00:36<00:22,  3.79it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.79it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 140/221 [00:37<00:21,  3.79it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.79it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.79it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.79it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.79it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.79it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 151/221 [00:40<00:18,  3.79it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.79it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.78it/s][A
 70%|███████   | 155/221 [00:41<00:17,  3.79it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.78it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.78it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.78it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.78it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.79it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.79it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.79it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.79it/s][A
 76%|███████▌  | 168/221 [00:44<00:13,  3.79it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:45<00:13,  3.78it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.78it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.78it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.78it/s][A
 79%|███████▊  | 174/221 [00:46<00:12,  3.78it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.78it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.78it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.78it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.78it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.78it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.78it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.78it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.78it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 189/221 [00:50<00:08,  3.78it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.78it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 193/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▌| 212/221 [00:56<00:02,  3.78it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.78it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.78it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.78it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.79it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.78it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.78it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.78it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:25,  8.48it/s][A
  1%|          | 2/221 [00:00<00:43,  5.08it/s][A
  1%|▏         | 3/221 [00:00<00:44,  4.87it/s][A
  2%|▏         | 4/221 [00:00<00:39,  5.47it/s][A
  2%|▏         | 5/221 [00:00<00:38,  5.59it/s][A
  3%|▎         | 7/221 [00:01<00:38,  5.49it/s][A
  4%|▎         | 8/221 [00:01<00:46,  4.59it/s][A
  4%|▍         | 9/221 [00:01<00:42,  4.94it/s][A
  5%|▍         | 10/221 [00:02<01:04,  3.29it/s][A
  5%|▍         | 11/221 [00:02<01:01,  3.43it/s][A
  5%|▌         | 12/221 [00:02<00:52,  3.96it/s][A
  6%|▌         | 13/221 [00:03<01:29,  2.33it/s][A
  7%|▋         | 15/221 [00:03<01:04,  3.22it/s][A
  7%|▋         | 16/221 [00:04<01:05,  3.15it/s][A
  8%|▊         | 17/221 [00:04<01:17,  2.63it/s][A
  8%|▊         | 18/221 [00:05<01:13,  2.76it/s][A
  9%|▊         | 19/221 [00:05<01:08,  2.93it/s][A
  9%|▉         | 20/221 [00:05<00:54,  3.65it/s][A
 10%|▉         | 21/221 [00:05<00:49,  4.06it/s][A
 10%|▉         | 22/221 [00:05<00:42,  4.67it/s][A
 11%|█         | 24/221 [00:06<00:34,  5.74it/s][A
 11%|█▏        | 25/221 [00:06<00:36,  5.39it/s][A
 12%|█▏        | 26/221 [00:06<00:39,  4.96it/s][A
 12%|█▏        | 27/221 [00:06<00:37,  5.17it/s][A
 13%|█▎        | 28/221 [00:07<00:41,  4.61it/s][A
 13%|█▎        | 29/221 [00:07<00:43,  4.43it/s][A
 14%|█▎        | 30/221 [00:07<00:43,  4.42it/s][A
 14%|█▍        | 31/221 [00:07<00:39,  4.79it/s][A
 14%|█▍        | 32/221 [00:07<00:34,  5.45it/s][A
 15%|█▍        | 33/221 [00:07<00:35,  5.28it/s][A
 15%|█▌        | 34/221 [00:08<00:43,  4.34it/s][A
 16%|█▌        | 35/221 [00:08<00:51,  3.62it/s][A
 16%|█▋        | 36/221 [00:08<00:49,  3.74it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.77it/s][A
 17%|█▋        | 38/221 [00:09<00:48,  3.80it/s][A
 18%|█▊        | 39/221 [00:09<00:45,  4.01it/s][A
 18%|█▊        | 40/221 [00:10<00:57,  3.13it/s][A
 19%|█▊        | 41/221 [00:10<00:46,  3.86it/s][A
 19%|█▉        | 42/221 [00:10<00:47,  3.75it/s][A
 19%|█▉        | 43/221 [00:10<00:52,  3.39it/s][A
 20%|█▉        | 44/221 [00:11<00:47,  3.71it/s][A
 20%|██        | 45/221 [00:11<00:42,  4.19it/s][A
 21%|██        | 46/221 [00:11<00:41,  4.21it/s][A
 21%|██▏       | 47/221 [00:11<00:42,  4.10it/s][A
 22%|██▏       | 48/221 [00:11<00:38,  4.48it/s][A
 22%|██▏       | 49/221 [00:12<00:38,  4.46it/s][A
 23%|██▎       | 50/221 [00:12<00:41,  4.09it/s][A
 24%|██▎       | 52/221 [00:12<00:33,  5.11it/s][A
 24%|██▍       | 53/221 [00:12<00:30,  5.53it/s][A
 24%|██▍       | 54/221 [00:13<00:43,  3.83it/s][A
 25%|██▍       | 55/221 [00:13<00:40,  4.09it/s][A
 25%|██▌       | 56/221 [00:13<00:36,  4.51it/s][A
 26%|██▌       | 57/221 [00:14<00:40,  4.09it/s][A
 26%|██▌       | 58/221 [00:14<00:43,  3.72it/s][A
 27%|██▋       | 59/221 [00:14<00:44,  3.66it/s][A
 27%|██▋       | 60/221 [00:14<00:39,  4.07it/s][A
 28%|██▊       | 61/221 [00:15<00:38,  4.20it/s][A
 28%|██▊       | 62/221 [00:15<00:37,  4.29it/s][A
 29%|██▊       | 63/221 [00:15<00:30,  5.13it/s][A
 29%|██▉       | 64/221 [00:15<00:35,  4.40it/s][A
 29%|██▉       | 65/221 [00:15<00:30,  5.07it/s][A
 30%|██▉       | 66/221 [00:16<00:49,  3.15it/s][A
 30%|███       | 67/221 [00:17<01:01,  2.50it/s][A
 31%|███       | 68/221 [00:17<00:49,  3.08it/s][A
 31%|███       | 69/221 [00:17<01:06,  2.29it/s][A
 32%|███▏      | 70/221 [00:17<00:51,  2.93it/s][A
 32%|███▏      | 71/221 [00:18<00:49,  3.05it/s][A
 33%|███▎      | 72/221 [00:18<00:55,  2.69it/s][A
 33%|███▎      | 73/221 [00:18<00:45,  3.28it/s][A
 33%|███▎      | 74/221 [00:19<00:36,  4.02it/s][A
 34%|███▍      | 75/221 [00:19<00:35,  4.09it/s][A
 34%|███▍      | 76/221 [00:19<00:34,  4.14it/s][A
 35%|███▍      | 77/221 [00:19<00:35,  4.08it/s][A
 35%|███▌      | 78/221 [00:19<00:30,  4.62it/s][A
 36%|███▌      | 79/221 [00:20<00:53,  2.64it/s][A
 36%|███▌      | 80/221 [00:20<00:46,  3.06it/s][A
 37%|███▋      | 81/221 [00:21<00:38,  3.62it/s][A
 37%|███▋      | 82/221 [00:21<00:44,  3.15it/s][A
 38%|███▊      | 83/221 [00:21<00:44,  3.09it/s][A
 38%|███▊      | 84/221 [00:21<00:38,  3.54it/s][A
 38%|███▊      | 85/221 [00:22<00:32,  4.22it/s][A
 39%|███▉      | 86/221 [00:22<00:29,  4.55it/s][A
 39%|███▉      | 87/221 [00:22<00:33,  4.05it/s][A
 40%|███▉      | 88/221 [00:23<00:40,  3.26it/s][A
 40%|████      | 89/221 [00:23<00:45,  2.93it/s][A
 41%|████      | 90/221 [00:23<00:44,  2.94it/s][A
 41%|████      | 91/221 [00:23<00:37,  3.50it/s][A
 42%|████▏     | 92/221 [00:24<00:39,  3.24it/s][A
 42%|████▏     | 93/221 [00:25<01:00,  2.11it/s][A
 43%|████▎     | 94/221 [00:25<00:57,  2.20it/s][A
 43%|████▎     | 95/221 [00:25<00:51,  2.46it/s][A
 43%|████▎     | 96/221 [00:26<00:42,  2.94it/s][A
 44%|████▍     | 97/221 [00:26<00:36,  3.44it/s][A
 44%|████▍     | 98/221 [00:26<00:37,  3.28it/s][A
 45%|████▍     | 99/221 [00:26<00:33,  3.64it/s][A
 45%|████▌     | 100/221 [00:27<00:32,  3.74it/s][A
 46%|████▌     | 101/221 [00:27<00:35,  3.36it/s][A
 46%|████▌     | 102/221 [00:27<00:44,  2.67it/s][A
 47%|████▋     | 103/221 [00:28<00:38,  3.09it/s][A
 47%|████▋     | 104/221 [00:28<00:34,  3.43it/s][A
 48%|████▊     | 105/221 [00:28<00:31,  3.65it/s][A
 48%|████▊     | 106/221 [00:28<00:34,  3.31it/s][A
 48%|████▊     | 107/221 [00:29<00:32,  3.50it/s][A
 49%|████▉     | 108/221 [00:29<00:31,  3.60it/s][A
 49%|████▉     | 109/221 [00:29<00:27,  4.13it/s][A
 50%|████▉     | 110/221 [00:29<00:27,  4.08it/s][A
 50%|█████     | 111/221 [00:30<00:28,  3.84it/s][A
 51%|█████     | 112/221 [00:30<00:30,  3.56it/s][A
 51%|█████     | 113/221 [00:30<00:26,  4.12it/s][A
 52%|█████▏    | 115/221 [00:30<00:21,  4.83it/s][A
 52%|█████▏    | 116/221 [00:31<00:25,  4.15it/s][A
 53%|█████▎    | 117/221 [00:31<00:24,  4.30it/s][A
 53%|█████▎    | 118/221 [00:31<00:25,  4.09it/s][A
 54%|█████▍    | 119/221 [00:32<00:35,  2.90it/s][A
 54%|█████▍    | 120/221 [00:32<00:32,  3.13it/s][A
 55%|█████▌    | 122/221 [00:33<00:24,  4.00it/s][A
 56%|█████▌    | 123/221 [00:33<00:23,  4.14it/s][A
 56%|█████▌    | 124/221 [00:33<00:21,  4.54it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 126/221 [00:34<00:26,  3.61it/s][A
 57%|█████▋    | 127/221 [00:34<00:27,  3.36it/s][A
 58%|█████▊    | 128/221 [00:34<00:25,  3.59it/s][A
 58%|█████▊    | 129/221 [00:34<00:23,  3.98it/s][A
 59%|█████▉    | 130/221 [00:35<00:21,  4.18it/s][A
 60%|█████▉    | 132/221 [00:35<00:15,  5.69it/s][A
 60%|██████    | 133/221 [00:35<00:19,  4.60it/s][A
 61%|██████    | 134/221 [00:35<00:18,  4.59it/s][A
 61%|██████    | 135/221 [00:36<00:18,  4.63it/s][A
 62%|██████▏   | 136/221 [00:36<00:19,  4.45it/s][A
 62%|██████▏   | 137/221 [00:36<00:17,  4.80it/s][A
 62%|██████▏   | 138/221 [00:36<00:20,  4.09it/s][A
 63%|██████▎   | 139/221 [00:37<00:25,  3.21it/s][A
 63%|██████▎   | 140/221 [00:37<00:23,  3.39it/s][A
 64%|██████▍   | 141/221 [00:37<00:22,  3.59it/s][A
 64%|██████▍   | 142/221 [00:37<00:19,  4.04it/s][A
 65%|██████▍   | 143/221 [00:38<00:27,  2.87it/s][A
 65%|██████▌   | 144/221 [00:38<00:29,  2.57it/s][A
 66%|██████▌   | 145/221 [00:39<00:23,  3.29it/s][A
 67%|██████▋   | 147/221 [00:39<00:18,  3.95it/s][A
 67%|██████▋   | 148/221 [00:40<00:23,  3.08it/s][A
 67%|██████▋   | 149/221 [00:40<00:22,  3.26it/s][A
 68%|██████▊   | 150/221 [00:40<00:21,  3.24it/s][A
 68%|██████▊   | 151/221 [00:40<00:22,  3.17it/s][A
 69%|██████▉   | 152/221 [00:41<00:32,  2.09it/s][A
 69%|██████▉   | 153/221 [00:41<00:26,  2.56it/s][A
 70%|██████▉   | 154/221 [00:42<00:22,  3.02it/s][A
 70%|███████   | 155/221 [00:42<00:20,  3.25it/s][A
 71%|███████   | 156/221 [00:42<00:24,  2.69it/s][A
 71%|███████   | 157/221 [00:43<00:22,  2.84it/s][A
 71%|███████▏  | 158/221 [00:43<00:20,  3.03it/s][A
 72%|███████▏  | 159/221 [00:43<00:17,  3.60it/s][A
 72%|███████▏  | 160/221 [00:43<00:15,  4.05it/s][A
 73%|███████▎  | 161/221 [00:44<00:17,  3.36it/s][A
 73%|███████▎  | 162/221 [00:44<00:16,  3.54it/s][A
 74%|███████▍  | 163/221 [00:44<00:15,  3.71it/s][A
 74%|███████▍  | 164/221 [00:44<00:14,  3.97it/s][A
 75%|███████▍  | 165/221 [00:45<00:14,  3.74it/s][A
 75%|███████▌  | 166/221 [00:45<00:14,  3.81it/s][A
 76%|███████▌  | 167/221 [00:45<00:11,  4.61it/s][A
 76%|███████▌  | 168/221 [00:45<00:13,  4.04it/s][A
 76%|███████▋  | 169/221 [00:46<00:12,  4.23it/s][A
 77%|███████▋  | 170/221 [00:46<00:16,  3.13it/s][A
 77%|███████▋  | 171/221 [00:46<00:13,  3.73it/s][A
 78%|███████▊  | 172/221 [00:47<00:11,  4.18it/s][A
 78%|███████▊  | 173/221 [00:47<00:13,  3.69it/s][A
 79%|███████▊  | 174/221 [00:47<00:15,  3.03it/s][A
 79%|███████▉  | 175/221 [00:48<00:15,  2.91it/s][A
 80%|███████▉  | 176/221 [00:48<00:13,  3.37it/s][A
 80%|████████  | 177/221 [00:48<00:11,  3.69it/s][A
 81%|████████  | 178/221 [00:48<00:11,  3.86it/s][A
 81%|████████  | 179/221 [00:49<00:10,  3.95it/s][A
 81%|████████▏ | 180/221 [00:49<00:09,  4.45it/s][A
 82%|████████▏ | 181/221 [00:49<00:09,  4.26it/s][A
 82%|████████▏ | 182/221 [00:49<00:10,  3.86it/s][A
 83%|████████▎ | 183/221 [00:50<00:09,  4.01it/s][A
 83%|████████▎ | 184/221 [00:50<00:08,  4.56it/s][A
 84%|████████▎ | 185/221 [00:50<00:07,  4.94it/s][A
 84%|████████▍ | 186/221 [00:50<00:09,  3.76it/s][A
 85%|████████▍ | 187/221 [00:51<00:09,  3.71it/s][A
 85%|████████▌ | 188/221 [00:51<00:09,  3.53it/s][A
 86%|████████▌ | 189/221 [00:51<00:09,  3.52it/s][A
 86%|████████▌ | 190/221 [00:52<00:10,  3.05it/s][A
 86%|████████▋ | 191/221 [00:52<00:08,  3.65it/s][A
 87%|████████▋ | 192/221 [00:52<00:09,  3.13it/s][A
 87%|████████▋ | 193/221 [00:52<00:07,  3.82it/s][A
 88%|████████▊ | 194/221 [00:53<00:07,  3.59it/s][A
 88%|████████▊ | 195/221 [00:53<00:07,  3.68it/s][A
 89%|████████▊ | 196/221 [00:53<00:07,  3.34it/s][A
 89%|████████▉ | 197/221 [00:53<00:06,  3.72it/s][A
 90%|████████▉ | 198/221 [00:54<00:08,  2.86it/s][A
 90%|█████████ | 199/221 [00:54<00:07,  3.02it/s][A
 90%|█████████ | 200/221 [00:55<00:07,  2.87it/s][A
 91%|█████████ | 201/221 [00:55<00:06,  3.15it/s][A
 91%|█████████▏| 202/221 [00:55<00:06,  3.02it/s][A
 92%|█████████▏| 203/221 [00:55<00:05,  3.59it/s][A
 92%|█████████▏| 204/221 [00:56<00:07,  2.42it/s][A
 93%|█████████▎| 205/221 [00:56<00:05,  3.06it/s][A
 93%|█████████▎| 206/221 [00:57<00:04,  3.03it/s][A
 94%|█████████▎| 207/221 [00:57<00:03,  3.56it/s][A
 94%|█████████▍| 208/221 [00:57<00:03,  3.80it/s][A
 95%|█████████▍| 209/221 [00:57<00:03,  3.58it/s][A
 95%|█████████▌| 210/221 [00:57<00:02,  4.11it/s][A
 95%|█████████▌| 211/221 [00:58<00:02,  3.52it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  3.52it/s][A
 96%|█████████▋| 213/221 [00:58<00:02,  3.81it/s][A
 97%|█████████▋| 214/221 [00:59<00:02,  2.80it/s][A
 97%|█████████▋| 215/221 [00:59<00:01,  3.07it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  3.03it/s][A
 98%|█████████▊| 217/221 [01:00<00:01,  3.18it/s][A
 99%|█████████▊| 218/221 [01:00<00:00,  3.12it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  2.95it/s][A
100%|█████████▉| 220/221 [01:01<00:00,  3.10it/s][A
100%|██████████| 221/221 [01:01<00:00,  3.05it/s][A100%|██████████| 221/221 [01:01<00:00,  3.59it/s]
09/09/2024 18:56:49 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 649--===========

09/09/2024 18:56:49 - INFO - __main__ -   {'area_r1': 31.2, 'area_recall': '31.2/54.8/63.9', 'area_ravg': 50.0}
09/09/2024 18:56:49 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 649--===========

09/09/2024 18:56:49 - INFO - __main__ -   {'forward_r1': 33.8, 'forward_recall': '33.8/59.8/70.5', 'forward_ravg': 54.7}
09/09/2024 18:56:49 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 649--===========

09/09/2024 18:56:49 - INFO - __main__ -   {'area_video_r1': 37.6, 'area_video_recall': '37.6/67.9/78.4', 'area_video_ravg': 61.3}
09/09/2024 18:56:49 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 299=======

09/09/2024 18:56:49 - INFO - __main__ -   {'area_video_r1': 40.6, 'area_video_recall': '40.6/66.7/79.0', 'area_video_ravg': 62.1}
09/09/2024 18:56:49 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 649--===========

09/09/2024 18:56:49 - INFO - __main__ -   {'area_video_r1': 51.1, 'area_video_recall': '51.1/72.1/79.2', 'area_video_ravg': 67.5, 'area_video_back_r1': 49.8, 'area_video_back_recall': '49.8/72.7/80.0', 'area_video_back_ravg': 67.5}
09/09/2024 18:56:49 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 18:56:49 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 18:56:49 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 649--===========

09/09/2024 18:56:49 - INFO - __main__ -   {'video_r1': 42.4, 'video_recall': '42.4/70.1/80.3', 'video_ravg': 64.3}
09/09/2024 18:56:49 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 18:56:49 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 18:56:49 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 649--===========

09/09/2024 18:56:49 - INFO - __main__ -   {'video_r1': 51.9, 'video_recall': '51.9/75.6/83.1', 'video_ravg': 70.2}
09/09/2024 18:56:49 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 599=======

09/09/2024 18:56:49 - INFO - __main__ -   {'video_r1': 52.7, 'video_recall': '52.7/76.1/82.8', 'video_ravg': 70.6}
09/09/2024 18:57:09 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.6715689897537231, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.02590535208582878, 'loss_ret%tv%ta--finetune_area/loss_area': 1.1899795532226562, 'loss_ret%tv%ta--finetune_area/total_loss': 2.887454032897949}
 33%|███▎      | 650/1945 [3:31:43<43:19:11, 120.43s/it] 33%|███▎      | 651/1945 [3:31:47<30:44:01, 85.50s/it]  34%|███▎      | 652/1945 [3:31:52<21:59:25, 61.23s/it][h264 @ 0x556e4166ea40] mmco: unref short failure
 34%|███▎      | 653/1945 [3:31:57<15:54:36, 44.33s/it][h264 @ 0x55b7ec722b80] mmco: unref short failure
[h264 @ 0x55e504647980] mmco: unref short failure
 34%|███▎      | 654/1945 [3:32:02<11:42:54, 32.67s/it][h264 @ 0x556e713d8600] mmco: unref short failure
[h264 @ 0x556e713d8600] mmco: unref short failure
[h264 @ 0x556e713d8600] mmco: unref short failure
[h264 @ 0x556e713d8600] mmco: unref short failure
 34%|███▎      | 655/1945 [3:32:08<8:48:57, 24.60s/it] [h264 @ 0x55b7ed832640] mmco: unref short failure
[h264 @ 0x556e7046a6c0] mmco: unref short failure
[h264 @ 0x556e7046a6c0] mmco: unref short failure
[h264 @ 0x556e7418f500] mmco: unref short failure
[h264 @ 0x556e7418f500] mmco: unref short failure
 34%|███▎      | 656/1945 [3:32:15<6:56:15, 19.38s/it][h264 @ 0x556e53432440] mmco: unref short failure
[h264 @ 0x55e51436e300] mmco: unref short failure
 34%|███▍      | 657/1945 [3:32:23<5:42:59, 15.98s/it][h264 @ 0x55e5077502c0] mmco: unref short failure
[h264 @ 0x55e5077502c0] mmco: unref short failure
 34%|███▍      | 658/1945 [3:32:32<4:56:33, 13.83s/it][h264 @ 0x556e5658d2c0] mmco: unref short failure
[h264 @ 0x556e5658d2c0] mmco: unref short failure
 34%|███▍      | 659/1945 [3:32:39<4:15:14, 11.91s/it][h264 @ 0x55b7e0d0fbc0] mmco: unref short failure
[h264 @ 0x55b7e0d0fbc0] mmco: unref short failure
 34%|███▍      | 660/1945 [3:32:47<3:45:09, 10.51s/it][h264 @ 0x556e60fb9d40] mmco: unref short failure
[h264 @ 0x556e5f21e8c0] mmco: unref short failure
[h264 @ 0x556e5f21e8c0] mmco: unref short failure
 34%|███▍      | 661/1945 [3:32:54<3:24:48,  9.57s/it][h264 @ 0x556e66132dc0] mmco: unref short failure
[h264 @ 0x556e66132dc0] mmco: unref short failure
 34%|███▍      | 662/1945 [3:33:01<3:09:19,  8.85s/it][h264 @ 0x55b7e445e380] mmco: unref short failure
[h264 @ 0x556e45251540] mmco: unref short failure
[h264 @ 0x556e45251540] mmco: unref short failure
[h264 @ 0x55b7d36a4880] mmco: unref short failure
 34%|███▍      | 663/1945 [3:33:09<3:03:59,  8.61s/it][h264 @ 0x556e6d118b00] mmco: unref short failure
[h264 @ 0x556e6d118b00] mmco: unref short failure
 34%|███▍      | 664/1945 [3:33:18<3:04:08,  8.62s/it] 34%|███▍      | 665/1945 [3:33:25<2:54:54,  8.20s/it][h264 @ 0x556e7131d900] mmco: unref short failure
[h264 @ 0x556e7131d900] mmco: unref short failure
[h264 @ 0x55e50773b4c0] mmco: unref short failure
[h264 @ 0x55e50773b4c0] mmco: unref short failure
[h264 @ 0x55b7e842a340] mmco: unref short failure
 34%|███▍      | 666/1945 [3:33:32<2:49:18,  7.94s/it][h264 @ 0x55b7ddffc940] mmco: unref short failure
[h264 @ 0x55b7ddffc940] mmco: unref short failure
 34%|███▍      | 667/1945 [3:33:48<3:36:32, 10.17s/it][h264 @ 0x556e59b6a040] mmco: unref short failure
[h264 @ 0x556e59b6a040] mmco: unref short failure
 34%|███▍      | 668/1945 [3:33:56<3:21:38,  9.47s/it][h264 @ 0x55b7cdd1d7c0] mmco: unref short failure
[h264 @ 0x55b7e6918b80] mmco: unref short failure
[h264 @ 0x55b7e6918b80] mmco: unref short failure
[h264 @ 0x55e51a2e6d00] mmco: unref short failure
 34%|███▍      | 669/1945 [3:34:08<3:41:55, 10.44s/it][h264 @ 0x556e56cee380] mmco: unref short failure
[h264 @ 0x556e56cee380] mmco: unref short failure
[h264 @ 0x556e56cee380] mmco: unref short failure
[h264 @ 0x556e56cee380] mmco: unref short failure
 34%|███▍      | 670/1945 [3:34:16<3:21:46,  9.50s/it][h264 @ 0x556e5a16e080] mmco: unref short failure
 34%|███▍      | 671/1945 [3:34:23<3:08:31,  8.88s/it][h264 @ 0x556e694ab140] mmco: unref short failure
 35%|███▍      | 672/1945 [3:34:31<3:00:37,  8.51s/it] 35%|███▍      | 673/1945 [3:34:38<2:54:20,  8.22s/it][h264 @ 0x55b7cc825dc0] mmco: unref short failure
[h264 @ 0x55b7cc825dc0] mmco: unref short failure
[h264 @ 0x556e68696800] mmco: unref short failure
[h264 @ 0x556e68696800] mmco: unref short failure
[h264 @ 0x556e42144980] mmco: unref short failure
[h264 @ 0x556e42144980] mmco: unref short failure
[h264 @ 0x556e5eedea80] mmco: unref short failure
[h264 @ 0x55e51c42f600] mmco: unref short failure
[h264 @ 0x55e51c42f600] mmco: unref short failure
[h264 @ 0x556e59129280] mmco: unref short failure
[h264 @ 0x556e59129280] mmco: unref short failure
[h264 @ 0x556e59129280] mmco: unref short failure
[h264 @ 0x556e59129280] mmco: unref short failure
[h264 @ 0x55b7cf7d10c0] mmco: unref short failure
[h264 @ 0x55b7cf7d10c0] mmco: unref short failure
[h264 @ 0x55e50f692480] mmco: unref short failure
[h264 @ 0x556e4ec51440] mmco: unref short failure
[h264 @ 0x556e432ce040] mmco: unref short failure
 35%|███▍      | 674/1945 [3:35:20<6:29:19, 18.38s/it][h264 @ 0x556e59129080] mmco: unref short failure
[h264 @ 0x556e43b4ed80] mmco: unref short failure
[h264 @ 0x55b7d5790c00] mmco: unref short failure
[h264 @ 0x556e5f403840] mmco: unref short failure
[h264 @ 0x556e5f403840] mmco: unref short failure
[h264 @ 0x556e5f403840] mmco: unref short failure
[h264 @ 0x556e5f403840] mmco: unref short failure
[h264 @ 0x55e511d88a40] mmco: unref short failure
[h264 @ 0x55e50ccc4180] mmco: unref short failure
 35%|███▍      | 675/1945 [3:35:49<7:35:21, 21.51s/it][h264 @ 0x55e50c403f00] mmco: unref short failure
[h264 @ 0x55e50c403f00] mmco: unref short failure
[h264 @ 0x55b7d8e6fb40] mmco: unref short failure
[h264 @ 0x55b7d8e6fb40] mmco: unref short failure
 35%|███▍      | 676/1945 [3:35:57<6:08:45, 17.44s/it][h264 @ 0x556e464d0c00] mmco: unref short failure
[h264 @ 0x556e464d0c00] mmco: unref short failure
[h264 @ 0x55e514a41fc0] mmco: unref short failure
 35%|███▍      | 677/1945 [3:36:08<5:26:57, 15.47s/it][h264 @ 0x55b7e6918980] mmco: unref short failure
[h264 @ 0x55e52030af00] mmco: unref short failure
[h264 @ 0x55e52030af00] mmco: unref short failure
[h264 @ 0x55e52030af00] mmco: unref short failure
[h264 @ 0x55e52030af00] mmco: unref short failure
[h264 @ 0x556e462473c0] mmco: unref short failure
[h264 @ 0x556e462473c0] mmco: unref short failure
[h264 @ 0x55e516f3e140] mmco: unref short failure
 35%|███▍      | 678/1945 [3:36:15<4:34:34, 13.00s/it][h264 @ 0x55e516f3e140] mmco: unref short failure
 35%|███▍      | 679/1945 [3:36:27<4:26:50, 12.65s/it][h264 @ 0x556e539b5400] mmco: unref short failure
[h264 @ 0x556e539b5400] mmco: unref short failure
[h264 @ 0x556e5401cd80] mmco: unref short failure
 35%|███▍      | 680/1945 [3:36:34<3:54:00, 11.10s/it][h264 @ 0x556e546052c0] mmco: unref short failure
 35%|███▌      | 681/1945 [3:36:43<3:34:46, 10.20s/it][h264 @ 0x556e590fe880] mmco: unref short failure
[h264 @ 0x556e590fe880] mmco: unref short failure
[h264 @ 0x55e504e0d400] mmco: unref short failure
[h264 @ 0x55e4fff27040] mmco: unref short failure
[h264 @ 0x556e521f2400] mmco: unref short failure
[h264 @ 0x556e521f2400] mmco: unref short failure
[h264 @ 0x556e521f2400] mmco: unref short failure
[h264 @ 0x556e521f2400] mmco: unref short failure
[h264 @ 0x556e5b6e6d00] mmco: unref short failure
[h264 @ 0x55b7d8e6fd80] mmco: unref short failure
[h264 @ 0x55b7d8e6fd80] mmco: unref short failure
[h264 @ 0x55b7e1cdbc80] mmco: unref short failure
[h264 @ 0x556e6626f8c0] mmco: unref short failure
[h264 @ 0x556e6626f8c0] mmco: unref short failure
[h264 @ 0x556e6bbf8000] mmco: unref short failure
[h264 @ 0x55b7e531abc0] mmco: unref short failure
[h264 @ 0x55b7d3610280] mmco: unref short failure
[h264 @ 0x55b7cd3a3140] mmco: unref short failure
[h264 @ 0x55b7cd3a3140] mmco: unref short failure
[h264 @ 0x556e700dbbc0] mmco: unref short failure
[h264 @ 0x556e700dbbc0] mmco: unref short failure
 35%|███▌      | 682/1945 [3:37:26<7:06:08, 20.24s/it][h264 @ 0x55e516387a00] mmco: unref short failure
[h264 @ 0x556e4e350100] mmco: unref short failure
[h264 @ 0x556e4e350100] mmco: unref short failure
[h264 @ 0x556e5e201fc0] mmco: unref short failure
[h264 @ 0x556e5e201fc0] mmco: unref short failure
[h264 @ 0x55e4fcdebc80] mmco: unref short failure
[h264 @ 0x556e536835c0] mmco: unref short failure
[h264 @ 0x556e536835c0] mmco: unref short failure
 35%|███▌      | 683/1945 [3:37:52<7:38:58, 21.82s/it][h264 @ 0x556e50d082c0] mmco: unref short failure
[h264 @ 0x55e513be1600] mmco: unref short failure
[h264 @ 0x55e513be1600] mmco: unref short failure
[h264 @ 0x556e63e99800] mmco: unref short failure
[h264 @ 0x556e68696600] mmco: unref short failure
[h264 @ 0x556e68696600] mmco: unref short failure
[h264 @ 0x556e68696600] mmco: unref short failure
[h264 @ 0x556e68696600] mmco: unref short failure
[h264 @ 0x55b7d0d9ec00] mmco: unref short failure
[h264 @ 0x55b7d0d9ec00] mmco: unref short failure
[h264 @ 0x556e70040fc0] mmco: unref short failure
[h264 @ 0x556e70040fc0] mmco: unref short failure
 35%|███▌      | 684/1945 [3:37:59<6:09:33, 17.58s/it][h264 @ 0x556e5c151840] mmco: unref short failure
[h264 @ 0x556e70b2e680] mmco: unref short failure
[h264 @ 0x55b7ed8407c0] mmco: unref short failure
[h264 @ 0x55b7ed8407c0] mmco: unref short failure
 35%|███▌      | 685/1945 [3:38:17<6:11:50, 17.71s/it] 35%|███▌      | 686/1945 [3:38:26<5:12:55, 14.91s/it] 35%|███▌      | 687/1945 [3:38:34<4:31:19, 12.94s/it][h264 @ 0x556e4dde8540] mmco: unref short failure
[h264 @ 0x556e4dde8540] mmco: unref short failure
[h264 @ 0x556e61535f00] mmco: unref short failure
 35%|███▌      | 688/1945 [3:38:42<3:59:15, 11.42s/it][h264 @ 0x556e534090c0] mmco: unref short failure
[h264 @ 0x55b7d1195b40] mmco: unref short failure
[h264 @ 0x55b7d1195b40] mmco: unref short failure
[h264 @ 0x556e53b741c0] mmco: unref short failure
 35%|███▌      | 689/1945 [3:38:50<3:34:20, 10.24s/it][h264 @ 0x55e50832fa40] mmco: unref short failure
[h264 @ 0x55e50832fa40] mmco: unref short failure
[h264 @ 0x55e50832fa40] mmco: unref short failure
[h264 @ 0x556e559fb500] mmco: unref short failure
[h264 @ 0x55b7e0f7a340] mmco: unref short failure
[h264 @ 0x556e5c666800] mmco: unref short failure
[h264 @ 0x556e5c666800] mmco: unref short failure
[h264 @ 0x556e5c666800] mmco: unref short failure
[h264 @ 0x556e5c666800] mmco: unref short failure
[h264 @ 0x556e4aec2680] mmco: unref short failure
[h264 @ 0x556e4aec2680] mmco: unref short failure
[h264 @ 0x556e57208300] mmco: unref short failure
[h264 @ 0x556e55e39880] mmco: unref short failure
[h264 @ 0x55e501dd4b80] mmco: unref short failure
[h264 @ 0x55b7cd3a2f40] mmco: unref short failure
[h264 @ 0x55b7cd3a2f40] mmco: unref short failure
[h264 @ 0x55e5159c7440] mmco: unref short failure
[h264 @ 0x55b7cb967740] mmco: unref short failure
[h264 @ 0x55b7e14e9e40] mmco: unref short failure
[h264 @ 0x55b7e60c9bc0] mmco: unref short failure
[h264 @ 0x556e74f2e680] mmco: unref short failure
[h264 @ 0x556e74f2e680] mmco: unref short failure
[h264 @ 0x556e458847c0] mmco: unref short failure
 35%|███▌      | 690/1945 [3:39:30<6:46:30, 19.43s/it][h264 @ 0x55e4fcdebc80] mmco: unref short failure
[h264 @ 0x55e4fcdebc80] mmco: unref short failure
 36%|███▌      | 691/1945 [3:39:52<6:58:15, 20.01s/it][h264 @ 0x55e517c50700] mmco: unref short failure
[h264 @ 0x55e517c50700] mmco: unref short failure
[h264 @ 0x55e50e22da40] mmco: unref short failure
[h264 @ 0x55e50e22da40] mmco: unref short failure
 36%|███▌      | 692/1945 [3:40:03<6:03:11, 17.39s/it][h264 @ 0x55e50e08ac40] mmco: unref short failure
[h264 @ 0x55e50e08ac40] mmco: unref short failure
[h264 @ 0x556e57cbbd40] mmco: unref short failure
[h264 @ 0x556e57cbbd40] mmco: unref short failure
 36%|███▌      | 693/1945 [3:40:23<6:18:20, 18.13s/it][h264 @ 0x55e507d3c7c0] mmco: unref short failure
[h264 @ 0x556e5f528240] mmco: unref short failure
 36%|███▌      | 694/1945 [3:40:30<5:11:19, 14.93s/it][h264 @ 0x55e52030af00] mmco: unref short failure
[h264 @ 0x55e52030af00] mmco: unref short failure
[h264 @ 0x55e52030af00] mmco: unref short failure
[h264 @ 0x55e52030af00] mmco: unref short failure
 36%|███▌      | 695/1945 [3:40:38<4:24:44, 12.71s/it][h264 @ 0x556e59f074c0] mmco: unref short failure
[h264 @ 0x556e5bcb2ac0] mmco: unref short failure
[h264 @ 0x556e5bcb2ac0] mmco: unref short failure
[h264 @ 0x556e59f074c0] mmco: unref short failure
[h264 @ 0x556e59f074c0] mmco: unref short failure
[h264 @ 0x55b7d6ea0a80] mmco: unref short failure
[h264 @ 0x55b7d6ea0a80] mmco: unref short failure
[h264 @ 0x55e504e0d600] mmco: unref short failure
 36%|███▌      | 696/1945 [3:40:45<3:51:49, 11.14s/it] 36%|███▌      | 697/1945 [3:40:52<3:23:03,  9.76s/it][h264 @ 0x55b7d492ed00] mmco: unref short failure
[h264 @ 0x55b7ed9c14c0] mmco: unref short failure
[h264 @ 0x556e5efa77c0] mmco: unref short failure
[h264 @ 0x556e5efa77c0] mmco: unref short failure
[h264 @ 0x556e438c51c0] mmco: unref short failure
[h264 @ 0x556e438c51c0] mmco: unref short failure
[h264 @ 0x556e479c9bc0] mmco: unref short failure
[h264 @ 0x55b7cc448840] mmco: unref short failure
[h264 @ 0x55b7cc448840] mmco: unref short failure
[h264 @ 0x556e70040d40] mmco: unref short failure
[h264 @ 0x556e70040d40] mmco: unref short failure
[h264 @ 0x556e42e6a200] mmco: unref short failure
[h264 @ 0x556e42e6a200] mmco: unref short failure
 36%|███▌      | 698/1945 [3:41:39<7:12:56, 20.83s/it][h264 @ 0x556e4ede3680] mmco: unref short failure
[h264 @ 0x556e4ede3680] mmco: unref short failure
[h264 @ 0x55b7d6736880] mmco: unref short failure
[h264 @ 0x55b7d6736880] mmco: unref short failure
 36%|███▌      | 699/1945 [3:41:54<6:38:31, 19.19s/it]09/09/2024 19:07:22 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 19:07:23 - INFO - __main__ -   start running ret%tv validation...
[h264 @ 0x55e5176c3380] mmco: unref short failure
[h264 @ 0x55e5073b6080] mmco: unref short failure
[h264 @ 0x55e5073b6080] mmco: unref short failure
[h264 @ 0x556e416443c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b7e1bc46c0] mmco: unref short failure
[h264 @ 0x556e498e9e00] mmco: unref short failure
[h264 @ 0x55e50c1e3480] mmco: unref short failure
[h264 @ 0x55e50c1e3480] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e51898e540] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e51898e540] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e727f40c0] mmco: unref short failure
[h264 @ 0x556e727f40c0] mmco: unref short failure
[h264 @ 0x556e727f40c0] mmco: unref short failure
[h264 @ 0x556e727f40c0] mmco: unref short failure
[h264 @ 0x556e6bb4ea40] mmco: unref short failure
[h264 @ 0x556e6bb4ea40] mmco: unref short failure
[h264 @ 0x55b7e1d8dc80] mmco: unref short failure
[h264 @ 0x55e50b6bee80] mmco: unref short failure
[h264 @ 0x55e50b6bee80] mmco: unref short failure
[h264 @ 0x55e50de94800] mmco: unref short failure
[h264 @ 0x55e50de94800] mmco: unref short failure
[h264 @ 0x55e5083f6880] mmco: unref short failure
[h264 @ 0x55e5083f6880] mmco: unref short failure
[h264 @ 0x55e50e13bb00] mmco: unref short failure
[h264 @ 0x556e4a043800] mmco: unref short failure
[h264 @ 0x55e51fe1d480] mmco: unref short failure
[h264 @ 0x55e51fe1d480] mmco: unref short failure
[h264 @ 0x556e69a68880] mmco: unref short failure
[h264 @ 0x556e69a68880] mmco: unref short failure
[h264 @ 0x55b7e0d86540] mmco: unref short failure
[h264 @ 0x55b7e0d86540] mmco: unref short failure
[h264 @ 0x55b7e0d86540] mmco: unref short failure
[h264 @ 0x55b7e0d86540] mmco: unref short failure
[h264 @ 0x556e4485fc80] mmco: unref short failure
[h264 @ 0x556e4485fc80] mmco: unref short failure
[h264 @ 0x556e4485fc80] mmco: unref short failure
[h264 @ 0x556e49a06f40] mmco: unref short failure
[h264 @ 0x556e49a06f40] mmco: unref short failure
[h264 @ 0x556e5831ce40] mmco: unref short failure
[h264 @ 0x556e5831ce40] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  1%|          | 2/221 [00:00<01:01,  3.58it/s][A
  1%|▏         | 3/221 [00:00<00:55,  3.92it/s][A
  2%|▏         | 5/221 [00:01<00:42,  5.12it/s][A
  3%|▎         | 7/221 [00:01<00:36,  5.87it/s][A
  4%|▎         | 8/221 [00:01<00:36,  5.91it/s][A
  4%|▍         | 9/221 [00:01<00:36,  5.74it/s][A[h264 @ 0x556e6e9d2840] mmco: unref short failure
[h264 @ 0x556e6e9d2840] mmco: unref short failure
[h264 @ 0x556e6e9d2840] mmco: unref short failure
[h264 @ 0x556e6e9d2840] mmco: unref short failure
[h264 @ 0x556e6e9d2840] mmco: unref short failure
[h264 @ 0x556e6e9d2840] mmco: unref short failure
[h264 @ 0x55e50d273500] mmco: unref short failure
[h264 @ 0x55e50d273500] mmco: unref short failure

  5%|▍         | 10/221 [00:03<02:12,  1.59it/s][A
  5%|▍         | 11/221 [00:03<01:42,  2.05it/s][A
  5%|▌         | 12/221 [00:03<01:19,  2.64it/s][A
  6%|▌         | 13/221 [00:04<01:13,  2.81it/s][A[h264 @ 0x55e505ab4a40] mmco: unref short failure

  6%|▋         | 14/221 [00:07<04:09,  1.21s/it][A
  7%|▋         | 15/221 [00:07<03:09,  1.09it/s][A
  7%|▋         | 16/221 [00:08<03:00,  1.14it/s][A
  8%|▊         | 17/221 [00:09<03:20,  1.02it/s][A
  8%|▊         | 18/221 [00:09<02:30,  1.35it/s][A
  9%|▊         | 19/221 [00:09<01:54,  1.76it/s][A
  9%|▉         | 20/221 [00:10<01:27,  2.29it/s][A
 10%|▉         | 21/221 [00:10<01:16,  2.61it/s][A[h264 @ 0x556e58f57e80] mmco: unref short failure
[h264 @ 0x556e58f57e80] mmco: unref short failure
[h264 @ 0x556e58f57e80] mmco: unref short failure
[h264 @ 0x556e58f57e80] mmco: unref short failure

 10%|▉         | 22/221 [00:10<01:05,  3.02it/s][A[h264 @ 0x556e58f57e80] mmco: unref short failure
[h264 @ 0x556e58f57e80] mmco: unref short failure

 10%|█         | 23/221 [00:10<00:57,  3.42it/s][A
 11%|█         | 24/221 [00:10<00:49,  4.01it/s][A
 11%|█▏        | 25/221 [00:11<00:43,  4.49it/s][A[h264 @ 0x55b7cc91f9c0] mmco: unref short failure

 12%|█▏        | 26/221 [00:11<00:43,  4.44it/s][A
 13%|█▎        | 28/221 [00:11<00:36,  5.27it/s][A[h264 @ 0x55e50a8ac180] mmco: unref short failure
[h264 @ 0x55e50a8ac180] mmco: unref short failure
[h264 @ 0x55b7df8f4080] mmco: unref short failure
[h264 @ 0x55e51de21240] mmco: unref short failure

 13%|█▎        | 29/221 [00:15<03:34,  1.12s/it][A
 14%|█▎        | 30/221 [00:15<02:46,  1.15it/s][A
 14%|█▍        | 31/221 [00:15<02:10,  1.46it/s][A
 14%|█▍        | 32/221 [00:16<01:39,  1.90it/s][A
 15%|█▍        | 33/221 [00:16<01:57,  1.59it/s][A
 15%|█▌        | 34/221 [00:16<01:28,  2.11it/s][A
 16%|█▌        | 35/221 [00:17<01:09,  2.68it/s][A
 16%|█▋        | 36/221 [00:17<00:56,  3.27it/s][A
 17%|█▋        | 37/221 [00:17<00:46,  3.95it/s][A
 17%|█▋        | 38/221 [00:17<00:44,  4.11it/s][A
 18%|█▊        | 39/221 [00:18<01:14,  2.43it/s][A
 18%|█▊        | 40/221 [00:18<01:09,  2.62it/s][A
 19%|█▊        | 41/221 [00:18<00:54,  3.31it/s][A
 19%|█▉        | 42/221 [00:19<00:52,  3.43it/s][A
 19%|█▉        | 43/221 [00:19<00:47,  3.74it/s][A
 20%|█▉        | 44/221 [00:19<00:42,  4.21it/s][A
 20%|██        | 45/221 [00:19<00:35,  4.98it/s][A
 21%|██        | 46/221 [00:19<00:30,  5.69it/s][A
 21%|██▏       | 47/221 [00:19<00:27,  6.33it/s][A
 22%|██▏       | 48/221 [00:20<00:27,  6.24it/s][A
 22%|██▏       | 49/221 [00:20<00:30,  5.67it/s][A[h264 @ 0x556e6788c6c0] mmco: unref short failure

 23%|██▎       | 50/221 [00:24<03:45,  1.32s/it][A
 23%|██▎       | 51/221 [00:24<02:42,  1.05it/s][A
 24%|██▎       | 52/221 [00:24<02:08,  1.31it/s][A
 24%|██▍       | 53/221 [00:24<01:42,  1.64it/s][A
 24%|██▍       | 54/221 [00:25<01:22,  2.02it/s][A
 25%|██▍       | 55/221 [00:25<01:03,  2.63it/s][A
 25%|██▌       | 56/221 [00:25<00:51,  3.21it/s][A
 26%|██▌       | 57/221 [00:25<00:47,  3.48it/s][A
 26%|██▌       | 58/221 [00:25<00:42,  3.83it/s][A
 27%|██▋       | 59/221 [00:26<00:44,  3.66it/s][A
 27%|██▋       | 60/221 [00:26<00:38,  4.22it/s][A
 28%|██▊       | 61/221 [00:26<00:36,  4.44it/s][A
 28%|██▊       | 62/221 [00:26<00:42,  3.74it/s][A
 29%|██▊       | 63/221 [00:27<00:39,  4.01it/s][A
 29%|██▉       | 64/221 [00:27<00:42,  3.70it/s][A
 30%|██▉       | 66/221 [00:27<00:30,  5.03it/s][A[h264 @ 0x55b7d99a5800] mmco: unref short failure

 30%|███       | 67/221 [00:27<00:27,  5.70it/s][A
 31%|███       | 68/221 [00:27<00:24,  6.20it/s][A
 31%|███       | 69/221 [00:28<00:45,  3.32it/s][A
 32%|███▏      | 70/221 [00:28<00:44,  3.42it/s][A
 32%|███▏      | 71/221 [00:29<00:44,  3.38it/s][A[h264 @ 0x55b7cf0d2b00] mmco: unref short failure
[h264 @ 0x55b7cf0d2b00] mmco: unref short failure

 33%|███▎      | 72/221 [00:29<00:41,  3.56it/s][A
 33%|███▎      | 73/221 [00:29<00:41,  3.58it/s][A
 33%|███▎      | 74/221 [00:29<00:33,  4.33it/s][A
 34%|███▍      | 75/221 [00:30<00:39,  3.68it/s][A
 34%|███▍      | 76/221 [00:30<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:30<00:32,  4.44it/s][A
 35%|███▌      | 78/221 [00:30<00:33,  4.26it/s][A[h264 @ 0x556e529a3ec0] mmco: unref short failure
[h264 @ 0x556e529a3ec0] mmco: unref short failure

 36%|███▌      | 79/221 [00:30<00:30,  4.69it/s][A
 36%|███▌      | 80/221 [00:31<00:28,  4.91it/s][A
 37%|███▋      | 82/221 [00:31<00:24,  5.60it/s][A[h264 @ 0x556e5678d100] mmco: unref short failure
[h264 @ 0x556e5678d100] mmco: unref short failure
[h264 @ 0x556e56d0b340] mmco: unref short failure
[h264 @ 0x556e56d0b340] mmco: unref short failure
[h264 @ 0x556e56d0b340] mmco: unref short failure
[h264 @ 0x556e56d0b340] mmco: unref short failure

 38%|███▊      | 83/221 [00:35<02:37,  1.14s/it][A
 38%|███▊      | 84/221 [00:35<02:03,  1.10it/s][A
 38%|███▊      | 85/221 [00:35<01:34,  1.44it/s][A
 39%|███▉      | 87/221 [00:36<01:08,  1.97it/s][A
 40%|███▉      | 88/221 [00:36<00:55,  2.38it/s][A
 40%|████      | 89/221 [00:36<00:51,  2.58it/s][A
 41%|████      | 90/221 [00:37<00:51,  2.54it/s][A
 41%|████      | 91/221 [00:37<00:46,  2.78it/s][A
 42%|████▏     | 92/221 [00:37<00:41,  3.12it/s][A
 42%|████▏     | 93/221 [00:37<00:33,  3.78it/s][A[h264 @ 0x55e50de66500] mmco: unref short failure
[h264 @ 0x55e50de66500] mmco: unref short failure

 43%|████▎     | 94/221 [00:37<00:30,  4.20it/s][A
 43%|████▎     | 95/221 [00:39<01:14,  1.69it/s][A
 43%|████▎     | 96/221 [00:39<00:57,  2.19it/s][A
 44%|████▍     | 98/221 [00:40<00:47,  2.59it/s][A
 45%|████▌     | 100/221 [00:40<00:33,  3.58it/s][A
 46%|████▌     | 101/221 [00:40<00:29,  4.14it/s][A
 47%|████▋     | 103/221 [00:40<00:21,  5.49it/s][A
 47%|████▋     | 104/221 [00:40<00:19,  5.99it/s][A
 48%|████▊     | 105/221 [00:40<00:19,  5.88it/s][A
 48%|████▊     | 107/221 [00:41<00:16,  6.98it/s][A
 49%|████▉     | 108/221 [00:41<00:18,  6.22it/s][A
 49%|████▉     | 109/221 [00:41<00:20,  5.44it/s][A
 50%|█████     | 111/221 [00:41<00:18,  5.84it/s][A
 51%|█████     | 112/221 [00:42<00:20,  5.44it/s][A
 51%|█████     | 113/221 [00:42<00:21,  4.99it/s][A
 52%|█████▏    | 114/221 [00:43<00:44,  2.39it/s][A
 52%|█████▏    | 116/221 [00:43<00:30,  3.47it/s][A
 53%|█████▎    | 117/221 [00:43<00:26,  3.89it/s][A
 53%|█████▎    | 118/221 [00:44<00:24,  4.13it/s][A
 54%|█████▍    | 120/221 [00:44<00:22,  4.41it/s][A
 55%|█████▍    | 121/221 [00:44<00:24,  4.14it/s][A
 55%|█████▌    | 122/221 [00:44<00:22,  4.36it/s][A
 56%|█████▌    | 123/221 [00:45<00:22,  4.41it/s][A
 56%|█████▌    | 124/221 [00:45<00:24,  4.02it/s][A
 57%|█████▋    | 125/221 [00:45<00:20,  4.76it/s][A
 57%|█████▋    | 126/221 [00:45<00:17,  5.53it/s][A
 57%|█████▋    | 127/221 [00:45<00:18,  5.19it/s][A
 58%|█████▊    | 128/221 [00:46<00:18,  4.91it/s][A
 58%|█████▊    | 129/221 [00:46<00:17,  5.14it/s][A
 59%|█████▉    | 130/221 [00:46<00:19,  4.78it/s][A
 59%|█████▉    | 131/221 [00:46<00:16,  5.42it/s][A
 60%|█████▉    | 132/221 [00:47<00:44,  2.00it/s][A
 60%|██████    | 133/221 [00:48<00:34,  2.54it/s][A
 61%|██████    | 134/221 [00:48<00:29,  2.91it/s][A
 61%|██████    | 135/221 [00:48<00:23,  3.62it/s][A
 62%|██████▏   | 136/221 [00:48<00:19,  4.39it/s][A[h264 @ 0x55e50e0e5f80] mmco: unref short failure

 62%|██████▏   | 138/221 [00:48<00:15,  5.32it/s][A
 63%|██████▎   | 139/221 [00:48<00:14,  5.71it/s][A
 64%|██████▍   | 141/221 [00:49<00:11,  7.08it/s][A
 64%|██████▍   | 142/221 [00:49<00:17,  4.57it/s][A
 65%|██████▍   | 143/221 [00:49<00:15,  5.10it/s][A
 65%|██████▌   | 144/221 [00:49<00:13,  5.82it/s][A
 66%|██████▌   | 145/221 [00:49<00:12,  6.21it/s][A
 66%|██████▌   | 146/221 [00:50<00:10,  6.85it/s][A
 67%|██████▋   | 148/221 [00:50<00:11,  6.59it/s][A
 67%|██████▋   | 149/221 [00:50<00:10,  6.63it/s][A
 68%|██████▊   | 150/221 [00:50<00:10,  6.68it/s][A
 68%|██████▊   | 151/221 [00:51<00:18,  3.80it/s][A
 69%|██████▉   | 152/221 [00:51<00:22,  3.03it/s][A
 69%|██████▉   | 153/221 [00:51<00:20,  3.31it/s][A
 70%|███████   | 155/221 [00:52<00:13,  5.02it/s][A
 71%|███████   | 157/221 [00:52<00:09,  6.41it/s][A
 72%|███████▏  | 159/221 [00:52<00:07,  8.18it/s][A
 73%|███████▎  | 161/221 [00:52<00:06,  9.42it/s][A
 74%|███████▍  | 163/221 [00:52<00:05,  9.99it/s][A
 75%|███████▍  | 165/221 [00:52<00:04, 11.62it/s][A
 76%|███████▌  | 167/221 [00:52<00:04, 13.19it/s][A
 76%|███████▋  | 169/221 [00:53<00:03, 14.34it/s][A[h264 @ 0x55b7e7a03d80] mmco: unref short failure
[h264 @ 0x55b7e7a03d80] mmco: unref short failure

 77%|███████▋  | 171/221 [00:54<00:10,  4.69it/s][A
 78%|███████▊  | 173/221 [00:54<00:09,  5.14it/s][A
 79%|███████▉  | 175/221 [00:56<00:17,  2.69it/s][A
 80%|███████▉  | 176/221 [00:56<00:14,  3.05it/s][A
 81%|████████  | 178/221 [00:56<00:12,  3.53it/s][A
 81%|████████  | 179/221 [00:56<00:10,  3.97it/s][A
 81%|████████▏ | 180/221 [00:57<00:12,  3.34it/s][A
 82%|████████▏ | 182/221 [00:57<00:08,  4.57it/s][A[h264 @ 0x55b7e2bb8d40] mmco: unref short failure

 83%|████████▎ | 184/221 [00:57<00:07,  4.97it/s][A
 84%|████████▍ | 186/221 [00:57<00:05,  6.07it/s][A
 85%|████████▌ | 188/221 [00:58<00:05,  5.69it/s][A
 86%|████████▌ | 189/221 [00:58<00:05,  5.91it/s][A[h264 @ 0x556e7053a180] mmco: unref short failure

 86%|████████▋ | 191/221 [00:58<00:04,  7.43it/s][A
 88%|████████▊ | 194/221 [00:58<00:02,  9.88it/s][A[h264 @ 0x556e56cee380] mmco: unref short failure
[h264 @ 0x556e56cee380] mmco: unref short failure

 89%|████████▊ | 196/221 [01:00<00:09,  2.58it/s][A
 90%|████████▉ | 198/221 [01:01<00:06,  3.35it/s][A
 90%|█████████ | 200/221 [01:01<00:05,  4.18it/s][A
 91%|█████████▏| 202/221 [01:01<00:03,  4.97it/s][A
 92%|█████████▏| 204/221 [01:02<00:04,  3.89it/s][A
 93%|█████████▎| 206/221 [01:02<00:03,  3.85it/s][A
 94%|█████████▎| 207/221 [01:02<00:03,  4.22it/s][A
 94%|█████████▍| 208/221 [01:02<00:02,  4.77it/s][A
 95%|█████████▌| 211/221 [01:03<00:01,  6.09it/s][A
 96%|█████████▋| 213/221 [01:03<00:01,  6.44it/s][A
 97%|█████████▋| 214/221 [01:03<00:01,  6.04it/s][A
 98%|█████████▊| 216/221 [01:03<00:00,  7.09it/s][A
 98%|█████████▊| 217/221 [01:04<00:00,  6.94it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  8.18it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  7.84it/s][A100%|██████████| 221/221 [01:04<00:00,  3.43it/s]
[h264 @ 0x556e56cee380] mmco: unref short failure
[h264 @ 0x55e50ab4d0c0] mmco: unref short failure
[h264 @ 0x55e50ab4d0c0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.78it/s][A
  1%|          | 2/221 [00:00<00:57,  3.78it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.79it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.78it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.78it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.78it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.79it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.79it/s][A
  4%|▍         | 9/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.79it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.78it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.78it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.78it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.78it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.78it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.78it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.78it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.78it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.78it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.78it/s][A
 19%|█▉        | 43/221 [00:11<00:47,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.78it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:14<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:37,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.78it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.79it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.79it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.79it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.78it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.78it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.78it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.78it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.78it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.78it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.78it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.78it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 159/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.78it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.78it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.78it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.78it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.78it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.78it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.78it/s][A
 76%|███████▌  | 168/221 [00:44<00:14,  3.78it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.78it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.78it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.78it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.78it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.78it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.78it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.78it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.78it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.78it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.78it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.79it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.79it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.79it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.78it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [00:56<00:02,  3.78it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.79it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.78it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.78it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.78it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.78it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.78it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.78it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:27,  7.95it/s][A
  1%|          | 2/221 [00:00<00:37,  5.83it/s][A
  1%|▏         | 3/221 [00:00<00:41,  5.22it/s][A
  2%|▏         | 4/221 [00:00<00:35,  6.04it/s][A
  2%|▏         | 5/221 [00:00<00:38,  5.63it/s][A
  3%|▎         | 7/221 [00:01<00:39,  5.47it/s][A
  4%|▎         | 8/221 [00:01<00:45,  4.70it/s][A
  4%|▍         | 9/221 [00:01<00:42,  4.96it/s][A
  5%|▍         | 10/221 [00:02<01:03,  3.33it/s][A
  5%|▍         | 11/221 [00:02<01:00,  3.50it/s][A
  5%|▌         | 12/221 [00:02<00:52,  4.02it/s][A
  6%|▌         | 13/221 [00:03<01:26,  2.41it/s][A
  6%|▋         | 14/221 [00:03<01:06,  3.10it/s][A
  7%|▋         | 15/221 [00:03<01:02,  3.29it/s][A
  7%|▋         | 16/221 [00:04<01:04,  3.16it/s][A
  8%|▊         | 17/221 [00:04<01:18,  2.59it/s][A
  8%|▊         | 18/221 [00:05<01:15,  2.69it/s][A
  9%|▊         | 19/221 [00:05<01:11,  2.84it/s][A
  9%|▉         | 20/221 [00:05<00:56,  3.55it/s][A
 10%|▉         | 21/221 [00:05<00:50,  3.95it/s][A
 10%|▉         | 22/221 [00:05<00:42,  4.67it/s][A
 11%|█         | 24/221 [00:06<00:34,  5.75it/s][A
 11%|█▏        | 25/221 [00:06<00:35,  5.49it/s][A
 12%|█▏        | 26/221 [00:06<00:40,  4.83it/s][A
 12%|█▏        | 27/221 [00:06<00:38,  5.04it/s][A
 13%|█▎        | 28/221 [00:06<00:41,  4.67it/s][A
 13%|█▎        | 29/221 [00:07<00:43,  4.37it/s][A
 14%|█▎        | 30/221 [00:07<00:43,  4.34it/s][A
 14%|█▍        | 31/221 [00:07<00:41,  4.60it/s][A
 14%|█▍        | 32/221 [00:07<00:35,  5.25it/s][A
 15%|█▍        | 33/221 [00:07<00:35,  5.26it/s][A
 15%|█▌        | 34/221 [00:08<00:43,  4.33it/s][A
 16%|█▌        | 35/221 [00:08<00:53,  3.49it/s][A
 16%|█▋        | 36/221 [00:08<00:49,  3.75it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 38/221 [00:09<00:47,  3.86it/s][A
 18%|█▊        | 39/221 [00:09<00:44,  4.08it/s][A
 18%|█▊        | 40/221 [00:10<00:56,  3.21it/s][A
 19%|█▊        | 41/221 [00:10<00:46,  3.89it/s][A
 19%|█▉        | 42/221 [00:10<00:46,  3.88it/s][A
 19%|█▉        | 43/221 [00:10<00:51,  3.48it/s][A
 20%|█▉        | 44/221 [00:11<00:47,  3.71it/s][A
 20%|██        | 45/221 [00:11<00:41,  4.25it/s][A
 21%|██        | 46/221 [00:11<00:41,  4.26it/s][A
 21%|██▏       | 47/221 [00:11<00:41,  4.17it/s][A
 22%|██▏       | 48/221 [00:11<00:39,  4.39it/s][A
 22%|██▏       | 49/221 [00:12<00:40,  4.28it/s][A
 23%|██▎       | 50/221 [00:12<00:43,  3.96it/s][A
 24%|██▎       | 52/221 [00:12<00:35,  4.77it/s][A
 24%|██▍       | 53/221 [00:12<00:33,  5.08it/s][A
 24%|██▍       | 54/221 [00:13<00:44,  3.76it/s][A
 25%|██▍       | 55/221 [00:13<00:39,  4.20it/s][A
 25%|██▌       | 56/221 [00:13<00:36,  4.55it/s][A
 26%|██▌       | 57/221 [00:14<00:38,  4.30it/s][A
 26%|██▌       | 58/221 [00:14<00:41,  3.90it/s][A
 27%|██▋       | 59/221 [00:14<00:40,  3.98it/s][A
 27%|██▋       | 60/221 [00:14<00:35,  4.48it/s][A
 28%|██▊       | 61/221 [00:14<00:34,  4.60it/s][A
 28%|██▊       | 62/221 [00:15<00:34,  4.61it/s][A
 29%|██▉       | 64/221 [00:15<00:34,  4.61it/s][A
 29%|██▉       | 65/221 [00:15<00:29,  5.25it/s][A
 30%|██▉       | 66/221 [00:16<00:43,  3.53it/s][A
 30%|███       | 67/221 [00:16<00:54,  2.82it/s][A
 31%|███       | 68/221 [00:16<00:45,  3.37it/s][A
 31%|███       | 69/221 [00:17<01:00,  2.52it/s][A
 32%|███▏      | 70/221 [00:17<00:47,  3.16it/s][A
 32%|███▏      | 71/221 [00:18<00:48,  3.12it/s][A
 33%|███▎      | 72/221 [00:18<00:55,  2.70it/s][A
 33%|███▎      | 73/221 [00:18<00:45,  3.28it/s][A
 33%|███▎      | 74/221 [00:18<00:36,  3.99it/s][A
 34%|███▍      | 75/221 [00:19<00:36,  4.05it/s][A
 34%|███▍      | 76/221 [00:19<00:35,  4.09it/s][A
 35%|███▍      | 77/221 [00:19<00:34,  4.14it/s][A
 35%|███▌      | 78/221 [00:19<00:31,  4.56it/s][A
 36%|███▌      | 79/221 [00:20<00:53,  2.63it/s][A
 36%|███▌      | 80/221 [00:20<00:46,  3.05it/s][A
 37%|███▋      | 81/221 [00:20<00:40,  3.44it/s][A
 37%|███▋      | 82/221 [00:21<00:45,  3.03it/s][A
 38%|███▊      | 83/221 [00:21<00:45,  3.06it/s][A
 38%|███▊      | 84/221 [00:21<00:39,  3.44it/s][A
 38%|███▊      | 85/221 [00:21<00:34,  3.96it/s][A
 39%|███▉      | 86/221 [00:22<00:30,  4.36it/s][A
 39%|███▉      | 87/221 [00:22<00:31,  4.20it/s][A
 40%|███▉      | 88/221 [00:22<00:41,  3.22it/s][A
 40%|████      | 89/221 [00:23<00:46,  2.82it/s][A
 41%|████      | 90/221 [00:23<00:43,  3.00it/s][A
 41%|████      | 91/221 [00:23<00:36,  3.56it/s][A
 42%|████▏     | 92/221 [00:24<00:37,  3.46it/s][A
 42%|████▏     | 93/221 [00:24<00:57,  2.22it/s][A
 43%|████▎     | 94/221 [00:25<00:56,  2.25it/s][A
 43%|████▎     | 95/221 [00:25<00:50,  2.49it/s][A
 43%|████▎     | 96/221 [00:25<00:41,  2.98it/s][A
 44%|████▍     | 97/221 [00:26<00:36,  3.44it/s][A
 44%|████▍     | 98/221 [00:26<00:36,  3.35it/s][A
 45%|████▍     | 99/221 [00:26<00:33,  3.63it/s][A
 45%|████▌     | 100/221 [00:26<00:32,  3.70it/s][A
 46%|████▌     | 101/221 [00:27<00:37,  3.18it/s][A
 46%|████▌     | 102/221 [00:27<00:46,  2.54it/s][A
 47%|████▋     | 103/221 [00:28<00:40,  2.90it/s][A
 47%|████▋     | 104/221 [00:28<00:37,  3.13it/s][A
 48%|████▊     | 105/221 [00:28<00:34,  3.35it/s][A
 48%|████▊     | 106/221 [00:28<00:35,  3.20it/s][A
 48%|████▊     | 107/221 [00:29<00:32,  3.51it/s][A
 49%|████▉     | 108/221 [00:29<00:31,  3.62it/s][A
 49%|████▉     | 109/221 [00:29<00:27,  4.07it/s][A
 50%|████▉     | 110/221 [00:29<00:26,  4.16it/s][A
 50%|█████     | 111/221 [00:30<00:29,  3.70it/s][A
 51%|█████     | 112/221 [00:30<00:30,  3.55it/s][A
 51%|█████     | 113/221 [00:30<00:26,  4.06it/s][A
 52%|█████▏    | 114/221 [00:30<00:21,  4.93it/s][A
 52%|█████▏    | 115/221 [00:30<00:22,  4.76it/s][A
 52%|█████▏    | 116/221 [00:31<00:26,  3.94it/s][A
 53%|█████▎    | 117/221 [00:31<00:24,  4.17it/s][A
 53%|█████▎    | 118/221 [00:31<00:25,  3.98it/s][A
 54%|█████▍    | 119/221 [00:32<00:34,  2.93it/s][A
 54%|█████▍    | 120/221 [00:32<00:30,  3.32it/s][A
 55%|█████▌    | 122/221 [00:32<00:23,  4.16it/s][A
 56%|█████▌    | 123/221 [00:33<00:23,  4.10it/s][A
 56%|█████▌    | 124/221 [00:33<00:20,  4.64it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.81it/s][A
 57%|█████▋    | 126/221 [00:33<00:26,  3.54it/s][A
 57%|█████▋    | 127/221 [00:34<00:28,  3.33it/s][A
 58%|█████▊    | 128/221 [00:34<00:25,  3.59it/s][A
 58%|█████▊    | 129/221 [00:34<00:21,  4.22it/s][A
 59%|█████▉    | 130/221 [00:34<00:20,  4.34it/s][A
 60%|█████▉    | 132/221 [00:35<00:14,  6.05it/s][A
 60%|██████    | 133/221 [00:35<00:18,  4.87it/s][A
 61%|██████    | 134/221 [00:35<00:17,  4.88it/s][A
 61%|██████    | 135/221 [00:35<00:17,  4.78it/s][A
 62%|██████▏   | 136/221 [00:36<00:18,  4.60it/s][A
 62%|██████▏   | 137/221 [00:36<00:17,  4.92it/s][A
 62%|██████▏   | 138/221 [00:36<00:19,  4.28it/s][A
 63%|██████▎   | 139/221 [00:36<00:24,  3.33it/s][A
 63%|██████▎   | 140/221 [00:37<00:23,  3.47it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.65it/s][A
 64%|██████▍   | 142/221 [00:37<00:19,  4.09it/s][A
 65%|██████▍   | 143/221 [00:38<00:26,  2.93it/s][A
 65%|██████▌   | 144/221 [00:38<00:29,  2.60it/s][A
 66%|██████▌   | 145/221 [00:38<00:22,  3.32it/s][A
 67%|██████▋   | 147/221 [00:39<00:18,  3.99it/s][A
 67%|██████▋   | 148/221 [00:39<00:24,  2.96it/s][A
 67%|██████▋   | 149/221 [00:40<00:22,  3.21it/s][A
 68%|██████▊   | 150/221 [00:40<00:22,  3.16it/s][A
 68%|██████▊   | 151/221 [00:40<00:22,  3.05it/s][A
 69%|██████▉   | 152/221 [00:41<00:31,  2.20it/s][A
 69%|██████▉   | 153/221 [00:41<00:25,  2.67it/s][A
 70%|██████▉   | 154/221 [00:41<00:21,  3.09it/s][A
 70%|███████   | 155/221 [00:42<00:20,  3.30it/s][A
 71%|███████   | 156/221 [00:42<00:23,  2.74it/s][A
 71%|███████   | 157/221 [00:42<00:21,  2.92it/s][A
 71%|███████▏  | 158/221 [00:43<00:19,  3.16it/s][A
 72%|███████▏  | 159/221 [00:43<00:16,  3.66it/s][A
 72%|███████▏  | 160/221 [00:43<00:14,  4.19it/s][A
 73%|███████▎  | 161/221 [00:43<00:18,  3.26it/s][A
 73%|███████▎  | 162/221 [00:44<00:17,  3.40it/s][A
 74%|███████▍  | 163/221 [00:44<00:16,  3.60it/s][A
 74%|███████▍  | 164/221 [00:44<00:15,  3.72it/s][A
 75%|███████▍  | 165/221 [00:45<00:15,  3.61it/s][A
 75%|███████▌  | 166/221 [00:45<00:14,  3.71it/s][A
 76%|███████▌  | 167/221 [00:45<00:11,  4.51it/s][A
 76%|███████▌  | 168/221 [00:45<00:13,  3.95it/s][A
 76%|███████▋  | 169/221 [00:45<00:12,  4.13it/s][A
 77%|███████▋  | 170/221 [00:46<00:16,  3.01it/s][A
 77%|███████▋  | 171/221 [00:46<00:13,  3.58it/s][A
 78%|███████▊  | 172/221 [00:46<00:11,  4.24it/s][A
 78%|███████▊  | 173/221 [00:47<00:12,  3.85it/s][A
 79%|███████▊  | 174/221 [00:47<00:14,  3.25it/s][A
 79%|███████▉  | 175/221 [00:47<00:14,  3.12it/s][A
 80%|███████▉  | 176/221 [00:48<00:12,  3.49it/s][A
 80%|████████  | 177/221 [00:48<00:11,  3.72it/s][A
 81%|████████  | 178/221 [00:48<00:10,  3.99it/s][A
 81%|████████  | 179/221 [00:48<00:10,  4.05it/s][A
 81%|████████▏ | 180/221 [00:48<00:08,  4.56it/s][A
 82%|████████▏ | 181/221 [00:49<00:09,  4.22it/s][A
 82%|████████▏ | 182/221 [00:49<00:10,  3.84it/s][A
 83%|████████▎ | 183/221 [00:49<00:10,  3.70it/s][A
 83%|████████▎ | 184/221 [00:49<00:08,  4.28it/s][A
 84%|████████▎ | 185/221 [00:50<00:07,  4.59it/s][A
 84%|████████▍ | 186/221 [00:50<00:09,  3.59it/s][A
 85%|████████▍ | 187/221 [00:50<00:09,  3.64it/s][A
 85%|████████▌ | 188/221 [00:51<00:09,  3.51it/s][A
 86%|████████▌ | 189/221 [00:51<00:09,  3.50it/s][A
 86%|████████▌ | 190/221 [00:51<00:10,  2.92it/s][A
 86%|████████▋ | 191/221 [00:52<00:08,  3.50it/s][A
 87%|████████▋ | 192/221 [00:52<00:09,  3.06it/s][A
 87%|████████▋ | 193/221 [00:52<00:07,  3.76it/s][A
 88%|████████▊ | 194/221 [00:52<00:07,  3.48it/s][A
 88%|████████▊ | 195/221 [00:53<00:07,  3.56it/s][A
 89%|████████▊ | 196/221 [00:53<00:07,  3.49it/s][A
 89%|████████▉ | 197/221 [00:53<00:06,  3.84it/s][A
 90%|████████▉ | 198/221 [00:54<00:07,  2.90it/s][A
 90%|█████████ | 199/221 [00:54<00:07,  3.13it/s][A
 90%|█████████ | 200/221 [00:54<00:07,  2.95it/s][A
 91%|█████████ | 201/221 [00:55<00:06,  3.16it/s][A
 91%|█████████▏| 202/221 [00:55<00:06,  3.03it/s][A
 92%|█████████▏| 203/221 [00:55<00:05,  3.56it/s][A
 92%|█████████▏| 204/221 [00:56<00:06,  2.57it/s][A
 93%|█████████▎| 205/221 [00:56<00:04,  3.23it/s][A
 93%|█████████▎| 206/221 [00:56<00:04,  3.11it/s][A
 94%|█████████▎| 207/221 [00:56<00:03,  3.56it/s][A
 94%|█████████▍| 208/221 [00:57<00:03,  3.76it/s][A
 95%|█████████▍| 209/221 [00:57<00:03,  3.37it/s][A
 95%|█████████▌| 210/221 [00:57<00:02,  3.79it/s][A
 95%|█████████▌| 211/221 [00:58<00:02,  3.39it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  3.39it/s][A
 96%|█████████▋| 213/221 [00:58<00:02,  3.75it/s][A
 97%|█████████▋| 214/221 [00:59<00:02,  2.78it/s][A
 97%|█████████▋| 215/221 [00:59<00:02,  2.97it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  3.04it/s][A
 98%|█████████▊| 217/221 [00:59<00:01,  3.35it/s][A
 99%|█████████▊| 218/221 [01:00<00:00,  3.24it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  3.13it/s][A
100%|█████████▉| 220/221 [01:00<00:00,  3.23it/s][A
100%|██████████| 221/221 [01:01<00:00,  3.06it/s][A100%|██████████| 221/221 [01:01<00:00,  3.60it/s]
09/09/2024 19:13:08 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 699--===========

09/09/2024 19:13:08 - INFO - __main__ -   {'area_r1': 31.1, 'area_recall': '31.1/54.4/62.6', 'area_ravg': 49.4}
09/09/2024 19:13:08 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 699--===========

09/09/2024 19:13:08 - INFO - __main__ -   {'forward_r1': 34.8, 'forward_recall': '34.8/60.4/70.9', 'forward_ravg': 55.4}
09/09/2024 19:13:08 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 699--===========

09/09/2024 19:13:08 - INFO - __main__ -   {'area_video_r1': 38.0, 'area_video_recall': '38.0/69.2/78.8', 'area_video_ravg': 62.0}
09/09/2024 19:13:08 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 299=======

09/09/2024 19:13:08 - INFO - __main__ -   {'area_video_r1': 40.6, 'area_video_recall': '40.6/66.7/79.0', 'area_video_ravg': 62.1}
09/09/2024 19:13:08 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 699--===========

09/09/2024 19:13:08 - INFO - __main__ -   {'area_video_r1': 52.0, 'area_video_recall': '52.0/71.8/79.8', 'area_video_ravg': 67.9, 'area_video_back_r1': 50.6, 'area_video_back_recall': '50.6/73.1/80.1', 'area_video_back_ravg': 67.9}
09/09/2024 19:13:08 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 19:13:08 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 19:13:08 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 699--===========

09/09/2024 19:13:08 - INFO - __main__ -   {'video_r1': 42.4, 'video_recall': '42.4/70.4/80.7', 'video_ravg': 64.5}
09/09/2024 19:13:08 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 19:13:08 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 19:13:08 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 699--===========

09/09/2024 19:13:08 - INFO - __main__ -   {'video_r1': 52.1, 'video_recall': '52.1/75.2/83.3', 'video_ravg': 70.2}
09/09/2024 19:13:08 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 599=======

09/09/2024 19:13:08 - INFO - __main__ -   {'video_r1': 52.7, 'video_recall': '52.7/76.1/82.8', 'video_ravg': 70.6}
09/09/2024 19:13:28 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.6594527959823608, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.026604047045111656, 'loss_ret%tv%ta--finetune_area/loss_area': 1.3343658447265625, 'loss_ret%tv%ta--finetune_area/total_loss': 3.0204226970672607}
[h264 @ 0x556e6591f9c0] mmco: unref short failure
[h264 @ 0x556e6591f9c0] mmco: unref short failure
 36%|███▌      | 700/1945 [3:48:02<42:51:18, 123.92s/it][h264 @ 0x55e5132d2a80] mmco: unref short failure
[h264 @ 0x55e5132d2a80] mmco: unref short failure
 36%|███▌      | 701/1945 [3:48:06<30:24:55, 88.02s/it] [h264 @ 0x556e55228340] mmco: unref short failure
[h264 @ 0x556e55228340] mmco: unref short failure
[h264 @ 0x556e55228340] mmco: unref short failure
[h264 @ 0x556e55228340] mmco: unref short failure
[h264 @ 0x556e55228340] mmco: unref short failure
[h264 @ 0x556e55228340] mmco: unref short failure
 36%|███▌      | 702/1945 [3:48:12<21:49:34, 63.21s/it][h264 @ 0x55b7d85dea40] mmco: unref short failure
 36%|███▌      | 703/1945 [3:48:17<15:49:01, 45.85s/it] 36%|███▌      | 704/1945 [3:48:23<11:43:08, 34.00s/it] 36%|███▌      | 705/1945 [3:48:29<8:48:02, 25.55s/it]  36%|███▋      | 706/1945 [3:48:37<6:55:39, 20.13s/it][h264 @ 0x556e50dadf40] mmco: unref short failure
[h264 @ 0x556e50dadf40] mmco: unref short failure
[h264 @ 0x556e50dadf40] mmco: unref short failure
[h264 @ 0x556e50dadf40] mmco: unref short failure
 36%|███▋      | 707/1945 [3:48:44<5:36:27, 16.31s/it][h264 @ 0x55e5195f02c0] mmco: unref short failure
[h264 @ 0x55e5195f02c0] mmco: unref short failure
 36%|███▋      | 708/1945 [3:48:51<4:40:18, 13.60s/it][h264 @ 0x55b7ecceb280] mmco: unref short failure
[h264 @ 0x55b7ecceb280] mmco: unref short failure
[h264 @ 0x55b7ecceb280] mmco: unref short failure
[h264 @ 0x55b7ecceb280] mmco: unref short failure
[h264 @ 0x556e5f7f8680] mmco: unref short failure
[h264 @ 0x556e5f7f8680] mmco: unref short failure
 36%|███▋      | 709/1945 [3:48:59<4:04:30, 11.87s/it][h264 @ 0x556e42cb3600] mmco: unref short failure
 37%|███▋      | 710/1945 [3:49:07<3:37:28, 10.57s/it][h264 @ 0x556e69437080] mmco: unref short failure
[h264 @ 0x556e69437080] mmco: unref short failure
[h264 @ 0x556e69437080] mmco: unref short failure
[h264 @ 0x556e69437080] mmco: unref short failure
[h264 @ 0x55b7d8088000] mmco: unref short failure
 37%|███▋      | 711/1945 [3:49:14<3:19:00,  9.68s/it] 37%|███▋      | 712/1945 [3:49:22<3:05:25,  9.02s/it] 37%|███▋      | 713/1945 [3:49:29<2:51:44,  8.36s/it][h264 @ 0x55e502d59280] mmco: unref short failure
 37%|███▋      | 714/1945 [3:49:36<2:42:37,  7.93s/it][h264 @ 0x55b7d1bab080] mmco: unref short failure
[h264 @ 0x55b7d1bab080] mmco: unref short failure
[h264 @ 0x55b7d1bab080] mmco: unref short failure
[h264 @ 0x55b7d1bab080] mmco: unref short failure
 37%|███▋      | 715/1945 [3:49:43<2:37:29,  7.68s/it] 37%|███▋      | 716/1945 [3:49:50<2:34:00,  7.52s/it][h264 @ 0x55b7d32edcc0] mmco: unref short failure
[h264 @ 0x556e64665680] mmco: unref short failure
 37%|███▋      | 717/1945 [3:50:00<2:48:52,  8.25s/it] 37%|███▋      | 718/1945 [3:50:09<2:53:48,  8.50s/it][h264 @ 0x556e42b8a400] mmco: unref short failure
[h264 @ 0x556e42b8a400] mmco: unref short failure
[h264 @ 0x556e5155a880] mmco: unref short failure
[h264 @ 0x556e5155a880] mmco: unref short failure
 37%|███▋      | 719/1945 [3:50:18<2:57:31,  8.69s/it] 37%|███▋      | 720/1945 [3:50:25<2:47:37,  8.21s/it][h264 @ 0x556e5a380ec0] mmco: unref short failure
[h264 @ 0x556e5a380ec0] mmco: unref short failure
[h264 @ 0x556e66010880] mmco: unref short failure
[h264 @ 0x556e66010880] mmco: unref short failure
[h264 @ 0x556e5a380ec0] mmco: unref short failure
[h264 @ 0x55e50fc50040] mmco: unref short failure
[h264 @ 0x55e50fc50040] mmco: unref short failure
[h264 @ 0x55b7d40f7840] mmco: unref short failure
 37%|███▋      | 721/1945 [3:50:35<2:58:11,  8.74s/it][h264 @ 0x55e503886bc0] mmco: unref short failure
[h264 @ 0x55e503886bc0] mmco: unref short failure
 37%|███▋      | 722/1945 [3:50:52<3:48:59, 11.23s/it][h264 @ 0x556e5e380280] mmco: unref short failure
[h264 @ 0x55e51ecd8500] mmco: unref short failure
[h264 @ 0x55e51ecd8500] mmco: unref short failure
 37%|███▋      | 723/1945 [3:51:00<3:30:53, 10.36s/it][h264 @ 0x55e50f7d4780] mmco: unref short failure
[h264 @ 0x55b7d629eb80] mmco: unref short failure
[h264 @ 0x55b7d629eb80] mmco: unref short failure
[h264 @ 0x55e50b306540] mmco: unref short failure
[h264 @ 0x55e50b306540] mmco: unref short failure
[h264 @ 0x55b7e67d9440] mmco: unref short failure
[h264 @ 0x55b7ce2d0a40] mmco: unref short failure
[h264 @ 0x55b7ce2d0a40] mmco: unref short failure
[h264 @ 0x55e503c5be80] mmco: unref short failure
[h264 @ 0x55e503c5be80] mmco: unref short failure
 37%|███▋      | 724/1945 [3:51:39<6:20:59, 18.72s/it][h264 @ 0x55b7d104ea40] mmco: unref short failure
[h264 @ 0x55b7d104ea40] mmco: unref short failure
[h264 @ 0x55b7ece48e40] mmco: unref short failure
[h264 @ 0x55b7ceef3d00] mmco: unref short failure
[h264 @ 0x55b7ceef3d00] mmco: unref short failure
[h264 @ 0x55b7ceef3d00] mmco: unref short failure
[h264 @ 0x55b7ceef3d00] mmco: unref short failure
[h264 @ 0x556e4e944fc0] mmco: unref short failure
[h264 @ 0x556e4e944fc0] mmco: unref short failure
[h264 @ 0x556e4e944fc0] mmco: unref short failure
[h264 @ 0x556e4e944fc0] mmco: unref short failure
[h264 @ 0x556e46c6c7c0] mmco: unref short failure
[h264 @ 0x556e47e6dec0] mmco: unref short failure
[h264 @ 0x556e47e6dec0] mmco: unref short failure
 37%|███▋      | 725/1945 [3:52:00<6:36:38, 19.51s/it][h264 @ 0x55e5126e5800] mmco: unref short failure
[h264 @ 0x556e716364c0] mmco: unref short failure
[h264 @ 0x556e5e380280] mmco: unref short failure
[h264 @ 0x55e50a358c40] mmco: unref short failure
 37%|███▋      | 726/1945 [3:52:20<6:41:01, 19.74s/it][h264 @ 0x556e4ecd1440] mmco: unref short failure
[h264 @ 0x556e4ecd1440] mmco: unref short failure
[h264 @ 0x556e4ecd1440] mmco: unref short failure
[h264 @ 0x556e4ecd1440] mmco: unref short failure
 37%|███▋      | 727/1945 [3:52:27<5:22:27, 15.88s/it][h264 @ 0x55b7e7610940] mmco: unref short failure
[h264 @ 0x55b7e7610940] mmco: unref short failure
[h264 @ 0x55e515f44380] mmco: unref short failure
[h264 @ 0x55e515f44380] mmco: unref short failure
 37%|███▋      | 728/1945 [3:52:35<4:33:34, 13.49s/it][h264 @ 0x556e567dc340] mmco: unref short failure
[h264 @ 0x55e504a3b300] mmco: unref short failure
[h264 @ 0x55e504a3b300] mmco: unref short failure
 37%|███▋      | 729/1945 [3:52:42<3:55:53, 11.64s/it][h264 @ 0x556e67e0d1c0] mmco: unref short failure
[h264 @ 0x556e4308bac0] mmco: unref short failure
[h264 @ 0x55b7e9b08740] mmco: unref short failure
[h264 @ 0x556e5f74d100] mmco: unref short failure
[h264 @ 0x556e56d0b340] mmco: unref short failure
[h264 @ 0x556e5e3ca880] mmco: unref short failure
[h264 @ 0x55b7eb975200] mmco: unref short failure
 38%|███▊      | 730/1945 [3:52:57<4:16:00, 12.64s/it] 38%|███▊      | 731/1945 [3:53:04<3:38:50, 10.82s/it][h264 @ 0x556e47a1fbc0] mmco: unref short failure
[h264 @ 0x556e47a1fbc0] mmco: unref short failure
[h264 @ 0x556e6f93dd00] mmco: unref short failure
[h264 @ 0x556e6f93dd00] mmco: unref short failure
[h264 @ 0x55e50164c640] mmco: unref short failure
[h264 @ 0x55e4fcee4dc0] mmco: unref short failure
[h264 @ 0x556e5ee52e40] mmco: unref short failure
[h264 @ 0x556e46c6c7c0] mmco: unref short failure
[h264 @ 0x556e4ec59900] mmco: unref short failure
[h264 @ 0x556e4ec59900] mmco: unref short failure
 38%|███▊      | 732/1945 [3:53:42<6:25:04, 19.05s/it][h264 @ 0x55b7eb200e00] mmco: unref short failure
[h264 @ 0x55b7eb200e00] mmco: unref short failure
[h264 @ 0x55b7dc736580] mmco: unref short failure
[h264 @ 0x55b7dc736580] mmco: unref short failure
[h264 @ 0x55b7de774180] mmco: unref short failure
[h264 @ 0x55b7de774180] mmco: unref short failure
[h264 @ 0x556e5a3d8500] mmco: unref short failure
[h264 @ 0x556e5b29db40] mmco: unref short failure
[h264 @ 0x556e5b29db40] mmco: unref short failure
 38%|███▊      | 733/1945 [3:54:02<6:26:59, 19.16s/it][h264 @ 0x556e4b5c06c0] mmco: unref short failure
[h264 @ 0x55b7e79dc4c0] mmco: unref short failure
[h264 @ 0x55b7e79dc4c0] mmco: unref short failure
[h264 @ 0x55e502d59280] mmco: unref short failure
[h264 @ 0x55e502d59280] mmco: unref short failure
[h264 @ 0x55e502d59280] mmco: unref short failure
[h264 @ 0x55e502d59280] mmco: unref short failure
[h264 @ 0x55e502d59280] mmco: unref short failure
[h264 @ 0x55e502d59280] mmco: unref short failure
[h264 @ 0x556e5ca28480] mmco: unref short failure
[h264 @ 0x556e5ca28480] mmco: unref short failure
[h264 @ 0x55b7cf315400] mmco: unref short failure
[h264 @ 0x55b7cf315400] mmco: unref short failure
[h264 @ 0x55b7cf315400] mmco: unref short failure
[h264 @ 0x55b7cf315400] mmco: unref short failure
 38%|███▊      | 734/1945 [3:54:22<6:32:08, 19.43s/it][h264 @ 0x55e501dad2c0] mmco: unref short failure
 38%|███▊      | 735/1945 [3:54:29<5:20:12, 15.88s/it] 38%|███▊      | 736/1945 [3:54:37<4:28:22, 13.32s/it][h264 @ 0x556e6287f580] mmco: unref short failure
[h264 @ 0x556e5e9ede80] mmco: unref short failure
[h264 @ 0x556e5e9ede80] mmco: unref short failure
 38%|███▊      | 737/1945 [3:54:46<4:01:56, 12.02s/it][h264 @ 0x55e4fcee4dc0] mmco: unref short failure
[h264 @ 0x55b7d6c152c0] mmco: unref short failure
[h264 @ 0x55b7d6c152c0] mmco: unref short failure
[h264 @ 0x556e567cbf80] mmco: unref short failure
[h264 @ 0x55e509c26740] mmco: unref short failure
[h264 @ 0x55e509c26740] mmco: unref short failure
[h264 @ 0x55e509c26740] mmco: unref short failure
[h264 @ 0x55e509c26740] mmco: unref short failure
[h264 @ 0x55e50585aa40] mmco: unref short failure
[h264 @ 0x55e50585aa40] mmco: unref short failure
[h264 @ 0x55b7ccfb8640] mmco: unref short failure
[h264 @ 0x55b7ccfb8640] mmco: unref short failure
[h264 @ 0x55e51b602400] mmco: unref short failure
[h264 @ 0x55e51b602400] mmco: unref short failure
[h264 @ 0x556e67e06580] mmco: unref short failure
[h264 @ 0x556e67e06580] mmco: unref short failure
[h264 @ 0x556e67e06580] mmco: unref short failure
[h264 @ 0x556e67e06580] mmco: unref short failure
[h264 @ 0x556e67e06580] mmco: unref short failure
[h264 @ 0x556e67e06580] mmco: unref short failure
[h264 @ 0x55e501dd0740] mmco: unref short failure
[h264 @ 0x55e501dd0740] mmco: unref short failure
 38%|███▊      | 738/1945 [3:55:03<4:36:30, 13.75s/it][h264 @ 0x55b7df295180] mmco: unref short failure
[h264 @ 0x55e51fe1d480] mmco: unref short failure
[h264 @ 0x55e51fe1d480] mmco: unref short failure
 38%|███▊      | 739/1945 [3:55:11<3:55:53, 11.74s/it][h264 @ 0x556e5bbb7000] mmco: unref short failure
[h264 @ 0x556e5bbb7000] mmco: unref short failure
[h264 @ 0x556e5bbb7000] mmco: unref short failure
[h264 @ 0x556e5bbb7000] mmco: unref short failure
[h264 @ 0x556e494cd8c0] mmco: unref short failure
[h264 @ 0x556e43e89200] mmco: unref short failure
[h264 @ 0x556e4c521e00] mmco: unref short failure
[h264 @ 0x55b7d9c12a00] mmco: unref short failure
[h264 @ 0x55b7d9c12a00] mmco: unref short failure
[h264 @ 0x55b7d9c12a00] mmco: unref short failure
[h264 @ 0x55b7d9c12a00] mmco: unref short failure
[h264 @ 0x556e61fe49c0] mmco: unref short failure
[h264 @ 0x556e61fe49c0] mmco: unref short failure
[h264 @ 0x556e5b29db40] mmco: unref short failure
[h264 @ 0x55e4fcf05280] mmco: unref short failure
[h264 @ 0x556e47a1fbc0] mmco: unref short failure
[h264 @ 0x556e47a1fbc0] mmco: unref short failure
 38%|███▊      | 740/1945 [3:55:44<6:08:16, 18.34s/it][h264 @ 0x556e74543400] mmco: unref short failure
[h264 @ 0x556e74543400] mmco: unref short failure
[h264 @ 0x55b7df295180] mmco: unref short failure
[h264 @ 0x55b7df295180] mmco: unref short failure
[h264 @ 0x55e4fd772000] mmco: unref short failure
[h264 @ 0x55e4fd772000] mmco: unref short failure
[h264 @ 0x55e510501400] mmco: unref short failure
[h264 @ 0x55e510501400] mmco: unref short failure
 38%|███▊      | 741/1945 [3:56:04<6:16:58, 18.79s/it][h264 @ 0x556e5bbfc6c0] mmco: unref short failure
[h264 @ 0x556e5bbfc6c0] mmco: unref short failure
[h264 @ 0x556e42ec6fc0] mmco: unref short failure
[h264 @ 0x556e42ec6fc0] mmco: unref short failure
[h264 @ 0x556e737b27c0] mmco: unref short failure
[h264 @ 0x556e737b27c0] mmco: unref short failure
 38%|███▊      | 742/1945 [3:56:22<6:11:19, 18.52s/it][h264 @ 0x55b7eb87d900] mmco: unref short failure
[h264 @ 0x55b7eb87d900] mmco: unref short failure
[h264 @ 0x556e4f5775c0] mmco: unref short failure
[h264 @ 0x556e55b55100] mmco: unref short failure
[h264 @ 0x556e55b55100] mmco: unref short failure
[h264 @ 0x556e54d5af40] mmco: unref short failure
[h264 @ 0x556e54d5af40] mmco: unref short failure
[h264 @ 0x55b7d7bfbdc0] mmco: unref short failure
[h264 @ 0x55b7d7bfbdc0] mmco: unref short failure
[h264 @ 0x556e61445040] mmco: unref short failure
 38%|███▊      | 743/1945 [3:56:30<5:07:50, 15.37s/it][h264 @ 0x556e746ff880] mmco: unref short failure
[h264 @ 0x556e5692e700] mmco: unref short failure
[h264 @ 0x556e5692e700] mmco: unref short failure
[h264 @ 0x556e5692e700] mmco: unref short failure
[h264 @ 0x556e5692e700] mmco: unref short failure
[h264 @ 0x55b7ce2d0a40] mmco: unref short failure
[h264 @ 0x55b7ce2d0a40] mmco: unref short failure
[h264 @ 0x556e4e6ed2c0] mmco: unref short failure
 38%|███▊      | 744/1945 [3:56:38<4:23:47, 13.18s/it][h264 @ 0x556e550c8d80] mmco: unref short failure
[h264 @ 0x556e5a380cc0] mmco: unref short failure
 38%|███▊      | 745/1945 [3:56:47<4:00:26, 12.02s/it][h264 @ 0x55b7d304aa40] mmco: unref short failure
[h264 @ 0x55b7d304aa40] mmco: unref short failure
[h264 @ 0x556e5941bc40] mmco: unref short failure
[h264 @ 0x556e5941bc40] mmco: unref short failure
[h264 @ 0x556e5941bc40] mmco: unref short failure
[h264 @ 0x556e5941bc40] mmco: unref short failure
[h264 @ 0x55e5071554c0] mmco: unref short failure
[h264 @ 0x55e5071554c0] mmco: unref short failure
[h264 @ 0x55e5071554c0] mmco: unref short failure
[h264 @ 0x55b7d55b18c0] mmco: unref short failure
 38%|███▊      | 746/1945 [3:57:13<5:19:52, 16.01s/it] 38%|███▊      | 747/1945 [3:57:19<4:23:36, 13.20s/it][h264 @ 0x556e44b16a80] mmco: unref short failure
[h264 @ 0x556e44b16a80] mmco: unref short failure
[h264 @ 0x55b7d55b18c0] mmco: unref short failure
[h264 @ 0x556e68563540] mmco: unref short failure
[h264 @ 0x556e68563540] mmco: unref short failure
[h264 @ 0x556e70bce700] mmco: unref short failure
[h264 @ 0x556e70bce700] mmco: unref short failure
[h264 @ 0x556e71ef29c0] mmco: unref short failure
[h264 @ 0x55e519cbb8c0] mmco: unref short failure
[h264 @ 0x55e507147f40] mmco: unref short failure
[h264 @ 0x55e507147f40] mmco: unref short failure
[h264 @ 0x55e515fed200] mmco: unref short failure
[h264 @ 0x55e515fed200] mmco: unref short failure
[h264 @ 0x556e66fcaa40] mmco: unref short failure
 38%|███▊      | 748/1945 [3:57:49<6:01:54, 18.14s/it][h264 @ 0x556e6c4acf80] mmco: unref short failure
[h264 @ 0x556e6c4acf80] mmco: unref short failure
[h264 @ 0x55b7d7982040] mmco: unref short failure
[h264 @ 0x55b7d7982040] mmco: unref short failure
[h264 @ 0x55b7d7982040] mmco: unref short failure
[h264 @ 0x55b7d7982040] mmco: unref short failure
[h264 @ 0x55e4fddb4a40] mmco: unref short failure
[h264 @ 0x55b7ccea78c0] mmco: unref short failure
[h264 @ 0x556e55b55100] mmco: unref short failure
 39%|███▊      | 749/1945 [3:58:10<6:16:19, 18.88s/it]09/09/2024 19:23:38 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 19:23:38 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e50a8603c0] mmco: unref short failure
[h264 @ 0x55e50a8603c0] mmco: unref short failure
[h264 @ 0x55e50a8603c0] mmco: unref short failure
[h264 @ 0x55e50a8603c0] mmco: unref short failure
[h264 @ 0x556e5993da00] mmco: unref short failure
[h264 @ 0x55b7eb87d900] mmco: unref short failure
[h264 @ 0x55b7eb87d900] mmco: unref short failure
[h264 @ 0x55b7eb87d900] mmco: unref short failure
[h264 @ 0x55b7eb87d900] mmco: unref short failure
[h264 @ 0x55e4fe9899c0] mmco: unref short failure
[h264 @ 0x55e4fe9899c0] mmco: unref short failure
[h264 @ 0x55b7d7b5d640] mmco: unref short failure
[h264 @ 0x55b7d7b5d640] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e51626bdc0] mmco: unref short failure
[h264 @ 0x55e51626bdc0] mmco: unref short failure
[h264 @ 0x55e5002b6c80] mmco: unref short failure
[h264 @ 0x55e5002b6c80] mmco: unref short failure
[h264 @ 0x55e5002b6c80] mmco: unref short failure
[h264 @ 0x55e5002b6c80] mmco: unref short failure
[h264 @ 0x556e43f9b500] mmco: unref short failure
[h264 @ 0x556e4f12b480] mmco: unref short failure
[h264 @ 0x55e50e888880] mmco: unref short failure
[h264 @ 0x55e513be0d40] mmco: unref short failure
[h264 @ 0x556e55281e00] mmco: unref short failure
[h264 @ 0x556e55281e00] mmco: unref short failure
[h264 @ 0x55b7e8375f40] mmco: unref short failure
[h264 @ 0x55b7e8375f40] mmco: unref short failure
[h264 @ 0x55b7e8375f40] mmco: unref short failure
[h264 @ 0x55b7e8375f40] mmco: unref short failure
[h264 @ 0x55b7e8375f40] mmco: unref short failure
[h264 @ 0x55b7e8375f40] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  1%|          | 2/221 [00:00<00:44,  4.94it/s][A
  2%|▏         | 4/221 [00:00<00:25,  8.52it/s][A
  3%|▎         | 6/221 [00:00<00:25,  8.29it/s][A
  4%|▎         | 8/221 [00:01<00:31,  6.80it/s][A
  4%|▍         | 9/221 [00:01<00:30,  7.03it/s][A
  5%|▍         | 10/221 [00:02<01:26,  2.45it/s][A
  5%|▍         | 11/221 [00:02<01:09,  3.01it/s][A
  5%|▌         | 12/221 [00:02<00:57,  3.62it/s][A
  6%|▌         | 13/221 [00:03<00:55,  3.74it/s][A[h264 @ 0x556e54b8ca40] mmco: unref short failure

  6%|▋         | 14/221 [00:06<04:00,  1.16s/it][A
  7%|▋         | 15/221 [00:06<02:57,  1.16it/s][A[h264 @ 0x556e626fa640] mmco: unref short failure
[h264 @ 0x556e626fa640] mmco: unref short failure

  7%|▋         | 16/221 [00:07<03:23,  1.01it/s][A
  8%|▊         | 17/221 [00:09<03:39,  1.08s/it][A
  8%|▊         | 18/221 [00:09<02:46,  1.22it/s][A
  9%|▊         | 19/221 [00:09<02:04,  1.63it/s][A
  9%|▉         | 20/221 [00:09<01:34,  2.13it/s][A
 10%|▉         | 21/221 [00:09<01:12,  2.76it/s][A
 10%|▉         | 22/221 [00:09<00:56,  3.49it/s][A
 10%|█         | 23/221 [00:09<00:46,  4.25it/s][A
 11%|█         | 24/221 [00:10<00:38,  5.11it/s][A
 11%|█▏        | 25/221 [00:10<00:33,  5.92it/s][A
 12%|█▏        | 26/221 [00:10<00:35,  5.43it/s][A
 13%|█▎        | 28/221 [00:10<00:33,  5.79it/s][A[h264 @ 0x55b7dba5c000] mmco: unref short failure
[h264 @ 0x55b7dba5c000] mmco: unref short failure
[h264 @ 0x556e52965500] mmco: unref short failure
[h264 @ 0x556e52965500] mmco: unref short failure
[h264 @ 0x55e4fe3d0040] mmco: unref short failure

 13%|█▎        | 29/221 [00:14<03:33,  1.11s/it][A
 14%|█▎        | 30/221 [00:14<02:48,  1.13it/s][A
 14%|█▍        | 31/221 [00:15<02:14,  1.41it/s][A
 14%|█▍        | 32/221 [00:15<01:45,  1.79it/s][A
 15%|█▍        | 33/221 [00:15<01:51,  1.69it/s][A
 16%|█▌        | 35/221 [00:16<01:11,  2.60it/s][A
 16%|█▋        | 36/221 [00:16<01:01,  3.03it/s][A
 17%|█▋        | 37/221 [00:16<00:49,  3.68it/s][A
 17%|█▋        | 38/221 [00:16<00:51,  3.58it/s][A[h264 @ 0x556e609c53c0] mmco: unref short failure

 18%|█▊        | 39/221 [00:17<01:21,  2.24it/s][A
 18%|█▊        | 40/221 [00:17<01:12,  2.50it/s][A
 19%|█▊        | 41/221 [00:18<00:58,  3.09it/s][A
 19%|█▉        | 42/221 [00:18<00:47,  3.80it/s][A
 19%|█▉        | 43/221 [00:18<00:42,  4.20it/s][A[h264 @ 0x556e4db95fc0] mmco: unref short failure
[h264 @ 0x556e4db95fc0] mmco: unref short failure

 20%|█▉        | 44/221 [00:18<00:40,  4.33it/s][A
 20%|██        | 45/221 [00:18<00:36,  4.81it/s][A
 21%|██        | 46/221 [00:18<00:34,  5.12it/s][A
 21%|██▏       | 47/221 [00:19<00:37,  4.58it/s][A
 22%|██▏       | 48/221 [00:19<00:32,  5.28it/s][A
 22%|██▏       | 49/221 [00:19<00:33,  5.12it/s][A
 23%|██▎       | 50/221 [00:23<04:01,  1.41s/it][A
 23%|██▎       | 51/221 [00:24<03:01,  1.07s/it][A
 24%|██▎       | 52/221 [00:24<02:24,  1.17it/s][A
 24%|██▍       | 53/221 [00:24<01:48,  1.55it/s][A
 24%|██▍       | 54/221 [00:24<01:23,  2.01it/s][A
 25%|██▌       | 56/221 [00:24<00:54,  3.05it/s][A[h264 @ 0x55b7d7b5d640] mmco: unref short failure
[h264 @ 0x55b7d7b5d640] mmco: unref short failure

 26%|██▌       | 57/221 [00:25<00:50,  3.27it/s][A
 26%|██▌       | 58/221 [00:25<00:44,  3.67it/s][A
 27%|██▋       | 59/221 [00:25<00:50,  3.22it/s][A
 27%|██▋       | 60/221 [00:25<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:26<00:35,  4.53it/s][A
 28%|██▊       | 62/221 [00:26<00:33,  4.74it/s][A
 29%|██▊       | 63/221 [00:26<00:30,  5.19it/s][A
 29%|██▉       | 64/221 [00:26<00:29,  5.32it/s][A
 29%|██▉       | 65/221 [00:26<00:32,  4.86it/s][A
 30%|██▉       | 66/221 [00:27<00:36,  4.25it/s][A
 30%|███       | 67/221 [00:27<00:32,  4.74it/s][A
 31%|███       | 68/221 [00:27<00:42,  3.58it/s][A
 31%|███       | 69/221 [00:27<00:34,  4.35it/s][A
 32%|███▏      | 70/221 [00:28<00:32,  4.59it/s][A
 32%|███▏      | 71/221 [00:28<00:33,  4.48it/s][A
 33%|███▎      | 72/221 [00:28<00:38,  3.82it/s][A
 33%|███▎      | 73/221 [00:28<00:36,  4.07it/s][A
 33%|███▎      | 74/221 [00:29<00:44,  3.32it/s][A
 34%|███▍      | 75/221 [00:29<00:39,  3.71it/s][A
 34%|███▍      | 76/221 [00:29<00:33,  4.37it/s][A[h264 @ 0x556e65e370c0] mmco: unref short failure
[h264 @ 0x556e65e370c0] mmco: unref short failure

 35%|███▍      | 77/221 [00:29<00:32,  4.46it/s][A
 35%|███▌      | 78/221 [00:29<00:29,  4.77it/s][A
 36%|███▌      | 79/221 [00:30<00:27,  5.09it/s][A
 37%|███▋      | 81/221 [00:30<00:23,  5.83it/s][A[h264 @ 0x556e56423640] mmco: unref short failure
[h264 @ 0x556e56423640] mmco: unref short failure

 37%|███▋      | 82/221 [00:34<02:41,  1.16s/it][A
 38%|███▊      | 83/221 [00:34<02:05,  1.10it/s][A[h264 @ 0x55e50f570c40] mmco: unref short failure

 38%|███▊      | 85/221 [00:34<01:15,  1.81it/s][A
 39%|███▉      | 86/221 [00:35<01:11,  1.90it/s][A
 39%|███▉      | 87/221 [00:35<00:59,  2.27it/s][A[h264 @ 0x556e65ea4b80] mmco: unref short failure

 40%|███▉      | 88/221 [00:35<00:52,  2.52it/s][A
 40%|████      | 89/221 [00:36<00:48,  2.70it/s][A
 41%|████      | 90/221 [00:36<00:40,  3.26it/s][A
 41%|████      | 91/221 [00:36<00:36,  3.60it/s][A
 42%|████▏     | 92/221 [00:36<00:29,  4.39it/s][A
 42%|████▏     | 93/221 [00:36<00:29,  4.30it/s][A
 43%|████▎     | 94/221 [00:38<01:11,  1.77it/s][A
 43%|████▎     | 95/221 [00:38<00:58,  2.15it/s][A
 43%|████▎     | 96/221 [00:38<00:44,  2.78it/s][A
 44%|████▍     | 97/221 [00:39<00:50,  2.47it/s][A
 44%|████▍     | 98/221 [00:39<00:39,  3.10it/s][A
 45%|████▍     | 99/221 [00:39<00:32,  3.73it/s][A
 46%|████▌     | 101/221 [00:39<00:24,  4.96it/s][A
 46%|████▌     | 102/221 [00:39<00:21,  5.55it/s][A
 47%|████▋     | 103/221 [00:39<00:18,  6.27it/s][A
 47%|████▋     | 104/221 [00:39<00:18,  6.31it/s][A
 48%|████▊     | 106/221 [00:40<00:14,  7.72it/s][A
 48%|████▊     | 107/221 [00:40<00:18,  6.30it/s][A
 49%|████▉     | 108/221 [00:40<00:22,  5.09it/s][A[h264 @ 0x55e5091ef5c0] mmco: unref short failure
[h264 @ 0x55e5091ef5c0] mmco: unref short failure

 50%|████▉     | 110/221 [00:40<00:18,  5.88it/s][A
 50%|█████     | 111/221 [00:41<00:20,  5.38it/s][A
 51%|█████     | 112/221 [00:41<00:20,  5.29it/s][A
 51%|█████     | 113/221 [00:43<01:05,  1.65it/s][A
 52%|█████▏    | 114/221 [00:43<00:50,  2.14it/s][A
 52%|█████▏    | 116/221 [00:43<00:33,  3.13it/s][A
 53%|█████▎    | 117/221 [00:43<00:32,  3.18it/s][A
 54%|█████▍    | 119/221 [00:44<00:23,  4.33it/s][A
 55%|█████▍    | 121/221 [00:44<00:17,  5.85it/s][A
 56%|█████▌    | 123/221 [00:44<00:17,  5.48it/s][A
 56%|█████▌    | 124/221 [00:44<00:18,  5.33it/s][A
 57%|█████▋    | 125/221 [00:44<00:18,  5.22it/s][A
 57%|█████▋    | 126/221 [00:45<00:19,  4.77it/s][A
 57%|█████▋    | 127/221 [00:45<00:18,  5.10it/s][A
 58%|█████▊    | 128/221 [00:45<00:17,  5.23it/s][A
 58%|█████▊    | 129/221 [00:45<00:19,  4.67it/s][A
 59%|█████▉    | 130/221 [00:45<00:16,  5.47it/s][A[h264 @ 0x556e4f56cd40] mmco: unref short failure
[h264 @ 0x556e4f56cd40] mmco: unref short failure

 59%|█████▉    | 131/221 [00:46<00:34,  2.60it/s][A
 60%|██████    | 133/221 [00:47<00:22,  3.94it/s][A
 61%|██████    | 135/221 [00:47<00:16,  5.20it/s][A
 62%|██████▏   | 136/221 [00:47<00:16,  5.28it/s][A
 62%|██████▏   | 137/221 [00:47<00:15,  5.36it/s][A
 63%|██████▎   | 139/221 [00:47<00:11,  7.15it/s][A
 64%|██████▍   | 141/221 [00:48<00:14,  5.50it/s][A
 65%|██████▍   | 143/221 [00:48<00:11,  6.81it/s][A
 65%|██████▌   | 144/221 [00:48<00:10,  7.01it/s][A
 66%|██████▌   | 145/221 [00:48<00:11,  6.89it/s][A
 67%|██████▋   | 147/221 [00:48<00:10,  6.96it/s][A
 67%|██████▋   | 148/221 [00:49<00:10,  7.15it/s][A
 67%|██████▋   | 149/221 [00:49<00:09,  7.44it/s][A
 68%|██████▊   | 150/221 [00:49<00:12,  5.49it/s][A
 68%|██████▊   | 151/221 [00:50<00:19,  3.53it/s][A
 69%|██████▉   | 152/221 [00:50<00:18,  3.79it/s][A[h264 @ 0x556e45a5b000] mmco: unref short failure
[h264 @ 0x556e45a5b000] mmco: unref short failure

 69%|██████▉   | 153/221 [00:50<00:15,  4.53it/s][A
 70%|███████   | 155/221 [00:50<00:09,  6.70it/s][A
 71%|███████   | 156/221 [00:50<00:09,  6.90it/s][A
 71%|███████▏  | 158/221 [00:50<00:06,  9.08it/s][A
 72%|███████▏  | 160/221 [00:51<00:07,  8.35it/s][A[h264 @ 0x556e45a5b000] mmco: unref short failure
[h264 @ 0x556e45a5b000] mmco: unref short failure

 73%|███████▎  | 162/221 [00:51<00:07,  8.35it/s][A
 74%|███████▍  | 164/221 [00:51<00:05, 10.33it/s][A
 75%|███████▌  | 166/221 [00:51<00:04, 11.00it/s][A
 76%|███████▌  | 168/221 [00:51<00:04, 12.20it/s][A[h264 @ 0x556e591d3400] mmco: unref short failure

 77%|███████▋  | 170/221 [00:52<00:10,  4.74it/s][A
 78%|███████▊  | 172/221 [00:53<00:09,  5.12it/s][A
 78%|███████▊  | 173/221 [00:53<00:14,  3.27it/s][A
 79%|███████▊  | 174/221 [00:54<00:16,  2.90it/s][A
 79%|███████▉  | 175/221 [00:54<00:13,  3.40it/s][A
 80%|███████▉  | 176/221 [00:54<00:11,  4.03it/s][A
 80%|████████  | 177/221 [00:54<00:13,  3.33it/s][A
 81%|████████  | 178/221 [00:55<00:11,  3.89it/s][A
 81%|████████  | 179/221 [00:55<00:12,  3.24it/s][A
 82%|████████▏ | 181/221 [00:55<00:08,  4.64it/s][A[h264 @ 0x55e502bcad80] mmco: unref short failure
[h264 @ 0x55e502bcad80] mmco: unref short failure
[h264 @ 0x556e565f8700] mmco: unref short failure

 83%|████████▎ | 183/221 [00:56<00:07,  5.12it/s][A
 84%|████████▎ | 185/221 [00:56<00:06,  5.81it/s][A
 85%|████████▍ | 187/221 [00:56<00:06,  5.34it/s][A
 85%|████████▌ | 188/221 [00:56<00:05,  5.73it/s][A
 86%|████████▌ | 190/221 [00:57<00:04,  7.30it/s][A
 87%|████████▋ | 192/221 [00:57<00:03,  8.85it/s][A
 88%|████████▊ | 194/221 [00:57<00:02, 10.66it/s][A
 89%|████████▊ | 196/221 [00:59<00:11,  2.17it/s][A
 90%|████████▉ | 198/221 [00:59<00:07,  2.98it/s][A
 90%|█████████ | 200/221 [01:00<00:05,  3.80it/s][A
 91%|█████████▏| 202/221 [01:00<00:03,  4.78it/s][A
 92%|█████████▏| 204/221 [01:01<00:04,  3.93it/s][A
 93%|█████████▎| 205/221 [01:01<00:04,  3.69it/s][A
 93%|█████████▎| 206/221 [01:01<00:03,  4.15it/s][A
 94%|█████████▍| 208/221 [01:01<00:02,  5.70it/s][A
 95%|█████████▌| 210/221 [01:01<00:01,  6.04it/s][A
 96%|█████████▌| 212/221 [01:02<00:01,  6.40it/s][A[h264 @ 0x55e5025af240] mmco: unref short failure
[h264 @ 0x55e5025af240] mmco: unref short failure
[h264 @ 0x556e57c374c0] mmco: unref short failure

 96%|█████████▋| 213/221 [01:02<00:01,  6.42it/s][A
 97%|█████████▋| 215/221 [01:02<00:00,  7.89it/s][A
 98%|█████████▊| 216/221 [01:02<00:00,  7.97it/s][A
 99%|█████████▊| 218/221 [01:02<00:00,  9.32it/s][A
100%|█████████▉| 220/221 [01:02<00:00,  9.64it/s][A100%|█████████▉| 220/221 [01:02<00:00,  3.50it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.78it/s][A
  1%|          | 2/221 [00:00<00:58,  3.73it/s][A
  1%|▏         | 3/221 [00:00<00:58,  3.75it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.77it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.77it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.78it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.78it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.78it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.78it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.78it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.78it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.79it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.79it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.78it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.78it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:51,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:47,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:37,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:33,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.78it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.78it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.78it/s][A
 57%|█████▋    | 125/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.79it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.79it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.79it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.79it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.78it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.78it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.78it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.78it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.78it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.79it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.78it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 159/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.79it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.79it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.79it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.78it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.79it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.78it/s][A
 76%|███████▌  | 168/221 [00:44<00:14,  3.78it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.78it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.78it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.78it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.78it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.78it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.78it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.78it/s][A
 81%|████████  | 178/221 [00:46<00:11,  3.78it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.78it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.78it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.78it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.78it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.78it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.78it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.79it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.79it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.78it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.78it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.79it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.79it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.79it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.79it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:35,  6.16it/s][A
  1%|          | 2/221 [00:00<00:42,  5.17it/s][A
  1%|▏         | 3/221 [00:00<00:41,  5.26it/s][A
  2%|▏         | 4/221 [00:00<00:35,  6.07it/s][A
  2%|▏         | 5/221 [00:00<00:37,  5.76it/s][A
  3%|▎         | 7/221 [00:01<00:39,  5.48it/s][A
  4%|▎         | 8/221 [00:01<00:47,  4.52it/s][A
  4%|▍         | 9/221 [00:01<00:44,  4.82it/s][A
  5%|▍         | 10/221 [00:02<01:05,  3.21it/s][A
  5%|▍         | 11/221 [00:02<01:00,  3.48it/s][A
  5%|▌         | 12/221 [00:02<00:50,  4.11it/s][A
  6%|▌         | 13/221 [00:03<01:30,  2.29it/s][A
  7%|▋         | 15/221 [00:03<01:06,  3.09it/s][A
  7%|▋         | 16/221 [00:04<01:06,  3.06it/s][A
  8%|▊         | 17/221 [00:04<01:14,  2.74it/s][A
  8%|▊         | 18/221 [00:05<01:13,  2.75it/s][A
  9%|▊         | 19/221 [00:05<01:09,  2.90it/s][A
  9%|▉         | 20/221 [00:05<00:56,  3.55it/s][A
 10%|▉         | 21/221 [00:05<00:51,  3.86it/s][A
 10%|▉         | 22/221 [00:05<00:44,  4.52it/s][A
 11%|█         | 24/221 [00:06<00:35,  5.61it/s][A
 11%|█▏        | 25/221 [00:06<00:37,  5.26it/s][A
 12%|█▏        | 26/221 [00:06<00:42,  4.64it/s][A
 12%|█▏        | 27/221 [00:06<00:39,  4.89it/s][A
 13%|█▎        | 28/221 [00:07<00:43,  4.39it/s][A
 13%|█▎        | 29/221 [00:07<00:46,  4.10it/s][A
 14%|█▎        | 30/221 [00:07<00:43,  4.39it/s][A
 14%|█▍        | 31/221 [00:07<00:40,  4.73it/s][A
 14%|█▍        | 32/221 [00:07<00:37,  5.11it/s][A
 15%|█▍        | 33/221 [00:08<00:37,  5.05it/s][A
 15%|█▌        | 34/221 [00:08<00:43,  4.28it/s][A
 16%|█▌        | 35/221 [00:08<00:53,  3.50it/s][A
 16%|█▋        | 36/221 [00:09<00:49,  3.76it/s][A
 17%|█▋        | 37/221 [00:09<00:50,  3.64it/s][A
 17%|█▋        | 38/221 [00:09<00:50,  3.60it/s][A
 18%|█▊        | 39/221 [00:09<00:46,  3.88it/s][A
 18%|█▊        | 40/221 [00:10<00:58,  3.10it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.81it/s][A
 19%|█▉        | 42/221 [00:10<00:47,  3.80it/s][A
 19%|█▉        | 43/221 [00:11<00:51,  3.42it/s][A
 20%|█▉        | 44/221 [00:11<00:45,  3.93it/s][A
 20%|██        | 45/221 [00:11<00:39,  4.49it/s][A
 21%|██        | 46/221 [00:11<00:42,  4.08it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.86it/s][A
 22%|██▏       | 48/221 [00:12<00:42,  4.11it/s][A
 22%|██▏       | 49/221 [00:12<00:41,  4.17it/s][A
 23%|██▎       | 50/221 [00:12<00:42,  4.04it/s][A
 23%|██▎       | 51/221 [00:12<00:34,  4.89it/s][A
 24%|██▎       | 52/221 [00:12<00:33,  5.00it/s][A
 24%|██▍       | 53/221 [00:13<00:31,  5.42it/s][A
 24%|██▍       | 54/221 [00:13<00:41,  4.04it/s][A
 25%|██▍       | 55/221 [00:13<00:37,  4.40it/s][A
 25%|██▌       | 56/221 [00:13<00:35,  4.65it/s][A
 26%|██▌       | 57/221 [00:14<00:39,  4.18it/s][A
 26%|██▌       | 58/221 [00:14<00:43,  3.76it/s][A
 27%|██▋       | 59/221 [00:14<00:43,  3.68it/s][A
 27%|██▋       | 60/221 [00:14<00:35,  4.49it/s][A
 28%|██▊       | 61/221 [00:15<00:36,  4.44it/s][A
 28%|██▊       | 62/221 [00:15<00:35,  4.53it/s][A
 29%|██▉       | 64/221 [00:15<00:32,  4.81it/s][A
 29%|██▉       | 65/221 [00:15<00:29,  5.36it/s][A
 30%|██▉       | 66/221 [00:16<00:43,  3.57it/s][A
 30%|███       | 67/221 [00:17<00:57,  2.69it/s][A
 31%|███       | 68/221 [00:17<00:47,  3.23it/s][A
 31%|███       | 69/221 [00:17<00:58,  2.61it/s][A
 32%|███▏      | 70/221 [00:17<00:46,  3.26it/s][A
 32%|███▏      | 71/221 [00:18<00:46,  3.24it/s][A
 33%|███▎      | 72/221 [00:18<00:53,  2.80it/s][A
 33%|███▎      | 73/221 [00:18<00:42,  3.44it/s][A
 33%|███▎      | 74/221 [00:18<00:35,  4.14it/s][A
 34%|███▍      | 75/221 [00:19<00:34,  4.18it/s][A
 34%|███▍      | 76/221 [00:19<00:34,  4.18it/s][A
 35%|███▍      | 77/221 [00:19<00:33,  4.28it/s][A
 35%|███▌      | 78/221 [00:19<00:30,  4.76it/s][A
 36%|███▌      | 79/221 [00:20<00:52,  2.73it/s][A
 36%|███▌      | 80/221 [00:20<00:44,  3.14it/s][A
 37%|███▋      | 81/221 [00:20<00:38,  3.64it/s][A
 37%|███▋      | 82/221 [00:21<00:44,  3.11it/s][A
 38%|███▊      | 83/221 [00:21<00:43,  3.16it/s][A
 38%|███▊      | 84/221 [00:21<00:38,  3.53it/s][A
 38%|███▊      | 85/221 [00:21<00:33,  4.07it/s][A
 39%|███▉      | 86/221 [00:22<00:32,  4.13it/s][A
 39%|███▉      | 87/221 [00:22<00:32,  4.17it/s][A
 40%|███▉      | 88/221 [00:22<00:42,  3.16it/s][A
 40%|████      | 89/221 [00:23<00:47,  2.77it/s][A
 41%|████      | 90/221 [00:23<00:44,  2.96it/s][A
 41%|████      | 91/221 [00:23<00:35,  3.62it/s][A
 42%|████▏     | 92/221 [00:24<00:37,  3.48it/s][A
 42%|████▏     | 93/221 [00:25<00:59,  2.17it/s][A
 43%|████▎     | 94/221 [00:25<00:55,  2.29it/s][A
 43%|████▎     | 95/221 [00:25<00:49,  2.54it/s][A
 43%|████▎     | 96/221 [00:25<00:40,  3.05it/s][A
 44%|████▍     | 97/221 [00:26<00:35,  3.50it/s][A
 44%|████▍     | 98/221 [00:26<00:32,  3.73it/s][A
 45%|████▍     | 99/221 [00:26<00:31,  3.82it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.87it/s][A
 46%|████▌     | 101/221 [00:27<00:38,  3.13it/s][A
 46%|████▌     | 102/221 [00:27<00:46,  2.57it/s][A
 47%|████▋     | 103/221 [00:28<00:40,  2.93it/s][A
 47%|████▋     | 104/221 [00:28<00:39,  2.96it/s][A
 48%|████▊     | 105/221 [00:28<00:34,  3.34it/s][A
 48%|████▊     | 106/221 [00:28<00:35,  3.23it/s][A
 48%|████▊     | 107/221 [00:29<00:33,  3.38it/s][A
 49%|████▉     | 108/221 [00:29<00:32,  3.53it/s][A
 49%|████▉     | 109/221 [00:29<00:28,  3.96it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.78it/s][A
 50%|█████     | 111/221 [00:30<00:31,  3.49it/s][A
 51%|█████     | 112/221 [00:30<00:32,  3.34it/s][A
 51%|█████     | 113/221 [00:30<00:27,  3.90it/s][A
 52%|█████▏    | 114/221 [00:30<00:22,  4.74it/s][A
 52%|█████▏    | 115/221 [00:31<00:23,  4.48it/s][A
 52%|█████▏    | 116/221 [00:31<00:28,  3.72it/s][A
 53%|█████▎    | 117/221 [00:31<00:26,  3.93it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:32<00:35,  2.86it/s][A
 54%|█████▍    | 120/221 [00:32<00:31,  3.17it/s][A
 55%|█████▌    | 122/221 [00:33<00:24,  4.11it/s][A
 56%|█████▌    | 123/221 [00:33<00:23,  4.09it/s][A
 56%|█████▌    | 124/221 [00:33<00:21,  4.56it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 126/221 [00:34<00:27,  3.49it/s][A
 57%|█████▋    | 127/221 [00:34<00:28,  3.26it/s][A
 58%|█████▊    | 128/221 [00:34<00:26,  3.52it/s][A
 58%|█████▊    | 129/221 [00:34<00:23,  3.84it/s][A
 59%|█████▉    | 130/221 [00:35<00:22,  4.10it/s][A
 60%|█████▉    | 132/221 [00:35<00:15,  5.86it/s][A
 60%|██████    | 133/221 [00:35<00:18,  4.78it/s][A
 61%|██████    | 134/221 [00:35<00:17,  4.92it/s][A
 61%|██████    | 135/221 [00:36<00:17,  5.01it/s][A
 62%|██████▏   | 136/221 [00:36<00:17,  4.78it/s][A
 62%|██████▏   | 137/221 [00:36<00:16,  5.01it/s][A
 62%|██████▏   | 138/221 [00:36<00:19,  4.29it/s][A
 63%|██████▎   | 139/221 [00:37<00:23,  3.43it/s][A
 63%|██████▎   | 140/221 [00:37<00:22,  3.64it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.72it/s][A
 64%|██████▍   | 142/221 [00:37<00:19,  4.15it/s][A
 65%|██████▍   | 143/221 [00:38<00:25,  3.00it/s][A
 65%|██████▌   | 144/221 [00:38<00:27,  2.78it/s][A
 66%|██████▌   | 145/221 [00:38<00:21,  3.53it/s][A
 66%|██████▌   | 146/221 [00:39<00:17,  4.37it/s][A
 67%|██████▋   | 147/221 [00:39<00:17,  4.18it/s][A
 67%|██████▋   | 148/221 [00:39<00:25,  2.90it/s][A
 67%|██████▋   | 149/221 [00:40<00:21,  3.32it/s][A
 68%|██████▊   | 150/221 [00:40<00:21,  3.31it/s][A
 68%|██████▊   | 151/221 [00:40<00:22,  3.18it/s][A
 69%|██████▉   | 152/221 [00:41<00:30,  2.27it/s][A
 69%|██████▉   | 153/221 [00:41<00:24,  2.76it/s][A
 70%|██████▉   | 154/221 [00:41<00:21,  3.13it/s][A
 70%|███████   | 155/221 [00:42<00:20,  3.21it/s][A
 71%|███████   | 156/221 [00:42<00:23,  2.74it/s][A
 71%|███████   | 157/221 [00:42<00:22,  2.89it/s][A
 71%|███████▏  | 158/221 [00:43<00:20,  3.03it/s][A
 72%|███████▏  | 159/221 [00:43<00:17,  3.47it/s][A
 72%|███████▏  | 160/221 [00:43<00:15,  4.02it/s][A
 73%|███████▎  | 161/221 [00:44<00:18,  3.20it/s][A
 73%|███████▎  | 162/221 [00:44<00:17,  3.46it/s][A
 74%|███████▍  | 163/221 [00:44<00:16,  3.59it/s][A
 74%|███████▍  | 164/221 [00:44<00:15,  3.75it/s][A
 75%|███████▍  | 165/221 [00:45<00:14,  3.87it/s][A
 75%|███████▌  | 166/221 [00:45<00:14,  3.86it/s][A
 76%|███████▌  | 167/221 [00:45<00:11,  4.70it/s][A
 76%|███████▌  | 168/221 [00:45<00:13,  3.82it/s][A
 76%|███████▋  | 169/221 [00:45<00:12,  4.09it/s][A
 77%|███████▋  | 170/221 [00:46<00:17,  3.00it/s][A
 77%|███████▋  | 171/221 [00:46<00:13,  3.65it/s][A
 78%|███████▊  | 172/221 [00:46<00:11,  4.36it/s][A
 78%|███████▊  | 173/221 [00:47<00:12,  3.90it/s][A
 79%|███████▊  | 174/221 [00:47<00:14,  3.19it/s][A
 79%|███████▉  | 175/221 [00:47<00:14,  3.13it/s][A
 80%|███████▉  | 176/221 [00:48<00:12,  3.62it/s][A
 80%|████████  | 177/221 [00:48<00:11,  3.88it/s][A
 81%|████████  | 178/221 [00:48<00:10,  4.14it/s][A
 81%|████████  | 179/221 [00:48<00:10,  4.15it/s][A
 81%|████████▏ | 180/221 [00:48<00:08,  4.63it/s][A
 82%|████████▏ | 181/221 [00:49<00:09,  4.17it/s][A
 82%|████████▏ | 182/221 [00:49<00:10,  3.86it/s][A
 83%|████████▎ | 183/221 [00:49<00:09,  3.83it/s][A
 83%|████████▎ | 184/221 [00:49<00:08,  4.59it/s][A
 84%|████████▎ | 185/221 [00:49<00:07,  5.00it/s][A
 84%|████████▍ | 186/221 [00:50<00:09,  3.82it/s][A
 85%|████████▍ | 187/221 [00:50<00:08,  3.92it/s][A
 85%|████████▌ | 188/221 [00:50<00:08,  3.78it/s][A
 86%|████████▌ | 189/221 [00:51<00:08,  3.68it/s][A
 86%|████████▌ | 190/221 [00:51<00:09,  3.12it/s][A
 86%|████████▋ | 191/221 [00:51<00:08,  3.72it/s][A
 87%|████████▋ | 192/221 [00:52<00:09,  3.11it/s][A
 87%|████████▋ | 193/221 [00:52<00:07,  3.65it/s][A
 88%|████████▊ | 194/221 [00:53<00:10,  2.65it/s][A
 88%|████████▊ | 195/221 [00:53<00:09,  2.88it/s][A
 89%|████████▊ | 196/221 [00:53<00:08,  3.00it/s][A
 89%|████████▉ | 197/221 [00:53<00:07,  3.40it/s][A
 90%|████████▉ | 198/221 [00:54<00:08,  2.62it/s][A
 90%|█████████ | 199/221 [00:54<00:07,  2.93it/s][A
 90%|█████████ | 200/221 [00:55<00:07,  2.77it/s][A
 91%|█████████ | 201/221 [00:55<00:06,  2.96it/s][A
 91%|█████████▏| 202/221 [00:55<00:06,  2.85it/s][A
 92%|█████████▏| 203/221 [00:55<00:05,  3.49it/s][A
 92%|█████████▏| 204/221 [00:56<00:07,  2.41it/s][A
 93%|█████████▎| 205/221 [00:56<00:05,  3.03it/s][A
 93%|█████████▎| 206/221 [00:56<00:04,  3.11it/s][A
 94%|█████████▎| 207/221 [00:57<00:04,  3.39it/s][A
 94%|█████████▍| 208/221 [00:57<00:03,  3.92it/s][A
 95%|█████████▍| 209/221 [00:57<00:03,  3.65it/s][A
 95%|█████████▌| 210/221 [00:57<00:02,  3.80it/s][A
 95%|█████████▌| 211/221 [00:58<00:02,  3.36it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  3.48it/s][A
 96%|█████████▋| 213/221 [00:58<00:02,  3.83it/s][A
 97%|█████████▋| 214/221 [00:59<00:02,  2.95it/s][A
 97%|█████████▋| 215/221 [00:59<00:01,  3.10it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  3.19it/s][A
 98%|█████████▊| 217/221 [01:00<00:01,  3.44it/s][A
 99%|█████████▊| 218/221 [01:00<00:00,  3.28it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  3.09it/s][A
100%|█████████▉| 220/221 [01:01<00:00,  3.18it/s][A
100%|██████████| 221/221 [01:01<00:00,  3.06it/s][A100%|██████████| 221/221 [01:01<00:00,  3.60it/s]
09/09/2024 19:29:24 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 749--===========

09/09/2024 19:29:24 - INFO - __main__ -   {'area_r1': 29.2, 'area_recall': '29.2/51.1/58.5', 'area_ravg': 46.3}
09/09/2024 19:29:24 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 749--===========

09/09/2024 19:29:24 - INFO - __main__ -   {'forward_r1': 34.2, 'forward_recall': '34.2/60.1/69.8', 'forward_ravg': 54.7}
09/09/2024 19:29:24 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 749--===========

09/09/2024 19:29:24 - INFO - __main__ -   {'area_video_r1': 38.2, 'area_video_recall': '38.2/68.7/79.2', 'area_video_ravg': 62.0}
09/09/2024 19:29:24 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 299=======

09/09/2024 19:29:24 - INFO - __main__ -   {'area_video_r1': 40.6, 'area_video_recall': '40.6/66.7/79.0', 'area_video_ravg': 62.1}
09/09/2024 19:29:24 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 749--===========

09/09/2024 19:29:24 - INFO - __main__ -   {'area_video_r1': 50.5, 'area_video_recall': '50.5/70.5/77.8', 'area_video_ravg': 66.3, 'area_video_back_r1': 49.9, 'area_video_back_recall': '49.9/73.1/80.8', 'area_video_back_ravg': 67.9}
09/09/2024 19:29:24 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 19:29:24 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 19:29:24 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 749--===========

09/09/2024 19:29:24 - INFO - __main__ -   {'video_r1': 42.4, 'video_recall': '42.4/70.4/80.8', 'video_ravg': 64.5}
09/09/2024 19:29:24 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 19:29:24 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 19:29:24 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 749--===========

09/09/2024 19:29:24 - INFO - __main__ -   {'video_r1': 51.8, 'video_recall': '51.8/74.4/82.8', 'video_ravg': 69.7}
09/09/2024 19:29:24 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 599=======

09/09/2024 19:29:24 - INFO - __main__ -   {'video_r1': 52.7, 'video_recall': '52.7/76.1/82.8', 'video_ravg': 70.6}
09/09/2024 19:29:45 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.5304653644561768, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.02444029413163662, 'loss_ret%tv%ta--finetune_area/loss_area': 1.2432360649108887, 'loss_ret%tv%ta--finetune_area/total_loss': 2.7981417179107666}
 39%|███▊      | 750/1945 [4:04:19<41:11:24, 124.09s/it][h264 @ 0x55e5014c6d00] mmco: unref short failure
[h264 @ 0x55e5014c6d00] mmco: unref short failure
 39%|███▊      | 751/1945 [4:04:23<29:13:01, 88.09s/it] [h264 @ 0x556e5f37e840] mmco: unref short failure
[h264 @ 0x556e5f37e840] mmco: unref short failure
[h264 @ 0x55e5126e5800] mmco: unref short failure
[h264 @ 0x55e5126e5800] mmco: unref short failure
 39%|███▊      | 752/1945 [4:04:28<20:54:23, 63.09s/it][h264 @ 0x556e7076df40] mmco: unref short failure
[h264 @ 0x556e7076df40] mmco: unref short failure
 39%|███▊      | 753/1945 [4:04:33<15:06:23, 45.62s/it][h264 @ 0x556e461ede80] mmco: unref short failure
[h264 @ 0x556e461ede80] mmco: unref short failure
[h264 @ 0x556e461ede80] mmco: unref short failure
[h264 @ 0x556e461ede80] mmco: unref short failure
 39%|███▉      | 754/1945 [4:04:39<11:10:16, 33.77s/it][h264 @ 0x55b7e2ba5d00] mmco: unref short failure
[h264 @ 0x55b7e2ba5d00] mmco: unref short failure
 39%|███▉      | 755/1945 [4:04:45<8:23:50, 25.40s/it] [h264 @ 0x556e49edf480] mmco: unref short failure
 39%|███▉      | 756/1945 [4:04:52<6:35:45, 19.97s/it][h264 @ 0x556e47e9b400] mmco: unref short failure
[h264 @ 0x556e52ffa6c0] mmco: unref short failure
[h264 @ 0x556e47af8d00] mmco: unref short failure
 39%|███▉      | 757/1945 [4:05:00<5:21:10, 16.22s/it][h264 @ 0x556e41dd2c00] mmco: unref short failure
[h264 @ 0x556e609c53c0] mmco: unref short failure
[h264 @ 0x556e609c53c0] mmco: unref short failure
[h264 @ 0x55e50164c640] mmco: unref short failure
[h264 @ 0x55e50164c640] mmco: unref short failure
[h264 @ 0x556e70ad8740] mmco: unref short failure
[h264 @ 0x556e53be0200] mmco: unref short failure
[h264 @ 0x556e53be0200] mmco: unref short failure
[h264 @ 0x556e640dd5c0] mmco: unref short failure
[h264 @ 0x556e640dd5c0] mmco: unref short failure
 39%|███▉      | 758/1945 [4:05:08<4:32:15, 13.76s/it][h264 @ 0x55b7ece48e40] mmco: unref short failure
[h264 @ 0x55b7ece48e40] mmco: unref short failure
[h264 @ 0x556e5708cc40] mmco: unref short failure
[h264 @ 0x556e5708cc40] mmco: unref short failure
 39%|███▉      | 759/1945 [4:05:15<3:56:13, 11.95s/it][h264 @ 0x55e515f2e540] mmco: unref short failure
[h264 @ 0x55e515f2e540] mmco: unref short failure
[h264 @ 0x556e6e22cb00] mmco: unref short failure
[h264 @ 0x556e6e22cb00] mmco: unref short failure
[h264 @ 0x556e709700c0] mmco: unref short failure
[h264 @ 0x556e709700c0] mmco: unref short failure
[h264 @ 0x556e54d67500] mmco: unref short failure
[h264 @ 0x556e54d67500] mmco: unref short failure
[h264 @ 0x556e4ecd1440] mmco: unref short failure
 39%|███▉      | 760/1945 [4:05:22<3:25:19, 10.40s/it] 39%|███▉      | 761/1945 [4:05:29<3:04:06,  9.33s/it] 39%|███▉      | 762/1945 [4:05:36<2:50:58,  8.67s/it] 39%|███▉      | 763/1945 [4:05:43<2:39:36,  8.10s/it][h264 @ 0x556e520412c0] mmco: unref short failure
[h264 @ 0x556e520412c0] mmco: unref short failure
 39%|███▉      | 764/1945 [4:05:51<2:39:32,  8.11s/it][h264 @ 0x556e5c0cb5c0] mmco: unref short failure
[h264 @ 0x556e5c0cb5c0] mmco: unref short failure
[h264 @ 0x556e43c28980] mmco: unref short failure
[h264 @ 0x55b7cd95be00] mmco: unref short failure
[h264 @ 0x55b7cd95be00] mmco: unref short failure
[h264 @ 0x55b7cd95be00] mmco: unref short failure
 39%|███▉      | 765/1945 [4:05:58<2:32:44,  7.77s/it][h264 @ 0x556e58c0a900] mmco: unref short failure
[h264 @ 0x556e58c0a900] mmco: unref short failure
[h264 @ 0x556e63fc0040] mmco: unref short failure
[h264 @ 0x55b7df2dc0c0] mmco: unref short failure
[h264 @ 0x55b7df2dc0c0] mmco: unref short failure
[h264 @ 0x55b7df2dc0c0] mmco: unref short failure
[h264 @ 0x55b7df2dc0c0] mmco: unref short failure
 39%|███▉      | 766/1945 [4:06:05<2:29:28,  7.61s/it][h264 @ 0x55e500de0840] mmco: unref short failure
[h264 @ 0x55b7d1849040] mmco: unref short failure
[h264 @ 0x55b7d1849040] mmco: unref short failure
[h264 @ 0x556e5bff7f40] mmco: unref short failure
[h264 @ 0x556e5bff7f40] mmco: unref short failure
 39%|███▉      | 767/1945 [4:06:17<2:55:12,  8.92s/it][h264 @ 0x55b7e4409500] mmco: unref short failure
[h264 @ 0x55b7e4409500] mmco: unref short failure
 39%|███▉      | 768/1945 [4:06:30<3:15:30,  9.97s/it] 40%|███▉      | 769/1945 [4:06:37<2:57:28,  9.05s/it][h264 @ 0x55b7cb534600] mmco: unref short failure
[h264 @ 0x55b7cb534600] mmco: unref short failure
 40%|███▉      | 770/1945 [4:06:44<2:49:41,  8.67s/it] 40%|███▉      | 771/1945 [4:06:51<2:37:28,  8.05s/it][h264 @ 0x556e5283acc0] mmco: unref short failure
[h264 @ 0x55b7ceef3d00] mmco: unref short failure
[h264 @ 0x55e514017140] mmco: unref short failure
[h264 @ 0x55b7d32e1040] mmco: unref short failure
[h264 @ 0x55b7d32e1040] mmco: unref short failure
 40%|███▉      | 772/1945 [4:06:58<2:34:20,  7.89s/it] 40%|███▉      | 773/1945 [4:07:04<2:17:59,  7.06s/it][h264 @ 0x55b7ceef3d00] mmco: unref short failure
[h264 @ 0x556e512dc100] mmco: unref short failure
[h264 @ 0x556e47f78d00] mmco: unref short failure
[h264 @ 0x55b7e4409500] mmco: unref short failure
[h264 @ 0x556e57b41f00] mmco: unref short failure
[h264 @ 0x556e57b41f00] mmco: unref short failure
[h264 @ 0x556e47ec1b80] mmco: unref short failure
[h264 @ 0x556e47ec1b80] mmco: unref short failure
[h264 @ 0x55e507acb340] mmco: unref short failure
[h264 @ 0x55e507acb340] mmco: unref short failure
 40%|███▉      | 774/1945 [4:07:23<3:31:32, 10.84s/it][h264 @ 0x556e41f35640] mmco: unref short failure
[h264 @ 0x556e41f35640] mmco: unref short failure
 40%|███▉      | 775/1945 [4:07:31<3:10:29,  9.77s/it][h264 @ 0x556e45ca7a40] mmco: unref short failure
[h264 @ 0x556e45ca7a40] mmco: unref short failure
 40%|███▉      | 776/1945 [4:07:35<2:36:48,  8.05s/it] 40%|███▉      | 777/1945 [4:07:38<2:11:50,  6.77s/it]/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b7cb2c3a00] mmco: unref short failure
[h264 @ 0x55b7cb2c3a00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e4fcda19c0] mmco: unref short failure
[h264 @ 0x556e426f1200] mmco: unref short failure
[h264 @ 0x556e426f1200] mmco: unref short failure
[h264 @ 0x55b7cb277940] mmco: unref short failure
[h264 @ 0x556e421ad580] mmco: unref short failure
[h264 @ 0x55e4fd6a9c40] mmco: unref short failure
[h264 @ 0x55e4fd6e37c0] mmco: unref short failure
[h264 @ 0x55e4fd6e37c0] mmco: unref short failure
[h264 @ 0x55e4fd6c0d00] mmco: unref short failure
[h264 @ 0x55e4fd6c0d00] mmco: unref short failure
[h264 @ 0x556e521e9180] mmco: unref short failure
[h264 @ 0x556e534c04c0] mmco: unref short failure
[h264 @ 0x556e534c04c0] mmco: unref short failure
[h264 @ 0x55e4feb59400] mmco: unref short failure
[h264 @ 0x55e4feb59400] mmco: unref short failure
[h264 @ 0x55e4fd6e53c0] mmco: unref short failure
[h264 @ 0x55e4fd6e53c0] mmco: unref short failure
[h264 @ 0x55b7cbaaaf00] mmco: unref short failure
[h264 @ 0x55b7cbaaaf00] mmco: unref short failure
[h264 @ 0x55e4fd745bc0] mmco: unref short failure
[h264 @ 0x55e4fd745bc0] mmco: unref short failure
[h264 @ 0x556e522d3480] mmco: unref short failure
[h264 @ 0x556e522d3480] mmco: unref short failure
[h264 @ 0x556e42b9da80] mmco: unref short failure
[h264 @ 0x55e4fdb196c0] mmco: unref short failure
[h264 @ 0x55b7cbc532c0] mmco: unref short failure
[h264 @ 0x55b7cbc532c0] mmco: unref short failure
[h264 @ 0x556e5252fa00] mmco: unref short failure
[h264 @ 0x556e5252fa00] mmco: unref short failure
[h264 @ 0x556e44696d40] mmco: unref short failure
[h264 @ 0x556e43dd9f80] mmco: unref short failure
[h264 @ 0x55b7cd75b240] mmco: unref short failure
[h264 @ 0x55b7d4988900] mmco: unref short failure
[h264 @ 0x55e504474200] mmco: unref short failure
[h264 @ 0x55e504474200] mmco: unref short failure
[h264 @ 0x55e4fdfe4080] mmco: unref short failure
[h264 @ 0x55e4fd716200] mmco: unref short failure
[h264 @ 0x55e4fd716200] mmco: unref short failure
[h264 @ 0x556e46246700] mmco: unref short failure
[h264 @ 0x556e46246700] mmco: unref short failure
[h264 @ 0x556e46246700] mmco: unref short failure
[h264 @ 0x556e46246700] mmco: unref short failure
[h264 @ 0x556e432b4440] mmco: unref short failure
[h264 @ 0x556e432b4440] mmco: unref short failure
[h264 @ 0x55e4fe789d00] mmco: unref short failure
[h264 @ 0x55e4fe789d00] mmco: unref short failure
 40%|████      | 778/1945 [4:10:04<15:44:58, 48.58s/it][h264 @ 0x556e526b9a40] mmco: unref short failure
[h264 @ 0x556e526b9a40] mmco: unref short failure
 40%|████      | 779/1945 [4:10:12<11:43:54, 36.22s/it][h264 @ 0x55b7cfcfe600] mmco: unref short failure
[h264 @ 0x55b7cfcfe600] mmco: unref short failure
[h264 @ 0x55e4fcd6f800] mmco: unref short failure
[h264 @ 0x55e4fea4dc00] mmco: unref short failure
 40%|████      | 780/1945 [4:10:19<8:51:51, 27.39s/it] [h264 @ 0x556e447ba080] mmco: unref short failure
[h264 @ 0x556e447ba080] mmco: unref short failure
[h264 @ 0x55e4fcec39c0] mmco: unref short failure
 40%|████      | 781/1945 [4:10:25<6:49:22, 21.10s/it][h264 @ 0x55e4feb95480] mmco: unref short failure
[h264 @ 0x55e4feb95480] mmco: unref short failure
[h264 @ 0x55e507513a40] mmco: unref short failure
[h264 @ 0x55e507513a40] mmco: unref short failure
 40%|████      | 782/1945 [4:10:32<5:27:59, 16.92s/it][h264 @ 0x55b7cde2c100] mmco: unref short failure
[h264 @ 0x55b7cde2c100] mmco: unref short failure
 40%|████      | 783/1945 [4:10:39<4:28:00, 13.84s/it] 40%|████      | 784/1945 [4:10:46<3:48:49, 11.83s/it][h264 @ 0x556e43f9e400] mmco: unref short failure
 40%|████      | 785/1945 [4:10:53<3:18:26, 10.26s/it][h264 @ 0x556e4b01b5c0] mmco: unref short failure
[h264 @ 0x556e4b01b5c0] mmco: unref short failure
[h264 @ 0x556e57e1aa80] mmco: unref short failure
[h264 @ 0x55b7cb486580] mmco: unref short failure
[h264 @ 0x556e53baf280] mmco: unref short failure
[h264 @ 0x556e53baf280] mmco: unref short failure
[h264 @ 0x55e4fcc82a00] mmco: unref short failure
[h264 @ 0x55e4fcc82a00] mmco: unref short failure
[h264 @ 0x55b7d425f580] mmco: unref short failure
[h264 @ 0x55b7d425f580] mmco: unref short failure
[h264 @ 0x556e462409c0] mmco: unref short failure
[h264 @ 0x556e558bf0c0] mmco: unref short failure
[h264 @ 0x556e5eb50040] mmco: unref short failure
[h264 @ 0x556e5eb50040] mmco: unref short failure
[h264 @ 0x55e503a49a00] mmco: unref short failure
[h264 @ 0x55e503a49a00] mmco: unref short failure
[h264 @ 0x556e49cec880] mmco: unref short failure
[h264 @ 0x556e49cec880] mmco: unref short failure
[h264 @ 0x55b7d1c00180] mmco: unref short failure
[h264 @ 0x55b7d1c00180] mmco: unref short failure
[h264 @ 0x556e54d05380] mmco: unref short failure
[h264 @ 0x556e49689880] mmco: unref short failure
[h264 @ 0x556e4e049dc0] mmco: unref short failure
[h264 @ 0x556e4e049dc0] mmco: unref short failure
 40%|████      | 786/1945 [4:12:01<8:52:19, 27.56s/it] 40%|████      | 787/1945 [4:12:08<6:53:19, 21.42s/it][h264 @ 0x556e52b81d80] mmco: unref short failure
[h264 @ 0x556e52b81d80] mmco: unref short failure
[h264 @ 0x556e52b81d80] mmco: unref short failure
[h264 @ 0x556e52b81d80] mmco: unref short failure
[h264 @ 0x556e52b81d80] mmco: unref short failure
[h264 @ 0x556e52b81d80] mmco: unref short failure
[h264 @ 0x556e52b81d80] mmco: unref short failure
[h264 @ 0x556e52b81d80] mmco: unref short failure
[h264 @ 0x556e52b81d80] mmco: unref short failure
[h264 @ 0x556e52b81d80] mmco: unref short failure
[h264 @ 0x556e521e6600] mmco: unref short failure
 41%|████      | 788/1945 [4:12:15<5:32:47, 17.26s/it][h264 @ 0x55e4ffb61140] mmco: unref short failure
[h264 @ 0x556e427f94c0] mmco: unref short failure
[h264 @ 0x556e427f94c0] mmco: unref short failure
[h264 @ 0x556e420647c0] mmco: unref short failure
 41%|████      | 789/1945 [4:12:22<4:29:41, 14.00s/it][h264 @ 0x55e4fd630080] mmco: unref short failure
[h264 @ 0x556e47342ec0] mmco: unref short failure
[h264 @ 0x556e47342ec0] mmco: unref short failure
[h264 @ 0x556e4d18f240] mmco: unref short failure
[h264 @ 0x556e4d18f240] mmco: unref short failure
 41%|████      | 790/1945 [4:12:30<3:57:16, 12.33s/it] 41%|████      | 791/1945 [4:12:37<3:24:29, 10.63s/it] 41%|████      | 792/1945 [4:12:44<3:07:07,  9.74s/it] 41%|████      | 793/1945 [4:12:52<2:53:21,  9.03s/it][h264 @ 0x55e501e8b640] mmco: unref short failure
[h264 @ 0x556e558998c0] mmco: unref short failure
[h264 @ 0x556e558998c0] mmco: unref short failure
[h264 @ 0x556e55662f00] mmco: unref short failure
[h264 @ 0x556e55662f00] mmco: unref short failure
[h264 @ 0x55b7cde2b3c0] mmco: unref short failure
[h264 @ 0x55b7d1ddd280] mmco: unref short failure
[h264 @ 0x556e49dbd2c0] mmco: unref short failure
[h264 @ 0x55e50d1ce000] mmco: unref short failure
[h264 @ 0x556e54b2cc00] mmco: unref short failure
[h264 @ 0x556e4d139a00] mmco: unref short failure
[h264 @ 0x55b7d6c00300] mmco: unref short failure
[h264 @ 0x55b7d6c00300] mmco: unref short failure
[h264 @ 0x55b7d6c00300] mmco: unref short failure
[h264 @ 0x55b7d6c00300] mmco: unref short failure
[h264 @ 0x55b7d6c00300] mmco: unref short failure
[h264 @ 0x556e432148c0] mmco: unref short failure
 41%|████      | 794/1945 [4:14:01<8:40:04, 27.11s/it][h264 @ 0x556e4c9e4780] mmco: unref short failure
[h264 @ 0x556e4c9e4780] mmco: unref short failure
[h264 @ 0x55b7d7986e00] mmco: unref short failure
[h264 @ 0x55b7d7986e00] mmco: unref short failure
[h264 @ 0x55b7d7986e00] mmco: unref short failure
 41%|████      | 795/1945 [4:14:08<6:44:58, 21.13s/it][h264 @ 0x556e4297b000] mmco: unref short failure
[h264 @ 0x556e4297b000] mmco: unref short failure
[h264 @ 0x556e56cc1b00] mmco: unref short failure
[h264 @ 0x556e56cc1b00] mmco: unref short failure
not have audios 8-qwaveiHMM.3
 41%|████      | 796/1945 [4:14:16<5:27:00, 17.08s/it] 41%|████      | 797/1945 [4:14:23<4:29:50, 14.10s/it] 41%|████      | 798/1945 [4:14:31<3:52:26, 12.16s/it][h264 @ 0x556e42e64c80] mmco: unref short failure
[h264 @ 0x556e42e64c80] mmco: unref short failure
[h264 @ 0x556e42e64c80] mmco: unref short failure
[h264 @ 0x556e42e64c80] mmco: unref short failure
 41%|████      | 799/1945 [4:14:39<3:33:22, 11.17s/it]09/09/2024 19:40:08 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 19:40:08 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e51598400] mmco: unref short failure
[h264 @ 0x556e51598400] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e47b1d800] mmco: unref short failure
[h264 @ 0x556e47b1d800] mmco: unref short failure
[h264 @ 0x55b7cb7dc180] mmco: unref short failure
[h264 @ 0x55b7cb7dc180] mmco: unref short failure
[h264 @ 0x55b7cb7dc180] mmco: unref short failure
[h264 @ 0x55b7cb7dc180] mmco: unref short failure
[h264 @ 0x556e613a5040] mmco: unref short failure
[h264 @ 0x556e613a5040] mmco: unref short failure
[h264 @ 0x55b7d3e7b140] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e5f87c640] mmco: unref short failure
[h264 @ 0x556e58f81380] mmco: unref short failure
[h264 @ 0x55e5097c8a80] mmco: unref short failure
[h264 @ 0x55e5097c8a80] mmco: unref short failure
[h264 @ 0x55e504bd5d80] mmco: unref short failure
[h264 @ 0x55e504bd5d80] mmco: unref short failure
[h264 @ 0x556e5aaf7b80] mmco: unref short failure
[h264 @ 0x556e5aaf7b80] mmco: unref short failure
[h264 @ 0x556e48bb0c80] mmco: unref short failure
[h264 @ 0x556e474a5900] mmco: unref short failure
[h264 @ 0x556e474a5900] mmco: unref short failure
[h264 @ 0x55b7ce2f5100] mmco: unref short failure
[h264 @ 0x55b7ce2f5100] mmco: unref short failure
[h264 @ 0x55b7ce2f5100] mmco: unref short failure
[h264 @ 0x55b7ce2f5100] mmco: unref short failure
[h264 @ 0x556e44ccffc0] mmco: unref short failure
[h264 @ 0x556e44ccffc0] mmco: unref short failure
[h264 @ 0x55e506a38040] mmco: unref short failure
[h264 @ 0x55e4ff110400] mmco: unref short failure
[h264 @ 0x55e4ff110400] mmco: unref short failure
[h264 @ 0x55e500e29940] mmco: unref short failure
[h264 @ 0x55e500e29940] mmco: unref short failure
[h264 @ 0x55e500e29940] mmco: unref short failure
[h264 @ 0x55e500e29940] mmco: unref short failure
[h264 @ 0x556e59695900] mmco: unref short failure
[h264 @ 0x556e59695900] mmco: unref short failure
[h264 @ 0x556e42fd55c0] mmco: unref short failure
[h264 @ 0x556e42fd55c0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A[h264 @ 0x55b7cd5ed980] mmco: unref short failure
[h264 @ 0x55b7cd5ed980] mmco: unref short failure

  1%|          | 2/221 [00:00<00:37,  5.78it/s][A
  2%|▏         | 4/221 [00:00<00:26,  8.14it/s][A
  2%|▏         | 5/221 [00:00<00:29,  7.37it/s][A[h264 @ 0x556e5e551040] mmco: unref short failure

  3%|▎         | 7/221 [00:01<00:38,  5.50it/s][A
  4%|▎         | 8/221 [00:01<00:37,  5.73it/s][A
  4%|▍         | 9/221 [00:01<00:39,  5.37it/s][A
  5%|▍         | 10/221 [00:03<02:12,  1.59it/s][A
  5%|▍         | 11/221 [00:03<01:43,  2.02it/s][A
  5%|▌         | 12/221 [00:03<01:20,  2.61it/s][A
  6%|▌         | 13/221 [00:03<01:12,  2.87it/s][A
  6%|▋         | 14/221 [00:07<04:52,  1.41s/it][A
  7%|▋         | 15/221 [00:07<03:32,  1.03s/it][A
  7%|▋         | 16/221 [00:09<03:54,  1.15s/it][A[h264 @ 0x556e48a1a5c0] mmco: unref short failure

  8%|▊         | 17/221 [00:10<03:50,  1.13s/it][A
  8%|▊         | 18/221 [00:10<02:49,  1.19it/s][A
  9%|▉         | 20/221 [00:10<01:38,  2.04it/s][A
 10%|▉         | 22/221 [00:11<01:07,  2.96it/s][A
 11%|█         | 24/221 [00:11<00:49,  3.97it/s][A
 11%|█▏        | 25/221 [00:11<00:43,  4.52it/s][A
 12%|█▏        | 26/221 [00:11<00:38,  5.11it/s][A
 13%|█▎        | 28/221 [00:11<00:31,  6.08it/s][A[h264 @ 0x556e56e46140] mmco: unref short failure
[h264 @ 0x556e56e46140] mmco: unref short failure
[h264 @ 0x55b7cb555940] mmco: unref short failure
[h264 @ 0x55b7cb555940] mmco: unref short failure

 13%|█▎        | 29/221 [00:15<03:07,  1.02it/s][A
 14%|█▎        | 30/221 [00:15<02:28,  1.28it/s][A
 14%|█▍        | 31/221 [00:15<01:56,  1.64it/s][A
 15%|█▍        | 33/221 [00:16<01:34,  1.98it/s][A
 15%|█▌        | 34/221 [00:16<01:17,  2.43it/s][A
 16%|█▋        | 36/221 [00:16<00:53,  3.47it/s][A
 17%|█▋        | 37/221 [00:16<00:45,  4.00it/s][A
 17%|█▋        | 38/221 [00:17<00:43,  4.21it/s][A
 18%|█▊        | 39/221 [00:17<00:44,  4.08it/s][A
 18%|█▊        | 40/221 [00:17<00:42,  4.31it/s][A
 19%|█▊        | 41/221 [00:17<00:36,  4.94it/s][A
 19%|█▉        | 43/221 [00:17<00:26,  6.84it/s][A
 20%|██        | 45/221 [00:18<00:21,  8.14it/s][A
 21%|██▏       | 47/221 [00:18<00:18,  9.23it/s][A
 22%|██▏       | 49/221 [00:18<00:18,  9.10it/s][A[h264 @ 0x55e4ff375640] mmco: unref short failure
[h264 @ 0x55e4ff375640] mmco: unref short failure

 23%|██▎       | 50/221 [00:22<02:33,  1.11it/s][A[h264 @ 0x556e47ef84c0] mmco: unref short failure
[h264 @ 0x556e47ef84c0] mmco: unref short failure

 24%|██▎       | 52/221 [00:22<01:47,  1.58it/s][A
 24%|██▍       | 54/221 [00:23<01:16,  2.19it/s][A
 25%|██▍       | 55/221 [00:23<01:08,  2.44it/s][A
 25%|██▌       | 56/221 [00:23<00:59,  2.78it/s][A
 26%|██▌       | 57/221 [00:23<00:53,  3.08it/s][A
 26%|██▌       | 58/221 [00:23<00:43,  3.73it/s][A
 27%|██▋       | 59/221 [00:24<00:47,  3.39it/s][A
 27%|██▋       | 60/221 [00:24<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:24<00:31,  5.01it/s][A
 29%|██▊       | 63/221 [00:24<00:28,  5.47it/s][A
 29%|██▉       | 64/221 [00:24<00:28,  5.43it/s][A
 30%|██▉       | 66/221 [00:25<00:20,  7.54it/s][A
 30%|███       | 67/221 [00:25<00:24,  6.38it/s][A
 31%|███       | 68/221 [00:25<00:36,  4.18it/s][A
 31%|███       | 69/221 [00:26<00:35,  4.26it/s][A
 32%|███▏      | 70/221 [00:26<00:31,  4.79it/s][A
 32%|███▏      | 71/221 [00:26<00:27,  5.52it/s][A
 33%|███▎      | 72/221 [00:26<00:30,  4.89it/s][A
 33%|███▎      | 73/221 [00:26<00:27,  5.40it/s][A
 33%|███▎      | 74/221 [00:27<00:37,  3.88it/s][A
 34%|███▍      | 75/221 [00:27<00:33,  4.34it/s][A
 35%|███▍      | 77/221 [00:27<00:25,  5.71it/s][A
 35%|███▌      | 78/221 [00:27<00:23,  6.02it/s][A
 36%|███▌      | 79/221 [00:27<00:24,  5.85it/s][A
 37%|███▋      | 81/221 [00:28<00:22,  6.10it/s][A[h264 @ 0x556e572f0180] mmco: unref short failure

 37%|███▋      | 82/221 [00:32<02:36,  1.13s/it][A
 38%|███▊      | 83/221 [00:32<02:05,  1.10it/s][A
 38%|███▊      | 85/221 [00:32<01:16,  1.79it/s][A
 39%|███▉      | 86/221 [00:33<01:10,  1.91it/s][A
 39%|███▉      | 87/221 [00:33<00:57,  2.35it/s][A
 40%|███▉      | 88/221 [00:33<00:52,  2.55it/s][A
 40%|████      | 89/221 [00:33<00:49,  2.69it/s][A[h264 @ 0x556e56bfbd00] mmco: unref short failure
[h264 @ 0x556e56bfbd00] mmco: unref short failure

 41%|████      | 90/221 [00:34<00:42,  3.08it/s][A[h264 @ 0x556e56bfbd00] mmco: unref short failure

 41%|████      | 91/221 [00:34<00:37,  3.44it/s][A
 42%|████▏     | 92/221 [00:34<00:31,  4.14it/s][A
 42%|████▏     | 93/221 [00:34<00:26,  4.87it/s][A
 43%|████▎     | 94/221 [00:35<01:00,  2.11it/s][A
 43%|████▎     | 95/221 [00:35<00:48,  2.61it/s][A
 43%|████▎     | 96/221 [00:36<00:39,  3.15it/s][A
 44%|████▍     | 97/221 [00:36<00:53,  2.30it/s][A
 44%|████▍     | 98/221 [00:36<00:41,  2.93it/s][A
 45%|████▌     | 100/221 [00:37<00:26,  4.50it/s][A
 46%|████▌     | 101/221 [00:37<00:23,  5.04it/s][A
 47%|████▋     | 103/221 [00:37<00:17,  6.76it/s][A
 47%|████▋     | 104/221 [00:37<00:18,  6.26it/s][A
 48%|████▊     | 106/221 [00:37<00:15,  7.32it/s][A
 48%|████▊     | 107/221 [00:37<00:17,  6.51it/s][A
 49%|████▉     | 108/221 [00:38<00:19,  5.90it/s][A
 49%|████▉     | 109/221 [00:38<00:19,  5.78it/s][A
 50%|████▉     | 110/221 [00:38<00:24,  4.49it/s][A
 50%|█████     | 111/221 [00:38<00:25,  4.29it/s][A[h264 @ 0x55b7cd031ec0] mmco: unref short failure
[h264 @ 0x55b7cd031ec0] mmco: unref short failure

 51%|█████     | 112/221 [00:39<00:24,  4.52it/s][A
 51%|█████     | 113/221 [00:39<00:36,  2.92it/s][A
 52%|█████▏    | 115/221 [00:39<00:23,  4.51it/s][A
 52%|█████▏    | 116/221 [00:40<00:21,  4.86it/s][A[h264 @ 0x556e609cd180] mmco: unref short failure

 53%|█████▎    | 117/221 [00:40<00:22,  4.71it/s][A
 53%|█████▎    | 118/221 [00:40<00:19,  5.34it/s][A
 54%|█████▍    | 119/221 [00:40<00:19,  5.18it/s][A
 54%|█████▍    | 120/221 [00:40<00:17,  5.84it/s][A
 55%|█████▍    | 121/221 [00:40<00:15,  6.63it/s][A
 55%|█████▌    | 122/221 [00:41<00:15,  6.57it/s][A
 56%|█████▌    | 123/221 [00:41<00:23,  4.12it/s][A
 56%|█████▌    | 124/221 [00:41<00:23,  4.14it/s][A
 57%|█████▋    | 126/221 [00:42<00:19,  4.89it/s][A
 57%|█████▋    | 127/221 [00:42<00:18,  5.16it/s][A
 58%|█████▊    | 129/221 [00:42<00:16,  5.51it/s][A
 59%|█████▉    | 130/221 [00:42<00:17,  5.21it/s][A
 59%|█████▉    | 131/221 [00:43<00:36,  2.48it/s][A
 60%|█████▉    | 132/221 [00:43<00:29,  3.05it/s][A[h264 @ 0x55e50287c6c0] mmco: unref short failure
[h264 @ 0x55e50287c6c0] mmco: unref short failure
[h264 @ 0x55e50287c6c0] mmco: unref short failure
[h264 @ 0x55e50287c6c0] mmco: unref short failure

 60%|██████    | 133/221 [00:44<00:24,  3.59it/s][A
 61%|██████    | 134/221 [00:44<00:24,  3.62it/s][A
 61%|██████    | 135/221 [00:44<00:19,  4.34it/s][A
 62%|██████▏   | 136/221 [00:44<00:18,  4.60it/s][A
 62%|██████▏   | 137/221 [00:44<00:19,  4.40it/s][A
 62%|██████▏   | 138/221 [00:45<00:17,  4.75it/s][A
 63%|██████▎   | 139/221 [00:45<00:17,  4.80it/s][A
 63%|██████▎   | 140/221 [00:45<00:16,  4.99it/s][A
 64%|██████▍   | 141/221 [00:46<00:32,  2.44it/s][A
 64%|██████▍   | 142/221 [00:46<00:27,  2.91it/s][A
 65%|██████▍   | 143/221 [00:46<00:21,  3.68it/s][A
 65%|██████▌   | 144/221 [00:46<00:17,  4.38it/s][A
 66%|██████▌   | 146/221 [00:46<00:11,  6.71it/s][A[h264 @ 0x55b7d23448c0] mmco: unref short failure

 67%|██████▋   | 147/221 [00:47<00:13,  5.39it/s][A
 67%|██████▋   | 148/221 [00:47<00:14,  4.97it/s][A
 67%|██████▋   | 149/221 [00:47<00:14,  4.96it/s][A
 68%|██████▊   | 150/221 [00:47<00:16,  4.35it/s][A
 68%|██████▊   | 151/221 [00:48<00:23,  2.96it/s][A
 69%|██████▉   | 152/221 [00:48<00:20,  3.38it/s][A
 69%|██████▉   | 153/221 [00:48<00:16,  4.19it/s][A
 70%|███████   | 155/221 [00:49<00:11,  5.93it/s][A
 71%|███████   | 156/221 [00:49<00:10,  6.34it/s][A[h264 @ 0x55e50784aec0] mmco: unref short failure
[h264 @ 0x55e50784aec0] mmco: unref short failure
[h264 @ 0x55e50784aec0] mmco: unref short failure
[h264 @ 0x55e50784aec0] mmco: unref short failure
[h264 @ 0x55e50784aec0] mmco: unref short failure

 71%|███████▏  | 158/221 [00:49<00:09,  6.44it/s][A
 72%|███████▏  | 159/221 [00:49<00:09,  6.28it/s][A
 72%|███████▏  | 160/221 [00:49<00:11,  5.16it/s][A
 73%|███████▎  | 161/221 [00:50<00:10,  5.84it/s][A
 73%|███████▎  | 162/221 [00:50<00:10,  5.72it/s][A
 74%|███████▍  | 163/221 [00:50<00:10,  5.77it/s][A
 75%|███████▍  | 165/221 [00:50<00:07,  7.22it/s][A
 75%|███████▌  | 166/221 [00:50<00:07,  7.64it/s][A
 76%|███████▌  | 167/221 [00:50<00:06,  7.77it/s][A[h264 @ 0x556e53147640] mmco: unref short failure
[h264 @ 0x556e53147640] mmco: unref short failure

 76%|███████▌  | 168/221 [00:50<00:06,  8.12it/s][A
 76%|███████▋  | 169/221 [00:51<00:07,  7.18it/s][A[h264 @ 0x556e5866b0c0] mmco: unref short failure
[h264 @ 0x556e5866b0c0] mmco: unref short failure

 77%|███████▋  | 170/221 [00:52<00:20,  2.55it/s][A
 77%|███████▋  | 171/221 [00:52<00:16,  2.97it/s][A
 78%|███████▊  | 172/221 [00:52<00:13,  3.70it/s][A
 78%|███████▊  | 173/221 [00:52<00:14,  3.38it/s][A
 79%|███████▊  | 174/221 [00:53<00:17,  2.71it/s][A
 79%|███████▉  | 175/221 [00:53<00:14,  3.13it/s][A
 80%|███████▉  | 176/221 [00:53<00:11,  3.83it/s][A
 80%|████████  | 177/221 [00:54<00:15,  2.79it/s][A
 81%|████████  | 178/221 [00:54<00:13,  3.19it/s][A
 81%|████████  | 179/221 [00:54<00:14,  2.85it/s][A
 82%|████████▏ | 181/221 [00:55<00:09,  4.18it/s][A
 83%|████████▎ | 183/221 [00:55<00:08,  4.60it/s][A
 84%|████████▎ | 185/221 [00:55<00:06,  5.27it/s][A
 85%|████████▍ | 187/221 [00:56<00:07,  4.36it/s][A
 85%|████████▌ | 188/221 [00:56<00:07,  4.51it/s][A
 86%|████████▌ | 190/221 [00:56<00:05,  5.83it/s][A
 87%|████████▋ | 192/221 [00:56<00:04,  6.98it/s][A
 88%|████████▊ | 194/221 [00:57<00:03,  8.02it/s][A[h264 @ 0x556e5b4d9c00] mmco: unref short failure

 88%|████████▊ | 195/221 [00:59<00:13,  1.90it/s][A
 89%|████████▊ | 196/221 [00:59<00:11,  2.25it/s][A
 89%|████████▉ | 197/221 [00:59<00:08,  2.67it/s][A
 90%|████████▉ | 198/221 [00:59<00:07,  3.19it/s][A
 90%|█████████ | 199/221 [00:59<00:05,  3.79it/s][A
 91%|█████████ | 201/221 [01:00<00:04,  4.70it/s][A
 91%|█████████▏| 202/221 [01:00<00:03,  5.18it/s][A
 92%|█████████▏| 203/221 [01:00<00:05,  3.27it/s][A
 92%|█████████▏| 204/221 [01:01<00:04,  3.65it/s][A
 93%|█████████▎| 205/221 [01:01<00:05,  2.89it/s][A
 93%|█████████▎| 206/221 [01:01<00:04,  3.32it/s][A
 94%|█████████▎| 207/221 [01:01<00:03,  3.93it/s][A
 95%|█████████▍| 209/221 [01:02<00:02,  5.69it/s][A
 95%|█████████▌| 210/221 [01:02<00:02,  5.34it/s][A
 95%|█████████▌| 211/221 [01:02<00:01,  5.45it/s][A
 96%|█████████▌| 212/221 [01:02<00:01,  5.53it/s][A
 96%|█████████▋| 213/221 [01:02<00:01,  6.10it/s][A[h264 @ 0x55b7d40f1e40] mmco: unref short failure
[h264 @ 0x55b7d40f1e40] mmco: unref short failure

 97%|█████████▋| 215/221 [01:02<00:00,  7.64it/s][A
 98%|█████████▊| 216/221 [01:03<00:00,  7.25it/s][A
 98%|█████████▊| 217/221 [01:03<00:00,  7.70it/s][A
 99%|█████████▉| 219/221 [01:03<00:00,  6.33it/s][A
100%|█████████▉| 220/221 [01:03<00:00,  6.60it/s][A100%|█████████▉| 220/221 [01:03<00:00,  3.45it/s]
[h264 @ 0x556e51ff6a40] mmco: unref short failure
[h264 @ 0x556e51ff6a40] mmco: unref short failure
[h264 @ 0x55b7d71cb500] mmco: unref short failure
not have audios ua_Kowav7hg.20
[h264 @ 0x556e49dcb540] mmco: unref short failure
[h264 @ 0x55e509206540] mmco: unref short failure
[h264 @ 0x55e509206540] mmco: unref short failure
[h264 @ 0x55b7d47e1680] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.78it/s][A
  1%|          | 2/221 [00:00<00:57,  3.79it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.78it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.78it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.78it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.78it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.78it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.78it/s][A
  4%|▍         | 9/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.79it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.78it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.78it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.79it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.79it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.78it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.78it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.78it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.78it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.78it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.78it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.78it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.78it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.78it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.78it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.78it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.78it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.78it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.78it/s][A
 43%|████▎     | 96/221 [00:25<00:33,  3.78it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.78it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.78it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.78it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.78it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.78it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.78it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.78it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.78it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.78it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.78it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.78it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.78it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.78it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 115/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.78it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.78it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.78it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.78it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.78it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.78it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.78it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.78it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.78it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 134/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.78it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.78it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.78it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.78it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.78it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.78it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.78it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.78it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.78it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.78it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.78it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.78it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.78it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.78it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.78it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.78it/s][A
 76%|███████▌  | 168/221 [00:44<00:14,  3.78it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.78it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.78it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.78it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.78it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.78it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.78it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.78it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.78it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.78it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.78it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.78it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.78it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.78it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 193/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [00:56<00:02,  3.78it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.78it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.78it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.78it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.78it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.78it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.78it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.78it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:27,  7.95it/s][A
  1%|          | 2/221 [00:00<00:38,  5.75it/s][A
  1%|▏         | 3/221 [00:00<00:42,  5.18it/s][A
  2%|▏         | 4/221 [00:00<00:35,  6.12it/s][A
  2%|▏         | 5/221 [00:00<00:36,  5.97it/s][A
  3%|▎         | 7/221 [00:01<00:39,  5.48it/s][A
  4%|▎         | 8/221 [00:01<00:48,  4.37it/s][A
  4%|▍         | 9/221 [00:01<00:44,  4.72it/s][A
  5%|▍         | 10/221 [00:02<01:05,  3.22it/s][A
  5%|▍         | 11/221 [00:02<01:00,  3.49it/s][A
  5%|▌         | 12/221 [00:02<00:52,  3.95it/s][A
  6%|▌         | 13/221 [00:03<01:28,  2.34it/s][A
  7%|▋         | 15/221 [00:03<01:05,  3.14it/s][A
  7%|▋         | 16/221 [00:04<01:07,  3.05it/s][A
  8%|▊         | 17/221 [00:04<01:16,  2.68it/s][A
  8%|▊         | 18/221 [00:05<01:16,  2.67it/s][A
  9%|▊         | 19/221 [00:05<01:11,  2.84it/s][A
  9%|▉         | 20/221 [00:05<00:56,  3.55it/s][A
 10%|▉         | 21/221 [00:05<00:51,  3.86it/s][A
 10%|▉         | 22/221 [00:05<00:43,  4.59it/s][A
 11%|█         | 24/221 [00:06<00:35,  5.53it/s][A
 11%|█▏        | 25/221 [00:06<00:37,  5.28it/s][A
 12%|█▏        | 26/221 [00:06<00:41,  4.67it/s][A
 12%|█▏        | 27/221 [00:06<00:40,  4.76it/s][A
 13%|█▎        | 28/221 [00:07<00:44,  4.34it/s][A
 13%|█▎        | 29/221 [00:07<00:46,  4.10it/s][A
 14%|█▎        | 30/221 [00:07<00:45,  4.24it/s][A
 14%|█▍        | 31/221 [00:07<00:42,  4.52it/s][A
 14%|█▍        | 32/221 [00:07<00:38,  4.96it/s][A
 15%|█▍        | 33/221 [00:08<00:37,  4.95it/s][A
 15%|█▌        | 34/221 [00:08<00:42,  4.38it/s][A
 16%|█▌        | 35/221 [00:08<00:52,  3.52it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.84it/s][A
 17%|█▋        | 37/221 [00:09<00:50,  3.61it/s][A
 17%|█▋        | 38/221 [00:09<00:47,  3.82it/s][A
 18%|█▊        | 39/221 [00:09<00:47,  3.86it/s][A
 18%|█▊        | 40/221 [00:10<00:55,  3.27it/s][A
 19%|█▊        | 41/221 [00:10<00:45,  3.97it/s][A
 19%|█▉        | 42/221 [00:10<00:44,  4.03it/s][A
 19%|█▉        | 43/221 [00:10<00:47,  3.72it/s][A
 20%|█▉        | 44/221 [00:11<00:41,  4.22it/s][A
 20%|██        | 45/221 [00:11<00:38,  4.59it/s][A
 21%|██        | 46/221 [00:11<00:41,  4.24it/s][A
 21%|██▏       | 47/221 [00:11<00:43,  3.96it/s][A
 22%|██▏       | 48/221 [00:12<00:42,  4.12it/s][A
 22%|██▏       | 49/221 [00:12<00:41,  4.14it/s][A
 23%|██▎       | 50/221 [00:12<00:45,  3.72it/s][A
 24%|██▎       | 52/221 [00:13<00:37,  4.53it/s][A
 24%|██▍       | 53/221 [00:13<00:33,  5.01it/s][A
 24%|██▍       | 54/221 [00:13<00:41,  4.04it/s][A
 25%|██▍       | 55/221 [00:13<00:37,  4.43it/s][A
 25%|██▌       | 56/221 [00:13<00:35,  4.66it/s][A
 26%|██▌       | 57/221 [00:14<00:38,  4.26it/s][A
 26%|██▌       | 58/221 [00:14<00:43,  3.77it/s][A
 27%|██▋       | 59/221 [00:14<00:44,  3.65it/s][A
 28%|██▊       | 61/221 [00:15<00:35,  4.46it/s][A
 28%|██▊       | 62/221 [00:15<00:35,  4.45it/s][A
 29%|██▉       | 64/221 [00:15<00:31,  4.92it/s][A
 29%|██▉       | 65/221 [00:15<00:28,  5.49it/s][A
 30%|██▉       | 66/221 [00:16<00:39,  3.89it/s][A
 30%|███       | 67/221 [00:16<00:54,  2.85it/s][A
 31%|███       | 68/221 [00:17<00:44,  3.41it/s][A
 31%|███       | 69/221 [00:17<00:58,  2.61it/s][A
 32%|███▏      | 70/221 [00:17<00:46,  3.22it/s][A
 32%|███▏      | 71/221 [00:18<00:47,  3.13it/s][A
 33%|███▎      | 72/221 [00:18<00:54,  2.74it/s][A
 33%|███▎      | 73/221 [00:18<00:43,  3.40it/s][A
 33%|███▎      | 74/221 [00:18<00:37,  3.95it/s][A
 34%|███▍      | 75/221 [00:19<00:37,  3.92it/s][A
 34%|███▍      | 76/221 [00:19<00:36,  4.02it/s][A
 35%|███▍      | 77/221 [00:19<00:34,  4.19it/s][A
 35%|███▌      | 78/221 [00:19<00:30,  4.68it/s][A
 36%|███▌      | 79/221 [00:20<00:57,  2.48it/s][A
 36%|███▌      | 80/221 [00:20<00:48,  2.90it/s][A
 37%|███▋      | 81/221 [00:21<00:42,  3.32it/s][A
 37%|███▋      | 82/221 [00:21<00:47,  2.93it/s][A
 38%|███▊      | 83/221 [00:21<00:45,  3.03it/s][A
 38%|███▊      | 84/221 [00:21<00:40,  3.34it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.85it/s][A
 39%|███▉      | 86/221 [00:22<00:32,  4.20it/s][A
 39%|███▉      | 87/221 [00:22<00:31,  4.22it/s][A
 40%|███▉      | 88/221 [00:23<00:42,  3.14it/s][A
 40%|████      | 89/221 [00:23<00:48,  2.70it/s][A
 41%|████      | 90/221 [00:23<00:44,  2.92it/s][A
 41%|████      | 91/221 [00:24<00:37,  3.48it/s][A
 42%|████▏     | 92/221 [00:24<00:39,  3.25it/s][A
 42%|████▏     | 93/221 [00:25<01:00,  2.12it/s][A
 43%|████▎     | 94/221 [00:25<00:57,  2.21it/s][A
 43%|████▎     | 95/221 [00:25<00:50,  2.48it/s][A
 43%|████▎     | 96/221 [00:26<00:41,  3.04it/s][A
 44%|████▍     | 97/221 [00:26<00:36,  3.41it/s][A
 44%|████▍     | 98/221 [00:26<00:35,  3.45it/s][A
 45%|████▍     | 99/221 [00:26<00:33,  3.69it/s][A
 45%|████▌     | 100/221 [00:27<00:33,  3.62it/s][A
 46%|████▌     | 101/221 [00:27<00:40,  2.95it/s][A
 46%|████▌     | 102/221 [00:28<00:48,  2.48it/s][A
 47%|████▋     | 103/221 [00:28<00:40,  2.95it/s][A
 47%|████▋     | 104/221 [00:28<00:36,  3.19it/s][A
 48%|████▊     | 105/221 [00:28<00:32,  3.55it/s][A
 48%|████▊     | 106/221 [00:29<00:34,  3.35it/s][A
 48%|████▊     | 107/221 [00:29<00:32,  3.52it/s][A
 49%|████▉     | 108/221 [00:29<00:32,  3.50it/s][A
 49%|████▉     | 109/221 [00:29<00:28,  3.98it/s][A
 50%|████▉     | 110/221 [00:30<00:28,  3.83it/s][A
 50%|█████     | 111/221 [00:30<00:31,  3.48it/s][A
 51%|█████     | 112/221 [00:30<00:33,  3.23it/s][A
 51%|█████     | 113/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:31<00:23,  4.59it/s][A
 52%|█████▏    | 115/221 [00:31<00:23,  4.49it/s][A
 52%|█████▏    | 116/221 [00:31<00:28,  3.69it/s][A
 53%|█████▎    | 117/221 [00:31<00:25,  4.01it/s][A
 53%|█████▎    | 118/221 [00:32<00:27,  3.74it/s][A
 54%|█████▍    | 119/221 [00:32<00:36,  2.83it/s][A
 54%|█████▍    | 120/221 [00:33<00:32,  3.10it/s][A
 55%|█████▌    | 122/221 [00:33<00:25,  3.95it/s][A
 56%|█████▌    | 123/221 [00:33<00:25,  3.82it/s][A
 56%|█████▌    | 124/221 [00:33<00:22,  4.31it/s][A
 57%|█████▋    | 125/221 [00:34<00:26,  3.62it/s][A
 57%|█████▋    | 126/221 [00:34<00:28,  3.39it/s][A
 57%|█████▋    | 127/221 [00:34<00:29,  3.18it/s][A
 58%|█████▊    | 128/221 [00:35<00:26,  3.46it/s][A
 58%|█████▊    | 129/221 [00:35<00:24,  3.72it/s][A
 59%|█████▉    | 130/221 [00:35<00:22,  4.01it/s][A
 60%|█████▉    | 132/221 [00:35<00:14,  5.94it/s][A
 60%|██████    | 133/221 [00:36<00:18,  4.75it/s][A
 61%|██████    | 134/221 [00:36<00:18,  4.79it/s][A
 61%|██████    | 135/221 [00:36<00:16,  5.06it/s][A
 62%|██████▏   | 136/221 [00:36<00:17,  4.82it/s][A
 62%|██████▏   | 137/221 [00:36<00:16,  5.00it/s][A
 62%|██████▏   | 138/221 [00:37<00:19,  4.32it/s][A
 63%|██████▎   | 139/221 [00:37<00:22,  3.62it/s][A
 63%|██████▎   | 140/221 [00:37<00:21,  3.72it/s][A
 64%|██████▍   | 141/221 [00:38<00:20,  3.81it/s][A
 64%|██████▍   | 142/221 [00:38<00:18,  4.17it/s][A
 65%|██████▍   | 143/221 [00:38<00:24,  3.18it/s][A
 65%|██████▌   | 144/221 [00:39<00:28,  2.72it/s][A
 66%|██████▌   | 145/221 [00:39<00:21,  3.47it/s][A
 67%|██████▋   | 147/221 [00:39<00:17,  4.11it/s][A
 67%|██████▋   | 148/221 [00:40<00:24,  3.03it/s][A
 67%|██████▋   | 149/221 [00:40<00:21,  3.32it/s][A
 68%|██████▊   | 150/221 [00:40<00:21,  3.37it/s][A
 68%|██████▊   | 151/221 [00:41<00:22,  3.11it/s][A
 69%|██████▉   | 152/221 [00:41<00:30,  2.29it/s][A
 69%|██████▉   | 153/221 [00:42<00:24,  2.76it/s][A
 70%|██████▉   | 154/221 [00:42<00:21,  3.13it/s][A
 70%|███████   | 155/221 [00:42<00:18,  3.56it/s][A
 71%|███████   | 156/221 [00:42<00:22,  2.90it/s][A
 71%|███████   | 157/221 [00:43<00:20,  3.06it/s][A
 71%|███████▏  | 158/221 [00:43<00:19,  3.28it/s][A
 72%|███████▏  | 159/221 [00:43<00:16,  3.69it/s][A
 72%|███████▏  | 160/221 [00:43<00:14,  4.11it/s][A
 73%|███████▎  | 161/221 [00:44<00:18,  3.17it/s][A
 73%|███████▎  | 162/221 [00:44<00:17,  3.28it/s][A
 74%|███████▍  | 163/221 [00:44<00:16,  3.54it/s][A
 74%|███████▍  | 164/221 [00:45<00:15,  3.63it/s][A
 75%|███████▍  | 165/221 [00:45<00:15,  3.67it/s][A
 75%|███████▌  | 166/221 [00:45<00:14,  3.71it/s][A
 76%|███████▌  | 167/221 [00:45<00:11,  4.54it/s][A
 76%|███████▌  | 168/221 [00:46<00:13,  3.86it/s][A
 76%|███████▋  | 169/221 [00:46<00:13,  3.98it/s][A
 77%|███████▋  | 170/221 [00:46<00:18,  2.80it/s][A
 77%|███████▋  | 171/221 [00:47<00:14,  3.44it/s][A
 78%|███████▊  | 172/221 [00:47<00:11,  4.10it/s][A
 78%|███████▊  | 173/221 [00:47<00:12,  3.82it/s][A
 79%|███████▊  | 174/221 [00:47<00:14,  3.23it/s][A
 79%|███████▉  | 175/221 [00:48<00:14,  3.09it/s][A
 80%|███████▉  | 176/221 [00:48<00:12,  3.48it/s][A
 80%|████████  | 177/221 [00:48<00:11,  3.89it/s][A
 81%|████████  | 178/221 [00:48<00:10,  4.27it/s][A
 81%|████████  | 179/221 [00:49<00:09,  4.20it/s][A
 81%|████████▏ | 180/221 [00:49<00:08,  4.69it/s][A
 82%|████████▏ | 181/221 [00:49<00:10,  3.91it/s][A
 82%|████████▏ | 182/221 [00:49<00:10,  3.68it/s][A
 83%|████████▎ | 183/221 [00:50<00:10,  3.50it/s][A
 83%|████████▎ | 184/221 [00:50<00:08,  4.29it/s][A
 84%|████████▎ | 185/221 [00:50<00:07,  4.72it/s][A
 84%|████████▍ | 186/221 [00:50<00:09,  3.67it/s][A
 85%|████████▍ | 187/221 [00:51<00:08,  3.81it/s][A
 85%|████████▌ | 188/221 [00:51<00:09,  3.65it/s][A
 86%|████████▌ | 189/221 [00:51<00:08,  3.56it/s][A
 86%|████████▌ | 190/221 [00:52<00:10,  2.85it/s][A
 86%|████████▋ | 191/221 [00:52<00:08,  3.45it/s][A
 87%|████████▋ | 192/221 [00:52<00:10,  2.89it/s][A
 87%|████████▋ | 193/221 [00:53<00:07,  3.53it/s][A
 88%|████████▊ | 194/221 [00:53<00:08,  3.30it/s][A
 88%|████████▊ | 195/221 [00:53<00:07,  3.39it/s][A
 89%|████████▊ | 196/221 [00:54<00:08,  3.12it/s][A
 89%|████████▉ | 197/221 [00:54<00:06,  3.61it/s][A
 90%|████████▉ | 198/221 [00:54<00:08,  2.80it/s][A
 90%|█████████ | 199/221 [00:55<00:07,  3.12it/s][A
 90%|█████████ | 200/221 [00:55<00:07,  2.87it/s][A
 91%|█████████ | 201/221 [00:55<00:06,  3.06it/s][A
 91%|█████████▏| 202/221 [00:56<00:06,  2.91it/s][A
 92%|█████████▏| 203/221 [00:56<00:05,  3.60it/s][A
 92%|█████████▏| 204/221 [00:56<00:06,  2.69it/s][A
 93%|█████████▎| 205/221 [00:56<00:04,  3.34it/s][A
 93%|█████████▎| 206/221 [00:57<00:04,  3.22it/s][A
 94%|█████████▎| 207/221 [00:57<00:03,  3.55it/s][A
 94%|█████████▍| 208/221 [00:57<00:03,  4.06it/s][A
 95%|█████████▍| 209/221 [00:57<00:03,  3.69it/s][A
 95%|█████████▌| 210/221 [00:58<00:02,  3.79it/s][A
 95%|█████████▌| 211/221 [00:58<00:02,  3.39it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  3.43it/s][A
 96%|█████████▋| 213/221 [00:59<00:02,  3.72it/s][A
 97%|█████████▋| 214/221 [00:59<00:02,  2.98it/s][A
 97%|█████████▋| 215/221 [00:59<00:01,  3.10it/s][A
 98%|█████████▊| 216/221 [01:00<00:01,  3.16it/s][A
 98%|█████████▊| 217/221 [01:00<00:01,  3.50it/s][A
 99%|█████████▊| 218/221 [01:00<00:00,  3.43it/s][A
 99%|█████████▉| 219/221 [01:01<00:00,  3.05it/s][A
100%|█████████▉| 220/221 [01:01<00:00,  3.14it/s][A
100%|██████████| 221/221 [01:01<00:00,  3.00it/s][A100%|██████████| 221/221 [01:01<00:00,  3.58it/s]
09/09/2024 19:45:53 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 799--===========

09/09/2024 19:45:53 - INFO - __main__ -   {'area_r1': 26.7, 'area_recall': '26.7/49.2/58.7', 'area_ravg': 44.9}
09/09/2024 19:45:53 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 799--===========

09/09/2024 19:45:53 - INFO - __main__ -   {'forward_r1': 35.3, 'forward_recall': '35.3/60.9/71.8', 'forward_ravg': 56.0}
09/09/2024 19:45:53 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 799--===========

09/09/2024 19:45:53 - INFO - __main__ -   {'area_video_r1': 39.7, 'area_video_recall': '39.7/69.7/80.0', 'area_video_ravg': 63.1}
09/09/2024 19:45:53 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 299=======

09/09/2024 19:45:53 - INFO - __main__ -   {'area_video_r1': 40.6, 'area_video_recall': '40.6/66.7/79.0', 'area_video_ravg': 62.1}
09/09/2024 19:45:53 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 799--===========

09/09/2024 19:45:53 - INFO - __main__ -   {'area_video_r1': 50.2, 'area_video_recall': '50.2/70.4/77.6', 'area_video_ravg': 66.1, 'area_video_back_r1': 50.0, 'area_video_back_recall': '50.0/73.0/80.7', 'area_video_back_ravg': 67.9}
09/09/2024 19:45:53 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 19:45:53 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 19:45:53 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 799--===========

09/09/2024 19:45:53 - INFO - __main__ -   {'video_r1': 42.9, 'video_recall': '42.9/69.7/80.5', 'video_ravg': 64.4}
09/09/2024 19:45:53 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 19:45:53 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 19:45:53 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 799--===========

09/09/2024 19:45:53 - INFO - __main__ -   {'video_r1': 51.5, 'video_recall': '51.5/75.3/82.8', 'video_ravg': 69.9}
09/09/2024 19:45:53 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 599=======

09/09/2024 19:45:53 - INFO - __main__ -   {'video_r1': 52.7, 'video_recall': '52.7/76.1/82.8', 'video_ravg': 70.6}
09/09/2024 19:46:15 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.4456912279129028, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.024512797594070435, 'loss_ret%tv%ta--finetune_area/loss_area': 1.1774780750274658, 'loss_ret%tv%ta--finetune_area/total_loss': 2.6476821899414062}
 41%|████      | 800/1945 [4:20:50<37:48:11, 118.86s/it][h264 @ 0x556e44999b00] mmco: unref short failure
[h264 @ 0x556e44999b00] mmco: unref short failure
 41%|████      | 801/1945 [4:20:54<26:48:56, 84.38s/it] [h264 @ 0x55b7d796a700] mmco: unref short failure
[h264 @ 0x55e50cd44040] mmco: unref short failure
[h264 @ 0x55e50cd44040] mmco: unref short failure
 41%|████      | 802/1945 [4:20:58<19:10:59, 60.42s/it] 41%|████▏     | 803/1945 [4:21:03<13:55:35, 43.90s/it][h264 @ 0x556e547b71c0] mmco: unref short failure
[h264 @ 0x55b7d067fd00] mmco: unref short failure
[h264 @ 0x55b7d067fd00] mmco: unref short failure
 41%|████▏     | 804/1945 [4:21:09<10:16:36, 32.42s/it][h264 @ 0x55b7d235f840] mmco: unref short failure
[h264 @ 0x55b7d235f840] mmco: unref short failure
 41%|████▏     | 805/1945 [4:21:15<7:46:06, 24.53s/it]  41%|████▏     | 806/1945 [4:21:22<6:04:19, 19.19s/it] 41%|████▏     | 807/1945 [4:21:29<4:56:25, 15.63s/it][h264 @ 0x556e5e9291c0] mmco: unref short failure
[h264 @ 0x556e5e9291c0] mmco: unref short failure
[h264 @ 0x55b7d47af3c0] mmco: unref short failure
[h264 @ 0x556e48bc2a40] mmco: unref short failure
 42%|████▏     | 808/1945 [4:21:36<4:08:06, 13.09s/it][h264 @ 0x556e572bfe40] mmco: unref short failure
[h264 @ 0x556e43fc3a80] mmco: unref short failure
 42%|████▏     | 809/1945 [4:21:44<3:35:00, 11.36s/it][h264 @ 0x556e4e9bd1c0] mmco: unref short failure
[h264 @ 0x556e4e9bd1c0] mmco: unref short failure
[h264 @ 0x55b7d0967e00] mmco: unref short failure
[h264 @ 0x556e54337d00] mmco: unref short failure
[h264 @ 0x556e54337d00] mmco: unref short failure
 42%|████▏     | 810/1945 [4:21:51<3:09:52, 10.04s/it][h264 @ 0x55b7db2faf40] mmco: unref short failure
[h264 @ 0x55b7db2faf40] mmco: unref short failure
[h264 @ 0x55e506de1500] mmco: unref short failure
[h264 @ 0x556e431e6c40] mmco: unref short failure
[h264 @ 0x556e431e6c40] mmco: unref short failure
 42%|████▏     | 811/1945 [4:21:58<2:54:05,  9.21s/it][h264 @ 0x55b7cbeded40] mmco: unref short failure
[h264 @ 0x55b7cbeded40] mmco: unref short failure
 42%|████▏     | 812/1945 [4:22:05<2:43:48,  8.67s/it] 42%|████▏     | 813/1945 [4:22:12<2:34:20,  8.18s/it][h264 @ 0x556e464d1d00] mmco: unref short failure
[h264 @ 0x55e502a34a00] mmco: unref short failure
[h264 @ 0x556e52e16e00] mmco: unref short failure
[h264 @ 0x556e52e16e00] mmco: unref short failure
[h264 @ 0x556e52e16e00] mmco: unref short failure
[h264 @ 0x556e52e16e00] mmco: unref short failure
[h264 @ 0x556e52e16e00] mmco: unref short failure
[h264 @ 0x556e52e16e00] mmco: unref short failure
 42%|████▏     | 814/1945 [4:22:20<2:33:14,  8.13s/it] 42%|████▏     | 815/1945 [4:22:28<2:27:37,  7.84s/it] 42%|████▏     | 816/1945 [4:22:36<2:28:21,  7.88s/it][h264 @ 0x556e555a7140] mmco: unref short failure
[h264 @ 0x556e555a7140] mmco: unref short failure
[h264 @ 0x556e4dbbd640] mmco: unref short failure
[h264 @ 0x556e4dbbd640] mmco: unref short failure
[h264 @ 0x556e4dbbd640] mmco: unref short failure
[h264 @ 0x556e4dbbd640] mmco: unref short failure
[h264 @ 0x556e5a2a0300] mmco: unref short failure
[h264 @ 0x556e5a2a0300] mmco: unref short failure
 42%|████▏     | 817/1945 [4:22:46<2:42:22,  8.64s/it] 42%|████▏     | 818/1945 [4:22:55<2:43:20,  8.70s/it] 42%|████▏     | 819/1945 [4:23:02<2:35:22,  8.28s/it][h264 @ 0x55e4fea64500] mmco: unref short failure
 42%|████▏     | 820/1945 [4:23:10<2:33:15,  8.17s/it][h264 @ 0x55b7cbb75140] mmco: unref short failure
[h264 @ 0x556e564b7680] mmco: unref short failure
 42%|████▏     | 821/1945 [4:23:30<3:36:58, 11.58s/it][h264 @ 0x556e66098980] mmco: unref short failure
[h264 @ 0x556e66098980] mmco: unref short failure
 42%|████▏     | 822/1945 [4:23:37<3:12:28, 10.28s/it][h264 @ 0x55e509c5e540] mmco: unref short failure
[h264 @ 0x55e509c5e540] mmco: unref short failure
[h264 @ 0x55e509c5e540] mmco: unref short failure
[h264 @ 0x55e509c5e540] mmco: unref short failure
 42%|████▏     | 823/1945 [4:23:45<2:58:08,  9.53s/it][h264 @ 0x556e613cd440] mmco: unref short failure
[h264 @ 0x556e613cd440] mmco: unref short failure
[h264 @ 0x55e4fd53de40] mmco: unref short failure
[h264 @ 0x55e4fd53de40] mmco: unref short failure
[h264 @ 0x55b7cd9af400] mmco: unref short failure
[h264 @ 0x55b7d2213d80] mmco: unref short failure
[h264 @ 0x55b7d2213d80] mmco: unref short failure
[h264 @ 0x55b7d267db00] mmco: unref short failure
[h264 @ 0x55b7d267db00] mmco: unref short failure
 42%|████▏     | 824/1945 [4:24:26<5:59:34, 19.25s/it][h264 @ 0x55b7cc8a1480] mmco: unref short failure
[h264 @ 0x55b7cc8a1480] mmco: unref short failure
[h264 @ 0x556e4a50dfc0] mmco: unref short failure
[h264 @ 0x556e4a50dfc0] mmco: unref short failure
[h264 @ 0x55e500cd2940] mmco: unref short failure
[h264 @ 0x55e500cd2940] mmco: unref short failure
[h264 @ 0x55b7cacee400] mmco: unref short failure
[h264 @ 0x55e510db0640] mmco: unref short failure
[h264 @ 0x55e510db0640] mmco: unref short failure
 42%|████▏     | 825/1945 [4:24:47<6:05:45, 19.59s/it][h264 @ 0x556e531f48c0] mmco: unref short failure
[h264 @ 0x556e5d1d4340] mmco: unref short failure
 42%|████▏     | 826/1945 [4:24:58<5:17:40, 17.03s/it][h264 @ 0x55e50b38e940] mmco: unref short failure
[h264 @ 0x55e50b38e940] mmco: unref short failure
[h264 @ 0x55e50b38e940] mmco: unref short failure
[h264 @ 0x55e50b38e940] mmco: unref short failure
[h264 @ 0x55e50cd3c980] mmco: unref short failure
[h264 @ 0x556e58097a00] mmco: unref short failure
[h264 @ 0x556e58097a00] mmco: unref short failure
[h264 @ 0x556e58097a00] mmco: unref short failure
[h264 @ 0x556e58097a00] mmco: unref short failure
[h264 @ 0x556e4883ec80] mmco: unref short failure
 43%|████▎     | 827/1945 [4:25:05<4:21:55, 14.06s/it][h264 @ 0x556e4883ec80] mmco: unref short failure
[h264 @ 0x55b7dec73940] mmco: unref short failure
[h264 @ 0x55b7dec73940] mmco: unref short failure
[h264 @ 0x556e460e1e40] mmco: unref short failure
 43%|████▎     | 828/1945 [4:25:12<3:43:09, 11.99s/it][h264 @ 0x55b7dd64bb40] mmco: unref short failure
[h264 @ 0x55b7dd64bb40] mmco: unref short failure
[h264 @ 0x55b7d78f3700] mmco: unref short failure
[h264 @ 0x556e4dfc2340] mmco: unref short failure
[h264 @ 0x556e4dfc2340] mmco: unref short failure
[h264 @ 0x55e4fea639c0] mmco: unref short failure
[h264 @ 0x55e4fea639c0] mmco: unref short failure
[h264 @ 0x55e5067d8240] mmco: unref short failure
[h264 @ 0x55e5067d8240] mmco: unref short failure
 43%|████▎     | 829/1945 [4:25:30<4:16:26, 13.79s/it][h264 @ 0x55e50a763a40] mmco: unref short failure
 43%|████▎     | 830/1945 [4:25:37<3:39:27, 11.81s/it][h264 @ 0x55b7dc637dc0] mmco: unref short failure
[h264 @ 0x55b7dc637dc0] mmco: unref short failure
 43%|████▎     | 831/1945 [4:25:46<3:22:34, 10.91s/it][h264 @ 0x556e4dfc27c0] mmco: unref short failure
[h264 @ 0x556e4dfc27c0] mmco: unref short failure
[h264 @ 0x556e53815ec0] mmco: unref short failure
[h264 @ 0x556e53815ec0] mmco: unref short failure
[h264 @ 0x55b7db28cf80] mmco: unref short failure
[h264 @ 0x55b7db28cf80] mmco: unref short failure
[h264 @ 0x556e66e15000] mmco: unref short failure
[h264 @ 0x55b7db2fdc00] mmco: unref short failure
[h264 @ 0x55b7db2fdc00] mmco: unref short failure
[h264 @ 0x556e64e5e800] mmco: unref short failure
[h264 @ 0x556e64e5e800] mmco: unref short failure
[h264 @ 0x556e5acab900] mmco: unref short failure
[h264 @ 0x556e5acab900] mmco: unref short failure
[h264 @ 0x556e46bfb8c0] mmco: unref short failure
[h264 @ 0x556e46bfb8c0] mmco: unref short failure
[h264 @ 0x556e46bfb8c0] mmco: unref short failure
[h264 @ 0x556e46bfb8c0] mmco: unref short failure
[h264 @ 0x556e4d0d8d00] mmco: unref short failure
[h264 @ 0x556e4d0d8d00] mmco: unref short failure
[h264 @ 0x556e4d0d8d00] mmco: unref short failure
[h264 @ 0x556e6ab84540] mmco: unref short failure
 43%|████▎     | 832/1945 [4:26:27<6:08:33, 19.87s/it][h264 @ 0x556e53ff2040] mmco: unref short failure
[h264 @ 0x556e53ff2040] mmco: unref short failure
[h264 @ 0x556e45a2ef00] mmco: unref short failure
[h264 @ 0x556e45a2ef00] mmco: unref short failure
[h264 @ 0x556e45a2ef00] mmco: unref short failure
[h264 @ 0x556e45a2ef00] mmco: unref short failure
[h264 @ 0x556e52a082c0] mmco: unref short failure
[h264 @ 0x556e52a082c0] mmco: unref short failure
[h264 @ 0x556e52a082c0] mmco: unref short failure
[h264 @ 0x556e52a082c0] mmco: unref short failure
 43%|████▎     | 833/1945 [4:26:53<6:40:38, 21.62s/it] 43%|████▎     | 834/1945 [4:27:02<5:33:58, 18.04s/it][h264 @ 0x55b7e08e6bc0] mmco: unref short failure
 43%|████▎     | 835/1945 [4:27:11<4:39:19, 15.10s/it][h264 @ 0x556e60724500] mmco: unref short failure
[h264 @ 0x556e60724500] mmco: unref short failure
[h264 @ 0x556e60724500] mmco: unref short failure
[h264 @ 0x556e60724500] mmco: unref short failure
[h264 @ 0x556e460e24c0] mmco: unref short failure
[h264 @ 0x556e460e24c0] mmco: unref short failure
 43%|████▎     | 836/1945 [4:27:18<3:57:03, 12.83s/it][h264 @ 0x55b7e17391c0] mmco: unref short failure
[h264 @ 0x55b7e17391c0] mmco: unref short failure
[h264 @ 0x556e540d2d80] mmco: unref short failure
[h264 @ 0x55b7e0972640] mmco: unref short failure
[h264 @ 0x556e57b1c040] mmco: unref short failure
[h264 @ 0x556e604f0680] mmco: unref short failure
[h264 @ 0x556e604f0680] mmco: unref short failure
 43%|████▎     | 837/1945 [4:27:38<4:34:40, 14.87s/it][h264 @ 0x55e50420b740] mmco: unref short failure
[h264 @ 0x55e50420b740] mmco: unref short failure
[h264 @ 0x55e513d37f00] mmco: unref short failure
[h264 @ 0x55e513d37f00] mmco: unref short failure
 43%|████▎     | 838/1945 [4:27:46<3:54:59, 12.74s/it][h264 @ 0x556e67a9c040] mmco: unref short failure
[h264 @ 0x556e67a9c040] mmco: unref short failure
[h264 @ 0x556e69f26240] mmco: unref short failure
[h264 @ 0x556e69f26240] mmco: unref short failure
[h264 @ 0x55e509cb4940] mmco: unref short failure
[h264 @ 0x55e509cb4940] mmco: unref short failure
 43%|████▎     | 839/1945 [4:27:54<3:33:20, 11.57s/it][h264 @ 0x556e4afcb980] mmco: unref short failure
[h264 @ 0x55e50ad454c0] mmco: unref short failure
[h264 @ 0x556e6551ab00] mmco: unref short failure
[h264 @ 0x55e51739a400] mmco: unref short failure
[h264 @ 0x556e66dfa580] mmco: unref short failure
[h264 @ 0x55e51739a400] mmco: unref short failure
[h264 @ 0x556e44ee8380] mmco: unref short failure
[h264 @ 0x55e50420b740] mmco: unref short failure
[h264 @ 0x556e5777ca00] mmco: unref short failure
[h264 @ 0x556e5777ca00] mmco: unref short failure
[h264 @ 0x556e49013800] mmco: unref short failure
[h264 @ 0x556e49013800] mmco: unref short failure
[h264 @ 0x55e514036500] mmco: unref short failure
[h264 @ 0x55e514036500] mmco: unref short failure
 43%|████▎     | 840/1945 [4:28:25<5:18:30, 17.29s/it][h264 @ 0x55b7cd402d40] mmco: unref short failure
[h264 @ 0x556e59dcb180] mmco: unref short failure
[h264 @ 0x556e59dcb180] mmco: unref short failure
[h264 @ 0x556e4bd6d0c0] mmco: unref short failure
[h264 @ 0x55e501cfa100] mmco: unref short failure
[h264 @ 0x55e501cfa100] mmco: unref short failure
[h264 @ 0x556e6a457c80] mmco: unref short failure
[h264 @ 0x556e47615f80] mmco: unref short failure
[h264 @ 0x556e47615f80] mmco: unref short failure
[h264 @ 0x556e47615f80] mmco: unref short failure
[h264 @ 0x55e5068fe900] mmco: unref short failure
[h264 @ 0x55e50f9a6440] mmco: unref short failure
[h264 @ 0x55e50f9a6440] mmco: unref short failure
[h264 @ 0x55e50f9a6440] mmco: unref short failure
[h264 @ 0x55e50f9a6440] mmco: unref short failure
 43%|████▎     | 841/1945 [4:28:58<6:44:05, 21.96s/it] 43%|████▎     | 842/1945 [4:29:05<5:22:57, 17.57s/it] 43%|████▎     | 843/1945 [4:29:14<4:33:04, 14.87s/it][h264 @ 0x55e51302fd80] mmco: unref short failure
 43%|████▎     | 844/1945 [4:29:22<3:53:54, 12.75s/it][h264 @ 0x55e513496ec0] mmco: unref short failure
[h264 @ 0x55e513496ec0] mmco: unref short failure
[h264 @ 0x55e4feff3340] mmco: unref short failure
[h264 @ 0x55e4feff3340] mmco: unref short failure
[h264 @ 0x55e4feff3340] mmco: unref short failure
[h264 @ 0x55e4feff3340] mmco: unref short failure
[h264 @ 0x55e512c2e440] mmco: unref short failure
[h264 @ 0x556e612d96c0] mmco: unref short failure
[h264 @ 0x556e46a29ac0] mmco: unref short failure
[h264 @ 0x556e46a29ac0] mmco: unref short failure
[h264 @ 0x556e46a29ac0] mmco: unref short failure
[h264 @ 0x556e46a29ac0] mmco: unref short failure
[h264 @ 0x556e4ab846c0] mmco: unref short failure
[h264 @ 0x556e4ab846c0] mmco: unref short failure
[h264 @ 0x556e470f55c0] mmco: unref short failure
[h264 @ 0x556e470f55c0] mmco: unref short failure
 43%|████▎     | 845/1945 [4:29:46<5:00:25, 16.39s/it][h264 @ 0x55e510f1a140] mmco: unref short failure
 43%|████▎     | 846/1945 [4:29:55<4:15:55, 13.97s/it][h264 @ 0x55e50c1d6b80] mmco: unref short failure
[h264 @ 0x55e50c1d6b80] mmco: unref short failure
[h264 @ 0x55e50c1d6b80] mmco: unref short failure
[h264 @ 0x556e55c7edc0] mmco: unref short failure
[h264 @ 0x556e55c7edc0] mmco: unref short failure
[h264 @ 0x556e55c7edc0] mmco: unref short failure
[h264 @ 0x556e55c7edc0] mmco: unref short failure
 44%|████▎     | 847/1945 [4:30:03<3:44:54, 12.29s/it][h264 @ 0x55b7d5918280] mmco: unref short failure
[h264 @ 0x55e5026d4940] mmco: unref short failure
[h264 @ 0x55e5026d4940] mmco: unref short failure
[h264 @ 0x556e69f095c0] mmco: unref short failure
[h264 @ 0x556e69f095c0] mmco: unref short failure
[h264 @ 0x556e46ef13c0] mmco: unref short failure
[h264 @ 0x556e46ef13c0] mmco: unref short failure
[h264 @ 0x556e46ef13c0] mmco: unref short failure
[h264 @ 0x556e46ef13c0] mmco: unref short failure
 44%|████▎     | 848/1945 [4:30:27<4:48:57, 15.80s/it][h264 @ 0x556e5c002900] mmco: unref short failure
[h264 @ 0x55e50e4d3080] mmco: unref short failure
[h264 @ 0x55e4fd9661c0] mmco: unref short failure
[h264 @ 0x556e544ec500] mmco: unref short failure
 44%|████▎     | 849/1945 [4:30:56<6:00:31, 19.74s/it]09/09/2024 19:56:25 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 19:56:25 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e4fd966ac0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e50a5be0c0] mmco: unref short failure
[h264 @ 0x55e50a5be0c0] mmco: unref short failure
[h264 @ 0x556e5acab000] mmco: unref short failure
[h264 @ 0x556e5acab000] mmco: unref short failure
[h264 @ 0x556e5acab000] mmco: unref short failure
[h264 @ 0x556e5acab000] mmco: unref short failure
[h264 @ 0x55e50c9c3280] mmco: unref short failure
[h264 @ 0x55e50c9c3280] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b7dc43aec0] mmco: unref short failure
[h264 @ 0x55b7dc43aec0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e5001a4b40] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b7e4b4cc40] mmco: unref short failure
[h264 @ 0x556e43e32080] mmco: unref short failure
[h264 @ 0x556e62e27680] mmco: unref short failure
[h264 @ 0x556e62e27680] mmco: unref short failure
[h264 @ 0x556e43e24e80] mmco: unref short failure
[h264 @ 0x55e5102edd00] mmco: unref short failure
[h264 @ 0x556e679f5900] mmco: unref short failure
[h264 @ 0x55e50eadbd40] mmco: unref short failure
[h264 @ 0x55e517969cc0] mmco: unref short failure
[h264 @ 0x55e517969cc0] mmco: unref short failure
[h264 @ 0x55e510d0d340] mmco: unref short failure
[h264 @ 0x55e510d0d340] mmco: unref short failure
[h264 @ 0x556e5635e200] mmco: unref short failure
[h264 @ 0x556e5635e200] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  1%|          | 2/221 [00:00<00:37,  5.84it/s][A
  2%|▏         | 4/221 [00:00<00:27,  7.86it/s][A
  2%|▏         | 5/221 [00:00<00:32,  6.59it/s][A
  3%|▎         | 7/221 [00:01<00:34,  6.17it/s][A
  4%|▎         | 8/221 [00:01<00:39,  5.35it/s][A
  4%|▍         | 9/221 [00:01<00:41,  5.15it/s][A[h264 @ 0x55b7d9211700] mmco: unref short failure
[h264 @ 0x55b7d9211700] mmco: unref short failure

  5%|▍         | 10/221 [00:03<02:03,  1.71it/s][A
  5%|▍         | 11/221 [00:03<01:50,  1.90it/s][A
  5%|▌         | 12/221 [00:03<01:26,  2.42it/s][A
  6%|▌         | 13/221 [00:03<01:16,  2.72it/s][A[h264 @ 0x55e5060f67c0] mmco: unref short failure
[h264 @ 0x55e5060f67c0] mmco: unref short failure
[h264 @ 0x55b7dd4cd040] mmco: unref short failure
[h264 @ 0x55b7dd4cd040] mmco: unref short failure
[h264 @ 0x556e54570880] mmco: unref short failure
[h264 @ 0x556e54570880] mmco: unref short failure
[h264 @ 0x556e54570880] mmco: unref short failure
[h264 @ 0x556e54570880] mmco: unref short failure

  6%|▋         | 14/221 [00:07<04:19,  1.25s/it][A[h264 @ 0x55e50f507c80] mmco: unref short failure

  7%|▋         | 15/221 [00:07<03:10,  1.08it/s][A[h264 @ 0x556e5eb2a300] mmco: unref short failure
[h264 @ 0x556e5eb2a300] mmco: unref short failure

  7%|▋         | 16/221 [00:09<03:49,  1.12s/it][A
  8%|▊         | 17/221 [00:10<03:49,  1.12s/it][A
  8%|▊         | 18/221 [00:10<03:02,  1.11it/s][A
  9%|▊         | 19/221 [00:10<02:21,  1.42it/s][A[h264 @ 0x556e62697600] mmco: unref short failure
[h264 @ 0x556e62697600] mmco: unref short failure

  9%|▉         | 20/221 [00:11<01:53,  1.77it/s][A[h264 @ 0x556e62697600] mmco: unref short failure

 10%|▉         | 21/221 [00:11<01:26,  2.31it/s][A
 10%|▉         | 22/221 [00:11<01:06,  2.98it/s][A
 11%|█         | 24/221 [00:11<00:43,  4.51it/s][A
 11%|█▏        | 25/221 [00:11<00:39,  5.02it/s][A
 12%|█▏        | 26/221 [00:11<00:37,  5.24it/s][A
 12%|█▏        | 27/221 [00:11<00:32,  6.01it/s][A
 13%|█▎        | 28/221 [00:12<00:31,  6.16it/s][A[h264 @ 0x556e671deb80] mmco: unref short failure
[h264 @ 0x556e671deb80] mmco: unref short failure

 13%|█▎        | 29/221 [00:16<04:11,  1.31s/it][A
 14%|█▎        | 30/221 [00:16<03:11,  1.00s/it][A
 14%|█▍        | 31/221 [00:16<02:34,  1.23it/s][A
 14%|█▍        | 32/221 [00:16<01:57,  1.60it/s][A
 15%|█▍        | 33/221 [00:17<02:01,  1.55it/s][A
 15%|█▌        | 34/221 [00:17<01:40,  1.87it/s][A
 16%|█▌        | 35/221 [00:18<01:25,  2.19it/s][A
 16%|█▋        | 36/221 [00:18<01:10,  2.63it/s][A
 17%|█▋        | 37/221 [00:18<00:55,  3.31it/s][A
 17%|█▋        | 38/221 [00:18<00:51,  3.58it/s][A
 18%|█▊        | 39/221 [00:19<00:59,  3.05it/s][A
 18%|█▊        | 40/221 [00:19<00:50,  3.61it/s][A
 19%|█▉        | 42/221 [00:19<00:32,  5.44it/s][A
 19%|█▉        | 43/221 [00:19<00:33,  5.29it/s][A
 20%|█▉        | 44/221 [00:20<00:39,  4.47it/s][A
 20%|██        | 45/221 [00:20<00:42,  4.19it/s][A
 21%|██        | 46/221 [00:20<00:37,  4.62it/s][A
 21%|██▏       | 47/221 [00:20<00:35,  4.92it/s][A
 22%|██▏       | 49/221 [00:20<00:28,  6.13it/s][A
 23%|██▎       | 50/221 [00:24<03:05,  1.09s/it][A
 23%|██▎       | 51/221 [00:25<02:25,  1.17it/s][A
 24%|██▎       | 52/221 [00:25<02:00,  1.40it/s][A
 24%|██▍       | 53/221 [00:25<01:35,  1.76it/s][A
 24%|██▍       | 54/221 [00:25<01:14,  2.25it/s][A
 25%|██▌       | 56/221 [00:26<00:52,  3.16it/s][A
 26%|██▌       | 57/221 [00:26<00:48,  3.37it/s][A
 26%|██▌       | 58/221 [00:26<00:41,  3.95it/s][A
 27%|██▋       | 59/221 [00:26<00:41,  3.95it/s][A
 27%|██▋       | 60/221 [00:26<00:34,  4.66it/s][A
 28%|██▊       | 61/221 [00:26<00:32,  4.86it/s][A
 28%|██▊       | 62/221 [00:27<00:42,  3.78it/s][A
 29%|██▊       | 63/221 [00:27<00:38,  4.13it/s][A
 29%|██▉       | 64/221 [00:27<00:34,  4.61it/s][A
 30%|██▉       | 66/221 [00:27<00:24,  6.34it/s][A
 30%|███       | 67/221 [00:28<00:27,  5.62it/s][A[h264 @ 0x55b7e41cf000] mmco: unref short failure
[h264 @ 0x55b7e41cf000] mmco: unref short failure

 31%|███       | 68/221 [00:28<00:34,  4.45it/s][A
 31%|███       | 69/221 [00:28<00:30,  5.01it/s][A[h264 @ 0x55b7e6baf000] mmco: unref short failure

 32%|███▏      | 70/221 [00:28<00:31,  4.83it/s][A
 32%|███▏      | 71/221 [00:29<00:31,  4.78it/s][A
 33%|███▎      | 72/221 [00:29<00:39,  3.75it/s][A
 33%|███▎      | 73/221 [00:29<00:41,  3.57it/s][A[h264 @ 0x55e50ecb52c0] mmco: unref short failure
[h264 @ 0x55e50ecb52c0] mmco: unref short failure

 33%|███▎      | 74/221 [00:30<00:51,  2.85it/s][A
 34%|███▍      | 75/221 [00:30<00:53,  2.75it/s][A
 34%|███▍      | 76/221 [00:30<00:45,  3.18it/s][A
 35%|███▍      | 77/221 [00:31<00:38,  3.70it/s][A
 36%|███▌      | 79/221 [00:31<00:29,  4.80it/s][A
 36%|███▌      | 80/221 [00:31<00:26,  5.32it/s][A
 37%|███▋      | 81/221 [00:31<00:26,  5.36it/s][A
 37%|███▋      | 82/221 [00:36<03:05,  1.33s/it][A
 38%|███▊      | 83/221 [00:36<02:23,  1.04s/it][A
 38%|███▊      | 85/221 [00:36<01:24,  1.60it/s][A
 39%|███▉      | 86/221 [00:36<01:19,  1.70it/s][A
 39%|███▉      | 87/221 [00:37<01:02,  2.13it/s][A
 40%|███▉      | 88/221 [00:37<00:51,  2.57it/s][A[h264 @ 0x556e6787aec0] mmco: unref short failure

 40%|████      | 89/221 [00:37<00:51,  2.55it/s][A
 41%|████      | 90/221 [00:37<00:46,  2.79it/s][A
 41%|████      | 91/221 [00:38<00:43,  3.01it/s][A
 42%|████▏     | 92/221 [00:38<00:34,  3.76it/s][A
 42%|████▏     | 93/221 [00:38<00:28,  4.49it/s][A
 43%|████▎     | 94/221 [00:39<01:05,  1.93it/s][A
 43%|████▎     | 96/221 [00:39<00:41,  3.04it/s][A
 44%|████▍     | 97/221 [00:40<00:48,  2.55it/s][A
 45%|████▍     | 99/221 [00:40<00:30,  3.98it/s][A[h264 @ 0x55b7ccb57ec0] mmco: unref short failure
[h264 @ 0x55b7ccb57ec0] mmco: unref short failure
[h264 @ 0x55b7ccb57ec0] mmco: unref short failure
[h264 @ 0x55b7ccb57ec0] mmco: unref short failure

 46%|████▌     | 102/221 [00:40<00:18,  6.40it/s][A
 47%|████▋     | 104/221 [00:42<00:40,  2.87it/s][A
 48%|████▊     | 105/221 [00:42<00:36,  3.14it/s][A
 48%|████▊     | 106/221 [00:42<00:33,  3.47it/s][A
 48%|████▊     | 107/221 [00:42<00:31,  3.63it/s][A
 49%|████▉     | 108/221 [00:43<00:30,  3.72it/s][A
 50%|████▉     | 110/221 [00:43<00:23,  4.79it/s][A
 50%|█████     | 111/221 [00:43<00:24,  4.47it/s][A
 51%|█████     | 112/221 [00:43<00:24,  4.38it/s][A
 51%|█████     | 113/221 [00:44<00:43,  2.46it/s][A
 52%|█████▏    | 114/221 [00:44<00:34,  3.06it/s][A
 52%|█████▏    | 116/221 [00:45<00:24,  4.29it/s][A
 53%|█████▎    | 117/221 [00:45<00:24,  4.18it/s][A
 53%|█████▎    | 118/221 [00:45<00:21,  4.79it/s][A
 54%|█████▍    | 119/221 [00:45<00:21,  4.71it/s][A
 55%|█████▍    | 121/221 [00:45<00:14,  6.77it/s][A
 56%|█████▌    | 123/221 [00:46<00:16,  6.01it/s][A
 56%|█████▌    | 124/221 [00:46<00:16,  5.87it/s][A
 57%|█████▋    | 126/221 [00:46<00:16,  5.87it/s][A
 57%|█████▋    | 127/221 [00:46<00:15,  6.09it/s][A
 58%|█████▊    | 129/221 [00:47<00:14,  6.14it/s][A
 59%|█████▉    | 130/221 [00:47<00:14,  6.07it/s][A
 59%|█████▉    | 131/221 [00:48<00:28,  3.15it/s][A
 60%|██████    | 133/221 [00:48<00:19,  4.41it/s][A
 61%|██████    | 134/221 [00:48<00:18,  4.74it/s][A
 62%|██████▏   | 136/221 [00:48<00:13,  6.33it/s][A
 62%|██████▏   | 137/221 [00:48<00:13,  6.24it/s][A
 62%|██████▏   | 138/221 [00:49<00:12,  6.54it/s][A
 63%|██████▎   | 139/221 [00:49<00:12,  6.63it/s][A
 63%|██████▎   | 140/221 [00:49<00:12,  6.71it/s][A
 64%|██████▍   | 141/221 [00:50<00:27,  2.92it/s][A
 64%|██████▍   | 142/221 [00:50<00:21,  3.62it/s][A
 65%|██████▌   | 144/221 [00:50<00:14,  5.33it/s][A
 67%|██████▋   | 147/221 [00:50<00:10,  7.12it/s][A
 67%|██████▋   | 148/221 [00:50<00:09,  7.50it/s][A
 67%|██████▋   | 149/221 [00:50<00:09,  7.29it/s][A[h264 @ 0x556e42eaef40] mmco: unref short failure

 68%|██████▊   | 150/221 [00:51<00:11,  6.30it/s][A
 68%|██████▊   | 151/221 [00:51<00:17,  4.09it/s][A
 69%|██████▉   | 152/221 [00:51<00:15,  4.53it/s][A
 69%|██████▉   | 153/221 [00:51<00:13,  5.01it/s][A
 70%|██████▉   | 154/221 [00:52<00:11,  5.74it/s][A
 71%|███████   | 156/221 [00:52<00:08,  7.60it/s][A
 71%|███████▏  | 158/221 [00:52<00:07,  8.45it/s][A
 72%|███████▏  | 159/221 [00:52<00:09,  6.75it/s][A
 72%|███████▏  | 160/221 [00:52<00:08,  7.25it/s][A
 73%|███████▎  | 162/221 [00:52<00:06,  8.61it/s][A
 74%|███████▍  | 163/221 [00:53<00:06,  8.53it/s][A
 74%|███████▍  | 164/221 [00:53<00:06,  8.80it/s][A
 75%|███████▌  | 166/221 [00:53<00:05,  9.86it/s][A
 76%|███████▌  | 168/221 [00:53<00:04, 11.63it/s][A[h264 @ 0x556e55575e80] mmco: unref short failure

 77%|███████▋  | 170/221 [00:54<00:12,  3.93it/s][A
 77%|███████▋  | 171/221 [00:54<00:12,  4.05it/s][A
 78%|███████▊  | 172/221 [00:54<00:10,  4.65it/s][A
 78%|███████▊  | 173/221 [00:55<00:12,  3.99it/s][A
 79%|███████▊  | 174/221 [00:55<00:13,  3.39it/s][A
 79%|███████▉  | 175/221 [00:55<00:11,  3.99it/s][A
 80%|███████▉  | 176/221 [00:55<00:09,  4.78it/s][A
 80%|████████  | 177/221 [00:56<00:12,  3.49it/s][A
 81%|████████  | 178/221 [00:56<00:10,  4.16it/s][A
 81%|████████  | 179/221 [00:56<00:12,  3.36it/s][A
 82%|████████▏ | 181/221 [00:57<00:07,  5.19it/s][A
 83%|████████▎ | 183/221 [00:57<00:06,  5.66it/s][A
 84%|████████▎ | 185/221 [00:57<00:04,  7.32it/s][A
 85%|████████▍ | 187/221 [00:57<00:05,  6.06it/s][A
 86%|████████▌ | 189/221 [00:58<00:04,  7.60it/s][A
 87%|████████▋ | 192/221 [00:58<00:02, 10.50it/s][A[h264 @ 0x55e518e0d200] mmco: unref short failure
[h264 @ 0x55e518e0d200] mmco: unref short failure

 88%|████████▊ | 195/221 [01:00<00:09,  2.67it/s][A
 89%|████████▉ | 197/221 [01:00<00:07,  3.37it/s][A
 90%|█████████ | 199/221 [01:01<00:05,  4.11it/s][A
 91%|█████████ | 201/221 [01:01<00:04,  4.95it/s][A
 92%|█████████▏| 203/221 [01:01<00:04,  4.33it/s][A
 93%|█████████▎| 205/221 [01:02<00:03,  4.41it/s][A
 93%|█████████▎| 206/221 [01:02<00:03,  4.86it/s][A
 95%|█████████▍| 209/221 [01:02<00:01,  7.38it/s][A
 95%|█████████▌| 211/221 [01:02<00:01,  6.96it/s][A
 96%|█████████▋| 213/221 [01:03<00:01,  7.58it/s][A
 97%|█████████▋| 215/221 [01:03<00:00,  8.71it/s][A
 98%|█████████▊| 217/221 [01:03<00:00,  9.30it/s][A
 99%|█████████▉| 219/221 [01:03<00:00, 10.08it/s][A100%|█████████▉| 220/221 [01:03<00:00,  3.46it/s]
[h264 @ 0x556e51ea0e40] mmco: unref short failure
[h264 @ 0x556e51ea0e40] mmco: unref short failure
[h264 @ 0x556e4bfe7600] mmco: unref short failure
[h264 @ 0x55b7d9210540] mmco: unref short failure
[h264 @ 0x55b7d9210540] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.78it/s][A
  1%|          | 2/221 [00:00<00:57,  3.79it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.78it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.79it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.79it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.79it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.79it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.79it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.78it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.79it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.79it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.79it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.79it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.79it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:51,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:37,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 125/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.79it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.79it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.79it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.79it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.79it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.79it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.79it/s][A
 65%|██████▌   | 144/221 [00:37<00:20,  3.79it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.79it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.78it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.79it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.79it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.79it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.79it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 159/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.79it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.79it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.79it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.79it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.79it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.79it/s][A
 76%|███████▌  | 168/221 [00:44<00:13,  3.79it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.79it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.79it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.79it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.79it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.79it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 178/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.79it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.79it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.79it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.79it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.79it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.79it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.78it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:51<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.79it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.79it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.79it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.79it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.79it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.79it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.79it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.79it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.79it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.79it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.79it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▌| 212/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.79it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.79it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.79it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.79it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.79it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.79it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.79it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.79it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.79it/s][A100%|██████████| 221/221 [00:58<00:00,  3.79it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:22,  9.82it/s][A
  1%|          | 2/221 [00:00<00:36,  5.93it/s][A
  1%|▏         | 3/221 [00:00<00:38,  5.65it/s][A
  2%|▏         | 4/221 [00:00<00:33,  6.51it/s][A
  2%|▏         | 5/221 [00:00<00:35,  6.13it/s][A
  3%|▎         | 6/221 [00:00<00:30,  6.98it/s][A
  3%|▎         | 7/221 [00:01<00:41,  5.14it/s][A
  4%|▎         | 8/221 [00:01<00:54,  3.94it/s][A
  4%|▍         | 9/221 [00:01<00:49,  4.30it/s][A
  5%|▍         | 10/221 [00:02<01:13,  2.87it/s][A
  5%|▍         | 11/221 [00:02<01:04,  3.26it/s][A
  5%|▌         | 12/221 [00:02<00:55,  3.75it/s][A
  6%|▌         | 13/221 [00:03<01:29,  2.33it/s][A
  6%|▋         | 14/221 [00:03<01:08,  3.02it/s][A
  7%|▋         | 15/221 [00:03<01:03,  3.23it/s][A
  7%|▋         | 16/221 [00:04<01:05,  3.15it/s][A
  8%|▊         | 17/221 [00:04<01:18,  2.59it/s][A
  8%|▊         | 18/221 [00:05<01:22,  2.45it/s][A
  9%|▊         | 19/221 [00:05<01:15,  2.66it/s][A
 10%|▉         | 21/221 [00:05<00:54,  3.66it/s][A
 10%|▉         | 22/221 [00:06<00:47,  4.20it/s][A
 11%|█         | 24/221 [00:06<00:39,  5.02it/s][A
 11%|█▏        | 25/221 [00:06<00:39,  4.97it/s][A
 12%|█▏        | 26/221 [00:06<00:43,  4.52it/s][A
 12%|█▏        | 27/221 [00:06<00:42,  4.62it/s][A
 13%|█▎        | 28/221 [00:07<00:44,  4.29it/s][A
 13%|█▎        | 29/221 [00:07<00:43,  4.43it/s][A
 14%|█▎        | 30/221 [00:07<00:41,  4.56it/s][A
 14%|█▍        | 31/221 [00:07<00:39,  4.84it/s][A
 14%|█▍        | 32/221 [00:08<00:35,  5.28it/s][A
 15%|█▍        | 33/221 [00:08<00:37,  4.96it/s][A
 15%|█▌        | 34/221 [00:08<00:44,  4.25it/s][A
 16%|█▌        | 35/221 [00:08<00:53,  3.46it/s][A
 16%|█▋        | 36/221 [00:09<00:49,  3.74it/s][A
 17%|█▋        | 37/221 [00:09<00:53,  3.45it/s][A
 17%|█▋        | 38/221 [00:09<00:49,  3.67it/s][A
 18%|█▊        | 39/221 [00:10<00:49,  3.70it/s][A
 18%|█▊        | 40/221 [00:10<00:59,  3.03it/s][A
 19%|█▊        | 41/221 [00:10<00:48,  3.72it/s][A
 19%|█▉        | 42/221 [00:10<00:44,  4.03it/s][A
 19%|█▉        | 43/221 [00:11<00:45,  3.89it/s][A
 20%|█▉        | 44/221 [00:11<00:38,  4.60it/s][A
 20%|██        | 45/221 [00:11<00:35,  4.94it/s][A
 21%|██        | 46/221 [00:11<00:38,  4.52it/s][A
 21%|██▏       | 47/221 [00:11<00:42,  4.08it/s][A
 22%|██▏       | 48/221 [00:12<00:40,  4.32it/s][A
 22%|██▏       | 49/221 [00:12<00:40,  4.24it/s][A
 23%|██▎       | 50/221 [00:12<00:44,  3.84it/s][A
 23%|██▎       | 51/221 [00:12<00:36,  4.69it/s][A
 24%|██▎       | 52/221 [00:13<00:35,  4.73it/s][A
 24%|██▍       | 53/221 [00:13<00:31,  5.41it/s][A
 24%|██▍       | 54/221 [00:13<00:41,  4.07it/s][A
 25%|██▍       | 55/221 [00:13<00:36,  4.57it/s][A
 25%|██▌       | 56/221 [00:13<00:35,  4.67it/s][A
 26%|██▌       | 57/221 [00:14<00:36,  4.44it/s][A
 26%|██▌       | 58/221 [00:14<00:42,  3.87it/s][A
 27%|██▋       | 59/221 [00:14<00:41,  3.86it/s][A
 28%|██▊       | 61/221 [00:15<00:35,  4.47it/s][A
 28%|██▊       | 62/221 [00:15<00:34,  4.59it/s][A
 29%|██▊       | 63/221 [00:15<00:29,  5.28it/s][A
 29%|██▉       | 64/221 [00:15<00:32,  4.77it/s][A
 29%|██▉       | 65/221 [00:15<00:28,  5.50it/s][A
 30%|██▉       | 66/221 [00:16<00:39,  3.88it/s][A
 30%|███       | 67/221 [00:16<00:54,  2.83it/s][A
 31%|███       | 68/221 [00:16<00:44,  3.41it/s][A
 31%|███       | 69/221 [00:17<00:57,  2.66it/s][A
 32%|███▏      | 70/221 [00:17<00:45,  3.31it/s][A
 32%|███▏      | 71/221 [00:18<00:48,  3.12it/s][A
 33%|███▎      | 72/221 [00:18<00:54,  2.75it/s][A
 33%|███▎      | 73/221 [00:18<00:43,  3.43it/s][A
 33%|███▎      | 74/221 [00:18<00:35,  4.11it/s][A
 34%|███▍      | 75/221 [00:18<00:34,  4.17it/s][A
 34%|███▍      | 76/221 [00:19<00:34,  4.22it/s][A
 35%|███▍      | 77/221 [00:19<00:33,  4.31it/s][A
 35%|███▌      | 78/221 [00:19<00:28,  5.05it/s][A
 36%|███▌      | 79/221 [00:20<00:55,  2.55it/s][A
 36%|███▌      | 80/221 [00:20<00:47,  2.96it/s][A
 37%|███▋      | 81/221 [00:20<00:41,  3.36it/s][A
 37%|███▋      | 82/221 [00:21<00:46,  3.00it/s][A
 38%|███▊      | 83/221 [00:21<00:42,  3.24it/s][A
 38%|███▊      | 84/221 [00:21<00:38,  3.52it/s][A
 38%|███▊      | 85/221 [00:21<00:33,  4.08it/s][A
 39%|███▉      | 86/221 [00:22<00:31,  4.26it/s][A
 39%|███▉      | 87/221 [00:22<00:32,  4.15it/s][A
 40%|███▉      | 88/221 [00:22<00:42,  3.16it/s][A
 40%|████      | 89/221 [00:23<00:50,  2.60it/s][A
 41%|████      | 90/221 [00:23<00:45,  2.90it/s][A
 41%|████      | 91/221 [00:23<00:36,  3.59it/s][A
 42%|████▏     | 92/221 [00:24<00:38,  3.34it/s][A
 42%|████▏     | 93/221 [00:24<01:00,  2.12it/s][A
 43%|████▎     | 94/221 [00:25<00:58,  2.16it/s][A
 43%|████▎     | 95/221 [00:25<00:50,  2.49it/s][A
 43%|████▎     | 96/221 [00:25<00:41,  3.00it/s][A
 44%|████▍     | 97/221 [00:26<00:35,  3.51it/s][A
 44%|████▍     | 98/221 [00:26<00:33,  3.63it/s][A
 45%|████▍     | 99/221 [00:26<00:34,  3.59it/s][A
 45%|████▌     | 100/221 [00:26<00:33,  3.66it/s][A
 46%|████▌     | 101/221 [00:27<00:42,  2.83it/s][A
 46%|████▌     | 102/221 [00:27<00:45,  2.62it/s][A
 47%|████▋     | 103/221 [00:28<00:39,  2.99it/s][A
 47%|████▋     | 104/221 [00:28<00:37,  3.15it/s][A
 48%|████▊     | 105/221 [00:28<00:33,  3.44it/s][A
 48%|████▊     | 106/221 [00:28<00:33,  3.44it/s][A
 48%|████▊     | 107/221 [00:29<00:31,  3.63it/s][A
 49%|████▉     | 108/221 [00:29<00:30,  3.73it/s][A
 49%|████▉     | 109/221 [00:29<00:26,  4.16it/s][A
 50%|████▉     | 110/221 [00:29<00:27,  4.04it/s][A
 50%|█████     | 111/221 [00:30<00:31,  3.55it/s][A
 51%|█████     | 112/221 [00:30<00:32,  3.31it/s][A
 51%|█████     | 113/221 [00:30<00:28,  3.82it/s][A
 52%|█████▏    | 114/221 [00:30<00:22,  4.66it/s][A
 52%|█████▏    | 115/221 [00:30<00:23,  4.51it/s][A
 52%|█████▏    | 116/221 [00:31<00:28,  3.66it/s][A
 53%|█████▎    | 117/221 [00:31<00:26,  3.93it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.80it/s][A
 54%|█████▍    | 119/221 [00:32<00:34,  2.95it/s][A
 54%|█████▍    | 120/221 [00:32<00:31,  3.18it/s][A
 55%|█████▌    | 122/221 [00:32<00:24,  4.11it/s][A
 56%|█████▌    | 123/221 [00:33<00:24,  4.05it/s][A
 56%|█████▌    | 124/221 [00:33<00:21,  4.62it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.83it/s][A
 57%|█████▋    | 126/221 [00:34<00:28,  3.32it/s][A
 57%|█████▋    | 127/221 [00:34<00:29,  3.20it/s][A
 58%|█████▊    | 128/221 [00:34<00:26,  3.48it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.75it/s][A
 59%|█████▉    | 130/221 [00:35<00:22,  4.01it/s][A
 60%|█████▉    | 132/221 [00:35<00:14,  5.98it/s][A
 60%|██████    | 133/221 [00:35<00:17,  4.95it/s][A
 61%|██████    | 134/221 [00:35<00:17,  5.05it/s][A
 61%|██████    | 135/221 [00:35<00:16,  5.31it/s][A
 62%|██████▏   | 136/221 [00:36<00:17,  4.89it/s][A
 62%|██████▏   | 137/221 [00:36<00:15,  5.41it/s][A
 62%|██████▏   | 138/221 [00:36<00:18,  4.58it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.87it/s][A
 63%|██████▎   | 140/221 [00:37<00:20,  3.99it/s][A
 64%|██████▍   | 141/221 [00:37<00:20,  3.97it/s][A
 64%|██████▍   | 142/221 [00:37<00:18,  4.31it/s][A
 65%|██████▍   | 143/221 [00:38<00:26,  3.00it/s][A
 65%|██████▌   | 144/221 [00:38<00:28,  2.68it/s][A
 66%|██████▌   | 146/221 [00:38<00:18,  4.04it/s][A
 67%|██████▋   | 147/221 [00:39<00:19,  3.89it/s][A
 67%|██████▋   | 148/221 [00:39<00:22,  3.31it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s][A
 68%|██████▊   | 150/221 [00:40<00:19,  3.66it/s][A
 68%|██████▊   | 151/221 [00:40<00:20,  3.44it/s][A
 69%|██████▉   | 152/221 [00:41<00:27,  2.54it/s][A
 69%|██████▉   | 153/221 [00:41<00:22,  3.00it/s][A
 70%|██████▉   | 154/221 [00:41<00:20,  3.31it/s][A
 70%|███████   | 155/221 [00:41<00:18,  3.66it/s][A
 71%|███████   | 156/221 [00:42<00:21,  3.03it/s][A
 71%|███████   | 157/221 [00:42<00:20,  3.16it/s][A
 71%|███████▏  | 158/221 [00:42<00:19,  3.26it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.68it/s][A
 72%|███████▏  | 160/221 [00:43<00:15,  4.06it/s][A
 73%|███████▎  | 161/221 [00:43<00:17,  3.35it/s][A
 73%|███████▎  | 162/221 [00:43<00:16,  3.61it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.71it/s][A
 74%|███████▍  | 164/221 [00:44<00:15,  3.68it/s][A
 75%|███████▍  | 165/221 [00:44<00:15,  3.71it/s][A
 75%|███████▌  | 166/221 [00:44<00:14,  3.68it/s][A
 76%|███████▌  | 167/221 [00:44<00:12,  4.40it/s][A
 76%|███████▌  | 168/221 [00:45<00:15,  3.36it/s][A
 76%|███████▋  | 169/221 [00:45<00:14,  3.65it/s][A
 77%|███████▋  | 170/221 [00:46<00:18,  2.74it/s][A
 77%|███████▋  | 171/221 [00:46<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:46<00:12,  4.01it/s][A
 78%|███████▊  | 173/221 [00:46<00:12,  3.72it/s][A
 79%|███████▊  | 174/221 [00:47<00:14,  3.15it/s][A
 79%|███████▉  | 175/221 [00:47<00:14,  3.12it/s][A
 80%|███████▉  | 176/221 [00:47<00:13,  3.44it/s][A
 80%|████████  | 177/221 [00:47<00:11,  3.85it/s][A
 81%|████████  | 178/221 [00:48<00:10,  4.28it/s][A
 81%|████████  | 179/221 [00:48<00:09,  4.21it/s][A
 81%|████████▏ | 180/221 [00:48<00:08,  4.62it/s][A
 82%|████████▏ | 181/221 [00:48<00:10,  3.98it/s][A
 82%|████████▏ | 182/221 [00:49<00:10,  3.69it/s][A
 83%|████████▎ | 183/221 [00:49<00:10,  3.54it/s][A
 83%|████████▎ | 184/221 [00:49<00:08,  4.26it/s][A
 84%|████████▎ | 185/221 [00:49<00:07,  4.69it/s][A
 84%|████████▍ | 186/221 [00:50<00:09,  3.78it/s][A
 85%|████████▍ | 187/221 [00:50<00:08,  3.98it/s][A
 85%|████████▌ | 188/221 [00:50<00:08,  3.92it/s][A
 86%|████████▌ | 189/221 [00:50<00:08,  3.74it/s][A
 86%|████████▌ | 190/221 [00:51<00:09,  3.14it/s][A
 86%|████████▋ | 191/221 [00:51<00:07,  3.79it/s][A
 87%|████████▋ | 192/221 [00:51<00:09,  3.20it/s][A
 87%|████████▋ | 193/221 [00:52<00:07,  3.74it/s][A
 88%|████████▊ | 194/221 [00:52<00:08,  3.29it/s][A
 88%|████████▊ | 195/221 [00:52<00:07,  3.35it/s][A
 89%|████████▊ | 196/221 [00:53<00:07,  3.22it/s][A
 89%|████████▉ | 197/221 [00:53<00:06,  3.88it/s][A
 90%|████████▉ | 198/221 [00:53<00:08,  2.79it/s][A
 90%|█████████ | 199/221 [00:54<00:07,  2.95it/s][A
 90%|█████████ | 200/221 [00:54<00:07,  2.78it/s][A
 91%|█████████ | 201/221 [00:54<00:06,  2.96it/s][A
 91%|█████████▏| 202/221 [00:55<00:06,  2.85it/s][A
 92%|█████████▏| 203/221 [00:55<00:05,  3.54it/s][A
 92%|█████████▏| 204/221 [00:55<00:06,  2.65it/s][A
 93%|█████████▎| 205/221 [00:56<00:04,  3.32it/s][A
 93%|█████████▎| 206/221 [00:56<00:04,  3.07it/s][A
 94%|█████████▎| 207/221 [00:56<00:04,  3.20it/s][A
 94%|█████████▍| 208/221 [00:56<00:03,  3.87it/s][A
 95%|█████████▍| 209/221 [00:57<00:03,  3.73it/s][A
 95%|█████████▌| 210/221 [00:57<00:02,  3.91it/s][A
 95%|█████████▌| 211/221 [00:57<00:02,  3.43it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  3.43it/s][A
 96%|█████████▋| 213/221 [00:58<00:02,  3.57it/s][A
 97%|█████████▋| 214/221 [00:58<00:02,  2.71it/s][A
 97%|█████████▋| 215/221 [00:59<00:02,  2.96it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  3.02it/s][A
 98%|█████████▊| 217/221 [00:59<00:01,  3.32it/s][A
 99%|█████████▊| 218/221 [01:00<00:00,  3.08it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  2.86it/s][A
100%|█████████▉| 220/221 [01:00<00:00,  2.98it/s][A
100%|██████████| 221/221 [01:01<00:00,  3.02it/s][A100%|██████████| 221/221 [01:01<00:00,  3.62it/s]
09/09/2024 20:02:08 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 849--===========

09/09/2024 20:02:08 - INFO - __main__ -   {'area_r1': 26.1, 'area_recall': '26.1/46.3/55.1', 'area_ravg': 42.5}
09/09/2024 20:02:08 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 849--===========

09/09/2024 20:02:08 - INFO - __main__ -   {'forward_r1': 34.2, 'forward_recall': '34.2/60.5/70.9', 'forward_ravg': 55.2}
09/09/2024 20:02:08 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 849--===========

09/09/2024 20:02:08 - INFO - __main__ -   {'area_video_r1': 39.3, 'area_video_recall': '39.3/69.3/78.8', 'area_video_ravg': 62.5}
09/09/2024 20:02:08 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 299=======

09/09/2024 20:02:08 - INFO - __main__ -   {'area_video_r1': 40.6, 'area_video_recall': '40.6/66.7/79.0', 'area_video_ravg': 62.1}
09/09/2024 20:02:08 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 849--===========

09/09/2024 20:02:08 - INFO - __main__ -   {'area_video_r1': 49.1, 'area_video_recall': '49.1/68.3/75.7', 'area_video_ravg': 64.4, 'area_video_back_r1': 50.1, 'area_video_back_recall': '50.1/72.2/80.0', 'area_video_back_ravg': 67.4}
09/09/2024 20:02:08 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 20:02:08 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 20:02:08 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 849--===========

09/09/2024 20:02:08 - INFO - __main__ -   {'video_r1': 41.9, 'video_recall': '41.9/69.2/79.8', 'video_ravg': 63.6}
09/09/2024 20:02:08 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 20:02:08 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 20:02:08 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 849--===========

09/09/2024 20:02:08 - INFO - __main__ -   {'video_r1': 51.0, 'video_recall': '51.0/75.0/82.2', 'video_ravg': 69.4}
09/09/2024 20:02:08 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 599=======

09/09/2024 20:02:08 - INFO - __main__ -   {'video_r1': 52.7, 'video_recall': '52.7/76.1/82.8', 'video_ravg': 70.6}
09/09/2024 20:02:29 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.5388613939285278, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.024161366745829582, 'loss_ret%tv%ta--finetune_area/loss_area': 1.109980821609497, 'loss_ret%tv%ta--finetune_area/total_loss': 2.673003673553467}
 44%|████▎     | 850/1945 [4:37:03<37:42:33, 123.98s/it][h264 @ 0x556e4386dbc0] mmco: unref short failure
[h264 @ 0x556e4386dbc0] mmco: unref short failure
 44%|████▍     | 851/1945 [4:37:07<26:45:04, 88.03s/it]  44%|████▍     | 852/1945 [4:37:12<19:06:45, 62.95s/it][h264 @ 0x556e55684b80] mmco: unref short failure
[h264 @ 0x556e55684b80] mmco: unref short failure
 44%|████▍     | 853/1945 [4:37:17<13:52:37, 45.75s/it] 44%|████▍     | 854/1945 [4:37:23<10:14:22, 33.79s/it] 44%|████▍     | 855/1945 [4:37:29<7:42:45, 25.47s/it] [h264 @ 0x55b7df986cc0] mmco: unref short failure
 44%|████▍     | 856/1945 [4:37:36<5:58:45, 19.77s/it][h264 @ 0x556e442ca500] mmco: unref short failure
[h264 @ 0x556e442ca500] mmco: unref short failure
[h264 @ 0x556e442ca500] mmco: unref short failure
[h264 @ 0x556e442ca500] mmco: unref short failure
[h264 @ 0x55b7d4433640] mmco: unref short failure
 44%|████▍     | 857/1945 [4:37:43<4:50:45, 16.03s/it] 44%|████▍     | 858/1945 [4:37:50<4:00:04, 13.25s/it][h264 @ 0x55e51890f380] mmco: unref short failure
[h264 @ 0x55e51890f380] mmco: unref short failure
 44%|████▍     | 859/1945 [4:37:57<3:27:21, 11.46s/it][h264 @ 0x55b7d5ad40c0] mmco: unref short failure
[h264 @ 0x55e50a02f380] mmco: unref short failure
[h264 @ 0x556e44586f00] mmco: unref short failure
 44%|████▍     | 860/1945 [4:38:04<3:03:06, 10.13s/it][h264 @ 0x556e58703680] mmco: unref short failure
[h264 @ 0x556e58703680] mmco: unref short failure
 44%|████▍     | 861/1945 [4:38:12<2:47:30,  9.27s/it] 44%|████▍     | 862/1945 [4:38:20<2:44:52,  9.13s/it][h264 @ 0x556e574a8240] mmco: unref short failure
 44%|████▍     | 863/1945 [4:38:27<2:33:16,  8.50s/it][h264 @ 0x55b7e7744ac0] mmco: unref short failure
[h264 @ 0x556e57c4f640] mmco: unref short failure
 44%|████▍     | 864/1945 [4:38:35<2:30:01,  8.33s/it][h264 @ 0x556e66c5a680] mmco: unref short failure
[h264 @ 0x556e66c5a680] mmco: unref short failure
 44%|████▍     | 865/1945 [4:38:43<2:25:45,  8.10s/it] 45%|████▍     | 866/1945 [4:38:50<2:18:55,  7.73s/it][h264 @ 0x55e519871200] mmco: unref short failure
[h264 @ 0x55e519871200] mmco: unref short failure
[h264 @ 0x55e519871200] mmco: unref short failure
[h264 @ 0x55e519871200] mmco: unref short failure
[h264 @ 0x55e50de26a80] mmco: unref short failure
[h264 @ 0x55e50de26a80] mmco: unref short failure
[h264 @ 0x556e58cc9980] mmco: unref short failure
[h264 @ 0x556e58cc9980] mmco: unref short failure
[h264 @ 0x556e671c4180] mmco: unref short failure
[h264 @ 0x556e671c4180] mmco: unref short failure
[h264 @ 0x556e671c4180] mmco: unref short failure
[h264 @ 0x556e671c4180] mmco: unref short failure
[h264 @ 0x55e50c5a7940] mmco: unref short failure
[h264 @ 0x55e50c5a7940] mmco: unref short failure
[h264 @ 0x55e505b03840] mmco: unref short failure
[h264 @ 0x55e505b03840] mmco: unref short failure
[h264 @ 0x55e505b03840] mmco: unref short failure
 45%|████▍     | 867/1945 [4:38:57<2:19:11,  7.75s/it][h264 @ 0x556e58d11040] mmco: unref short failure
[h264 @ 0x55e51730bb40] mmco: unref short failure
[h264 @ 0x55e51730bb40] mmco: unref short failure
[h264 @ 0x556e625d0ec0] mmco: unref short failure
[h264 @ 0x556e625d0ec0] mmco: unref short failure
[h264 @ 0x556e5b61b740] mmco: unref short failure
[h264 @ 0x556e5b61b740] mmco: unref short failure
[h264 @ 0x556e5b61b740] mmco: unref short failure
[h264 @ 0x556e5b61b740] mmco: unref short failure
[h264 @ 0x556e5b61b740] mmco: unref short failure
[h264 @ 0x556e5b61b740] mmco: unref short failure
[h264 @ 0x55e504f4bc40] mmco: unref short failure
[h264 @ 0x55e504f4bc40] mmco: unref short failure
 45%|████▍     | 868/1945 [4:39:07<2:31:04,  8.42s/it][h264 @ 0x55e5142b31c0] mmco: unref short failure
[h264 @ 0x55e5142b31c0] mmco: unref short failure
[h264 @ 0x55e5130cb680] mmco: unref short failure
[h264 @ 0x55e5130cb680] mmco: unref short failure
[h264 @ 0x55e506a8ba40] mmco: unref short failure
 45%|████▍     | 869/1945 [4:39:22<3:06:31, 10.40s/it][h264 @ 0x556e671767c0] mmco: unref short failure
[h264 @ 0x556e671767c0] mmco: unref short failure
 45%|████▍     | 870/1945 [4:39:30<2:51:05,  9.55s/it][h264 @ 0x55e511f6e040] mmco: unref short failure
[h264 @ 0x55e511f6e040] mmco: unref short failure
 45%|████▍     | 871/1945 [4:39:37<2:39:09,  8.89s/it][h264 @ 0x55b7e0a24780] mmco: unref short failure
 45%|████▍     | 872/1945 [4:39:47<2:44:41,  9.21s/it][h264 @ 0x55e50c59cd40] mmco: unref short failure
 45%|████▍     | 873/1945 [4:39:55<2:37:28,  8.81s/it][h264 @ 0x55e50c59cd40] mmco: unref short failure
[h264 @ 0x556e4f9d1fc0] mmco: unref short failure
[h264 @ 0x556e58153dc0] mmco: unref short failure
[h264 @ 0x55e50c8b3e40] mmco: unref short failure
[h264 @ 0x55e518d72600] mmco: unref short failure
[h264 @ 0x556e612d9240] mmco: unref short failure
[h264 @ 0x556e612d9240] mmco: unref short failure
[h264 @ 0x556e5f96a8c0] mmco: unref short failure
[h264 @ 0x556e5f96a8c0] mmco: unref short failure
[h264 @ 0x556e61dabb40] mmco: unref short failure
[h264 @ 0x556e61dabb40] mmco: unref short failure
[h264 @ 0x556e61dabb40] mmco: unref short failure
[h264 @ 0x556e61dabb40] mmco: unref short failure
[h264 @ 0x55e50c18a040] mmco: unref short failure
[h264 @ 0x55e50c18a040] mmco: unref short failure
[h264 @ 0x556e68d2c780] mmco: unref short failure
[h264 @ 0x55b7e40f3400] mmco: unref short failure
[h264 @ 0x55b7db86cf00] mmco: unref short failure
[h264 @ 0x55b7db86cf00] mmco: unref short failure
 45%|████▍     | 874/1945 [4:40:46<6:19:28, 21.26s/it][h264 @ 0x556e6fea1040] mmco: unref short failure
[h264 @ 0x55e518063880] mmco: unref short failure
[h264 @ 0x55e518063880] mmco: unref short failure
[h264 @ 0x55b7e3721780] mmco: unref short failure
[h264 @ 0x55b7e3721780] mmco: unref short failure
[h264 @ 0x55b7cb90d380] mmco: unref short failure
[h264 @ 0x55b7cb90d380] mmco: unref short failure
[h264 @ 0x55b7cb90d380] mmco: unref short failure
[h264 @ 0x55b7cb90d380] mmco: unref short failure
[h264 @ 0x55b7cb90d380] mmco: unref short failure
[h264 @ 0x55b7cb90d380] mmco: unref short failure
[h264 @ 0x55b7cb90d380] mmco: unref short failure
[h264 @ 0x55b7cb90d380] mmco: unref short failure
 45%|████▍     | 875/1945 [4:40:55<5:15:20, 17.68s/it][h264 @ 0x556e521f0b80] mmco: unref short failure
[h264 @ 0x556e521f0b80] mmco: unref short failure
 45%|████▌     | 876/1945 [4:41:09<4:54:30, 16.53s/it][h264 @ 0x556e49086640] mmco: unref short failure
[h264 @ 0x556e49086640] mmco: unref short failure
[h264 @ 0x556e63a214c0] mmco: unref short failure
[h264 @ 0x55e5111481c0] mmco: unref short failure
 45%|████▌     | 877/1945 [4:41:21<4:31:16, 15.24s/it][h264 @ 0x55e5014acc40] mmco: unref short failure
[h264 @ 0x55e5014acc40] mmco: unref short failure
[h264 @ 0x556e42eaf5c0] mmco: unref short failure
[h264 @ 0x556e42eaf5c0] mmco: unref short failure
 45%|████▌     | 878/1945 [4:41:31<4:01:30, 13.58s/it] 45%|████▌     | 879/1945 [4:41:43<3:53:52, 13.16s/it] 45%|████▌     | 880/1945 [4:41:50<3:22:02, 11.38s/it][h264 @ 0x55b7e36a32c0] mmco: unref short failure
[h264 @ 0x55b7e36a32c0] mmco: unref short failure
[h264 @ 0x55b7e36a32c0] mmco: unref short failure
[h264 @ 0x55b7e36a32c0] mmco: unref short failure
[h264 @ 0x55b7e36a32c0] mmco: unref short failure
[h264 @ 0x55b7e36a32c0] mmco: unref short failure
[h264 @ 0x55b7e36a32c0] mmco: unref short failure
[h264 @ 0x55b7e36a32c0] mmco: unref short failure
 45%|████▌     | 881/1945 [4:42:00<3:12:26, 10.85s/it][h264 @ 0x55e5124b5300] mmco: unref short failure
[h264 @ 0x55b7de1aa8c0] mmco: unref short failure
[h264 @ 0x556e5fd16400] mmco: unref short failure
[h264 @ 0x556e5fd16400] mmco: unref short failure
[h264 @ 0x556e5c388cc0] mmco: unref short failure
[h264 @ 0x55b7de2fa900] mmco: unref short failure
[h264 @ 0x556e54e761c0] mmco: unref short failure
[h264 @ 0x556e54e761c0] mmco: unref short failure
[h264 @ 0x556e50b5e200] mmco: unref short failure
[h264 @ 0x556e5b815200] mmco: unref short failure
[h264 @ 0x556e5b815200] mmco: unref short failure
[h264 @ 0x556e5b815200] mmco: unref short failure
[h264 @ 0x556e5b815200] mmco: unref short failure
 45%|████▌     | 882/1945 [4:42:45<6:14:15, 21.12s/it][h264 @ 0x55b7e80f5880] mmco: unref short failure
[h264 @ 0x55b7e80f5880] mmco: unref short failure
[h264 @ 0x55e504182bc0] mmco: unref short failure
[h264 @ 0x55e504182bc0] mmco: unref short failure
[h264 @ 0x55e5198659c0] mmco: unref short failure
[h264 @ 0x55e5198659c0] mmco: unref short failure
 45%|████▌     | 883/1945 [4:42:58<5:31:31, 18.73s/it][h264 @ 0x55b7cb261380] mmco: unref short failure
[h264 @ 0x55b7ece2ebc0] mmco: unref short failure
[h264 @ 0x55b7ece2ebc0] mmco: unref short failure
[h264 @ 0x556e600a3b80] mmco: unref short failure
[h264 @ 0x55b7d09371c0] mmco: unref short failure
[h264 @ 0x556e53309fc0] mmco: unref short failure
 45%|████▌     | 884/1945 [4:43:12<5:06:02, 17.31s/it][h264 @ 0x556e68c05200] mmco: unref short failure
[h264 @ 0x556e68c05200] mmco: unref short failure
[h264 @ 0x556e6ef41580] mmco: unref short failure
[h264 @ 0x556e59034400] mmco: unref short failure
[h264 @ 0x556e59034400] mmco: unref short failure
[h264 @ 0x55b7d6f6bcc0] mmco: unref short failure
 46%|████▌     | 885/1945 [4:43:26<4:50:53, 16.47s/it][h264 @ 0x55e50454f0c0] mmco: unref short failure
[h264 @ 0x55e50454f0c0] mmco: unref short failure
 46%|████▌     | 886/1945 [4:43:34<4:02:21, 13.73s/it][h264 @ 0x556e5c3a3380] mmco: unref short failure
[h264 @ 0x556e5c3a3380] mmco: unref short failure
[h264 @ 0x556e529b0800] mmco: unref short failure
 46%|████▌     | 887/1945 [4:43:50<4:12:49, 14.34s/it][h264 @ 0x55b7d700d4c0] mmco: unref short failure
[h264 @ 0x55b7d700d4c0] mmco: unref short failure
 46%|████▌     | 888/1945 [4:43:59<3:46:16, 12.84s/it][h264 @ 0x556e55bece80] mmco: unref short failure
[h264 @ 0x556e55bece80] mmco: unref short failure
[h264 @ 0x556e641a4500] mmco: unref short failure
[h264 @ 0x556e641a4500] mmco: unref short failure
 46%|████▌     | 889/1945 [4:44:06<3:13:35, 11.00s/it][h264 @ 0x556e6006de00] mmco: unref short failure
[h264 @ 0x556e42d380c0] mmco: unref short failure
[h264 @ 0x556e42d380c0] mmco: unref short failure
[h264 @ 0x556e547d77c0] mmco: unref short failure
[h264 @ 0x556e547d77c0] mmco: unref short failure
[h264 @ 0x556e561c7380] mmco: unref short failure
[h264 @ 0x556e561c7380] mmco: unref short failure
[h264 @ 0x55b7dc4b8f00] mmco: unref short failure
[h264 @ 0x556e6ab65040] mmco: unref short failure
[h264 @ 0x55e4ff929940] mmco: unref short failure
[h264 @ 0x55e4ff929940] mmco: unref short failure
[h264 @ 0x55e4ff929940] mmco: unref short failure
[h264 @ 0x556e58e9e080] mmco: unref short failure
[h264 @ 0x556e58e9e080] mmco: unref short failure
[h264 @ 0x556e6f016b00] mmco: unref short failure
[h264 @ 0x556e6f016b00] mmco: unref short failure
[h264 @ 0x556e6371a440] mmco: unref short failure
 46%|████▌     | 890/1945 [4:44:39<5:10:10, 17.64s/it][h264 @ 0x55e5068b40c0] mmco: unref short failure
[h264 @ 0x556e4e6237c0] mmco: unref short failure
[h264 @ 0x556e4e6237c0] mmco: unref short failure
[h264 @ 0x55b7e3219d00] mmco: unref short failure
[h264 @ 0x55b7e3219d00] mmco: unref short failure
[h264 @ 0x55e516bc2580] mmco: unref short failure
[h264 @ 0x55e50f671f80] mmco: unref short failure
[h264 @ 0x55e50978a0c0] mmco: unref short failure
[h264 @ 0x55b7d14244c0] mmco: unref short failure
[h264 @ 0x55e51170ee80] mmco: unref short failure
 46%|████▌     | 891/1945 [4:45:04<5:50:04, 19.93s/it][h264 @ 0x556e5da90900] mmco: unref short failure
[h264 @ 0x556e5da90900] mmco: unref short failure
[h264 @ 0x556e489189c0] mmco: unref short failure
[h264 @ 0x556e489189c0] mmco: unref short failure
 46%|████▌     | 892/1945 [4:45:16<5:05:35, 17.41s/it][h264 @ 0x55b7dc549080] mmco: unref short failure
[h264 @ 0x55b7dc549080] mmco: unref short failure
[h264 @ 0x55e50cd94c00] mmco: unref short failure
[h264 @ 0x55e50cd94c00] mmco: unref short failure
[h264 @ 0x55e50cd94c00] mmco: unref short failure
[h264 @ 0x55e50cd94c00] mmco: unref short failure
 46%|████▌     | 893/1945 [4:45:27<4:32:38, 15.55s/it][h264 @ 0x55e4fe5df100] mmco: unref short failure
[h264 @ 0x55b7d1981900] mmco: unref short failure
[h264 @ 0x556e58888fc0] mmco: unref short failure
[h264 @ 0x556e6825f500] mmco: unref short failure
[h264 @ 0x556e6825f500] mmco: unref short failure
 46%|████▌     | 894/1945 [4:45:34<3:48:49, 13.06s/it][h264 @ 0x556e53fde400] mmco: unref short failure
[h264 @ 0x556e53fde400] mmco: unref short failure
[h264 @ 0x55b7d0520400] mmco: unref short failure
[h264 @ 0x556e6b96b0c0] mmco: unref short failure
 46%|████▌     | 895/1945 [4:45:58<4:48:31, 16.49s/it] 46%|████▌     | 896/1945 [4:46:05<3:57:13, 13.57s/it] 46%|████▌     | 897/1945 [4:46:12<3:23:17, 11.64s/it][h264 @ 0x55e4febc7740] mmco: unref short failure
[h264 @ 0x55e4febc7740] mmco: unref short failure
[h264 @ 0x55e518407a40] mmco: unref short failure
[h264 @ 0x55e518407a40] mmco: unref short failure
[h264 @ 0x556e4dce7340] mmco: unref short failure
[h264 @ 0x556e4dce7340] mmco: unref short failure
[h264 @ 0x55b7ea09ee80] mmco: unref short failure
[h264 @ 0x55b7e33cf1c0] mmco: unref short failure
[h264 @ 0x55b7e33cf1c0] mmco: unref short failure
[h264 @ 0x556e74c25f00] mmco: unref short failure
[h264 @ 0x556e74c25f00] mmco: unref short failure
[h264 @ 0x556e629d8280] mmco: unref short failure
[h264 @ 0x556e629d8280] mmco: unref short failure
[h264 @ 0x556e560e6240] mmco: unref short failure
[h264 @ 0x55e506a6f140] mmco: unref short failure
[h264 @ 0x55e50012de00] mmco: unref short failure
[h264 @ 0x55b7ed510c00] mmco: unref short failure
[h264 @ 0x55b7ed510c00] mmco: unref short failure
[h264 @ 0x556e53309900] mmco: unref short failure
[h264 @ 0x55b7ed510c00] mmco: unref short failure
[h264 @ 0x55b7ed510c00] mmco: unref short failure
[h264 @ 0x55b7ed510c00] mmco: unref short failure
[h264 @ 0x556e5af7ec80] mmco: unref short failure
[h264 @ 0x556e5af7ec80] mmco: unref short failure
[h264 @ 0x556e5af7ec80] mmco: unref short failure
[h264 @ 0x556e5af7ec80] mmco: unref short failure
[h264 @ 0x556e6f65e740] mmco: unref short failure
[h264 @ 0x556e6f65e740] mmco: unref short failure
[h264 @ 0x556e6f65e740] mmco: unref short failure
[h264 @ 0x556e6f65e740] mmco: unref short failure
 46%|████▌     | 898/1945 [4:46:39<4:40:16, 16.06s/it][h264 @ 0x55e5169170c0] mmco: unref short failure
[h264 @ 0x55e5169170c0] mmco: unref short failure
[h264 @ 0x556e70100e00] mmco: unref short failure
[h264 @ 0x556e70100e00] mmco: unref short failure
[h264 @ 0x556e459271c0] mmco: unref short failure
 46%|████▌     | 899/1945 [4:47:07<5:41:15, 19.58s/it]09/09/2024 20:12:35 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 20:12:35 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e519ae7800] mmco: unref short failure
[h264 @ 0x55e519ae7800] mmco: unref short failure
[h264 @ 0x55b7e6377480] mmco: unref short failure
[h264 @ 0x556e48b51980] mmco: unref short failure
[h264 @ 0x556e48b51980] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e4fe661500] mmco: unref short failure
[h264 @ 0x55e4fe661500] mmco: unref short failure
[h264 @ 0x55b7e649d1c0] mmco: unref short failure
[h264 @ 0x55b7e649d1c0] mmco: unref short failure
[h264 @ 0x55e512a0c680] mmco: unref short failure
[h264 @ 0x55e512a0c680] mmco: unref short failure
[h264 @ 0x55e512a0c680] mmco: unref short failure
[h264 @ 0x55e512a0c680] mmco: unref short failure
[h264 @ 0x55e512a0c680] mmco: unref short failure
[h264 @ 0x55e512a0c680] mmco: unref short failure
[h264 @ 0x55e512a0c680] mmco: unref short failure
[h264 @ 0x55e512a0c680] mmco: unref short failure
[h264 @ 0x55b7dc556680] mmco: unref short failure
[h264 @ 0x55b7dc556680] mmco: unref short failure
[h264 @ 0x55b7dc556680] mmco: unref short failure
[h264 @ 0x55e5017cd140] mmco: unref short failure
[h264 @ 0x55e5017cd140] mmco: unref short failure
[h264 @ 0x556e5d539fc0] mmco: unref short failure
[h264 @ 0x556e59e8b800] mmco: unref short failure
[h264 @ 0x556e7112e1c0] mmco: unref short failure
[h264 @ 0x556e521f00c0] mmco: unref short failure
[h264 @ 0x55e51b474400] mmco: unref short failure
[h264 @ 0x55e51b474400] mmco: unref short failure
[h264 @ 0x55b7d6bd26c0] mmco: unref short failure
[h264 @ 0x556e4f9c4600] mmco: unref short failure
[h264 @ 0x55e518cb0ac0] mmco: unref short failure
[h264 @ 0x55e518cb0ac0] mmco: unref short failure
[h264 @ 0x556e6db43b00] mmco: unref short failure
[h264 @ 0x55e516917340] mmco: unref short failure
[h264 @ 0x556e569dda80] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:22,  9.93it/s][A
  1%|          | 2/221 [00:00<00:34,  6.39it/s][A
  1%|▏         | 3/221 [00:00<00:38,  5.62it/s][A
  2%|▏         | 4/221 [00:00<00:40,  5.35it/s][A
  2%|▏         | 5/221 [00:00<00:36,  5.88it/s][A
  3%|▎         | 6/221 [00:01<00:38,  5.56it/s][A
  3%|▎         | 7/221 [00:01<00:59,  3.63it/s][A
  4%|▎         | 8/221 [00:01<00:52,  4.04it/s][A
  4%|▍         | 9/221 [00:01<00:54,  3.92it/s][A
  5%|▍         | 10/221 [00:03<02:37,  1.34it/s][A
  5%|▍         | 11/221 [00:04<02:04,  1.68it/s][A
  5%|▌         | 12/221 [00:04<01:41,  2.06it/s][A[h264 @ 0x55e51a3877c0] mmco: unref short failure

  6%|▌         | 13/221 [00:04<01:27,  2.37it/s][A[h264 @ 0x55e51a3877c0] mmco: unref short failure

  6%|▋         | 14/221 [00:07<04:21,  1.26s/it][A
  7%|▋         | 15/221 [00:07<03:13,  1.06it/s][A
  7%|▋         | 16/221 [00:09<03:51,  1.13s/it][A
  8%|▊         | 17/221 [00:10<03:25,  1.01s/it][A
  8%|▊         | 18/221 [00:10<02:51,  1.18it/s][A
  9%|▊         | 19/221 [00:10<02:06,  1.60it/s][A
  9%|▉         | 20/221 [00:10<01:35,  2.10it/s][A
 10%|▉         | 21/221 [00:11<01:20,  2.50it/s][A
 10%|█         | 23/221 [00:11<00:50,  3.89it/s][A
 11%|█         | 24/221 [00:11<00:43,  4.56it/s][A
 11%|█▏        | 25/221 [00:11<00:38,  5.15it/s][A
 12%|█▏        | 26/221 [00:11<00:34,  5.69it/s][A
 12%|█▏        | 27/221 [00:11<00:30,  6.33it/s][A
 13%|█▎        | 28/221 [00:11<00:29,  6.55it/s][A[h264 @ 0x556e5b747900] mmco: unref short failure
[h264 @ 0x556e65fca4c0] mmco: unref short failure
[h264 @ 0x556e65fca4c0] mmco: unref short failure

 13%|█▎        | 29/221 [00:15<04:01,  1.26s/it][A
 14%|█▎        | 30/221 [00:16<03:00,  1.06it/s][A
 14%|█▍        | 31/221 [00:16<02:13,  1.42it/s][A
 14%|█▍        | 32/221 [00:16<01:45,  1.79it/s][A
 15%|█▍        | 33/221 [00:17<01:45,  1.78it/s][A
 15%|█▌        | 34/221 [00:17<01:19,  2.35it/s][A
 16%|█▌        | 35/221 [00:17<01:02,  2.98it/s][A
 16%|█▋        | 36/221 [00:17<00:55,  3.34it/s][A
 17%|█▋        | 37/221 [00:17<00:46,  3.95it/s][A
 17%|█▋        | 38/221 [00:17<00:42,  4.26it/s][A
 18%|█▊        | 39/221 [00:18<00:42,  4.29it/s][A
 18%|█▊        | 40/221 [00:18<00:50,  3.60it/s][A
 19%|█▊        | 41/221 [00:18<00:43,  4.12it/s][A
 19%|█▉        | 43/221 [00:18<00:30,  5.84it/s][A
 20%|█▉        | 44/221 [00:18<00:29,  5.97it/s][A
 21%|██        | 46/221 [00:19<00:26,  6.65it/s][A
 22%|██▏       | 48/221 [00:19<00:22,  7.69it/s][A[h264 @ 0x556e6b120440] mmco: unref short failure
[h264 @ 0x556e6b120440] mmco: unref short failure
[h264 @ 0x556e4eb40c80] mmco: unref short failure

 22%|██▏       | 49/221 [00:23<02:29,  1.15it/s][A
 23%|██▎       | 50/221 [00:23<01:58,  1.44it/s][A[h264 @ 0x556e678ede80] mmco: unref short failure
[h264 @ 0x556e678ede80] mmco: unref short failure

 23%|██▎       | 51/221 [00:23<01:40,  1.70it/s][A
 24%|██▍       | 53/221 [00:23<01:03,  2.65it/s][A
 24%|██▍       | 54/221 [00:23<00:53,  3.10it/s][A
 25%|██▍       | 55/221 [00:23<00:48,  3.43it/s][A
 25%|██▌       | 56/221 [00:24<00:48,  3.39it/s][A
 26%|██▌       | 57/221 [00:24<00:39,  4.11it/s][A
 26%|██▌       | 58/221 [00:24<00:38,  4.18it/s][A
 27%|██▋       | 59/221 [00:24<00:32,  4.95it/s][A
 28%|██▊       | 61/221 [00:24<00:25,  6.19it/s][A
 28%|██▊       | 62/221 [00:25<00:24,  6.46it/s][A
 29%|██▊       | 63/221 [00:25<00:29,  5.44it/s][A
 29%|██▉       | 64/221 [00:25<00:25,  6.19it/s][A
 29%|██▉       | 65/221 [00:25<00:25,  6.14it/s][A
 30%|██▉       | 66/221 [00:25<00:26,  5.93it/s][A
 30%|███       | 67/221 [00:26<00:30,  5.03it/s][A
 31%|███       | 68/221 [00:26<00:26,  5.72it/s][A
 31%|███       | 69/221 [00:26<00:24,  6.16it/s][A
 32%|███▏      | 70/221 [00:26<00:23,  6.38it/s][A
 32%|███▏      | 71/221 [00:26<00:34,  4.37it/s][A
 33%|███▎      | 72/221 [00:27<00:33,  4.46it/s][A
 33%|███▎      | 73/221 [00:27<00:43,  3.38it/s][A
 34%|███▍      | 75/221 [00:27<00:29,  5.00it/s][A
 34%|███▍      | 76/221 [00:27<00:29,  4.86it/s][A
 35%|███▌      | 78/221 [00:28<00:26,  5.41it/s][A
 36%|███▌      | 79/221 [00:28<00:27,  5.13it/s][A[h264 @ 0x556e6d2c56c0] mmco: unref short failure
[h264 @ 0x556e6d2c56c0] mmco: unref short failure

 36%|███▌      | 80/221 [00:28<00:30,  4.61it/s][A
 37%|███▋      | 81/221 [00:33<03:04,  1.32s/it][A[h264 @ 0x556e6f814f40] mmco: unref short failure
[h264 @ 0x556e6f814f40] mmco: unref short failure
[h264 @ 0x556e6f814f40] mmco: unref short failure
[h264 @ 0x556e6f814f40] mmco: unref short failure
[h264 @ 0x556e6f814f40] mmco: unref short failure
[h264 @ 0x556e6f814f40] mmco: unref short failure
[h264 @ 0x556e6f814f40] mmco: unref short failure
[h264 @ 0x556e6f814f40] mmco: unref short failure

 37%|███▋      | 82/221 [00:33<02:20,  1.01s/it][A
 38%|███▊      | 84/221 [00:33<01:24,  1.63it/s][A
 38%|███▊      | 85/221 [00:34<01:19,  1.70it/s][A
 39%|███▉      | 86/221 [00:34<01:05,  2.05it/s][A
 39%|███▉      | 87/221 [00:34<00:54,  2.47it/s][A
 40%|███▉      | 88/221 [00:34<00:53,  2.48it/s][A[h264 @ 0x55b7dd616500] mmco: unref short failure
[h264 @ 0x55b7dd616500] mmco: unref short failure
[h264 @ 0x556e6d2c5e00] mmco: unref short failure
[h264 @ 0x556e6d2c5e00] mmco: unref short failure

 40%|████      | 89/221 [00:35<00:47,  2.76it/s][A
 41%|████      | 90/221 [00:35<00:44,  2.96it/s][A[h264 @ 0x556e6c1594c0] mmco: unref short failure
[h264 @ 0x556e6c1594c0] mmco: unref short failure

 41%|████      | 91/221 [00:35<00:41,  3.15it/s][A[h264 @ 0x556e61941f40] mmco: unref short failure
[h264 @ 0x556e61941f40] mmco: unref short failure

 42%|████▏     | 92/221 [00:35<00:36,  3.49it/s][A
 42%|████▏     | 93/221 [00:36<01:08,  1.86it/s][A
 43%|████▎     | 94/221 [00:37<00:52,  2.40it/s][A
 43%|████▎     | 95/221 [00:37<00:43,  2.89it/s][A
 43%|████▎     | 96/221 [00:38<01:01,  2.03it/s][A
 44%|████▍     | 97/221 [00:38<00:49,  2.49it/s][A
 45%|████▍     | 99/221 [00:38<00:31,  3.90it/s][A
 45%|████▌     | 100/221 [00:38<00:27,  4.35it/s][A
 46%|████▌     | 101/221 [00:38<00:23,  5.04it/s][A
 46%|████▌     | 102/221 [00:38<00:20,  5.81it/s][A
 47%|████▋     | 103/221 [00:38<00:19,  6.17it/s][A
 47%|████▋     | 104/221 [00:39<00:17,  6.67it/s][A
 48%|████▊     | 105/221 [00:39<00:16,  6.95it/s][A
 48%|████▊     | 106/221 [00:39<00:23,  4.90it/s][A
 48%|████▊     | 107/221 [00:39<00:23,  4.86it/s][A
 49%|████▉     | 108/221 [00:39<00:23,  4.82it/s][A
 49%|████▉     | 109/221 [00:40<00:22,  5.08it/s][A
 50%|████▉     | 110/221 [00:40<00:25,  4.43it/s][A[h264 @ 0x55b7d9f996c0] mmco: unref short failure

 50%|█████     | 111/221 [00:40<00:23,  4.74it/s][A
 51%|█████     | 112/221 [00:41<00:38,  2.80it/s][A
 52%|█████▏    | 114/221 [00:41<00:28,  3.81it/s][A
 52%|█████▏    | 115/221 [00:41<00:25,  4.13it/s][A
 52%|█████▏    | 116/221 [00:42<00:25,  4.09it/s][A
 53%|█████▎    | 118/221 [00:42<00:20,  4.91it/s][A
 54%|█████▍    | 119/221 [00:42<00:18,  5.48it/s][A
 54%|█████▍    | 120/221 [00:42<00:17,  5.91it/s][A
 55%|█████▌    | 122/221 [00:43<00:18,  5.43it/s][A
 56%|█████▌    | 123/221 [00:43<00:16,  6.02it/s][A
 57%|█████▋    | 125/221 [00:43<00:13,  6.96it/s][A
 57%|█████▋    | 126/221 [00:43<00:14,  6.57it/s][A[h264 @ 0x55e51a278000] mmco: unref short failure
[h264 @ 0x55e51a278000] mmco: unref short failure

 58%|█████▊    | 128/221 [00:43<00:15,  5.94it/s][A
 58%|█████▊    | 129/221 [00:44<00:15,  5.87it/s][A
 59%|█████▉    | 130/221 [00:45<00:36,  2.49it/s][A
 59%|█████▉    | 131/221 [00:45<00:29,  3.05it/s][A
 60%|██████    | 133/221 [00:45<00:20,  4.39it/s][A
 61%|██████    | 134/221 [00:45<00:17,  5.01it/s][A
 62%|██████▏   | 136/221 [00:45<00:14,  5.69it/s][A
 62%|██████▏   | 138/221 [00:46<00:11,  6.98it/s][A
 63%|██████▎   | 140/221 [00:46<00:18,  4.34it/s][A
 64%|██████▍   | 141/221 [00:47<00:17,  4.45it/s][A
 64%|██████▍   | 142/221 [00:47<00:16,  4.88it/s][A
 65%|██████▍   | 143/221 [00:47<00:15,  5.09it/s][A
 66%|██████▌   | 145/221 [00:47<00:14,  5.29it/s][A
 66%|██████▌   | 146/221 [00:47<00:13,  5.64it/s][A
 67%|██████▋   | 147/221 [00:47<00:12,  6.08it/s][A
 67%|██████▋   | 148/221 [00:48<00:13,  5.52it/s][A
 67%|██████▋   | 149/221 [00:48<00:19,  3.62it/s][A
 68%|██████▊   | 150/221 [00:48<00:17,  4.12it/s][A
 68%|██████▊   | 151/221 [00:49<00:14,  4.74it/s][A
 69%|██████▉   | 153/221 [00:49<00:10,  6.65it/s][A
 70%|██████▉   | 154/221 [00:49<00:09,  6.84it/s][A
 71%|███████   | 156/221 [00:49<00:07,  8.48it/s][A
 71%|███████▏  | 158/221 [00:49<00:06,  9.96it/s][A
 72%|███████▏  | 160/221 [00:49<00:06, 10.08it/s][A
 73%|███████▎  | 162/221 [00:50<00:07,  8.31it/s][A
 74%|███████▍  | 163/221 [00:50<00:07,  7.79it/s][A
 74%|███████▍  | 164/221 [00:50<00:07,  8.03it/s][A
 75%|███████▍  | 165/221 [00:50<00:08,  6.60it/s][A
 75%|███████▌  | 166/221 [00:50<00:09,  6.03it/s][A
 76%|███████▌  | 168/221 [00:51<00:15,  3.53it/s][A
 76%|███████▋  | 169/221 [00:52<00:14,  3.51it/s][A
 77%|███████▋  | 170/221 [00:52<00:12,  3.93it/s][A
 77%|███████▋  | 171/221 [00:52<00:14,  3.48it/s][A
 78%|███████▊  | 172/221 [00:52<00:15,  3.21it/s][A
 78%|███████▊  | 173/221 [00:53<00:12,  3.94it/s][A
 79%|███████▊  | 174/221 [00:53<00:10,  4.57it/s][A
 79%|███████▉  | 175/221 [00:53<00:15,  2.90it/s][A
 80%|███████▉  | 176/221 [00:53<00:12,  3.55it/s][A
 80%|████████  | 177/221 [00:54<00:12,  3.52it/s][A
 81%|████████  | 179/221 [00:54<00:08,  5.00it/s][A
 81%|████████▏ | 180/221 [00:54<00:08,  5.12it/s][A
 82%|████████▏ | 181/221 [00:54<00:09,  4.32it/s][A
 82%|████████▏ | 182/221 [00:55<00:08,  4.40it/s][A
 83%|████████▎ | 183/221 [00:55<00:07,  5.10it/s][A
 83%|████████▎ | 184/221 [00:55<00:09,  3.71it/s][A
 84%|████████▍ | 186/221 [00:55<00:06,  5.52it/s][A
 85%|████████▌ | 188/221 [00:56<00:04,  7.35it/s][A
 86%|████████▌ | 190/221 [00:56<00:03,  9.09it/s][A[h264 @ 0x556e6ec30380] mmco: unref short failure

 87%|████████▋ | 192/221 [00:59<00:16,  1.76it/s][A
 87%|████████▋ | 193/221 [00:59<00:13,  2.07it/s][A
 88%|████████▊ | 195/221 [00:59<00:08,  3.04it/s][A
 89%|████████▉ | 197/221 [00:59<00:06,  3.99it/s][A
 90%|█████████ | 199/221 [00:59<00:04,  4.72it/s][A
 90%|█████████ | 200/221 [01:00<00:05,  3.69it/s][A
 91%|█████████ | 201/221 [01:00<00:04,  4.14it/s][A
 91%|█████████▏| 202/221 [01:00<00:04,  3.92it/s][A
 92%|█████████▏| 204/221 [01:00<00:03,  5.46it/s][A
 94%|█████████▎| 207/221 [01:01<00:01,  7.03it/s][A
 95%|█████████▍| 209/221 [01:01<00:01,  7.94it/s][A
 95%|█████████▌| 210/221 [01:01<00:01,  8.16it/s][A
 96%|█████████▌| 212/221 [01:01<00:00,  9.66it/s][A
 97%|█████████▋| 214/221 [01:01<00:00,  9.71it/s][A
 98%|█████████▊| 216/221 [01:01<00:00, 10.93it/s][A 98%|█████████▊| 217/221 [01:01<00:01,  3.50it/s]
[h264 @ 0x556e6828d400] mmco: unref short failure
[h264 @ 0x55b7e0010d00] mmco: unref short failure
[h264 @ 0x55b7e0010d00] mmco: unref short failure
[h264 @ 0x556e678ed7c0] mmco: unref short failure
[h264 @ 0x55b7db5bc6c0] mmco: unref short failure
[h264 @ 0x55b7db5bc6c0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.78it/s][A
  1%|          | 2/221 [00:00<00:57,  3.78it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.78it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.78it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.78it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.78it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.78it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.78it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.79it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.78it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.78it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.79it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.79it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.79it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.79it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:51,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:37,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.78it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.78it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.78it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.78it/s][A
 57%|█████▋    | 125/221 [00:32<00:25,  3.78it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.78it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.78it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.78it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.78it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.78it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.78it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.78it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.78it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.78it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.78it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.78it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 159/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.78it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.78it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.78it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.78it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.79it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.79it/s][A
 76%|███████▌  | 168/221 [00:44<00:13,  3.79it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.79it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.79it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.79it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.79it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.79it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.78it/s][A
 81%|████████  | 178/221 [00:46<00:11,  3.78it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.79it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.79it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.79it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.79it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.79it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.79it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.79it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.78it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.78it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.78it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.78it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.78it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.78it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.79it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  1%|          | 2/221 [00:00<00:32,  6.65it/s][A
  1%|▏         | 3/221 [00:00<00:35,  6.14it/s][A
  2%|▏         | 4/221 [00:00<00:31,  6.84it/s][A
  2%|▏         | 5/221 [00:00<00:34,  6.25it/s][A
  3%|▎         | 6/221 [00:00<00:30,  6.97it/s][A
  3%|▎         | 7/221 [00:01<00:41,  5.15it/s][A
  4%|▎         | 8/221 [00:01<00:55,  3.83it/s][A
  4%|▍         | 9/221 [00:01<00:50,  4.24it/s][A
  5%|▍         | 10/221 [00:02<01:13,  2.87it/s][A
  5%|▍         | 11/221 [00:02<01:03,  3.29it/s][A
  5%|▌         | 12/221 [00:02<00:55,  3.79it/s][A
  6%|▌         | 13/221 [00:03<01:35,  2.18it/s][A
  6%|▋         | 14/221 [00:03<01:12,  2.85it/s][A
  7%|▋         | 15/221 [00:04<01:06,  3.08it/s][A
  7%|▋         | 16/221 [00:04<01:07,  3.02it/s][A
  8%|▊         | 17/221 [00:04<01:16,  2.66it/s][A
  8%|▊         | 18/221 [00:05<01:20,  2.54it/s][A
  9%|▊         | 19/221 [00:05<01:15,  2.69it/s][A
 10%|▉         | 21/221 [00:05<00:54,  3.66it/s][A
 10%|▉         | 22/221 [00:06<00:46,  4.26it/s][A
 11%|█         | 24/221 [00:06<00:37,  5.23it/s][A
 11%|█▏        | 25/221 [00:06<00:38,  5.11it/s][A
 12%|█▏        | 26/221 [00:06<00:43,  4.52it/s][A
 12%|█▏        | 27/221 [00:07<00:41,  4.69it/s][A
 13%|█▎        | 28/221 [00:07<00:44,  4.29it/s][A
 13%|█▎        | 29/221 [00:07<00:43,  4.41it/s][A
 14%|█▎        | 30/221 [00:07<00:42,  4.54it/s][A
 14%|█▍        | 31/221 [00:07<00:40,  4.73it/s][A
 14%|█▍        | 32/221 [00:08<00:36,  5.11it/s][A
 15%|█▍        | 33/221 [00:08<00:38,  4.85it/s][A
 15%|█▌        | 34/221 [00:08<00:48,  3.88it/s][A
 16%|█▌        | 35/221 [00:09<00:56,  3.26it/s][A
 16%|█▋        | 36/221 [00:09<00:52,  3.54it/s][A
 17%|█▋        | 37/221 [00:09<00:53,  3.41it/s][A
 17%|█▋        | 38/221 [00:09<00:49,  3.68it/s][A
 18%|█▊        | 39/221 [00:10<00:47,  3.86it/s][A
 18%|█▊        | 40/221 [00:10<00:59,  3.06it/s][A
 19%|█▊        | 41/221 [00:10<00:49,  3.63it/s][A
 19%|█▉        | 42/221 [00:10<00:45,  3.96it/s][A
 19%|█▉        | 43/221 [00:11<00:47,  3.78it/s][A
 20%|█▉        | 44/221 [00:11<00:39,  4.46it/s][A
 20%|██        | 45/221 [00:11<00:36,  4.80it/s][A
 21%|██        | 46/221 [00:11<00:41,  4.22it/s][A
 21%|██▏       | 47/221 [00:12<00:44,  3.95it/s][A
 22%|██▏       | 48/221 [00:12<00:42,  4.11it/s][A
 22%|██▏       | 49/221 [00:12<00:42,  4.07it/s][A
 23%|██▎       | 50/221 [00:12<00:46,  3.68it/s][A
 23%|██▎       | 51/221 [00:13<00:37,  4.51it/s][A
 24%|██▎       | 52/221 [00:13<00:37,  4.55it/s][A
 24%|██▍       | 53/221 [00:13<00:31,  5.35it/s][A
 24%|██▍       | 54/221 [00:13<00:38,  4.31it/s][A
 25%|██▍       | 55/221 [00:13<00:34,  4.83it/s][A
 25%|██▌       | 56/221 [00:14<00:35,  4.65it/s][A
 26%|██▌       | 57/221 [00:14<00:37,  4.42it/s][A
 26%|██▌       | 58/221 [00:14<00:43,  3.72it/s][A
 27%|██▋       | 59/221 [00:14<00:42,  3.85it/s][A
 28%|██▊       | 61/221 [00:15<00:36,  4.36it/s][A
 28%|██▊       | 62/221 [00:15<00:34,  4.63it/s][A
 29%|██▉       | 64/221 [00:15<00:31,  5.06it/s][A
 29%|██▉       | 65/221 [00:15<00:27,  5.67it/s][A
 30%|██▉       | 66/221 [00:16<00:37,  4.15it/s][A
 30%|███       | 67/221 [00:17<00:55,  2.77it/s][A
 31%|███       | 68/221 [00:17<00:45,  3.34it/s][A
 31%|███       | 69/221 [00:17<00:58,  2.62it/s][A
 32%|███▏      | 70/221 [00:17<00:46,  3.24it/s][A
 32%|███▏      | 71/221 [00:18<00:47,  3.17it/s][A
 33%|███▎      | 72/221 [00:18<00:53,  2.80it/s][A
 33%|███▎      | 73/221 [00:18<00:42,  3.47it/s][A
 33%|███▎      | 74/221 [00:19<00:37,  3.94it/s][A
 34%|███▍      | 75/221 [00:19<00:36,  4.01it/s][A
 34%|███▍      | 76/221 [00:19<00:35,  4.06it/s][A
 35%|███▍      | 77/221 [00:19<00:33,  4.26it/s][A
 35%|███▌      | 78/221 [00:19<00:28,  4.97it/s][A
 36%|███▌      | 79/221 [00:20<00:52,  2.68it/s][A
 36%|███▌      | 80/221 [00:20<00:45,  3.10it/s][A
 37%|███▋      | 81/221 [00:21<00:40,  3.49it/s][A
 37%|███▋      | 82/221 [00:21<00:45,  3.06it/s][A
 38%|███▊      | 83/221 [00:21<00:41,  3.30it/s][A
 38%|███▊      | 84/221 [00:21<00:38,  3.56it/s][A
 38%|███▊      | 85/221 [00:22<00:33,  4.05it/s][A
 39%|███▉      | 86/221 [00:22<00:31,  4.30it/s][A
 39%|███▉      | 87/221 [00:22<00:30,  4.33it/s][A
 40%|███▉      | 88/221 [00:22<00:40,  3.32it/s][A
 40%|████      | 89/221 [00:23<00:48,  2.72it/s][A
 41%|████      | 90/221 [00:23<00:44,  2.97it/s][A
 41%|████      | 91/221 [00:23<00:35,  3.62it/s][A
 42%|████▏     | 92/221 [00:24<00:38,  3.35it/s][A
 42%|████▏     | 93/221 [00:25<01:01,  2.08it/s][A
 43%|████▎     | 94/221 [00:25<00:59,  2.15it/s][A
 43%|████▎     | 95/221 [00:25<00:50,  2.50it/s][A
 43%|████▎     | 96/221 [00:25<00:40,  3.05it/s][A
 44%|████▍     | 97/221 [00:26<00:34,  3.58it/s][A
 44%|████▍     | 98/221 [00:26<00:31,  3.86it/s][A
 45%|████▍     | 99/221 [00:26<00:31,  3.86it/s][A
 45%|████▌     | 100/221 [00:26<00:32,  3.75it/s][A
 46%|████▌     | 101/221 [00:27<00:42,  2.84it/s][A
 46%|████▌     | 102/221 [00:27<00:46,  2.57it/s][A
 47%|████▋     | 103/221 [00:28<00:40,  2.93it/s][A
 47%|████▋     | 104/221 [00:28<00:37,  3.15it/s][A
 48%|████▊     | 105/221 [00:28<00:32,  3.62it/s][A
 48%|████▊     | 106/221 [00:28<00:32,  3.56it/s][A
 48%|████▊     | 107/221 [00:29<00:30,  3.73it/s][A
 49%|████▉     | 108/221 [00:29<00:29,  3.85it/s][A
 49%|████▉     | 109/221 [00:29<00:26,  4.27it/s][A
 50%|████▉     | 110/221 [00:29<00:28,  3.93it/s][A
 50%|█████     | 111/221 [00:30<00:30,  3.62it/s][A
 51%|█████     | 112/221 [00:30<00:32,  3.35it/s][A
 51%|█████     | 113/221 [00:30<00:27,  3.95it/s][A
 52%|█████▏    | 114/221 [00:30<00:22,  4.81it/s][A
 52%|█████▏    | 115/221 [00:31<00:23,  4.50it/s][A
 52%|█████▏    | 116/221 [00:31<00:27,  3.76it/s][A
 53%|█████▎    | 117/221 [00:31<00:26,  3.99it/s][A
 53%|█████▎    | 118/221 [00:31<00:26,  3.84it/s][A
 54%|█████▍    | 119/221 [00:32<00:36,  2.76it/s][A
 54%|█████▍    | 120/221 [00:32<00:34,  2.93it/s][A
 55%|█████▌    | 122/221 [00:33<00:25,  3.90it/s][A
 56%|█████▌    | 123/221 [00:33<00:26,  3.74it/s][A
 56%|█████▌    | 124/221 [00:33<00:22,  4.29it/s][A
 57%|█████▋    | 125/221 [00:33<00:26,  3.65it/s][A
 57%|█████▋    | 126/221 [00:34<00:28,  3.29it/s][A
 57%|█████▋    | 127/221 [00:34<00:29,  3.18it/s][A
 58%|█████▊    | 128/221 [00:34<00:26,  3.45it/s][A
 58%|█████▊    | 129/221 [00:35<00:25,  3.60it/s][A
 59%|█████▉    | 130/221 [00:35<00:23,  3.88it/s][A
 60%|█████▉    | 132/221 [00:35<00:14,  6.09it/s][A
 60%|██████    | 133/221 [00:35<00:17,  5.00it/s][A
 61%|██████    | 134/221 [00:35<00:17,  5.01it/s][A
 61%|██████    | 135/221 [00:36<00:16,  5.10it/s][A
 62%|██████▏   | 136/221 [00:36<00:18,  4.68it/s][A
 62%|██████▏   | 137/221 [00:36<00:16,  5.08it/s][A
 62%|██████▏   | 138/221 [00:36<00:18,  4.50it/s][A
 63%|██████▎   | 139/221 [00:37<00:23,  3.55it/s][A
 63%|██████▎   | 140/221 [00:37<00:21,  3.72it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 142/221 [00:37<00:19,  4.13it/s][A
 65%|██████▍   | 143/221 [00:38<00:25,  3.08it/s][A
 65%|██████▌   | 144/221 [00:38<00:28,  2.75it/s][A
 66%|██████▌   | 145/221 [00:39<00:21,  3.50it/s][A
 67%|██████▋   | 147/221 [00:39<00:17,  4.23it/s][A
 67%|██████▋   | 148/221 [00:39<00:22,  3.29it/s][A
 67%|██████▋   | 149/221 [00:40<00:19,  3.76it/s][A
 68%|██████▊   | 150/221 [00:40<00:19,  3.72it/s][A
 68%|██████▊   | 151/221 [00:40<00:21,  3.25it/s][A
 69%|██████▉   | 152/221 [00:41<00:28,  2.39it/s][A
 69%|██████▉   | 153/221 [00:41<00:23,  2.86it/s][A
 70%|██████▉   | 154/221 [00:41<00:20,  3.21it/s][A
 70%|███████   | 155/221 [00:42<00:19,  3.40it/s][A
 71%|███████   | 156/221 [00:42<00:22,  2.92it/s][A
 71%|███████   | 157/221 [00:42<00:20,  3.08it/s][A
 71%|███████▏  | 158/221 [00:43<00:19,  3.22it/s][A
 72%|███████▏  | 159/221 [00:43<00:17,  3.60it/s][A
 72%|███████▏  | 160/221 [00:43<00:15,  3.88it/s][A
 73%|███████▎  | 161/221 [00:43<00:18,  3.23it/s][A
 73%|███████▎  | 162/221 [00:44<00:16,  3.50it/s][A
 74%|███████▍  | 163/221 [00:44<00:16,  3.60it/s][A
 74%|███████▍  | 164/221 [00:44<00:15,  3.70it/s][A
 75%|███████▍  | 165/221 [00:44<00:14,  3.87it/s][A
 75%|███████▌  | 166/221 [00:45<00:14,  3.79it/s][A
 76%|███████▌  | 167/221 [00:45<00:11,  4.59it/s][A
 76%|███████▌  | 168/221 [00:45<00:14,  3.56it/s][A
 76%|███████▋  | 169/221 [00:45<00:13,  3.77it/s][A
 77%|███████▋  | 170/221 [00:46<00:18,  2.80it/s][A
 77%|███████▋  | 171/221 [00:46<00:14,  3.53it/s][A
 78%|███████▊  | 172/221 [00:46<00:11,  4.09it/s][A
 78%|███████▊  | 173/221 [00:47<00:12,  3.81it/s][A
 79%|███████▊  | 174/221 [00:47<00:14,  3.17it/s][A
 79%|███████▉  | 175/221 [00:47<00:14,  3.10it/s][A
 80%|███████▉  | 176/221 [00:48<00:13,  3.38it/s][A
 80%|████████  | 177/221 [00:48<00:11,  3.73it/s][A
 81%|████████  | 178/221 [00:48<00:09,  4.44it/s][A
 81%|████████  | 179/221 [00:48<00:09,  4.31it/s][A
 81%|████████▏ | 180/221 [00:48<00:08,  4.77it/s][A
 82%|████████▏ | 181/221 [00:49<00:09,  4.06it/s][A
 82%|████████▏ | 182/221 [00:49<00:10,  3.79it/s][A
 83%|████████▎ | 183/221 [00:49<00:10,  3.52it/s][A
 83%|████████▎ | 184/221 [00:49<00:08,  4.27it/s][A
 84%|████████▎ | 185/221 [00:50<00:07,  4.55it/s][A
 84%|████████▍ | 186/221 [00:50<00:09,  3.63it/s][A
 85%|████████▍ | 187/221 [00:50<00:08,  3.88it/s][A
 85%|████████▌ | 188/221 [00:50<00:08,  3.91it/s][A
 86%|████████▌ | 189/221 [00:51<00:08,  3.75it/s][A
 86%|████████▌ | 190/221 [00:51<00:10,  3.06it/s][A
 86%|████████▋ | 191/221 [00:51<00:08,  3.66it/s][A
 87%|████████▋ | 192/221 [00:52<00:09,  3.04it/s][A
 87%|████████▋ | 193/221 [00:52<00:07,  3.71it/s][A
 88%|████████▊ | 194/221 [00:52<00:08,  3.27it/s][A
 88%|████████▊ | 195/221 [00:53<00:07,  3.30it/s][A
 89%|████████▊ | 196/221 [00:53<00:07,  3.28it/s][A
 89%|████████▉ | 197/221 [00:53<00:06,  3.96it/s][A
 90%|████████▉ | 198/221 [00:54<00:08,  2.74it/s][A
 90%|█████████ | 199/221 [00:54<00:07,  3.01it/s][A
 90%|█████████ | 200/221 [00:54<00:07,  2.85it/s][A
 91%|█████████ | 201/221 [00:55<00:06,  2.98it/s][A
 91%|█████████▏| 202/221 [00:55<00:06,  2.79it/s][A
 92%|█████████▏| 203/221 [00:55<00:05,  3.49it/s][A
 92%|█████████▏| 204/221 [00:56<00:06,  2.47it/s][A
 93%|█████████▎| 205/221 [00:56<00:05,  3.12it/s][A
 93%|█████████▎| 206/221 [00:56<00:05,  2.92it/s][A
 94%|█████████▎| 207/221 [00:57<00:04,  3.03it/s][A
 94%|█████████▍| 208/221 [00:57<00:03,  3.63it/s][A
 95%|█████████▍| 209/221 [00:57<00:03,  3.59it/s][A
 95%|█████████▌| 210/221 [00:57<00:02,  3.69it/s][A
 95%|█████████▌| 211/221 [00:58<00:02,  3.34it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  3.46it/s][A
 96%|█████████▋| 213/221 [00:58<00:02,  3.59it/s][A
 97%|█████████▋| 214/221 [00:59<00:02,  2.68it/s][A
 97%|█████████▋| 215/221 [00:59<00:02,  2.88it/s][A
 98%|█████████▊| 216/221 [01:00<00:01,  2.91it/s][A
 98%|█████████▊| 217/221 [01:00<00:01,  3.26it/s][A
 99%|█████████▊| 218/221 [01:00<00:00,  3.22it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  2.95it/s][A
100%|█████████▉| 220/221 [01:01<00:00,  3.09it/s][A
100%|██████████| 221/221 [01:01<00:00,  3.07it/s][A100%|██████████| 221/221 [01:01<00:00,  3.59it/s]
09/09/2024 20:18:29 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 899--===========

09/09/2024 20:18:29 - INFO - __main__ -   {'area_r1': 24.3, 'area_recall': '24.3/43.7/54.5', 'area_ravg': 40.8}
09/09/2024 20:18:29 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 899--===========

09/09/2024 20:18:29 - INFO - __main__ -   {'forward_r1': 34.4, 'forward_recall': '34.4/60.3/70.8', 'forward_ravg': 55.2}
09/09/2024 20:18:29 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 899--===========

09/09/2024 20:18:29 - INFO - __main__ -   {'area_video_r1': 39.5, 'area_video_recall': '39.5/70.1/80.2', 'area_video_ravg': 63.3}
09/09/2024 20:18:29 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 299=======

09/09/2024 20:18:29 - INFO - __main__ -   {'area_video_r1': 40.6, 'area_video_recall': '40.6/66.7/79.0', 'area_video_ravg': 62.1}
09/09/2024 20:18:29 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 899--===========

09/09/2024 20:18:29 - INFO - __main__ -   {'area_video_r1': 48.5, 'area_video_recall': '48.5/67.8/74.3', 'area_video_ravg': 63.5, 'area_video_back_r1': 48.9, 'area_video_back_recall': '48.9/72.3/79.8', 'area_video_back_ravg': 67.0}
09/09/2024 20:18:29 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 20:18:29 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 20:18:29 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 899--===========

09/09/2024 20:18:29 - INFO - __main__ -   {'video_r1': 42.5, 'video_recall': '42.5/70.0/80.0', 'video_ravg': 64.2}
09/09/2024 20:18:29 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 20:18:29 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 20:18:29 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 899--===========

09/09/2024 20:18:29 - INFO - __main__ -   {'video_r1': 51.6, 'video_recall': '51.6/74.3/83.0', 'video_ravg': 69.6}
09/09/2024 20:18:29 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 599=======

09/09/2024 20:18:29 - INFO - __main__ -   {'video_r1': 52.7, 'video_recall': '52.7/76.1/82.8', 'video_ravg': 70.6}
09/09/2024 20:18:50 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.514331579208374, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.02382361888885498, 'loss_ret%tv%ta--finetune_area/loss_area': 1.0885910987854004, 'loss_ret%tv%ta--finetune_area/total_loss': 2.62674617767334}
[h264 @ 0x55e507614a80] mmco: unref short failure
 46%|████▋     | 900/1945 [4:53:25<36:53:54, 127.11s/it] 46%|████▋     | 901/1945 [4:53:29<26:10:10, 90.24s/it] [h264 @ 0x556e5b121980] mmco: unref short failure
[h264 @ 0x556e5b121980] mmco: unref short failure
[h264 @ 0x556e6d59d300] mmco: unref short failure
[h264 @ 0x556e6d59d300] mmco: unref short failure
 46%|████▋     | 902/1945 [4:53:33<18:42:18, 64.56s/it] 46%|████▋     | 903/1945 [4:53:38<13:30:46, 46.69s/it][h264 @ 0x556e64ae6800] mmco: unref short failure
[h264 @ 0x55b7d24a2b80] mmco: unref short failure
[h264 @ 0x556e5d9df300] mmco: unref short failure
[h264 @ 0x556e5d9df300] mmco: unref short failure
[h264 @ 0x556e64bf7f00] mmco: unref short failure
[h264 @ 0x556e64bf7f00] mmco: unref short failure
[h264 @ 0x556e5445b100] mmco: unref short failure
 46%|████▋     | 904/1945 [4:53:44<9:56:45, 34.39s/it] [h264 @ 0x55b7ecdcf440] mmco: unref short failure
 47%|████▋     | 905/1945 [4:53:50<7:28:12, 25.86s/it][h264 @ 0x55e50bc2f480] mmco: unref short failure
[h264 @ 0x55e50bc2f480] mmco: unref short failure
[h264 @ 0x55b7d34c0a80] mmco: unref short failure
[h264 @ 0x55b7d34c0a80] mmco: unref short failure
 47%|████▋     | 906/1945 [4:53:57<5:48:10, 20.11s/it][h264 @ 0x556e6d2c5b80] mmco: unref short failure
[h264 @ 0x556e6d2c5b80] mmco: unref short failure
[h264 @ 0x556e6d59d9c0] mmco: unref short failure
 47%|████▋     | 907/1945 [4:54:04<4:43:09, 16.37s/it][h264 @ 0x55b7d24b2500] mmco: unref short failure
[h264 @ 0x55b7db120e00] mmco: unref short failure
[h264 @ 0x556e58610200] mmco: unref short failure
[h264 @ 0x556e58610200] mmco: unref short failure
 47%|████▋     | 908/1945 [4:54:12<3:55:45, 13.64s/it][h264 @ 0x556e71f1c380] mmco: unref short failure
 47%|████▋     | 909/1945 [4:54:19<3:24:55, 11.87s/it][h264 @ 0x55b7e62b2800] mmco: unref short failure
[h264 @ 0x55b7e62b2800] mmco: unref short failure
 47%|████▋     | 910/1945 [4:54:28<3:05:28, 10.75s/it][h264 @ 0x55b7e41b8900] mmco: unref short failure
[h264 @ 0x55b7e41b8900] mmco: unref short failure
 47%|████▋     | 911/1945 [4:54:35<2:49:44,  9.85s/it][h264 @ 0x55e518c43680] mmco: unref short failure
[h264 @ 0x55e512318980] mmco: unref short failure
 47%|████▋     | 912/1945 [4:54:44<2:41:58,  9.41s/it][h264 @ 0x556e64ae6a00] mmco: unref short failure
[h264 @ 0x556e64ae6a00] mmco: unref short failure
 47%|████▋     | 913/1945 [4:54:51<2:32:45,  8.88s/it][h264 @ 0x556e6ce6ec00] mmco: unref short failure
[h264 @ 0x556e6ce6ec00] mmco: unref short failure
[h264 @ 0x55e51eb1cdc0] mmco: unref short failure
[h264 @ 0x55e51eb1cdc0] mmco: unref short failure
 47%|████▋     | 914/1945 [4:54:58<2:23:47,  8.37s/it][h264 @ 0x55b7e5ec6580] mmco: unref short failure
[h264 @ 0x55b7e5ec6580] mmco: unref short failure
[h264 @ 0x556e6792b540] mmco: unref short failure
[h264 @ 0x556e569b3240] mmco: unref short failure
 47%|████▋     | 915/1945 [4:55:06<2:21:35,  8.25s/it][h264 @ 0x556e4b5df040] mmco: unref short failure
 47%|████▋     | 916/1945 [4:55:13<2:12:25,  7.72s/it][h264 @ 0x55b7cdca6740] mmco: unref short failure
 47%|████▋     | 917/1945 [4:55:19<2:05:44,  7.34s/it] 47%|████▋     | 918/1945 [4:55:27<2:04:58,  7.30s/it][h264 @ 0x556e5cf31c80] mmco: unref short failure
[h264 @ 0x55e501da7d80] mmco: unref short failure
 47%|████▋     | 919/1945 [4:55:37<2:18:49,  8.12s/it][h264 @ 0x556e621d1500] mmco: unref short failure
[h264 @ 0x556e621d1500] mmco: unref short failure
[h264 @ 0x55b7e1b66cc0] mmco: unref short failure
[h264 @ 0x55b7e1b66cc0] mmco: unref short failure
[h264 @ 0x55e500738f40] mmco: unref short failure
[h264 @ 0x55b7e9c30cc0] mmco: unref short failure
[h264 @ 0x556e69760dc0] mmco: unref short failure
[h264 @ 0x556e69760dc0] mmco: unref short failure
 47%|████▋     | 920/1945 [4:55:51<2:50:25,  9.98s/it][h264 @ 0x55e5024bae80] mmco: unref short failure
[h264 @ 0x55e51613d640] mmco: unref short failure
[h264 @ 0x55e51613d640] mmco: unref short failure
[h264 @ 0x55b7e4c57b40] mmco: unref short failure
[h264 @ 0x55b7e4c57b40] mmco: unref short failure
 47%|████▋     | 921/1945 [4:55:59<2:41:24,  9.46s/it][h264 @ 0x55b7e9647280] mmco: unref short failure
[h264 @ 0x55b7e9647280] mmco: unref short failure
[h264 @ 0x55e51bb37cc0] mmco: unref short failure
 47%|████▋     | 922/1945 [4:56:08<2:38:28,  9.30s/it][h264 @ 0x55b7cff16600] mmco: unref short failure
[h264 @ 0x556e5eeffdc0] mmco: unref short failure
[h264 @ 0x556e5eeffdc0] mmco: unref short failure
[h264 @ 0x556e65604f80] mmco: unref short failure
[h264 @ 0x556e65604f80] mmco: unref short failure
 47%|████▋     | 923/1945 [4:56:19<2:44:06,  9.63s/it][h264 @ 0x556e573944c0] mmco: unref short failure
[h264 @ 0x556e573944c0] mmco: unref short failure
[h264 @ 0x55e5116eb900] mmco: unref short failure
[h264 @ 0x55e5116eb900] mmco: unref short failure
[h264 @ 0x55b7cc5bab00] mmco: unref short failure
[h264 @ 0x55e5159b1e40] mmco: unref short failure
[h264 @ 0x55e5159b1e40] mmco: unref short failure
[h264 @ 0x55e519fdec80] mmco: unref short failure
[h264 @ 0x55e51340f180] mmco: unref short failure
[h264 @ 0x55e4fd99f8c0] mmco: unref short failure
[h264 @ 0x55e4fd99f8c0] mmco: unref short failure
[h264 @ 0x55e4fd99f8c0] mmco: unref short failure
[h264 @ 0x55e4fd99f8c0] mmco: unref short failure
[h264 @ 0x55e517b31880] mmco: unref short failure
[h264 @ 0x556e5b355240] mmco: unref short failure
[h264 @ 0x556e5b355240] mmco: unref short failure
[h264 @ 0x55e517b2ad40] mmco: unref short failure
 48%|████▊     | 924/1945 [4:57:09<6:13:35, 21.95s/it][h264 @ 0x55e518e65d00] mmco: unref short failure
[h264 @ 0x556e54232bc0] mmco: unref short failure
[h264 @ 0x556e4f9c4800] mmco: unref short failure
[h264 @ 0x55e515edcf80] mmco: unref short failure
 48%|████▊     | 925/1945 [4:57:20<5:16:01, 18.59s/it][h264 @ 0x556e61dc1fc0] mmco: unref short failure
 48%|████▊     | 926/1945 [4:57:28<4:20:30, 15.34s/it] 48%|████▊     | 927/1945 [4:57:39<4:00:23, 14.17s/it][h264 @ 0x556e6fd0e380] mmco: unref short failure
[h264 @ 0x556e6fd0e380] mmco: unref short failure
[h264 @ 0x556e5b1069c0] mmco: unref short failure
[h264 @ 0x556e5b1069c0] mmco: unref short failure
 48%|████▊     | 928/1945 [4:58:01<4:37:01, 16.34s/it][h264 @ 0x556e6153bbc0] mmco: unref short failure
 48%|████▊     | 929/1945 [4:58:07<3:47:01, 13.41s/it] 48%|████▊     | 930/1945 [4:58:15<3:16:24, 11.61s/it] 48%|████▊     | 931/1945 [4:58:22<2:53:24, 10.26s/it][h264 @ 0x556e6a8c0dc0] mmco: unref short failure
[h264 @ 0x55e5091ef640] mmco: unref short failure
[h264 @ 0x55e5091ef640] mmco: unref short failure
[h264 @ 0x556e61d30f00] mmco: unref short failure
[h264 @ 0x55e4fd7aeb40] mmco: unref short failure
[h264 @ 0x55e4fd7aeb40] mmco: unref short failure
[h264 @ 0x556e6f7cc700] mmco: unref short failure
[h264 @ 0x556e6f7cc700] mmco: unref short failure
[h264 @ 0x55b7d50fb500] mmco: unref short failure
[h264 @ 0x55b7d50fb500] mmco: unref short failure
[h264 @ 0x55e501da29c0] mmco: unref short failure
[h264 @ 0x55e4fea1c180] mmco: unref short failure
[h264 @ 0x556e5a840f80] mmco: unref short failure
[h264 @ 0x556e5a840f80] mmco: unref short failure
[h264 @ 0x55b7e3219880] mmco: unref short failure
[h264 @ 0x55b7e3219880] mmco: unref short failure
[h264 @ 0x55b7e3219880] mmco: unref short failure
[h264 @ 0x55b7e3219880] mmco: unref short failure
 48%|████▊     | 932/1945 [4:59:06<5:45:32, 20.47s/it][h264 @ 0x55b7ea8b0700] mmco: unref short failure
[h264 @ 0x55b7ea8b0700] mmco: unref short failure
[h264 @ 0x556e6fbfe800] mmco: unref short failure
[h264 @ 0x556e56e56c80] mmco: unref short failure
[h264 @ 0x556e56e56c80] mmco: unref short failure
[h264 @ 0x556e56e56c80] mmco: unref short failure
 48%|████▊     | 933/1945 [4:59:22<5:20:49, 19.02s/it][h264 @ 0x55b7d05fa480] mmco: unref short failure
[h264 @ 0x55e50a5c7dc0] mmco: unref short failure
 48%|████▊     | 934/1945 [4:59:32<4:35:35, 16.36s/it][h264 @ 0x556e629d0c00] mmco: unref short failure
[h264 @ 0x55b7ea8673c0] mmco: unref short failure
[h264 @ 0x556e6ddb2800] mmco: unref short failure
[h264 @ 0x556e6ddb2800] mmco: unref short failure
[h264 @ 0x55b7cf9cfb00] mmco: unref short failure
[h264 @ 0x55b7cf9cfb00] mmco: unref short failure
[h264 @ 0x556e700c9bc0] mmco: unref short failure
[h264 @ 0x556e700c9bc0] mmco: unref short failure
[h264 @ 0x55e51b1344c0] mmco: unref short failure
[h264 @ 0x55e51b1344c0] mmco: unref short failure
[h264 @ 0x556e5245a140] mmco: unref short failure
[h264 @ 0x55b7d1b28a40] mmco: unref short failure
[h264 @ 0x55b7e83b2140] mmco: unref short failure
 48%|████▊     | 935/1945 [4:59:55<5:12:37, 18.57s/it] 48%|████▊     | 936/1945 [5:00:04<4:22:11, 15.59s/it] 48%|████▊     | 937/1945 [5:00:11<3:39:55, 13.09s/it][h264 @ 0x556e49585d40] mmco: unref short failure
 48%|████▊     | 938/1945 [5:00:19<3:13:33, 11.53s/it][h264 @ 0x556e578be200] mmco: unref short failure
[h264 @ 0x556e578be200] mmco: unref short failure
[h264 @ 0x55e5116f0240] mmco: unref short failure
 48%|████▊     | 939/1945 [5:00:27<2:55:26, 10.46s/it][h264 @ 0x556e575db240] mmco: unref short failure
[h264 @ 0x55b7e54a05c0] mmco: unref short failure
[h264 @ 0x556e68aa3440] mmco: unref short failure
[h264 @ 0x556e68aa3440] mmco: unref short failure
[h264 @ 0x556e5d634140] mmco: unref short failure
[h264 @ 0x556e5d634140] mmco: unref short failure
[h264 @ 0x556e6ddb2140] mmco: unref short failure
[h264 @ 0x556e42179800] mmco: unref short failure
[h264 @ 0x556e42179800] mmco: unref short failure
[h264 @ 0x556e59212b00] mmco: unref short failure
[h264 @ 0x55e505852740] mmco: unref short failure
[h264 @ 0x556e70a4c180] mmco: unref short failure
[h264 @ 0x556e70a4c180] mmco: unref short failure
 48%|████▊     | 940/1945 [5:01:12<5:47:56, 20.77s/it][h264 @ 0x55e512fccb40] mmco: unref short failure
[h264 @ 0x55e512fccb40] mmco: unref short failure
[h264 @ 0x55b7e9e57d40] mmco: unref short failure
 48%|████▊     | 941/1945 [5:01:26<5:14:15, 18.78s/it][h264 @ 0x55b7cab48e40] mmco: unref short failure
[h264 @ 0x55b7cab48e40] mmco: unref short failure
 48%|████▊     | 942/1945 [5:01:33<4:14:27, 15.22s/it][h264 @ 0x55e4fcf7e980] mmco: unref short failure
[h264 @ 0x55b7ca89d740] mmco: unref short failure
[h264 @ 0x55b7ca89d740] mmco: unref short failure
[h264 @ 0x55e518555800] mmco: unref short failure
[h264 @ 0x556e64140e00] mmco: unref short failure
[h264 @ 0x556e64140e00] mmco: unref short failure
[h264 @ 0x556e64140e00] mmco: unref short failure
[h264 @ 0x556e64140e00] mmco: unref short failure
[h264 @ 0x556e6f1f2cc0] mmco: unref short failure
[h264 @ 0x556e43dd4740] mmco: unref short failure
[h264 @ 0x556e637a74c0] mmco: unref short failure
[h264 @ 0x556e730a1240] mmco: unref short failure
[h264 @ 0x556e730a1240] mmco: unref short failure
[h264 @ 0x556e42df5540] mmco: unref short failure
[h264 @ 0x556e42df5540] mmco: unref short failure
[h264 @ 0x556e42df5540] mmco: unref short failure
[h264 @ 0x556e42df5540] mmco: unref short failure
[h264 @ 0x556e759aa080] mmco: unref short failure
[h264 @ 0x556e759aa080] mmco: unref short failure
 48%|████▊     | 943/1945 [5:01:54<4:42:48, 16.93s/it][h264 @ 0x55e4fd991ac0] mmco: unref short failure
[h264 @ 0x55e4fd991ac0] mmco: unref short failure
[h264 @ 0x556e45ba1d00] mmco: unref short failure
[h264 @ 0x556e45ba1d00] mmco: unref short failure
 49%|████▊     | 944/1945 [5:02:06<4:16:54, 15.40s/it][h264 @ 0x55e5024bae80] mmco: unref short failure
[h264 @ 0x55e5024bae80] mmco: unref short failure
[h264 @ 0x556e64141280] mmco: unref short failure
[h264 @ 0x556e448bc3c0] mmco: unref short failure
 49%|████▊     | 945/1945 [5:02:14<3:41:07, 13.27s/it][h264 @ 0x55b7d2fcff80] mmco: unref short failure
[h264 @ 0x55b7d2fcff80] mmco: unref short failure
[h264 @ 0x55b7d259fa80] mmco: unref short failure
 49%|████▊     | 946/1945 [5:02:21<3:07:31, 11.26s/it] 49%|████▊     | 947/1945 [5:02:28<2:46:58, 10.04s/it][h264 @ 0x55e50ad456c0] mmco: unref short failure
[h264 @ 0x556e717ab100] mmco: unref short failure
[h264 @ 0x556e717ab100] mmco: unref short failure
[h264 @ 0x556e5513e640] mmco: unref short failure
[h264 @ 0x556e5513e640] mmco: unref short failure
[h264 @ 0x55b7cf3372c0] mmco: unref short failure
[h264 @ 0x55b7cf3372c0] mmco: unref short failure
[h264 @ 0x55e51360b800] mmco: unref short failure
[h264 @ 0x55e51360b800] mmco: unref short failure
[h264 @ 0x55b7e838c340] mmco: unref short failure
[h264 @ 0x55b7e838c340] mmco: unref short failure
 49%|████▊     | 948/1945 [5:03:21<6:20:18, 22.89s/it] 49%|████▉     | 949/1945 [5:03:28<5:03:43, 18.30s/it]09/09/2024 20:28:57 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 20:28:57 - INFO - __main__ -   start running ret%tv validation...
[h264 @ 0x556e471f5d00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b7cf9d01c0] mmco: unref short failure
[h264 @ 0x55b7e9a8cfc0] mmco: unref short failure
[h264 @ 0x556e578be680] mmco: unref short failure
[h264 @ 0x556e578be680] mmco: unref short failure
[h264 @ 0x55b7cb437ec0] mmco: unref short failure
[h264 @ 0x55b7cb437ec0] mmco: unref short failure
[h264 @ 0x556e5bf5eec0] mmco: unref short failure
[h264 @ 0x556e5bf5eec0] mmco: unref short failure
[h264 @ 0x556e75068a40] mmco: unref short failure
[h264 @ 0x556e75068a40] mmco: unref short failure
[h264 @ 0x55b7d4e3be40] mmco: unref short failure
[h264 @ 0x55b7d4e3be40] mmco: unref short failure
[h264 @ 0x55e516dfb080] mmco: unref short failure
[h264 @ 0x55e516dfb080] mmco: unref short failure
[h264 @ 0x556e63dd8dc0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b7d50d4c80] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e43a4e640] mmco: unref short failure
[h264 @ 0x556e494b08c0] mmco: unref short failure
[h264 @ 0x55b7cad02880] mmco: unref short failure
[h264 @ 0x55b7cad02880] mmco: unref short failure
[h264 @ 0x55e510912880] mmco: unref short failure
[h264 @ 0x55e5191e7cc0] mmco: unref short failure
[h264 @ 0x55e50dcf4f40] mmco: unref short failure
[h264 @ 0x55e50dcf4f40] mmco: unref short failure
[h264 @ 0x556e71b95500] mmco: unref short failure
[h264 @ 0x55e4ff1f4900] mmco: unref short failure
[h264 @ 0x55e4ff1f4900] mmco: unref short failure
[h264 @ 0x556e6ee8d440] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:22,  9.60it/s][A
  1%|          | 2/221 [00:00<00:34,  6.26it/s][A
  1%|▏         | 3/221 [00:00<00:32,  6.65it/s][A
  2%|▏         | 5/221 [00:00<00:26,  8.04it/s][A
  3%|▎         | 7/221 [00:01<00:40,  5.32it/s][A
  4%|▎         | 8/221 [00:01<00:45,  4.73it/s][A
  4%|▍         | 9/221 [00:01<00:48,  4.34it/s][A
  5%|▍         | 10/221 [00:03<01:51,  1.90it/s][A
  5%|▍         | 11/221 [00:03<01:36,  2.17it/s][A
  5%|▌         | 12/221 [00:03<01:17,  2.71it/s][A
  6%|▌         | 13/221 [00:03<01:18,  2.66it/s][A
  6%|▋         | 14/221 [00:07<04:26,  1.29s/it][A
  7%|▋         | 15/221 [00:07<03:16,  1.05it/s][A
  7%|▋         | 16/221 [00:09<04:31,  1.32s/it][A
  8%|▊         | 17/221 [00:10<03:41,  1.08s/it][A
  8%|▊         | 18/221 [00:10<02:55,  1.16it/s][A
  9%|▊         | 19/221 [00:10<02:11,  1.53it/s][A
 10%|▉         | 21/221 [00:10<01:19,  2.52it/s][A
 10%|█         | 23/221 [00:11<00:52,  3.74it/s][A
 11%|█         | 24/221 [00:11<00:45,  4.29it/s][A
 11%|█▏        | 25/221 [00:11<00:40,  4.87it/s][A
 12%|█▏        | 26/221 [00:11<00:40,  4.83it/s][A
 12%|█▏        | 27/221 [00:11<00:45,  4.29it/s][A
 13%|█▎        | 28/221 [00:12<01:01,  3.15it/s][A
 13%|█▎        | 29/221 [00:16<04:28,  1.40s/it][A
 14%|█▎        | 30/221 [00:16<03:19,  1.05s/it][A
 14%|█▍        | 31/221 [00:16<02:27,  1.29it/s][A
 14%|█▍        | 32/221 [00:16<01:50,  1.72it/s][A
 15%|█▍        | 33/221 [00:17<01:45,  1.78it/s][A
 16%|█▌        | 35/221 [00:17<01:07,  2.77it/s][A
 16%|█▋        | 36/221 [00:17<01:02,  2.94it/s][A
 17%|█▋        | 37/221 [00:18<00:54,  3.41it/s][A
 17%|█▋        | 38/221 [00:18<00:48,  3.74it/s][A
 18%|█▊        | 39/221 [00:18<00:44,  4.12it/s][A
 18%|█▊        | 40/221 [00:18<00:43,  4.20it/s][A
 19%|█▊        | 41/221 [00:18<00:37,  4.77it/s][A
 19%|█▉        | 42/221 [00:19<00:32,  5.48it/s][A
 20%|█▉        | 44/221 [00:19<00:27,  6.47it/s][A
 21%|██        | 46/221 [00:19<00:23,  7.38it/s][A
 21%|██▏       | 47/221 [00:19<00:25,  6.90it/s][A
 22%|██▏       | 48/221 [00:19<00:27,  6.39it/s][A[h264 @ 0x556e55d11dc0] mmco: unref short failure
[h264 @ 0x556e55d11dc0] mmco: unref short failure

 22%|██▏       | 49/221 [00:23<03:11,  1.12s/it][A
 23%|██▎       | 50/221 [00:23<02:26,  1.17it/s][A
 23%|██▎       | 51/221 [00:24<02:00,  1.41it/s][A
 24%|██▍       | 53/221 [00:24<01:14,  2.26it/s][A
 25%|██▍       | 55/221 [00:24<00:51,  3.22it/s][A
 25%|██▌       | 56/221 [00:24<00:51,  3.19it/s][A
 26%|██▌       | 57/221 [00:25<00:46,  3.54it/s][A
 26%|██▌       | 58/221 [00:25<00:44,  3.66it/s][A
 27%|██▋       | 59/221 [00:25<00:37,  4.37it/s][A
 27%|██▋       | 60/221 [00:25<00:34,  4.62it/s][A
 28%|██▊       | 61/221 [00:25<00:34,  4.66it/s][A[h264 @ 0x556e4aa70200] mmco: unref short failure

 29%|██▊       | 63/221 [00:26<00:28,  5.62it/s][A
 29%|██▉       | 65/221 [00:26<00:22,  7.04it/s][A
 30%|██▉       | 66/221 [00:26<00:23,  6.55it/s][A
 30%|███       | 67/221 [00:26<00:25,  6.04it/s][A
 31%|███       | 68/221 [00:26<00:26,  5.77it/s][A
 31%|███       | 69/221 [00:27<00:26,  5.64it/s][A
 32%|███▏      | 70/221 [00:27<00:26,  5.71it/s][A
 32%|███▏      | 71/221 [00:27<00:32,  4.64it/s][A
 33%|███▎      | 72/221 [00:27<00:27,  5.39it/s][A
 33%|███▎      | 73/221 [00:28<00:36,  4.05it/s][A
 33%|███▎      | 74/221 [00:28<00:30,  4.82it/s][A
 34%|███▍      | 76/221 [00:28<00:26,  5.41it/s][A
 35%|███▍      | 77/221 [00:28<00:30,  4.78it/s][A
 35%|███▌      | 78/221 [00:29<00:35,  4.06it/s][A
 36%|███▌      | 79/221 [00:29<00:29,  4.78it/s][A
 36%|███▌      | 80/221 [00:33<03:17,  1.40s/it][A
 37%|███▋      | 81/221 [00:34<02:29,  1.07s/it][A
 37%|███▋      | 82/221 [00:34<01:52,  1.24it/s][A
 38%|███▊      | 83/221 [00:34<01:25,  1.62it/s][A
 38%|███▊      | 84/221 [00:34<01:22,  1.66it/s][A
 38%|███▊      | 85/221 [00:35<01:03,  2.14it/s][A
 39%|███▉      | 86/221 [00:35<00:49,  2.71it/s][A[h264 @ 0x55b7cb45ad80] mmco: unref short failure
[h264 @ 0x55b7cb45ad80] mmco: unref short failure

 39%|███▉      | 87/221 [00:35<00:53,  2.52it/s][A
 40%|███▉      | 88/221 [00:36<00:52,  2.54it/s][A[h264 @ 0x55e4fd7b50c0] mmco: unref short failure
[h264 @ 0x55e4fd7b50c0] mmco: unref short failure
[h264 @ 0x55e4fd7b50c0] mmco: unref short failure

 40%|████      | 89/221 [00:36<00:50,  2.62it/s][A
 41%|████      | 90/221 [00:36<00:43,  3.01it/s][A
 41%|████      | 91/221 [00:36<00:36,  3.54it/s][A
 42%|████▏     | 92/221 [00:37<01:09,  1.84it/s][A
 42%|████▏     | 93/221 [00:38<00:52,  2.42it/s][A
 43%|████▎     | 94/221 [00:38<00:43,  2.91it/s][A
 43%|████▎     | 95/221 [00:39<01:09,  1.81it/s][A
 44%|████▍     | 97/221 [00:39<00:43,  2.87it/s][A
 45%|████▍     | 99/221 [00:39<00:29,  4.08it/s][A
 46%|████▌     | 101/221 [00:39<00:25,  4.77it/s][A
 46%|████▌     | 102/221 [00:40<00:25,  4.67it/s][A
 47%|████▋     | 103/221 [00:40<00:22,  5.24it/s][A
 47%|████▋     | 104/221 [00:40<00:21,  5.56it/s][A[h264 @ 0x556e44736880] mmco: unref short failure
[h264 @ 0x556e44736880] mmco: unref short failure

 48%|████▊     | 105/221 [00:40<00:28,  4.04it/s][A
 48%|████▊     | 106/221 [00:41<00:34,  3.38it/s][A
 48%|████▊     | 107/221 [00:41<00:28,  3.96it/s][A
 49%|████▉     | 108/221 [00:41<00:29,  3.90it/s][A
 49%|████▉     | 109/221 [00:42<00:31,  3.61it/s][A
 50%|████▉     | 110/221 [00:42<00:26,  4.23it/s][A
 50%|█████     | 111/221 [00:42<00:31,  3.50it/s][A
 51%|█████     | 113/221 [00:42<00:23,  4.69it/s][A
 52%|█████▏    | 114/221 [00:43<00:22,  4.69it/s][A
 52%|█████▏    | 115/221 [00:43<00:28,  3.76it/s][A
 53%|█████▎    | 117/221 [00:43<00:20,  4.98it/s][A
 54%|█████▍    | 119/221 [00:43<00:17,  6.00it/s][A
 54%|█████▍    | 120/221 [00:44<00:15,  6.45it/s][A
 55%|█████▍    | 121/221 [00:44<00:18,  5.41it/s][A
 55%|█████▌    | 122/221 [00:44<00:19,  5.11it/s][A
 56%|█████▌    | 124/221 [00:44<00:15,  6.06it/s][A
 57%|█████▋    | 125/221 [00:44<00:16,  5.98it/s][A
 57%|█████▋    | 126/221 [00:45<00:19,  4.95it/s][A
 57%|█████▋    | 127/221 [00:45<00:17,  5.34it/s][A
 58%|█████▊    | 128/221 [00:46<00:45,  2.05it/s][A
 58%|█████▊    | 129/221 [00:46<00:35,  2.60it/s][A
 59%|█████▉    | 130/221 [00:46<00:27,  3.27it/s][A
 60%|█████▉    | 132/221 [00:47<00:18,  4.87it/s][A
 60%|██████    | 133/221 [00:47<00:16,  5.42it/s][A
 61%|██████    | 134/221 [00:47<00:15,  5.45it/s][A
 61%|██████    | 135/221 [00:47<00:16,  5.37it/s][A
 62%|██████▏   | 136/221 [00:47<00:16,  5.28it/s][A
 62%|██████▏   | 137/221 [00:47<00:15,  5.43it/s][A[h264 @ 0x55b7e6b34440] mmco: unref short failure
[h264 @ 0x55b7e6b34440] mmco: unref short failure

 62%|██████▏   | 138/221 [00:48<00:27,  3.00it/s][A
 63%|██████▎   | 140/221 [00:48<00:18,  4.29it/s][A
 64%|██████▍   | 141/221 [00:49<00:17,  4.56it/s][A
 64%|██████▍   | 142/221 [00:49<00:16,  4.84it/s][A
 65%|██████▍   | 143/221 [00:49<00:17,  4.42it/s][A
 65%|██████▌   | 144/221 [00:49<00:15,  5.00it/s][A
 66%|██████▌   | 145/221 [00:49<00:14,  5.32it/s][A
 66%|██████▌   | 146/221 [00:49<00:13,  5.37it/s][A
 67%|██████▋   | 147/221 [00:50<00:21,  3.45it/s][A
 67%|██████▋   | 148/221 [00:50<00:17,  4.08it/s][A
 67%|██████▋   | 149/221 [00:50<00:14,  4.89it/s][A
 68%|██████▊   | 151/221 [00:50<00:10,  6.78it/s][A
 69%|██████▉   | 153/221 [00:51<00:07,  9.02it/s][A
 70%|███████   | 155/221 [00:51<00:05, 11.08it/s][A
 71%|███████   | 157/221 [00:51<00:05, 10.72it/s][A
 72%|███████▏  | 160/221 [00:51<00:04, 13.64it/s][A
 73%|███████▎  | 162/221 [00:51<00:04, 12.62it/s][A
 74%|███████▍  | 164/221 [00:51<00:04, 12.26it/s][A
 75%|███████▌  | 166/221 [00:53<00:14,  3.84it/s][A[h264 @ 0x55b7d95a6140] mmco: unref short failure
[h264 @ 0x55b7d95a6140] mmco: unref short failure

 76%|███████▌  | 167/221 [00:53<00:13,  4.11it/s][A
 76%|███████▌  | 168/221 [00:53<00:13,  3.93it/s][A
 76%|███████▋  | 169/221 [00:54<00:14,  3.50it/s][A
 77%|███████▋  | 170/221 [00:54<00:12,  4.12it/s][A
 77%|███████▋  | 171/221 [00:54<00:10,  4.62it/s][A
 78%|███████▊  | 172/221 [00:55<00:18,  2.64it/s][A
 78%|███████▊  | 173/221 [00:55<00:16,  2.97it/s][A
 79%|███████▊  | 174/221 [00:55<00:16,  2.83it/s][A
 79%|███████▉  | 175/221 [00:55<00:12,  3.55it/s][A
 80%|███████▉  | 176/221 [00:56<00:10,  4.18it/s][A
 80%|████████  | 177/221 [00:56<00:08,  5.00it/s][A
 81%|████████  | 178/221 [00:56<00:11,  3.84it/s][A
 81%|████████  | 179/221 [00:56<00:09,  4.43it/s][A
 82%|████████▏ | 181/221 [00:57<00:11,  3.55it/s][A
 83%|████████▎ | 183/221 [00:57<00:08,  4.41it/s][A
 84%|████████▎ | 185/221 [00:57<00:06,  5.72it/s][A
 85%|████████▍ | 187/221 [00:57<00:04,  7.25it/s][A[h264 @ 0x556e4caead80] mmco: unref short failure

 86%|████████▌ | 189/221 [01:00<00:14,  2.16it/s][A
 86%|████████▌ | 190/221 [01:00<00:12,  2.48it/s][A
 87%|████████▋ | 192/221 [01:00<00:08,  3.54it/s][A
 87%|████████▋ | 193/221 [01:00<00:07,  3.96it/s][A
 88%|████████▊ | 195/221 [01:00<00:05,  4.73it/s][A
 89%|████████▉ | 197/221 [01:01<00:05,  4.47it/s][A
 90%|████████▉ | 198/221 [01:01<00:04,  4.89it/s][A
 90%|█████████ | 199/221 [01:01<00:04,  4.43it/s][A
 91%|█████████ | 201/221 [01:01<00:03,  5.94it/s][A
 92%|█████████▏| 204/221 [01:02<00:02,  6.99it/s][A
 93%|█████████▎| 205/221 [01:02<00:02,  7.20it/s][A[h264 @ 0x55b7ce559f40] mmco: unref short failure
[h264 @ 0x55b7ce559f40] mmco: unref short failure
[h264 @ 0x55b7ce559f40] mmco: unref short failure
[h264 @ 0x55b7ce559f40] mmco: unref short failure

 94%|█████████▎| 207/221 [01:02<00:01,  8.02it/s][A[h264 @ 0x55b7d82e4f00] mmco: unref short failure
[h264 @ 0x55b7d82e4f00] mmco: unref short failure

 95%|█████████▍| 209/221 [01:02<00:01,  9.28it/s][A
 95%|█████████▌| 211/221 [01:03<00:01,  8.64it/s][A
 96%|█████████▋| 213/221 [01:03<00:00,  8.11it/s][A 97%|█████████▋| 214/221 [01:03<00:02,  3.38it/s]
[h264 @ 0x55e4ff1f4900] mmco: unref short failure
[h264 @ 0x55b7cc411cc0] mmco: unref short failure
[h264 @ 0x55b7cc411cc0] mmco: unref short failure
[h264 @ 0x55b7cc411cc0] mmco: unref short failure
[h264 @ 0x55b7cc411cc0] mmco: unref short failure
[h264 @ 0x55b7cc411cc0] mmco: unref short failure
[h264 @ 0x556e477c8800] mmco: unref short failure
[h264 @ 0x55e5195e93c0] mmco: unref short failure
[h264 @ 0x55e5195e93c0] mmco: unref short failure
[h264 @ 0x556e55352d40] mmco: unref short failure
[h264 @ 0x556e55352d40] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.78it/s][A
  1%|          | 2/221 [00:00<00:58,  3.77it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.77it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.77it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.77it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.77it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.78it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.78it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.78it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.78it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.78it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.78it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.79it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.78it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.79it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.78it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.78it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:14<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.78it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.78it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:37,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.78it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 125/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 130/221 [00:34<00:23,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.79it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.79it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.79it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.79it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.79it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.79it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.79it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.79it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.79it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.79it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.79it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.79it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.79it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.79it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.79it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.79it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 159/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.78it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.78it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.78it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.78it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.78it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.78it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.78it/s][A
 76%|███████▌  | 168/221 [00:44<00:14,  3.78it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.78it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.78it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.78it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.78it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.78it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.78it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.78it/s][A
 81%|████████  | 178/221 [00:46<00:11,  3.78it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.78it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.78it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.78it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.78it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.78it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.78it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.78it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.78it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.78it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.78it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.78it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.78it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.79it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:27,  7.94it/s][A
  1%|          | 2/221 [00:00<00:38,  5.69it/s][A
  1%|▏         | 3/221 [00:00<00:39,  5.49it/s][A
  2%|▏         | 4/221 [00:00<00:34,  6.38it/s][A
  2%|▏         | 5/221 [00:00<00:36,  5.93it/s][A
  3%|▎         | 6/221 [00:00<00:31,  6.86it/s][A
  3%|▎         | 7/221 [00:01<00:41,  5.21it/s][A
  4%|▎         | 8/221 [00:01<00:57,  3.70it/s][A
  4%|▍         | 9/221 [00:01<00:54,  3.93it/s][A
  5%|▍         | 10/221 [00:02<01:16,  2.77it/s][A
  5%|▍         | 11/221 [00:02<01:04,  3.24it/s][A
  5%|▌         | 12/221 [00:02<00:55,  3.77it/s][A
  6%|▌         | 13/221 [00:03<01:29,  2.32it/s][A
  7%|▋         | 15/221 [00:03<01:03,  3.25it/s][A
  7%|▋         | 16/221 [00:04<01:03,  3.23it/s][A
  8%|▊         | 17/221 [00:04<01:10,  2.91it/s][A
  8%|▊         | 18/221 [00:05<01:13,  2.75it/s][A
  9%|▊         | 19/221 [00:05<01:10,  2.87it/s][A
  9%|▉         | 20/221 [00:05<00:55,  3.60it/s][A
 10%|▉         | 21/221 [00:05<00:51,  3.85it/s][A
 10%|▉         | 22/221 [00:05<00:43,  4.54it/s][A
 11%|█         | 24/221 [00:06<00:36,  5.41it/s][A
 11%|█▏        | 25/221 [00:06<00:37,  5.23it/s][A
 12%|█▏        | 26/221 [00:06<00:41,  4.65it/s][A
 12%|█▏        | 27/221 [00:06<00:39,  4.86it/s][A
 13%|█▎        | 28/221 [00:07<00:44,  4.38it/s][A
 13%|█▎        | 29/221 [00:07<00:43,  4.45it/s][A
 14%|█▎        | 30/221 [00:07<00:40,  4.72it/s][A
 14%|█▍        | 31/221 [00:07<00:39,  4.80it/s][A
 14%|█▍        | 32/221 [00:07<00:36,  5.19it/s][A
 15%|█▍        | 33/221 [00:08<00:38,  4.88it/s][A
 15%|█▌        | 34/221 [00:08<00:41,  4.52it/s][A
 16%|█▌        | 35/221 [00:08<00:53,  3.46it/s][A
 16%|█▋        | 36/221 [00:09<00:49,  3.73it/s][A
 17%|█▋        | 37/221 [00:09<00:50,  3.65it/s][A
 17%|█▋        | 38/221 [00:09<00:47,  3.88it/s][A
 18%|█▊        | 39/221 [00:09<00:45,  4.00it/s][A
 18%|█▊        | 40/221 [00:10<00:56,  3.19it/s][A
 19%|█▊        | 41/221 [00:10<00:46,  3.90it/s][A
 19%|█▉        | 42/221 [00:10<00:43,  4.16it/s][A
 19%|█▉        | 43/221 [00:10<00:45,  3.89it/s][A
 20%|█▉        | 44/221 [00:11<00:38,  4.56it/s][A
 20%|██        | 45/221 [00:11<00:36,  4.88it/s][A
 21%|██        | 46/221 [00:11<00:40,  4.33it/s][A
 21%|██▏       | 47/221 [00:11<00:43,  4.01it/s][A
 22%|██▏       | 48/221 [00:11<00:41,  4.12it/s][A
 22%|██▏       | 49/221 [00:12<00:42,  4.08it/s][A
 23%|██▎       | 50/221 [00:12<00:46,  3.70it/s][A
 23%|██▎       | 51/221 [00:12<00:37,  4.53it/s][A
 24%|██▎       | 52/221 [00:12<00:36,  4.64it/s][A
 24%|██▍       | 53/221 [00:13<00:31,  5.33it/s][A
 24%|██▍       | 54/221 [00:13<00:40,  4.16it/s][A
 25%|██▍       | 55/221 [00:13<00:36,  4.58it/s][A
 25%|██▌       | 56/221 [00:13<00:33,  4.89it/s][A
 26%|██▌       | 57/221 [00:13<00:35,  4.57it/s][A
 26%|██▌       | 58/221 [00:14<00:42,  3.80it/s][A
 27%|██▋       | 59/221 [00:14<00:42,  3.81it/s][A
 28%|██▊       | 61/221 [00:14<00:34,  4.58it/s][A
 28%|██▊       | 62/221 [00:15<00:33,  4.78it/s][A
 29%|██▊       | 63/221 [00:15<00:28,  5.50it/s][A
 29%|██▉       | 64/221 [00:15<00:31,  5.01it/s][A
 29%|██▉       | 65/221 [00:15<00:27,  5.73it/s][A
 30%|██▉       | 66/221 [00:16<00:39,  3.97it/s][A
 30%|███       | 67/221 [00:16<00:58,  2.61it/s][A
 31%|███       | 68/221 [00:16<00:48,  3.17it/s][A
 31%|███       | 69/221 [00:17<00:58,  2.59it/s][A
 32%|███▏      | 70/221 [00:17<00:48,  3.14it/s][A
 32%|███▏      | 71/221 [00:17<00:49,  3.02it/s][A
 33%|███▎      | 72/221 [00:18<00:55,  2.68it/s][A
 33%|███▎      | 73/221 [00:18<00:44,  3.32it/s][A
 33%|███▎      | 74/221 [00:18<00:37,  3.92it/s][A
 34%|███▍      | 75/221 [00:18<00:36,  3.99it/s][A
 34%|███▍      | 76/221 [00:19<00:36,  4.01it/s][A
 35%|███▍      | 77/221 [00:19<00:32,  4.40it/s][A
 35%|███▌      | 78/221 [00:19<00:29,  4.91it/s][A
 36%|███▌      | 79/221 [00:20<00:53,  2.65it/s][A
 36%|███▌      | 80/221 [00:20<00:45,  3.07it/s][A
 37%|███▋      | 81/221 [00:20<00:40,  3.44it/s][A
 37%|███▋      | 82/221 [00:21<00:45,  3.05it/s][A
 38%|███▊      | 83/221 [00:21<00:42,  3.26it/s][A
 38%|███▊      | 84/221 [00:21<00:39,  3.49it/s][A
 38%|███▊      | 85/221 [00:21<00:34,  3.93it/s][A
 39%|███▉      | 86/221 [00:21<00:31,  4.27it/s][A
 39%|███▉      | 87/221 [00:22<00:32,  4.16it/s][A
 40%|███▉      | 88/221 [00:22<00:40,  3.25it/s][A
 40%|████      | 89/221 [00:23<00:50,  2.61it/s][A
 41%|████      | 90/221 [00:23<00:44,  2.92it/s][A
 41%|████      | 91/221 [00:23<00:36,  3.57it/s][A
 42%|████▏     | 92/221 [00:23<00:38,  3.35it/s][A
 42%|████▏     | 93/221 [00:24<01:05,  1.96it/s][A
 43%|████▎     | 94/221 [00:25<01:02,  2.03it/s][A
 43%|████▎     | 95/221 [00:25<00:51,  2.43it/s][A
 43%|████▎     | 96/221 [00:25<00:41,  2.98it/s][A
 44%|████▍     | 97/221 [00:25<00:35,  3.48it/s][A
 44%|████▍     | 98/221 [00:26<00:33,  3.72it/s][A
 45%|████▍     | 99/221 [00:26<00:33,  3.68it/s][A
 45%|████▌     | 100/221 [00:26<00:33,  3.62it/s][A
 46%|████▌     | 101/221 [00:27<00:44,  2.68it/s][A
 46%|████▌     | 102/221 [00:27<00:48,  2.44it/s][A
 47%|████▋     | 103/221 [00:28<00:42,  2.81it/s][A
 47%|████▋     | 104/221 [00:28<00:37,  3.11it/s][A
 48%|████▊     | 105/221 [00:28<00:32,  3.60it/s][A
 48%|████▊     | 106/221 [00:28<00:31,  3.66it/s][A
 48%|████▊     | 107/221 [00:29<00:29,  3.85it/s][A
 49%|████▉     | 108/221 [00:29<00:28,  3.98it/s][A
 49%|████▉     | 109/221 [00:29<00:26,  4.25it/s][A
 50%|████▉     | 110/221 [00:29<00:28,  3.96it/s][A
 50%|█████     | 111/221 [00:30<00:30,  3.60it/s][A
 51%|█████     | 112/221 [00:30<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:30<00:26,  4.07it/s][A
 52%|█████▏    | 115/221 [00:30<00:22,  4.79it/s][A
 52%|█████▏    | 116/221 [00:31<00:27,  3.85it/s][A
 53%|█████▎    | 117/221 [00:31<00:25,  4.05it/s][A
 53%|█████▎    | 118/221 [00:31<00:25,  4.02it/s][A
 54%|█████▍    | 119/221 [00:32<00:37,  2.70it/s][A
 54%|█████▍    | 120/221 [00:32<00:33,  3.02it/s][A
 55%|█████▌    | 122/221 [00:32<00:25,  3.88it/s][A
 56%|█████▌    | 123/221 [00:33<00:26,  3.76it/s][A
 56%|█████▌    | 124/221 [00:33<00:23,  4.21it/s][A
 57%|█████▋    | 125/221 [00:33<00:26,  3.62it/s][A
 57%|█████▋    | 126/221 [00:34<00:28,  3.28it/s][A
 57%|█████▋    | 127/221 [00:34<00:29,  3.16it/s][A
 58%|█████▊    | 128/221 [00:34<00:27,  3.40it/s][A
 58%|█████▊    | 129/221 [00:35<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:35<00:23,  3.82it/s][A
 60%|█████▉    | 132/221 [00:35<00:15,  5.82it/s][A
 60%|██████    | 133/221 [00:35<00:17,  4.94it/s][A
 61%|██████    | 134/221 [00:35<00:17,  4.96it/s][A
 61%|██████    | 135/221 [00:36<00:16,  5.14it/s][A
 62%|██████▏   | 136/221 [00:36<00:18,  4.71it/s][A
 62%|██████▏   | 137/221 [00:36<00:16,  5.25it/s][A
 62%|██████▏   | 138/221 [00:36<00:18,  4.58it/s][A
 63%|██████▎   | 139/221 [00:37<00:22,  3.63it/s][A
 63%|██████▎   | 140/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:37<00:20,  3.93it/s][A
 64%|██████▍   | 142/221 [00:37<00:18,  4.20it/s][A
 65%|██████▍   | 143/221 [00:38<00:25,  3.03it/s][A
 65%|██████▌   | 144/221 [00:38<00:28,  2.74it/s][A
 66%|██████▌   | 145/221 [00:38<00:21,  3.49it/s][A
 66%|██████▌   | 146/221 [00:39<00:17,  4.31it/s][A
 67%|██████▋   | 147/221 [00:39<00:18,  4.02it/s][A
 67%|██████▋   | 148/221 [00:39<00:22,  3.19it/s][A
 67%|██████▋   | 149/221 [00:39<00:18,  3.92it/s][A
 68%|██████▊   | 150/221 [00:40<00:18,  3.82it/s][A
 68%|██████▊   | 151/221 [00:40<00:21,  3.28it/s][A
 69%|██████▉   | 152/221 [00:41<00:27,  2.48it/s][A
 69%|██████▉   | 153/221 [00:41<00:22,  2.99it/s][A
 70%|██████▉   | 154/221 [00:41<00:20,  3.31it/s][A
 70%|███████   | 155/221 [00:41<00:18,  3.65it/s][A
 71%|███████   | 156/221 [00:42<00:20,  3.12it/s][A
 71%|███████   | 157/221 [00:42<00:19,  3.29it/s][A
 71%|███████▏  | 158/221 [00:42<00:18,  3.38it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.85it/s][A
 72%|███████▏  | 160/221 [00:43<00:16,  3.77it/s][A
 73%|███████▎  | 161/221 [00:43<00:19,  3.05it/s][A
 73%|███████▎  | 162/221 [00:43<00:17,  3.40it/s][A
 74%|███████▍  | 163/221 [00:44<00:16,  3.55it/s][A
 74%|███████▍  | 164/221 [00:44<00:16,  3.54it/s][A
 75%|███████▍  | 165/221 [00:44<00:14,  3.81it/s][A
 75%|███████▌  | 166/221 [00:44<00:14,  3.72it/s][A
 76%|███████▌  | 167/221 [00:45<00:12,  4.45it/s][A
 76%|███████▌  | 168/221 [00:45<00:15,  3.53it/s][A
 76%|███████▋  | 169/221 [00:45<00:14,  3.70it/s][A
 77%|███████▋  | 170/221 [00:46<00:18,  2.81it/s][A
 77%|███████▋  | 171/221 [00:46<00:14,  3.50it/s][A
 78%|███████▊  | 172/221 [00:46<00:12,  4.06it/s][A
 78%|███████▊  | 173/221 [00:46<00:12,  3.77it/s][A
 79%|███████▊  | 174/221 [00:47<00:15,  3.13it/s][A
 79%|███████▉  | 175/221 [00:47<00:14,  3.14it/s][A
 80%|███████▉  | 176/221 [00:47<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:48<00:11,  3.84it/s][A
 81%|████████  | 178/221 [00:48<00:09,  4.30it/s][A
 81%|████████  | 179/221 [00:48<00:09,  4.27it/s][A
 81%|████████▏ | 180/221 [00:48<00:08,  4.62it/s][A
 82%|████████▏ | 181/221 [00:49<00:10,  3.82it/s][A
 82%|████████▏ | 182/221 [00:49<00:10,  3.69it/s][A
 83%|████████▎ | 183/221 [00:49<00:10,  3.61it/s][A
 83%|████████▎ | 184/221 [00:49<00:08,  4.36it/s][A
 84%|████████▎ | 185/221 [00:49<00:07,  4.51it/s][A
 84%|████████▍ | 186/221 [00:50<00:09,  3.79it/s][A
 85%|████████▍ | 187/221 [00:50<00:08,  4.03it/s][A
 85%|████████▌ | 188/221 [00:50<00:08,  3.89it/s][A
 86%|████████▌ | 189/221 [00:51<00:08,  3.59it/s][A
 86%|████████▌ | 190/221 [00:51<00:10,  3.05it/s][A
 86%|████████▋ | 191/221 [00:51<00:08,  3.72it/s][A
 87%|████████▋ | 192/221 [00:52<00:09,  3.14it/s][A
 87%|████████▋ | 193/221 [00:52<00:07,  3.66it/s][A
 88%|████████▊ | 194/221 [00:52<00:08,  3.29it/s][A
 88%|████████▊ | 195/221 [00:52<00:07,  3.32it/s][A
 89%|████████▊ | 196/221 [00:53<00:08,  3.11it/s][A
 89%|████████▉ | 197/221 [00:53<00:06,  3.82it/s][A
 90%|████████▉ | 198/221 [00:54<00:08,  2.65it/s][A
 90%|█████████ | 199/221 [00:54<00:07,  2.92it/s][A
 90%|█████████ | 200/221 [00:54<00:07,  2.84it/s][A
 91%|█████████ | 201/221 [00:55<00:06,  2.97it/s][A
 91%|█████████▏| 202/221 [00:55<00:06,  2.78it/s][A
 92%|█████████▏| 203/221 [00:55<00:05,  3.48it/s][A
 92%|█████████▏| 204/221 [00:56<00:06,  2.48it/s][A
 93%|█████████▎| 205/221 [00:56<00:05,  3.12it/s][A
 93%|█████████▎| 206/221 [00:56<00:05,  2.99it/s][A
 94%|█████████▎| 207/221 [00:57<00:04,  3.15it/s][A
 94%|█████████▍| 208/221 [00:57<00:03,  3.86it/s][A
 95%|█████████▍| 209/221 [00:57<00:03,  3.70it/s][A
 95%|█████████▌| 210/221 [00:57<00:02,  3.98it/s][A
 95%|█████████▌| 211/221 [00:58<00:02,  3.51it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  3.69it/s][A
 96%|█████████▋| 213/221 [00:58<00:02,  3.61it/s][A
 97%|█████████▋| 214/221 [00:59<00:02,  2.87it/s][A
 97%|█████████▋| 215/221 [00:59<00:01,  3.04it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  2.99it/s][A
 98%|█████████▊| 217/221 [00:59<00:01,  3.29it/s][A
 99%|█████████▊| 218/221 [01:00<00:00,  3.17it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  2.98it/s][A
100%|█████████▉| 220/221 [01:00<00:00,  3.10it/s][A
100%|██████████| 221/221 [01:01<00:00,  2.99it/s][A100%|██████████| 221/221 [01:01<00:00,  3.61it/s]
09/09/2024 20:34:39 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 949--===========

09/09/2024 20:34:39 - INFO - __main__ -   {'area_r1': 24.1, 'area_recall': '24.1/42.8/53.4', 'area_ravg': 40.1}
09/09/2024 20:34:39 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 949--===========

09/09/2024 20:34:39 - INFO - __main__ -   {'forward_r1': 35.2, 'forward_recall': '35.2/60.7/71.6', 'forward_ravg': 55.8}
09/09/2024 20:34:39 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 949--===========

09/09/2024 20:34:39 - INFO - __main__ -   {'area_video_r1': 40.6, 'area_video_recall': '40.6/69.7/79.6', 'area_video_ravg': 63.3}
09/09/2024 20:34:39 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 949=======

09/09/2024 20:34:39 - INFO - __main__ -   {'area_video_r1': 40.6, 'area_video_recall': '40.6/69.7/79.6', 'area_video_ravg': 63.3}
09/09/2024 20:34:39 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 949--===========

09/09/2024 20:34:39 - INFO - __main__ -   {'area_video_r1': 48.5, 'area_video_recall': '48.5/67.8/74.7', 'area_video_ravg': 63.7, 'area_video_back_r1': 49.8, 'area_video_back_recall': '49.8/71.8/80.0', 'area_video_back_ravg': 67.2}
09/09/2024 20:34:39 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 20:34:39 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 20:34:39 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 949--===========

09/09/2024 20:34:39 - INFO - __main__ -   {'video_r1': 41.7, 'video_recall': '41.7/70.4/79.4', 'video_ravg': 63.8}
09/09/2024 20:34:39 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 20:34:39 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 20:34:39 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 949--===========

09/09/2024 20:34:39 - INFO - __main__ -   {'video_r1': 51.8, 'video_recall': '51.8/74.7/82.6', 'video_ravg': 69.7}
09/09/2024 20:34:39 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 599=======

09/09/2024 20:34:39 - INFO - __main__ -   {'video_r1': 52.7, 'video_recall': '52.7/76.1/82.8', 'video_ravg': 70.6}
09/09/2024 20:35:04 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.5427873134613037, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.025392919778823853, 'loss_ret%tv%ta--finetune_area/loss_area': 1.1941335201263428, 'loss_ret%tv%ta--finetune_area/total_loss': 2.7623138427734375}
 49%|████▉     | 950/1945 [5:09:38<34:13:45, 123.84s/it] 49%|████▉     | 951/1945 [5:09:43<24:17:00, 87.95s/it] [h264 @ 0x55e5191e0680] mmco: unref short failure
[h264 @ 0x55e5191e0680] mmco: unref short failure
 49%|████▉     | 952/1945 [5:09:47<17:21:56, 62.96s/it] 49%|████▉     | 953/1945 [5:09:53<12:35:37, 45.70s/it][h264 @ 0x55e4ffeb6300] mmco: unref short failure
 49%|████▉     | 954/1945 [5:09:59<9:17:08, 33.73s/it] [h264 @ 0x55e4fe343800] mmco: unref short failure
[h264 @ 0x55e509840ac0] mmco: unref short failure
[h264 @ 0x55e509840ac0] mmco: unref short failure
 49%|████▉     | 955/1945 [5:10:05<7:01:37, 25.55s/it][h264 @ 0x55e507161f00] mmco: unref short failure
[h264 @ 0x55e507161f00] mmco: unref short failure
 49%|████▉     | 956/1945 [5:10:12<5:27:11, 19.85s/it] 49%|████▉     | 957/1945 [5:10:18<4:22:26, 15.94s/it][h264 @ 0x556e6aa49d80] mmco: unref short failure
[h264 @ 0x556e6aa49d80] mmco: unref short failure
 49%|████▉     | 958/1945 [5:10:26<3:39:21, 13.33s/it][h264 @ 0x556e631759c0] mmco: unref short failure
[h264 @ 0x556e631759c0] mmco: unref short failure
[h264 @ 0x55e4fd039680] mmco: unref short failure
[h264 @ 0x55e4fd039680] mmco: unref short failure
[h264 @ 0x55b7d54c3480] mmco: unref short failure
[h264 @ 0x55b7e9e57ac0] mmco: unref short failure
[h264 @ 0x556e4225f580] mmco: unref short failure
[h264 @ 0x556e4225f580] mmco: unref short failure
 49%|████▉     | 959/1945 [5:10:33<3:10:06, 11.57s/it] 49%|████▉     | 960/1945 [5:10:41<2:49:29, 10.32s/it][h264 @ 0x55e5174ed180] mmco: unref short failure
 49%|████▉     | 961/1945 [5:10:48<2:33:34,  9.36s/it] 49%|████▉     | 962/1945 [5:10:55<2:24:08,  8.80s/it][h264 @ 0x55e4ff58de40] mmco: unref short failure
[h264 @ 0x55e4ff58de40] mmco: unref short failure
[h264 @ 0x55e4ff58de40] mmco: unref short failure
 50%|████▉     | 963/1945 [5:11:02<2:14:09,  8.20s/it] 50%|████▉     | 964/1945 [5:11:08<2:05:31,  7.68s/it][h264 @ 0x556e54525fc0] mmco: unref short failure
[h264 @ 0x556e54525fc0] mmco: unref short failure
[h264 @ 0x55b7e838bc80] mmco: unref short failure
 50%|████▉     | 965/1945 [5:11:16<2:04:21,  7.61s/it][h264 @ 0x556e4eb39dc0] mmco: unref short failure
[h264 @ 0x556e4eb39dc0] mmco: unref short failure
[h264 @ 0x55e51b1cf240] mmco: unref short failure
[h264 @ 0x55e51b1cf240] mmco: unref short failure
 50%|████▉     | 966/1945 [5:11:24<2:06:51,  7.77s/it][h264 @ 0x55e51d0670c0] mmco: unref short failure
[h264 @ 0x55e4fcf7e2c0] mmco: unref short failure
[h264 @ 0x55e4fcf7e2c0] mmco: unref short failure
[h264 @ 0x556e5c8a5900] mmco: unref short failure
[h264 @ 0x556e5c8a5900] mmco: unref short failure
[h264 @ 0x556e71f1c140] mmco: unref short failure
[h264 @ 0x556e68428740] mmco: unref short failure
[h264 @ 0x556e68428740] mmco: unref short failure
[h264 @ 0x55e4fea03580] mmco: unref short failure
[h264 @ 0x55b7e6b78dc0] mmco: unref short failure
[h264 @ 0x55b7e6b78dc0] mmco: unref short failure
 50%|████▉     | 967/1945 [5:11:37<2:29:53,  9.20s/it][h264 @ 0x556e6eb42bc0] mmco: unref short failure
[h264 @ 0x556e6eb42bc0] mmco: unref short failure
[h264 @ 0x556e6eb42bc0] mmco: unref short failure
[h264 @ 0x556e5582f800] mmco: unref short failure
[h264 @ 0x556e45768dc0] mmco: unref short failure
[h264 @ 0x556e5218ee80] mmco: unref short failure
 50%|████▉     | 968/1945 [5:11:45<2:26:44,  9.01s/it][h264 @ 0x55b7cb882f00] mmco: unref short failure
[h264 @ 0x55e4ff0be040] mmco: unref short failure
[h264 @ 0x55e4ff0be040] mmco: unref short failure
[h264 @ 0x55e5133febc0] mmco: unref short failure
[h264 @ 0x55e5133febc0] mmco: unref short failure
[h264 @ 0x556e52ab4280] mmco: unref short failure
[h264 @ 0x55e4ff982f40] mmco: unref short failure
 50%|████▉     | 969/1945 [5:12:00<2:56:54, 10.88s/it][h264 @ 0x55e51a846c40] mmco: unref short failure
 50%|████▉     | 970/1945 [5:12:07<2:38:26,  9.75s/it][h264 @ 0x556e43066340] mmco: unref short failure
[h264 @ 0x556e43066340] mmco: unref short failure
 50%|████▉     | 971/1945 [5:12:16<2:34:25,  9.51s/it][h264 @ 0x556e575e2040] mmco: unref short failure
[h264 @ 0x556e575e2040] mmco: unref short failure
[h264 @ 0x556e70f4afc0] mmco: unref short failure
 50%|████▉     | 972/1945 [5:12:23<2:21:40,  8.74s/it][h264 @ 0x55e5195e9880] mmco: unref short failure
[h264 @ 0x55e5195e9880] mmco: unref short failure
[h264 @ 0x55e5195e9880] mmco: unref short failure
 50%|█████     | 973/1945 [5:12:31<2:18:39,  8.56s/it][h264 @ 0x556e4ac79740] mmco: unref short failure
[h264 @ 0x556e4ac79740] mmco: unref short failure
[h264 @ 0x55b7cac9ac00] mmco: unref short failure
[h264 @ 0x556e4ac79740] mmco: unref short failure
[h264 @ 0x556e4ac79740] mmco: unref short failure
[h264 @ 0x556e4ac79740] mmco: unref short failure
[h264 @ 0x556e4ac79740] mmco: unref short failure
[h264 @ 0x55b7de97ba40] mmco: unref short failure
[h264 @ 0x556e42970400] mmco: unref short failure
[h264 @ 0x556e42970400] mmco: unref short failure
[h264 @ 0x556e42970400] mmco: unref short failure
[h264 @ 0x556e42970400] mmco: unref short failure
[h264 @ 0x556e486dac40] mmco: unref short failure
[h264 @ 0x55b7d2e3c0c0] mmco: unref short failure
[h264 @ 0x55b7d2e3c0c0] mmco: unref short failure
[h264 @ 0x556e777c1b00] mmco: unref short failure
[h264 @ 0x55e51b1cf240] mmco: unref short failure
[h264 @ 0x55e51b1cf240] mmco: unref short failure
[h264 @ 0x55b7e19e6740] mmco: unref short failure
[h264 @ 0x55b7e19e6740] mmco: unref short failure
[h264 @ 0x556e698e8840] mmco: unref short failure
[h264 @ 0x556e698e8840] mmco: unref short failure
[h264 @ 0x556e5e6e1fc0] mmco: unref short failure
[h264 @ 0x556e5e6e1fc0] mmco: unref short failure
[h264 @ 0x556e5ffd4640] mmco: unref short failure
[h264 @ 0x556e5ffd4640] mmco: unref short failure
[h264 @ 0x556e5ffd4640] mmco: unref short failure
[h264 @ 0x556e5ffd4640] mmco: unref short failure
[h264 @ 0x556e6f593880] mmco: unref short failure
[h264 @ 0x556e6f593880] mmco: unref short failure
[h264 @ 0x55b7d3062380] mmco: unref short failure
[h264 @ 0x55b7d3062380] mmco: unref short failure
 50%|█████     | 974/1945 [5:13:20<5:31:44, 20.50s/it][h264 @ 0x55b7ce3e5280] mmco: unref short failure
[h264 @ 0x556e521168c0] mmco: unref short failure
[h264 @ 0x556e56216280] mmco: unref short failure
[h264 @ 0x556e56216280] mmco: unref short failure
[h264 @ 0x556e56216280] mmco: unref short failure
[h264 @ 0x556e56216280] mmco: unref short failure
[h264 @ 0x55b7cd586200] mmco: unref short failure
[h264 @ 0x556e521a4980] mmco: unref short failure
[h264 @ 0x556e521a4980] mmco: unref short failure
[h264 @ 0x556e521a4980] mmco: unref short failure
[h264 @ 0x556e521a4980] mmco: unref short failure
[h264 @ 0x55e518555580] mmco: unref short failure
 50%|█████     | 975/1945 [5:13:37<5:13:15, 19.38s/it][h264 @ 0x55e518555380] mmco: unref short failure
[h264 @ 0x556e653da580] mmco: unref short failure
 50%|█████     | 976/1945 [5:13:47<4:30:26, 16.75s/it][h264 @ 0x55b7d5c6dbc0] mmco: unref short failure
[h264 @ 0x55b7d5c6dbc0] mmco: unref short failure
[h264 @ 0x556e4e6239c0] mmco: unref short failure
[h264 @ 0x556e4e6239c0] mmco: unref short failure
[h264 @ 0x55e51a5cce40] mmco: unref short failure
[h264 @ 0x55e51a5cce40] mmco: unref short failure
[h264 @ 0x55e5103cdec0] mmco: unref short failure
[h264 @ 0x55b7d7a1c200] mmco: unref short failure
 50%|█████     | 977/1945 [5:14:04<4:32:30, 16.89s/it][h264 @ 0x556e534e2500] mmco: unref short failure
[h264 @ 0x55e4fd7194c0] mmco: unref short failure
[h264 @ 0x55e4fd7194c0] mmco: unref short failure
[h264 @ 0x55e4fd7194c0] mmco: unref short failure
[h264 @ 0x55e4fd7194c0] mmco: unref short failure
 50%|█████     | 978/1945 [5:14:11<3:44:22, 13.92s/it][h264 @ 0x556e4913c840] mmco: unref short failure
[h264 @ 0x55b7ccd16900] mmco: unref short failure
[h264 @ 0x55b7ccd16900] mmco: unref short failure
 50%|█████     | 979/1945 [5:14:18<3:10:55, 11.86s/it][h264 @ 0x556e5dd7cb80] mmco: unref short failure
[h264 @ 0x556e57e58000] mmco: unref short failure
[h264 @ 0x556e6ed9bbc0] mmco: unref short failure
 50%|█████     | 980/1945 [5:14:25<2:47:28, 10.41s/it][h264 @ 0x55e502cb05c0] mmco: unref short failure
[h264 @ 0x55e502cb05c0] mmco: unref short failure
 50%|█████     | 981/1945 [5:14:33<2:33:09,  9.53s/it][h264 @ 0x556e5451ef80] mmco: unref short failure
[h264 @ 0x55e516cb9e00] mmco: unref short failure
[h264 @ 0x55b7cc8dbc80] mmco: unref short failure
[h264 @ 0x556e52c19040] mmco: unref short failure
[h264 @ 0x55b7cdad7fc0] mmco: unref short failure
[h264 @ 0x55b7cdad7fc0] mmco: unref short failure
[h264 @ 0x55b7e1ae4280] mmco: unref short failure
[h264 @ 0x556e53d1a800] mmco: unref short failure
[h264 @ 0x55e50016c780] mmco: unref short failure
[h264 @ 0x55e50016c780] mmco: unref short failure
[h264 @ 0x556e42f61780] mmco: unref short failure
[h264 @ 0x556e42f61780] mmco: unref short failure
 50%|█████     | 982/1945 [5:15:15<5:11:32, 19.41s/it][h264 @ 0x55b7d20c8700] mmco: unref short failure
[h264 @ 0x55e51a8470c0] mmco: unref short failure
[h264 @ 0x55e51a8470c0] mmco: unref short failure
[h264 @ 0x556e42f61980] mmco: unref short failure
[h264 @ 0x556e42f61980] mmco: unref short failure
 51%|█████     | 983/1945 [5:15:55<6:46:09, 25.33s/it][h264 @ 0x556e4e623bc0] mmco: unref short failure
[h264 @ 0x556e4e623bc0] mmco: unref short failure
 51%|█████     | 984/1945 [5:16:02<5:19:36, 19.95s/it][h264 @ 0x55e4fde1d040] mmco: unref short failure
 51%|█████     | 985/1945 [5:16:09<4:17:43, 16.11s/it][h264 @ 0x556e63175740] mmco: unref short failure
[h264 @ 0x556e63175740] mmco: unref short failure
 51%|█████     | 986/1945 [5:16:17<3:37:13, 13.59s/it][h264 @ 0x556e52edd380] mmco: unref short failure
[h264 @ 0x556e52edd380] mmco: unref short failure
 51%|█████     | 987/1945 [5:16:24<3:05:30, 11.62s/it] 51%|█████     | 988/1945 [5:16:31<2:45:06, 10.35s/it][h264 @ 0x55e50168e100] mmco: unref short failure
[h264 @ 0x55e50168e100] mmco: unref short failure
[h264 @ 0x55e50168e100] mmco: unref short failure
[h264 @ 0x55e50168e100] mmco: unref short failure
[h264 @ 0x556e46285fc0] mmco: unref short failure
 51%|█████     | 989/1945 [5:16:39<2:34:39,  9.71s/it][h264 @ 0x55b7cf8ae780] mmco: unref short failure
[h264 @ 0x556e572d4cc0] mmco: unref short failure
[h264 @ 0x556e572d4cc0] mmco: unref short failure
[h264 @ 0x556e45b49700] mmco: unref short failure
[h264 @ 0x556e45b49700] mmco: unref short failure
[h264 @ 0x55b7cb35d0c0] mmco: unref short failure
[h264 @ 0x55b7cb35d0c0] mmco: unref short failure
[h264 @ 0x556e56527f80] mmco: unref short failure
[h264 @ 0x556e56527f80] mmco: unref short failure
[h264 @ 0x556e5c5bfd00] mmco: unref short failure
[h264 @ 0x556e5c5bfd00] mmco: unref short failure
 51%|█████     | 990/1945 [5:17:19<4:57:00, 18.66s/it][h264 @ 0x55e507f4fd40] mmco: unref short failure
[h264 @ 0x556e46113a00] mmco: unref short failure
[h264 @ 0x556e46113a00] mmco: unref short failure
[h264 @ 0x55b7cd94fac0] mmco: unref short failure
[h264 @ 0x55b7e687e0c0] mmco: unref short failure
 51%|█████     | 991/1945 [5:17:50<5:55:51, 22.38s/it] 51%|█████     | 992/1945 [5:17:56<4:39:23, 17.59s/it][h264 @ 0x556e420ff7c0] mmco: unref short failure
 51%|█████     | 993/1945 [5:18:04<3:51:41, 14.60s/it] 51%|█████     | 994/1945 [5:18:11<3:13:38, 12.22s/it][h264 @ 0x55b7cdad81c0] mmco: unref short failure
[h264 @ 0x55b7cdad81c0] mmco: unref short failure
[h264 @ 0x55e50e353e40] mmco: unref short failure
[h264 @ 0x55e50e353e40] mmco: unref short failure
 51%|█████     | 995/1945 [5:18:19<2:52:57, 10.92s/it][h264 @ 0x55e5006fd600] mmco: unref short failure
[h264 @ 0x556e522b40c0] mmco: unref short failure
 51%|█████     | 996/1945 [5:18:26<2:37:04,  9.93s/it][h264 @ 0x55b7cc198b00] mmco: unref short failure
 51%|█████▏    | 997/1945 [5:18:34<2:28:44,  9.41s/it][h264 @ 0x55b7efc64040] mmco: unref short failure
[h264 @ 0x55b7efc64040] mmco: unref short failure
[h264 @ 0x55b7efc64040] mmco: unref short failure
[h264 @ 0x55b7efc64040] mmco: unref short failure
[h264 @ 0x55e5162dda80] mmco: unref short failure
[h264 @ 0x55e5162dda80] mmco: unref short failure
[h264 @ 0x55e5003cce40] mmco: unref short failure
[h264 @ 0x55e5003cce40] mmco: unref short failure
[h264 @ 0x55b7e89d45c0] mmco: unref short failure
[h264 @ 0x55b7d149d500] mmco: unref short failure
[h264 @ 0x55b7d149d500] mmco: unref short failure
not have audios 7wavFXW3AFw.7
[h264 @ 0x55b7cdad8400] mmco: unref short failure
[h264 @ 0x55b7cdad8400] mmco: unref short failure
[h264 @ 0x55b7e170b640] mmco: unref short failure
[h264 @ 0x55b7ed19ca80] mmco: unref short failure
[h264 @ 0x55b7ed19ca80] mmco: unref short failure
[h264 @ 0x556e529d7680] mmco: unref short failure
[h264 @ 0x556e529d7680] mmco: unref short failure
[h264 @ 0x556e529d7680] mmco: unref short failure
[h264 @ 0x556e529d7680] mmco: unref short failure
[h264 @ 0x556e55bc7fc0] mmco: unref short failure
[h264 @ 0x556e55bc7fc0] mmco: unref short failure
[h264 @ 0x55b7e0b23280] mmco: unref short failure
[h264 @ 0x556e5700f980] mmco: unref short failure
[h264 @ 0x556e5700f980] mmco: unref short failure
[h264 @ 0x556e52680100] mmco: unref short failure
[h264 @ 0x556e52680100] mmco: unref short failure
 51%|█████▏    | 998/1945 [5:19:25<5:45:22, 21.88s/it][h264 @ 0x556e5c20e140] mmco: unref short failure
[h264 @ 0x55b7cd50a680] mmco: unref short failure
[h264 @ 0x55b7cd50a680] mmco: unref short failure
[h264 @ 0x556e428b6380] mmco: unref short failure
[h264 @ 0x556e428b6380] mmco: unref short failure
[h264 @ 0x556e6ef0aa80] mmco: unref short failure
[h264 @ 0x556e6ef0aa80] mmco: unref short failure
[h264 @ 0x556e6ef0aa80] mmco: unref short failure
[h264 @ 0x556e6ef0aa80] mmco: unref short failure
[h264 @ 0x55e502304180] mmco: unref short failure
[h264 @ 0x556e4229d080] mmco: unref short failure
[h264 @ 0x556e4229d080] mmco: unref short failure
[h264 @ 0x556e5f8bc180] mmco: unref short failure
[h264 @ 0x556e5f8bc180] mmco: unref short failure
[h264 @ 0x55e4fdf409c0] mmco: unref short failure
[h264 @ 0x55e4fdf409c0] mmco: unref short failure
[h264 @ 0x55e5195e93c0] mmco: unref short failure
[h264 @ 0x55b7cfe38980] mmco: unref short failure
[h264 @ 0x55b7cfe38980] mmco: unref short failure
[h264 @ 0x55b7e5ed8c40] mmco: unref short failure
[h264 @ 0x55b7e5ed8c40] mmco: unref short failure
[h264 @ 0x55b7e5ed8c40] mmco: unref short failure
[h264 @ 0x556e45e4a780] mmco: unref short failure
[h264 @ 0x556e45e4a780] mmco: unref short failure
[h264 @ 0x556e556b5d80] mmco: unref short failure
[h264 @ 0x556e556b5d80] mmco: unref short failure
[h264 @ 0x556e556b5d80] mmco: unref short failure
[h264 @ 0x556e556b5d80] mmco: unref short failure
[h264 @ 0x556e528e67c0] mmco: unref short failure
[h264 @ 0x556e528e67c0] mmco: unref short failure
[h264 @ 0x55b7d83cc380] mmco: unref short failure
[h264 @ 0x55b7d83cc380] mmco: unref short failure
 51%|█████▏    | 999/1945 [5:19:58<6:36:02, 25.12s/it]09/09/2024 20:45:27 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 20:45:27 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e6603b200] mmco: unref short failure
[h264 @ 0x556e6603b200] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e502038340] mmco: unref short failure
[h264 @ 0x556e42a54280] mmco: unref short failure
[h264 @ 0x556e42a54280] mmco: unref short failure
[h264 @ 0x55e4fd991f40] mmco: unref short failure
[h264 @ 0x55e4fd991f40] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e581b8680] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e52205b00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e4be7ef00] mmco: unref short failure
[h264 @ 0x556e4be7ef00] mmco: unref short failure
[h264 @ 0x556e4be7ef00] mmco: unref short failure
[h264 @ 0x556e4be7ef00] mmco: unref short failure
[h264 @ 0x556e489d2640] mmco: unref short failure
[h264 @ 0x55e51b1ced80] mmco: unref short failure
[h264 @ 0x55e51b1ced80] mmco: unref short failure
[h264 @ 0x55b7ce41aac0] mmco: unref short failure
[h264 @ 0x55b7dc7bf8c0] mmco: unref short failure
[h264 @ 0x55b7dc7bf8c0] mmco: unref short failure
[h264 @ 0x556e6eb43040] mmco: unref short failure
[h264 @ 0x55e50da50cc0] mmco: unref short failure
[h264 @ 0x55e4fffb5640] mmco: unref short failure
[h264 @ 0x55b7e4bd0980] mmco: unref short failure
[h264 @ 0x55e4fd9d9e80] mmco: unref short failure
[h264 @ 0x55e4fd9d9e80] mmco: unref short failure
[h264 @ 0x556e5d20ae00] mmco: unref short failure
[h264 @ 0x556e5d20ae00] mmco: unref short failure
[h264 @ 0x55b7e0b23500] mmco: unref short failure
[h264 @ 0x55e51c4c4980] mmco: unref short failure
[h264 @ 0x55b7e2f6f400] mmco: unref short failure
[h264 @ 0x55b7e2f6f400] mmco: unref short failure
[h264 @ 0x55b7e2f6f400] mmco: unref short failure
[h264 @ 0x55b7e2f6f400] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:27,  7.90it/s][A[h264 @ 0x55e4ffb47dc0] mmco: unref short failure

  1%|          | 2/221 [00:00<00:37,  5.88it/s][A
  1%|▏         | 3/221 [00:00<00:33,  6.41it/s][A
  2%|▏         | 4/221 [00:00<00:29,  7.32it/s][A
  2%|▏         | 5/221 [00:00<00:29,  7.20it/s][A[h264 @ 0x556e6407c800] mmco: unref short failure
[h264 @ 0x556e6407c800] mmco: unref short failure
[h264 @ 0x556e6407c800] mmco: unref short failure
[h264 @ 0x556e6407c800] mmco: unref short failure

  3%|▎         | 7/221 [00:01<00:45,  4.73it/s][A
  4%|▎         | 8/221 [00:01<00:42,  5.02it/s][A
  4%|▍         | 9/221 [00:01<00:37,  5.71it/s][A
  5%|▍         | 10/221 [00:03<02:12,  1.59it/s][A
  5%|▌         | 12/221 [00:03<01:21,  2.56it/s][A
  6%|▌         | 13/221 [00:03<01:11,  2.92it/s][A
  6%|▋         | 14/221 [00:07<04:06,  1.19s/it][A
  7%|▋         | 15/221 [00:07<03:10,  1.08it/s][A[h264 @ 0x556e4d24a900] mmco: unref short failure
[h264 @ 0x556e4d24a900] mmco: unref short failure

  7%|▋         | 16/221 [00:09<04:35,  1.34s/it][A
  8%|▊         | 17/221 [00:10<03:46,  1.11s/it][A
  8%|▊         | 18/221 [00:10<02:50,  1.19it/s][A
  9%|▉         | 20/221 [00:10<01:40,  2.00it/s][A
 10%|▉         | 21/221 [00:10<01:20,  2.49it/s][A
 10%|▉         | 22/221 [00:11<01:04,  3.08it/s][A
 11%|█         | 24/221 [00:11<00:44,  4.44it/s][A
 11%|█▏        | 25/221 [00:11<00:39,  4.99it/s][A
 12%|█▏        | 26/221 [00:11<00:36,  5.41it/s][A
 12%|█▏        | 27/221 [00:11<00:38,  5.06it/s][A[h264 @ 0x556e55bc7dc0] mmco: unref short failure
[h264 @ 0x556e55bc7dc0] mmco: unref short failure

 13%|█▎        | 28/221 [00:15<03:47,  1.18s/it][A
 13%|█▎        | 29/221 [00:15<02:50,  1.12it/s][A
 14%|█▎        | 30/221 [00:15<02:08,  1.49it/s][A
 14%|█▍        | 32/221 [00:16<01:36,  1.97it/s][A
 15%|█▍        | 33/221 [00:16<01:17,  2.42it/s][A
 16%|█▌        | 35/221 [00:16<00:58,  3.17it/s][A
 16%|█▋        | 36/221 [00:17<00:50,  3.69it/s][A
 17%|█▋        | 37/221 [00:17<00:46,  3.95it/s][A
 17%|█▋        | 38/221 [00:17<00:40,  4.52it/s][A
 18%|█▊        | 39/221 [00:17<00:37,  4.89it/s][A
 18%|█▊        | 40/221 [00:17<00:32,  5.55it/s][A
 19%|█▉        | 42/221 [00:17<00:25,  6.96it/s][A
 20%|█▉        | 44/221 [00:18<00:24,  7.29it/s][A
 21%|██        | 46/221 [00:18<00:19,  8.83it/s][A[h264 @ 0x556e52996500] mmco: unref short failure

 21%|██▏       | 47/221 [00:21<02:23,  1.21it/s][A
 22%|██▏       | 48/221 [00:22<02:00,  1.44it/s][A
 22%|██▏       | 49/221 [00:22<01:42,  1.68it/s][A
 23%|██▎       | 50/221 [00:22<01:22,  2.08it/s][A[h264 @ 0x55b7eac0c6c0] mmco: unref short failure
[h264 @ 0x55b7eac0c6c0] mmco: unref short failure
[h264 @ 0x55b7eac0c6c0] mmco: unref short failure

 23%|██▎       | 51/221 [00:22<01:10,  2.40it/s][A
 24%|██▎       | 52/221 [00:22<01:00,  2.79it/s][A
 24%|██▍       | 53/221 [00:23<01:00,  2.78it/s][A
 24%|██▍       | 54/221 [00:23<00:49,  3.34it/s][A
 25%|██▍       | 55/221 [00:23<00:46,  3.60it/s][A
 25%|██▌       | 56/221 [00:23<00:40,  4.10it/s][A
 26%|██▌       | 57/221 [00:24<00:40,  4.08it/s][A
 26%|██▌       | 58/221 [00:24<00:40,  4.02it/s][A
 27%|██▋       | 59/221 [00:24<00:37,  4.34it/s][A
 27%|██▋       | 60/221 [00:24<00:36,  4.43it/s][A
 28%|██▊       | 61/221 [00:25<00:39,  4.00it/s][A
 28%|██▊       | 62/221 [00:25<00:42,  3.75it/s][A
 29%|██▊       | 63/221 [00:25<00:40,  3.87it/s][A
 29%|██▉       | 64/221 [00:25<00:37,  4.20it/s][A
 30%|██▉       | 66/221 [00:26<00:27,  5.69it/s][A
 30%|███       | 67/221 [00:26<00:25,  5.98it/s][A
 31%|███       | 68/221 [00:26<00:31,  4.90it/s][A
 31%|███       | 69/221 [00:26<00:27,  5.43it/s][A
 32%|███▏      | 70/221 [00:27<00:37,  4.08it/s][A
 32%|███▏      | 71/221 [00:27<00:33,  4.52it/s][A
 33%|███▎      | 73/221 [00:27<00:28,  5.24it/s][A
 34%|███▍      | 75/221 [00:27<00:23,  6.11it/s][A
 34%|███▍      | 76/221 [00:27<00:25,  5.76it/s][A[h264 @ 0x556e5534f600] mmco: unref short failure
[h264 @ 0x556e5534f600] mmco: unref short failure
[h264 @ 0x556e5534f600] mmco: unref short failure
[h264 @ 0x556e5534f600] mmco: unref short failure
[h264 @ 0x556e4cca1e00] mmco: unref short failure
[h264 @ 0x556e4cca1e00] mmco: unref short failure
[h264 @ 0x556e64d02c80] mmco: unref short failure
[h264 @ 0x556e64d02c80] mmco: unref short failure

 35%|███▍      | 77/221 [00:32<02:54,  1.21s/it][A
 35%|███▌      | 78/221 [00:32<02:15,  1.05it/s][A
 36%|███▌      | 80/221 [00:32<01:22,  1.72it/s][A
 37%|███▋      | 81/221 [00:33<01:24,  1.66it/s][A
 38%|███▊      | 83/221 [00:33<00:55,  2.49it/s][A
 38%|███▊      | 84/221 [00:34<00:56,  2.43it/s][A
 38%|███▊      | 85/221 [00:34<00:49,  2.75it/s][A
 39%|███▉      | 86/221 [00:34<00:42,  3.19it/s][A
 40%|███▉      | 88/221 [00:34<00:29,  4.48it/s][A
 40%|████      | 89/221 [00:35<00:54,  2.41it/s][A
 41%|████      | 90/221 [00:35<00:46,  2.81it/s][A
 41%|████      | 91/221 [00:36<00:41,  3.15it/s][A
 42%|████▏     | 92/221 [00:37<01:08,  1.87it/s][A
 42%|████▏     | 93/221 [00:37<00:55,  2.30it/s][A
 43%|████▎     | 95/221 [00:37<00:34,  3.66it/s][A
 44%|████▍     | 97/221 [00:37<00:24,  4.99it/s][A
 45%|████▍     | 99/221 [00:37<00:21,  5.71it/s][A
 46%|████▌     | 101/221 [00:38<00:17,  6.72it/s][A
 46%|████▌     | 102/221 [00:38<00:24,  4.94it/s][A[h264 @ 0x55e4ff58e0c0] mmco: unref short failure

 47%|████▋     | 103/221 [00:38<00:24,  4.76it/s][A
 47%|████▋     | 104/221 [00:38<00:21,  5.39it/s][A
 48%|████▊     | 105/221 [00:39<00:20,  5.69it/s][A
 48%|████▊     | 106/221 [00:39<00:24,  4.70it/s][A
 48%|████▊     | 107/221 [00:39<00:23,  4.89it/s][A
 49%|████▉     | 108/221 [00:40<00:29,  3.80it/s][A
 50%|████▉     | 110/221 [00:40<00:18,  5.86it/s][A
 50%|█████     | 111/221 [00:40<00:17,  6.24it/s][A
 51%|█████     | 112/221 [00:40<00:20,  5.38it/s][A
 52%|█████▏    | 114/221 [00:40<00:17,  6.15it/s][A
 52%|█████▏    | 116/221 [00:40<00:15,  6.99it/s][A
 53%|█████▎    | 118/221 [00:41<00:16,  6.32it/s][A
 54%|█████▍    | 120/221 [00:41<00:13,  7.33it/s][A
 55%|█████▌    | 122/221 [00:41<00:12,  7.92it/s][A
 56%|█████▌    | 123/221 [00:42<00:15,  6.14it/s][A
 56%|█████▌    | 124/221 [00:42<00:14,  6.58it/s][A
 57%|█████▋    | 125/221 [00:43<00:33,  2.83it/s][A
 57%|█████▋    | 127/221 [00:43<00:22,  4.17it/s][A[h264 @ 0x556e545cb3c0] mmco: unref short failure
[h264 @ 0x556e545cb3c0] mmco: unref short failure

 58%|█████▊    | 129/221 [00:43<00:15,  5.78it/s][A
 59%|█████▉    | 131/221 [00:43<00:12,  7.13it/s][A
 61%|██████    | 134/221 [00:45<00:26,  3.26it/s][A
 62%|██████▏   | 136/221 [00:45<00:20,  4.22it/s][A
 62%|██████▏   | 138/221 [00:45<00:15,  5.37it/s][A
 63%|██████▎   | 140/221 [00:45<00:14,  5.43it/s][A
 64%|██████▍   | 142/221 [00:46<00:12,  6.20it/s][A
 65%|██████▌   | 144/221 [00:46<00:15,  4.97it/s][A
 67%|██████▋   | 147/221 [00:46<00:10,  6.99it/s][A
 68%|██████▊   | 150/221 [00:46<00:07,  9.13it/s][A
 69%|██████▉   | 153/221 [00:47<00:05, 11.46it/s][A
 71%|███████   | 156/221 [00:47<00:04, 13.57it/s][A
 71%|███████▏  | 158/221 [00:47<00:04, 14.16it/s][A
 72%|███████▏  | 160/221 [00:47<00:04, 14.12it/s][A
 73%|███████▎  | 162/221 [00:48<00:12,  4.72it/s][A
 74%|███████▍  | 164/221 [00:49<00:11,  4.87it/s][A
 75%|███████▌  | 166/221 [00:49<00:11,  4.94it/s][A
 76%|███████▌  | 168/221 [00:50<00:12,  4.08it/s][A
 76%|███████▋  | 169/221 [00:50<00:11,  4.50it/s][A
 77%|███████▋  | 170/221 [00:50<00:10,  4.94it/s][A
 78%|███████▊  | 172/221 [00:50<00:07,  6.65it/s][A
 79%|███████▊  | 174/221 [00:50<00:08,  5.72it/s][A
 79%|███████▉  | 175/221 [00:51<00:07,  6.07it/s][A
 80%|████████  | 177/221 [00:51<00:07,  5.85it/s][A
 81%|████████  | 179/221 [00:51<00:05,  7.54it/s][A
 82%|████████▏ | 182/221 [00:51<00:03, 10.34it/s][A
 83%|████████▎ | 184/221 [00:51<00:03, 11.11it/s][A
 84%|████████▍ | 186/221 [00:53<00:11,  2.95it/s][A
 85%|████████▌ | 188/221 [00:53<00:08,  3.73it/s][A
 86%|████████▌ | 190/221 [00:54<00:07,  4.37it/s][A[h264 @ 0x556e4ac85d00] mmco: unref short failure
[h264 @ 0x556e4ac85d00] mmco: unref short failure
[h264 @ 0x556e4ac85d00] mmco: unref short failure

 87%|████████▋ | 192/221 [00:54<00:06,  4.45it/s][A
 87%|████████▋ | 193/221 [00:54<00:05,  4.92it/s][A
 88%|████████▊ | 194/221 [00:55<00:06,  4.45it/s][A[h264 @ 0x556e662c3fc0] mmco: unref short failure

 89%|████████▊ | 196/221 [00:55<00:04,  5.99it/s][A
 90%|█████████ | 199/221 [00:55<00:02,  7.51it/s][A
 91%|█████████ | 201/221 [00:55<00:02,  8.88it/s][A
 92%|█████████▏| 203/221 [00:55<00:01, 10.20it/s][A
 93%|█████████▎| 205/221 [00:55<00:01, 10.65it/s][A
 94%|█████████▎| 207/221 [00:55<00:01, 11.59it/s][A 95%|█████████▍| 209/221 [00:56<00:03,  3.73it/s]
[h264 @ 0x55b7cc40a380] mmco: unref short failure
[h264 @ 0x55b7cc40a380] mmco: unref short failure
[h264 @ 0x55b7cc40a380] mmco: unref short failure
[h264 @ 0x55b7cc40a380] mmco: unref short failure
[h264 @ 0x55e4fea458c0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.78it/s][A
  1%|          | 2/221 [00:00<00:57,  3.78it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.78it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.78it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.78it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.78it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.78it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.78it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.78it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.78it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.78it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.78it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.79it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.79it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.79it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.78it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.78it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.78it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.78it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.78it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.78it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.78it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.78it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.78it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.78it/s][A
 19%|█▉        | 43/221 [00:11<00:47,  3.78it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.78it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.78it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.78it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.78it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.78it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.78it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.78it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.78it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:14<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.78it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.78it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.78it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.78it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.78it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.78it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.78it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.78it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:33,  3.78it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:28<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.78it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.78it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.78it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.78it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.78it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.78it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 134/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.78it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.78it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.78it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.78it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.78it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.78it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.78it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.78it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.78it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.78it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.78it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.78it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.78it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.78it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.78it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.78it/s][A
 76%|███████▌  | 168/221 [00:44<00:14,  3.78it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.78it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.78it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.78it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.78it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.78it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.78it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.78it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.78it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.78it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.78it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.78it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.78it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.77it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.77it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.78it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 193/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [00:56<00:02,  3.78it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.78it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.78it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.78it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.78it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.78it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.78it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.78it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:24,  9.10it/s][A
  1%|          | 2/221 [00:00<00:36,  6.06it/s][A
  1%|▏         | 3/221 [00:00<00:37,  5.82it/s][A
  2%|▏         | 4/221 [00:00<00:33,  6.56it/s][A
  2%|▏         | 5/221 [00:00<00:35,  6.07it/s][A
  3%|▎         | 6/221 [00:00<00:32,  6.72it/s][A
  3%|▎         | 7/221 [00:01<00:41,  5.18it/s][A
  4%|▎         | 8/221 [00:01<00:57,  3.69it/s][A
  4%|▍         | 9/221 [00:01<00:54,  3.88it/s][A
  5%|▍         | 10/221 [00:02<01:19,  2.66it/s][A
  5%|▍         | 11/221 [00:02<01:08,  3.09it/s][A
  5%|▌         | 12/221 [00:02<00:57,  3.66it/s][A
  6%|▌         | 13/221 [00:03<01:31,  2.28it/s][A
  6%|▋         | 14/221 [00:03<01:09,  2.96it/s][A
  7%|▋         | 15/221 [00:04<01:01,  3.35it/s][A
  7%|▋         | 16/221 [00:04<01:03,  3.23it/s][A
  8%|▊         | 17/221 [00:04<01:11,  2.85it/s][A
  8%|▊         | 18/221 [00:05<01:11,  2.85it/s][A
  9%|▊         | 19/221 [00:05<01:07,  2.98it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.75it/s][A
 10%|▉         | 21/221 [00:05<00:50,  3.93it/s][A
 10%|▉         | 22/221 [00:05<00:42,  4.63it/s][A
 10%|█         | 23/221 [00:05<00:35,  5.50it/s][A
 11%|█         | 24/221 [00:06<00:38,  5.12it/s][A
 11%|█▏        | 25/221 [00:06<00:39,  5.00it/s][A
 12%|█▏        | 26/221 [00:06<00:42,  4.59it/s][A
 12%|█▏        | 27/221 [00:06<00:41,  4.68it/s][A
 13%|█▎        | 28/221 [00:07<00:45,  4.24it/s][A
 13%|█▎        | 29/221 [00:07<00:44,  4.33it/s][A
 14%|█▎        | 30/221 [00:07<00:40,  4.69it/s][A
 14%|█▍        | 31/221 [00:07<00:38,  4.95it/s][A
 14%|█▍        | 32/221 [00:07<00:36,  5.12it/s][A
 15%|█▍        | 33/221 [00:08<00:37,  4.96it/s][A
 15%|█▌        | 34/221 [00:08<00:42,  4.38it/s][A
 16%|█▌        | 35/221 [00:08<00:54,  3.40it/s][A
 16%|█▋        | 36/221 [00:09<00:50,  3.65it/s][A
 17%|█▋        | 37/221 [00:09<00:50,  3.63it/s][A
 17%|█▋        | 38/221 [00:09<00:46,  3.92it/s][A
 18%|█▊        | 39/221 [00:09<00:45,  3.96it/s][A
 18%|█▊        | 40/221 [00:10<00:56,  3.18it/s][A
 19%|█▊        | 41/221 [00:10<00:46,  3.86it/s][A
 19%|█▉        | 42/221 [00:10<00:42,  4.25it/s][A
 19%|█▉        | 43/221 [00:10<00:42,  4.19it/s][A
 20%|██        | 45/221 [00:11<00:34,  5.13it/s][A
 21%|██        | 46/221 [00:11<00:41,  4.24it/s][A
 21%|██▏       | 47/221 [00:11<00:43,  3.97it/s][A
 22%|██▏       | 48/221 [00:12<00:43,  3.97it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.80it/s][A
 23%|██▎       | 50/221 [00:12<00:46,  3.69it/s][A
 23%|██▎       | 51/221 [00:12<00:37,  4.50it/s][A
 24%|██▎       | 52/221 [00:12<00:36,  4.64it/s][A
 24%|██▍       | 53/221 [00:13<00:30,  5.43it/s][A
 24%|██▍       | 54/221 [00:13<00:39,  4.25it/s][A
 25%|██▍       | 55/221 [00:13<00:35,  4.68it/s][A
 25%|██▌       | 56/221 [00:13<00:34,  4.72it/s][A
 26%|██▌       | 57/221 [00:14<00:36,  4.45it/s][A
 26%|██▌       | 58/221 [00:14<00:47,  3.46it/s][A
 27%|██▋       | 59/221 [00:14<00:45,  3.57it/s][A
 28%|██▊       | 61/221 [00:15<00:36,  4.43it/s][A
 28%|██▊       | 62/221 [00:15<00:34,  4.63it/s][A
 29%|██▉       | 64/221 [00:15<00:30,  5.22it/s][A
 29%|██▉       | 65/221 [00:15<00:27,  5.73it/s][A
 30%|██▉       | 66/221 [00:16<00:37,  4.15it/s][A
 30%|███       | 67/221 [00:16<00:56,  2.71it/s][A
 31%|███       | 68/221 [00:17<00:47,  3.21it/s][A
 31%|███       | 69/221 [00:17<00:56,  2.71it/s][A
 32%|███▏      | 70/221 [00:17<00:47,  3.21it/s][A
 32%|███▏      | 71/221 [00:18<00:47,  3.19it/s][A
 33%|███▎      | 72/221 [00:18<00:51,  2.91it/s][A
 33%|███▎      | 73/221 [00:18<00:41,  3.54it/s][A
 33%|███▎      | 74/221 [00:18<00:38,  3.84it/s][A
 34%|███▍      | 75/221 [00:19<00:36,  3.99it/s][A
 34%|███▍      | 76/221 [00:19<00:35,  4.11it/s][A
 35%|███▍      | 77/221 [00:19<00:31,  4.50it/s][A
 35%|███▌      | 78/221 [00:19<00:28,  4.95it/s][A
 36%|███▌      | 79/221 [00:20<00:52,  2.72it/s][A
 36%|███▌      | 80/221 [00:20<00:45,  3.12it/s][A
 37%|███▋      | 81/221 [00:20<00:39,  3.50it/s][A
 37%|███▋      | 82/221 [00:21<00:45,  3.06it/s][A
 38%|███▊      | 83/221 [00:21<00:41,  3.32it/s][A
 38%|███▊      | 84/221 [00:21<00:37,  3.63it/s][A
 38%|███▊      | 85/221 [00:21<00:33,  4.01it/s][A
 39%|███▉      | 86/221 [00:22<00:32,  4.21it/s][A
 39%|███▉      | 87/221 [00:22<00:33,  3.96it/s][A
 40%|███▉      | 88/221 [00:22<00:42,  3.14it/s][A
 40%|████      | 89/221 [00:23<00:51,  2.56it/s][A
 41%|████      | 90/221 [00:23<00:45,  2.86it/s][A
 41%|████      | 91/221 [00:23<00:37,  3.44it/s][A
 42%|████▏     | 92/221 [00:24<00:39,  3.30it/s][A
 42%|████▏     | 93/221 [00:25<01:04,  1.99it/s][A
 43%|████▎     | 94/221 [00:25<01:02,  2.03it/s][A
 43%|████▎     | 95/221 [00:25<00:51,  2.45it/s][A
 43%|████▎     | 96/221 [00:25<00:41,  2.99it/s][A
 44%|████▍     | 97/221 [00:26<00:35,  3.47it/s][A
 44%|████▍     | 98/221 [00:26<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:33,  3.65it/s][A
 45%|████▌     | 100/221 [00:26<00:32,  3.69it/s][A
 46%|████▌     | 101/221 [00:27<00:42,  2.80it/s][A
 46%|████▌     | 102/221 [00:27<00:46,  2.57it/s][A
 47%|████▋     | 103/221 [00:28<00:40,  2.94it/s][A
 47%|████▋     | 104/221 [00:28<00:37,  3.11it/s][A
 48%|████▊     | 105/221 [00:28<00:32,  3.56it/s][A
 48%|████▊     | 106/221 [00:28<00:32,  3.52it/s][A
 48%|████▊     | 107/221 [00:29<00:30,  3.70it/s][A
 49%|████▉     | 108/221 [00:29<00:28,  4.01it/s][A
 49%|████▉     | 109/221 [00:29<00:26,  4.27it/s][A
 50%|████▉     | 110/221 [00:29<00:27,  3.98it/s][A
 50%|█████     | 111/221 [00:30<00:31,  3.52it/s][A
 51%|█████     | 112/221 [00:30<00:30,  3.62it/s][A
 51%|█████     | 113/221 [00:30<00:32,  3.30it/s][A
 52%|█████▏    | 114/221 [00:30<00:26,  4.10it/s][A
 52%|█████▏    | 115/221 [00:31<00:25,  4.15it/s][A
 52%|█████▏    | 116/221 [00:31<00:30,  3.39it/s][A
 53%|█████▎    | 117/221 [00:31<00:27,  3.74it/s][A
 53%|█████▎    | 118/221 [00:31<00:26,  3.95it/s][A
 54%|█████▍    | 119/221 [00:32<00:39,  2.61it/s][A
 54%|█████▍    | 120/221 [00:32<00:34,  2.95it/s][A
 55%|█████▌    | 122/221 [00:33<00:25,  3.91it/s][A
 56%|█████▌    | 123/221 [00:33<00:25,  3.78it/s][A
 56%|█████▌    | 124/221 [00:33<00:22,  4.24it/s][A
 57%|█████▋    | 125/221 [00:33<00:26,  3.63it/s][A
 57%|█████▋    | 126/221 [00:34<00:27,  3.43it/s][A
 57%|█████▋    | 127/221 [00:34<00:28,  3.28it/s][A
 58%|█████▊    | 128/221 [00:34<00:27,  3.43it/s][A
 58%|█████▊    | 129/221 [00:35<00:25,  3.54it/s][A
 59%|█████▉    | 130/221 [00:35<00:22,  3.99it/s][A
 60%|██████    | 133/221 [00:35<00:16,  5.36it/s][A
 61%|██████    | 134/221 [00:35<00:16,  5.36it/s][A
 61%|██████    | 135/221 [00:36<00:16,  5.34it/s][A
 62%|██████▏   | 136/221 [00:36<00:17,  4.90it/s][A
 62%|██████▏   | 137/221 [00:36<00:16,  5.23it/s][A
 62%|██████▏   | 138/221 [00:36<00:17,  4.74it/s][A
 63%|██████▎   | 139/221 [00:37<00:21,  3.82it/s][A
 63%|██████▎   | 140/221 [00:37<00:20,  3.97it/s][A
 64%|██████▍   | 141/221 [00:37<00:19,  4.06it/s][A
 64%|██████▍   | 142/221 [00:37<00:18,  4.28it/s][A
 65%|██████▍   | 143/221 [00:38<00:24,  3.17it/s][A
 65%|██████▌   | 144/221 [00:38<00:27,  2.80it/s][A
 66%|██████▌   | 145/221 [00:38<00:21,  3.50it/s][A
 66%|██████▌   | 146/221 [00:39<00:17,  4.24it/s][A
 67%|██████▋   | 147/221 [00:39<00:17,  4.18it/s][A
 67%|██████▋   | 148/221 [00:39<00:20,  3.62it/s][A
 67%|██████▋   | 149/221 [00:39<00:16,  4.30it/s][A
 68%|██████▊   | 150/221 [00:40<00:17,  4.06it/s][A
 68%|██████▊   | 151/221 [00:40<00:19,  3.58it/s][A
 69%|██████▉   | 152/221 [00:41<00:25,  2.68it/s][A
 69%|██████▉   | 153/221 [00:41<00:21,  3.18it/s][A
 70%|██████▉   | 154/221 [00:41<00:19,  3.51it/s][A
 70%|███████   | 155/221 [00:41<00:16,  3.97it/s][A
 71%|███████   | 156/221 [00:42<00:19,  3.29it/s][A
 71%|███████   | 157/221 [00:42<00:18,  3.51it/s][A
 71%|███████▏  | 158/221 [00:42<00:17,  3.51it/s][A
 72%|███████▏  | 159/221 [00:42<00:17,  3.64it/s][A
 72%|███████▏  | 160/221 [00:43<00:16,  3.81it/s][A
 73%|███████▎  | 161/221 [00:43<00:19,  3.15it/s][A
 73%|███████▎  | 162/221 [00:43<00:17,  3.36it/s][A
 74%|███████▍  | 163/221 [00:43<00:16,  3.52it/s][A
 74%|███████▍  | 164/221 [00:44<00:15,  3.65it/s][A
 75%|███████▍  | 165/221 [00:44<00:13,  4.09it/s][A
 75%|███████▌  | 166/221 [00:44<00:14,  3.90it/s][A
 76%|███████▌  | 167/221 [00:44<00:11,  4.62it/s][A
 76%|███████▌  | 168/221 [00:45<00:14,  3.57it/s][A
 76%|███████▋  | 169/221 [00:45<00:13,  3.73it/s][A
 77%|███████▋  | 170/221 [00:46<00:18,  2.83it/s][A
 77%|███████▋  | 171/221 [00:46<00:14,  3.56it/s][A
 78%|███████▊  | 172/221 [00:46<00:12,  4.02it/s][A
 78%|███████▊  | 173/221 [00:46<00:13,  3.67it/s][A
 79%|███████▊  | 174/221 [00:47<00:15,  3.00it/s][A
 79%|███████▉  | 175/221 [00:47<00:15,  3.01it/s][A
 80%|███████▉  | 176/221 [00:47<00:13,  3.34it/s][A
 80%|████████  | 177/221 [00:47<00:11,  3.94it/s][A
 81%|████████  | 178/221 [00:47<00:09,  4.66it/s][A
 81%|████████  | 179/221 [00:48<00:09,  4.54it/s][A
 81%|████████▏ | 180/221 [00:48<00:08,  4.89it/s][A
 82%|████████▏ | 181/221 [00:48<00:10,  3.75it/s][A
 82%|████████▏ | 182/221 [00:49<00:10,  3.80it/s][A
 83%|████████▎ | 183/221 [00:49<00:10,  3.71it/s][A
 83%|████████▎ | 184/221 [00:49<00:08,  4.36it/s][A
 84%|████████▎ | 185/221 [00:49<00:07,  4.51it/s][A
 84%|████████▍ | 186/221 [00:50<00:09,  3.58it/s][A
 85%|████████▍ | 187/221 [00:50<00:08,  3.90it/s][A
 85%|████████▌ | 188/221 [00:50<00:08,  3.91it/s][A
 86%|████████▌ | 189/221 [00:50<00:08,  3.70it/s][A
 86%|████████▌ | 190/221 [00:51<00:10,  2.98it/s][A
 86%|████████▋ | 191/221 [00:51<00:08,  3.63it/s][A
 87%|████████▋ | 192/221 [00:51<00:10,  2.86it/s][A
 87%|████████▋ | 193/221 [00:52<00:08,  3.34it/s][A
 88%|████████▊ | 194/221 [00:52<00:09,  2.99it/s][A
 88%|████████▊ | 195/221 [00:52<00:08,  3.00it/s][A
 89%|████████▊ | 196/221 [00:53<00:08,  2.93it/s][A
 89%|████████▉ | 197/221 [00:53<00:06,  3.62it/s][A
 90%|████████▉ | 198/221 [00:54<00:09,  2.52it/s][A
 90%|█████████ | 199/221 [00:54<00:07,  2.82it/s][A
 90%|█████████ | 200/221 [00:54<00:07,  2.80it/s][A
 91%|█████████ | 201/221 [00:54<00:06,  2.90it/s][A
 91%|█████████▏| 202/221 [00:55<00:06,  2.75it/s][A
 92%|█████████▏| 203/221 [00:55<00:05,  3.48it/s][A
 92%|█████████▏| 204/221 [00:56<00:06,  2.57it/s][A
 93%|█████████▎| 205/221 [00:56<00:04,  3.23it/s][A
 93%|█████████▎| 206/221 [00:56<00:04,  3.14it/s][A
 94%|█████████▎| 207/221 [00:56<00:04,  3.36it/s][A
 94%|█████████▍| 208/221 [00:56<00:03,  4.07it/s][A
 95%|█████████▍| 209/221 [00:57<00:03,  3.63it/s][A
 95%|█████████▌| 210/221 [00:57<00:02,  3.86it/s][A
 95%|█████████▌| 211/221 [00:57<00:02,  3.45it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  3.59it/s][A
 96%|█████████▋| 213/221 [00:58<00:02,  3.56it/s][A
 97%|█████████▋| 214/221 [00:58<00:02,  3.08it/s][A
 97%|█████████▋| 215/221 [00:59<00:01,  3.36it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  3.17it/s][A
 98%|█████████▊| 217/221 [00:59<00:01,  3.56it/s][A
 99%|█████████▊| 218/221 [01:00<00:00,  3.28it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  3.05it/s][A
100%|█████████▉| 220/221 [01:00<00:00,  3.08it/s][A
100%|██████████| 221/221 [01:01<00:00,  3.19it/s][A100%|██████████| 221/221 [01:01<00:00,  3.62it/s]
09/09/2024 20:51:08 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 999--===========

09/09/2024 20:51:08 - INFO - __main__ -   {'area_r1': 20.5, 'area_recall': '20.5/38.7/50.5', 'area_ravg': 36.5}
09/09/2024 20:51:08 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 999--===========

09/09/2024 20:51:08 - INFO - __main__ -   {'forward_r1': 35.0, 'forward_recall': '35.0/61.0/71.2', 'forward_ravg': 55.7}
09/09/2024 20:51:08 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 999--===========

09/09/2024 20:51:08 - INFO - __main__ -   {'area_video_r1': 41.0, 'area_video_recall': '41.0/70.5/80.0', 'area_video_ravg': 63.8}
09/09/2024 20:51:08 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 999=======

09/09/2024 20:51:08 - INFO - __main__ -   {'area_video_r1': 41.0, 'area_video_recall': '41.0/70.5/80.0', 'area_video_ravg': 63.8}
09/09/2024 20:51:08 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 999--===========

09/09/2024 20:51:08 - INFO - __main__ -   {'area_video_r1': 48.4, 'area_video_recall': '48.4/66.3/72.7', 'area_video_ravg': 62.5, 'area_video_back_r1': 49.5, 'area_video_back_recall': '49.5/72.7/80.0', 'area_video_back_ravg': 67.4}
09/09/2024 20:51:08 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 20:51:08 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 20:51:08 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 999--===========

09/09/2024 20:51:08 - INFO - __main__ -   {'video_r1': 41.4, 'video_recall': '41.4/70.6/80.0', 'video_ravg': 64.0}
09/09/2024 20:51:08 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 20:51:08 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 20:51:08 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 999--===========

09/09/2024 20:51:08 - INFO - __main__ -   {'video_r1': 52.5, 'video_recall': '52.5/74.3/82.0', 'video_ravg': 69.6}
09/09/2024 20:51:08 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 599=======

09/09/2024 20:51:08 - INFO - __main__ -   {'video_r1': 52.7, 'video_recall': '52.7/76.1/82.8', 'video_ravg': 70.6}
09/09/2024 20:51:34 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.5532653331756592, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.026561256498098373, 'loss_ret%tv%ta--finetune_area/loss_area': 1.3225808143615723, 'loss_ret%tv%ta--finetune_area/total_loss': 2.90240740776062}
[h264 @ 0x55e5093f88c0] mmco: unref short failure
[h264 @ 0x55e5093f88c0] mmco: unref short failure
[h264 @ 0x556e5c9fec00] mmco: unref short failure
[h264 @ 0x556e5c9fec00] mmco: unref short failure
 51%|█████▏    | 1000/1945 [5:26:08<33:44:42, 128.55s/it] 51%|█████▏    | 1001/1945 [5:26:12<23:55:04, 91.21s/it]  52%|█████▏    | 1002/1945 [5:26:17<17:05:06, 65.22s/it][h264 @ 0x55e505b45240] mmco: unref short failure
[h264 @ 0x55e505b45240] mmco: unref short failure
[h264 @ 0x55e500f388c0] mmco: unref short failure
[h264 @ 0x55e500f388c0] mmco: unref short failure
 52%|█████▏    | 1003/1945 [5:26:23<12:24:26, 47.42s/it] 52%|█████▏    | 1004/1945 [5:26:29<9:11:39, 35.18s/it] [h264 @ 0x556e532f9e80] mmco: unref short failure
[h264 @ 0x556e532f9e80] mmco: unref short failure
[h264 @ 0x556e6acb3a00] mmco: unref short failure
[h264 @ 0x556e6acb3a00] mmco: unref short failure
[h264 @ 0x556e64d02e80] mmco: unref short failure
[h264 @ 0x556e64d02e80] mmco: unref short failure
[h264 @ 0x55e506b434c0] mmco: unref short failure
 52%|█████▏    | 1005/1945 [5:26:35<6:54:46, 26.48s/it][h264 @ 0x55b7cb286f00] mmco: unref short failure
[h264 @ 0x55b7cb286f00] mmco: unref short failure
[h264 @ 0x55e4fdfef680] mmco: unref short failure
[h264 @ 0x55e4fdfef680] mmco: unref short failure
[h264 @ 0x55b7e8b0bd40] mmco: unref short failure
[h264 @ 0x55b7e8b0bd40] mmco: unref short failure
 52%|█████▏    | 1006/1945 [5:26:43<5:25:36, 20.81s/it] 52%|█████▏    | 1007/1945 [5:26:50<4:23:01, 16.82s/it][h264 @ 0x556e5ffd3f80] mmco: unref short failure
[h264 @ 0x556e5ffd3f80] mmco: unref short failure
 52%|█████▏    | 1008/1945 [5:26:58<3:37:27, 13.92s/it] 52%|█████▏    | 1009/1945 [5:27:05<3:08:18, 12.07s/it][h264 @ 0x556e4fcac800] mmco: unref short failure
[h264 @ 0x556e4fcac800] mmco: unref short failure
[h264 @ 0x55e505a91e00] mmco: unref short failure
 52%|█████▏    | 1010/1945 [5:27:13<2:49:00, 10.85s/it][h264 @ 0x556e4340c140] mmco: unref short failure
[h264 @ 0x556e4280b580] mmco: unref short failure
[h264 @ 0x556e4280b580] mmco: unref short failure
[h264 @ 0x55b7cb3ec7c0] mmco: unref short failure
 52%|█████▏    | 1011/1945 [5:27:22<2:36:34, 10.06s/it][h264 @ 0x556e5ffd4180] mmco: unref short failure
[h264 @ 0x556e5ffd4180] mmco: unref short failure
[h264 @ 0x556e64a8d940] mmco: unref short failure
[h264 @ 0x556e5eca7e00] mmco: unref short failure
[h264 @ 0x556e5eca7e00] mmco: unref short failure
 52%|█████▏    | 1012/1945 [5:27:29<2:23:33,  9.23s/it][h264 @ 0x55b7ceeccd80] mmco: unref short failure
 52%|█████▏    | 1013/1945 [5:27:37<2:17:42,  8.87s/it][h264 @ 0x55e51466bf80] mmco: unref short failure
[h264 @ 0x55e51466bf80] mmco: unref short failure
[h264 @ 0x55e51466bf80] mmco: unref short failure
[h264 @ 0x55e51466bf80] mmco: unref short failure
 52%|█████▏    | 1014/1945 [5:27:45<2:15:14,  8.72s/it][h264 @ 0x55e4fd8d0a40] mmco: unref short failure
[h264 @ 0x55e4fd8d0a40] mmco: unref short failure
 52%|█████▏    | 1015/1945 [5:27:55<2:19:14,  8.98s/it][h264 @ 0x556e61dbea80] mmco: unref short failure
[h264 @ 0x556e61dbea80] mmco: unref short failure
 52%|█████▏    | 1016/1945 [5:28:02<2:10:16,  8.41s/it][h264 @ 0x55b7e2f6f400] mmco: unref short failure
[h264 @ 0x556e5129b740] mmco: unref short failure
 52%|█████▏    | 1017/1945 [5:28:09<2:05:16,  8.10s/it][h264 @ 0x55e4fe35e040] mmco: unref short failure
[h264 @ 0x55e4fe35e040] mmco: unref short failure
 52%|█████▏    | 1018/1945 [5:28:17<2:03:38,  8.00s/it][h264 @ 0x55b7e6957b40] mmco: unref short failure
 52%|█████▏    | 1019/1945 [5:28:25<2:01:21,  7.86s/it][h264 @ 0x55e515fb52c0] mmco: unref short failure
[h264 @ 0x556e5fdf1080] mmco: unref short failure
[h264 @ 0x556e5fdf1080] mmco: unref short failure
[h264 @ 0x55b7e184f340] mmco: unref short failure
[h264 @ 0x55b7e184f340] mmco: unref short failure
[h264 @ 0x55e517a78180] mmco: unref short failure
 52%|█████▏    | 1020/1945 [5:28:39<2:31:42,  9.84s/it][h264 @ 0x55b7e9854a40] mmco: unref short failure
[h264 @ 0x55b7e9854a40] mmco: unref short failure
[h264 @ 0x55b7e9854a40] mmco: unref short failure
[h264 @ 0x55b7e9854a40] mmco: unref short failure
[h264 @ 0x55b7e6485080] mmco: unref short failure
[h264 @ 0x55b7e6485080] mmco: unref short failure
[h264 @ 0x556e4ac85d00] mmco: unref short failure
[h264 @ 0x556e4ac85d00] mmco: unref short failure
[h264 @ 0x556e4ac85d00] mmco: unref short failure
[h264 @ 0x556e4ac85d00] mmco: unref short failure
 52%|█████▏    | 1021/1945 [5:28:47<2:20:51,  9.15s/it][h264 @ 0x556e5f88cb80] mmco: unref short failure
[h264 @ 0x556e5f88cb80] mmco: unref short failure
[h264 @ 0x556e5f88cb80] mmco: unref short failure
[h264 @ 0x556e5f88cb80] mmco: unref short failure
 53%|█████▎    | 1022/1945 [5:28:58<2:30:19,  9.77s/it][h264 @ 0x55b7e10be2c0] mmco: unref short failure
 53%|█████▎    | 1023/1945 [5:29:05<2:17:18,  8.94s/it][h264 @ 0x55b7e62402c0] mmco: unref short failure
[h264 @ 0x55b7e62402c0] mmco: unref short failure
[h264 @ 0x55b7e9854380] mmco: unref short failure
[h264 @ 0x55b7e9854380] mmco: unref short failure
[h264 @ 0x55e519903340] mmco: unref short failure
[h264 @ 0x556e4ca3a140] mmco: unref short failure
 53%|█████▎    | 1024/1945 [5:29:40<4:18:44, 16.86s/it][h264 @ 0x556e59e8e580] mmco: unref short failure
[h264 @ 0x556e59e8e580] mmco: unref short failure
[h264 @ 0x556e6366a080] mmco: unref short failure
[h264 @ 0x556e6366a080] mmco: unref short failure
[h264 @ 0x556e5fdd7940] mmco: unref short failure
[h264 @ 0x55e51ab6e100] mmco: unref short failure
[h264 @ 0x55e4fcd38b40] mmco: unref short failure
[h264 @ 0x556e5777fbc0] mmco: unref short failure
 53%|█████▎    | 1025/1945 [5:29:59<4:28:03, 17.48s/it][h264 @ 0x556e5fcd3980] mmco: unref short failure
[h264 @ 0x556e5fcd3980] mmco: unref short failure
[h264 @ 0x55e503d65880] mmco: unref short failure
[h264 @ 0x556e73cc3e80] mmco: unref short failure
[h264 @ 0x556e4274f8c0] mmco: unref short failure
[h264 @ 0x556e4274f8c0] mmco: unref short failure
 53%|█████▎    | 1026/1945 [5:30:15<4:18:22, 16.87s/it][h264 @ 0x556e6ec1dc80] mmco: unref short failure
[h264 @ 0x556e6ec1dc80] mmco: unref short failure
[h264 @ 0x556e6ec1dc80] mmco: unref short failure
[h264 @ 0x556e6ec1dc80] mmco: unref short failure
[h264 @ 0x556e6ec1dc80] mmco: unref short failure
[h264 @ 0x556e6ec1dc80] mmco: unref short failure
[h264 @ 0x55b7ed6ca340] mmco: unref short failure
[h264 @ 0x55b7ed6ca340] mmco: unref short failure
[h264 @ 0x556e63512b80] mmco: unref short failure
[h264 @ 0x556e59b1b380] mmco: unref short failure
 53%|█████▎    | 1027/1945 [5:30:24<3:45:50, 14.76s/it][h264 @ 0x556e52146180] mmco: unref short failure
[h264 @ 0x556e52146180] mmco: unref short failure
[h264 @ 0x55b7cc3f0ac0] mmco: unref short failure
[h264 @ 0x55b7cc3f0ac0] mmco: unref short failure
[h264 @ 0x55e507bbc240] mmco: unref short failure
[h264 @ 0x55b7eab14cc0] mmco: unref short failure
 53%|█████▎    | 1028/1945 [5:30:45<4:14:27, 16.65s/it] 53%|█████▎    | 1029/1945 [5:30:54<3:35:11, 14.10s/it][h264 @ 0x55b7db876180] mmco: unref short failure
[h264 @ 0x55b7db876180] mmco: unref short failure
[h264 @ 0x55e4fea458c0] mmco: unref short failure
[h264 @ 0x55e4fea458c0] mmco: unref short failure
 53%|█████▎    | 1030/1945 [5:31:02<3:07:36, 12.30s/it][h264 @ 0x556e53758680] mmco: unref short failure
 53%|█████▎    | 1031/1945 [5:31:09<2:43:07, 10.71s/it][h264 @ 0x556e64a36a40] mmco: unref short failure
[h264 @ 0x556e64a36a40] mmco: unref short failure
[h264 @ 0x556e5ede5480] mmco: unref short failure
[h264 @ 0x556e5ede5480] mmco: unref short failure
[h264 @ 0x556e64a36a40] mmco: unref short failure
[h264 @ 0x55e4fd7d6280] mmco: unref short failure
[h264 @ 0x556e60c7a700] mmco: unref short failure
[h264 @ 0x556e60c7a700] mmco: unref short failure
[h264 @ 0x556e60c7a700] mmco: unref short failure
[h264 @ 0x556e60c7a700] mmco: unref short failure
[h264 @ 0x556e602993c0] mmco: unref short failure
[h264 @ 0x556e456a9200] mmco: unref short failure
[h264 @ 0x556e456a9200] mmco: unref short failure
[h264 @ 0x55b7d05fa400] mmco: unref short failure
[h264 @ 0x55b7d05fa400] mmco: unref short failure
[h264 @ 0x556e6855ae00] mmco: unref short failure
[h264 @ 0x556e570ea740] mmco: unref short failure
[h264 @ 0x556e570ea740] mmco: unref short failure
 53%|█████▎    | 1032/1945 [5:31:49<4:57:04, 19.52s/it][h264 @ 0x556e5be91fc0] mmco: unref short failure
[h264 @ 0x556e5be91fc0] mmco: unref short failure
[h264 @ 0x556e5be91fc0] mmco: unref short failure
[h264 @ 0x556e5be91fc0] mmco: unref short failure
[h264 @ 0x55b7d66f3ec0] mmco: unref short failure
[h264 @ 0x55b7d66f3ec0] mmco: unref short failure
[h264 @ 0x55e506d59280] mmco: unref short failure
 53%|█████▎    | 1033/1945 [5:32:03<4:31:29, 17.86s/it][h264 @ 0x55b7db875b00] mmco: unref short failure
[h264 @ 0x55b7e6b806c0] mmco: unref short failure
[h264 @ 0x55b7e6b806c0] mmco: unref short failure
[h264 @ 0x556e5713d3c0] mmco: unref short failure
[h264 @ 0x556e5713d3c0] mmco: unref short failure
[h264 @ 0x556e5713d3c0] mmco: unref short failure
[h264 @ 0x556e5713d3c0] mmco: unref short failure
[h264 @ 0x556e5713d3c0] mmco: unref short failure
[h264 @ 0x556e5713d3c0] mmco: unref short failure
[h264 @ 0x556e5713d3c0] mmco: unref short failure
[h264 @ 0x556e5713d3c0] mmco: unref short failure
[h264 @ 0x55b7cc374f40] mmco: unref short failure
[h264 @ 0x556e555112c0] mmco: unref short failure
[h264 @ 0x55b7ebf543c0] mmco: unref short failure
[h264 @ 0x55b7ebf543c0] mmco: unref short failure
 53%|█████▎    | 1034/1945 [5:32:18<4:19:54, 17.12s/it][h264 @ 0x556e650c2240] mmco: unref short failure
[h264 @ 0x556e650c2240] mmco: unref short failure
[h264 @ 0x556e4778ca80] mmco: unref short failure
[h264 @ 0x556e4778ca80] mmco: unref short failure
[h264 @ 0x556e4778ca80] mmco: unref short failure
[h264 @ 0x556e4778ca80] mmco: unref short failure
[h264 @ 0x55e4fdae0b00] mmco: unref short failure
[h264 @ 0x55e4fdae0b00] mmco: unref short failure
[h264 @ 0x556e4778ca80] mmco: unref short failure
[h264 @ 0x556e4778ca80] mmco: unref short failure
[h264 @ 0x556e4778ca80] mmco: unref short failure
[h264 @ 0x556e4778ca80] mmco: unref short failure
[h264 @ 0x556e4778ca80] mmco: unref short failure
[h264 @ 0x556e4778ca80] mmco: unref short failure
[h264 @ 0x556e4778ca80] mmco: unref short failure
[h264 @ 0x556e4778ca80] mmco: unref short failure
[h264 @ 0x55e518c6e7c0] mmco: unref short failure
 53%|█████▎    | 1035/1945 [5:32:31<4:01:18, 15.91s/it][h264 @ 0x55e4fe3f5a80] mmco: unref short failure
[h264 @ 0x55e4fe3f5a80] mmco: unref short failure
[h264 @ 0x55e518c6e3c0] mmco: unref short failure
[h264 @ 0x55e518c6e3c0] mmco: unref short failure
[h264 @ 0x556e730a1240] mmco: unref short failure
[h264 @ 0x55e50cac8340] mmco: unref short failure
[h264 @ 0x556e4ac85d00] mmco: unref short failure
[h264 @ 0x556e4ac85d00] mmco: unref short failure
[h264 @ 0x556e44172700] mmco: unref short failure
[h264 @ 0x556e44172700] mmco: unref short failure
[h264 @ 0x556e4e22d7c0] mmco: unref short failure
[h264 @ 0x556e4e22d7c0] mmco: unref short failure
[h264 @ 0x556e4e22d7c0] mmco: unref short failure
 53%|█████▎    | 1036/1945 [5:32:51<4:16:23, 16.92s/it] 53%|█████▎    | 1037/1945 [5:32:58<3:31:14, 13.96s/it][h264 @ 0x556e64b10b40] mmco: unref short failure
[h264 @ 0x55e5067c31c0] mmco: unref short failure
[h264 @ 0x55e5067c31c0] mmco: unref short failure
 53%|█████▎    | 1038/1945 [5:33:07<3:10:57, 12.63s/it] 53%|█████▎    | 1039/1945 [5:33:14<2:45:34, 10.96s/it][h264 @ 0x556e4be7f840] mmco: unref short failure
[h264 @ 0x556e4be7f840] mmco: unref short failure
[h264 @ 0x55e517c96000] mmco: unref short failure
[h264 @ 0x55e511273500] mmco: unref short failure
[h264 @ 0x556e61fa9500] mmco: unref short failure
[h264 @ 0x556e6521b340] mmco: unref short failure
[h264 @ 0x556e6521b340] mmco: unref short failure
[h264 @ 0x556e530ecf00] mmco: unref short failure
[h264 @ 0x55b7e338e740] mmco: unref short failure
[h264 @ 0x55b7e338e740] mmco: unref short failure
 53%|█████▎    | 1040/1945 [5:33:54<4:54:50, 19.55s/it][h264 @ 0x55e506d3dc40] mmco: unref short failure
[h264 @ 0x55e5030b5780] mmco: unref short failure
 54%|█████▎    | 1041/1945 [5:34:08<4:32:44, 18.10s/it][h264 @ 0x55e50e8ca940] mmco: unref short failure
[h264 @ 0x55e50e8ca940] mmco: unref short failure
[h264 @ 0x556e5849a0c0] mmco: unref short failure
[h264 @ 0x55b7ce372740] mmco: unref short failure
 54%|█████▎    | 1042/1945 [5:34:26<4:28:01, 17.81s/it][h264 @ 0x55b7d815bb80] mmco: unref short failure
[h264 @ 0x55b7d815bb80] mmco: unref short failure
[h264 @ 0x55b7d815bb80] mmco: unref short failure
[h264 @ 0x556e572d4800] mmco: unref short failure
[h264 @ 0x556e572d4800] mmco: unref short failure
[h264 @ 0x556e42a88a00] mmco: unref short failure
[h264 @ 0x556e42a88a00] mmco: unref short failure
[h264 @ 0x55b7d2555400] mmco: unref short failure
 54%|█████▎    | 1043/1945 [5:34:37<3:59:02, 15.90s/it] 54%|█████▎    | 1044/1945 [5:34:50<3:44:50, 14.97s/it] 54%|█████▎    | 1045/1945 [5:34:58<3:14:14, 12.95s/it][h264 @ 0x556e56d74d40] mmco: unref short failure
[h264 @ 0x556e56d74d40] mmco: unref short failure
[h264 @ 0x556e5952d840] mmco: unref short failure
[h264 @ 0x55e514193cc0] mmco: unref short failure
[h264 @ 0x55e514193cc0] mmco: unref short failure
[h264 @ 0x55b7dec32b40] mmco: unref short failure
[h264 @ 0x55b7dec32b40] mmco: unref short failure
[h264 @ 0x55b7dec32b40] mmco: unref short failure
[h264 @ 0x55b7dec32b40] mmco: unref short failure
[h264 @ 0x55b7dec32b40] mmco: unref short failure
[h264 @ 0x55b7dec32b40] mmco: unref short failure
[h264 @ 0x55e515fb52c0] mmco: unref short failure
[h264 @ 0x556e59c33200] mmco: unref short failure
[h264 @ 0x55b7e5939180] mmco: unref short failure
[h264 @ 0x55b7d6174700] mmco: unref short failure
[h264 @ 0x55b7d6174700] mmco: unref short failure
[h264 @ 0x55b7eab14cc0] mmco: unref short failure
 54%|█████▍    | 1046/1945 [5:35:21<4:00:27, 16.05s/it][h264 @ 0x556e47451e00] mmco: unref short failure
[h264 @ 0x556e47451e00] mmco: unref short failure
[h264 @ 0x556e47451e00] mmco: unref short failure
[h264 @ 0x556e47451e00] mmco: unref short failure
[h264 @ 0x556e47451e00] mmco: unref short failure
[h264 @ 0x556e47451e00] mmco: unref short failure
 54%|█████▍    | 1047/1945 [5:35:29<3:20:26, 13.39s/it][h264 @ 0x556e647d6380] mmco: unref short failure
[h264 @ 0x556e5e770d80] mmco: unref short failure
[h264 @ 0x556e5e770d80] mmco: unref short failure
[h264 @ 0x55b7cd2d2280] mmco: unref short failure
[h264 @ 0x55b7cd2d2280] mmco: unref short failure
 54%|█████▍    | 1048/1945 [5:35:55<4:19:11, 17.34s/it][h264 @ 0x556e4dc48680] mmco: unref short failure
[h264 @ 0x55b7e65ff500] mmco: unref short failure
[h264 @ 0x556e4337f640] mmco: unref short failure
[h264 @ 0x556e4337f640] mmco: unref short failure
[h264 @ 0x55e50eff22c0] mmco: unref short failure
[h264 @ 0x55e50eff22c0] mmco: unref short failure
 54%|█████▍    | 1049/1945 [5:36:15<4:30:31, 18.12s/it]09/09/2024 21:01:44 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 21:01:44 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e51efed00] mmco: unref short failure
[h264 @ 0x556e51efed00] mmco: unref short failure
[h264 @ 0x55b7e18bd640] mmco: unref short failure
[h264 @ 0x55b7e18bd640] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b7db3c9d40] mmco: unref short failure
[h264 @ 0x55b7db3c9d40] mmco: unref short failure
[h264 @ 0x55b7d02ac980] mmco: unref short failure
[h264 @ 0x55b7d02ac980] mmco: unref short failure
[h264 @ 0x55e50c19fe00] mmco: unref short failure
[h264 @ 0x55e50c19fe00] mmco: unref short failure
[h264 @ 0x55b7cb87d280] mmco: unref short failure
[h264 @ 0x55b7e6a76b00] mmco: unref short failure
[h264 @ 0x55e51b135200] mmco: unref short failure
[h264 @ 0x556e4cefe640] mmco: unref short failure
[h264 @ 0x556e54f3ff80] mmco: unref short failure
[h264 @ 0x556e62050280] mmco: unref short failure
[h264 @ 0x556e62050280] mmco: unref short failure
[h264 @ 0x55b7de26ff40] mmco: unref short failure
[h264 @ 0x55b7de26ff40] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  1%|          | 2/221 [00:00<00:27,  7.92it/s][A
  1%|▏         | 3/221 [00:00<00:29,  7.39it/s][A
  2%|▏         | 5/221 [00:00<00:23,  9.02it/s][A
  3%|▎         | 6/221 [00:00<00:31,  6.83it/s][A
  3%|▎         | 7/221 [00:01<01:12,  2.96it/s][A
  4%|▎         | 8/221 [00:01<01:03,  3.34it/s][A
  4%|▍         | 9/221 [00:02<01:01,  3.46it/s][A
  5%|▍         | 10/221 [00:03<02:13,  1.58it/s][A
  5%|▍         | 11/221 [00:03<01:40,  2.10it/s][A
  5%|▌         | 12/221 [00:03<01:16,  2.74it/s][A
  6%|▌         | 13/221 [00:03<01:07,  3.09it/s][A
  6%|▋         | 14/221 [00:06<03:06,  1.11it/s][A
  7%|▋         | 15/221 [00:06<02:19,  1.48it/s][A
  7%|▋         | 16/221 [00:09<04:56,  1.45s/it][A
  8%|▊         | 17/221 [00:10<03:56,  1.16s/it][A
  8%|▊         | 18/221 [00:10<02:57,  1.14it/s][A
  9%|▊         | 19/221 [00:10<02:13,  1.51it/s][A
  9%|▉         | 20/221 [00:10<01:48,  1.85it/s][A
 10%|▉         | 21/221 [00:11<01:30,  2.20it/s][A
 10%|▉         | 22/221 [00:11<01:19,  2.49it/s][A
 10%|█         | 23/221 [00:11<01:04,  3.05it/s][A
 11%|█         | 24/221 [00:11<00:52,  3.75it/s][A
 11%|█▏        | 25/221 [00:11<00:43,  4.52it/s][A
 12%|█▏        | 26/221 [00:11<00:36,  5.35it/s][A
 12%|█▏        | 27/221 [00:11<00:33,  5.76it/s][A[h264 @ 0x556e567a7340] mmco: unref short failure
[h264 @ 0x556e567a7340] mmco: unref short failure
[h264 @ 0x556e567a7340] mmco: unref short failure
[h264 @ 0x556e567a7340] mmco: unref short failure

 13%|█▎        | 28/221 [00:15<04:02,  1.26s/it][A
 13%|█▎        | 29/221 [00:15<03:02,  1.05it/s][A
 14%|█▎        | 30/221 [00:16<02:15,  1.41it/s][A
 14%|█▍        | 31/221 [00:16<01:40,  1.89it/s][A
 14%|█▍        | 32/221 [00:16<01:43,  1.82it/s][A
 15%|█▌        | 34/221 [00:17<01:07,  2.78it/s][A[h264 @ 0x55b7e4da8d80] mmco: unref short failure
[h264 @ 0x55b7e4da8d80] mmco: unref short failure

 16%|█▌        | 35/221 [00:17<01:01,  3.05it/s][A
 16%|█▋        | 36/221 [00:17<00:56,  3.25it/s][A
 17%|█▋        | 37/221 [00:17<00:53,  3.44it/s][A
 17%|█▋        | 38/221 [00:17<00:44,  4.12it/s][A
 18%|█▊        | 39/221 [00:18<00:42,  4.33it/s][A
 18%|█▊        | 40/221 [00:18<00:36,  4.98it/s][A
 19%|█▊        | 41/221 [00:18<00:30,  5.81it/s][A
 19%|█▉        | 42/221 [00:18<00:31,  5.76it/s][A
 20%|█▉        | 44/221 [00:18<00:24,  7.23it/s][A
[h264 @ 0x55e50964e600] mmco: unref short failure
[h264 @ 0x55e50964e600] mmco: unref short failure
 20%|██        | 45/221 [00:18<00:23,  7.46it/s][A
 21%|██        | 46/221 [00:19<00:25,  6.95it/s][A
 21%|██▏       | 47/221 [00:22<02:59,  1.03s/it][A
 22%|██▏       | 48/221 [00:22<02:19,  1.24it/s][A
 22%|██▏       | 49/221 [00:22<01:51,  1.54it/s][A
 23%|██▎       | 50/221 [00:23<01:29,  1.91it/s][A
 23%|██▎       | 51/221 [00:23<01:16,  2.22it/s][A
 24%|██▎       | 52/221 [00:23<01:07,  2.51it/s][A
 24%|██▍       | 53/221 [00:24<01:16,  2.19it/s][A
 24%|██▍       | 54/221 [00:24<01:00,  2.75it/s][A
 25%|██▍       | 55/221 [00:24<00:49,  3.36it/s][A
 25%|██▌       | 56/221 [00:24<00:43,  3.82it/s][A[h264 @ 0x556e553fba40] mmco: unref short failure

 26%|██▌       | 57/221 [00:24<00:39,  4.17it/s][A
 26%|██▌       | 58/221 [00:25<00:36,  4.43it/s][A
 27%|██▋       | 60/221 [00:25<00:29,  5.46it/s][A
 28%|██▊       | 61/221 [00:25<00:29,  5.40it/s][A
 28%|██▊       | 62/221 [00:25<00:35,  4.54it/s][A
 29%|██▊       | 63/221 [00:26<00:36,  4.36it/s][A
 29%|██▉       | 64/221 [00:26<00:37,  4.19it/s][A
 29%|██▉       | 65/221 [00:26<00:35,  4.40it/s][A
 30%|██▉       | 66/221 [00:26<00:34,  4.55it/s][A
 30%|███       | 67/221 [00:27<00:33,  4.64it/s][A
 31%|███       | 68/221 [00:27<00:40,  3.82it/s][A
 31%|███       | 69/221 [00:27<00:33,  4.56it/s][A
 32%|███▏      | 70/221 [00:27<00:41,  3.65it/s][A
 32%|███▏      | 71/221 [00:28<00:36,  4.12it/s][A
 33%|███▎      | 72/221 [00:28<00:34,  4.31it/s][A
 33%|███▎      | 73/221 [00:28<00:35,  4.19it/s][A
 33%|███▎      | 74/221 [00:28<00:32,  4.48it/s][A
 34%|███▍      | 75/221 [00:29<00:33,  4.34it/s][A
 34%|███▍      | 76/221 [00:29<00:31,  4.61it/s][A
 35%|███▍      | 77/221 [00:29<00:36,  3.98it/s][A[h264 @ 0x55e5175a2f00] mmco: unref short failure
[h264 @ 0x55e5175a2f00] mmco: unref short failure
[h264 @ 0x556e52568d00] mmco: unref short failure

 35%|███▌      | 78/221 [00:34<03:40,  1.54s/it][A
 36%|███▌      | 79/221 [00:34<02:42,  1.15s/it][A
 36%|███▌      | 80/221 [00:34<01:57,  1.20it/s][A
 37%|███▋      | 81/221 [00:34<01:27,  1.60it/s][A
 37%|███▋      | 82/221 [00:35<01:24,  1.65it/s][A
 38%|███▊      | 83/221 [00:35<01:08,  2.01it/s][A
 38%|███▊      | 84/221 [00:35<00:55,  2.48it/s][A
 38%|███▊      | 85/221 [00:36<01:00,  2.27it/s][A
 39%|███▉      | 86/221 [00:36<01:02,  2.15it/s][A
 39%|███▉      | 87/221 [00:36<00:56,  2.36it/s][A
 40%|███▉      | 88/221 [00:37<00:47,  2.83it/s][A
 40%|████      | 89/221 [00:37<00:43,  3.04it/s][A
 41%|████      | 90/221 [00:38<01:12,  1.81it/s][A
 41%|████      | 91/221 [00:38<01:03,  2.05it/s][A
 42%|████▏     | 92/221 [00:39<00:52,  2.46it/s][A
 42%|████▏     | 93/221 [00:40<01:36,  1.33it/s][A
 43%|████▎     | 94/221 [00:40<01:13,  1.72it/s][A
 43%|████▎     | 95/221 [00:41<01:04,  1.96it/s][A
 43%|████▎     | 96/221 [00:41<00:56,  2.22it/s][A
 44%|████▍     | 97/221 [00:41<00:47,  2.62it/s][A
 44%|████▍     | 98/221 [00:41<00:43,  2.82it/s][A
 45%|████▍     | 99/221 [00:42<00:37,  3.28it/s][A
 45%|████▌     | 100/221 [00:42<00:38,  3.10it/s][A
 46%|████▌     | 101/221 [00:42<00:38,  3.10it/s][A
 46%|████▌     | 102/221 [00:43<00:34,  3.44it/s][A
 47%|████▋     | 103/221 [00:43<00:41,  2.85it/s][A
 47%|████▋     | 104/221 [00:43<00:37,  3.14it/s][A
 48%|████▊     | 105/221 [00:43<00:30,  3.82it/s][A
 48%|████▊     | 106/221 [00:44<00:26,  4.42it/s][A
 48%|████▊     | 107/221 [00:44<00:29,  3.90it/s][A
 49%|████▉     | 108/221 [00:44<00:33,  3.35it/s][A
 49%|████▉     | 109/221 [00:45<00:36,  3.09it/s][A[h264 @ 0x55e512207600] mmco: unref short failure
[h264 @ 0x55e512207600] mmco: unref short failure

 50%|█████     | 111/221 [00:45<00:24,  4.44it/s][A
 51%|█████     | 112/221 [00:45<00:26,  4.18it/s][A
 51%|█████     | 113/221 [00:45<00:27,  3.96it/s][A
 52%|█████▏    | 115/221 [00:46<00:21,  4.83it/s][A
 53%|█████▎    | 117/221 [00:46<00:18,  5.58it/s][A
 53%|█████▎    | 118/221 [00:46<00:18,  5.47it/s][A
 54%|█████▍    | 119/221 [00:47<00:24,  4.09it/s][A
 54%|█████▍    | 120/221 [00:47<00:21,  4.69it/s][A
 55%|█████▌    | 122/221 [00:47<00:16,  5.84it/s][A
 56%|█████▌    | 124/221 [00:47<00:16,  5.73it/s][A
 57%|█████▋    | 125/221 [00:47<00:15,  6.04it/s][A
 57%|█████▋    | 126/221 [00:48<00:29,  3.26it/s][A
 57%|█████▋    | 127/221 [00:49<00:28,  3.33it/s][A
 58%|█████▊    | 128/221 [00:49<00:23,  3.94it/s][A
 58%|█████▊    | 129/221 [00:49<00:19,  4.66it/s][A
 59%|█████▉    | 130/221 [00:49<00:17,  5.35it/s][A
 60%|█████▉    | 132/221 [00:49<00:14,  6.27it/s][A
 61%|██████    | 134/221 [00:49<00:11,  7.73it/s][A
 61%|██████    | 135/221 [00:49<00:12,  6.71it/s][A
 62%|██████▏   | 136/221 [00:53<01:12,  1.17it/s][A
 62%|██████▏   | 137/221 [00:53<00:55,  1.51it/s][A
 63%|██████▎   | 139/221 [00:53<00:34,  2.38it/s][A
 64%|██████▍   | 141/221 [00:53<00:27,  2.95it/s][A
 64%|██████▍   | 142/221 [00:53<00:24,  3.28it/s][A
 65%|██████▍   | 143/221 [00:54<00:20,  3.86it/s][A
 65%|██████▌   | 144/221 [00:54<00:19,  4.01it/s][A
 66%|██████▌   | 145/221 [00:54<00:22,  3.38it/s][A
 66%|██████▌   | 146/221 [00:54<00:19,  3.91it/s][A
 67%|██████▋   | 147/221 [00:54<00:16,  4.59it/s][A
 67%|██████▋   | 149/221 [00:55<00:11,  6.16it/s][A
 68%|██████▊   | 150/221 [00:55<00:10,  6.67it/s][A
 69%|██████▉   | 152/221 [00:55<00:08,  8.04it/s][A
 69%|██████▉   | 153/221 [00:55<00:09,  7.14it/s][A
 70%|███████   | 155/221 [00:55<00:07,  8.73it/s][A
 71%|███████   | 156/221 [00:55<00:07,  8.33it/s][A
 71%|███████▏  | 158/221 [00:56<00:06,  9.45it/s][A
 72%|███████▏  | 160/221 [00:56<00:06,  8.98it/s][A
 73%|███████▎  | 162/221 [00:56<00:05, 10.43it/s][A
 74%|███████▍  | 164/221 [00:57<00:17,  3.35it/s][A
 75%|███████▍  | 165/221 [00:58<00:16,  3.44it/s][A
 75%|███████▌  | 166/221 [00:58<00:15,  3.59it/s][A
 76%|███████▌  | 167/221 [00:58<00:13,  3.89it/s][A
 76%|███████▌  | 168/221 [00:58<00:13,  3.95it/s][A
 77%|███████▋  | 170/221 [00:59<00:09,  5.34it/s][A
 77%|███████▋  | 171/221 [00:59<00:15,  3.13it/s][A
 78%|███████▊  | 172/221 [00:59<00:14,  3.44it/s][A
 78%|███████▊  | 173/221 [01:00<00:12,  3.89it/s][A
 79%|███████▉  | 175/221 [01:00<00:08,  5.39it/s][A
 80%|████████  | 177/221 [01:00<00:08,  4.97it/s][A
 81%|████████  | 179/221 [01:00<00:06,  6.32it/s][A
 81%|████████▏ | 180/221 [01:01<00:09,  4.49it/s][A
 82%|████████▏ | 182/221 [01:01<00:06,  6.05it/s][A
 83%|████████▎ | 184/221 [01:01<00:04,  7.66it/s][A
 84%|████████▍ | 186/221 [01:01<00:04,  8.68it/s][A
 85%|████████▌ | 188/221 [01:03<00:11,  2.90it/s][A
 86%|████████▌ | 189/221 [01:03<00:10,  3.04it/s][A
 86%|████████▌ | 190/221 [01:03<00:08,  3.56it/s][A
 86%|████████▋ | 191/221 [01:03<00:07,  4.15it/s][A
 87%|████████▋ | 193/221 [01:04<00:05,  4.82it/s][A
 88%|████████▊ | 195/221 [01:04<00:05,  4.74it/s][A
 89%|████████▊ | 196/221 [01:04<00:04,  5.30it/s][A
 89%|████████▉ | 197/221 [01:05<00:04,  4.90it/s][A
 90%|█████████ | 199/221 [01:05<00:03,  6.97it/s][A
 91%|█████████ | 201/221 [01:05<00:02,  8.98it/s][A[h264 @ 0x55e4fddc46c0] mmco: unref short failure
[h264 @ 0x55e4fddc46c0] mmco: unref short failure

 92%|█████████▏| 203/221 [01:05<00:02,  7.48it/s][A
 93%|█████████▎| 205/221 [01:05<00:01,  8.98it/s][A
 94%|█████████▎| 207/221 [01:05<00:01,  9.94it/s][A
 95%|█████████▍| 209/221 [01:06<00:01, 10.06it/s][A
 95%|█████████▌| 211/221 [01:06<00:00, 11.10it/s][A 96%|█████████▌| 212/221 [01:06<00:02,  3.20it/s]
[h264 @ 0x556e5d3c3fc0] mmco: unref short failure
[h264 @ 0x556e668f73c0] mmco: unref short failure
[h264 @ 0x55b7cf142040] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.78it/s][A
  1%|          | 2/221 [00:00<00:57,  3.78it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.79it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.79it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.79it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.79it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.79it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.78it/s][A
  4%|▍         | 9/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.79it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.79it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.79it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.79it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.79it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:51,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.78it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.78it/s][A
 57%|█████▋    | 125/221 [00:32<00:25,  3.78it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.79it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.79it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.78it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.78it/s][A
 65%|██████▌   | 144/221 [00:37<00:20,  3.78it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.78it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.78it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.78it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.78it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.78it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.78it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 159/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.79it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.79it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.78it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.78it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.78it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.78it/s][A
 76%|███████▌  | 168/221 [00:44<00:14,  3.78it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.79it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.79it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.79it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.79it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.79it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 178/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.79it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.79it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.79it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.79it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.79it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.79it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.79it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.79it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.79it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:51<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.79it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.79it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.79it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.79it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.79it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.79it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.79it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.79it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.79it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.79it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.79it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.79it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.79it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.79it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.79it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.79it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:24,  9.11it/s][A
  1%|          | 2/221 [00:00<00:43,  4.98it/s][A
  1%|▏         | 3/221 [00:00<00:44,  4.95it/s][A
  2%|▏         | 4/221 [00:00<00:37,  5.86it/s][A
  2%|▏         | 5/221 [00:00<00:39,  5.48it/s][A
  3%|▎         | 6/221 [00:01<00:35,  6.13it/s][A
  3%|▎         | 7/221 [00:01<00:43,  4.93it/s][A
  4%|▎         | 8/221 [00:01<01:01,  3.48it/s][A
  4%|▍         | 9/221 [00:01<00:55,  3.80it/s][A
  5%|▍         | 10/221 [00:02<01:18,  2.69it/s][A
  5%|▍         | 11/221 [00:02<01:08,  3.09it/s][A
  5%|▌         | 12/221 [00:02<00:57,  3.67it/s][A
  6%|▌         | 13/221 [00:03<01:33,  2.23it/s][A
  7%|▋         | 15/221 [00:04<01:03,  3.23it/s][A
  7%|▋         | 16/221 [00:04<01:03,  3.21it/s][A
  8%|▊         | 17/221 [00:04<01:09,  2.93it/s][A
  8%|▊         | 18/221 [00:05<01:12,  2.78it/s][A
  9%|▊         | 19/221 [00:05<01:07,  3.01it/s][A
 10%|▉         | 21/221 [00:05<00:50,  3.99it/s][A
 10%|▉         | 22/221 [00:05<00:43,  4.61it/s][A
 11%|█         | 24/221 [00:06<00:37,  5.29it/s][A
 11%|█▏        | 25/221 [00:06<00:37,  5.20it/s][A
 12%|█▏        | 26/221 [00:06<00:40,  4.77it/s][A
 12%|█▏        | 27/221 [00:06<00:40,  4.83it/s][A
 13%|█▎        | 28/221 [00:07<00:45,  4.22it/s][A
 13%|█▎        | 29/221 [00:07<00:44,  4.35it/s][A
 14%|█▎        | 30/221 [00:07<00:40,  4.72it/s][A
 14%|█▍        | 31/221 [00:07<00:40,  4.75it/s][A
 14%|█▍        | 32/221 [00:08<00:40,  4.64it/s][A
 15%|█▍        | 33/221 [00:08<00:41,  4.57it/s][A
 15%|█▌        | 34/221 [00:08<00:45,  4.13it/s][A
 16%|█▌        | 35/221 [00:08<00:55,  3.38it/s][A
 16%|█▋        | 36/221 [00:09<00:50,  3.67it/s][A
 17%|█▋        | 37/221 [00:09<00:47,  3.83it/s][A
 17%|█▋        | 38/221 [00:09<00:45,  4.05it/s][A
 18%|█▊        | 39/221 [00:09<00:45,  3.99it/s][A
 18%|█▊        | 40/221 [00:10<00:56,  3.20it/s][A
 19%|█▊        | 41/221 [00:10<00:45,  3.91it/s][A
 19%|█▉        | 42/221 [00:10<00:41,  4.30it/s][A
 19%|█▉        | 43/221 [00:10<00:42,  4.22it/s][A
 20%|██        | 45/221 [00:11<00:32,  5.47it/s][A
 21%|██        | 46/221 [00:11<00:39,  4.41it/s][A
 21%|██▏       | 47/221 [00:11<00:42,  4.14it/s][A
 22%|██▏       | 48/221 [00:12<00:42,  4.06it/s][A
 22%|██▏       | 49/221 [00:12<00:44,  3.86it/s][A
 23%|██▎       | 50/221 [00:12<00:45,  3.73it/s][A
 24%|██▎       | 52/221 [00:12<00:36,  4.65it/s][A
 24%|██▍       | 53/221 [00:13<00:32,  5.19it/s][A
 24%|██▍       | 54/221 [00:13<00:39,  4.25it/s][A
 25%|██▍       | 55/221 [00:13<00:36,  4.61it/s][A
 25%|██▌       | 56/221 [00:13<00:35,  4.65it/s][A
 26%|██▌       | 57/221 [00:14<00:36,  4.51it/s][A
 26%|██▌       | 58/221 [00:14<00:45,  3.57it/s][A
 27%|██▋       | 59/221 [00:14<00:45,  3.55it/s][A
 28%|██▊       | 61/221 [00:15<00:36,  4.41it/s][A
 28%|██▊       | 62/221 [00:15<00:34,  4.55it/s][A
 29%|██▉       | 64/221 [00:15<00:30,  5.22it/s][A
 29%|██▉       | 65/221 [00:15<00:27,  5.69it/s][A
 30%|██▉       | 66/221 [00:16<00:36,  4.20it/s][A
 30%|███       | 67/221 [00:16<00:55,  2.75it/s][A
 31%|███       | 68/221 [00:17<00:47,  3.23it/s][A
 31%|███       | 69/221 [00:17<00:55,  2.74it/s][A
 32%|███▏      | 70/221 [00:17<00:46,  3.26it/s][A
 32%|███▏      | 71/221 [00:18<00:46,  3.20it/s][A
 33%|███▎      | 72/221 [00:18<00:49,  3.01it/s][A
 33%|███▎      | 73/221 [00:18<00:41,  3.59it/s][A
 33%|███▎      | 74/221 [00:18<00:36,  4.03it/s][A
 34%|███▍      | 75/221 [00:18<00:35,  4.12it/s][A
 34%|███▍      | 76/221 [00:19<00:34,  4.20it/s][A
 35%|███▍      | 77/221 [00:19<00:29,  4.82it/s][A
 35%|███▌      | 78/221 [00:19<00:27,  5.21it/s][A
 36%|███▌      | 79/221 [00:20<00:50,  2.80it/s][A
 36%|███▌      | 80/221 [00:20<00:44,  3.13it/s][A
 37%|███▋      | 81/221 [00:20<00:40,  3.50it/s][A
 37%|███▋      | 82/221 [00:21<00:44,  3.11it/s][A
 38%|███▊      | 83/221 [00:21<00:40,  3.41it/s][A
 38%|███▊      | 84/221 [00:21<00:36,  3.74it/s][A
 38%|███▊      | 85/221 [00:21<00:33,  4.03it/s][A
 39%|███▉      | 86/221 [00:21<00:30,  4.39it/s][A
 39%|███▉      | 87/221 [00:22<00:30,  4.43it/s][A
 40%|███▉      | 88/221 [00:22<00:39,  3.39it/s][A
 40%|████      | 89/221 [00:23<00:47,  2.76it/s][A
 41%|████      | 90/221 [00:23<00:41,  3.15it/s][A
 41%|████      | 91/221 [00:23<00:34,  3.72it/s][A
 42%|████▏     | 92/221 [00:23<00:38,  3.38it/s][A
 42%|████▏     | 93/221 [00:24<01:10,  1.82it/s][A
 43%|████▎     | 94/221 [00:25<01:04,  1.96it/s][A
 43%|████▎     | 95/221 [00:25<00:53,  2.37it/s][A
 43%|████▎     | 96/221 [00:25<00:43,  2.88it/s][A
 44%|████▍     | 97/221 [00:25<00:36,  3.43it/s][A
 44%|████▍     | 98/221 [00:26<00:30,  4.08it/s][A
 45%|████▍     | 99/221 [00:26<00:30,  4.05it/s][A
 45%|████▌     | 100/221 [00:26<00:30,  3.96it/s][A
 46%|████▌     | 101/221 [00:27<00:43,  2.77it/s][A
 46%|████▌     | 102/221 [00:27<00:49,  2.39it/s][A
 47%|████▋     | 103/221 [00:28<00:45,  2.62it/s][A
 47%|████▋     | 104/221 [00:28<00:39,  2.95it/s][A
 48%|████▊     | 105/221 [00:28<00:33,  3.46it/s][A
 48%|████▊     | 106/221 [00:28<00:31,  3.62it/s][A
 48%|████▊     | 107/221 [00:28<00:29,  3.93it/s][A
 49%|████▉     | 108/221 [00:29<00:26,  4.20it/s][A
 49%|████▉     | 109/221 [00:29<00:24,  4.49it/s][A
 50%|████▉     | 110/221 [00:29<00:26,  4.11it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.71it/s][A
 51%|█████     | 112/221 [00:30<00:29,  3.73it/s][A
 51%|█████     | 113/221 [00:30<00:25,  4.27it/s][A
 52%|█████▏    | 115/221 [00:30<00:21,  4.94it/s][A
 52%|█████▏    | 116/221 [00:31<00:26,  3.92it/s][A
 53%|█████▎    | 117/221 [00:31<00:24,  4.21it/s][A
 53%|█████▎    | 118/221 [00:31<00:24,  4.26it/s][A
 54%|█████▍    | 119/221 [00:32<00:38,  2.68it/s][A
 54%|█████▍    | 120/221 [00:32<00:34,  2.96it/s][A
 55%|█████▌    | 122/221 [00:32<00:25,  3.89it/s][A
 56%|█████▌    | 123/221 [00:33<00:26,  3.71it/s][A
 56%|█████▌    | 124/221 [00:33<00:22,  4.25it/s][A
 57%|█████▋    | 125/221 [00:33<00:26,  3.66it/s][A
 57%|█████▋    | 126/221 [00:33<00:28,  3.30it/s][A
 57%|█████▋    | 127/221 [00:34<00:29,  3.16it/s][A
 58%|█████▊    | 128/221 [00:34<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:34<00:27,  3.36it/s][A
 59%|█████▉    | 130/221 [00:35<00:23,  3.86it/s][A
 60%|█████▉    | 132/221 [00:35<00:14,  6.01it/s][A
 60%|██████    | 133/221 [00:35<00:17,  4.93it/s][A
 61%|██████    | 134/221 [00:35<00:17,  5.11it/s][A
 61%|██████    | 135/221 [00:35<00:16,  5.17it/s][A
 62%|██████▏   | 136/221 [00:36<00:17,  4.75it/s][A
 62%|██████▏   | 137/221 [00:36<00:15,  5.33it/s][A
 62%|██████▏   | 138/221 [00:36<00:17,  4.80it/s][A
 63%|██████▎   | 139/221 [00:36<00:22,  3.60it/s][A
 63%|██████▎   | 140/221 [00:37<00:20,  3.86it/s][A
 64%|██████▍   | 141/221 [00:37<00:20,  3.97it/s][A
 64%|██████▍   | 142/221 [00:37<00:18,  4.34it/s][A
 65%|██████▍   | 143/221 [00:38<00:25,  3.05it/s][A
 65%|██████▌   | 144/221 [00:38<00:28,  2.75it/s][A
 66%|██████▌   | 145/221 [00:38<00:22,  3.44it/s][A
 66%|██████▌   | 146/221 [00:38<00:17,  4.23it/s][A
 67%|██████▋   | 147/221 [00:39<00:17,  4.15it/s][A
 67%|██████▋   | 148/221 [00:39<00:20,  3.52it/s][A
 67%|██████▋   | 149/221 [00:39<00:16,  4.25it/s][A
 68%|██████▊   | 150/221 [00:39<00:17,  3.96it/s][A
 68%|██████▊   | 151/221 [00:40<00:20,  3.44it/s][A
 69%|██████▉   | 152/221 [00:40<00:26,  2.56it/s][A
 69%|██████▉   | 153/221 [00:41<00:22,  3.01it/s][A
 70%|██████▉   | 154/221 [00:41<00:19,  3.36it/s][A
 70%|███████   | 155/221 [00:41<00:17,  3.77it/s][A
 71%|███████   | 156/221 [00:41<00:20,  3.17it/s][A
 71%|███████   | 157/221 [00:42<00:19,  3.36it/s][A
 71%|███████▏  | 158/221 [00:42<00:18,  3.40it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.73it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.80it/s][A
 73%|███████▎  | 161/221 [00:43<00:18,  3.21it/s][A
 73%|███████▎  | 162/221 [00:43<00:17,  3.47it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.69it/s][A
 74%|███████▍  | 164/221 [00:44<00:17,  3.30it/s][A
 75%|███████▍  | 165/221 [00:44<00:15,  3.67it/s][A
 75%|███████▌  | 166/221 [00:44<00:15,  3.62it/s][A
 76%|███████▌  | 167/221 [00:44<00:12,  4.33it/s][A
 76%|███████▌  | 168/221 [00:45<00:15,  3.52it/s][A
 76%|███████▋  | 169/221 [00:45<00:13,  3.73it/s][A
 77%|███████▋  | 170/221 [00:45<00:18,  2.78it/s][A
 77%|███████▋  | 171/221 [00:46<00:14,  3.51it/s][A
 78%|███████▊  | 172/221 [00:46<00:12,  4.05it/s][A
 78%|███████▊  | 173/221 [00:46<00:13,  3.60it/s][A
 79%|███████▊  | 174/221 [00:47<00:16,  2.91it/s][A
 79%|███████▉  | 175/221 [00:47<00:15,  3.01it/s][A
 80%|███████▉  | 176/221 [00:47<00:13,  3.33it/s][A
 80%|████████  | 177/221 [00:47<00:11,  3.92it/s][A
 81%|████████  | 178/221 [00:47<00:09,  4.48it/s][A
 81%|████████  | 179/221 [00:48<00:09,  4.42it/s][A
 81%|████████▏ | 180/221 [00:48<00:08,  4.74it/s][A
 82%|████████▏ | 181/221 [00:48<00:10,  3.82it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.72it/s][A
 83%|████████▎ | 183/221 [00:49<00:10,  3.66it/s][A
 83%|████████▎ | 184/221 [00:49<00:08,  4.46it/s][A
 84%|████████▎ | 185/221 [00:49<00:07,  4.68it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.79it/s][A
 85%|████████▍ | 187/221 [00:50<00:08,  4.05it/s][A
 85%|████████▌ | 188/221 [00:50<00:08,  4.05it/s][A
 86%|████████▌ | 189/221 [00:50<00:08,  3.84it/s][A
 86%|████████▌ | 190/221 [00:51<00:09,  3.16it/s][A
 86%|████████▋ | 191/221 [00:51<00:08,  3.73it/s][A
 87%|████████▋ | 192/221 [00:51<00:10,  2.84it/s][A
 87%|████████▋ | 193/221 [00:52<00:08,  3.29it/s][A
 88%|████████▊ | 194/221 [00:52<00:09,  2.97it/s][A
 88%|████████▊ | 195/221 [00:52<00:08,  3.11it/s][A
 89%|████████▊ | 196/221 [00:53<00:08,  2.94it/s][A
 89%|████████▉ | 197/221 [00:53<00:06,  3.65it/s][A
 90%|████████▉ | 198/221 [00:53<00:09,  2.51it/s][A
 90%|█████████ | 199/221 [00:54<00:07,  2.87it/s][A
 90%|█████████ | 200/221 [00:54<00:07,  2.85it/s][A
 91%|█████████ | 201/221 [00:54<00:06,  2.96it/s][A
 91%|█████████▏| 202/221 [00:55<00:06,  2.85it/s][A
 92%|█████████▏| 203/221 [00:55<00:05,  3.56it/s][A
 92%|█████████▏| 204/221 [00:56<00:07,  2.42it/s][A
 93%|█████████▎| 205/221 [00:56<00:05,  3.06it/s][A
 93%|█████████▎| 206/221 [00:56<00:04,  3.09it/s][A
 94%|█████████▎| 207/221 [00:56<00:04,  3.33it/s][A
 94%|█████████▍| 208/221 [00:56<00:03,  4.03it/s][A
 95%|█████████▍| 209/221 [00:57<00:03,  3.45it/s][A
 95%|█████████▌| 210/221 [00:57<00:02,  3.73it/s][A
 95%|█████████▌| 211/221 [00:57<00:02,  3.39it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  3.61it/s][A
 96%|█████████▋| 213/221 [00:58<00:02,  3.66it/s][A
 97%|█████████▋| 214/221 [00:58<00:02,  3.08it/s][A
 97%|█████████▋| 215/221 [00:59<00:01,  3.22it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  3.05it/s][A
 98%|█████████▊| 217/221 [00:59<00:01,  3.44it/s][A
 99%|█████████▊| 218/221 [00:59<00:00,  3.28it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  2.98it/s][A
100%|█████████▉| 220/221 [01:00<00:00,  3.00it/s][A
100%|██████████| 221/221 [01:01<00:00,  2.98it/s][A100%|██████████| 221/221 [01:01<00:00,  3.62it/s]
09/09/2024 21:07:31 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 1049--===========

09/09/2024 21:07:31 - INFO - __main__ -   {'area_r1': 20.7, 'area_recall': '20.7/39.3/51.5', 'area_ravg': 37.1}
09/09/2024 21:07:31 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 1049--===========

09/09/2024 21:07:31 - INFO - __main__ -   {'forward_r1': 34.2, 'forward_recall': '34.2/59.7/70.2', 'forward_ravg': 54.7}
09/09/2024 21:07:31 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 1049--===========

09/09/2024 21:07:31 - INFO - __main__ -   {'area_video_r1': 41.2, 'area_video_recall': '41.2/70.0/79.6', 'area_video_ravg': 63.6}
09/09/2024 21:07:31 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 1049=======

09/09/2024 21:07:31 - INFO - __main__ -   {'area_video_r1': 41.2, 'area_video_recall': '41.2/70.0/79.6', 'area_video_ravg': 63.6}
09/09/2024 21:07:31 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 1049--===========

09/09/2024 21:07:31 - INFO - __main__ -   {'area_video_r1': 49.5, 'area_video_recall': '49.5/67.1/73.2', 'area_video_ravg': 63.3, 'area_video_back_r1': 49.1, 'area_video_back_recall': '49.1/72.5/80.1', 'area_video_back_ravg': 67.2}
09/09/2024 21:07:31 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 21:07:31 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 21:07:31 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 1049--===========

09/09/2024 21:07:31 - INFO - __main__ -   {'video_r1': 41.0, 'video_recall': '41.0/70.2/79.5', 'video_ravg': 63.6}
09/09/2024 21:07:31 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 21:07:31 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 21:07:31 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 1049--===========

09/09/2024 21:07:31 - INFO - __main__ -   {'video_r1': 52.9, 'video_recall': '52.9/74.5/82.8', 'video_ravg': 70.1}
09/09/2024 21:07:31 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 1049=======

09/09/2024 21:07:31 - INFO - __main__ -   {'video_r1': 52.9, 'video_recall': '52.9/74.5/82.8', 'video_ravg': 70.1}
09/09/2024 21:08:02 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.5983389616012573, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.023600980639457703, 'loss_ret%tv%ta--finetune_area/loss_area': 1.2089097499847412, 'loss_ret%tv%ta--finetune_area/total_loss': 2.8308496475219727}
 54%|█████▍    | 1050/1945 [5:42:36<31:33:54, 126.97s/it][h264 @ 0x556e62d4afc0] mmco: unref short failure
[h264 @ 0x556e44358140] mmco: unref short failure
[h264 @ 0x556e44358140] mmco: unref short failure
 54%|█████▍    | 1051/1945 [5:42:40<22:22:31, 90.10s/it] [h264 @ 0x55e505162b00] mmco: unref short failure
[h264 @ 0x55e505162b00] mmco: unref short failure
[h264 @ 0x556e553fba40] mmco: unref short failure
[h264 @ 0x556e553fba40] mmco: unref short failure
 54%|█████▍    | 1052/1945 [5:42:45<15:58:46, 64.42s/it][h264 @ 0x55e51c6b6680] mmco: unref short failure
[h264 @ 0x55e51c6b6680] mmco: unref short failure
 54%|█████▍    | 1053/1945 [5:42:50<11:34:08, 46.69s/it][h264 @ 0x556e60716200] mmco: unref short failure
[h264 @ 0x556e60716200] mmco: unref short failure
 54%|█████▍    | 1054/1945 [5:42:57<8:35:33, 34.72s/it] [h264 @ 0x55e503d65180] mmco: unref short failure
[h264 @ 0x55e503d65180] mmco: unref short failure
[h264 @ 0x55e50e7019c0] mmco: unref short failure
[h264 @ 0x55e50e7019c0] mmco: unref short failure
[h264 @ 0x556e5974cd40] mmco: unref short failure
[h264 @ 0x556e5974cd40] mmco: unref short failure
 54%|█████▍    | 1055/1945 [5:43:03<6:29:09, 26.23s/it][h264 @ 0x55e504554dc0] mmco: unref short failure
[h264 @ 0x55e504554dc0] mmco: unref short failure
[h264 @ 0x556e453c5000] mmco: unref short failure
 54%|█████▍    | 1056/1945 [5:43:10<5:01:28, 20.35s/it][h264 @ 0x556e5889d9c0] mmco: unref short failure
[h264 @ 0x556e5889d9c0] mmco: unref short failure
 54%|█████▍    | 1057/1945 [5:43:18<4:05:31, 16.59s/it][h264 @ 0x556e45bd8b40] mmco: unref short failure
[h264 @ 0x556e45bd8b40] mmco: unref short failure
 54%|█████▍    | 1058/1945 [5:43:25<3:23:40, 13.78s/it][h264 @ 0x556e56f2a300] mmco: unref short failure
[h264 @ 0x556e56f2a300] mmco: unref short failure
[h264 @ 0x556e56f2a300] mmco: unref short failure
[h264 @ 0x55e517a93000] mmco: unref short failure
 54%|█████▍    | 1059/1945 [5:43:31<2:50:23, 11.54s/it] 54%|█████▍    | 1060/1945 [5:43:38<2:31:02, 10.24s/it][h264 @ 0x55e4fd923940] mmco: unref short failure
 55%|█████▍    | 1061/1945 [5:43:45<2:13:50,  9.08s/it] 55%|█████▍    | 1062/1945 [5:43:51<2:00:13,  8.17s/it][h264 @ 0x556e65f8e240] mmco: unref short failure
[h264 @ 0x55b7cbf63bc0] mmco: unref short failure
 55%|█████▍    | 1063/1945 [5:43:58<1:55:45,  7.87s/it][h264 @ 0x55b7cca73c40] mmco: unref short failure
[h264 @ 0x55b7cca73c40] mmco: unref short failure
[h264 @ 0x55b7cca73c40] mmco: unref short failure
[h264 @ 0x55b7cca73c40] mmco: unref short failure
[h264 @ 0x556e4aeaab80] mmco: unref short failure
[h264 @ 0x556e4aeaab80] mmco: unref short failure
 55%|█████▍    | 1064/1945 [5:44:05<1:53:08,  7.71s/it] 55%|█████▍    | 1065/1945 [5:44:12<1:50:03,  7.50s/it][h264 @ 0x55b7e89d4b40] mmco: unref short failure
[h264 @ 0x55b7e89d4b40] mmco: unref short failure
 55%|█████▍    | 1066/1945 [5:44:20<1:50:41,  7.56s/it][h264 @ 0x55e51c729d40] mmco: unref short failure
[h264 @ 0x55e51c729d40] mmco: unref short failure
[h264 @ 0x55e51c729d40] mmco: unref short failure
[h264 @ 0x55e51c729d40] mmco: unref short failure
[h264 @ 0x556e49069200] mmco: unref short failure
[h264 @ 0x556e5c1500c0] mmco: unref short failure
[h264 @ 0x556e5c1500c0] mmco: unref short failure
 55%|█████▍    | 1067/1945 [5:44:31<2:07:18,  8.70s/it][h264 @ 0x55e519aaaac0] mmco: unref short failure
[h264 @ 0x55e519aaaac0] mmco: unref short failure
[h264 @ 0x55e519aaaac0] mmco: unref short failure
[h264 @ 0x55e519aaaac0] mmco: unref short failure
[h264 @ 0x556e42d58f00] mmco: unref short failure
[h264 @ 0x556e42d58f00] mmco: unref short failure
[h264 @ 0x556e42d58f00] mmco: unref short failure
[h264 @ 0x556e42d58f00] mmco: unref short failure
 55%|█████▍    | 1068/1945 [5:44:44<2:23:10,  9.80s/it][h264 @ 0x556e6e684980] mmco: unref short failure
[h264 @ 0x556e6e684980] mmco: unref short failure
 55%|█████▍    | 1069/1945 [5:44:50<2:09:15,  8.85s/it][h264 @ 0x55b7cc036340] mmco: unref short failure
[h264 @ 0x55b7cd6d8d40] mmco: unref short failure
[h264 @ 0x55b7cd6d8d40] mmco: unref short failure
[h264 @ 0x55b7cd6d8d40] mmco: unref short failure
 55%|█████▌    | 1070/1945 [5:44:57<2:00:28,  8.26s/it] 55%|█████▌    | 1071/1945 [5:45:07<2:08:59,  8.86s/it][h264 @ 0x55e504554fc0] mmco: unref short failure
[h264 @ 0x55e4fedf1640] mmco: unref short failure
 55%|█████▌    | 1072/1945 [5:45:16<2:09:24,  8.89s/it][h264 @ 0x55b7ce1f90c0] mmco: unref short failure
[h264 @ 0x55b7ce1f90c0] mmco: unref short failure
 55%|█████▌    | 1073/1945 [5:45:35<2:52:02, 11.84s/it][h264 @ 0x55e4fdea9500] mmco: unref short failure
[h264 @ 0x55b7d0f40600] mmco: unref short failure
[h264 @ 0x55b7d0f40600] mmco: unref short failure
[h264 @ 0x55b7d0f40600] mmco: unref short failure
[h264 @ 0x55b7d0f40600] mmco: unref short failure
[h264 @ 0x556e4ac861c0] mmco: unref short failure
[h264 @ 0x556e5dfa8640] mmco: unref short failure
[h264 @ 0x556e5cdb7340] mmco: unref short failure
[h264 @ 0x556e5cdb7340] mmco: unref short failure
[h264 @ 0x556e6f8f9200] mmco: unref short failure
[h264 @ 0x556e4f037040] mmco: unref short failure
[h264 @ 0x556e4f037040] mmco: unref short failure
[h264 @ 0x55e50e8f5c80] mmco: unref short failure
[h264 @ 0x55e4ffa02d40] mmco: unref short failure
[h264 @ 0x55e4ffa02d40] mmco: unref short failure
[h264 @ 0x556e55bab680] mmco: unref short failure
[h264 @ 0x556e55bab680] mmco: unref short failure
 55%|█████▌    | 1074/1945 [5:46:16<4:58:24, 20.56s/it][h264 @ 0x556e5fced3c0] mmco: unref short failure
[h264 @ 0x556e5e590c00] mmco: unref short failure
[h264 @ 0x55b7e6656400] mmco: unref short failure
[h264 @ 0x55e516bb7800] mmco: unref short failure
 55%|█████▌    | 1075/1945 [5:46:29<4:26:53, 18.41s/it][h264 @ 0x556e55bab280] mmco: unref short failure
[h264 @ 0x55b7d08f8700] mmco: unref short failure
[h264 @ 0x55e50f836100] mmco: unref short failure
 55%|█████▌    | 1076/1945 [5:46:46<4:19:31, 17.92s/it][h264 @ 0x556e54324d00] mmco: unref short failure
[h264 @ 0x556e47ff4b40] mmco: unref short failure
 55%|█████▌    | 1077/1945 [5:46:55<3:39:23, 15.17s/it][h264 @ 0x55b7d2e11f00] mmco: unref short failure
[h264 @ 0x55b7eb057fc0] mmco: unref short failure
 55%|█████▌    | 1078/1945 [5:47:07<3:26:11, 14.27s/it][h264 @ 0x55e5134797c0] mmco: unref short failure
[h264 @ 0x55e5134797c0] mmco: unref short failure
[h264 @ 0x55b7e89d46c0] mmco: unref short failure
 55%|█████▌    | 1079/1945 [5:47:18<3:12:47, 13.36s/it][h264 @ 0x556e42c94180] mmco: unref short failure
[h264 @ 0x556e42c94180] mmco: unref short failure
 56%|█████▌    | 1080/1945 [5:47:28<2:56:51, 12.27s/it][h264 @ 0x556e6cf1e940] mmco: unref short failure
[h264 @ 0x55b7d2f46940] mmco: unref short failure
[h264 @ 0x55b7d2f46940] mmco: unref short failure
 56%|█████▌    | 1081/1945 [5:47:42<3:04:09, 12.79s/it][h264 @ 0x55b7e4109540] mmco: unref short failure
[h264 @ 0x55b7e4109540] mmco: unref short failure
[h264 @ 0x556e476a2e00] mmco: unref short failure
[h264 @ 0x55e51717e780] mmco: unref short failure
[h264 @ 0x55e50964e880] mmco: unref short failure
[h264 @ 0x556e55e0f240] mmco: unref short failure
[h264 @ 0x556e55e0f240] mmco: unref short failure
[h264 @ 0x55e51ea7d100] mmco: unref short failure
 56%|█████▌    | 1082/1945 [5:48:22<5:00:06, 20.86s/it][h264 @ 0x556e539b03c0] mmco: unref short failure
[h264 @ 0x55b7d1d87cc0] mmco: unref short failure
[h264 @ 0x55e50a6507c0] mmco: unref short failure
[h264 @ 0x55b7d7b36f00] mmco: unref short failure
 56%|█████▌    | 1083/1945 [5:48:40<4:48:32, 20.08s/it] 56%|█████▌    | 1084/1945 [5:48:56<4:30:29, 18.85s/it][h264 @ 0x556e48675340] mmco: unref short failure
[h264 @ 0x556e48675340] mmco: unref short failure
[h264 @ 0x556e5a4b1400] mmco: unref short failure
 56%|█████▌    | 1085/1945 [5:49:08<4:01:52, 16.88s/it][h264 @ 0x556e558a6580] mmco: unref short failure
[h264 @ 0x55e518cde700] mmco: unref short failure
[h264 @ 0x55e518cde700] mmco: unref short failure
[h264 @ 0x556e5f889880] mmco: unref short failure
[h264 @ 0x55b7dadee480] mmco: unref short failure
 56%|█████▌    | 1086/1945 [5:49:16<3:22:02, 14.11s/it][h264 @ 0x556e7088d440] mmco: unref short failure
[h264 @ 0x556e50393f40] mmco: unref short failure
[h264 @ 0x556e50393f40] mmco: unref short failure
[h264 @ 0x55b7d9289480] mmco: unref short failure
[h264 @ 0x55b7d9289480] mmco: unref short failure
[h264 @ 0x55e508b9e600] mmco: unref short failure
[h264 @ 0x55e508b9e600] mmco: unref short failure
[h264 @ 0x55e50f516f40] mmco: unref short failure
 56%|█████▌    | 1087/1945 [5:49:22<2:48:10, 11.76s/it] 56%|█████▌    | 1088/1945 [5:49:33<2:44:12, 11.50s/it][h264 @ 0x55b7e62f4740] mmco: unref short failure
[h264 @ 0x55b7e62f4740] mmco: unref short failure
[h264 @ 0x556e4d7a1140] mmco: unref short failure
[h264 @ 0x556e4d7a1140] mmco: unref short failure
[h264 @ 0x556e5977f080] mmco: unref short failure
[h264 @ 0x556e5977f080] mmco: unref short failure
 56%|█████▌    | 1089/1945 [5:49:49<3:00:49, 12.67s/it][h264 @ 0x556e6ca48b80] mmco: unref short failure
 56%|█████▌    | 1090/1945 [5:50:19<4:15:06, 17.90s/it][h264 @ 0x556e52997f80] mmco: unref short failure
[h264 @ 0x55e5167b6c40] mmco: unref short failure
[h264 @ 0x55e501d301c0] mmco: unref short failure
[h264 @ 0x55b7e47e0cc0] mmco: unref short failure
[h264 @ 0x55b7e47e0cc0] mmco: unref short failure
[h264 @ 0x556e48b58bc0] mmco: unref short failure
[h264 @ 0x556e48b58bc0] mmco: unref short failure
 56%|█████▌    | 1091/1945 [5:50:45<4:51:50, 20.50s/it][h264 @ 0x556e5286ea00] mmco: unref short failure
[h264 @ 0x55e513c15c00] mmco: unref short failure
[h264 @ 0x55e513c15c00] mmco: unref short failure
[h264 @ 0x55e509f9c780] mmco: unref short failure
[h264 @ 0x55e509f9c780] mmco: unref short failure
 56%|█████▌    | 1092/1945 [5:51:06<4:51:10, 20.48s/it][h264 @ 0x55b7cc41b380] mmco: unref short failure
[h264 @ 0x55b7cc41b380] mmco: unref short failure
[h264 @ 0x556e52d5de00] mmco: unref short failure
[h264 @ 0x556e52d5de00] mmco: unref short failure
[h264 @ 0x55e501e50a00] mmco: unref short failure
 56%|█████▌    | 1093/1945 [5:51:14<3:57:36, 16.73s/it] 56%|█████▌    | 1094/1945 [5:51:21<3:15:44, 13.80s/it][h264 @ 0x556e636f0080] mmco: unref short failure
[h264 @ 0x556e636f0080] mmco: unref short failure
[h264 @ 0x556e636f0080] mmco: unref short failure
[h264 @ 0x556e636f0080] mmco: unref short failure
 56%|█████▋    | 1095/1945 [5:51:28<2:47:32, 11.83s/it][h264 @ 0x556e5d903700] mmco: unref short failure
[h264 @ 0x556e5b266cc0] mmco: unref short failure
[h264 @ 0x556e5b266cc0] mmco: unref short failure
 56%|█████▋    | 1096/1945 [5:51:36<2:30:08, 10.61s/it][h264 @ 0x556e54c26c00] mmco: unref short failure
[h264 @ 0x55e51c14efc0] mmco: unref short failure
[h264 @ 0x55b7dec32940] mmco: unref short failure
[h264 @ 0x556e6b414a00] mmco: unref short failure
[h264 @ 0x55b7cba0d500] mmco: unref short failure
[h264 @ 0x55b7cba0d500] mmco: unref short failure
[h264 @ 0x55b7cba0d500] mmco: unref short failure
[h264 @ 0x55b7cba0d500] mmco: unref short failure
 56%|█████▋    | 1097/1945 [5:52:02<3:35:21, 15.24s/it][h264 @ 0x556e65f31340] mmco: unref short failure
[h264 @ 0x55b7d4b9c840] mmco: unref short failure
[h264 @ 0x55b7d4b9c840] mmco: unref short failure
[h264 @ 0x55b7e2142700] mmco: unref short failure
[h264 @ 0x55b7e2142700] mmco: unref short failure
[h264 @ 0x556e6ef856c0] mmco: unref short failure
[h264 @ 0x556e6ef856c0] mmco: unref short failure
[h264 @ 0x55b7d065d900] mmco: unref short failure
[h264 @ 0x55b7e6111080] mmco: unref short failure
 56%|█████▋    | 1098/1945 [5:52:30<4:30:32, 19.16s/it][h264 @ 0x556e549dd640] Missing reference picture, default is 65562
[h264 @ 0x556e5f9db280] mmco: unref short failure
[h264 @ 0x556e5f9db280] mmco: unref short failure
[h264 @ 0x556e4ca65100] mmco: unref short failure
[h264 @ 0x556e4ca65100] mmco: unref short failure
[h264 @ 0x55b7d544ee00] mmco: unref short failure
[h264 @ 0x55b7d544ee00] mmco: unref short failure
[h264 @ 0x55e5158029c0] mmco: unref short failure
[h264 @ 0x55e5158029c0] mmco: unref short failure
[h264 @ 0x55e5158029c0] mmco: unref short failure
 57%|█████▋    | 1099/1945 [5:52:47<4:22:36, 18.62s/it]09/09/2024 21:18:16 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 21:18:16 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e5c55a140] mmco: unref short failure
[h264 @ 0x556e5c55a140] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e6492ae40] mmco: unref short failure
[h264 @ 0x55e506832bc0] mmco: unref short failure
[h264 @ 0x55b7d61744c0] mmco: unref short failure
[h264 @ 0x556e53ed7ec0] mmco: unref short failure
[h264 @ 0x55b7ec400140] mmco: unref short failure
[h264 @ 0x55b7ec400140] mmco: unref short failure
[h264 @ 0x556e429ea640] mmco: unref short failure
[h264 @ 0x556e429ea640] mmco: unref short failure
[h264 @ 0x556e636f0080] mmco: unref short failure
[h264 @ 0x55b7ddcab000] mmco: unref short failure
[h264 @ 0x556e5347ef80] mmco: unref short failure
[h264 @ 0x556e5347ef80] mmco: unref short failure
[h264 @ 0x55b7ea1c7540] mmco: unref short failure
[h264 @ 0x55b7db392700] mmco: unref short failure
[h264 @ 0x556e5a2a7b40] mmco: unref short failure
[h264 @ 0x556e5a2a7b40] mmco: unref short failure
[h264 @ 0x556e70f582c0] mmco: unref short failure
[h264 @ 0x556e514a5400] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:26,  8.39it/s][A[h264 @ 0x556e4e4e0e40] mmco: unref short failure

  1%|          | 2/221 [00:00<00:38,  5.66it/s][A
  1%|▏         | 3/221 [00:00<00:32,  6.69it/s][A
  2%|▏         | 4/221 [00:00<00:28,  7.56it/s][A
  2%|▏         | 5/221 [00:00<00:26,  8.24it/s][A
  3%|▎         | 6/221 [00:00<00:25,  8.57it/s][A
  3%|▎         | 7/221 [00:01<01:22,  2.61it/s][A
  4%|▎         | 8/221 [00:01<01:09,  3.05it/s][A
  4%|▍         | 9/221 [00:02<01:00,  3.52it/s][A
  5%|▍         | 10/221 [00:03<02:01,  1.73it/s][A
  5%|▍         | 11/221 [00:03<01:36,  2.17it/s][A
  5%|▌         | 12/221 [00:03<01:22,  2.53it/s][A
  6%|▌         | 13/221 [00:04<01:12,  2.87it/s][A
  6%|▋         | 14/221 [00:05<02:30,  1.37it/s][A
  7%|▋         | 15/221 [00:05<01:55,  1.79it/s][A[h264 @ 0x55e51a85da40] mmco: unref short failure
[h264 @ 0x55e51a85da40] mmco: unref short failure

  7%|▋         | 16/221 [00:09<05:19,  1.56s/it][A
  8%|▊         | 17/221 [00:10<04:12,  1.24s/it][A
  8%|▊         | 18/221 [00:10<03:09,  1.07it/s][A
  9%|▊         | 19/221 [00:10<02:20,  1.43it/s][A
  9%|▉         | 20/221 [00:10<01:48,  1.85it/s][A
 10%|▉         | 21/221 [00:10<01:24,  2.37it/s][A
 10%|▉         | 22/221 [00:10<01:05,  3.04it/s][A
 10%|█         | 23/221 [00:11<00:54,  3.62it/s][A
 11%|█         | 24/221 [00:11<00:44,  4.43it/s][A
 11%|█▏        | 25/221 [00:11<00:37,  5.22it/s][A
 12%|█▏        | 27/221 [00:11<00:28,  6.75it/s][A
 13%|█▎        | 28/221 [00:15<03:13,  1.00s/it][A
 13%|█▎        | 29/221 [00:15<02:33,  1.25it/s][A
 14%|█▎        | 30/221 [00:15<02:02,  1.56it/s][A
 14%|█▍        | 31/221 [00:15<01:38,  1.93it/s][A
 14%|█▍        | 32/221 [00:16<01:36,  1.96it/s][A
 15%|█▍        | 33/221 [00:16<01:20,  2.34it/s][A
 15%|█▌        | 34/221 [00:16<01:02,  2.99it/s][A
 16%|█▌        | 35/221 [00:16<00:56,  3.28it/s][A
 16%|█▋        | 36/221 [00:16<00:45,  4.09it/s][A
 17%|█▋        | 37/221 [00:17<00:45,  4.03it/s][A
 17%|█▋        | 38/221 [00:17<00:38,  4.75it/s][A
 18%|█▊        | 39/221 [00:17<00:36,  5.01it/s][A
 18%|█▊        | 40/221 [00:17<00:32,  5.57it/s][A[h264 @ 0x556e602f84c0] mmco: unref short failure
[h264 @ 0x556e602f84c0] mmco: unref short failure

 19%|█▊        | 41/221 [00:17<00:31,  5.74it/s][A
 19%|█▉        | 42/221 [00:17<00:28,  6.35it/s][A
 20%|█▉        | 44/221 [00:18<00:20,  8.65it/s][A
 20%|██        | 45/221 [00:18<00:21,  8.15it/s][A
 21%|██        | 46/221 [00:18<00:22,  7.87it/s][A[h264 @ 0x556e698e1ac0] mmco: unref short failure

 21%|██▏       | 47/221 [00:22<03:14,  1.12s/it][A
 22%|██▏       | 48/221 [00:22<02:24,  1.19it/s][A
 22%|██▏       | 49/221 [00:22<01:52,  1.53it/s][A
 23%|██▎       | 50/221 [00:22<01:25,  2.00it/s][A
 23%|██▎       | 51/221 [00:22<01:06,  2.56it/s][A
 24%|██▎       | 52/221 [00:22<00:53,  3.15it/s][A
 24%|██▍       | 53/221 [00:23<00:59,  2.81it/s][A
 25%|██▍       | 55/221 [00:23<00:40,  4.13it/s][A
 26%|██▌       | 57/221 [00:23<00:30,  5.32it/s][A
 26%|██▌       | 58/221 [00:23<00:30,  5.32it/s][A
 27%|██▋       | 60/221 [00:24<00:26,  6.08it/s][A
 28%|██▊       | 61/221 [00:24<00:28,  5.54it/s][A
 28%|██▊       | 62/221 [00:24<00:27,  5.74it/s][A
 29%|██▊       | 63/221 [00:24<00:27,  5.73it/s][A
 29%|██▉       | 64/221 [00:24<00:24,  6.30it/s][A
 29%|██▉       | 65/221 [00:24<00:25,  6.04it/s][A
 30%|██▉       | 66/221 [00:25<00:28,  5.49it/s][A
 30%|███       | 67/221 [00:25<00:28,  5.32it/s][A
 31%|███       | 68/221 [00:25<00:34,  4.38it/s][A
 32%|███▏      | 70/221 [00:26<00:37,  4.04it/s][A
 32%|███▏      | 71/221 [00:26<00:38,  3.93it/s][A
 33%|███▎      | 72/221 [00:26<00:33,  4.43it/s][A
 33%|███▎      | 73/221 [00:27<00:38,  3.87it/s][A
 33%|███▎      | 74/221 [00:27<00:31,  4.65it/s][A
 34%|███▍      | 75/221 [00:27<00:28,  5.12it/s][A
 34%|███▍      | 76/221 [00:27<00:25,  5.78it/s][A
 35%|███▍      | 77/221 [00:27<00:23,  6.22it/s][A[h264 @ 0x55e51c1226c0] mmco: unref short failure
[h264 @ 0x55e51c1226c0] mmco: unref short failure

 35%|███▌      | 78/221 [00:31<03:18,  1.39s/it][A
 36%|███▌      | 79/221 [00:32<02:30,  1.06s/it][A
 36%|███▌      | 80/221 [00:32<01:50,  1.27it/s][A
 37%|███▋      | 81/221 [00:32<01:21,  1.72it/s][A
 37%|███▋      | 82/221 [00:32<01:14,  1.86it/s][A
 38%|███▊      | 83/221 [00:32<00:56,  2.43it/s][A
 38%|███▊      | 84/221 [00:33<00:43,  3.13it/s][A
 38%|███▊      | 85/221 [00:33<00:48,  2.78it/s][A[h264 @ 0x55b7e8a0f9c0] mmco: unref short failure

 39%|███▉      | 86/221 [00:33<00:45,  2.95it/s][A
 39%|███▉      | 87/221 [00:34<00:45,  2.95it/s][A
 40%|███▉      | 88/221 [00:34<00:42,  3.15it/s][A
 40%|████      | 89/221 [00:34<00:35,  3.72it/s][A
 41%|████      | 90/221 [00:35<00:54,  2.41it/s][A
 41%|████      | 91/221 [00:35<00:41,  3.12it/s][A
 42%|████▏     | 92/221 [00:35<00:34,  3.69it/s][A[h264 @ 0x556e5a459300] mmco: unref short failure

 42%|████▏     | 93/221 [00:37<01:45,  1.22it/s][A
 43%|████▎     | 95/221 [00:37<00:59,  2.12it/s][A
 43%|████▎     | 96/221 [00:37<00:48,  2.57it/s][A[h264 @ 0x55e50891b7c0] mmco: unref short failure

 44%|████▍     | 97/221 [00:38<00:40,  3.07it/s][A
 44%|████▍     | 98/221 [00:38<00:35,  3.48it/s][A
 45%|████▍     | 99/221 [00:38<00:29,  4.19it/s][A
 45%|████▌     | 100/221 [00:38<00:28,  4.19it/s][A
 46%|████▌     | 101/221 [00:38<00:25,  4.65it/s][A
 46%|████▌     | 102/221 [00:38<00:22,  5.26it/s][A
 47%|████▋     | 103/221 [00:39<00:33,  3.57it/s][A
 47%|████▋     | 104/221 [00:39<00:35,  3.31it/s][A
 48%|████▊     | 106/221 [00:39<00:23,  4.83it/s][A
 48%|████▊     | 107/221 [00:40<00:25,  4.42it/s][A
 49%|████▉     | 108/221 [00:40<00:24,  4.53it/s][A
 49%|████▉     | 109/221 [00:40<00:22,  4.98it/s][A
 50%|█████     | 111/221 [00:40<00:17,  6.40it/s][A[h264 @ 0x55e518d5b4c0] mmco: unref short failure

 51%|█████     | 112/221 [00:40<00:18,  5.97it/s][A
 51%|█████     | 113/221 [00:41<00:21,  5.04it/s][A
 52%|█████▏    | 115/221 [00:41<00:18,  5.81it/s][A
 52%|█████▏    | 116/221 [00:41<00:17,  5.83it/s][A
 53%|█████▎    | 117/221 [00:41<00:17,  6.05it/s][A
 54%|█████▍    | 119/221 [00:42<00:19,  5.29it/s][A
 54%|█████▍    | 120/221 [00:42<00:18,  5.49it/s][A
 55%|█████▌    | 122/221 [00:42<00:15,  6.38it/s][A
 56%|█████▌    | 123/221 [00:42<00:14,  6.68it/s][A
 56%|█████▌    | 124/221 [00:43<00:17,  5.41it/s][A
 57%|█████▋    | 125/221 [00:43<00:16,  5.81it/s][A
 57%|█████▋    | 126/221 [00:43<00:30,  3.09it/s][A
 57%|█████▋    | 127/221 [00:44<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:44<00:16,  5.51it/s][A
[h264 @ 0x556e6b414a00] mmco: unref short failure
[h264 @ 0x556e6b414a00] mmco: unref short failure
 59%|█████▉    | 131/221 [00:44<00:13,  6.85it/s][A
 60%|█████▉    | 132/221 [00:44<00:16,  5.55it/s][A
 61%|██████    | 134/221 [00:44<00:12,  7.11it/s][A[h264 @ 0x556e53ada200] mmco: unref short failure

 61%|██████    | 135/221 [00:46<00:46,  1.86it/s][A
 62%|██████▏   | 136/221 [00:47<00:37,  2.25it/s][A
 62%|██████▏   | 137/221 [00:47<00:30,  2.78it/s][A
 63%|██████▎   | 139/221 [00:47<00:19,  4.15it/s][A
 63%|██████▎   | 140/221 [00:47<00:22,  3.67it/s][A
 64%|██████▍   | 141/221 [00:47<00:21,  3.64it/s][A
 64%|██████▍   | 142/221 [00:48<00:18,  4.22it/s][A
 65%|██████▍   | 143/221 [00:48<00:16,  4.84it/s][A
 65%|██████▌   | 144/221 [00:48<00:19,  4.04it/s][A
 66%|██████▌   | 145/221 [00:48<00:18,  4.21it/s][A
 66%|██████▌   | 146/221 [00:48<00:15,  4.97it/s][A
 67%|██████▋   | 148/221 [00:49<00:11,  6.40it/s][A
 68%|██████▊   | 150/221 [00:49<00:10,  7.06it/s][A
 69%|██████▉   | 152/221 [00:49<00:08,  8.56it/s][A
 70%|██████▉   | 154/221 [00:49<00:07,  8.96it/s][A
 70%|███████   | 155/221 [00:49<00:07,  8.41it/s][A
 71%|███████   | 156/221 [00:49<00:07,  8.42it/s][A
 71%|███████   | 157/221 [00:50<00:08,  7.33it/s][A
 71%|███████▏  | 158/221 [00:50<00:10,  6.02it/s][A
 72%|███████▏  | 159/221 [00:50<00:10,  5.86it/s][A
 72%|███████▏  | 160/221 [00:50<00:10,  5.58it/s][A
 73%|███████▎  | 161/221 [00:50<00:10,  5.73it/s][A
 73%|███████▎  | 162/221 [00:52<00:29,  2.02it/s][A
 74%|███████▍  | 163/221 [00:52<00:27,  2.14it/s][A
 74%|███████▍  | 164/221 [00:52<00:23,  2.39it/s][A
 75%|███████▍  | 165/221 [00:53<00:18,  2.99it/s][A
 75%|███████▌  | 166/221 [00:53<00:16,  3.31it/s][A
 76%|███████▌  | 168/221 [00:53<00:10,  4.96it/s][A[h264 @ 0x55e513d49480] mmco: unref short failure

 76%|███████▋  | 169/221 [00:54<00:16,  3.06it/s][A
 77%|███████▋  | 170/221 [00:54<00:14,  3.47it/s][A
 77%|███████▋  | 171/221 [00:54<00:12,  4.16it/s][A
 78%|███████▊  | 172/221 [00:54<00:10,  4.75it/s][A
 79%|███████▊  | 174/221 [00:55<00:11,  4.17it/s][A
 80%|███████▉  | 176/221 [00:55<00:07,  5.91it/s][A
 80%|████████  | 177/221 [00:55<00:09,  4.54it/s][A
 81%|████████  | 178/221 [00:55<00:08,  4.82it/s][A
 81%|████████▏ | 180/221 [00:55<00:06,  6.75it/s][A
 82%|████████▏ | 182/221 [00:56<00:04,  8.60it/s][A
 83%|████████▎ | 184/221 [00:56<00:03,  9.53it/s][A
 84%|████████▍ | 186/221 [00:57<00:09,  3.51it/s][A
 85%|████████▍ | 187/221 [00:57<00:08,  3.87it/s][A
 85%|████████▌ | 188/221 [00:57<00:07,  4.38it/s][A
 86%|████████▌ | 190/221 [00:58<00:06,  5.08it/s][A
 87%|████████▋ | 192/221 [00:58<00:05,  4.99it/s][A
 87%|████████▋ | 193/221 [00:58<00:05,  5.42it/s][A
 88%|████████▊ | 194/221 [00:58<00:05,  5.15it/s][A
 89%|████████▉ | 197/221 [00:58<00:02,  8.20it/s][A
 90%|█████████ | 199/221 [00:59<00:02,  7.77it/s][A
 90%|█████████ | 200/221 [00:59<00:02,  8.04it/s][A
 91%|█████████▏| 202/221 [00:59<00:01,  9.75it/s][A
 92%|█████████▏| 204/221 [00:59<00:01, 11.34it/s][A
 93%|█████████▎| 206/221 [00:59<00:01, 10.67it/s][A
 94%|█████████▍| 208/221 [00:59<00:01, 11.62it/s][A 95%|█████████▍| 209/221 [01:00<00:03,  3.48it/s]
[h264 @ 0x55e50df4f840] mmco: unref short failure
[h264 @ 0x55e518c4eb80] mmco: unref short failure
[h264 @ 0x55e518c4eb80] mmco: unref short failure
[h264 @ 0x55e5007fbd80] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.78it/s][A
  1%|          | 2/221 [00:00<00:57,  3.78it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.78it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.78it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.78it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.78it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.78it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.78it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.78it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.78it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.78it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.78it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.79it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.78it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.78it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.78it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.78it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:51,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.78it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.78it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.78it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.78it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.78it/s][A
 28%|██▊       | 62/221 [00:16<00:42,  3.78it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.78it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:33,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.78it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.78it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.78it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.78it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.78it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 115/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.78it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.78it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.78it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.78it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.78it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.78it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.78it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.78it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.78it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 134/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.78it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.78it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.78it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.78it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.78it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.78it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.78it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.78it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.78it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.78it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.78it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.78it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.78it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.79it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.79it/s][A
 76%|███████▌  | 168/221 [00:44<00:13,  3.79it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.79it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.79it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.79it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.79it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.79it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.78it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.78it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.78it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.79it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.79it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.78it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.79it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.79it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.79it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.79it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.79it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.79it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.79it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.79it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.79it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.79it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▌| 212/221 [00:56<00:02,  3.79it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.79it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.79it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.78it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.79it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.79it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.79it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.79it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:29,  7.38it/s][A
  1%|          | 2/221 [00:00<00:39,  5.56it/s][A
  1%|▏         | 3/221 [00:00<00:38,  5.63it/s][A
  2%|▏         | 4/221 [00:00<00:33,  6.41it/s][A
  2%|▏         | 5/221 [00:00<00:37,  5.73it/s][A
  3%|▎         | 6/221 [00:00<00:33,  6.33it/s][A
  3%|▎         | 7/221 [00:01<00:42,  4.99it/s][A
  4%|▎         | 8/221 [00:01<01:00,  3.51it/s][A
  4%|▍         | 9/221 [00:01<00:58,  3.63it/s][A
  5%|▍         | 10/221 [00:02<01:23,  2.52it/s][A
  5%|▍         | 11/221 [00:02<01:10,  2.97it/s][A
  5%|▌         | 12/221 [00:03<00:58,  3.55it/s][A
  6%|▌         | 13/221 [00:03<01:34,  2.20it/s][A
  7%|▋         | 15/221 [00:04<01:04,  3.20it/s][A
  7%|▋         | 16/221 [00:04<01:03,  3.21it/s][A
  8%|▊         | 17/221 [00:04<01:10,  2.91it/s][A
  8%|▊         | 18/221 [00:05<01:11,  2.84it/s][A
  9%|▊         | 19/221 [00:05<01:06,  3.05it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.77it/s][A
 10%|▉         | 21/221 [00:05<00:49,  4.06it/s][A
 10%|▉         | 22/221 [00:05<00:41,  4.74it/s][A
 11%|█         | 24/221 [00:06<00:35,  5.56it/s][A
 11%|█▏        | 25/221 [00:06<00:36,  5.34it/s][A
 12%|█▏        | 26/221 [00:06<00:41,  4.71it/s][A
 12%|█▏        | 27/221 [00:07<00:46,  4.19it/s][A
 13%|█▎        | 28/221 [00:07<00:49,  3.90it/s][A
 13%|█▎        | 29/221 [00:07<00:47,  4.02it/s][A
 14%|█▎        | 30/221 [00:07<00:42,  4.51it/s][A
 14%|█▍        | 31/221 [00:07<00:39,  4.80it/s][A
 14%|█▍        | 32/221 [00:08<00:40,  4.64it/s][A
 15%|█▍        | 33/221 [00:08<00:40,  4.61it/s][A
 15%|█▌        | 34/221 [00:08<00:44,  4.20it/s][A
 16%|█▌        | 35/221 [00:09<00:54,  3.43it/s][A
 16%|█▋        | 36/221 [00:09<00:49,  3.72it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.81it/s][A
 17%|█▋        | 38/221 [00:09<00:44,  4.09it/s][A
 18%|█▊        | 39/221 [00:09<00:42,  4.28it/s][A
 18%|█▊        | 40/221 [00:10<00:55,  3.26it/s][A
 19%|█▊        | 41/221 [00:10<00:46,  3.85it/s][A
 19%|█▉        | 42/221 [00:10<00:41,  4.29it/s][A
 19%|█▉        | 43/221 [00:11<00:42,  4.19it/s][A
 20%|█▉        | 44/221 [00:11<00:36,  4.81it/s][A
 20%|██        | 45/221 [00:11<00:34,  5.07it/s][A
 21%|██        | 46/221 [00:11<00:43,  4.05it/s][A
 21%|██▏       | 47/221 [00:11<00:45,  3.84it/s][A
 22%|██▏       | 48/221 [00:12<00:44,  3.88it/s][A
 22%|██▏       | 49/221 [00:12<00:47,  3.64it/s][A
 23%|██▎       | 50/221 [00:12<00:47,  3.57it/s][A
 24%|██▎       | 52/221 [00:13<00:36,  4.68it/s][A
 24%|██▍       | 53/221 [00:13<00:32,  5.18it/s][A
 24%|██▍       | 54/221 [00:13<00:38,  4.32it/s][A
 25%|██▍       | 55/221 [00:13<00:33,  4.93it/s][A
 25%|██▌       | 56/221 [00:13<00:31,  5.22it/s][A
 26%|██▌       | 57/221 [00:14<00:33,  4.96it/s][A
 26%|██▌       | 58/221 [00:14<00:47,  3.41it/s][A
 27%|██▋       | 59/221 [00:14<00:45,  3.55it/s][A
 28%|██▊       | 61/221 [00:15<00:34,  4.61it/s][A
 28%|██▊       | 62/221 [00:15<00:33,  4.81it/s][A
 29%|██▉       | 64/221 [00:15<00:28,  5.50it/s][A
 29%|██▉       | 65/221 [00:15<00:25,  6.04it/s][A
 30%|██▉       | 66/221 [00:16<00:35,  4.41it/s][A
 30%|███       | 67/221 [00:16<00:58,  2.63it/s][A
 31%|███       | 68/221 [00:17<00:49,  3.10it/s][A
 31%|███       | 69/221 [00:17<00:55,  2.75it/s][A
 32%|███▏      | 70/221 [00:17<00:46,  3.23it/s][A
 32%|███▏      | 71/221 [00:18<00:45,  3.27it/s][A
 33%|███▎      | 72/221 [00:18<00:50,  2.94it/s][A
 33%|███▎      | 73/221 [00:18<00:41,  3.58it/s][A
 33%|███▎      | 74/221 [00:18<00:36,  4.00it/s][A
 34%|███▍      | 75/221 [00:19<00:35,  4.09it/s][A
 34%|███▍      | 76/221 [00:19<00:35,  4.12it/s][A
 35%|███▍      | 77/221 [00:19<00:30,  4.78it/s][A
 35%|███▌      | 78/221 [00:19<00:27,  5.18it/s][A
 36%|███▌      | 79/221 [00:20<00:49,  2.89it/s][A
 36%|███▌      | 80/221 [00:20<00:43,  3.24it/s][A
 37%|███▋      | 81/221 [00:20<00:38,  3.59it/s][A
 37%|███▋      | 82/221 [00:21<00:42,  3.25it/s][A
 38%|███▊      | 83/221 [00:21<00:39,  3.53it/s][A
 38%|███▊      | 84/221 [00:21<00:36,  3.78it/s][A
 38%|███▊      | 85/221 [00:21<00:34,  3.98it/s][A
 39%|███▉      | 86/221 [00:21<00:31,  4.31it/s][A
 39%|███▉      | 87/221 [00:22<00:31,  4.28it/s][A
 40%|███▉      | 88/221 [00:22<00:39,  3.37it/s][A
 40%|████      | 89/221 [00:23<00:46,  2.87it/s][A
 41%|████      | 90/221 [00:23<00:41,  3.18it/s][A
 41%|████      | 91/221 [00:23<00:34,  3.75it/s][A
 42%|████▏     | 92/221 [00:23<00:36,  3.55it/s][A
 42%|████▏     | 93/221 [00:24<01:10,  1.81it/s][A
 43%|████▎     | 94/221 [00:25<01:09,  1.84it/s][A
 43%|████▎     | 95/221 [00:25<00:56,  2.24it/s][A
 43%|████▎     | 96/221 [00:25<00:45,  2.75it/s][A
 44%|████▍     | 97/221 [00:26<00:37,  3.27it/s][A
 44%|████▍     | 98/221 [00:26<00:33,  3.70it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.73it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.80it/s][A
 46%|████▌     | 101/221 [00:27<00:43,  2.74it/s][A
 46%|████▌     | 102/221 [00:27<00:50,  2.38it/s][A
 47%|████▋     | 103/221 [00:28<00:43,  2.69it/s][A
 47%|████▋     | 104/221 [00:28<00:39,  2.97it/s][A
 48%|████▊     | 105/221 [00:28<00:34,  3.38it/s][A
 48%|████▊     | 106/221 [00:28<00:31,  3.61it/s][A
 48%|████▊     | 107/221 [00:29<00:28,  3.94it/s][A
 49%|████▉     | 108/221 [00:29<00:26,  4.27it/s][A
 49%|████▉     | 109/221 [00:29<00:25,  4.44it/s][A
 50%|████▉     | 110/221 [00:29<00:27,  4.02it/s][A
 50%|█████     | 111/221 [00:30<00:29,  3.77it/s][A
 51%|█████     | 112/221 [00:30<00:29,  3.69it/s][A
 51%|█████     | 113/221 [00:30<00:25,  4.23it/s][A
 52%|█████▏    | 115/221 [00:30<00:22,  4.80it/s][A
 52%|█████▏    | 116/221 [00:31<00:26,  4.03it/s][A
 53%|█████▎    | 117/221 [00:31<00:24,  4.30it/s][A
 53%|█████▎    | 118/221 [00:31<00:23,  4.33it/s][A
 54%|█████▍    | 119/221 [00:32<00:38,  2.62it/s][A
 54%|█████▍    | 120/221 [00:32<00:34,  2.96it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.80it/s][A
 56%|█████▌    | 123/221 [00:33<00:26,  3.67it/s][A
 56%|█████▌    | 124/221 [00:33<00:23,  4.16it/s][A
 57%|█████▋    | 125/221 [00:33<00:26,  3.66it/s][A
 57%|█████▋    | 126/221 [00:34<00:28,  3.37it/s][A
 57%|█████▋    | 127/221 [00:34<00:29,  3.24it/s][A
 58%|█████▊    | 128/221 [00:34<00:27,  3.40it/s][A
 58%|█████▊    | 129/221 [00:34<00:26,  3.52it/s][A
 59%|█████▉    | 130/221 [00:35<00:23,  3.91it/s][A
 60%|█████▉    | 132/221 [00:35<00:14,  6.16it/s][A
 60%|██████    | 133/221 [00:35<00:17,  5.04it/s][A
 61%|██████    | 134/221 [00:35<00:16,  5.29it/s][A
 61%|██████    | 135/221 [00:35<00:16,  5.31it/s][A
 62%|██████▏   | 136/221 [00:36<00:17,  4.83it/s][A
 62%|██████▏   | 137/221 [00:36<00:16,  5.20it/s][A
 62%|██████▏   | 138/221 [00:36<00:17,  4.69it/s][A
 63%|██████▎   | 139/221 [00:37<00:22,  3.68it/s][A
 63%|██████▎   | 140/221 [00:37<00:21,  3.84it/s][A
 64%|██████▍   | 141/221 [00:37<00:20,  3.99it/s][A
 64%|██████▍   | 142/221 [00:37<00:18,  4.25it/s][A
 65%|██████▍   | 143/221 [00:38<00:26,  2.97it/s][A
 65%|██████▌   | 144/221 [00:38<00:29,  2.57it/s][A
 66%|██████▌   | 145/221 [00:38<00:23,  3.19it/s][A
 66%|██████▌   | 146/221 [00:39<00:18,  3.98it/s][A
 67%|██████▋   | 147/221 [00:39<00:19,  3.86it/s][A
 67%|██████▋   | 148/221 [00:39<00:21,  3.47it/s][A
 67%|██████▋   | 149/221 [00:39<00:17,  4.15it/s][A
 68%|██████▊   | 150/221 [00:40<00:18,  3.91it/s][A
 68%|██████▊   | 151/221 [00:40<00:21,  3.30it/s][A
 69%|██████▉   | 152/221 [00:41<00:28,  2.43it/s][A
 69%|██████▉   | 153/221 [00:41<00:23,  2.91it/s][A
 70%|██████▉   | 154/221 [00:41<00:19,  3.36it/s][A
 70%|███████   | 155/221 [00:41<00:16,  3.95it/s][A
 71%|███████   | 156/221 [00:42<00:18,  3.43it/s][A
 71%|███████   | 157/221 [00:42<00:17,  3.60it/s][A
 71%|███████▏  | 158/221 [00:42<00:17,  3.65it/s][A
 72%|███████▏  | 159/221 [00:42<00:15,  3.92it/s][A
 72%|███████▏  | 160/221 [00:43<00:15,  3.88it/s][A
 73%|███████▎  | 161/221 [00:43<00:20,  2.93it/s][A
 73%|███████▎  | 162/221 [00:43<00:18,  3.20it/s][A
 74%|███████▍  | 163/221 [00:44<00:16,  3.48it/s][A
 74%|███████▍  | 164/221 [00:44<00:17,  3.25it/s][A
 75%|███████▍  | 165/221 [00:44<00:14,  3.74it/s][A
 75%|███████▌  | 166/221 [00:44<00:14,  3.67it/s][A
 76%|███████▌  | 167/221 [00:44<00:11,  4.50it/s][A
 76%|███████▌  | 168/221 [00:45<00:14,  3.58it/s][A
 76%|███████▋  | 169/221 [00:45<00:13,  3.82it/s][A
 77%|███████▋  | 170/221 [00:46<00:18,  2.77it/s][A
 77%|███████▋  | 171/221 [00:46<00:14,  3.45it/s][A
 78%|███████▊  | 172/221 [00:46<00:12,  3.93it/s][A
 78%|███████▊  | 173/221 [00:46<00:13,  3.69it/s][A
 79%|███████▊  | 174/221 [00:47<00:16,  2.91it/s][A
 79%|███████▉  | 175/221 [00:47<00:15,  2.91it/s][A
 80%|███████▉  | 176/221 [00:47<00:14,  3.20it/s][A
 80%|████████  | 177/221 [00:48<00:11,  3.77it/s][A
 81%|████████  | 178/221 [00:48<00:10,  4.27it/s][A
 81%|████████  | 179/221 [00:48<00:09,  4.27it/s][A
 81%|████████▏ | 180/221 [00:48<00:08,  4.75it/s][A
 82%|████████▏ | 181/221 [00:48<00:10,  3.79it/s][A
 82%|████████▏ | 182/221 [00:49<00:09,  3.94it/s][A
 83%|████████▎ | 183/221 [00:49<00:09,  4.05it/s][A
 83%|████████▎ | 184/221 [00:49<00:08,  4.54it/s][A
 84%|████████▎ | 185/221 [00:49<00:07,  4.68it/s][A
 84%|████████▍ | 186/221 [00:50<00:08,  3.90it/s][A
 85%|████████▍ | 187/221 [00:50<00:08,  4.25it/s][A
 85%|████████▌ | 188/221 [00:50<00:08,  4.10it/s][A
 86%|████████▌ | 189/221 [00:50<00:08,  3.85it/s][A
 86%|████████▌ | 190/221 [00:51<00:09,  3.23it/s][A
 86%|████████▋ | 191/221 [00:51<00:07,  3.83it/s][A
 87%|████████▋ | 192/221 [00:51<00:09,  3.05it/s][A
 87%|████████▋ | 193/221 [00:52<00:08,  3.45it/s][A
 88%|████████▊ | 194/221 [00:52<00:09,  2.99it/s][A
 88%|████████▊ | 195/221 [00:52<00:08,  3.00it/s][A
 89%|████████▊ | 196/221 [00:53<00:08,  2.81it/s][A
 89%|████████▉ | 197/221 [00:53<00:06,  3.52it/s][A
 90%|████████▉ | 198/221 [00:54<00:09,  2.44it/s][A
 90%|█████████ | 199/221 [00:54<00:08,  2.66it/s][A
 90%|█████████ | 200/221 [00:54<00:07,  2.69it/s][A
 91%|█████████ | 201/221 [00:55<00:07,  2.71it/s][A
 91%|█████████▏| 202/221 [00:55<00:07,  2.63it/s][A
 92%|█████████▏| 204/221 [00:56<00:06,  2.61it/s][A
 93%|█████████▎| 205/221 [00:56<00:05,  3.13it/s][A
 93%|█████████▎| 206/221 [00:56<00:04,  3.07it/s][A
 94%|█████████▎| 207/221 [00:57<00:04,  3.24it/s][A
 94%|█████████▍| 208/221 [00:57<00:03,  3.91it/s][A
 95%|█████████▍| 209/221 [00:57<00:03,  3.60it/s][A
 95%|█████████▌| 210/221 [00:57<00:03,  3.55it/s][A
 95%|█████████▌| 211/221 [00:58<00:03,  3.28it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  3.45it/s][A
 96%|█████████▋| 213/221 [00:58<00:02,  3.43it/s][A
 97%|█████████▋| 214/221 [00:59<00:02,  3.02it/s][A
 97%|█████████▋| 215/221 [00:59<00:01,  3.29it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  3.17it/s][A
 98%|█████████▊| 217/221 [00:59<00:01,  3.54it/s][A
 99%|█████████▊| 218/221 [01:00<00:00,  3.35it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  3.10it/s][A
100%|█████████▉| 220/221 [01:00<00:00,  3.15it/s][A
100%|██████████| 221/221 [01:01<00:00,  3.11it/s][A100%|██████████| 221/221 [01:01<00:00,  3.60it/s]
09/09/2024 21:24:00 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 1099--===========

09/09/2024 21:24:00 - INFO - __main__ -   {'area_r1': 18.6, 'area_recall': '18.6/37.8/50.2', 'area_ravg': 35.5}
09/09/2024 21:24:00 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 1099--===========

09/09/2024 21:24:00 - INFO - __main__ -   {'forward_r1': 34.3, 'forward_recall': '34.3/59.2/70.4', 'forward_ravg': 54.6}
09/09/2024 21:24:00 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 1099--===========

09/09/2024 21:24:00 - INFO - __main__ -   {'area_video_r1': 41.2, 'area_video_recall': '41.2/70.4/79.6', 'area_video_ravg': 63.7}
09/09/2024 21:24:00 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 1099=======

09/09/2024 21:24:00 - INFO - __main__ -   {'area_video_r1': 41.2, 'area_video_recall': '41.2/70.4/79.6', 'area_video_ravg': 63.7}
09/09/2024 21:24:00 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 1099--===========

09/09/2024 21:24:00 - INFO - __main__ -   {'area_video_r1': 48.6, 'area_video_recall': '48.6/66.3/72.1', 'area_video_ravg': 62.3, 'area_video_back_r1': 49.1, 'area_video_back_recall': '49.1/72.4/79.8', 'area_video_back_ravg': 67.1}
09/09/2024 21:24:00 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 21:24:00 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 21:24:00 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 1099--===========

09/09/2024 21:24:00 - INFO - __main__ -   {'video_r1': 41.1, 'video_recall': '41.1/70.0/79.8', 'video_ravg': 63.6}
09/09/2024 21:24:00 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 21:24:00 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 21:24:00 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 1099--===========

09/09/2024 21:24:00 - INFO - __main__ -   {'video_r1': 52.4, 'video_recall': '52.4/74.3/82.4', 'video_ravg': 69.7}
09/09/2024 21:24:00 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 1049=======

09/09/2024 21:24:00 - INFO - __main__ -   {'video_r1': 52.9, 'video_recall': '52.9/74.5/82.8', 'video_ravg': 70.1}
09/09/2024 21:24:28 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.4219413995742798, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.02125420980155468, 'loss_ret%tv%ta--finetune_area/loss_area': 1.176674723625183, 'loss_ret%tv%ta--finetune_area/total_loss': 2.619870185852051}
 57%|█████▋    | 1100/1945 [5:59:02<29:28:19, 125.56s/it][h264 @ 0x55e505c7d4c0] mmco: unref short failure
[h264 @ 0x55e505c7d4c0] mmco: unref short failure
[h264 @ 0x55e505c7d4c0] mmco: unref short failure
[h264 @ 0x55e505c7d4c0] mmco: unref short failure
[h264 @ 0x55b7d24ca0c0] mmco: unref short failure
[h264 @ 0x55b7caaed740] mmco: unref short failure
[h264 @ 0x55b7caaed740] mmco: unref short failure
 57%|█████▋    | 1101/1945 [5:59:07<20:54:01, 89.15s/it] [h264 @ 0x556e54f40400] mmco: unref short failure
[h264 @ 0x556e54f40400] mmco: unref short failure
 57%|█████▋    | 1102/1945 [5:59:11<14:56:58, 63.84s/it][h264 @ 0x556e55d93b40] mmco: unref short failure
 57%|█████▋    | 1103/1945 [5:59:17<10:49:05, 46.25s/it][h264 @ 0x556e7011dbc0] mmco: unref short failure
[h264 @ 0x556e7011dbc0] mmco: unref short failure
[h264 @ 0x556e66296cc0] mmco: unref short failure
 57%|█████▋    | 1104/1945 [5:59:23<7:59:11, 34.19s/it]  57%|█████▋    | 1105/1945 [5:59:28<5:58:45, 25.63s/it] 57%|█████▋    | 1106/1945 [5:59:35<4:39:32, 19.99s/it][h264 @ 0x556e4c517980] mmco: unref short failure
[h264 @ 0x556e4c517980] mmco: unref short failure
[h264 @ 0x556e4c517980] mmco: unref short failure
[h264 @ 0x556e4c517980] mmco: unref short failure
[h264 @ 0x556e44eba980] mmco: unref short failure
[h264 @ 0x556e44eba980] mmco: unref short failure
[h264 @ 0x556e57f0edc0] mmco: unref short failure
[h264 @ 0x556e57f0edc0] mmco: unref short failure
 57%|█████▋    | 1107/1945 [5:59:43<3:46:54, 16.25s/it] 57%|█████▋    | 1108/1945 [5:59:49<3:07:18, 13.43s/it][h264 @ 0x556e466c3c40] mmco: unref short failure
 57%|█████▋    | 1109/1945 [5:59:56<2:40:15, 11.50s/it][h264 @ 0x55e516dbab00] mmco: unref short failure
[h264 @ 0x55e516dbab00] mmco: unref short failure
 57%|█████▋    | 1110/1945 [6:00:04<2:24:27, 10.38s/it][h264 @ 0x556e4a56c680] mmco: unref short failure
[h264 @ 0x556e4a56c680] mmco: unref short failure
[h264 @ 0x556e4a56c680] mmco: unref short failure
[h264 @ 0x556e4a56c680] mmco: unref short failure
[h264 @ 0x556e4a56c680] mmco: unref short failure
[h264 @ 0x556e4a56c680] mmco: unref short failure
 57%|█████▋    | 1111/1945 [6:00:11<2:10:57,  9.42s/it][h264 @ 0x556e67f612c0] mmco: unref short failure
[h264 @ 0x556e67f612c0] mmco: unref short failure
[h264 @ 0x55b7e6b1d500] mmco: unref short failure
[h264 @ 0x55b7e6b1d500] mmco: unref short failure
[h264 @ 0x556e67f612c0] mmco: unref short failure
 57%|█████▋    | 1112/1945 [6:00:20<2:05:48,  9.06s/it][h264 @ 0x55e50f6b0500] mmco: unref short failure
[h264 @ 0x55e50f6b0500] mmco: unref short failure
[h264 @ 0x556e5be92340] mmco: unref short failure
 57%|█████▋    | 1113/1945 [6:00:27<1:57:25,  8.47s/it][h264 @ 0x55b7d45d5c80] mmco: unref short failure
[h264 @ 0x55b7d45d5c80] mmco: unref short failure
[h264 @ 0x55b7d45d5c80] mmco: unref short failure
 57%|█████▋    | 1114/1945 [6:00:34<1:52:36,  8.13s/it][h264 @ 0x556e5e078d80] mmco: unref short failure
[h264 @ 0x55b7e859e640] mmco: unref short failure
[h264 @ 0x556e573830c0] mmco: unref short failure
[h264 @ 0x556e6c9edc80] mmco: unref short failure
 57%|█████▋    | 1115/1945 [6:00:41<1:46:00,  7.66s/it][h264 @ 0x55b7e2470540] mmco: unref short failure
 57%|█████▋    | 1116/1945 [6:00:48<1:44:59,  7.60s/it][h264 @ 0x556e50200180] mmco: unref short failure
[h264 @ 0x556e49121540] mmco: unref short failure
[h264 @ 0x556e49121540] mmco: unref short failure
[h264 @ 0x556e47f14d80] mmco: unref short failure
[h264 @ 0x556e47f14d80] mmco: unref short failure
[h264 @ 0x556e47f14d80] mmco: unref short failure
[h264 @ 0x556e47f14d80] mmco: unref short failure
 57%|█████▋    | 1117/1945 [6:01:04<2:19:33, 10.11s/it][h264 @ 0x55b7cbc35040] mmco: unref short failure
 57%|█████▋    | 1118/1945 [6:01:11<2:07:19,  9.24s/it] 58%|█████▊    | 1119/1945 [6:01:21<2:10:57,  9.51s/it][h264 @ 0x55b7d2837ec0] mmco: unref short failure
[h264 @ 0x55b7d2837ec0] mmco: unref short failure
[h264 @ 0x55b7e1babc40] mmco: unref short failure
[h264 @ 0x55b7e1babc40] mmco: unref short failure
[h264 @ 0x55e515061fc0] mmco: unref short failure
[h264 @ 0x55e515061fc0] mmco: unref short failure
[h264 @ 0x556e6b84e5c0] mmco: unref short failure
 58%|█████▊    | 1120/1945 [6:01:28<2:00:37,  8.77s/it][h264 @ 0x55b7d45d5c80] mmco: unref short failure
[h264 @ 0x55b7d45d5c80] mmco: unref short failure
[h264 @ 0x55b7d45d5c80] mmco: unref short failure
[h264 @ 0x55b7d45d5c80] mmco: unref short failure
[h264 @ 0x55e51a85da40] mmco: unref short failure
[h264 @ 0x55e51a85da40] mmco: unref short failure
[h264 @ 0x55e50aa22f00] mmco: unref short failure
[h264 @ 0x556e60111c80] mmco: unref short failure
[h264 @ 0x556e60111c80] mmco: unref short failure
[h264 @ 0x556e60111c80] mmco: unref short failure
[h264 @ 0x556e60111c80] mmco: unref short failure
 58%|█████▊    | 1121/1945 [6:01:39<2:07:35,  9.29s/it][h264 @ 0x55b7d1b2aa00] mmco: unref short failure
[h264 @ 0x55b7d1b2aa00] mmco: unref short failure
[h264 @ 0x556e5d617740] mmco: unref short failure
[h264 @ 0x55e4fe04bc80] mmco: unref short failure
[h264 @ 0x55e4fe04bc80] mmco: unref short failure
[h264 @ 0x55e4fef70d80] mmco: unref short failure
[h264 @ 0x55e4fef70d80] mmco: unref short failure
 58%|█████▊    | 1122/1945 [6:01:46<1:58:38,  8.65s/it] 58%|█████▊    | 1123/1945 [6:01:55<1:58:40,  8.66s/it][h264 @ 0x556e636f0080] mmco: unref short failure
[h264 @ 0x556e51082800] mmco: unref short failure
[h264 @ 0x556e51082800] mmco: unref short failure
[h264 @ 0x55e501542040] mmco: unref short failure
[h264 @ 0x55b7d2837ec0] mmco: unref short failure
[h264 @ 0x556e429ea640] mmco: unref short failure
[h264 @ 0x556e429ea640] mmco: unref short failure
[h264 @ 0x556e422350c0] mmco: unref short failure
[h264 @ 0x556e43a94f00] mmco: unref short failure
[h264 @ 0x55b7f069b140] mmco: unref short failure
[h264 @ 0x55b7f069b140] mmco: unref short failure
[h264 @ 0x55b7d81828c0] mmco: unref short failure
[h264 @ 0x55b7d81828c0] mmco: unref short failure
[h264 @ 0x556e5d617740] mmco: unref short failure
[h264 @ 0x556e5d617740] mmco: unref short failure
[h264 @ 0x556e49148a80] mmco: unref short failure
[h264 @ 0x556e49148a80] mmco: unref short failure
[h264 @ 0x556e52cea780] mmco: unref short failure
 58%|█████▊    | 1124/1945 [6:02:52<5:18:26, 23.27s/it] 58%|█████▊    | 1125/1945 [6:03:13<5:06:06, 22.40s/it][h264 @ 0x55e505def600] mmco: unref short failure
[h264 @ 0x55e505def600] mmco: unref short failure
[h264 @ 0x55e505def600] mmco: unref short failure
[h264 @ 0x55e505def600] mmco: unref short failure
[h264 @ 0x556e499bb840] mmco: unref short failure
 58%|█████▊    | 1126/1945 [6:03:20<4:04:00, 17.88s/it][h264 @ 0x556e5c6dbc40] mmco: unref short failure
[h264 @ 0x55e50f4e5940] mmco: unref short failure
[h264 @ 0x55e50f4e5940] mmco: unref short failure
[h264 @ 0x55e50f4e5940] mmco: unref short failure
[h264 @ 0x55e50f4e5940] mmco: unref short failure
[h264 @ 0x55e50f4e5940] mmco: unref short failure
[h264 @ 0x55e50f4e5940] mmco: unref short failure
 58%|█████▊    | 1127/1945 [6:03:28<3:22:06, 14.82s/it][h264 @ 0x556e5dd5a1c0] mmco: unref short failure
[h264 @ 0x556e5dd5a1c0] mmco: unref short failure
[h264 @ 0x556e6c248e00] mmco: unref short failure
[h264 @ 0x556e6c248e00] mmco: unref short failure
[h264 @ 0x556e6c248e00] mmco: unref short failure
[h264 @ 0x556e6c248e00] mmco: unref short failure
[h264 @ 0x556e6c248e00] mmco: unref short failure
[h264 @ 0x55e50ed8b740] mmco: unref short failure
[h264 @ 0x55e50ed8b740] mmco: unref short failure
 58%|█████▊    | 1128/1945 [6:03:35<2:53:27, 12.74s/it][h264 @ 0x55e50d9e7440] mmco: unref short failure
[h264 @ 0x55e50d9e7440] mmco: unref short failure
 58%|█████▊    | 1129/1945 [6:03:43<2:32:11, 11.19s/it][h264 @ 0x55b7e48a9000] mmco: unref short failure
[h264 @ 0x55b7e48a9000] mmco: unref short failure
[h264 @ 0x55b7cce95140] mmco: unref short failure
[h264 @ 0x55b7cce95140] mmco: unref short failure
[h264 @ 0x55b7cce95140] mmco: unref short failure
[h264 @ 0x55b7cce95140] mmco: unref short failure
[h264 @ 0x556e74ffe580] mmco: unref short failure
[h264 @ 0x556e74ffe580] mmco: unref short failure
 58%|█████▊    | 1130/1945 [6:03:50<2:15:19,  9.96s/it][h264 @ 0x556e4650cbc0] mmco: unref short failure
[h264 @ 0x556e4650cbc0] mmco: unref short failure
[h264 @ 0x55e518f5d780] mmco: unref short failure
[h264 @ 0x55e518f5d780] mmco: unref short failure
[h264 @ 0x556e634fe580] mmco: unref short failure
 58%|█████▊    | 1131/1945 [6:03:58<2:07:30,  9.40s/it][h264 @ 0x556e56b118c0] mmco: unref short failure
[h264 @ 0x556e4f618540] mmco: unref short failure
[h264 @ 0x556e4f618540] mmco: unref short failure
[h264 @ 0x556e595d6b00] mmco: unref short failure
[h264 @ 0x556e595d6b00] mmco: unref short failure
[h264 @ 0x55b7cb61f640] mmco: unref short failure
[h264 @ 0x55e50fb3a2c0] mmco: unref short failure
[h264 @ 0x55e50fb3a2c0] mmco: unref short failure
[h264 @ 0x556e5352b540] mmco: unref short failure
[h264 @ 0x55b7e3613a00] mmco: unref short failure
[h264 @ 0x55b7e3613a00] mmco: unref short failure
[h264 @ 0x556e425b3700] mmco: unref short failure
[h264 @ 0x55e519832fc0] mmco: unref short failure
[h264 @ 0x55e51b1144c0] mmco: unref short failure
[h264 @ 0x55e51b1144c0] mmco: unref short failure
[h264 @ 0x556e6def6440] mmco: unref short failure
[h264 @ 0x556e6def6440] mmco: unref short failure
[h264 @ 0x55b7cd1ef740] mmco: unref short failure
[h264 @ 0x55b7cd1ef740] mmco: unref short failure
[h264 @ 0x556e5d4758c0] mmco: unref short failure
[h264 @ 0x556e5d4758c0] mmco: unref short failure
[h264 @ 0x556e5e8c4e80] mmco: unref short failure
[h264 @ 0x556e5e8c4e80] mmco: unref short failure
[h264 @ 0x556e5e8c4e80] mmco: unref short failure
[h264 @ 0x556e5c58c380] mmco: unref short failure
[h264 @ 0x55b7e2f6f340] mmco: unref short failure
 58%|█████▊    | 1132/1945 [6:05:00<5:41:55, 25.23s/it] 58%|█████▊    | 1133/1945 [6:05:09<4:34:45, 20.30s/it][h264 @ 0x556e5dfb22c0] mmco: unref short failure
[h264 @ 0x556e6def6440] mmco: unref short failure
[h264 @ 0x556e6def6440] mmco: unref short failure
[h264 @ 0x556e6def6440] mmco: unref short failure
[h264 @ 0x556e6def6440] mmco: unref short failure
[h264 @ 0x55e50a243c40] mmco: unref short failure
[h264 @ 0x55e50a243c40] mmco: unref short failure
 58%|█████▊    | 1134/1945 [6:05:21<4:01:10, 17.84s/it][h264 @ 0x55b7e76c6300] mmco: unref short failure
[h264 @ 0x55b7e76c6300] mmco: unref short failure
[h264 @ 0x556e430e2bc0] mmco: unref short failure
[h264 @ 0x556e430e2bc0] mmco: unref short failure
[h264 @ 0x55b7d24c9040] mmco: unref short failure
[h264 @ 0x55e50ac598c0] mmco: unref short failure
[h264 @ 0x55e50ac598c0] mmco: unref short failure
 58%|█████▊    | 1135/1945 [6:05:33<3:35:50, 15.99s/it][h264 @ 0x55b7defbdf00] mmco: unref short failure
 58%|█████▊    | 1136/1945 [6:05:40<2:58:25, 13.23s/it][h264 @ 0x556e6def6440] mmco: unref short failure
[h264 @ 0x556e66861040] mmco: unref short failure
[h264 @ 0x556e49148a80] mmco: unref short failure
[h264 @ 0x556e4aa0a440] mmco: unref short failure
[h264 @ 0x556e4aa0a440] mmco: unref short failure
[h264 @ 0x55b7defbdf00] mmco: unref short failure
[h264 @ 0x55b7defbdf00] mmco: unref short failure
[h264 @ 0x55b7defbdf00] mmco: unref short failure
[h264 @ 0x55b7defbdf00] mmco: unref short failure
[h264 @ 0x55b7defbdf00] mmco: unref short failure
[h264 @ 0x55b7defbdf00] mmco: unref short failure
[h264 @ 0x55b7d24ca0c0] mmco: unref short failure
 58%|█████▊    | 1137/1945 [6:05:48<2:37:07, 11.67s/it][h264 @ 0x55b7ed09e640] mmco: unref short failure
 59%|█████▊    | 1138/1945 [6:05:58<2:29:33, 11.12s/it][h264 @ 0x55e51cf988c0] mmco: unref short failure
 59%|█████▊    | 1139/1945 [6:06:05<2:14:34, 10.02s/it][h264 @ 0x55b7d66c5c00] mmco: unref short failure
[h264 @ 0x55b7d66c5c00] mmco: unref short failure
[h264 @ 0x556e4b803580] mmco: unref short failure
[h264 @ 0x556e4ce4a980] mmco: unref short failure
[h264 @ 0x55b7e37cff40] mmco: unref short failure
[h264 @ 0x55b7d8b805c0] mmco: unref short failure
[h264 @ 0x55b7d8b805c0] mmco: unref short failure
[h264 @ 0x55b7d8b805c0] mmco: unref short failure
[h264 @ 0x55b7d8b805c0] mmco: unref short failure
[h264 @ 0x556e776fc600] mmco: unref short failure
[h264 @ 0x55e5102da580] mmco: unref short failure
[h264 @ 0x55e5102da580] mmco: unref short failure
[h264 @ 0x55b7d5adfa40] mmco: unref short failure
[h264 @ 0x55b7d5adfa40] mmco: unref short failure
[h264 @ 0x55e503d1eb00] mmco: unref short failure
[h264 @ 0x55e503d1eb00] mmco: unref short failure
[h264 @ 0x556e51692180] mmco: unref short failure
[h264 @ 0x556e656c0300] mmco: unref short failure
[h264 @ 0x556e656c0300] mmco: unref short failure
[h264 @ 0x556e656c0300] mmco: unref short failure
[h264 @ 0x556e656c0300] mmco: unref short failure
[h264 @ 0x55e505f65ec0] mmco: unref short failure
[h264 @ 0x55e505f65ec0] mmco: unref short failure
[h264 @ 0x556e602f84c0] mmco: unref short failure
[h264 @ 0x556e602f84c0] mmco: unref short failure
[h264 @ 0x55b7d52936c0] mmco: unref short failure
 59%|█████▊    | 1140/1945 [6:07:06<5:39:03, 25.27s/it][h264 @ 0x55e50026bcc0] mmco: unref short failure
[h264 @ 0x55e50026bcc0] mmco: unref short failure
[h264 @ 0x55e50026bcc0] mmco: unref short failure
 59%|█████▊    | 1141/1945 [6:07:14<4:28:07, 20.01s/it][h264 @ 0x55b7eddd1880] mmco: unref short failure
[h264 @ 0x55b7eddd1880] mmco: unref short failure
 59%|█████▊    | 1142/1945 [6:07:20<3:32:00, 15.84s/it][h264 @ 0x55b7e614f8c0] mmco: unref short failure
[h264 @ 0x55b7e614f8c0] mmco: unref short failure
[h264 @ 0x55b7e614f8c0] mmco: unref short failure
[h264 @ 0x55b7e614f8c0] mmco: unref short failure
 59%|█████▉    | 1143/1945 [6:07:39<3:45:01, 16.83s/it] 59%|█████▉    | 1144/1945 [6:07:45<3:02:47, 13.69s/it][h264 @ 0x55e503848f00] mmco: unref short failure
[h264 @ 0x556e56f74c80] mmco: unref short failure
[h264 @ 0x556e56f74c80] mmco: unref short failure
[h264 @ 0x556e52987c00] mmco: unref short failure
 59%|█████▉    | 1145/1945 [6:07:53<2:40:11, 12.01s/it][h264 @ 0x556e4c6ac680] mmco: unref short failure
 59%|█████▉    | 1146/1945 [6:08:02<2:28:15, 11.13s/it][h264 @ 0x55b7ce7f4b80] mmco: unref short failure
[h264 @ 0x556e43bc66c0] mmco: unref short failure
[h264 @ 0x556e43f884c0] mmco: unref short failure
[h264 @ 0x556e43f884c0] mmco: unref short failure
 59%|█████▉    | 1147/1945 [6:08:09<2:11:55,  9.92s/it][h264 @ 0x556e5e0cdd00] mmco: unref short failure
[h264 @ 0x55b7e971d880] mmco: unref short failure
[h264 @ 0x55b7e971d880] mmco: unref short failure
[h264 @ 0x55b7e3bf8180] mmco: unref short failure
[h264 @ 0x55b7e3bf8180] mmco: unref short failure
[h264 @ 0x55b7e3bf8180] mmco: unref short failure
[h264 @ 0x55b7e3bf8180] mmco: unref short failure
[h264 @ 0x55e503848f00] mmco: unref short failure
[h264 @ 0x556e62ce6f00] mmco: unref short failure
[h264 @ 0x55e4ff72e6c0] mmco: unref short failure
[h264 @ 0x55e4ff72e6c0] mmco: unref short failure
[h264 @ 0x55b7cd5e9000] mmco: unref short failure
[h264 @ 0x55b7d4dcc280] mmco: unref short failure
[h264 @ 0x55b7d5a4d540] mmco: unref short failure
[h264 @ 0x556e51e393c0] mmco: unref short failure
[h264 @ 0x55b7ed09e640] mmco: unref short failure
[h264 @ 0x55b7ed09e640] mmco: unref short failure
[h264 @ 0x556e55ce81c0] mmco: unref short failure
[h264 @ 0x55e501ed6040] mmco: unref short failure
 59%|█████▉    | 1148/1945 [6:09:16<5:58:42, 27.00s/it][h264 @ 0x55b7cd5e9000] mmco: unref short failure
[h264 @ 0x55b7cd5e9000] mmco: unref short failure
[h264 @ 0x55b7cd5e9000] mmco: unref short failure
[h264 @ 0x556e5bd78540] mmco: unref short failure
 59%|█████▉    | 1149/1945 [6:09:23<4:36:02, 20.81s/it]09/09/2024 21:34:51 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 21:34:51 - INFO - __main__ -   start running ret%tv validation...
[h264 @ 0x556e64bda5c0] mmco: unref short failure
[h264 @ 0x556e64bda5c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e5102da580] mmco: unref short failure
[h264 @ 0x55e5102da580] mmco: unref short failure
[h264 @ 0x556e51daa880] mmco: unref short failure
[h264 @ 0x556e51daa880] mmco: unref short failure
[h264 @ 0x556e55d46a80] mmco: unref short failure
[h264 @ 0x556e55d46a80] mmco: unref short failure
[h264 @ 0x556e4ff19f80] mmco: unref short failure
[h264 @ 0x556e4ff19f80] mmco: unref short failure
[h264 @ 0x55b7d78f2b80] mmco: unref short failure
[h264 @ 0x55b7d78f2b80] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e516c25c40] mmco: unref short failure
[h264 @ 0x55e516c25c40] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e6cd31f40] mmco: unref short failure
[h264 @ 0x556e4f59d800] mmco: unref short failure
[h264 @ 0x556e4f59d800] mmco: unref short failure
[h264 @ 0x556e4f59d800] mmco: unref short failure
[h264 @ 0x556e4f59d800] mmco: unref short failure
[h264 @ 0x55b7cb87d600] mmco: unref short failure
[h264 @ 0x55b7e76c6300] mmco: unref short failure
[h264 @ 0x55b7e76c6300] mmco: unref short failure
[h264 @ 0x556e59d96040] mmco: unref short failure
[h264 @ 0x556e59d96040] mmco: unref short failure
[h264 @ 0x55b7ccc63a40] mmco: unref short failure
[h264 @ 0x556e60fab040] mmco: unref short failure
[h264 @ 0x556e60fab040] mmco: unref short failure
[h264 @ 0x55b7cd4d3fc0] mmco: unref short failure
[h264 @ 0x55b7cd4d3fc0] mmco: unref short failure
[h264 @ 0x55e5111a7340] mmco: unref short failure
[h264 @ 0x55e5111a7340] mmco: unref short failure
[h264 @ 0x55e50beedc80] mmco: unref short failure
[h264 @ 0x55e50beedc80] mmco: unref short failure
[h264 @ 0x55e50beedc80] mmco: unref short failure
[h264 @ 0x55e50beedc80] mmco: unref short failure
[h264 @ 0x556e67e57240] mmco: unref short failure
[h264 @ 0x556e601f34c0] mmco: unref short failure
[h264 @ 0x556e601f34c0] mmco: unref short failure
[h264 @ 0x556e54703540] mmco: unref short failure
[h264 @ 0x556e54703540] mmco: unref short failure
[h264 @ 0x55e4fdc0b440] mmco: unref short failure
[h264 @ 0x55e4fdc0b440] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:22,  9.79it/s][A
  1%|          | 2/221 [00:00<00:31,  7.06it/s][A
  2%|▏         | 4/221 [00:00<00:24,  8.75it/s][A
  2%|▏         | 5/221 [00:00<00:28,  7.62it/s][A
  3%|▎         | 6/221 [00:00<00:38,  5.52it/s][A
  3%|▎         | 7/221 [00:01<01:25,  2.52it/s][A
  4%|▎         | 8/221 [00:02<01:11,  2.96it/s][A
  4%|▍         | 9/221 [00:02<00:59,  3.58it/s][A
  5%|▍         | 10/221 [00:03<01:43,  2.04it/s][A
  5%|▍         | 11/221 [00:03<01:22,  2.53it/s][A
  5%|▌         | 12/221 [00:03<01:13,  2.85it/s][A
  6%|▌         | 13/221 [00:03<01:06,  3.12it/s][A
  6%|▋         | 14/221 [00:05<02:14,  1.54it/s][A
  7%|▋         | 15/221 [00:05<01:45,  1.96it/s][A[h264 @ 0x556e53bb8bc0] mmco: unref short failure
[h264 @ 0x556e53bb8bc0] mmco: unref short failure
[h264 @ 0x556e53bb8bc0] mmco: unref short failure
[h264 @ 0x556e53bb8bc0] mmco: unref short failure

  7%|▋         | 16/221 [00:09<05:10,  1.51s/it][A
  8%|▊         | 17/221 [00:09<03:57,  1.17s/it][A
  8%|▊         | 18/221 [00:09<03:01,  1.12it/s][A
  9%|▉         | 20/221 [00:10<01:45,  1.90it/s][A
 10%|▉         | 21/221 [00:10<01:24,  2.36it/s][A
 10%|▉         | 22/221 [00:10<01:08,  2.92it/s][A
 10%|█         | 23/221 [00:10<00:55,  3.59it/s][A
 11%|█         | 24/221 [00:10<00:50,  3.89it/s][A
 11%|█▏        | 25/221 [00:10<00:46,  4.24it/s][A
 12%|█▏        | 26/221 [00:10<00:40,  4.84it/s][A
 12%|█▏        | 27/221 [00:11<00:40,  4.82it/s][A
 13%|█▎        | 28/221 [00:14<03:28,  1.08s/it][A
 13%|█▎        | 29/221 [00:14<02:33,  1.25it/s][A
 14%|█▎        | 30/221 [00:14<01:53,  1.68it/s][A
 14%|█▍        | 32/221 [00:15<01:24,  2.24it/s][A
 15%|█▌        | 34/221 [00:15<00:55,  3.36it/s][A
 16%|█▌        | 35/221 [00:15<00:51,  3.58it/s][A
 16%|█▋        | 36/221 [00:15<00:47,  3.87it/s][A
 17%|█▋        | 37/221 [00:16<00:56,  3.25it/s][A
 17%|█▋        | 38/221 [00:16<00:52,  3.52it/s][A
 18%|█▊        | 39/221 [00:16<00:50,  3.62it/s][A
 18%|█▊        | 40/221 [00:16<00:43,  4.20it/s][A
 19%|█▊        | 41/221 [00:16<00:36,  4.92it/s][A
 19%|█▉        | 42/221 [00:16<00:34,  5.23it/s][A
 20%|█▉        | 44/221 [00:17<00:26,  6.62it/s][A
 21%|██        | 46/221 [00:17<00:24,  7.03it/s][A[h264 @ 0x556e5e2bbe40] mmco: unref short failure

 21%|██▏       | 47/221 [00:20<02:22,  1.22it/s][A
 22%|██▏       | 49/221 [00:21<01:40,  1.72it/s][A
 23%|██▎       | 50/221 [00:21<01:27,  1.95it/s][A
 23%|██▎       | 51/221 [00:21<01:15,  2.26it/s][A
 24%|██▎       | 52/221 [00:21<01:01,  2.73it/s][A
 24%|██▍       | 53/221 [00:22<01:03,  2.66it/s][A[h264 @ 0x556e5bab2ec0] mmco: unref short failure
[h264 @ 0x556e5bab2ec0] mmco: unref short failure

 24%|██▍       | 54/221 [00:22<00:55,  3.00it/s][A
 25%|██▍       | 55/221 [00:22<00:44,  3.69it/s][A
 25%|██▌       | 56/221 [00:22<00:39,  4.23it/s][A
 26%|██▌       | 57/221 [00:22<00:36,  4.50it/s][A
 26%|██▌       | 58/221 [00:23<00:36,  4.48it/s][A
 27%|██▋       | 60/221 [00:23<00:29,  5.46it/s][A[h264 @ 0x556e42a6d040] mmco: unref short failure
[h264 @ 0x556e42a6d040] mmco: unref short failure

 28%|██▊       | 61/221 [00:23<00:28,  5.62it/s][A
 28%|██▊       | 62/221 [00:23<00:30,  5.28it/s][A
 29%|██▊       | 63/221 [00:23<00:29,  5.30it/s][A
 29%|██▉       | 64/221 [00:24<00:28,  5.47it/s][A
 29%|██▉       | 65/221 [00:24<00:32,  4.80it/s][A
 30%|██▉       | 66/221 [00:24<00:30,  5.12it/s][A[h264 @ 0x556e42a6d040] mmco: unref short failure
[h264 @ 0x556e42a6d040] mmco: unref short failure

 30%|███       | 67/221 [00:24<00:31,  4.86it/s][A[h264 @ 0x556e42a6d040] mmco: unref short failure
[h264 @ 0x556e42a6d040] mmco: unref short failure

 31%|███       | 68/221 [00:25<00:37,  4.05it/s][A
 31%|███       | 69/221 [00:25<00:32,  4.71it/s][A
 32%|███▏      | 70/221 [00:25<00:44,  3.40it/s][A
 32%|███▏      | 71/221 [00:25<00:38,  3.85it/s][A
 33%|███▎      | 72/221 [00:25<00:31,  4.72it/s][A
 33%|███▎      | 73/221 [00:26<00:31,  4.73it/s][A[h264 @ 0x556e43a94d00] mmco: unref short failure
[h264 @ 0x556e43a94d00] mmco: unref short failure

 34%|███▍      | 75/221 [00:26<00:24,  5.90it/s][A
 34%|███▍      | 76/221 [00:26<00:24,  5.97it/s][A
 35%|███▍      | 77/221 [00:26<00:23,  6.16it/s][A
 35%|███▌      | 78/221 [00:31<03:07,  1.31s/it][A
 36%|███▌      | 79/221 [00:31<02:21,  1.00it/s][A
 37%|███▋      | 81/221 [00:31<01:25,  1.63it/s][A
 37%|███▋      | 82/221 [00:32<01:25,  1.63it/s][A
 38%|███▊      | 83/221 [00:32<01:06,  2.06it/s][A
 38%|███▊      | 84/221 [00:32<00:52,  2.59it/s][A[h264 @ 0x556e63e46c80] mmco: unref short failure

 38%|███▊      | 85/221 [00:32<00:54,  2.48it/s][A
 39%|███▉      | 86/221 [00:33<00:54,  2.46it/s][A
 39%|███▉      | 87/221 [00:33<00:50,  2.66it/s][A
 40%|████      | 89/221 [00:33<00:31,  4.15it/s][A
 41%|████      | 90/221 [00:34<00:48,  2.68it/s][A
 41%|████      | 91/221 [00:34<00:45,  2.86it/s][A
 42%|████▏     | 92/221 [00:34<00:40,  3.19it/s][A
 42%|████▏     | 93/221 [00:36<01:33,  1.38it/s][A
 43%|████▎     | 94/221 [00:36<01:10,  1.81it/s][A
 43%|████▎     | 96/221 [00:37<00:42,  2.93it/s][A[h264 @ 0x556e621a7000] mmco: unref short failure

 44%|████▍     | 98/221 [00:37<00:29,  4.13it/s][A
 45%|████▌     | 100/221 [00:37<00:26,  4.60it/s][A
 46%|████▌     | 101/221 [00:37<00:23,  5.06it/s][A
 46%|████▌     | 102/221 [00:37<00:23,  5.11it/s][A[h264 @ 0x55b7e3746c80] mmco: unref short failure
[h264 @ 0x55b7e3746c80] mmco: unref short failure

 47%|████▋     | 103/221 [00:38<00:34,  3.46it/s][A
 47%|████▋     | 104/221 [00:38<00:31,  3.69it/s][A
 48%|████▊     | 105/221 [00:38<00:28,  4.03it/s][A
 48%|████▊     | 106/221 [00:39<00:26,  4.29it/s][A
 48%|████▊     | 107/221 [00:39<00:30,  3.70it/s][A
 49%|████▉     | 108/221 [00:39<00:28,  4.01it/s][A
 49%|████▉     | 109/221 [00:39<00:24,  4.59it/s][A
 50%|█████     | 111/221 [00:39<00:16,  6.51it/s][A
 51%|█████     | 112/221 [00:40<00:16,  6.68it/s][A
 51%|█████     | 113/221 [00:40<00:19,  5.40it/s][A
 52%|█████▏    | 115/221 [00:40<00:16,  6.58it/s][A
 53%|█████▎    | 117/221 [00:40<00:13,  7.50it/s][A
 53%|█████▎    | 118/221 [00:40<00:14,  7.35it/s][A
 54%|█████▍    | 119/221 [00:41<00:16,  6.17it/s][A
 55%|█████▍    | 121/221 [00:41<00:12,  7.73it/s][A
 55%|█████▌    | 122/221 [00:41<00:12,  7.91it/s][A
 56%|█████▌    | 123/221 [00:41<00:11,  8.32it/s][A
 56%|█████▌    | 124/221 [00:41<00:14,  6.75it/s][A
 57%|█████▋    | 125/221 [00:41<00:14,  6.70it/s][A
 57%|█████▋    | 126/221 [00:42<00:28,  3.39it/s][A
 58%|█████▊    | 128/221 [00:42<00:18,  5.08it/s][A
 59%|█████▉    | 130/221 [00:42<00:14,  6.49it/s][A
 60%|█████▉    | 132/221 [00:43<00:12,  7.08it/s][A
 60%|██████    | 133/221 [00:43<00:13,  6.55it/s][A
 61%|██████    | 135/221 [00:46<00:52,  1.65it/s][A
 62%|██████▏   | 136/221 [00:46<00:42,  1.99it/s][A
 62%|██████▏   | 138/221 [00:46<00:28,  2.91it/s][A
 63%|██████▎   | 140/221 [00:46<00:23,  3.49it/s][A
 64%|██████▍   | 141/221 [00:46<00:21,  3.74it/s][A
 64%|██████▍   | 142/221 [00:47<00:18,  4.24it/s][A
 65%|██████▍   | 143/221 [00:47<00:15,  4.92it/s][A
 65%|██████▌   | 144/221 [00:47<00:17,  4.30it/s][A
 66%|██████▌   | 145/221 [00:47<00:16,  4.61it/s][A
 67%|██████▋   | 147/221 [00:47<00:12,  5.98it/s][A
 67%|██████▋   | 149/221 [00:48<00:09,  7.26it/s][A
 68%|██████▊   | 151/221 [00:48<00:08,  8.72it/s][A
 70%|██████▉   | 154/221 [00:48<00:06, 10.17it/s][A
 71%|███████   | 157/221 [00:48<00:05, 12.49it/s][A
 72%|███████▏  | 159/221 [00:48<00:06,  9.60it/s][A
 73%|███████▎  | 161/221 [00:49<00:06,  9.82it/s][A[h264 @ 0x55e50ef87200] mmco: unref short failure
[h264 @ 0x55e50ef87200] mmco: unref short failure

 74%|███████▍  | 163/221 [00:50<00:14,  3.96it/s][A
 74%|███████▍  | 164/221 [00:50<00:15,  3.74it/s][A
 75%|███████▍  | 165/221 [00:50<00:13,  4.14it/s][A
 75%|███████▌  | 166/221 [00:51<00:13,  4.08it/s][A
 76%|███████▌  | 168/221 [00:51<00:10,  5.18it/s][A
 76%|███████▋  | 169/221 [00:51<00:14,  3.54it/s][A
 77%|███████▋  | 170/221 [00:52<00:12,  4.05it/s][A
 77%|███████▋  | 171/221 [00:52<00:10,  4.59it/s][A
 78%|███████▊  | 173/221 [00:52<00:07,  6.17it/s][A
 79%|███████▊  | 174/221 [00:52<00:11,  4.12it/s][A
 80%|███████▉  | 176/221 [00:52<00:07,  5.90it/s][A
 80%|████████  | 177/221 [00:53<00:08,  5.25it/s][A
 81%|████████  | 179/221 [00:53<00:05,  7.27it/s][A
 82%|████████▏ | 182/221 [00:53<00:03, 10.43it/s][A
 83%|████████▎ | 184/221 [00:53<00:03, 11.43it/s][A
 84%|████████▍ | 186/221 [00:55<00:09,  3.62it/s][A
 85%|████████▌ | 188/221 [00:55<00:07,  4.37it/s][A
 86%|████████▌ | 190/221 [00:55<00:06,  4.95it/s][A
 87%|████████▋ | 192/221 [00:55<00:05,  5.46it/s][A
 87%|████████▋ | 193/221 [00:55<00:04,  5.77it/s][A
 88%|████████▊ | 194/221 [00:56<00:04,  5.80it/s][A
 89%|████████▉ | 197/221 [00:56<00:02,  8.98it/s][A
 90%|█████████ | 199/221 [00:56<00:02,  7.45it/s][A
 91%|█████████ | 201/221 [00:56<00:02,  8.34it/s][A
 92%|█████████▏| 203/221 [00:56<00:01,  9.63it/s][A
 93%|█████████▎| 205/221 [00:57<00:01, 10.55it/s][A
 94%|█████████▎| 207/221 [00:57<00:01, 11.12it/s][A 95%|█████████▍| 209/221 [00:57<00:03,  3.64it/s]
[h264 @ 0x55b7cde4a7c0] mmco: unref short failure
[h264 @ 0x55b7cde4a7c0] mmco: unref short failure
[h264 @ 0x556e58032f00] mmco: unref short failure
[h264 @ 0x556e58032f00] mmco: unref short failure
[h264 @ 0x556e58032f00] mmco: unref short failure
[h264 @ 0x556e58032f00] mmco: unref short failure
[h264 @ 0x55b7e1002dc0] mmco: unref short failure
[h264 @ 0x55b7e1002dc0] mmco: unref short failure
[h264 @ 0x55b7e1002dc0] mmco: unref short failure
[h264 @ 0x55b7e1002dc0] mmco: unref short failure
[h264 @ 0x55b7e1002dc0] mmco: unref short failure
[h264 @ 0x55b7e1002dc0] mmco: unref short failure
[h264 @ 0x55b7dc7970c0] mmco: unref short failure
[h264 @ 0x55b7dc7970c0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.78it/s][A
  1%|          | 2/221 [00:00<00:57,  3.78it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.78it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.78it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.78it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.78it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.78it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.78it/s][A
  4%|▍         | 9/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.79it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.79it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.79it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.79it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.79it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:51,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:37,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.78it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 125/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.79it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.79it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.79it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.79it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.79it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.79it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.79it/s][A
 65%|██████▌   | 144/221 [00:37<00:20,  3.79it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.79it/s][A
 67%|██████▋   | 149/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.79it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.79it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.79it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.79it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.79it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.79it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.79it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 159/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.79it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.79it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.79it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.79it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.79it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.79it/s][A
 76%|███████▌  | 168/221 [00:44<00:13,  3.79it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.79it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.79it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.79it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.79it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.79it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 178/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.79it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.79it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.79it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.78it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.78it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.78it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.78it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:51<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.78it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.78it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.78it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.78it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.78it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.78it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.79it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:22,  9.83it/s][A
  1%|          | 2/221 [00:00<00:35,  6.19it/s][A
  1%|▏         | 3/221 [00:00<00:37,  5.79it/s][A
  2%|▏         | 4/221 [00:00<00:32,  6.61it/s][A
  2%|▏         | 5/221 [00:00<00:38,  5.68it/s][A
  3%|▎         | 6/221 [00:00<00:34,  6.23it/s][A
  3%|▎         | 7/221 [00:01<00:41,  5.18it/s][A
  4%|▎         | 8/221 [00:01<00:56,  3.75it/s][A
  4%|▍         | 9/221 [00:01<00:55,  3.81it/s][A
  5%|▍         | 10/221 [00:02<01:20,  2.63it/s][A
  5%|▍         | 11/221 [00:02<01:07,  3.11it/s][A
  5%|▌         | 12/221 [00:02<00:56,  3.69it/s][A
  6%|▌         | 13/221 [00:03<01:34,  2.20it/s][A
  7%|▋         | 15/221 [00:04<01:03,  3.24it/s][A
  7%|▋         | 16/221 [00:04<01:02,  3.26it/s][A
  8%|▊         | 17/221 [00:04<01:06,  3.08it/s][A
  8%|▊         | 18/221 [00:05<01:08,  2.97it/s][A
  9%|▊         | 19/221 [00:05<01:03,  3.16it/s][A
  9%|▉         | 20/221 [00:05<00:51,  3.88it/s][A
 10%|▉         | 21/221 [00:05<00:47,  4.22it/s][A
 10%|▉         | 22/221 [00:05<00:41,  4.83it/s][A
 10%|█         | 23/221 [00:05<00:34,  5.68it/s][A
 11%|█         | 24/221 [00:06<00:35,  5.55it/s][A
 11%|█▏        | 25/221 [00:06<00:36,  5.31it/s][A
 12%|█▏        | 26/221 [00:06<00:40,  4.77it/s][A
 12%|█▏        | 27/221 [00:06<00:47,  4.08it/s][A
 13%|█▎        | 28/221 [00:07<00:49,  3.90it/s][A
 13%|█▎        | 29/221 [00:07<00:47,  4.02it/s][A
 14%|█▎        | 30/221 [00:07<00:43,  4.43it/s][A
 14%|█▍        | 31/221 [00:07<00:38,  4.89it/s][A
 14%|█▍        | 32/221 [00:07<00:42,  4.41it/s][A
 15%|█▍        | 33/221 [00:08<00:41,  4.51it/s][A
 15%|█▌        | 34/221 [00:08<00:45,  4.07it/s][A
 16%|█▌        | 35/221 [00:08<00:53,  3.49it/s][A
 16%|█▋        | 36/221 [00:09<00:49,  3.73it/s][A
 17%|█▋        | 37/221 [00:09<00:51,  3.58it/s][A
 17%|█▋        | 38/221 [00:09<00:45,  4.05it/s][A
 18%|█▊        | 39/221 [00:09<00:44,  4.11it/s][A
 18%|█▊        | 40/221 [00:10<00:54,  3.33it/s][A
 19%|█▊        | 41/221 [00:10<00:44,  4.07it/s][A
 19%|█▉        | 42/221 [00:10<00:40,  4.43it/s][A
 19%|█▉        | 43/221 [00:10<00:42,  4.21it/s][A
 20%|█▉        | 44/221 [00:10<00:35,  4.93it/s][A
 20%|██        | 45/221 [00:11<00:33,  5.24it/s][A
 21%|██        | 46/221 [00:11<00:47,  3.66it/s][A
 21%|██▏       | 47/221 [00:11<00:48,  3.62it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.77it/s][A
 22%|██▏       | 49/221 [00:12<00:46,  3.72it/s][A
 23%|██▎       | 50/221 [00:12<00:46,  3.68it/s][A
 23%|██▎       | 51/221 [00:12<00:37,  4.51it/s][A
 24%|██▎       | 52/221 [00:12<00:35,  4.72it/s][A
 24%|██▍       | 53/221 [00:13<00:31,  5.38it/s][A
 24%|██▍       | 54/221 [00:13<00:37,  4.48it/s][A
 25%|██▍       | 55/221 [00:13<00:34,  4.85it/s][A
 25%|██▌       | 56/221 [00:13<00:33,  4.97it/s][A
 26%|██▌       | 57/221 [00:13<00:35,  4.60it/s][A
 26%|██▌       | 58/221 [00:14<00:47,  3.40it/s][A
 27%|██▋       | 59/221 [00:14<00:45,  3.54it/s][A
 28%|██▊       | 61/221 [00:15<00:35,  4.51it/s][A
 28%|██▊       | 62/221 [00:15<00:33,  4.76it/s][A
 29%|██▊       | 63/221 [00:15<00:28,  5.48it/s][A
 29%|██▉       | 64/221 [00:15<00:29,  5.26it/s][A
 29%|██▉       | 65/221 [00:15<00:25,  6.04it/s][A
 30%|██▉       | 66/221 [00:16<00:38,  4.06it/s][A
 30%|███       | 67/221 [00:16<01:01,  2.49it/s][A
 31%|███       | 68/221 [00:17<00:51,  2.99it/s][A
 31%|███       | 69/221 [00:17<01:00,  2.52it/s][A
 32%|███▏      | 70/221 [00:17<00:49,  3.06it/s][A
 32%|███▏      | 71/221 [00:18<00:48,  3.12it/s][A
 33%|███▎      | 72/221 [00:18<00:49,  3.00it/s][A
 33%|███▎      | 73/221 [00:18<00:41,  3.60it/s][A
 33%|███▎      | 74/221 [00:18<00:35,  4.11it/s][A
 34%|███▍      | 75/221 [00:18<00:34,  4.23it/s][A
 34%|███▍      | 76/221 [00:19<00:34,  4.24it/s][A
 35%|███▍      | 77/221 [00:19<00:30,  4.77it/s][A
 35%|███▌      | 78/221 [00:19<00:26,  5.38it/s][A
 36%|███▌      | 79/221 [00:20<00:48,  2.90it/s][A
 36%|███▌      | 80/221 [00:20<00:43,  3.21it/s][A
 37%|███▋      | 81/221 [00:20<00:39,  3.55it/s][A
 37%|███▋      | 82/221 [00:20<00:43,  3.23it/s][A
 38%|███▊      | 83/221 [00:21<00:39,  3.51it/s][A
 38%|███▊      | 84/221 [00:21<00:37,  3.62it/s][A
 38%|███▊      | 85/221 [00:21<00:35,  3.80it/s][A
 39%|███▉      | 86/221 [00:21<00:31,  4.24it/s][A
 39%|███▉      | 87/221 [00:22<00:30,  4.40it/s][A
 40%|███▉      | 88/221 [00:22<00:39,  3.34it/s][A
 40%|████      | 89/221 [00:22<00:45,  2.91it/s][A
 41%|████      | 90/221 [00:23<00:40,  3.22it/s][A
 41%|████      | 91/221 [00:23<00:34,  3.82it/s][A
 42%|████▏     | 92/221 [00:23<00:36,  3.49it/s][A
 42%|████▏     | 93/221 [00:24<01:13,  1.73it/s][A
 43%|████▎     | 94/221 [00:25<01:09,  1.83it/s][A
 43%|████▎     | 95/221 [00:25<00:56,  2.23it/s][A
 43%|████▎     | 96/221 [00:25<00:45,  2.72it/s][A
 44%|████▍     | 97/221 [00:25<00:37,  3.29it/s][A
 44%|████▍     | 98/221 [00:26<00:30,  4.01it/s][A
 45%|████▍     | 99/221 [00:26<00:31,  3.88it/s][A
 45%|████▌     | 100/221 [00:26<00:32,  3.76it/s][A
 46%|████▌     | 101/221 [00:27<00:46,  2.58it/s][A
 46%|████▌     | 102/221 [00:27<00:52,  2.25it/s][A
 47%|████▋     | 103/221 [00:28<00:48,  2.44it/s][A
 47%|████▋     | 104/221 [00:28<00:41,  2.82it/s][A
 48%|████▊     | 105/221 [00:28<00:36,  3.16it/s][A
 48%|████▊     | 106/221 [00:28<00:34,  3.37it/s][A
 48%|████▊     | 107/221 [00:29<00:30,  3.74it/s][A
 49%|████▉     | 108/221 [00:29<00:27,  4.10it/s][A
 49%|████▉     | 109/221 [00:29<00:25,  4.31it/s][A
 50%|████▉     | 110/221 [00:29<00:27,  4.02it/s][A
 50%|█████     | 111/221 [00:30<00:29,  3.75it/s][A
 51%|█████     | 112/221 [00:30<00:29,  3.65it/s][A
 51%|█████     | 113/221 [00:30<00:26,  4.15it/s][A
 52%|█████▏    | 114/221 [00:30<00:21,  4.96it/s][A
 52%|█████▏    | 115/221 [00:30<00:23,  4.54it/s][A
 52%|█████▏    | 116/221 [00:31<00:29,  3.62it/s][A
 53%|█████▎    | 117/221 [00:31<00:25,  4.04it/s][A
 53%|█████▎    | 118/221 [00:31<00:24,  4.14it/s][A
 54%|█████▍    | 119/221 [00:32<00:38,  2.63it/s][A
 54%|█████▍    | 120/221 [00:32<00:33,  2.97it/s][A
 55%|█████▌    | 122/221 [00:33<00:25,  3.82it/s][A
 56%|█████▌    | 123/221 [00:33<00:27,  3.56it/s][A
 56%|█████▌    | 124/221 [00:33<00:23,  4.06it/s][A
 57%|█████▋    | 125/221 [00:33<00:27,  3.53it/s][A
 57%|█████▋    | 126/221 [00:34<00:28,  3.28it/s][A
 57%|█████▋    | 127/221 [00:34<00:29,  3.16it/s][A
 58%|█████▊    | 128/221 [00:34<00:26,  3.45it/s][A
 58%|█████▊    | 129/221 [00:35<00:27,  3.38it/s][A
 59%|█████▉    | 130/221 [00:35<00:23,  3.92it/s][A
 60%|█████▉    | 132/221 [00:35<00:14,  6.07it/s][A
 60%|██████    | 133/221 [00:35<00:17,  5.15it/s][A
 61%|██████    | 134/221 [00:35<00:16,  5.38it/s][A
 61%|██████    | 135/221 [00:36<00:15,  5.49it/s][A
 62%|██████▏   | 136/221 [00:36<00:17,  4.90it/s][A
 62%|██████▏   | 137/221 [00:36<00:15,  5.42it/s][A
 62%|██████▏   | 138/221 [00:36<00:16,  4.90it/s][A
 63%|██████▎   | 139/221 [00:37<00:24,  3.40it/s][A
 63%|██████▎   | 140/221 [00:37<00:22,  3.62it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.77it/s][A
 64%|██████▍   | 142/221 [00:37<00:19,  4.07it/s][A
 65%|██████▍   | 143/221 [00:38<00:26,  2.99it/s][A
 65%|██████▌   | 144/221 [00:38<00:28,  2.68it/s][A
 66%|██████▌   | 145/221 [00:39<00:23,  3.22it/s][A
 66%|██████▌   | 146/221 [00:39<00:18,  3.99it/s][A
 67%|██████▋   | 147/221 [00:39<00:19,  3.84it/s][A
 67%|██████▋   | 148/221 [00:39<00:21,  3.39it/s][A
 67%|██████▋   | 149/221 [00:40<00:18,  3.89it/s][A
 68%|██████▊   | 150/221 [00:40<00:19,  3.69it/s][A
 68%|██████▊   | 151/221 [00:40<00:21,  3.19it/s][A
 69%|██████▉   | 152/221 [00:41<00:27,  2.55it/s][A
 69%|██████▉   | 153/221 [00:41<00:22,  3.02it/s][A
 70%|██████▉   | 154/221 [00:41<00:19,  3.47it/s][A
 70%|███████   | 155/221 [00:41<00:16,  3.91it/s][A
 71%|███████   | 156/221 [00:42<00:20,  3.24it/s][A
 71%|███████   | 157/221 [00:42<00:18,  3.50it/s][A
 71%|███████▏  | 158/221 [00:42<00:17,  3.50it/s][A
 72%|███████▏  | 159/221 [00:43<00:16,  3.85it/s][A
 72%|███████▏  | 160/221 [00:43<00:15,  3.91it/s][A
 73%|███████▎  | 161/221 [00:43<00:18,  3.20it/s][A
 73%|███████▎  | 162/221 [00:43<00:16,  3.49it/s][A
 74%|███████▍  | 163/221 [00:44<00:15,  3.72it/s][A
 74%|███████▍  | 164/221 [00:44<00:17,  3.35it/s][A
 75%|███████▍  | 165/221 [00:44<00:15,  3.63it/s][A
 75%|███████▌  | 166/221 [00:45<00:15,  3.60it/s][A
 76%|███████▌  | 168/221 [00:45<00:14,  3.62it/s][A
 76%|███████▋  | 169/221 [00:45<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:46<00:17,  2.90it/s][A
 77%|███████▋  | 171/221 [00:46<00:14,  3.51it/s][A
 78%|███████▊  | 172/221 [00:46<00:12,  3.99it/s][A
 78%|███████▊  | 173/221 [00:46<00:13,  3.65it/s][A
 79%|███████▊  | 174/221 [00:47<00:17,  2.64it/s][A
 79%|███████▉  | 175/221 [00:47<00:17,  2.70it/s][A
 80%|███████▉  | 176/221 [00:48<00:14,  3.05it/s][A
 80%|████████  | 177/221 [00:48<00:12,  3.62it/s][A
 81%|████████  | 178/221 [00:48<00:10,  4.06it/s][A
 81%|████████  | 179/221 [00:48<00:10,  4.14it/s][A
 81%|████████▏ | 180/221 [00:48<00:08,  4.56it/s][A
 82%|████████▏ | 181/221 [00:49<00:10,  3.76it/s][A
 82%|████████▏ | 182/221 [00:49<00:09,  4.04it/s][A
 83%|████████▎ | 183/221 [00:49<00:09,  4.01it/s][A
 83%|████████▎ | 184/221 [00:49<00:07,  4.72it/s][A
 84%|████████▎ | 185/221 [00:50<00:07,  4.78it/s][A
 84%|████████▍ | 186/221 [00:50<00:08,  3.92it/s][A
 85%|████████▍ | 187/221 [00:50<00:07,  4.26it/s][A
 85%|████████▌ | 188/221 [00:50<00:07,  4.19it/s][A
 86%|████████▌ | 189/221 [00:51<00:08,  3.93it/s][A
 86%|████████▌ | 190/221 [00:51<00:09,  3.29it/s][A
 86%|████████▋ | 191/221 [00:51<00:07,  3.88it/s][A
 87%|████████▋ | 192/221 [00:52<00:09,  3.03it/s][A
 87%|████████▋ | 193/221 [00:52<00:08,  3.48it/s][A
 88%|████████▊ | 194/221 [00:52<00:08,  3.09it/s][A
 88%|████████▊ | 195/221 [00:53<00:08,  3.23it/s][A
 89%|████████▊ | 196/221 [00:53<00:08,  2.93it/s][A
 89%|████████▉ | 197/221 [00:53<00:06,  3.68it/s][A
 90%|████████▉ | 198/221 [00:54<00:09,  2.46it/s][A
 90%|█████████ | 199/221 [00:54<00:07,  2.85it/s][A
 90%|█████████ | 200/221 [00:54<00:07,  2.87it/s][A
 91%|█████████ | 201/221 [00:55<00:06,  2.88it/s][A
 91%|█████████▏| 202/221 [00:55<00:06,  2.78it/s][A
 92%|█████████▏| 203/221 [00:55<00:05,  3.54it/s][A
 92%|█████████▏| 204/221 [00:56<00:07,  2.39it/s][A
 93%|█████████▎| 205/221 [00:56<00:05,  3.02it/s][A
 93%|█████████▎| 206/221 [00:56<00:04,  3.02it/s][A
 94%|█████████▎| 207/221 [00:57<00:04,  3.23it/s][A
 94%|█████████▍| 208/221 [00:57<00:03,  3.96it/s][A
 95%|█████████▍| 209/221 [00:57<00:03,  3.62it/s][A
 95%|█████████▌| 210/221 [00:57<00:03,  3.58it/s][A
 95%|█████████▌| 211/221 [00:58<00:03,  3.33it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  3.62it/s][A
 96%|█████████▋| 213/221 [00:58<00:02,  3.56it/s][A
 97%|█████████▋| 214/221 [00:59<00:02,  2.87it/s][A
 97%|█████████▋| 215/221 [00:59<00:01,  3.13it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  3.01it/s][A
 98%|█████████▊| 217/221 [01:00<00:01,  3.36it/s][A
 99%|█████████▊| 218/221 [01:00<00:00,  3.18it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  2.98it/s][A
100%|█████████▉| 220/221 [01:01<00:00,  3.03it/s][A
100%|██████████| 221/221 [01:01<00:00,  2.99it/s][A100%|██████████| 221/221 [01:01<00:00,  3.59it/s]
09/09/2024 21:40:35 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 1149--===========

09/09/2024 21:40:35 - INFO - __main__ -   {'area_r1': 18.2, 'area_recall': '18.2/36.7/47.6', 'area_ravg': 34.2}
09/09/2024 21:40:35 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 1149--===========

09/09/2024 21:40:35 - INFO - __main__ -   {'forward_r1': 33.6, 'forward_recall': '33.6/59.0/69.8', 'forward_ravg': 54.1}
09/09/2024 21:40:35 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 1149--===========

09/09/2024 21:40:35 - INFO - __main__ -   {'area_video_r1': 41.9, 'area_video_recall': '41.9/70.0/79.9', 'area_video_ravg': 63.9}
09/09/2024 21:40:35 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 1149=======

09/09/2024 21:40:35 - INFO - __main__ -   {'area_video_r1': 41.9, 'area_video_recall': '41.9/70.0/79.9', 'area_video_ravg': 63.9}
09/09/2024 21:40:35 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 1149--===========

09/09/2024 21:40:35 - INFO - __main__ -   {'area_video_r1': 48.5, 'area_video_recall': '48.5/66.2/72.4', 'area_video_ravg': 62.4, 'area_video_back_r1': 49.4, 'area_video_back_recall': '49.4/71.9/79.9', 'area_video_back_ravg': 67.1}
09/09/2024 21:40:35 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 21:40:35 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 21:40:35 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 1149--===========

09/09/2024 21:40:35 - INFO - __main__ -   {'video_r1': 40.7, 'video_recall': '40.7/69.2/79.4', 'video_ravg': 63.1}
09/09/2024 21:40:35 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 21:40:35 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 21:40:35 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 1149--===========

09/09/2024 21:40:35 - INFO - __main__ -   {'video_r1': 52.1, 'video_recall': '52.1/74.5/82.0', 'video_ravg': 69.6}
09/09/2024 21:40:35 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 1049=======

09/09/2024 21:40:35 - INFO - __main__ -   {'video_r1': 52.9, 'video_recall': '52.9/74.5/82.8', 'video_ravg': 70.1}
09/09/2024 21:41:01 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.486194133758545, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.02335791103541851, 'loss_ret%tv%ta--finetune_area/loss_area': 1.233920931816101, 'loss_ret%tv%ta--finetune_area/total_loss': 2.7434730529785156}
 59%|█████▉    | 1150/1945 [6:15:35<27:52:55, 126.26s/it] 59%|█████▉    | 1151/1945 [6:15:39<19:44:43, 89.53s/it]  59%|█████▉    | 1152/1945 [6:15:43<14:03:16, 63.80s/it] 59%|█████▉    | 1153/1945 [6:15:46<10:04:35, 45.80s/it] 59%|█████▉    | 1154/1945 [6:15:50<7:17:45, 33.21s/it] [h264 @ 0x55e50c19d500] mmco: unref short failure
[h264 @ 0x55e50c19d500] mmco: unref short failure
[h264 @ 0x55e50c19d500] mmco: unref short failure
[h264 @ 0x556e58a5a180] mmco: unref short failure
[h264 @ 0x556e58a5a180] mmco: unref short failure
[h264 @ 0x556e58a5a180] mmco: unref short failure
[h264 @ 0x556e58a5a180] mmco: unref short failure
 59%|█████▉    | 1155/1945 [6:15:54<5:21:04, 24.39s/it] 59%|█████▉    | 1156/1945 [6:15:58<3:59:30, 18.21s/it] 59%|█████▉    | 1157/1945 [6:16:02<3:02:28, 13.89s/it] 60%|█████▉    | 1158/1945 [6:16:05<2:22:29, 10.86s/it] 60%|█████▉    | 1159/1945 [6:16:09<1:54:26,  8.74s/it] 60%|█████▉    | 1160/1945 [6:16:13<1:34:49,  7.25s/it] 60%|█████▉    | 1161/1945 [6:16:17<1:21:04,  6.20s/it] 60%|█████▉    | 1162/1945 [6:16:21<1:11:31,  5.48s/it] 60%|█████▉    | 1163/1945 [6:16:24<1:04:50,  4.98s/it] 60%|█████▉    | 1164/1945 [6:16:28<1:00:04,  4.61s/it] 60%|█████▉    | 1165/1945 [6:16:32<56:47,  4.37s/it]   60%|█████▉    | 1166/1945 [6:16:36<54:24,  4.19s/it]/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e503ee740] mmco: unref short failure
[h264 @ 0x556e503ee740] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e40827340] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e4fd436b40] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e4fd5215c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e42765080] mmco: unref short failure
[h264 @ 0x556e42765080] mmco: unref short failure
[h264 @ 0x55e4fd737600] mmco: unref short failure
[h264 @ 0x556e4232c780] mmco: unref short failure
[h264 @ 0x556e4232c780] mmco: unref short failure
[h264 @ 0x55b7cc40b9c0] mmco: unref short failure
[h264 @ 0x55b7cc40b9c0] mmco: unref short failure
[h264 @ 0x55b7cb34e600] mmco: unref short failure
[h264 @ 0x55e4ffe12900] mmco: unref short failure
[h264 @ 0x55e4ffe12900] mmco: unref short failure
[h264 @ 0x55e4ffe12900] mmco: unref short failure
[h264 @ 0x556e52d8be40] mmco: unref short failure
[h264 @ 0x556e42960bc0] mmco: unref short failure
[h264 @ 0x556e42960bc0] mmco: unref short failure
[h264 @ 0x556e451d5840] mmco: unref short failure
[h264 @ 0x556e451d5840] mmco: unref short failure
[h264 @ 0x55b7cd137b00] mmco: unref short failure
[h264 @ 0x55b7cd137b00] mmco: unref short failure
[h264 @ 0x55e4fda073c0] mmco: unref short failure
[h264 @ 0x55e4fda073c0] mmco: unref short failure
[h264 @ 0x556e47ca46c0] mmco: unref short failure
[h264 @ 0x55e501562bc0] mmco: unref short failure
[h264 @ 0x556e54691940] mmco: unref short failure
[h264 @ 0x556e54691940] mmco: unref short failure
[h264 @ 0x556e426d5180] mmco: unref short failure
[h264 @ 0x556e426d5180] mmco: unref short failure
[h264 @ 0x556e46a21640] mmco: unref short failure
[h264 @ 0x55e4fe1d34c0] mmco: unref short failure
[h264 @ 0x55e503c48940] mmco: unref short failure
[h264 @ 0x55b7cae10bc0] mmco: unref short failure
[h264 @ 0x55b7cae10bc0] mmco: unref short failure
[h264 @ 0x55e4fed16e00] mmco: unref short failure
[h264 @ 0x55b7cbe6f500] mmco: unref short failure
[h264 @ 0x556e46423a80] mmco: unref short failure
[h264 @ 0x556e5216f8c0] mmco: unref short failure
[h264 @ 0x556e43310ac0] mmco: unref short failure
[h264 @ 0x55b7cbf56380] mmco: unref short failure
[h264 @ 0x55b7cbf56380] mmco: unref short failure
[h264 @ 0x55e4ffdca200] mmco: unref short failure
[h264 @ 0x55e4ffdca200] mmco: unref short failure
[h264 @ 0x556e5ba8ff40] mmco: unref short failure
[h264 @ 0x556e5ba8ff40] mmco: unref short failure
[h264 @ 0x55e4fcf5bb40] mmco: unref short failure
[h264 @ 0x55b7cbfdf4c0] mmco: unref short failure
[h264 @ 0x55b7cbfdf4c0] mmco: unref short failure
[h264 @ 0x55e502f5f700] mmco: unref short failure
[h264 @ 0x55e502f5f700] mmco: unref short failure
[h264 @ 0x556e5222d6c0] mmco: unref short failure
[h264 @ 0x556e5222d6c0] mmco: unref short failure
[h264 @ 0x556e46576e00] mmco: unref short failure
[h264 @ 0x556e46576e00] mmco: unref short failure
[h264 @ 0x55e4fd1e39c0] mmco: unref short failure
[h264 @ 0x556e544eba00] mmco: unref short failure
[h264 @ 0x556e544f3140] mmco: unref short failure
[h264 @ 0x556e544f3140] mmco: unref short failure
not have audios ua_Kowav7hg.20
 60%|██████    | 1167/1945 [6:18:58<9:51:47, 45.64s/it] 60%|██████    | 1168/1945 [6:19:06<7:23:43, 34.26s/it][h264 @ 0x556e45cd5e40] mmco: unref short failure
[h264 @ 0x55e500288780] mmco: unref short failure
[h264 @ 0x55e500288780] mmco: unref short failure
[h264 @ 0x55e500050d40] mmco: unref short failure
[h264 @ 0x556e5786bfc0] mmco: unref short failure
[h264 @ 0x55b7ce3bc480] mmco: unref short failure
 60%|██████    | 1169/1945 [6:19:14<5:40:42, 26.34s/it][h264 @ 0x55e5009474c0] mmco: unref short failure
 60%|██████    | 1170/1945 [6:19:22<4:29:49, 20.89s/it][h264 @ 0x55b7d2562600] mmco: unref short failure
[h264 @ 0x55b7d2562600] mmco: unref short failure
[h264 @ 0x556e42a06480] mmco: unref short failure
[h264 @ 0x556e42a06480] mmco: unref short failure
 60%|██████    | 1171/1945 [6:19:29<3:37:39, 16.87s/it][h264 @ 0x556e53718c40] mmco: unref short failure
[h264 @ 0x556e53718c40] mmco: unref short failure
[h264 @ 0x55e4fdca0440] mmco: unref short failure
 60%|██████    | 1172/1945 [6:19:37<3:00:44, 14.03s/it][h264 @ 0x556e5b069800] mmco: unref short failure
[h264 @ 0x556e5b069800] mmco: unref short failure
 60%|██████    | 1173/1945 [6:19:45<2:37:20, 12.23s/it][h264 @ 0x556e531ce4c0] mmco: unref short failure
[h264 @ 0x556e531ce4c0] mmco: unref short failure
 60%|██████    | 1174/1945 [6:19:52<2:18:48, 10.80s/it][h264 @ 0x55e501a40080] mmco: unref short failure
[h264 @ 0x55e501a40080] mmco: unref short failure
[h264 @ 0x55e501a40080] mmco: unref short failure
[h264 @ 0x55e501a40080] mmco: unref short failure
[h264 @ 0x55e50821ffc0] mmco: unref short failure
[h264 @ 0x55e50821ffc0] mmco: unref short failure
[h264 @ 0x55e500982340] mmco: unref short failure
[h264 @ 0x556e463bfa40] mmco: unref short failure
[h264 @ 0x556e43beb340] mmco: unref short failure
[h264 @ 0x556e43beb340] mmco: unref short failure
[h264 @ 0x556e43beb340] mmco: unref short failure
[h264 @ 0x556e43beb340] mmco: unref short failure
[h264 @ 0x55b7d561ff40] mmco: unref short failure
[h264 @ 0x556e43448500] mmco: unref short failure
[h264 @ 0x55b7d0edf180] mmco: unref short failure
[h264 @ 0x55b7d0edf180] mmco: unref short failure
[h264 @ 0x556e44cdaf40] mmco: unref short failure
[h264 @ 0x55e4ff28c140] mmco: unref short failure
[h264 @ 0x55e4ff28c140] mmco: unref short failure
[h264 @ 0x556e5d476a40] mmco: unref short failure
[h264 @ 0x55e507d5f1c0] mmco: unref short failure
[h264 @ 0x556e58b5cbc0] mmco: unref short failure
[h264 @ 0x55b7d4ec7340] mmco: unref short failure
[h264 @ 0x55b7d4ec7340] mmco: unref short failure
[h264 @ 0x556e5d11f7c0] mmco: unref short failure
[h264 @ 0x556e5d11f7c0] mmco: unref short failure
[h264 @ 0x556e42805b80] mmco: unref short failure
[h264 @ 0x556e42805b80] mmco: unref short failure
 60%|██████    | 1175/1945 [6:21:07<6:23:36, 29.89s/it][h264 @ 0x55b7cecd3a80] mmco: unref short failure
[h264 @ 0x556e42ed1700] mmco: unref short failure
[h264 @ 0x55b7cebee740] mmco: unref short failure
[h264 @ 0x556e4613db00] mmco: unref short failure
[h264 @ 0x556e4613db00] mmco: unref short failure
[h264 @ 0x556e45dcc9c0] mmco: unref short failure
 60%|██████    | 1176/1945 [6:21:16<5:03:33, 23.69s/it][h264 @ 0x556e4224b5c0] mmco: unref short failure
[h264 @ 0x556e4224b5c0] mmco: unref short failure
[h264 @ 0x55e4fe5ece80] mmco: unref short failure
[h264 @ 0x55e4fe5ece80] mmco: unref short failure
[h264 @ 0x556e55ffe2c0] mmco: unref short failure
[h264 @ 0x556e55ffe2c0] mmco: unref short failure
 61%|██████    | 1177/1945 [6:21:25<4:06:56, 19.29s/it][h264 @ 0x556e4dcddd40] mmco: unref short failure
 61%|██████    | 1178/1945 [6:21:32<3:21:46, 15.78s/it][h264 @ 0x556e43b55000] mmco: unref short failure
[h264 @ 0x55b7d6dccf00] mmco: unref short failure
[h264 @ 0x556e556ca2c0] mmco: unref short failure
[h264 @ 0x556e556ca2c0] mmco: unref short failure
 61%|██████    | 1179/1945 [6:21:41<2:53:37, 13.60s/it] 61%|██████    | 1180/1945 [6:21:48<2:27:45, 11.59s/it] 61%|██████    | 1181/1945 [6:21:55<2:09:30, 10.17s/it][h264 @ 0x55e504a76780] mmco: unref short failure
[h264 @ 0x55e504a76780] mmco: unref short failure
[h264 @ 0x55e5055939c0] mmco: unref short failure
[h264 @ 0x55e5055939c0] mmco: unref short failure
[h264 @ 0x556e585c9e80] mmco: unref short failure
[h264 @ 0x556e585c9e80] mmco: unref short failure
[h264 @ 0x556e60beae00] mmco: unref short failure
[h264 @ 0x556e60beae00] mmco: unref short failure
 61%|██████    | 1182/1945 [6:22:01<1:54:23,  9.00s/it][h264 @ 0x55b7d5170580] mmco: unref short failure
[h264 @ 0x55b7d5170580] mmco: unref short failure
[h264 @ 0x556e55e6d180] mmco: unref short failure
[h264 @ 0x55b7cf51c400] mmco: unref short failure
[h264 @ 0x556e52b6c540] mmco: unref short failure
[h264 @ 0x556e574d9c00] mmco: unref short failure
[h264 @ 0x556e571d9980] mmco: unref short failure
[h264 @ 0x55b7d0cdcbc0] mmco: unref short failure
[h264 @ 0x55b7d0cdcbc0] mmco: unref short failure
[h264 @ 0x55b7cea906c0] mmco: unref short failure
[h264 @ 0x55b7cea906c0] mmco: unref short failure
[h264 @ 0x556e544f2740] mmco: unref short failure
[h264 @ 0x55e50616bec0] mmco: unref short failure
[h264 @ 0x55e50616bec0] mmco: unref short failure
[h264 @ 0x55e50616bec0] mmco: unref short failure
[h264 @ 0x55e50616bec0] mmco: unref short failure
[h264 @ 0x556e47b57180] mmco: unref short failure
[h264 @ 0x556e47b57180] mmco: unref short failure
[h264 @ 0x55b7cc6a2b80] mmco: unref short failure
[h264 @ 0x55b7cc6a2b80] mmco: unref short failure
[h264 @ 0x556e5cda05c0] mmco: unref short failure
[h264 @ 0x556e5cda05c0] mmco: unref short failure
[h264 @ 0x556e564acb00] mmco: unref short failure
[h264 @ 0x556e564acb00] mmco: unref short failure
[h264 @ 0x55e4fcf90b80] mmco: unref short failure
 61%|██████    | 1183/1945 [6:23:11<5:44:58, 27.16s/it][h264 @ 0x55b7d07bcd40] mmco: unref short failure
[h264 @ 0x55b7d07bcd40] mmco: unref short failure
[h264 @ 0x55e503b40e40] mmco: unref short failure
[h264 @ 0x55e503b40e40] mmco: unref short failure
 61%|██████    | 1184/1945 [6:23:17<4:26:33, 21.02s/it][h264 @ 0x556e54506f40] mmco: unref short failure
[h264 @ 0x556e54506f40] mmco: unref short failure
[h264 @ 0x556e60182580] mmco: unref short failure
[h264 @ 0x55e4fcf90740] mmco: unref short failure
[h264 @ 0x55e4fcf90740] mmco: unref short failure
[h264 @ 0x55e502f40080] mmco: unref short failure
[h264 @ 0x55b7d2375e00] mmco: unref short failure
[h264 @ 0x55b7d08ee780] mmco: unref short failure
[h264 @ 0x55b7d08ee780] mmco: unref short failure
 61%|██████    | 1185/1945 [6:23:24<3:31:49, 16.72s/it] 61%|██████    | 1186/1945 [6:23:31<2:53:40, 13.73s/it][h264 @ 0x556e5d808a40] mmco: unref short failure
[h264 @ 0x556e5d808a40] mmco: unref short failure
[h264 @ 0x556e516e71c0] mmco: unref short failure
[h264 @ 0x556e516e71c0] mmco: unref short failure
 61%|██████    | 1187/1945 [6:23:38<2:27:54, 11.71s/it][h264 @ 0x55e501361500] mmco: unref short failure
[h264 @ 0x55e501361500] mmco: unref short failure
[h264 @ 0x556e4331b880] mmco: unref short failure
[h264 @ 0x556e4331b880] mmco: unref short failure
[h264 @ 0x556e56f636c0] mmco: unref short failure
[h264 @ 0x556e56f636c0] mmco: unref short failure
[h264 @ 0x556e4a088880] mmco: unref short failure
 61%|██████    | 1188/1945 [6:23:46<2:14:01, 10.62s/it][h264 @ 0x556e54506f40] mmco: unref short failure
[h264 @ 0x556e54506f40] mmco: unref short failure
 61%|██████    | 1189/1945 [6:23:53<2:02:54,  9.75s/it][h264 @ 0x556e56f62440] mmco: unref short failure
 61%|██████    | 1190/1945 [6:24:01<1:53:31,  9.02s/it][h264 @ 0x55b7d1347fc0] mmco: unref short failure
[h264 @ 0x55b7d1347fc0] mmco: unref short failure
[h264 @ 0x556e46f84640] mmco: unref short failure
[h264 @ 0x556e65f6bd00] mmco: unref short failure
[h264 @ 0x556e4cfd9040] mmco: unref short failure
[h264 @ 0x556e4cfd9040] mmco: unref short failure
[h264 @ 0x556e62b4fdc0] mmco: unref short failure
[h264 @ 0x556e4a0881c0] mmco: unref short failure
[h264 @ 0x556e4a0881c0] mmco: unref short failure
[h264 @ 0x55b7dcc15dc0] mmco: unref short failure
[h264 @ 0x55b7dcc15dc0] mmco: unref short failure
[h264 @ 0x55b7d9c58780] mmco: unref short failure
[h264 @ 0x55b7d9c58780] mmco: unref short failure
[h264 @ 0x55b7ce7a4d40] mmco: unref short failure
[h264 @ 0x55b7ce7a4d40] mmco: unref short failure
[h264 @ 0x556e5d808cc0] mmco: unref short failure
[h264 @ 0x55b7cff0f100] mmco: unref short failure
[h264 @ 0x556e43065180] mmco: unref short failure
 61%|██████    | 1191/1945 [6:25:13<5:50:42, 27.91s/it][h264 @ 0x55b7cd001b00] mmco: unref short failure
[h264 @ 0x556e52e65d40] mmco: unref short failure
 61%|██████▏   | 1192/1945 [6:25:20<4:32:52, 21.74s/it][h264 @ 0x55e4fcdb8800] mmco: unref short failure
[h264 @ 0x55e4fcdb8800] mmco: unref short failure
[h264 @ 0x556e5f444d80] mmco: unref short failure
[h264 @ 0x556e5f444d80] mmco: unref short failure
[h264 @ 0x55e50d0a50c0] mmco: unref short failure
[h264 @ 0x556e52351d00] mmco: unref short failure
[h264 @ 0x556e52351d00] mmco: unref short failure
 61%|██████▏   | 1193/1945 [6:25:27<3:38:00, 17.39s/it] 61%|██████▏   | 1194/1945 [6:25:34<2:57:14, 14.16s/it] 61%|██████▏   | 1195/1945 [6:25:40<2:28:13, 11.86s/it][h264 @ 0x55e50a5cc180] mmco: unref short failure
[h264 @ 0x55e50a5cc180] mmco: unref short failure
[h264 @ 0x556e4293b480] mmco: unref short failure
 61%|██████▏   | 1196/1945 [6:25:47<2:08:55, 10.33s/it][h264 @ 0x556e448a08c0] mmco: unref short failure
[h264 @ 0x55e502fb3440] mmco: unref short failure
[h264 @ 0x55e502fb3440] mmco: unref short failure
 62%|██████▏   | 1197/1945 [6:25:56<2:02:34,  9.83s/it] 62%|██████▏   | 1198/1945 [6:26:06<2:02:39,  9.85s/it][h264 @ 0x55b7d6d46cc0] mmco: unref short failure
[h264 @ 0x55b7d6d46cc0] mmco: unref short failure
[h264 @ 0x55e4fed21940] mmco: unref short failure
[h264 @ 0x55e4fed21940] mmco: unref short failure
[h264 @ 0x55e4ff340f40] mmco: unref short failure
[h264 @ 0x55e4ff340f40] mmco: unref short failure
[h264 @ 0x55e510300600] mmco: unref short failure
[h264 @ 0x55e510300600] mmco: unref short failure
[h264 @ 0x55e510300600] mmco: unref short failure
[h264 @ 0x55e510300600] mmco: unref short failure
[h264 @ 0x556e60734680] mmco: unref short failure
[h264 @ 0x556e60734680] mmco: unref short failure
[h264 @ 0x556e4ba82d40] mmco: unref short failure
[h264 @ 0x556e4ba82d40] mmco: unref short failure
[h264 @ 0x556e5af14080] mmco: unref short failure
[h264 @ 0x556e5773bd00] mmco: unref short failure
[h264 @ 0x556e5773bd00] mmco: unref short failure
[h264 @ 0x556e44ba2fc0] mmco: unref short failure
[h264 @ 0x556e44ba2fc0] mmco: unref short failure
[h264 @ 0x556e45f62b00] mmco: unref short failure
[h264 @ 0x55b7d5c9aec0] mmco: unref short failure
[h264 @ 0x55b7d5c9aec0] mmco: unref short failure
[h264 @ 0x55e510c42900] mmco: unref short failure
[h264 @ 0x55b7cc571ec0] mmco: unref short failure
[h264 @ 0x55b7cc571ec0] mmco: unref short failure
[h264 @ 0x556e4d0cd940] mmco: unref short failure
[h264 @ 0x556e4d0cd940] mmco: unref short failure
 62%|██████▏   | 1199/1945 [6:27:23<6:14:26, 30.12s/it]09/09/2024 21:52:52 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 21:52:52 - INFO - __main__ -   start running ret%tv validation...
[h264 @ 0x55b7ce7bc9c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b7cf6d1880] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e507155b40] mmco: unref short failure
[h264 @ 0x556e4b665380] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e45c8fbc0] mmco: unref short failure
[h264 @ 0x556e45c8fbc0] mmco: unref short failure
[h264 @ 0x556e52b0a300] mmco: unref short failure
[h264 @ 0x556e5c759e80] mmco: unref short failure
[h264 @ 0x556e56f40a80] mmco: unref short failure
[h264 @ 0x556e56f40a80] mmco: unref short failure
[h264 @ 0x55e50e4a44c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e50d05b080] mmco: unref short failure
[h264 @ 0x55e50d05b080] mmco: unref short failure
[h264 @ 0x55e5094e6480] mmco: unref short failure
[h264 @ 0x55e5094e6480] mmco: unref short failure
[h264 @ 0x55e4ff837840] mmco: unref short failure
[h264 @ 0x55e4ff837840] mmco: unref short failure
[h264 @ 0x556e5fb309c0] mmco: unref short failure
[h264 @ 0x556e5fb309c0] mmco: unref short failure
[h264 @ 0x556e54b16b00] mmco: unref short failure
[h264 @ 0x556e54b16b00] mmco: unref short failure
[h264 @ 0x55b7d930ca00] mmco: unref short failure
[h264 @ 0x55b7d930ca00] mmco: unref short failure
[h264 @ 0x556e42f3de80] mmco: unref short failure
[h264 @ 0x556e42f3de80] mmco: unref short failure
[h264 @ 0x55b7d3d63200] mmco: unref short failure
[h264 @ 0x55b7d3d63200] mmco: unref short failure
[h264 @ 0x556e53f2bfc0] mmco: unref short failure
[h264 @ 0x556e53f2bfc0] mmco: unref short failure
[h264 @ 0x55e50b44c880] mmco: unref short failure
[h264 @ 0x556e46d47880] mmco: unref short failure
[h264 @ 0x556e483490c0] mmco: unref short failure
[h264 @ 0x556e5697b8c0] mmco: unref short failure
[h264 @ 0x556e5bbd3e80] mmco: unref short failure
[h264 @ 0x556e5bbd3e80] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  1%|▏         | 3/221 [00:00<00:10, 19.96it/s][A
  3%|▎         | 6/221 [00:00<00:10, 20.63it/s][A
  4%|▍         | 9/221 [00:01<00:40,  5.20it/s][A[h264 @ 0x556e44774c40] mmco: unref short failure
[h264 @ 0x556e44774c40] mmco: unref short failure

  5%|▍         | 11/221 [00:02<01:07,  3.10it/s][A
  6%|▌         | 13/221 [00:02<00:54,  3.79it/s][A[h264 @ 0x55e501d610c0] mmco: unref short failure
[h264 @ 0x55e501d610c0] mmco: unref short failure

  6%|▋         | 14/221 [00:04<01:38,  2.11it/s][A
  7%|▋         | 16/221 [00:08<03:29,  1.02s/it][A
  8%|▊         | 17/221 [00:08<02:58,  1.14it/s][A
  8%|▊         | 18/221 [00:09<02:28,  1.37it/s][A
 10%|▉         | 21/221 [00:09<01:19,  2.52it/s][A
 11%|█         | 24/221 [00:09<00:50,  3.93it/s][A
 12%|█▏        | 27/221 [00:09<00:35,  5.44it/s][A[h264 @ 0x556e4ce98c80] mmco: unref short failure
[h264 @ 0x556e4ce98c80] mmco: unref short failure
[h264 @ 0x556e4ce98c80] mmco: unref short failure
[h264 @ 0x556e4ce98c80] mmco: unref short failure

 13%|█▎        | 29/221 [00:12<01:40,  1.91it/s][A
 14%|█▍        | 32/221 [00:12<01:11,  2.63it/s][A
 16%|█▌        | 35/221 [00:13<00:51,  3.58it/s][A
 17%|█▋        | 37/221 [00:13<00:44,  4.16it/s][A
 18%|█▊        | 39/221 [00:13<00:35,  5.12it/s][A
 19%|█▉        | 42/221 [00:13<00:24,  7.21it/s][A
 21%|██        | 46/221 [00:13<00:16, 10.62it/s][A[h264 @ 0x556e5ff75dc0] mmco: unref short failure
[h264 @ 0x556e5ff75dc0] mmco: unref short failure

 22%|██▏       | 49/221 [00:16<01:09,  2.48it/s][A
 24%|██▎       | 52/221 [00:17<00:50,  3.33it/s][A
 24%|██▍       | 54/221 [00:17<00:48,  3.43it/s][A
 25%|██▌       | 56/221 [00:17<00:38,  4.24it/s][A
 26%|██▌       | 58/221 [00:18<00:32,  4.96it/s][A
 27%|██▋       | 60/221 [00:18<00:28,  5.67it/s][A
 29%|██▊       | 63/221 [00:18<00:20,  7.69it/s][A
 29%|██▉       | 65/221 [00:18<00:17,  8.90it/s][A
 30%|███       | 67/221 [00:18<00:18,  8.33it/s][A
 31%|███       | 69/221 [00:19<00:21,  7.19it/s][A
 32%|███▏      | 71/221 [00:19<00:24,  6.09it/s][A
 33%|███▎      | 73/221 [00:19<00:21,  7.02it/s][A
 34%|███▍      | 75/221 [00:19<00:18,  7.82it/s][A[h264 @ 0x556e56719580] mmco: unref short failure
[h264 @ 0x556e56719580] mmco: unref short failure

 35%|███▍      | 77/221 [00:24<01:41,  1.42it/s][A
 35%|███▌      | 78/221 [00:24<01:26,  1.65it/s][A
 37%|███▋      | 81/221 [00:24<00:58,  2.40it/s][A
 38%|███▊      | 83/221 [00:24<00:43,  3.15it/s][A
 38%|███▊      | 84/221 [00:25<00:49,  2.77it/s][A
 38%|███▊      | 85/221 [00:25<00:43,  3.10it/s][A
 39%|███▉      | 86/221 [00:25<00:39,  3.43it/s][A
 40%|███▉      | 88/221 [00:25<00:26,  5.02it/s][A
 41%|████      | 90/221 [00:26<00:28,  4.54it/s][A
 41%|████      | 91/221 [00:26<00:25,  5.08it/s][A
 42%|████▏     | 92/221 [00:29<01:33,  1.37it/s][A
 43%|████▎     | 96/221 [00:29<00:42,  2.95it/s][A
 44%|████▍     | 98/221 [00:29<00:32,  3.84it/s][A
 45%|████▌     | 100/221 [00:29<00:26,  4.58it/s][A
 46%|████▌     | 102/221 [00:30<00:31,  3.77it/s][A
 47%|████▋     | 103/221 [00:30<00:30,  3.90it/s][A
 48%|████▊     | 106/221 [00:30<00:21,  5.23it/s][A
 48%|████▊     | 107/221 [00:31<00:21,  5.27it/s][A
 50%|████▉     | 110/221 [00:31<00:14,  7.87it/s][A
 51%|█████     | 112/221 [00:31<00:15,  6.90it/s][A
 52%|█████▏    | 114/221 [00:31<00:13,  7.79it/s][A
 52%|█████▏    | 116/221 [00:31<00:12,  8.36it/s][A
 53%|█████▎    | 118/221 [00:32<00:13,  7.43it/s][A
 54%|█████▍    | 120/221 [00:32<00:11,  8.87it/s][A
 55%|█████▌    | 122/221 [00:32<00:10,  9.36it/s][A
 56%|█████▌    | 124/221 [00:32<00:11,  8.23it/s][A
 57%|█████▋    | 125/221 [00:33<00:22,  4.33it/s][A
 57%|█████▋    | 127/221 [00:33<00:16,  5.82it/s][A
 58%|█████▊    | 129/221 [00:33<00:12,  7.38it/s][A
 59%|█████▉    | 131/221 [00:34<00:10,  8.22it/s][A
 60%|██████    | 133/221 [00:36<00:40,  2.17it/s][A
 62%|██████▏   | 136/221 [00:36<00:24,  3.40it/s][A
 62%|██████▏   | 138/221 [00:36<00:20,  3.98it/s][A
 63%|██████▎   | 140/221 [00:37<00:20,  4.00it/s][A
 64%|██████▍   | 142/221 [00:37<00:16,  4.65it/s][A
 65%|██████▍   | 143/221 [00:37<00:15,  5.02it/s][A
 66%|██████▌   | 145/221 [00:37<00:11,  6.58it/s][A
 67%|██████▋   | 148/221 [00:38<00:07,  9.46it/s][A
 69%|██████▉   | 152/221 [00:38<00:05, 11.73it/s][A
 71%|███████   | 156/221 [00:38<00:04, 13.59it/s][A
 72%|███████▏  | 160/221 [00:39<00:10,  6.05it/s][A
 73%|███████▎  | 162/221 [00:40<00:13,  4.25it/s][A
 74%|███████▍  | 163/221 [00:40<00:12,  4.56it/s][A
 74%|███████▍  | 164/221 [00:41<00:12,  4.70it/s][A
 75%|███████▌  | 166/221 [00:41<00:09,  5.63it/s][A
 76%|███████▌  | 167/221 [00:42<00:15,  3.52it/s][A
 76%|███████▌  | 168/221 [00:42<00:13,  3.98it/s][A
 76%|███████▋  | 169/221 [00:42<00:11,  4.57it/s][A
 77%|███████▋  | 171/221 [00:42<00:08,  6.18it/s][A
 78%|███████▊  | 172/221 [00:43<00:12,  3.82it/s][A
 79%|███████▉  | 175/221 [00:43<00:08,  5.60it/s][A
 81%|████████  | 178/221 [00:43<00:05,  8.24it/s][A
 82%|████████▏ | 182/221 [00:43<00:03, 11.62it/s][A
 83%|████████▎ | 184/221 [00:45<00:09,  3.81it/s][A
 84%|████████▍ | 186/221 [00:45<00:08,  4.37it/s][A
 85%|████████▌ | 188/221 [00:45<00:06,  5.18it/s][A
 86%|████████▌ | 190/221 [00:45<00:05,  5.76it/s][A
 86%|████████▋ | 191/221 [00:46<00:04,  6.13it/s][A
 87%|████████▋ | 192/221 [00:46<00:04,  6.43it/s][A
 89%|████████▊ | 196/221 [00:46<00:02, 11.24it/s][A
 90%|████████▉ | 198/221 [00:46<00:02,  8.84it/s][A
 91%|█████████ | 201/221 [00:46<00:01, 11.44it/s][A
 92%|█████████▏| 203/221 [00:46<00:01, 12.45it/s][A
 93%|█████████▎| 205/221 [00:47<00:01, 12.22it/s][A 94%|█████████▎| 207/221 [00:47<00:03,  4.39it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.78it/s][A
  1%|          | 2/221 [00:00<00:57,  3.79it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.78it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.78it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.78it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.78it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.78it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.78it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.78it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.78it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.78it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.78it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.78it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.78it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.78it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.78it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.78it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.78it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.78it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.78it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.78it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.78it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.78it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.78it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.78it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:47,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.78it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.78it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.78it/s][A
 24%|██▍       | 53/221 [00:14<00:44,  3.78it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.78it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.78it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.78it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.78it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.78it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.78it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.78it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.78it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.78it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.78it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.78it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.78it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.78it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.78it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.78it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.78it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.78it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.78it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.78it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.78it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.78it/s][A
 43%|████▎     | 96/221 [00:25<00:33,  3.78it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.78it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.78it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.78it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.78it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.78it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.78it/s][A
 48%|████▊     | 106/221 [00:28<00:30,  3.78it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.78it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.78it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.78it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.78it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.78it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.78it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.78it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 115/221 [00:30<00:28,  3.78it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.78it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.78it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.78it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.78it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.78it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.78it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.78it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.78it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.78it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.78it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.78it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.78it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.78it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.78it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 140/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.78it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.78it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.78it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.78it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.78it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.78it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.78it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.78it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.78it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.78it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.78it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.78it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.78it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.78it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.78it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.78it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.78it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.78it/s][A
 76%|███████▌  | 168/221 [00:44<00:14,  3.78it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.78it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.78it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.78it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.79it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.78it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.78it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.78it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.78it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.78it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.78it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.78it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.78it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.78it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.78it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.78it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.78it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.78it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.78it/s][A
 87%|████████▋ | 193/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.78it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [00:56<00:02,  3.78it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.78it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.78it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.78it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.78it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.78it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.78it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.78it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.78it/s][A100%|██████████| 221/221 [00:58<00:00,  3.78it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  1%|          | 2/221 [00:00<00:36,  5.94it/s][A
  1%|▏         | 3/221 [00:00<00:38,  5.69it/s][A
  2%|▏         | 4/221 [00:00<00:34,  6.36it/s][A
  2%|▏         | 5/221 [00:00<00:38,  5.64it/s][A
  3%|▎         | 6/221 [00:00<00:34,  6.24it/s][A
  3%|▎         | 7/221 [00:01<00:42,  5.05it/s][A
  4%|▎         | 8/221 [00:01<00:54,  3.87it/s][A
  4%|▍         | 9/221 [00:01<00:54,  3.90it/s][A
  5%|▍         | 10/221 [00:02<01:19,  2.67it/s][A
  5%|▍         | 11/221 [00:02<01:06,  3.15it/s][A
  5%|▌         | 12/221 [00:02<00:54,  3.84it/s][A
  6%|▌         | 13/221 [00:03<01:30,  2.31it/s][A
  7%|▋         | 15/221 [00:03<01:01,  3.35it/s][A
  7%|▋         | 16/221 [00:04<01:01,  3.33it/s][A
  8%|▊         | 17/221 [00:04<01:07,  3.00it/s][A
  8%|▊         | 18/221 [00:05<01:10,  2.89it/s][A
  9%|▊         | 19/221 [00:05<01:06,  3.03it/s][A
  9%|▉         | 20/221 [00:05<00:54,  3.72it/s][A
 10%|▉         | 21/221 [00:05<00:51,  3.86it/s][A
 10%|▉         | 22/221 [00:05<00:45,  4.41it/s][A
 11%|█         | 24/221 [00:06<00:36,  5.39it/s][A
 11%|█▏        | 25/221 [00:06<00:38,  5.09it/s][A
 12%|█▏        | 26/221 [00:06<00:40,  4.77it/s][A
 12%|█▏        | 27/221 [00:06<00:45,  4.23it/s][A
 13%|█▎        | 28/221 [00:07<00:49,  3.93it/s][A
 13%|█▎        | 29/221 [00:07<00:45,  4.24it/s][A
 14%|█▎        | 30/221 [00:07<00:42,  4.51it/s][A
 14%|█▍        | 31/221 [00:07<00:40,  4.73it/s][A
 14%|█▍        | 32/221 [00:08<00:42,  4.48it/s][A
 15%|█▍        | 33/221 [00:08<00:41,  4.57it/s][A
 15%|█▌        | 34/221 [00:08<00:45,  4.11it/s][A
 16%|█▌        | 35/221 [00:08<00:53,  3.47it/s][A
 16%|█▋        | 36/221 [00:09<00:49,  3.71it/s][A
 17%|█▋        | 37/221 [00:09<00:51,  3.58it/s][A
 17%|█▋        | 38/221 [00:09<00:45,  4.01it/s][A
 18%|█▊        | 39/221 [00:09<00:44,  4.08it/s][A
 18%|█▊        | 40/221 [00:10<00:55,  3.27it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.83it/s][A
 19%|█▉        | 42/221 [00:10<00:41,  4.26it/s][A
 19%|█▉        | 43/221 [00:10<00:43,  4.13it/s][A
 20%|█▉        | 44/221 [00:11<00:36,  4.85it/s][A
 20%|██        | 45/221 [00:11<00:33,  5.18it/s][A
 21%|██        | 46/221 [00:11<00:47,  3.71it/s][A
 21%|██▏       | 47/221 [00:11<00:48,  3.56it/s][A
 22%|██▏       | 48/221 [00:12<00:46,  3.69it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.76it/s][A
 23%|██▎       | 50/221 [00:12<00:46,  3.67it/s][A
 23%|██▎       | 51/221 [00:12<00:38,  4.39it/s][A
 24%|██▎       | 52/221 [00:13<00:36,  4.65it/s][A
 24%|██▍       | 53/221 [00:13<00:32,  5.12it/s][A
 24%|██▍       | 54/221 [00:13<00:37,  4.46it/s][A
 25%|██▍       | 55/221 [00:13<00:34,  4.83it/s][A
 25%|██▌       | 56/221 [00:13<00:34,  4.80it/s][A
 26%|██▌       | 57/221 [00:14<00:35,  4.63it/s][A
 26%|██▌       | 58/221 [00:14<00:49,  3.30it/s][A
 27%|██▋       | 59/221 [00:14<00:46,  3.48it/s][A
 28%|██▊       | 61/221 [00:15<00:35,  4.50it/s][A
 28%|██▊       | 62/221 [00:15<00:33,  4.79it/s][A
 29%|██▊       | 63/221 [00:15<00:29,  5.41it/s][A
 29%|██▉       | 64/221 [00:15<00:28,  5.48it/s][A
 29%|██▉       | 65/221 [00:15<00:24,  6.26it/s][A
 30%|██▉       | 66/221 [00:16<00:35,  4.31it/s][A
 30%|███       | 67/221 [00:16<01:02,  2.48it/s][A
 31%|███       | 68/221 [00:17<00:50,  3.02it/s][A
 31%|███       | 69/221 [00:17<00:57,  2.63it/s][A
 32%|███▏      | 70/221 [00:17<00:48,  3.14it/s][A
 32%|███▏      | 71/221 [00:18<00:46,  3.22it/s][A
 33%|███▎      | 72/221 [00:18<00:47,  3.10it/s][A
 33%|███▎      | 73/221 [00:18<00:40,  3.67it/s][A
 33%|███▎      | 74/221 [00:18<00:35,  4.09it/s][A
 34%|███▍      | 75/221 [00:19<00:34,  4.18it/s][A
 34%|███▍      | 76/221 [00:19<00:34,  4.18it/s][A
 35%|███▍      | 77/221 [00:19<00:29,  4.81it/s][A
 35%|███▌      | 78/221 [00:19<00:26,  5.45it/s][A
 36%|███▌      | 79/221 [00:20<00:47,  3.00it/s][A
 36%|███▌      | 80/221 [00:20<00:42,  3.34it/s][A
 37%|███▋      | 81/221 [00:20<00:38,  3.66it/s][A
 37%|███▋      | 82/221 [00:20<00:42,  3.29it/s][A
 38%|███▊      | 83/221 [00:21<00:38,  3.61it/s][A
 38%|███▊      | 84/221 [00:21<00:37,  3.68it/s][A
 38%|███▊      | 85/221 [00:21<00:34,  3.94it/s][A
 39%|███▉      | 86/221 [00:21<00:30,  4.37it/s][A
 39%|███▉      | 87/221 [00:22<00:31,  4.24it/s][A
 40%|███▉      | 88/221 [00:22<00:39,  3.35it/s][A
 40%|████      | 89/221 [00:23<00:45,  2.89it/s][A
 41%|████      | 90/221 [00:23<00:41,  3.19it/s][A
 41%|████      | 91/221 [00:23<00:34,  3.78it/s][A
 42%|████▏     | 92/221 [00:23<00:36,  3.50it/s][A
 42%|████▏     | 93/221 [00:24<01:09,  1.83it/s][A
 43%|████▎     | 94/221 [00:25<01:07,  1.89it/s][A
 43%|████▎     | 95/221 [00:25<00:54,  2.29it/s][A
 43%|████▎     | 96/221 [00:25<00:44,  2.80it/s][A
 44%|████▍     | 97/221 [00:25<00:37,  3.35it/s][A
 44%|████▍     | 98/221 [00:26<00:30,  4.01it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:32,  3.71it/s][A
 46%|████▌     | 101/221 [00:27<00:45,  2.63it/s][A
 46%|████▌     | 102/221 [00:27<00:48,  2.45it/s][A
 47%|████▋     | 103/221 [00:28<00:45,  2.60it/s][A
 47%|████▋     | 104/221 [00:28<00:41,  2.82it/s][A
 48%|████▊     | 105/221 [00:28<00:36,  3.18it/s][A
 48%|████▊     | 106/221 [00:28<00:33,  3.43it/s][A
 48%|████▊     | 107/221 [00:29<00:31,  3.56it/s][A
 49%|████▉     | 108/221 [00:29<00:28,  3.96it/s][A
 49%|████▉     | 109/221 [00:29<00:25,  4.36it/s][A
 50%|████▉     | 110/221 [00:29<00:26,  4.17it/s][A
 50%|█████     | 111/221 [00:30<00:28,  3.81it/s][A
 51%|█████     | 112/221 [00:30<00:27,  3.92it/s][A
 51%|█████     | 113/221 [00:30<00:24,  4.42it/s][A
 52%|█████▏    | 114/221 [00:30<00:20,  5.27it/s][A
 52%|█████▏    | 115/221 [00:30<00:23,  4.58it/s][A
 52%|█████▏    | 116/221 [00:31<00:27,  3.77it/s][A
 53%|█████▎    | 117/221 [00:31<00:24,  4.17it/s][A
 53%|█████▎    | 118/221 [00:31<00:23,  4.30it/s][A
 54%|█████▍    | 119/221 [00:32<00:37,  2.70it/s][A
 54%|█████▍    | 120/221 [00:32<00:33,  3.02it/s][A
 55%|█████▌    | 122/221 [00:32<00:24,  3.98it/s][A
 56%|█████▌    | 123/221 [00:33<00:27,  3.57it/s][A
 56%|█████▌    | 124/221 [00:33<00:24,  4.04it/s][A
 57%|█████▋    | 125/221 [00:33<00:27,  3.54it/s][A
 57%|█████▋    | 126/221 [00:34<00:28,  3.29it/s][A
 57%|█████▋    | 127/221 [00:34<00:29,  3.17it/s][A
 58%|█████▊    | 128/221 [00:34<00:26,  3.45it/s][A
 58%|█████▊    | 129/221 [00:34<00:27,  3.38it/s][A
 59%|█████▉    | 130/221 [00:35<00:24,  3.74it/s][A
 60%|█████▉    | 132/221 [00:35<00:15,  5.84it/s][A
 60%|██████    | 133/221 [00:35<00:17,  5.01it/s][A
 61%|██████    | 134/221 [00:35<00:16,  5.26it/s][A
 61%|██████    | 135/221 [00:35<00:15,  5.59it/s][A
 62%|██████▏   | 136/221 [00:36<00:17,  5.00it/s][A
 62%|██████▏   | 137/221 [00:36<00:15,  5.51it/s][A
 62%|██████▏   | 138/221 [00:36<00:16,  4.95it/s][A
 63%|██████▎   | 139/221 [00:36<00:22,  3.67it/s][A
 63%|██████▎   | 140/221 [00:37<00:21,  3.86it/s][A
 64%|██████▍   | 141/221 [00:37<00:20,  3.88it/s][A
 64%|██████▍   | 142/221 [00:37<00:18,  4.22it/s][A
 65%|██████▍   | 143/221 [00:38<00:26,  2.91it/s][A
 65%|██████▌   | 144/221 [00:38<00:29,  2.58it/s][A
 66%|██████▌   | 145/221 [00:38<00:24,  3.10it/s][A
 66%|██████▌   | 146/221 [00:39<00:19,  3.88it/s][A
 67%|██████▋   | 147/221 [00:39<00:19,  3.85it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.73it/s][A
 67%|██████▋   | 149/221 [00:39<00:16,  4.38it/s][A
 68%|██████▊   | 150/221 [00:39<00:17,  3.96it/s][A
 68%|██████▊   | 151/221 [00:40<00:21,  3.26it/s][A
 69%|██████▉   | 152/221 [00:40<00:26,  2.62it/s][A
 69%|██████▉   | 153/221 [00:41<00:21,  3.15it/s][A
 70%|██████▉   | 154/221 [00:41<00:18,  3.58it/s][A
 70%|███████   | 155/221 [00:41<00:16,  4.01it/s][A
 71%|███████   | 156/221 [00:41<00:20,  3.25it/s][A
 71%|███████   | 157/221 [00:42<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:42<00:18,  3.43it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.87it/s][A
 72%|███████▏  | 160/221 [00:42<00:15,  3.84it/s][A
 73%|███████▎  | 161/221 [00:43<00:18,  3.26it/s][A
 73%|███████▎  | 162/221 [00:43<00:16,  3.52it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.75it/s][A
 74%|███████▍  | 164/221 [00:44<00:16,  3.44it/s][A
 75%|███████▍  | 165/221 [00:44<00:15,  3.68it/s][A
 75%|███████▌  | 166/221 [00:44<00:15,  3.66it/s][A
 76%|███████▌  | 167/221 [00:44<00:12,  4.46it/s][A
 76%|███████▌  | 168/221 [00:45<00:15,  3.37it/s][A
 76%|███████▋  | 169/221 [00:45<00:14,  3.65it/s][A
 77%|███████▋  | 170/221 [00:46<00:18,  2.78it/s][A
 77%|███████▋  | 171/221 [00:46<00:14,  3.48it/s][A
 78%|███████▊  | 172/221 [00:46<00:12,  3.98it/s][A
 78%|███████▊  | 173/221 [00:46<00:13,  3.60it/s][A
 79%|███████▊  | 174/221 [00:47<00:17,  2.63it/s][A
 79%|███████▉  | 175/221 [00:47<00:16,  2.77it/s][A
 80%|███████▉  | 176/221 [00:47<00:14,  3.12it/s][A
 80%|████████  | 177/221 [00:47<00:11,  3.68it/s][A
 81%|████████  | 178/221 [00:48<00:10,  4.18it/s][A
 81%|████████  | 179/221 [00:48<00:10,  4.18it/s][A
 81%|████████▏ | 180/221 [00:48<00:08,  4.60it/s][A
 82%|████████▏ | 181/221 [00:48<00:10,  3.86it/s][A
 82%|████████▏ | 182/221 [00:49<00:09,  4.15it/s][A
 83%|████████▎ | 183/221 [00:49<00:09,  3.94it/s][A
 83%|████████▎ | 184/221 [00:49<00:07,  4.64it/s][A
 84%|████████▎ | 185/221 [00:49<00:07,  4.92it/s][A
 84%|████████▍ | 186/221 [00:50<00:09,  3.71it/s][A
 85%|████████▍ | 187/221 [00:50<00:08,  4.11it/s][A
 85%|████████▌ | 188/221 [00:50<00:07,  4.16it/s][A
 86%|████████▌ | 189/221 [00:50<00:07,  4.04it/s][A
 86%|████████▌ | 190/221 [00:51<00:09,  3.31it/s][A
 86%|████████▋ | 191/221 [00:51<00:07,  3.86it/s][A
 87%|████████▋ | 192/221 [00:51<00:09,  3.14it/s][A
 87%|████████▋ | 193/221 [00:52<00:07,  3.63it/s][A
 88%|████████▊ | 194/221 [00:52<00:07,  3.38it/s][A
 88%|████████▊ | 195/221 [00:52<00:07,  3.44it/s][A
 89%|████████▊ | 196/221 [00:53<00:08,  3.00it/s][A
 89%|████████▉ | 197/221 [00:53<00:06,  3.78it/s][A
 90%|████████▉ | 198/221 [00:53<00:09,  2.50it/s][A
 90%|█████████ | 199/221 [00:54<00:07,  2.87it/s][A
 90%|█████████ | 200/221 [00:54<00:07,  2.91it/s][A
 91%|█████████ | 201/221 [00:54<00:06,  2.99it/s][A
 91%|█████████▏| 202/221 [00:55<00:06,  2.74it/s][A
 92%|█████████▏| 203/221 [00:55<00:05,  3.50it/s][A
 92%|█████████▏| 204/221 [00:55<00:06,  2.53it/s][A
 93%|█████████▎| 205/221 [00:56<00:05,  3.18it/s][A
 93%|█████████▎| 206/221 [00:56<00:04,  3.11it/s][A
 94%|█████████▎| 207/221 [00:56<00:04,  3.29it/s][A
 94%|█████████▍| 208/221 [00:56<00:03,  4.03it/s][A
 95%|█████████▍| 209/221 [00:57<00:03,  3.75it/s][A
 95%|█████████▌| 210/221 [00:57<00:03,  3.67it/s][A
 95%|█████████▌| 211/221 [00:57<00:02,  3.36it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  3.50it/s][A
 96%|█████████▋| 213/221 [00:58<00:02,  3.33it/s][A
 97%|█████████▋| 214/221 [00:58<00:02,  2.74it/s][A
 97%|█████████▋| 215/221 [00:59<00:01,  3.03it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  2.93it/s][A
 98%|█████████▊| 217/221 [00:59<00:01,  3.30it/s][A
 99%|█████████▊| 218/221 [01:00<00:00,  3.11it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  2.88it/s][A
100%|█████████▉| 220/221 [01:00<00:00,  2.96it/s][A
100%|██████████| 221/221 [01:01<00:00,  3.02it/s][A100%|██████████| 221/221 [01:01<00:00,  3.62it/s]
09/09/2024 21:58:20 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 1199--===========

09/09/2024 21:58:20 - INFO - __main__ -   {'area_r1': 17.0, 'area_recall': '17.0/35.6/46.0', 'area_ravg': 32.9}
09/09/2024 21:58:20 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 1199--===========

09/09/2024 21:58:20 - INFO - __main__ -   {'forward_r1': 33.4, 'forward_recall': '33.4/58.0/69.3', 'forward_ravg': 53.6}
09/09/2024 21:58:20 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 1199--===========

09/09/2024 21:58:20 - INFO - __main__ -   {'area_video_r1': 42.6, 'area_video_recall': '42.6/70.6/80.1', 'area_video_ravg': 64.4}
09/09/2024 21:58:20 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 1199=======

09/09/2024 21:58:20 - INFO - __main__ -   {'area_video_r1': 42.6, 'area_video_recall': '42.6/70.6/80.1', 'area_video_ravg': 64.4}
09/09/2024 21:58:20 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 1199--===========

09/09/2024 21:58:20 - INFO - __main__ -   {'area_video_r1': 47.3, 'area_video_recall': '47.3/64.4/70.4', 'area_video_ravg': 60.7, 'area_video_back_r1': 49.9, 'area_video_back_recall': '49.9/72.1/80.3', 'area_video_back_ravg': 67.4}
09/09/2024 21:58:20 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 21:58:20 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 21:58:20 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 1199--===========

09/09/2024 21:58:20 - INFO - __main__ -   {'video_r1': 41.1, 'video_recall': '41.1/69.3/79.5', 'video_ravg': 63.3}
09/09/2024 21:58:20 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 21:58:20 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 21:58:20 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 1199--===========

09/09/2024 21:58:20 - INFO - __main__ -   {'video_r1': 52.5, 'video_recall': '52.5/74.3/82.2', 'video_ravg': 69.7}
09/09/2024 21:58:20 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 1049=======

09/09/2024 21:58:20 - INFO - __main__ -   {'video_r1': 52.9, 'video_recall': '52.9/74.5/82.8', 'video_ravg': 70.1}
[h264 @ 0x55e5062bdf40] mmco: unref short failure
09/09/2024 21:58:48 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.5137665271759033, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.022516917437314987, 'loss_ret%tv%ta--finetune_area/loss_area': 1.2362562417984009, 'loss_ret%tv%ta--finetune_area/total_loss': 2.7725396156311035}
[h264 @ 0x556e4b43bc80] mmco: unref short failure
[h264 @ 0x556e4b43bc80] mmco: unref short failure
 62%|██████▏   | 1200/1945 [6:33:23<26:40:34, 128.91s/it][h264 @ 0x556e48e34e40] mmco: unref short failure
 62%|██████▏   | 1201/1945 [6:33:27<18:54:03, 91.46s/it] [h264 @ 0x556e67560640] mmco: unref short failure
 62%|██████▏   | 1202/1945 [6:33:32<13:30:55, 65.49s/it][h264 @ 0x55e50fd15300] mmco: unref short failure
[h264 @ 0x55b7d367acc0] mmco: unref short failure
[h264 @ 0x556e493f68c0] mmco: unref short failure
 62%|██████▏   | 1203/1945 [6:33:37<9:45:54, 47.38s/it] [h264 @ 0x556e64219e80] mmco: unref short failure
[h264 @ 0x556e64219e80] mmco: unref short failure
 62%|██████▏   | 1204/1945 [6:33:42<7:10:19, 34.84s/it][h264 @ 0x55e50d744180] mmco: unref short failure
[h264 @ 0x55e50d744180] mmco: unref short failure
 62%|██████▏   | 1205/1945 [6:33:49<5:23:48, 26.26s/it][h264 @ 0x556e4b4a9e40] mmco: unref short failure
[h264 @ 0x556e4b4a9e40] mmco: unref short failure
 62%|██████▏   | 1206/1945 [6:33:55<4:10:52, 20.37s/it][h264 @ 0x55b7dc6c9280] mmco: unref short failure
[h264 @ 0x55b7dc6c9280] mmco: unref short failure
[h264 @ 0x55b7d764ddc0] mmco: unref short failure
[h264 @ 0x55b7d764ddc0] mmco: unref short failure
[h264 @ 0x55b7d764ddc0] mmco: unref short failure
[h264 @ 0x55b7d764ddc0] mmco: unref short failure
[h264 @ 0x55b7daede800] mmco: unref short failure
 62%|██████▏   | 1207/1945 [6:34:01<3:18:29, 16.14s/it][h264 @ 0x55e50b394e00] mmco: unref short failure
[h264 @ 0x55e50b394e00] mmco: unref short failure
[h264 @ 0x55b7da9b7440] mmco: unref short failure
[h264 @ 0x55e4ff837100] mmco: unref short failure
 62%|██████▏   | 1208/1945 [6:34:08<2:42:15, 13.21s/it][h264 @ 0x55e50bf51b00] mmco: unref short failure
[h264 @ 0x556e4b6ff400] mmco: unref short failure
[h264 @ 0x556e4b6ff400] mmco: unref short failure
[h264 @ 0x55e50252c340] mmco: unref short failure
[h264 @ 0x55e50252c340] mmco: unref short failure
 62%|██████▏   | 1209/1945 [6:34:17<2:26:05, 11.91s/it][h264 @ 0x556e4563f980] mmco: unref short failure
[h264 @ 0x556e4563f980] mmco: unref short failure
 62%|██████▏   | 1210/1945 [6:34:24<2:08:22, 10.48s/it][h264 @ 0x556e544f2940] mmco: unref short failure
[h264 @ 0x556e544f2940] mmco: unref short failure
 62%|██████▏   | 1211/1945 [6:34:31<1:57:02,  9.57s/it][h264 @ 0x556e63e74ac0] mmco: unref short failure
[h264 @ 0x556e63e74ac0] mmco: unref short failure
[h264 @ 0x55e5132dd440] mmco: unref short failure
[h264 @ 0x55e5132dd440] mmco: unref short failure
 62%|██████▏   | 1212/1945 [6:34:39<1:50:48,  9.07s/it] 62%|██████▏   | 1213/1945 [6:34:47<1:47:25,  8.81s/it][h264 @ 0x55e50a73de00] mmco: unref short failure
[h264 @ 0x55b7cb5c4480] mmco: unref short failure
[h264 @ 0x55e5036e0c40] mmco: unref short failure
[h264 @ 0x55e5036e0c40] mmco: unref short failure
[h264 @ 0x556e52c7d4c0] mmco: unref short failure
[h264 @ 0x556e52c7d4c0] mmco: unref short failure
 62%|██████▏   | 1214/1945 [6:34:55<1:43:03,  8.46s/it][h264 @ 0x55e50eedb0c0] mmco: unref short failure
[h264 @ 0x55b7d3349100] mmco: unref short failure
[h264 @ 0x55b7d3349100] mmco: unref short failure
[h264 @ 0x556e5207f680] mmco: unref short failure
 62%|██████▏   | 1215/1945 [6:35:03<1:40:11,  8.23s/it] 63%|██████▎   | 1216/1945 [6:35:09<1:34:07,  7.75s/it][h264 @ 0x556e4b493600] mmco: unref short failure
[h264 @ 0x556e4b493600] mmco: unref short failure
[h264 @ 0x55e4fdeaf600] mmco: unref short failure
 63%|██████▎   | 1217/1945 [6:35:16<1:31:07,  7.51s/it][h264 @ 0x556e5336c880] mmco: unref short failure
[h264 @ 0x556e63e7d8c0] mmco: unref short failure
[h264 @ 0x55b7d6804e80] mmco: unref short failure
 63%|██████▎   | 1218/1945 [6:35:25<1:34:55,  7.83s/it][h264 @ 0x55b7d5777c80] mmco: unref short failure
[h264 @ 0x55b7d5777c80] mmco: unref short failure
[h264 @ 0x556e4f392880] mmco: unref short failure
[h264 @ 0x556e5834c9c0] mmco: unref short failure
[h264 @ 0x556e5834c9c0] mmco: unref short failure
[h264 @ 0x55e50a3833c0] mmco: unref short failure
 63%|██████▎   | 1219/1945 [6:35:37<1:49:48,  9.07s/it][h264 @ 0x556e4321ae80] mmco: unref short failure
[h264 @ 0x556e4321ae80] mmco: unref short failure
[h264 @ 0x556e612ca500] mmco: unref short failure
[h264 @ 0x556e612ca500] mmco: unref short failure
[h264 @ 0x556e612ca500] mmco: unref short failure
[h264 @ 0x556e612ca500] mmco: unref short failure
[h264 @ 0x55e504298a80] mmco: unref short failure
[h264 @ 0x55e504298a80] mmco: unref short failure
[h264 @ 0x556e482a68c0] mmco: unref short failure
[h264 @ 0x556e5a2eaa00] mmco: unref short failure
[h264 @ 0x556e5a2eaa00] mmco: unref short failure
[h264 @ 0x55b7d1ac4cc0] mmco: unref short failure
 63%|██████▎   | 1220/1945 [6:35:52<2:10:19, 10.79s/it][h264 @ 0x556e4b5d5980] mmco: unref short failure
[h264 @ 0x556e4b5d5980] mmco: unref short failure
[h264 @ 0x55b7da566800] mmco: unref short failure
[h264 @ 0x556e68bd83c0] mmco: unref short failure
[h264 @ 0x556e68bd83c0] mmco: unref short failure
 63%|██████▎   | 1221/1945 [6:35:59<1:57:13,  9.71s/it][h264 @ 0x556e5442d340] mmco: unref short failure
[h264 @ 0x556e5442d340] mmco: unref short failure
[h264 @ 0x55b7d0089bc0] mmco: unref short failure
[h264 @ 0x55b7d0089bc0] mmco: unref short failure
[h264 @ 0x55b7d0089bc0] mmco: unref short failure
 63%|██████▎   | 1222/1945 [6:36:05<1:44:38,  8.68s/it] 63%|██████▎   | 1223/1945 [6:36:18<1:58:23,  9.84s/it][h264 @ 0x556e4aede200] mmco: unref short failure
[h264 @ 0x556e4aede200] mmco: unref short failure
[h264 @ 0x55b7d6efd140] mmco: unref short failure
[h264 @ 0x556e568049c0] mmco: unref short failure
[h264 @ 0x556e568049c0] mmco: unref short failure
[h264 @ 0x556e4941ec00] mmco: unref short failure
[h264 @ 0x556e4941ec00] mmco: unref short failure
[h264 @ 0x556e4941ec00] mmco: unref short failure
[h264 @ 0x556e4941ec00] mmco: unref short failure
[h264 @ 0x556e4aede200] mmco: unref short failure
[h264 @ 0x55e502281900] mmco: unref short failure
[h264 @ 0x55e502281900] mmco: unref short failure
[h264 @ 0x55b7cef50480] mmco: unref short failure
[h264 @ 0x55e502281900] mmco: unref short failure
[h264 @ 0x55e502281900] mmco: unref short failure
[h264 @ 0x55b7d3e716c0] mmco: unref short failure
[h264 @ 0x55b7d3e716c0] mmco: unref short failure
[h264 @ 0x55b7d3e716c0] mmco: unref short failure
[h264 @ 0x55b7d3e716c0] mmco: unref short failure
[h264 @ 0x55b7d3e716c0] mmco: unref short failure
[h264 @ 0x55b7d3e716c0] mmco: unref short failure
[h264 @ 0x556e538e31c0] mmco: unref short failure
[h264 @ 0x556e538e31c0] mmco: unref short failure
[h264 @ 0x55e511d0c280] mmco: unref short failure
[h264 @ 0x55b7cf610080] mmco: unref short failure
[h264 @ 0x55b7cf610080] mmco: unref short failure
[h264 @ 0x556e49bd9180] mmco: unref short failure
[h264 @ 0x55e504bad900] mmco: unref short failure
[h264 @ 0x55e504bad900] mmco: unref short failure
[h264 @ 0x556e56246980] mmco: unref short failure
 63%|██████▎   | 1224/1945 [6:37:09<4:28:25, 22.34s/it][h264 @ 0x55e505b8d180] mmco: unref short failure
[h264 @ 0x55e505b8d180] mmco: unref short failure
[h264 @ 0x556e583cb0c0] mmco: unref short failure
[h264 @ 0x556e583cb0c0] mmco: unref short failure
 63%|██████▎   | 1225/1945 [6:37:23<3:56:12, 19.68s/it][h264 @ 0x55b7daf43cc0] mmco: unref short failure
[h264 @ 0x55b7daf43cc0] mmco: unref short failure
[h264 @ 0x556e45946640] mmco: unref short failure
 63%|██████▎   | 1226/1945 [6:37:31<3:15:25, 16.31s/it][h264 @ 0x55b7cf382380] mmco: unref short failure
[h264 @ 0x55b7cf382380] mmco: unref short failure
[h264 @ 0x55e50cad9ac0] mmco: unref short failure
[h264 @ 0x556e5b462b80] mmco: unref short failure
[h264 @ 0x556e5b462b80] mmco: unref short failure
[h264 @ 0x55e50bc32840] mmco: unref short failure
[h264 @ 0x55e50bc32840] mmco: unref short failure
 63%|██████▎   | 1227/1945 [6:37:43<2:57:43, 14.85s/it][h264 @ 0x55b7e25e23c0] mmco: unref short failure
 63%|██████▎   | 1228/1945 [6:37:58<2:59:19, 15.01s/it][h264 @ 0x556e56b9f440] mmco: unref short failure
[h264 @ 0x556e56b9f440] mmco: unref short failure
 63%|██████▎   | 1229/1945 [6:38:06<2:35:29, 13.03s/it] 63%|██████▎   | 1230/1945 [6:38:13<2:13:25, 11.20s/it][h264 @ 0x556e66a8c600] mmco: unref short failure
[h264 @ 0x556e66a8c600] mmco: unref short failure
[h264 @ 0x556e65569a00] mmco: unref short failure
[h264 @ 0x556e66dcff40] mmco: unref short failure
[h264 @ 0x556e58701880] mmco: unref short failure
[h264 @ 0x556e58701880] mmco: unref short failure
[h264 @ 0x556e575e6180] mmco: unref short failure
[h264 @ 0x556e575e6180] mmco: unref short failure
[h264 @ 0x556e575e6180] mmco: unref short failure
[h264 @ 0x556e575e6180] mmco: unref short failure
 63%|██████▎   | 1231/1945 [6:38:23<2:07:01, 10.67s/it][h264 @ 0x55e50fd15640] mmco: unref short failure
[h264 @ 0x556e5bae6f40] mmco: unref short failure
[h264 @ 0x556e5bae6f40] mmco: unref short failure
[h264 @ 0x55b7e2d2d3c0] mmco: unref short failure
[h264 @ 0x556e69faba00] mmco: unref short failure
[h264 @ 0x55e508c93d00] mmco: unref short failure
[h264 @ 0x55e508c93d00] mmco: unref short failure
[h264 @ 0x556e6172c600] mmco: unref short failure
[h264 @ 0x55b7cacb3580] mmco: unref short failure
[h264 @ 0x55b7cacb3580] mmco: unref short failure
[h264 @ 0x55b7cacb3580] mmco: unref short failure
[h264 @ 0x556e50353640] mmco: unref short failure
[h264 @ 0x55b7d29f9000] mmco: unref short failure
[h264 @ 0x55e505529e40] mmco: unref short failure
[h264 @ 0x556e53f78780] mmco: unref short failure
[h264 @ 0x556e53f78780] mmco: unref short failure
[h264 @ 0x556e545d1280] mmco: unref short failure
[h264 @ 0x556e665c3d80] mmco: unref short failure
[h264 @ 0x556e665c3d80] mmco: unref short failure
[h264 @ 0x556e44ac5d00] mmco: unref short failure
[h264 @ 0x556e44ac5d00] mmco: unref short failure
 63%|██████▎   | 1232/1945 [6:39:06<4:03:00, 20.45s/it][h264 @ 0x556e5b386240] mmco: unref short failure
[h264 @ 0x55b7cd7c1000] mmco: unref short failure
[h264 @ 0x55b7d306ae80] mmco: unref short failure
[h264 @ 0x55b7d306ae80] mmco: unref short failure
[h264 @ 0x55e510a8b180] mmco: unref short failure
 63%|██████▎   | 1233/1945 [6:39:23<3:50:36, 19.43s/it][h264 @ 0x556e58c8ec80] mmco: unref short failure
[h264 @ 0x55b7d2d9f9c0] mmco: unref short failure
[h264 @ 0x556e56f246c0] mmco: unref short failure
[h264 @ 0x556e56f246c0] mmco: unref short failure
[h264 @ 0x55b7d11773c0] mmco: unref short failure
[h264 @ 0x55b7d11773c0] mmco: unref short failure
[h264 @ 0x556e678cdb00] mmco: unref short failure
[h264 @ 0x556e526c8280] mmco: unref short failure
[h264 @ 0x556e526c8280] mmco: unref short failure
[h264 @ 0x55b7cf430a00] mmco: unref short failure
[h264 @ 0x55b7cf430a00] mmco: unref short failure
 63%|██████▎   | 1234/1945 [6:39:37<3:30:17, 17.75s/it][h264 @ 0x55b7d73b9000] mmco: unref short failure
[h264 @ 0x55b7d73b9000] mmco: unref short failure
[h264 @ 0x55e5151b7ac0] mmco: unref short failure
[h264 @ 0x55e5151b7ac0] mmco: unref short failure
[h264 @ 0x55e5151b7ac0] mmco: unref short failure
[h264 @ 0x55e5151b7ac0] mmco: unref short failure
[h264 @ 0x55b7d3f17580] mmco: unref short failure
[h264 @ 0x55b7d3f17580] mmco: unref short failure
[h264 @ 0x55b7d9c58580] mmco: unref short failure
[h264 @ 0x55b7d9c58580] mmco: unref short failure
[h264 @ 0x55b7dc1aa300] mmco: unref short failure
[h264 @ 0x55b7dc1aa300] mmco: unref short failure
[h264 @ 0x55b7dc1aa300] mmco: unref short failure
[h264 @ 0x55b7dc1aa300] mmco: unref short failure
[h264 @ 0x55b7dc1aa300] mmco: unref short failure
[h264 @ 0x55b7dc1aa300] mmco: unref short failure
 63%|██████▎   | 1235/1945 [6:39:50<3:14:52, 16.47s/it][h264 @ 0x556e67bb2480] mmco: unref short failure
[h264 @ 0x55b7cc50d240] mmco: unref short failure
[h264 @ 0x556e561c5e80] mmco: unref short failure
[h264 @ 0x556e561c5e80] mmco: unref short failure
[h264 @ 0x55b7da3d8180] mmco: unref short failure
[h264 @ 0x55b7da3d8180] mmco: unref short failure
[h264 @ 0x556e544a9f80] mmco: unref short failure
[h264 @ 0x556e544a9f80] mmco: unref short failure
[h264 @ 0x556e544a9f80] mmco: unref short failure
[h264 @ 0x556e6bde2e00] mmco: unref short failure
 64%|██████▎   | 1236/1945 [6:40:12<3:33:32, 18.07s/it][h264 @ 0x55e50e9f7d00] mmco: unref short failure
[h264 @ 0x55e50e9f7d00] mmco: unref short failure
[h264 @ 0x55e50e9f7d00] mmco: unref short failure
[h264 @ 0x556e6d2cd3c0] mmco: unref short failure
[h264 @ 0x55e505e43e00] mmco: unref short failure
[h264 @ 0x556e51534440] mmco: unref short failure
[h264 @ 0x556e51534440] mmco: unref short failure
 64%|██████▎   | 1237/1945 [6:40:20<2:57:15, 15.02s/it][h264 @ 0x55b7da56e8c0] mmco: unref short failure
[h264 @ 0x55b7da56e8c0] mmco: unref short failure
 64%|██████▎   | 1238/1945 [6:40:26<2:26:01, 12.39s/it] 64%|██████▎   | 1239/1945 [6:40:35<2:12:18, 11.24s/it][h264 @ 0x55e5095cfd80] mmco: unref short failure
[h264 @ 0x556e554008c0] mmco: unref short failure
[h264 @ 0x556e554008c0] mmco: unref short failure
[h264 @ 0x556e54d23480] mmco: unref short failure
[h264 @ 0x556e54d23480] mmco: unref short failure
[h264 @ 0x55b7d30a7d40] mmco: unref short failure
[h264 @ 0x55b7d30a7d40] mmco: unref short failure
[h264 @ 0x556e5afa6580] mmco: unref short failure
[h264 @ 0x556e5afa6580] mmco: unref short failure
[h264 @ 0x556e5442d800] mmco: unref short failure
[h264 @ 0x556e5442d800] mmco: unref short failure
[h264 @ 0x55b7dc8e5080] mmco: unref short failure
[h264 @ 0x556e53bb25c0] mmco: unref short failure
[h264 @ 0x556e53bb25c0] mmco: unref short failure
[h264 @ 0x55b7ccf430c0] mmco: unref short failure
[h264 @ 0x55b7ccf430c0] mmco: unref short failure
[h264 @ 0x55b7ccf430c0] mmco: unref short failure
[h264 @ 0x55b7ccf430c0] mmco: unref short failure
[h264 @ 0x55b7ce07b6c0] mmco: unref short failure
[h264 @ 0x556e4ed69900] mmco: unref short failure
 64%|██████▍   | 1240/1945 [6:41:11<3:38:59, 18.64s/it][h264 @ 0x55b7e1f009c0] mmco: unref short failure
[h264 @ 0x55b7e1f009c0] mmco: unref short failure
[h264 @ 0x55b7ccf42ec0] mmco: unref short failure
 64%|██████▍   | 1241/1945 [6:41:25<3:23:19, 17.33s/it][h264 @ 0x556e65819180] mmco: unref short failure
[h264 @ 0x556e65819180] mmco: unref short failure
 64%|██████▍   | 1242/1945 [6:41:37<3:04:05, 15.71s/it][h264 @ 0x55e5086feb40] mmco: unref short failure
[h264 @ 0x55b7d3e70b80] mmco: unref short failure
[h264 @ 0x55b7d3e70b80] mmco: unref short failure
[h264 @ 0x55b7d3e70b80] mmco: unref short failure
[h264 @ 0x55b7d3e70b80] mmco: unref short failure
 64%|██████▍   | 1243/1945 [6:41:57<3:18:13, 16.94s/it][h264 @ 0x55e5149695c0] mmco: unref short failure
[h264 @ 0x55e5149695c0] mmco: unref short failure
[h264 @ 0x55e5149695c0] mmco: unref short failure
[h264 @ 0x55e5149695c0] mmco: unref short failure
[h264 @ 0x556e4b517280] mmco: unref short failure
[h264 @ 0x556e5802f7c0] mmco: unref short failure
[h264 @ 0x556e65cbe3c0] mmco: unref short failure
[h264 @ 0x556e65cbe3c0] mmco: unref short failure
 64%|██████▍   | 1244/1945 [6:42:12<3:13:04, 16.53s/it][h264 @ 0x55e50fbfb540] mmco: unref short failure
[h264 @ 0x55e50fbfb540] mmco: unref short failure
 64%|██████▍   | 1245/1945 [6:42:20<2:40:31, 13.76s/it][h264 @ 0x556e62a80b40] mmco: unref short failure
[h264 @ 0x556e62a80b40] mmco: unref short failure
[h264 @ 0x55e4ff87e3c0] mmco: unref short failure
[h264 @ 0x55e4ff87e3c0] mmco: unref short failure
 64%|██████▍   | 1246/1945 [6:42:28<2:22:18, 12.21s/it] 64%|██████▍   | 1247/1945 [6:42:35<2:02:45, 10.55s/it][h264 @ 0x55e5039e1ec0] mmco: unref short failure
[h264 @ 0x556e482e1600] mmco: unref short failure
[h264 @ 0x556e482e1600] mmco: unref short failure
[h264 @ 0x55b7cbb59b40] mmco: unref short failure
[h264 @ 0x55e5162a45c0] mmco: unref short failure
[h264 @ 0x55e5162a45c0] mmco: unref short failure
[h264 @ 0x55e5162a45c0] mmco: unref short failure
[h264 @ 0x55e5162a45c0] mmco: unref short failure
[h264 @ 0x55b7cf9c0700] mmco: unref short failure
[h264 @ 0x55b7cf9c0700] mmco: unref short failure
 64%|██████▍   | 1248/1945 [6:43:07<3:18:55, 17.12s/it][h264 @ 0x556e4bf94bc0] mmco: unref short failure
[h264 @ 0x556e55403780] mmco: unref short failure
[h264 @ 0x55e5152a72c0] mmco: unref short failure
[h264 @ 0x556e6c41ab80] mmco: unref short failure
 64%|██████▍   | 1249/1945 [6:43:31<3:39:55, 18.96s/it]09/09/2024 22:08:59 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 22:08:59 - INFO - __main__ -   start running ret%tv validation...
[h264 @ 0x55e505e436c0] mmco: unref short failure
[h264 @ 0x55e505e436c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e50ebbd300] mmco: unref short failure
[h264 @ 0x55e50ebbd300] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e54d6bf80] mmco: unref short failure
[h264 @ 0x556e54d6bf80] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b7da6d2780] mmco: unref short failure
[h264 @ 0x55b7d5ea0040] mmco: unref short failure
[h264 @ 0x55b7d5ea0040] mmco: unref short failure
[h264 @ 0x55b7d88962c0] mmco: unref short failure
[h264 @ 0x55b7d88962c0] mmco: unref short failure
[h264 @ 0x556e539c4f80] mmco: unref short failure
[h264 @ 0x556e6bc07340] mmco: unref short failure
[h264 @ 0x55b7cb403a80] mmco: unref short failure
[h264 @ 0x556e48f5f940] mmco: unref short failure
[h264 @ 0x556e48f5f940] mmco: unref short failure
[h264 @ 0x556e48f5f940] mmco: unref short failure
[h264 @ 0x556e48f5f940] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b7d73717c0] mmco: unref short failure
[h264 @ 0x55b7d73717c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e56964140] mmco: unref short failure
[h264 @ 0x556e56964140] mmco: unref short failure
[h264 @ 0x55e506842380] mmco: unref short failure
[h264 @ 0x556e616b57c0] mmco: unref short failure
[h264 @ 0x556e616b57c0] mmco: unref short failure
[h264 @ 0x556e54d04c00] mmco: unref short failure
[h264 @ 0x556e54d04c00] mmco: unref short failure
[h264 @ 0x556e6990f880] mmco: unref short failure
[h264 @ 0x556e53b82080] mmco: unref short failure
[h264 @ 0x556e53b82080] mmco: unref short failure
[h264 @ 0x556e59664380] mmco: unref short failure
[h264 @ 0x556e59664380] mmco: unref short failure
[h264 @ 0x556e5b9b0f40] mmco: unref short failure
[h264 @ 0x556e58840580] mmco: unref short failure
[h264 @ 0x556e58840580] mmco: unref short failure
[h264 @ 0x556e439eba00] mmco: unref short failure
[h264 @ 0x556e439eba00] mmco: unref short failure
[h264 @ 0x55b7dc678540] mmco: unref short failure
[h264 @ 0x55b7dc678540] mmco: unref short failure
[h264 @ 0x556e58659f80] mmco: unref short failure
[h264 @ 0x55e51a68ebc0] mmco: unref short failure
[h264 @ 0x55b7d5807ec0] mmco: unref short failure
[h264 @ 0x55b7d5807ec0] mmco: unref short failure
[h264 @ 0x55b7cacf3ac0] mmco: unref short failure
[h264 @ 0x55b7cacf3ac0] mmco: unref short failure
[h264 @ 0x556e611039c0] mmco: unref short failure
[h264 @ 0x556e611039c0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:23,  9.41it/s][A
  1%|          | 2/221 [00:00<00:24,  9.03it/s][A
  1%|▏         | 3/221 [00:00<00:23,  9.25it/s][A
  2%|▏         | 4/221 [00:00<00:23,  9.18it/s][A
  3%|▎         | 6/221 [00:00<00:23,  9.21it/s][A
  3%|▎         | 7/221 [00:01<01:16,  2.81it/s][A
  4%|▎         | 8/221 [00:01<01:03,  3.36it/s][A
  4%|▍         | 9/221 [00:01<00:52,  4.05it/s][A[h264 @ 0x55e5151d5ac0] mmco: unref short failure
[h264 @ 0x55e5151d5ac0] mmco: unref short failure

  5%|▍         | 10/221 [00:02<01:22,  2.56it/s][A
  5%|▍         | 11/221 [00:02<01:04,  3.23it/s][A
  6%|▌         | 13/221 [00:03<00:48,  4.32it/s][A[h264 @ 0x556e6bbf6c40] mmco: unref short failure

  6%|▋         | 14/221 [00:04<01:45,  1.97it/s][A
  7%|▋         | 15/221 [00:04<01:25,  2.42it/s][A
  7%|▋         | 16/221 [00:08<04:39,  1.36s/it][A
  8%|▊         | 17/221 [00:08<03:37,  1.06s/it][A
  8%|▊         | 18/221 [00:09<02:52,  1.17it/s][A
  9%|▊         | 19/221 [00:09<02:10,  1.54it/s][A
  9%|▉         | 20/221 [00:09<01:40,  2.00it/s][A
 10%|▉         | 21/221 [00:09<01:17,  2.59it/s][A
 10%|▉         | 22/221 [00:09<01:01,  3.26it/s][A
 10%|█         | 23/221 [00:09<00:49,  3.99it/s][A[h264 @ 0x55e50a80a700] mmco: unref short failure
[h264 @ 0x55e50a80a700] mmco: unref short failure

 11%|█         | 24/221 [00:09<00:41,  4.76it/s][A
 12%|█▏        | 26/221 [00:10<00:31,  6.27it/s][A[h264 @ 0x55e512430300] mmco: unref short failure
[h264 @ 0x55e512430300] mmco: unref short failure

 12%|█▏        | 27/221 [00:10<00:29,  6.62it/s][A
 13%|█▎        | 28/221 [00:13<02:55,  1.10it/s][A
 13%|█▎        | 29/221 [00:13<02:17,  1.39it/s][A
 14%|█▎        | 30/221 [00:13<01:48,  1.76it/s][A
 14%|█▍        | 32/221 [00:14<01:16,  2.47it/s][A
 15%|█▍        | 33/221 [00:14<01:04,  2.93it/s][A
 15%|█▌        | 34/221 [00:14<00:57,  3.28it/s][A
 16%|█▌        | 35/221 [00:14<00:53,  3.47it/s][A
 16%|█▋        | 36/221 [00:14<00:43,  4.22it/s][A
 17%|█▋        | 37/221 [00:14<00:41,  4.39it/s][A
 17%|█▋        | 38/221 [00:15<00:36,  5.01it/s][A
 18%|█▊        | 39/221 [00:15<00:34,  5.24it/s][A
 19%|█▊        | 41/221 [00:15<00:26,  6.85it/s][A
 19%|█▉        | 42/221 [00:15<00:30,  5.82it/s][A
 19%|█▉        | 43/221 [00:15<00:27,  6.44it/s][A
 20%|█▉        | 44/221 [00:15<00:25,  6.93it/s][A
 20%|██        | 45/221 [00:16<00:26,  6.54it/s][A
 21%|██        | 46/221 [00:16<00:27,  6.48it/s][A
 21%|██▏       | 47/221 [00:18<02:28,  1.17it/s][A
 22%|██▏       | 48/221 [00:18<01:51,  1.55it/s][A
 22%|██▏       | 49/221 [00:19<01:32,  1.85it/s][A
 23%|██▎       | 50/221 [00:19<01:14,  2.31it/s][A
 23%|██▎       | 51/221 [00:19<01:00,  2.83it/s][A
 24%|██▎       | 52/221 [00:19<00:57,  2.95it/s][A
 24%|██▍       | 53/221 [00:20<01:11,  2.36it/s][A[h264 @ 0x55e50d4a9300] mmco: unref short failure
[h264 @ 0x55e50d4a9300] mmco: unref short failure

 24%|██▍       | 54/221 [00:20<00:55,  3.01it/s][A
 25%|██▍       | 55/221 [00:20<00:45,  3.68it/s][A
 25%|██▌       | 56/221 [00:20<00:38,  4.28it/s][A
 26%|██▌       | 58/221 [00:21<00:30,  5.26it/s][A[h264 @ 0x55e50709ab80] mmco: unref short failure
[h264 @ 0x55e50709ab80] mmco: unref short failure

 27%|██▋       | 59/221 [00:21<00:29,  5.57it/s][A
 27%|██▋       | 60/221 [00:21<00:32,  4.98it/s][A
 28%|██▊       | 61/221 [00:21<00:31,  5.15it/s][A
 28%|██▊       | 62/221 [00:21<00:27,  5.87it/s][A
 29%|██▊       | 63/221 [00:22<00:26,  6.02it/s][A
 29%|██▉       | 64/221 [00:22<00:23,  6.59it/s][A
 30%|██▉       | 66/221 [00:22<00:19,  7.83it/s][A
 30%|███       | 67/221 [00:22<00:24,  6.27it/s][A
 31%|███       | 68/221 [00:22<00:32,  4.72it/s][A
 31%|███       | 69/221 [00:23<00:33,  4.47it/s][A[h264 @ 0x55e50d1d1a80] mmco: unref short failure
[h264 @ 0x55e50d1d1a80] mmco: unref short failure

 32%|███▏      | 70/221 [00:23<00:44,  3.38it/s][A
 32%|███▏      | 71/221 [00:23<00:36,  4.08it/s][A
 33%|███▎      | 73/221 [00:24<00:28,  5.19it/s][A
 34%|███▍      | 75/221 [00:24<00:25,  5.80it/s][A[h264 @ 0x55e51a22f8c0] mmco: unref short failure
[h264 @ 0x55e51a22f8c0] mmco: unref short failure
[h264 @ 0x556e4d083200] mmco: unref short failure
[h264 @ 0x556e4d083200] mmco: unref short failure

 34%|███▍      | 76/221 [00:26<01:28,  1.64it/s][A[h264 @ 0x556e53882040] mmco: unref short failure

 35%|███▍      | 77/221 [00:30<03:21,  1.40s/it][A
 35%|███▌      | 78/221 [00:30<02:34,  1.08s/it][A
 36%|███▌      | 79/221 [00:30<01:57,  1.21it/s][A
 37%|███▋      | 81/221 [00:31<01:22,  1.70it/s][A
 38%|███▊      | 83/221 [00:31<00:58,  2.34it/s][A
[h264 @ 0x55b7cc49d6c0] mmco: unref short failure
[h264 @ 0x55b7cc49d6c0] mmco: unref short failure
 38%|███▊      | 84/221 [00:32<00:58,  2.35it/s][A
 38%|███▊      | 85/221 [00:32<00:50,  2.68it/s][A
 39%|███▉      | 86/221 [00:32<00:45,  2.99it/s][A
 39%|███▉      | 87/221 [00:32<00:38,  3.52it/s][A
 40%|███▉      | 88/221 [00:32<00:32,  4.05it/s][A
 40%|████      | 89/221 [00:33<00:37,  3.55it/s][A[h264 @ 0x55b7e142a500] mmco: unref short failure

 41%|████      | 91/221 [00:33<00:29,  4.42it/s][A
 42%|████▏     | 92/221 [00:36<01:50,  1.17it/s][A
 42%|████▏     | 93/221 [00:36<01:27,  1.46it/s][A
 43%|████▎     | 94/221 [00:36<01:13,  1.72it/s][A
 43%|████▎     | 95/221 [00:36<00:58,  2.17it/s][A
 43%|████▎     | 96/221 [00:36<00:45,  2.76it/s][A
 44%|████▍     | 97/221 [00:37<00:36,  3.42it/s][A
 45%|████▍     | 99/221 [00:37<00:29,  4.16it/s][A
 45%|████▌     | 100/221 [00:37<00:25,  4.75it/s][A
 46%|████▌     | 101/221 [00:37<00:23,  5.15it/s][A
 46%|████▌     | 102/221 [00:38<00:46,  2.53it/s][A
 47%|████▋     | 103/221 [00:38<00:41,  2.82it/s][A[h264 @ 0x55b7d67a18c0] mmco: unref short failure

 47%|████▋     | 104/221 [00:39<00:34,  3.37it/s][A[h264 @ 0x556e531a9b00] mmco: unref short failure
[h264 @ 0x556e531a9b00] mmco: unref short failure

 48%|████▊     | 105/221 [00:39<00:31,  3.67it/s][A[h264 @ 0x55b7de5cb9c0] mmco: unref short failure
[h264 @ 0x55b7de5cb9c0] mmco: unref short failure

 48%|████▊     | 106/221 [00:39<00:31,  3.66it/s][A
 48%|████▊     | 107/221 [00:39<00:27,  4.18it/s][A
 49%|████▉     | 108/221 [00:39<00:24,  4.62it/s][A
 49%|████▉     | 109/221 [00:39<00:20,  5.49it/s][A
 50%|████▉     | 110/221 [00:40<00:19,  5.69it/s][A
 50%|█████     | 111/221 [00:40<00:24,  4.57it/s][A
 51%|█████     | 113/221 [00:40<00:18,  5.98it/s][A
 52%|█████▏    | 114/221 [00:40<00:18,  5.67it/s][A
 52%|█████▏    | 115/221 [00:41<00:19,  5.45it/s][A
 53%|█████▎    | 117/221 [00:41<00:18,  5.59it/s][A
 53%|█████▎    | 118/221 [00:41<00:17,  5.94it/s][A
 54%|█████▍    | 119/221 [00:41<00:15,  6.40it/s][A
 54%|█████▍    | 120/221 [00:41<00:15,  6.68it/s][A[h264 @ 0x55e501e75c40] mmco: unref short failure
[h264 @ 0x55e501e75c40] mmco: unref short failure
[h264 @ 0x55e501e75c40] mmco: unref short failure
[h264 @ 0x55e501e75c40] mmco: unref short failure
[h264 @ 0x55e501e75c40] mmco: unref short failure
[h264 @ 0x55e501e75c40] mmco: unref short failure

 55%|█████▌    | 122/221 [00:42<00:16,  5.90it/s][A
 56%|█████▌    | 123/221 [00:42<00:16,  5.80it/s][A[h264 @ 0x55b7e288fd40] mmco: unref short failure
[h264 @ 0x55b7e288fd40] mmco: unref short failure
[h264 @ 0x55b7e288fd40] mmco: unref short failure
[h264 @ 0x55b7e288fd40] mmco: unref short failure

 56%|█████▌    | 124/221 [00:43<00:31,  3.07it/s][A
 57%|█████▋    | 126/221 [00:43<00:21,  4.48it/s][A[h264 @ 0x556e6131d740] mmco: unref short failure
[h264 @ 0x556e6131d740] mmco: unref short failure

 58%|█████▊    | 128/221 [00:43<00:15,  5.84it/s][A
 58%|█████▊    | 129/221 [00:43<00:14,  6.33it/s][A
 59%|█████▉    | 130/221 [00:43<00:15,  5.96it/s][A[h264 @ 0x55b7cb735b80] mmco: unref short failure
[h264 @ 0x55b7cb735b80] mmco: unref short failure
[h264 @ 0x55b7cb735b80] mmco: unref short failure
[h264 @ 0x55b7cb735b80] mmco: unref short failure
[h264 @ 0x556e5fb556c0] mmco: unref short failure
[h264 @ 0x556e5fb556c0] mmco: unref short failure

 60%|█████▉    | 132/221 [00:47<01:07,  1.31it/s][A
 61%|██████    | 134/221 [00:47<00:44,  1.96it/s][A
 62%|██████▏   | 136/221 [00:47<00:31,  2.68it/s][A
 62%|██████▏   | 137/221 [00:47<00:31,  2.64it/s][A[h264 @ 0x55b7cf44e280] mmco: unref short failure
[h264 @ 0x55b7cf44e280] mmco: unref short failure

 62%|██████▏   | 138/221 [00:48<00:34,  2.39it/s][A
 63%|██████▎   | 139/221 [00:48<00:29,  2.77it/s][A
 63%|██████▎   | 140/221 [00:48<00:25,  3.23it/s][A
 64%|██████▍   | 141/221 [00:49<00:23,  3.47it/s][A
 64%|██████▍   | 142/221 [00:49<00:19,  3.97it/s][A
 65%|██████▍   | 143/221 [00:49<00:16,  4.70it/s][A
 66%|██████▌   | 145/221 [00:49<00:11,  6.61it/s][A
 66%|██████▌   | 146/221 [00:49<00:10,  6.82it/s][A
 67%|██████▋   | 147/221 [00:49<00:11,  6.63it/s][A
 67%|██████▋   | 149/221 [00:49<00:07,  9.00it/s][A
 68%|██████▊   | 151/221 [00:50<00:08,  8.11it/s][A
 69%|██████▉   | 153/221 [00:50<00:07,  9.53it/s][A
 70%|███████   | 155/221 [00:50<00:09,  6.97it/s][A
 71%|███████   | 157/221 [00:50<00:07,  8.32it/s][A
 72%|███████▏  | 159/221 [00:52<00:20,  2.98it/s][A
 72%|███████▏  | 160/221 [00:52<00:22,  2.76it/s][A
 73%|███████▎  | 162/221 [00:53<00:16,  3.50it/s][A
 74%|███████▍  | 164/221 [00:53<00:13,  4.26it/s][A
 75%|███████▍  | 165/221 [00:54<00:18,  3.10it/s][A
 75%|███████▌  | 166/221 [00:54<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:54<00:13,  3.96it/s][A
 76%|███████▌  | 168/221 [00:54<00:11,  4.46it/s][A
 77%|███████▋  | 170/221 [00:55<00:13,  3.70it/s][A
 77%|███████▋  | 171/221 [00:55<00:11,  4.18it/s][A
 78%|███████▊  | 172/221 [00:55<00:12,  3.87it/s][A
 79%|███████▊  | 174/221 [00:55<00:08,  5.25it/s][A
 79%|███████▉  | 175/221 [00:56<00:08,  5.67it/s][A
 80%|████████  | 177/221 [00:56<00:05,  7.83it/s][A
 81%|████████  | 179/221 [00:56<00:04,  9.06it/s][A[h264 @ 0x556e439eb800] mmco: unref short failure
[h264 @ 0x556e439eb800] mmco: unref short failure

 82%|████████▏ | 181/221 [00:58<00:19,  2.09it/s][A
 82%|████████▏ | 182/221 [00:58<00:16,  2.32it/s][A
 83%|████████▎ | 183/221 [00:59<00:13,  2.73it/s][A
 84%|████████▎ | 185/221 [00:59<00:10,  3.58it/s][A
 85%|████████▍ | 187/221 [00:59<00:07,  4.55it/s][A
 85%|████████▌ | 188/221 [00:59<00:06,  4.98it/s][A
 86%|████████▌ | 190/221 [00:59<00:04,  6.50it/s][A
 87%|████████▋ | 192/221 [01:00<00:03,  7.72it/s][A
 88%|████████▊ | 194/221 [01:00<00:04,  6.62it/s][A
 89%|████████▉ | 197/221 [01:00<00:02,  9.16it/s][A
 90%|█████████ | 199/221 [01:00<00:02, 10.58it/s][A[h264 @ 0x55b7e2efec40] mmco: unref short failure
[h264 @ 0x55b7e2efec40] mmco: unref short failure

 91%|█████████ | 201/221 [01:00<00:02,  9.70it/s][A 92%|█████████▏| 203/221 [01:00<00:05,  3.33it/s]
[h264 @ 0x55b7cac7aac0] mmco: unref short failure
[h264 @ 0x55b7cac7aac0] mmco: unref short failure
[h264 @ 0x55b7df160d00] mmco: unref short failure
[h264 @ 0x55b7df160d00] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.79it/s][A
  1%|          | 2/221 [00:00<00:57,  3.79it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.79it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.78it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.79it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.79it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.79it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.79it/s][A
  4%|▍         | 9/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.79it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.79it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.79it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.79it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.79it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:51,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:47,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:37,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:23<00:34,  3.80it/s][A
 42%|████▏     | 92/221 [00:24<00:33,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.80it/s][A
 43%|████▎     | 96/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 125/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 130/221 [00:34<00:23,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.79it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.79it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.79it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.79it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.79it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.79it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.79it/s][A
 65%|██████▌   | 144/221 [00:37<00:20,  3.79it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.79it/s][A
 67%|██████▋   | 149/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.79it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.79it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.79it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.79it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.79it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.79it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.79it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 159/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.79it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.79it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 163/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.79it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.79it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.79it/s][A
 76%|███████▌  | 168/221 [00:44<00:13,  3.79it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.79it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.79it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.79it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.79it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.79it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 178/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.79it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 182/221 [00:47<00:10,  3.79it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.78it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.78it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.79it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.79it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.79it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.79it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.79it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.79it/s][A
 89%|████████▉ | 197/221 [00:51<00:06,  3.79it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.79it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.79it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.79it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.79it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.79it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.79it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.79it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.79it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.79it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▌| 212/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.79it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.79it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.79it/s][A
 98%|█████████▊| 216/221 [00:56<00:01,  3.79it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.79it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.79it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.79it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.79it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.79it/s][A100%|██████████| 221/221 [00:58<00:00,  3.79it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:25,  8.48it/s][A
  1%|          | 2/221 [00:00<00:38,  5.71it/s][A
  1%|▏         | 3/221 [00:00<00:37,  5.83it/s][A
  2%|▏         | 4/221 [00:00<00:33,  6.52it/s][A
  2%|▏         | 5/221 [00:00<00:38,  5.56it/s][A
  3%|▎         | 6/221 [00:01<00:37,  5.75it/s][A
  3%|▎         | 7/221 [00:01<00:44,  4.81it/s][A
  4%|▎         | 8/221 [00:01<00:54,  3.93it/s][A
  4%|▍         | 9/221 [00:01<00:51,  4.13it/s][A
  5%|▍         | 10/221 [00:02<01:13,  2.85it/s][A
  5%|▍         | 11/221 [00:02<01:03,  3.32it/s][A
  5%|▌         | 12/221 [00:02<00:51,  4.04it/s][A
  6%|▌         | 13/221 [00:03<01:27,  2.38it/s][A
  7%|▋         | 15/221 [00:03<00:59,  3.44it/s][A
  7%|▋         | 16/221 [00:04<00:59,  3.44it/s][A
  8%|▊         | 17/221 [00:04<01:07,  3.02it/s][A
  8%|▊         | 18/221 [00:04<01:10,  2.87it/s][A
  9%|▊         | 19/221 [00:05<01:07,  3.01it/s][A
  9%|▉         | 20/221 [00:05<00:54,  3.66it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.84it/s][A
 10%|▉         | 22/221 [00:05<00:44,  4.50it/s][A
 11%|█         | 24/221 [00:06<00:35,  5.48it/s][A
 11%|█▏        | 25/221 [00:06<00:38,  5.13it/s][A
 12%|█▏        | 26/221 [00:06<00:40,  4.77it/s][A
 12%|█▏        | 27/221 [00:06<00:47,  4.06it/s][A
 13%|█▎        | 28/221 [00:07<00:48,  3.98it/s][A
 13%|█▎        | 29/221 [00:07<00:45,  4.18it/s][A
 14%|█▎        | 30/221 [00:07<00:41,  4.55it/s][A
 14%|█▍        | 31/221 [00:07<00:39,  4.86it/s][A
 14%|█▍        | 32/221 [00:08<00:44,  4.21it/s][A
 15%|█▍        | 33/221 [00:08<00:43,  4.36it/s][A
 15%|█▌        | 34/221 [00:08<00:48,  3.85it/s][A
 16%|█▌        | 35/221 [00:08<00:52,  3.53it/s][A
 16%|█▋        | 36/221 [00:09<00:49,  3.75it/s][A
 17%|█▋        | 37/221 [00:09<00:50,  3.67it/s][A
 17%|█▋        | 38/221 [00:09<00:45,  4.06it/s][A
 18%|█▊        | 39/221 [00:09<00:42,  4.31it/s][A
 18%|█▊        | 40/221 [00:10<00:55,  3.27it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.81it/s][A
 19%|█▉        | 42/221 [00:10<00:41,  4.30it/s][A
 19%|█▉        | 43/221 [00:10<00:42,  4.19it/s][A
 20%|█▉        | 44/221 [00:10<00:35,  4.94it/s][A
 20%|██        | 45/221 [00:11<00:33,  5.29it/s][A
 21%|██        | 46/221 [00:11<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:11<00:47,  3.68it/s][A
 22%|██▏       | 48/221 [00:12<00:48,  3.57it/s][A
 22%|██▏       | 49/221 [00:12<00:48,  3.58it/s][A
 23%|██▎       | 50/221 [00:12<00:45,  3.74it/s][A
 23%|██▎       | 51/221 [00:12<00:37,  4.55it/s][A
 24%|██▎       | 52/221 [00:12<00:34,  4.87it/s][A
 24%|██▍       | 53/221 [00:13<00:30,  5.43it/s][A
 24%|██▍       | 54/221 [00:13<00:36,  4.60it/s][A
 25%|██▍       | 55/221 [00:13<00:31,  5.19it/s][A
 25%|██▌       | 56/221 [00:13<00:32,  5.07it/s][A
 26%|██▌       | 57/221 [00:13<00:32,  5.03it/s][A
 26%|██▌       | 58/221 [00:14<00:47,  3.45it/s][A
 27%|██▋       | 59/221 [00:14<00:45,  3.59it/s][A
 28%|██▊       | 61/221 [00:14<00:34,  4.66it/s][A
 28%|██▊       | 62/221 [00:15<00:32,  4.88it/s][A
 29%|██▊       | 63/221 [00:15<00:28,  5.60it/s][A
 29%|██▉       | 64/221 [00:15<00:27,  5.66it/s][A
 30%|██▉       | 66/221 [00:15<00:33,  4.69it/s][A
 30%|███       | 67/221 [00:16<00:57,  2.66it/s][A
 31%|███       | 68/221 [00:16<00:48,  3.17it/s][A
 31%|███       | 69/221 [00:17<00:55,  2.75it/s][A
 32%|███▏      | 70/221 [00:17<00:46,  3.24it/s][A
 32%|███▏      | 71/221 [00:17<00:45,  3.30it/s][A
 33%|███▎      | 72/221 [00:18<00:47,  3.14it/s][A
 33%|███▎      | 73/221 [00:18<00:40,  3.68it/s][A
 33%|███▎      | 74/221 [00:18<00:36,  3.98it/s][A
 34%|███▍      | 75/221 [00:18<00:35,  4.10it/s][A
 34%|███▍      | 76/221 [00:19<00:34,  4.22it/s][A
 35%|███▍      | 77/221 [00:19<00:28,  4.97it/s][A
 35%|███▌      | 78/221 [00:19<00:25,  5.59it/s][A
 36%|███▌      | 79/221 [00:19<00:45,  3.09it/s][A
 36%|███▌      | 80/221 [00:20<00:41,  3.42it/s][A
 37%|███▋      | 81/221 [00:20<00:37,  3.75it/s][A
 37%|███▋      | 82/221 [00:20<00:39,  3.48it/s][A
 38%|███▊      | 83/221 [00:20<00:36,  3.76it/s][A
 38%|███▊      | 84/221 [00:21<00:34,  3.99it/s][A
 38%|███▊      | 85/221 [00:21<00:32,  4.21it/s][A
 39%|███▉      | 86/221 [00:21<00:27,  4.87it/s][A
 39%|███▉      | 87/221 [00:21<00:29,  4.52it/s][A
 40%|███▉      | 88/221 [00:22<00:36,  3.61it/s][A
 40%|████      | 89/221 [00:22<00:43,  3.06it/s][A
 41%|████      | 90/221 [00:22<00:41,  3.18it/s][A
 41%|████      | 91/221 [00:23<00:34,  3.74it/s][A
 42%|████▏     | 92/221 [00:23<00:35,  3.61it/s][A
 42%|████▏     | 93/221 [00:24<01:13,  1.75it/s][A
 43%|████▎     | 94/221 [00:25<01:10,  1.80it/s][A
 43%|████▎     | 95/221 [00:25<00:57,  2.21it/s][A
 43%|████▎     | 96/221 [00:25<00:44,  2.80it/s][A
 44%|████▍     | 97/221 [00:25<00:36,  3.37it/s][A
 44%|████▍     | 98/221 [00:25<00:29,  4.18it/s][A
 45%|████▍     | 99/221 [00:26<00:30,  3.95it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.90it/s][A
 46%|████▌     | 101/221 [00:26<00:43,  2.77it/s][A
 46%|████▌     | 102/221 [00:27<00:49,  2.42it/s][A
 47%|████▋     | 103/221 [00:27<00:46,  2.55it/s][A
 47%|████▋     | 104/221 [00:28<00:41,  2.83it/s][A
 48%|████▊     | 105/221 [00:28<00:35,  3.23it/s][A
 48%|████▊     | 106/221 [00:28<00:32,  3.50it/s][A
 48%|████▊     | 107/221 [00:28<00:32,  3.53it/s][A
 49%|████▉     | 108/221 [00:28<00:28,  3.96it/s][A
 49%|████▉     | 109/221 [00:29<00:26,  4.17it/s][A
 50%|████▉     | 110/221 [00:29<00:26,  4.14it/s][A
 50%|█████     | 111/221 [00:29<00:28,  3.86it/s][A
 51%|█████     | 112/221 [00:29<00:29,  3.70it/s][A
 51%|█████     | 113/221 [00:30<00:26,  4.14it/s][A
 52%|█████▏    | 114/221 [00:30<00:21,  4.99it/s][A
 52%|█████▏    | 115/221 [00:30<00:23,  4.47it/s][A
 52%|█████▏    | 116/221 [00:30<00:28,  3.70it/s][A
 53%|█████▎    | 117/221 [00:31<00:25,  4.15it/s][A
 53%|█████▎    | 118/221 [00:31<00:24,  4.21it/s][A
 54%|█████▍    | 119/221 [00:32<00:38,  2.63it/s][A
 54%|█████▍    | 120/221 [00:32<00:33,  2.97it/s][A
 55%|█████▍    | 121/221 [00:32<00:26,  3.76it/s][A
 55%|█████▌    | 122/221 [00:32<00:24,  3.99it/s][A
 56%|█████▌    | 123/221 [00:32<00:27,  3.61it/s][A
 56%|█████▌    | 124/221 [00:33<00:22,  4.26it/s][A
 57%|█████▋    | 125/221 [00:33<00:26,  3.59it/s][A
 57%|█████▋    | 126/221 [00:33<00:29,  3.25it/s][A
 57%|█████▋    | 127/221 [00:34<00:30,  3.12it/s][A
 58%|█████▊    | 128/221 [00:34<00:27,  3.41it/s][A
 58%|█████▊    | 129/221 [00:34<00:28,  3.19it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.71it/s][A
 60%|█████▉    | 132/221 [00:35<00:15,  5.82it/s][A
 60%|██████    | 133/221 [00:35<00:17,  5.14it/s][A
 61%|██████    | 134/221 [00:35<00:16,  5.30it/s][A
 61%|██████    | 135/221 [00:35<00:16,  5.30it/s][A
 62%|██████▏   | 136/221 [00:35<00:17,  4.83it/s][A
 62%|██████▏   | 137/221 [00:36<00:15,  5.40it/s][A
 62%|██████▏   | 138/221 [00:36<00:16,  5.04it/s][A
 63%|██████▎   | 139/221 [00:36<00:23,  3.43it/s][A
 63%|██████▎   | 140/221 [00:37<00:21,  3.70it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 142/221 [00:37<00:18,  4.17it/s][A
 65%|██████▍   | 143/221 [00:38<00:27,  2.83it/s][A
 65%|██████▌   | 144/221 [00:38<00:30,  2.51it/s][A
 66%|██████▌   | 145/221 [00:38<00:25,  2.95it/s][A
 66%|██████▌   | 146/221 [00:38<00:20,  3.70it/s][A
 67%|██████▋   | 147/221 [00:39<00:19,  3.75it/s][A
 67%|██████▋   | 148/221 [00:39<00:20,  3.60it/s][A
 67%|██████▋   | 149/221 [00:39<00:16,  4.40it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.88it/s][A
 68%|██████▊   | 151/221 [00:40<00:21,  3.18it/s][A
 69%|██████▉   | 152/221 [00:40<00:28,  2.45it/s][A
 69%|██████▉   | 153/221 [00:41<00:24,  2.81it/s][A
 70%|██████▉   | 154/221 [00:41<00:20,  3.33it/s][A
 70%|███████   | 155/221 [00:41<00:17,  3.82it/s][A
 71%|███████   | 156/221 [00:41<00:18,  3.51it/s][A
 71%|███████   | 157/221 [00:42<00:16,  3.81it/s][A
 71%|███████▏  | 158/221 [00:42<00:16,  3.71it/s][A
 72%|███████▏  | 159/221 [00:42<00:15,  3.95it/s][A
 72%|███████▏  | 160/221 [00:42<00:15,  3.96it/s][A
 73%|███████▎  | 161/221 [00:43<00:19,  3.09it/s][A
 73%|███████▎  | 162/221 [00:43<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.69it/s][A
 74%|███████▍  | 164/221 [00:44<00:16,  3.36it/s][A
 75%|███████▍  | 165/221 [00:44<00:14,  3.89it/s][A
 75%|███████▌  | 166/221 [00:44<00:14,  3.80it/s][A
 76%|███████▌  | 168/221 [00:45<00:14,  3.73it/s][A
 76%|███████▋  | 169/221 [00:45<00:13,  3.87it/s][A
 77%|███████▋  | 170/221 [00:45<00:17,  2.93it/s][A
 77%|███████▋  | 171/221 [00:46<00:14,  3.54it/s][A
 78%|███████▊  | 172/221 [00:46<00:11,  4.19it/s][A
 78%|███████▊  | 173/221 [00:46<00:12,  3.75it/s][A
 79%|███████▊  | 174/221 [00:47<00:18,  2.59it/s][A
 79%|███████▉  | 175/221 [00:47<00:16,  2.74it/s][A
 80%|███████▉  | 176/221 [00:47<00:14,  3.10it/s][A
 80%|████████  | 177/221 [00:47<00:11,  3.74it/s][A
 81%|████████  | 178/221 [00:48<00:10,  4.24it/s][A
 81%|████████  | 179/221 [00:48<00:09,  4.22it/s][A
 81%|████████▏ | 180/221 [00:48<00:08,  4.60it/s][A
 82%|████████▏ | 181/221 [00:48<00:10,  3.94it/s][A
 82%|████████▏ | 182/221 [00:48<00:09,  4.31it/s][A
 83%|████████▎ | 183/221 [00:49<00:08,  4.34it/s][A
 83%|████████▎ | 184/221 [00:49<00:07,  5.05it/s][A
 84%|████████▎ | 185/221 [00:49<00:07,  5.05it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.61it/s][A
 85%|████████▍ | 187/221 [00:50<00:08,  4.07it/s][A
 85%|████████▌ | 188/221 [00:50<00:08,  4.11it/s][A
 86%|████████▌ | 189/221 [00:50<00:07,  4.09it/s][A
 86%|████████▌ | 190/221 [00:51<00:09,  3.38it/s][A
 86%|████████▋ | 191/221 [00:51<00:07,  3.97it/s][A
 87%|████████▋ | 192/221 [00:51<00:09,  3.07it/s][A
 87%|████████▋ | 193/221 [00:51<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:52<00:08,  3.27it/s][A
 88%|████████▊ | 195/221 [00:52<00:07,  3.41it/s][A
 89%|████████▊ | 196/221 [00:52<00:08,  3.04it/s][A
 89%|████████▉ | 197/221 [00:53<00:06,  3.82it/s][A
 90%|████████▉ | 198/221 [00:53<00:09,  2.47it/s][A
 90%|█████████ | 199/221 [00:53<00:07,  2.88it/s][A
 90%|█████████ | 200/221 [00:54<00:07,  2.95it/s][A
 91%|█████████ | 201/221 [00:54<00:06,  2.95it/s][A
 91%|█████████▏| 202/221 [00:55<00:06,  2.72it/s][A
 92%|█████████▏| 204/221 [00:55<00:06,  2.64it/s][A
 93%|█████████▎| 205/221 [00:55<00:05,  3.14it/s][A
 93%|█████████▎| 206/221 [00:56<00:04,  3.16it/s][A
 94%|█████████▎| 207/221 [00:56<00:04,  3.20it/s][A
 95%|█████████▍| 209/221 [00:56<00:03,  3.84it/s][A
 95%|█████████▌| 210/221 [00:57<00:03,  3.65it/s][A
 95%|█████████▌| 211/221 [00:57<00:02,  3.41it/s][A
 96%|█████████▌| 212/221 [00:57<00:02,  3.59it/s][A
 96%|█████████▋| 213/221 [00:58<00:02,  3.56it/s][A
 97%|█████████▋| 214/221 [00:58<00:02,  2.76it/s][A
 97%|█████████▋| 215/221 [00:59<00:02,  2.93it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  2.99it/s][A
 98%|█████████▊| 217/221 [00:59<00:01,  3.34it/s][A
 99%|█████████▊| 218/221 [00:59<00:00,  3.20it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  3.00it/s][A
100%|█████████▉| 220/221 [01:00<00:00,  2.97it/s][A
100%|██████████| 221/221 [01:00<00:00,  2.92it/s][A100%|██████████| 221/221 [01:00<00:00,  3.62it/s]
09/09/2024 22:14:43 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 1249--===========

09/09/2024 22:14:43 - INFO - __main__ -   {'area_r1': 15.3, 'area_recall': '15.3/33.4/45.1', 'area_ravg': 31.3}
09/09/2024 22:14:43 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 1249--===========

09/09/2024 22:14:43 - INFO - __main__ -   {'forward_r1': 32.2, 'forward_recall': '32.2/57.6/67.9', 'forward_ravg': 52.6}
09/09/2024 22:14:43 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 1249--===========

09/09/2024 22:14:43 - INFO - __main__ -   {'area_video_r1': 42.2, 'area_video_recall': '42.2/69.9/79.6', 'area_video_ravg': 63.9}
09/09/2024 22:14:43 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 1199=======

09/09/2024 22:14:43 - INFO - __main__ -   {'area_video_r1': 42.6, 'area_video_recall': '42.6/70.6/80.1', 'area_video_ravg': 64.4}
09/09/2024 22:14:43 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 1249--===========

09/09/2024 22:14:43 - INFO - __main__ -   {'area_video_r1': 45.7, 'area_video_recall': '45.7/62.8/67.2', 'area_video_ravg': 58.6, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/71.9/79.1', 'area_video_back_ravg': 66.9}
09/09/2024 22:14:43 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 22:14:43 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 22:14:43 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 1249--===========

09/09/2024 22:14:43 - INFO - __main__ -   {'video_r1': 39.7, 'video_recall': '39.7/68.6/79.3', 'video_ravg': 62.5}
09/09/2024 22:14:43 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 22:14:43 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 22:14:43 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 1249--===========

09/09/2024 22:14:43 - INFO - __main__ -   {'video_r1': 52.6, 'video_recall': '52.6/74.5/82.1', 'video_ravg': 69.8}
09/09/2024 22:14:43 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 1049=======

09/09/2024 22:14:43 - INFO - __main__ -   {'video_r1': 52.9, 'video_recall': '52.9/74.5/82.8', 'video_ravg': 70.1}
09/09/2024 22:15:05 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.6360851526260376, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.02726634591817856, 'loss_ret%tv%ta--finetune_area/loss_area': 1.2508312463760376, 'loss_ret%tv%ta--finetune_area/total_loss': 2.914182662963867}
[h264 @ 0x556e616b5300] mmco: unref short failure
[h264 @ 0x556e529d2cc0] mmco: unref short failure
[h264 @ 0x556e529d2cc0] mmco: unref short failure
 64%|██████▍   | 1250/1945 [6:49:39<23:54:34, 123.85s/it] 64%|██████▍   | 1251/1945 [6:49:43<16:57:05, 87.93s/it] [h264 @ 0x556e5a984a00] mmco: unref short failure
[h264 @ 0x556e6d5c0280] mmco: unref short failure
[h264 @ 0x556e6d5c0280] mmco: unref short failure
[h264 @ 0x556e5d92f400] mmco: unref short failure
 64%|██████▍   | 1252/1945 [6:49:48<12:06:51, 62.93s/it][h264 @ 0x55e502b1dd80] mmco: unref short failure
[h264 @ 0x55e502b1dd80] mmco: unref short failure
[h264 @ 0x556e68d809c0] mmco: unref short failure
 64%|██████▍   | 1253/1945 [6:49:53<8:47:18, 45.72s/it]  64%|██████▍   | 1254/1945 [6:49:59<6:26:27, 33.56s/it][h264 @ 0x556e42707800] mmco: unref short failure
 65%|██████▍   | 1255/1945 [6:50:05<4:52:19, 25.42s/it] 65%|██████▍   | 1256/1945 [6:50:12<3:48:08, 19.87s/it][h264 @ 0x556e58659d00] mmco: unref short failure
[h264 @ 0x556e58659d00] mmco: unref short failure
[h264 @ 0x556e62dedb00] mmco: unref short failure
[h264 @ 0x556e50580980] mmco: unref short failure
not have audios 8-qwaveiHMM.3
 65%|██████▍   | 1257/1945 [6:50:19<3:03:34, 16.01s/it][h264 @ 0x55b7d135a5c0] mmco: unref short failure
 65%|██████▍   | 1258/1945 [6:50:26<2:33:39, 13.42s/it][h264 @ 0x556e49740300] mmco: unref short failure
[h264 @ 0x556e49740300] mmco: unref short failure
[h264 @ 0x556e49740300] mmco: unref short failure
[h264 @ 0x556e49740300] mmco: unref short failure
 65%|██████▍   | 1259/1945 [6:50:33<2:10:22, 11.40s/it] 65%|██████▍   | 1260/1945 [6:50:41<1:59:30, 10.47s/it][h264 @ 0x55b7e4d54900] mmco: unref short failure
 65%|██████▍   | 1261/1945 [6:50:49<1:49:52,  9.64s/it] 65%|██████▍   | 1262/1945 [6:50:56<1:40:21,  8.82s/it][h264 @ 0x55b7d1347680] mmco: unref short failure
[h264 @ 0x55b7d1347680] mmco: unref short failure
[h264 @ 0x55b7d1347680] mmco: unref short failure
[h264 @ 0x55e50d941100] mmco: unref short failure
[h264 @ 0x55b7d67e0940] mmco: unref short failure
[h264 @ 0x55e5013af140] mmco: unref short failure
[h264 @ 0x55e5013af140] mmco: unref short failure
[h264 @ 0x55e5013af140] mmco: unref short failure
[h264 @ 0x55e5013af140] mmco: unref short failure
[h264 @ 0x55e515506ec0] mmco: unref short failure
[h264 @ 0x55e515506ec0] mmco: unref short failure
 65%|██████▍   | 1263/1945 [6:51:03<1:33:46,  8.25s/it][h264 @ 0x556e57c61580] mmco: unref short failure
[h264 @ 0x556e57c61580] mmco: unref short failure
[h264 @ 0x55b7e18f8800] mmco: unref short failure
 65%|██████▍   | 1264/1945 [6:51:10<1:30:08,  7.94s/it] 65%|██████▌   | 1265/1945 [6:51:18<1:29:48,  7.92s/it] 65%|██████▌   | 1266/1945 [6:51:26<1:29:34,  7.92s/it] 65%|██████▌   | 1267/1945 [6:51:33<1:27:26,  7.74s/it][h264 @ 0x556e5363b380] mmco: unref short failure
[h264 @ 0x556e5f5e5980] mmco: unref short failure
[h264 @ 0x556e5f5e5980] mmco: unref short failure
[h264 @ 0x55e512425480] mmco: unref short failure
 65%|██████▌   | 1268/1945 [6:51:41<1:26:19,  7.65s/it][h264 @ 0x55e5123fca00] mmco: unref short failure
[h264 @ 0x55e5196ee280] mmco: unref short failure
 65%|██████▌   | 1269/1945 [6:51:51<1:35:00,  8.43s/it][h264 @ 0x556e5661e980] mmco: unref short failure
[h264 @ 0x556e5661e980] mmco: unref short failure
[h264 @ 0x556e4420a1c0] mmco: unref short failure
[h264 @ 0x55b7e5f85bc0] mmco: unref short failure
[h264 @ 0x55b7e5f85bc0] mmco: unref short failure
 65%|██████▌   | 1270/1945 [6:52:04<1:50:34,  9.83s/it] 65%|██████▌   | 1271/1945 [6:52:11<1:41:05,  9.00s/it][h264 @ 0x556e697fe7c0] mmco: unref short failure
[h264 @ 0x556e697fe7c0] mmco: unref short failure
[h264 @ 0x55e4fdecab40] mmco: unref short failure
[h264 @ 0x55e4fdecab40] mmco: unref short failure
 65%|██████▌   | 1272/1945 [6:52:19<1:37:33,  8.70s/it][h264 @ 0x55b7cab49a40] mmco: unref short failure
[h264 @ 0x556e52dc6a40] mmco: unref short failure
[h264 @ 0x556e52dc6a40] mmco: unref short failure
[h264 @ 0x556e4d3c33c0] mmco: unref short failure
[h264 @ 0x556e4d3c33c0] mmco: unref short failure
[h264 @ 0x55e50d06eb80] mmco: unref short failure
[h264 @ 0x55e50d06eb80] mmco: unref short failure
 65%|██████▌   | 1273/1945 [6:52:35<2:02:49, 10.97s/it][h264 @ 0x556e711c3500] mmco: unref short failure
[h264 @ 0x556e711c3500] mmco: unref short failure
[h264 @ 0x55e50a631800] mmco: unref short failure
[h264 @ 0x556e53bb2a80] mmco: unref short failure
[h264 @ 0x556e53bb2a80] mmco: unref short failure
[h264 @ 0x556e67709d00] mmco: unref short failure
[h264 @ 0x55e512ea1700] mmco: unref short failure
[h264 @ 0x55e512ea1700] mmco: unref short failure
[h264 @ 0x55b7e2a11480] mmco: unref short failure
[h264 @ 0x556e5a8b5dc0] mmco: unref short failure
[h264 @ 0x556e5a8b5dc0] mmco: unref short failure
 66%|██████▌   | 1274/1945 [6:53:26<4:15:14, 22.82s/it] 66%|██████▌   | 1275/1945 [6:53:34<3:24:11, 18.29s/it] 66%|██████▌   | 1276/1945 [6:53:40<2:44:13, 14.73s/it][h264 @ 0x556e54ca4000] mmco: unref short failure
[h264 @ 0x556e54ca4000] mmco: unref short failure
[h264 @ 0x55e51723b540] mmco: unref short failure
 66%|██████▌   | 1277/1945 [6:53:50<2:27:13, 13.22s/it][h264 @ 0x556e438b4b80] mmco: unref short failure
[h264 @ 0x556e53c41d40] mmco: unref short failure
[h264 @ 0x55e4fdeca940] mmco: unref short failure
[h264 @ 0x55e4fdeca940] mmco: unref short failure
[h264 @ 0x556e61105e40] mmco: unref short failure
[h264 @ 0x556e61105e40] mmco: unref short failure
 66%|██████▌   | 1278/1945 [6:54:10<2:51:07, 15.39s/it][h264 @ 0x556e597bbdc0] mmco: unref short failure
[h264 @ 0x55e50fb90dc0] mmco: unref short failure
 66%|██████▌   | 1279/1945 [6:54:17<2:23:26, 12.92s/it] 66%|██████▌   | 1280/1945 [6:54:25<2:05:46, 11.35s/it][h264 @ 0x55b7e66003c0] mmco: unref short failure
[h264 @ 0x556e593cd100] mmco: unref short failure
 66%|██████▌   | 1281/1945 [6:54:36<2:05:18, 11.32s/it][h264 @ 0x556e4bbd21c0] mmco: unref short failure
[h264 @ 0x556e4bbd21c0] mmco: unref short failure
[h264 @ 0x55b7d67a0980] mmco: unref short failure
[h264 @ 0x556e5c18bcc0] mmco: unref short failure
[h264 @ 0x556e597bbdc0] mmco: unref short failure
[h264 @ 0x556e67f7b880] mmco: unref short failure
[h264 @ 0x556e67f7b880] mmco: unref short failure
[h264 @ 0x55e50a386440] mmco: unref short failure
[h264 @ 0x55b7e1e31100] mmco: unref short failure
[h264 @ 0x556e603c5300] mmco: unref short failure
[h264 @ 0x55e513561a80] mmco: unref short failure
 66%|██████▌   | 1282/1945 [6:55:28<4:20:31, 23.58s/it][h264 @ 0x55b7db7088c0] mmco: unref short failure
[h264 @ 0x55b7db7088c0] mmco: unref short failure
 66%|██████▌   | 1283/1945 [6:55:36<3:27:09, 18.78s/it][h264 @ 0x556e5a956c00] mmco: unref short failure
 66%|██████▌   | 1284/1945 [6:55:42<2:46:15, 15.09s/it][h264 @ 0x55e518844a80] mmco: unref short failure
[h264 @ 0x55e518844a80] mmco: unref short failure
[h264 @ 0x55e5196c9d80] mmco: unref short failure
[h264 @ 0x55e5196c9d80] mmco: unref short failure
[h264 @ 0x556e6d1e1440] mmco: unref short failure
 66%|██████▌   | 1285/1945 [6:55:56<2:42:16, 14.75s/it][h264 @ 0x55e5190c5b80] mmco: unref short failure
[h264 @ 0x55b7e0dbfec0] mmco: unref short failure
[h264 @ 0x55b7caed3640] mmco: unref short failure
[h264 @ 0x55b7caed3640] mmco: unref short failure
 66%|██████▌   | 1286/1945 [6:56:11<2:42:09, 14.76s/it][h264 @ 0x55e5018c2940] mmco: unref short failure
[h264 @ 0x55e5018c2940] mmco: unref short failure
[h264 @ 0x556e4521b0c0] mmco: unref short failure
 66%|██████▌   | 1287/1945 [6:56:23<2:33:21, 13.98s/it][h264 @ 0x55b7db5c3380] mmco: unref short failure
[h264 @ 0x55b7db5c3380] mmco: unref short failure
[h264 @ 0x556e715d1e80] mmco: unref short failure
 66%|██████▌   | 1288/1945 [6:56:31<2:11:59, 12.05s/it][h264 @ 0x55e511875ac0] mmco: unref short failure
[h264 @ 0x55e511875ac0] mmco: unref short failure
[h264 @ 0x55e5161ae540] mmco: unref short failure
[h264 @ 0x55e5161ae540] mmco: unref short failure
 66%|██████▋   | 1289/1945 [6:56:38<1:55:24, 10.55s/it][h264 @ 0x55e508613d40] mmco: unref short failure
[h264 @ 0x55e508613d40] mmco: unref short failure
[h264 @ 0x55e514154800] mmco: unref short failure
not have audios 7wavFXW3AFw.7
[h264 @ 0x556e63e0b800] mmco: unref short failure
[h264 @ 0x556e4a4fc980] mmco: unref short failure
[h264 @ 0x556e608e0ec0] mmco: unref short failure
[h264 @ 0x55b7e11b0e00] mmco: unref short failure
[h264 @ 0x55b7e5410880] mmco: unref short failure
[h264 @ 0x55b7e5410880] mmco: unref short failure
[h264 @ 0x55b7e5410880] mmco: unref short failure
[h264 @ 0x55b7e5538580] mmco: unref short failure
[h264 @ 0x55b7e5538580] mmco: unref short failure
[h264 @ 0x55b7df950b40] mmco: unref short failure
 66%|██████▋   | 1290/1945 [6:57:27<4:01:24, 22.11s/it][h264 @ 0x55b7d1a467c0] mmco: unref short failure
[h264 @ 0x55b7d1a467c0] mmco: unref short failure
[h264 @ 0x55b7d1a467c0] mmco: unref short failure
[h264 @ 0x55b7d1a467c0] mmco: unref short failure
 66%|██████▋   | 1291/1945 [6:57:34<3:11:09, 17.54s/it][h264 @ 0x55e50739ebc0] mmco: unref short failure
[h264 @ 0x55e50739ebc0] mmco: unref short failure
 66%|██████▋   | 1292/1945 [6:57:41<2:37:58, 14.52s/it][h264 @ 0x556e4a689100] mmco: unref short failure
[h264 @ 0x556e518a3e80] mmco: unref short failure
[h264 @ 0x55e51d916e80] mmco: unref short failure
[h264 @ 0x55e51d916e80] mmco: unref short failure
[h264 @ 0x556e5cf53b40] mmco: unref short failure
 66%|██████▋   | 1293/1945 [6:58:05<3:06:33, 17.17s/it][h264 @ 0x556e6e7e9f80] mmco: unref short failure
[h264 @ 0x556e6e7e9f80] mmco: unref short failure
 67%|██████▋   | 1294/1945 [6:58:12<2:33:55, 14.19s/it][h264 @ 0x556e6d966780] mmco: unref short failure
[h264 @ 0x556e52e27a40] mmco: unref short failure
[h264 @ 0x556e52e27a40] mmco: unref short failure
[h264 @ 0x556e46cea200] mmco: unref short failure
[h264 @ 0x556e46cea200] mmco: unref short failure
 67%|██████▋   | 1295/1945 [6:58:19<2:10:32, 12.05s/it][h264 @ 0x55b7d1a46580] mmco: unref short failure
[h264 @ 0x55b7d1a46580] mmco: unref short failure
[h264 @ 0x556e619f2f00] mmco: unref short failure
[h264 @ 0x55e5182c7a00] mmco: unref short failure
[h264 @ 0x55e5182c7a00] mmco: unref short failure
[h264 @ 0x55e5182c7a00] mmco: unref short failure
[h264 @ 0x55e5182c7a00] mmco: unref short failure
[h264 @ 0x55b7d007d740] mmco: unref short failure
[h264 @ 0x55b7d007d740] mmco: unref short failure
[h264 @ 0x556e5d555a40] mmco: unref short failure
[h264 @ 0x556e5d555a40] mmco: unref short failure
 67%|██████▋   | 1296/1945 [6:58:27<1:55:38, 10.69s/it][h264 @ 0x55b7ce2e4e80] mmco: unref short failure
[h264 @ 0x55b7ce2e4e80] mmco: unref short failure
[h264 @ 0x556e6b609bc0] mmco: unref short failure
[h264 @ 0x556e6b609bc0] mmco: unref short failure
[h264 @ 0x556e6b609bc0] mmco: unref short failure
[h264 @ 0x556e640446c0] mmco: unref short failure
[h264 @ 0x556e640446c0] mmco: unref short failure
 67%|██████▋   | 1297/1945 [6:58:37<1:53:33, 10.51s/it][h264 @ 0x556e5fc58a80] mmco: unref short failure
[h264 @ 0x55e511875ac0] mmco: unref short failure
[h264 @ 0x556e6cb73780] mmco: unref short failure
[h264 @ 0x556e6cb73780] mmco: unref short failure
[h264 @ 0x556e6cb73780] mmco: unref short failure
[h264 @ 0x556e6cb73780] mmco: unref short failure
[h264 @ 0x556e60deda40] mmco: unref short failure
[h264 @ 0x556e60deda40] mmco: unref short failure
 67%|██████▋   | 1298/1945 [6:59:27<4:01:58, 22.44s/it][h264 @ 0x55b7e5a8cd80] mmco: unref short failure
[h264 @ 0x556e4f864b40] mmco: unref short failure
[h264 @ 0x55b7d7844280] mmco: unref short failure
 67%|██████▋   | 1299/1945 [6:59:34<3:11:34, 17.79s/it]09/09/2024 22:25:02 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 22:25:02 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e5e110640] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e5dfff240] mmco: unref short failure
[h264 @ 0x556e5dfff240] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e508195580] mmco: unref short failure
[h264 @ 0x55e508195580] mmco: unref short failure
[h264 @ 0x556e4d0d3a00] mmco: unref short failure
[h264 @ 0x556e4d0d3a00] mmco: unref short failure
[h264 @ 0x556e4d0d3a00] mmco: unref short failure
[h264 @ 0x556e4d0d3a00] mmco: unref short failure
[h264 @ 0x55e4fdfec700] mmco: unref short failure
[h264 @ 0x55e4fdfec700] mmco: unref short failure
[h264 @ 0x55e4fdfec700] mmco: unref short failure
[h264 @ 0x55e4fdfec700] mmco: unref short failure
[h264 @ 0x556e6d90b280] mmco: unref short failure
[h264 @ 0x556e6d90b280] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e518496440] mmco: unref short failure
[h264 @ 0x55e503b3d3c0] mmco: unref short failure
[h264 @ 0x55e503b3d3c0] mmco: unref short failure
[h264 @ 0x55e51dc2cfc0] mmco: unref short failure
[h264 @ 0x55e51dc2cfc0] mmco: unref short failure
[h264 @ 0x55b7dc1d3b00] mmco: unref short failure
[h264 @ 0x55b7dc1d3b00] mmco: unref short failure
[h264 @ 0x556e5e1a7180] mmco: unref short failure
[h264 @ 0x556e5e1a7180] mmco: unref short failure
[h264 @ 0x55b7e2986040] mmco: unref short failure
[h264 @ 0x55b7e2986040] mmco: unref short failure
[h264 @ 0x55b7dc24c640] mmco: unref short failure
[h264 @ 0x55e500fb1500] mmco: unref short failure
[h264 @ 0x55e500fb1500] mmco: unref short failure
[h264 @ 0x556e4a3e9cc0] mmco: unref short failure
[h264 @ 0x556e4a3e9cc0] mmco: unref short failure
[h264 @ 0x55e4ff75acc0] mmco: unref short failure
[h264 @ 0x55e5142b61c0] mmco: unref short failure
[h264 @ 0x556e5fe65c80] mmco: unref short failure
[h264 @ 0x556e5fe65c80] mmco: unref short failure
[h264 @ 0x55e5113d8a80] mmco: unref short failure
[h264 @ 0x55e5113d8a80] mmco: unref short failure
[h264 @ 0x556e6ef79f40] mmco: unref short failure
[h264 @ 0x556e6ef79f40] mmco: unref short failure
[h264 @ 0x556e643c8900] mmco: unref short failure
[h264 @ 0x556e643c8900] mmco: unref short failure
[h264 @ 0x556e6ee9b1c0] mmco: unref short failure
[h264 @ 0x55b7e21ab700] mmco: unref short failure
[h264 @ 0x556e5d4ea7c0] mmco: unref short failure
[h264 @ 0x556e5edc8440] mmco: unref short failure
[h264 @ 0x556e5edc8440] mmco: unref short failure
[h264 @ 0x55e517b1e680] mmco: unref short failure
[h264 @ 0x55e517b1e680] mmco: unref short failure
[h264 @ 0x55e517b1e680] mmco: unref short failure
[h264 @ 0x55e517b1e680] mmco: unref short failure
[h264 @ 0x556e5c2c0080] mmco: unref short failure
[h264 @ 0x556e5c2c0080] mmco: unref short failure
[h264 @ 0x556e5c2c0080] mmco: unref short failure
[h264 @ 0x556e5c2c0080] mmco: unref short failure
[h264 @ 0x55e51ae83500] mmco: unref short failure
[h264 @ 0x55e51ae83500] mmco: unref short failure
[h264 @ 0x556e5c2c0080] mmco: unref short failure
[h264 @ 0x55e4fe495d00] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:22,  9.85it/s][A
  1%|          | 2/221 [00:00<00:22,  9.83it/s][A
  1%|▏         | 3/221 [00:00<00:31,  6.93it/s][A
  2%|▏         | 4/221 [00:00<00:30,  7.04it/s][A[h264 @ 0x55e50cfe0f00] mmco: unref short failure

  3%|▎         | 6/221 [00:00<00:22,  9.45it/s][A
  3%|▎         | 7/221 [00:01<01:24,  2.54it/s][A
  4%|▎         | 8/221 [00:02<01:15,  2.83it/s][A
  4%|▍         | 9/221 [00:02<01:00,  3.51it/s][A
  5%|▍         | 10/221 [00:02<01:29,  2.37it/s][A
  5%|▍         | 11/221 [00:03<01:10,  3.00it/s][A
  5%|▌         | 12/221 [00:03<00:56,  3.68it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.85it/s][A[h264 @ 0x556e4b6bec00] mmco: unref short failure
[h264 @ 0x556e4b6bec00] mmco: unref short failure

  6%|▋         | 14/221 [00:04<01:34,  2.18it/s][A
  7%|▋         | 15/221 [00:04<01:20,  2.57it/s][A[h264 @ 0x556e5d3cfcc0] mmco: unref short failure

  7%|▋         | 16/221 [00:08<05:21,  1.57s/it][A
  8%|▊         | 17/221 [00:09<03:54,  1.15s/it][A
  8%|▊         | 18/221 [00:09<03:02,  1.11it/s][A
  9%|▊         | 19/221 [00:09<02:20,  1.44it/s][A
  9%|▉         | 20/221 [00:09<01:46,  1.89it/s][A
 10%|▉         | 21/221 [00:09<01:21,  2.47it/s][A
 10%|▉         | 22/221 [00:10<01:07,  2.96it/s][A
 10%|█         | 23/221 [00:10<00:56,  3.48it/s][A
 11%|█         | 24/221 [00:10<00:47,  4.18it/s][A
 11%|█▏        | 25/221 [00:10<00:39,  4.92it/s][A
 12%|█▏        | 26/221 [00:10<00:36,  5.41it/s][A
 12%|█▏        | 27/221 [00:13<02:50,  1.14it/s][A
 13%|█▎        | 28/221 [00:13<02:08,  1.50it/s][A
 13%|█▎        | 29/221 [00:13<01:36,  1.98it/s][A
 14%|█▎        | 30/221 [00:13<01:18,  2.44it/s][A
 14%|█▍        | 31/221 [00:13<01:13,  2.59it/s][A
 15%|█▍        | 33/221 [00:14<00:45,  4.13it/s][A
 15%|█▌        | 34/221 [00:14<00:45,  4.15it/s][A
 16%|█▌        | 35/221 [00:14<00:38,  4.88it/s][A
 16%|█▋        | 36/221 [00:14<00:39,  4.64it/s][A
 17%|█▋        | 37/221 [00:14<00:41,  4.46it/s][A
 17%|█▋        | 38/221 [00:15<00:41,  4.43it/s][A
 18%|█▊        | 39/221 [00:15<00:34,  5.26it/s][A
 19%|█▊        | 41/221 [00:15<00:29,  6.17it/s][A
 19%|█▉        | 42/221 [00:15<00:26,  6.79it/s][A
 19%|█▉        | 43/221 [00:15<00:24,  7.37it/s][A
 20%|█▉        | 44/221 [00:15<00:23,  7.53it/s][A
 20%|██        | 45/221 [00:15<00:21,  8.05it/s][A
 21%|██        | 46/221 [00:17<01:55,  1.52it/s][A
 21%|██▏       | 47/221 [00:18<01:31,  1.90it/s][A[h264 @ 0x55e5030c82c0] mmco: unref short failure

 22%|██▏       | 48/221 [00:18<01:21,  2.12it/s][A
 22%|██▏       | 49/221 [00:18<01:06,  2.61it/s][A
 23%|██▎       | 50/221 [00:18<00:51,  3.30it/s][A
 23%|██▎       | 51/221 [00:18<00:46,  3.64it/s][A
 24%|██▎       | 52/221 [00:19<01:05,  2.59it/s][A
 24%|██▍       | 53/221 [00:19<00:50,  3.31it/s][A
 24%|██▍       | 54/221 [00:19<00:41,  4.03it/s][A
 25%|██▍       | 55/221 [00:20<00:38,  4.27it/s][A
 26%|██▌       | 57/221 [00:20<00:31,  5.13it/s][A
 26%|██▌       | 58/221 [00:20<00:29,  5.48it/s][A
 27%|██▋       | 59/221 [00:20<00:32,  5.06it/s][A[h264 @ 0x55b7de156d00] mmco: unref short failure

 28%|██▊       | 61/221 [00:21<00:30,  5.29it/s][A
 28%|██▊       | 62/221 [00:21<00:28,  5.56it/s][A
 29%|██▊       | 63/221 [00:21<00:25,  6.23it/s][A
 29%|██▉       | 64/221 [00:21<00:24,  6.34it/s][A
 29%|██▉       | 65/221 [00:21<00:24,  6.44it/s][A
 30%|██▉       | 66/221 [00:21<00:31,  4.90it/s][A
 30%|███       | 67/221 [00:22<00:33,  4.58it/s][A
 31%|███       | 68/221 [00:22<00:30,  5.00it/s][A
 31%|███       | 69/221 [00:22<00:41,  3.65it/s][A
 32%|███▏      | 70/221 [00:22<00:33,  4.48it/s][A
 33%|███▎      | 72/221 [00:23<00:26,  5.64it/s][A
 33%|███▎      | 73/221 [00:23<00:25,  5.69it/s][A
 33%|███▎      | 74/221 [00:23<00:26,  5.58it/s][A
 34%|███▍      | 75/221 [00:23<00:28,  5.18it/s][A
 34%|███▍      | 76/221 [00:27<02:58,  1.23s/it][A
 35%|███▍      | 77/221 [00:27<02:13,  1.08it/s][A
 36%|███▌      | 79/221 [00:28<01:19,  1.79it/s][A
 36%|███▌      | 80/221 [00:28<01:13,  1.92it/s][A
 37%|███▋      | 81/221 [00:28<01:01,  2.28it/s][A
 38%|███▊      | 83/221 [00:29<00:50,  2.75it/s][A
 38%|███▊      | 84/221 [00:29<00:44,  3.05it/s][A
 38%|███▊      | 85/221 [00:29<00:40,  3.35it/s][A
 39%|███▉      | 86/221 [00:29<00:34,  3.96it/s][A
 39%|███▉      | 87/221 [00:30<00:36,  3.71it/s][A
 40%|███▉      | 88/221 [00:30<00:33,  3.98it/s][A
 40%|████      | 89/221 [00:30<00:31,  4.23it/s][A
 41%|████      | 90/221 [00:33<02:34,  1.18s/it][A
 41%|████      | 91/221 [00:34<01:53,  1.14it/s][A
 42%|████▏     | 92/221 [00:34<01:29,  1.44it/s][A
 42%|████▏     | 93/221 [00:34<01:09,  1.85it/s][A
 43%|████▎     | 94/221 [00:34<00:52,  2.42it/s][A
 43%|████▎     | 95/221 [00:34<00:42,  2.99it/s][A
 43%|████▎     | 96/221 [00:34<00:33,  3.69it/s][A
 44%|████▍     | 97/221 [00:35<00:32,  3.82it/s][A
 45%|████▍     | 99/221 [00:35<00:23,  5.19it/s][A
 45%|████▌     | 100/221 [00:36<00:50,  2.40it/s][A
 46%|████▌     | 101/221 [00:36<00:44,  2.71it/s][A
 46%|████▌     | 102/221 [00:36<00:36,  3.29it/s][A
 47%|████▋     | 103/221 [00:37<00:32,  3.62it/s][A
 47%|████▋     | 104/221 [00:37<00:33,  3.45it/s][A
 48%|████▊     | 106/221 [00:37<00:22,  5.10it/s][A
 48%|████▊     | 107/221 [00:37<00:20,  5.47it/s][A
 49%|████▉     | 108/221 [00:37<00:21,  5.26it/s][A
 49%|████▉     | 109/221 [00:38<00:24,  4.57it/s][A
 50%|█████     | 111/221 [00:38<00:18,  5.86it/s][A
 51%|█████     | 112/221 [00:38<00:18,  6.00it/s][A
 51%|█████     | 113/221 [00:39<00:26,  4.10it/s][A
 52%|█████▏    | 114/221 [00:39<00:23,  4.52it/s][A
 52%|█████▏    | 115/221 [00:39<00:25,  4.20it/s][A
 52%|█████▏    | 116/221 [00:39<00:21,  4.96it/s][A
 53%|█████▎    | 117/221 [00:39<00:17,  5.79it/s][A
 53%|█████▎    | 118/221 [00:39<00:16,  6.11it/s][A
 54%|█████▍    | 119/221 [00:39<00:14,  6.83it/s][A[h264 @ 0x55b7cc58f4c0] mmco: unref short failure
[h264 @ 0x55b7cc58f4c0] mmco: unref short failure

 54%|█████▍    | 120/221 [00:40<00:19,  5.27it/s][A
 55%|█████▍    | 121/221 [00:40<00:18,  5.49it/s][A
 55%|█████▌    | 122/221 [00:40<00:30,  3.25it/s][A
 56%|█████▌    | 123/221 [00:41<00:26,  3.63it/s][A
 56%|█████▌    | 124/221 [00:41<00:23,  4.09it/s][A
 57%|█████▋    | 126/221 [00:41<00:16,  5.77it/s][A
 58%|█████▊    | 128/221 [00:41<00:14,  6.25it/s][A
 58%|█████▊    | 129/221 [00:41<00:14,  6.38it/s][A[h264 @ 0x556e5cb1a940] mmco: unref short failure
[h264 @ 0x556e5cb1a940] mmco: unref short failure

 59%|█████▉    | 130/221 [00:45<01:23,  1.09it/s][A
 59%|█████▉    | 131/221 [00:45<01:04,  1.40it/s][A
 60%|█████▉    | 132/221 [00:45<00:49,  1.79it/s][A
 60%|██████    | 133/221 [00:45<00:39,  2.24it/s][A
 61%|██████    | 134/221 [00:45<00:30,  2.84it/s][A
 61%|██████    | 135/221 [00:46<00:36,  2.38it/s][A
 62%|██████▏   | 136/221 [00:46<00:38,  2.18it/s][A
 62%|██████▏   | 137/221 [00:47<00:34,  2.44it/s][A
 62%|██████▏   | 138/221 [00:47<00:27,  2.98it/s][A
 63%|██████▎   | 139/221 [00:47<00:28,  2.89it/s][A
 63%|██████▎   | 140/221 [00:47<00:25,  3.15it/s][A
 64%|██████▍   | 141/221 [00:48<00:22,  3.51it/s][A
 64%|██████▍   | 142/221 [00:48<00:22,  3.56it/s][A
 65%|██████▍   | 143/221 [00:48<00:21,  3.71it/s][A
 65%|██████▌   | 144/221 [00:48<00:17,  4.41it/s][A
 66%|██████▌   | 145/221 [00:48<00:15,  5.02it/s][A
 66%|██████▌   | 146/221 [00:49<00:13,  5.61it/s][A
 67%|██████▋   | 147/221 [00:49<00:12,  6.08it/s][A
 67%|██████▋   | 148/221 [00:49<00:10,  6.71it/s][A
 67%|██████▋   | 149/221 [00:49<00:10,  6.63it/s][A
 68%|██████▊   | 151/221 [00:49<00:08,  8.09it/s][A
 69%|██████▉   | 152/221 [00:49<00:09,  6.96it/s][A
 70%|███████   | 155/221 [00:50<00:08,  8.18it/s][A[h264 @ 0x55e51a91fb00] mmco: unref short failure
[h264 @ 0x55e51a91fb00] mmco: unref short failure
[h264 @ 0x556e5d508240] mmco: unref short failure

 71%|███████   | 156/221 [00:51<00:22,  2.86it/s][A
 71%|███████   | 157/221 [00:52<00:26,  2.42it/s][A
 71%|███████▏  | 158/221 [00:52<00:29,  2.17it/s][A
 72%|███████▏  | 160/221 [00:52<00:19,  3.19it/s][A
 73%|███████▎  | 162/221 [00:53<00:15,  3.80it/s][A
 74%|███████▍  | 163/221 [00:53<00:20,  2.87it/s][A
 74%|███████▍  | 164/221 [00:54<00:16,  3.36it/s][A
 75%|███████▍  | 165/221 [00:54<00:14,  3.87it/s][A
 75%|███████▌  | 166/221 [00:54<00:12,  4.24it/s][A[h264 @ 0x556e4be4ae80] mmco: unref short failure

 76%|███████▌  | 167/221 [00:54<00:10,  5.00it/s][A
 76%|███████▌  | 168/221 [00:55<00:15,  3.43it/s][A
 77%|███████▋  | 170/221 [00:55<00:12,  4.06it/s][A
 78%|███████▊  | 172/221 [00:55<00:08,  5.70it/s][A
 79%|███████▊  | 174/221 [00:55<00:07,  6.63it/s][A
 80%|███████▉  | 176/221 [00:55<00:05,  8.27it/s][A
 81%|████████  | 178/221 [00:56<00:08,  5.01it/s][A
 81%|████████  | 179/221 [00:57<00:17,  2.39it/s][A
 81%|████████▏ | 180/221 [00:58<00:15,  2.64it/s][A
 82%|████████▏ | 181/221 [00:58<00:12,  3.10it/s][A
 83%|████████▎ | 183/221 [00:58<00:09,  4.02it/s][A
 84%|████████▎ | 185/221 [00:58<00:07,  4.78it/s][A
 84%|████████▍ | 186/221 [00:58<00:06,  5.19it/s][A
 85%|████████▍ | 187/221 [00:59<00:05,  5.73it/s][A
 85%|████████▌ | 188/221 [00:59<00:05,  6.34it/s][A
 86%|████████▌ | 190/221 [00:59<00:05,  5.70it/s][A
 86%|████████▋ | 191/221 [00:59<00:05,  5.90it/s][A
 87%|████████▋ | 193/221 [00:59<00:03,  8.15it/s][A
 88%|████████▊ | 195/221 [00:59<00:02, 10.01it/s][A
 89%|████████▉ | 197/221 [01:00<00:02,  9.55it/s][A
 90%|█████████ | 199/221 [01:00<00:02,  9.52it/s][A 90%|█████████ | 200/221 [01:00<00:06,  3.31it/s]
[h264 @ 0x556e63368080] mmco: unref short failure
[h264 @ 0x556e63368080] mmco: unref short failure
[h264 @ 0x55b7e5dc53c0] mmco: unref short failure
[h264 @ 0x556e6ef79cc0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.78it/s][A
  1%|          | 2/221 [00:00<00:58,  3.77it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.77it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.77it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.77it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.78it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.78it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.78it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.78it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.79it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.79it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.79it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.78it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.78it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.78it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.78it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.78it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.78it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.78it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.78it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.78it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:33,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.78it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.78it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.78it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.78it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.78it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.78it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.78it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.78it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.78it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.78it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.78it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.78it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.78it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.78it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.78it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.78it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.78it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.78it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.78it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.79it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.79it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.79it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.79it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 159/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.79it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.79it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.79it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.79it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.79it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.79it/s][A
 76%|███████▌  | 168/221 [00:44<00:13,  3.79it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.79it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.79it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.79it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.79it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.79it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.79it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.79it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.79it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.79it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.79it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.79it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.79it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.79it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.79it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.79it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.79it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.79it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.79it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.79it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.79it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.79it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.78it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.78it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▌| 212/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.79it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.79it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.79it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.79it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.79it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.79it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.79it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.79it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.79it/s][A100%|██████████| 221/221 [00:58<00:00,  3.79it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:24,  9.10it/s][A
  1%|          | 2/221 [00:00<00:35,  6.16it/s][A
  1%|▏         | 3/221 [00:00<00:36,  5.94it/s][A
  2%|▏         | 4/221 [00:00<00:32,  6.60it/s][A
  2%|▏         | 5/221 [00:00<00:38,  5.60it/s][A
  3%|▎         | 6/221 [00:00<00:34,  6.16it/s][A
  3%|▎         | 7/221 [00:01<00:43,  4.95it/s][A
  4%|▎         | 8/221 [00:01<00:53,  3.98it/s][A
  4%|▍         | 9/221 [00:01<00:51,  4.10it/s][A
  5%|▍         | 10/221 [00:02<01:15,  2.79it/s][A
  5%|▍         | 11/221 [00:02<01:04,  3.23it/s][A
  5%|▌         | 12/221 [00:02<00:53,  3.92it/s][A
  6%|▌         | 13/221 [00:03<01:29,  2.32it/s][A
  7%|▋         | 15/221 [00:03<01:00,  3.38it/s][A
  7%|▋         | 16/221 [00:04<01:00,  3.40it/s][A
  8%|▊         | 17/221 [00:04<01:05,  3.09it/s][A
  8%|▊         | 18/221 [00:04<01:08,  2.94it/s][A
  9%|▊         | 19/221 [00:05<01:04,  3.15it/s][A
  9%|▉         | 20/221 [00:05<00:51,  3.88it/s][A
 10%|▉         | 21/221 [00:05<00:49,  4.05it/s][A
 10%|▉         | 22/221 [00:05<00:42,  4.73it/s][A
 11%|█         | 24/221 [00:05<00:35,  5.55it/s][A
 11%|█▏        | 25/221 [00:06<00:37,  5.26it/s][A
 12%|█▏        | 26/221 [00:06<00:40,  4.78it/s][A
 12%|█▏        | 27/221 [00:06<00:47,  4.10it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.84it/s][A
 13%|█▎        | 29/221 [00:07<00:46,  4.09it/s][A
 14%|█▎        | 30/221 [00:07<00:42,  4.46it/s][A
 14%|█▍        | 31/221 [00:07<00:39,  4.85it/s][A
 14%|█▍        | 32/221 [00:07<00:41,  4.51it/s][A
 15%|█▍        | 33/221 [00:08<00:41,  4.58it/s][A
 15%|█▌        | 34/221 [00:08<00:44,  4.17it/s][A
 16%|█▌        | 35/221 [00:08<00:51,  3.62it/s][A
 16%|█▋        | 36/221 [00:08<00:47,  3.89it/s][A
 17%|█▋        | 37/221 [00:09<00:47,  3.86it/s][A
 17%|█▋        | 38/221 [00:09<00:42,  4.28it/s][A
 18%|█▊        | 39/221 [00:09<00:40,  4.45it/s][A
 18%|█▊        | 40/221 [00:10<00:53,  3.40it/s][A
 19%|█▊        | 41/221 [00:10<00:44,  4.08it/s][A
 19%|█▉        | 42/221 [00:10<00:39,  4.54it/s][A
 19%|█▉        | 43/221 [00:10<00:43,  4.09it/s][A
 20%|█▉        | 44/221 [00:10<00:36,  4.81it/s][A
 20%|██        | 45/221 [00:10<00:34,  5.15it/s][A
 21%|██        | 46/221 [00:11<00:46,  3.77it/s][A
 21%|██▏       | 47/221 [00:11<00:48,  3.61it/s][A
 22%|██▏       | 48/221 [00:11<00:46,  3.71it/s][A
 22%|██▏       | 49/221 [00:12<00:46,  3.68it/s][A
 23%|██▎       | 50/221 [00:12<00:45,  3.75it/s][A
 23%|██▎       | 51/221 [00:12<00:37,  4.48it/s][A
 24%|██▎       | 52/221 [00:12<00:35,  4.81it/s][A
 24%|██▍       | 53/221 [00:12<00:32,  5.21it/s][A
 24%|██▍       | 54/221 [00:13<00:36,  4.54it/s][A
 25%|██▍       | 55/221 [00:13<00:36,  4.60it/s][A
 25%|██▌       | 56/221 [00:13<00:34,  4.85it/s][A
 26%|██▌       | 57/221 [00:13<00:33,  4.84it/s][A
 26%|██▌       | 58/221 [00:14<00:48,  3.36it/s][A
 27%|██▋       | 59/221 [00:14<00:45,  3.53it/s][A
 28%|██▊       | 61/221 [00:14<00:34,  4.58it/s][A
 28%|██▊       | 62/221 [00:15<00:33,  4.82it/s][A
 29%|██▊       | 63/221 [00:15<00:28,  5.49it/s][A
 29%|██▉       | 64/221 [00:15<00:28,  5.46it/s][A
 29%|██▉       | 65/221 [00:15<00:25,  6.06it/s][A
 30%|██▉       | 66/221 [00:15<00:36,  4.22it/s][A
 30%|███       | 67/221 [00:16<01:07,  2.30it/s][A
 31%|███       | 68/221 [00:16<00:53,  2.88it/s][A
 31%|███       | 69/221 [00:17<00:58,  2.61it/s][A
 32%|███▏      | 70/221 [00:17<00:48,  3.12it/s][A
 32%|███▏      | 71/221 [00:17<00:46,  3.23it/s][A
 33%|███▎      | 72/221 [00:18<00:47,  3.16it/s][A
 33%|███▎      | 73/221 [00:18<00:40,  3.70it/s][A
 33%|███▎      | 74/221 [00:18<00:34,  4.22it/s][A
 34%|███▍      | 75/221 [00:18<00:33,  4.34it/s][A
 34%|███▍      | 76/221 [00:18<00:32,  4.43it/s][A
 35%|███▍      | 77/221 [00:19<00:27,  5.27it/s][A
 35%|███▌      | 78/221 [00:19<00:24,  5.86it/s][A
 36%|███▌      | 79/221 [00:19<00:44,  3.21it/s][A
 36%|███▌      | 80/221 [00:19<00:39,  3.55it/s][A
 37%|███▋      | 81/221 [00:20<00:36,  3.86it/s][A
 37%|███▋      | 82/221 [00:20<00:39,  3.49it/s][A
 38%|███▊      | 83/221 [00:20<00:36,  3.75it/s][A
 38%|███▊      | 84/221 [00:21<00:36,  3.71it/s][A
 38%|███▊      | 85/221 [00:21<00:34,  3.95it/s][A
 39%|███▉      | 86/221 [00:21<00:29,  4.65it/s][A
 39%|███▉      | 87/221 [00:21<00:29,  4.50it/s][A
 40%|███▉      | 88/221 [00:22<00:37,  3.53it/s][A
 40%|████      | 89/221 [00:22<00:43,  3.02it/s][A
 41%|████      | 90/221 [00:22<00:41,  3.17it/s][A
 41%|████      | 91/221 [00:22<00:34,  3.74it/s][A
 42%|████▏     | 92/221 [00:23<00:36,  3.54it/s][A
 42%|████▏     | 93/221 [00:24<01:16,  1.68it/s][A
 43%|████▎     | 94/221 [00:25<01:10,  1.79it/s][A
 43%|████▎     | 95/221 [00:25<00:57,  2.20it/s][A
 43%|████▎     | 96/221 [00:25<00:44,  2.78it/s][A
 44%|████▍     | 97/221 [00:25<00:36,  3.35it/s][A
 44%|████▍     | 98/221 [00:25<00:29,  4.16it/s][A
 45%|████▍     | 99/221 [00:25<00:31,  3.91it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.89it/s][A
 46%|████▌     | 101/221 [00:26<00:44,  2.70it/s][A
 46%|████▌     | 102/221 [00:27<00:50,  2.34it/s][A
 47%|████▋     | 103/221 [00:27<00:47,  2.46it/s][A
 47%|████▋     | 104/221 [00:28<00:41,  2.79it/s][A
 48%|████▊     | 105/221 [00:28<00:36,  3.18it/s][A
 48%|████▊     | 106/221 [00:28<00:33,  3.43it/s][A
 48%|████▊     | 107/221 [00:28<00:31,  3.65it/s][A
 49%|████▉     | 108/221 [00:28<00:27,  4.11it/s][A
 49%|████▉     | 109/221 [00:29<00:25,  4.40it/s][A
 50%|████▉     | 110/221 [00:29<00:26,  4.25it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.78it/s][A
 51%|█████     | 112/221 [00:29<00:29,  3.69it/s][A
 51%|█████     | 113/221 [00:30<00:25,  4.23it/s][A
 52%|█████▏    | 114/221 [00:30<00:20,  5.11it/s][A
 52%|█████▏    | 115/221 [00:30<00:24,  4.38it/s][A
 52%|█████▏    | 116/221 [00:30<00:29,  3.62it/s][A
 53%|█████▎    | 117/221 [00:31<00:25,  4.07it/s][A
 53%|█████▎    | 118/221 [00:31<00:24,  4.13it/s][A
 54%|█████▍    | 119/221 [00:32<00:39,  2.57it/s][A
 54%|█████▍    | 120/221 [00:32<00:34,  2.92it/s][A
 55%|█████▌    | 122/221 [00:32<00:25,  3.92it/s][A
 56%|█████▌    | 123/221 [00:32<00:27,  3.53it/s][A
 56%|█████▌    | 124/221 [00:33<00:23,  4.09it/s][A
 57%|█████▋    | 125/221 [00:33<00:27,  3.54it/s][A
 57%|█████▋    | 126/221 [00:33<00:29,  3.26it/s][A
 57%|█████▋    | 127/221 [00:34<00:29,  3.14it/s][A
 58%|█████▊    | 128/221 [00:34<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:34<00:27,  3.33it/s][A
 59%|█████▉    | 130/221 [00:34<00:23,  3.87it/s][A
 60%|█████▉    | 132/221 [00:34<00:14,  6.01it/s][A
 60%|██████    | 133/221 [00:35<00:17,  5.16it/s][A
 61%|██████    | 134/221 [00:35<00:16,  5.35it/s][A
 61%|██████    | 135/221 [00:35<00:15,  5.51it/s][A
 62%|██████▏   | 136/221 [00:35<00:17,  4.97it/s][A
 62%|██████▏   | 137/221 [00:35<00:15,  5.53it/s][A
 62%|██████▏   | 138/221 [00:36<00:16,  5.12it/s][A
 63%|██████▎   | 139/221 [00:36<00:24,  3.34it/s][A
 63%|██████▎   | 140/221 [00:36<00:22,  3.66it/s][A
 64%|██████▍   | 141/221 [00:37<00:22,  3.55it/s][A
 64%|██████▍   | 142/221 [00:37<00:19,  4.02it/s][A
 65%|██████▍   | 143/221 [00:38<00:29,  2.63it/s][A
 65%|██████▌   | 144/221 [00:38<00:32,  2.39it/s][A
 66%|██████▌   | 145/221 [00:38<00:27,  2.81it/s][A
 66%|██████▌   | 146/221 [00:38<00:21,  3.55it/s][A
 67%|██████▋   | 147/221 [00:39<00:20,  3.61it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.68it/s][A
 67%|██████▋   | 149/221 [00:39<00:16,  4.39it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.88it/s][A
 68%|██████▊   | 151/221 [00:40<00:22,  3.13it/s][A
 69%|██████▉   | 152/221 [00:41<00:28,  2.40it/s][A
 69%|██████▉   | 153/221 [00:41<00:23,  2.84it/s][A
 70%|██████▉   | 154/221 [00:41<00:19,  3.36it/s][A
 70%|███████   | 155/221 [00:41<00:17,  3.73it/s][A
 71%|███████   | 156/221 [00:42<00:20,  3.13it/s][A
 71%|███████   | 157/221 [00:42<00:18,  3.49it/s][A
 71%|███████▏  | 158/221 [00:42<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.77it/s][A
 72%|███████▏  | 160/221 [00:43<00:16,  3.69it/s][A
 73%|███████▎  | 161/221 [00:43<00:20,  2.98it/s][A
 73%|███████▎  | 162/221 [00:43<00:17,  3.30it/s][A
 74%|███████▍  | 163/221 [00:44<00:16,  3.56it/s][A
 74%|███████▍  | 164/221 [00:44<00:17,  3.23it/s][A
 75%|███████▍  | 165/221 [00:44<00:15,  3.69it/s][A
 75%|███████▌  | 166/221 [00:44<00:15,  3.63it/s][A
 76%|███████▌  | 168/221 [00:45<00:14,  3.73it/s][A
 76%|███████▋  | 169/221 [00:45<00:13,  3.95it/s][A
 77%|███████▋  | 170/221 [00:46<00:17,  2.94it/s][A
 77%|███████▋  | 171/221 [00:46<00:13,  3.60it/s][A
 78%|███████▊  | 172/221 [00:46<00:11,  4.11it/s][A
 78%|███████▊  | 173/221 [00:46<00:13,  3.61it/s][A
 79%|███████▊  | 174/221 [00:47<00:18,  2.53it/s][A
 79%|███████▉  | 175/221 [00:47<00:16,  2.75it/s][A
 80%|███████▉  | 176/221 [00:47<00:14,  3.16it/s][A
 80%|████████  | 177/221 [00:48<00:11,  3.75it/s][A
 81%|████████  | 178/221 [00:48<00:10,  4.27it/s][A
 81%|████████  | 179/221 [00:48<00:09,  4.29it/s][A
 81%|████████▏ | 180/221 [00:48<00:08,  4.71it/s][A
 82%|████████▏ | 181/221 [00:49<00:10,  3.89it/s][A
 82%|████████▏ | 182/221 [00:49<00:09,  4.15it/s][A
 83%|████████▎ | 183/221 [00:49<00:08,  4.35it/s][A
 83%|████████▎ | 184/221 [00:49<00:07,  5.09it/s][A
 84%|████████▎ | 185/221 [00:49<00:07,  5.04it/s][A
 84%|████████▍ | 186/221 [00:50<00:09,  3.72it/s][A
 85%|████████▍ | 187/221 [00:50<00:08,  4.19it/s][A
 85%|████████▌ | 188/221 [00:50<00:07,  4.22it/s][A
 86%|████████▌ | 189/221 [00:50<00:07,  4.21it/s][A
 86%|████████▌ | 190/221 [00:51<00:09,  3.38it/s][A
 86%|████████▋ | 191/221 [00:51<00:07,  3.89it/s][A
 87%|████████▋ | 192/221 [00:51<00:09,  3.00it/s][A
 87%|████████▋ | 193/221 [00:52<00:08,  3.40it/s][A
 88%|████████▊ | 194/221 [00:52<00:08,  3.20it/s][A
 88%|████████▊ | 195/221 [00:52<00:07,  3.37it/s][A
 89%|████████▊ | 196/221 [00:53<00:09,  2.70it/s][A
 89%|████████▉ | 197/221 [00:53<00:07,  3.39it/s][A
 90%|████████▉ | 198/221 [00:54<00:10,  2.30it/s][A
 90%|█████████ | 199/221 [00:54<00:08,  2.72it/s][A
 90%|█████████ | 200/221 [00:54<00:07,  2.84it/s][A
 91%|█████████ | 201/221 [00:55<00:06,  2.97it/s][A
 91%|█████████▏| 202/221 [00:55<00:07,  2.67it/s][A
 92%|█████████▏| 204/221 [00:56<00:06,  2.63it/s][A
 93%|█████████▎| 205/221 [00:56<00:05,  3.16it/s][A
 93%|█████████▎| 206/221 [00:56<00:04,  3.15it/s][A
 94%|█████████▎| 207/221 [00:56<00:04,  3.32it/s][A
 94%|█████████▍| 208/221 [00:57<00:03,  4.06it/s][A
 95%|█████████▍| 209/221 [00:57<00:03,  3.83it/s][A
 95%|█████████▌| 210/221 [00:57<00:02,  3.71it/s][A
 95%|█████████▌| 211/221 [00:57<00:02,  3.43it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  3.62it/s][A
 96%|█████████▋| 213/221 [00:58<00:02,  3.48it/s][A
 97%|█████████▋| 214/221 [00:59<00:02,  2.80it/s][A
 97%|█████████▋| 215/221 [00:59<00:01,  3.06it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  3.02it/s][A
 98%|█████████▊| 217/221 [00:59<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:00<00:00,  3.26it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  3.01it/s][A
100%|█████████▉| 220/221 [01:00<00:00,  2.97it/s][A
100%|██████████| 221/221 [01:01<00:00,  2.86it/s][A100%|██████████| 221/221 [01:01<00:00,  3.60it/s]
09/09/2024 22:30:46 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 1299--===========

09/09/2024 22:30:46 - INFO - __main__ -   {'area_r1': 15.4, 'area_recall': '15.4/32.7/45.0', 'area_ravg': 31.0}
09/09/2024 22:30:46 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 1299--===========

09/09/2024 22:30:46 - INFO - __main__ -   {'forward_r1': 33.1, 'forward_recall': '33.1/58.1/68.8', 'forward_ravg': 53.4}
09/09/2024 22:30:46 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 1299--===========

09/09/2024 22:30:46 - INFO - __main__ -   {'area_video_r1': 42.3, 'area_video_recall': '42.3/69.9/80.0', 'area_video_ravg': 64.1}
09/09/2024 22:30:46 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 1199=======

09/09/2024 22:30:46 - INFO - __main__ -   {'area_video_r1': 42.6, 'area_video_recall': '42.6/70.6/80.1', 'area_video_ravg': 64.4}
09/09/2024 22:30:46 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 1299--===========

09/09/2024 22:30:46 - INFO - __main__ -   {'area_video_r1': 45.5, 'area_video_recall': '45.5/62.1/67.6', 'area_video_ravg': 58.4, 'area_video_back_r1': 50.2, 'area_video_back_recall': '50.2/71.7/80.3', 'area_video_back_ravg': 67.4}
09/09/2024 22:30:46 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 22:30:46 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 22:30:46 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 1299--===========

09/09/2024 22:30:46 - INFO - __main__ -   {'video_r1': 40.3, 'video_recall': '40.3/68.1/79.8', 'video_ravg': 62.7}
09/09/2024 22:30:46 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 22:30:46 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 22:30:46 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 1299--===========

09/09/2024 22:30:46 - INFO - __main__ -   {'video_r1': 52.1, 'video_recall': '52.1/74.5/82.2', 'video_ravg': 69.6}
09/09/2024 22:30:46 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 1049=======

09/09/2024 22:30:46 - INFO - __main__ -   {'video_r1': 52.9, 'video_recall': '52.9/74.5/82.8', 'video_ravg': 70.1}
09/09/2024 22:31:06 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.5119450092315674, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.0235460102558136, 'loss_ret%tv%ta--finetune_area/loss_area': 1.2797646522521973, 'loss_ret%tv%ta--finetune_area/total_loss': 2.815255641937256}
 67%|██████▋   | 1300/1945 [7:05:40<21:56:06, 122.43s/it][h264 @ 0x55e518476b00] mmco: unref short failure
[h264 @ 0x55e518476b00] mmco: unref short failure
 67%|██████▋   | 1301/1945 [7:05:45<15:33:07, 86.94s/it]  67%|██████▋   | 1302/1945 [7:05:49<11:07:17, 62.27s/it][h264 @ 0x55b7d15e5f80] mmco: unref short failure
[h264 @ 0x556e649fe1c0] mmco: unref short failure
[h264 @ 0x556e649fe1c0] mmco: unref short failure
 67%|██████▋   | 1303/1945 [7:05:54<8:03:00, 45.14s/it] [h264 @ 0x55b7e32f88c0] mmco: unref short failure
[h264 @ 0x55b7e32f88c0] mmco: unref short failure
 67%|██████▋   | 1304/1945 [7:06:01<5:58:22, 33.55s/it][h264 @ 0x55b7d0372380] mmco: unref short failure
[h264 @ 0x55b7d0372380] mmco: unref short failure
[h264 @ 0x55b7d0372380] mmco: unref short failure
[h264 @ 0x55b7d0372380] mmco: unref short failure
 67%|██████▋   | 1305/1945 [7:06:07<4:29:14, 25.24s/it][h264 @ 0x556e583cbc00] mmco: unref short failure
[h264 @ 0x556e4273d600] mmco: unref short failure
[h264 @ 0x55b7e3fbb0c0] mmco: unref short failure
[h264 @ 0x55b7e3fbb0c0] mmco: unref short failure
 67%|██████▋   | 1306/1945 [7:06:13<3:28:57, 19.62s/it] 67%|██████▋   | 1307/1945 [7:06:21<2:50:36, 16.05s/it][h264 @ 0x55e519bb84c0] mmco: unref short failure
 67%|██████▋   | 1308/1945 [7:06:28<2:21:37, 13.34s/it][h264 @ 0x55b7cb57ba80] mmco: unref short failure
[h264 @ 0x55b7cb57ba80] mmco: unref short failure
[h264 @ 0x55e517f45100] mmco: unref short failure
 67%|██████▋   | 1309/1945 [7:06:36<2:04:41, 11.76s/it] 67%|██████▋   | 1310/1945 [7:06:43<1:49:21, 10.33s/it][h264 @ 0x55e4fdfd3e80] mmco: unref short failure
[h264 @ 0x55b7cb371440] mmco: unref short failure
[h264 @ 0x55b7cb371440] mmco: unref short failure
 67%|██████▋   | 1311/1945 [7:06:51<1:42:54,  9.74s/it][h264 @ 0x556e5279d9c0] mmco: unref short failure
 67%|██████▋   | 1312/1945 [7:06:59<1:34:29,  8.96s/it][h264 @ 0x556e69b39180] mmco: unref short failure
[h264 @ 0x556e69b39180] mmco: unref short failure
 68%|██████▊   | 1313/1945 [7:07:07<1:31:12,  8.66s/it][h264 @ 0x55e501c49480] mmco: unref short failure
 68%|██████▊   | 1314/1945 [7:07:14<1:26:04,  8.19s/it][h264 @ 0x55b7dcda2140] mmco: unref short failure
[h264 @ 0x55b7dcda2140] mmco: unref short failure
[h264 @ 0x55b7d1343dc0] mmco: unref short failure
 68%|██████▊   | 1315/1945 [7:07:20<1:20:46,  7.69s/it] 68%|██████▊   | 1316/1945 [7:07:27<1:19:09,  7.55s/it][h264 @ 0x55e503666780] mmco: unref short failure
[h264 @ 0x55e503666780] mmco: unref short failure
[h264 @ 0x55e503666780] mmco: unref short failure
[h264 @ 0x55e4fe362780] mmco: unref short failure
[h264 @ 0x55e4fe362780] mmco: unref short failure
[h264 @ 0x556e6c329c80] mmco: unref short failure
 68%|██████▊   | 1317/1945 [7:07:37<1:26:39,  8.28s/it][h264 @ 0x556e590d1840] mmco: unref short failure
[h264 @ 0x55b7d4e26940] mmco: unref short failure
[h264 @ 0x55b7d4e26940] mmco: unref short failure
[h264 @ 0x556e6c112780] mmco: unref short failure
[h264 @ 0x55e50d051600] mmco: unref short failure
[h264 @ 0x55e50d051600] mmco: unref short failure
[h264 @ 0x55e500138a00] mmco: unref short failure
 68%|██████▊   | 1318/1945 [7:07:54<1:53:08, 10.83s/it][h264 @ 0x556e6bf6df80] mmco: unref short failure
[h264 @ 0x556e59664380] mmco: unref short failure
 68%|██████▊   | 1319/1945 [7:08:02<1:42:19,  9.81s/it][h264 @ 0x55b7e0ee4ec0] mmco: unref short failure
[h264 @ 0x556e4324f7c0] mmco: unref short failure
[h264 @ 0x556e4324f7c0] mmco: unref short failure
 68%|██████▊   | 1320/1945 [7:08:11<1:42:17,  9.82s/it][h264 @ 0x55b7db875a80] mmco: unref short failure
[h264 @ 0x55b7db875a80] mmco: unref short failure
[h264 @ 0x55e51bf1e240] mmco: unref short failure
[h264 @ 0x55e51bf1e240] mmco: unref short failure
[h264 @ 0x556e5b25e2c0] mmco: unref short failure
[h264 @ 0x556e5b25e2c0] mmco: unref short failure
[h264 @ 0x556e59d4c980] mmco: unref short failure
[h264 @ 0x556e59d4c980] mmco: unref short failure
 68%|██████▊   | 1321/1945 [7:08:27<1:59:28, 11.49s/it][h264 @ 0x55e51ba4c500] mmco: unref short failure
 68%|██████▊   | 1322/1945 [7:08:34<1:46:48, 10.29s/it][h264 @ 0x55e4fd79cc80] mmco: unref short failure
[h264 @ 0x556e719e7380] mmco: unref short failure
[h264 @ 0x55e50ed40380] mmco: unref short failure
 68%|██████▊   | 1323/1945 [7:08:43<1:42:16,  9.87s/it][h264 @ 0x55b7cc695f40] mmco: unref short failure
[h264 @ 0x55b7cc695f40] mmco: unref short failure
[h264 @ 0x55e51b5b4a80] mmco: unref short failure
[h264 @ 0x55e51b5b4a80] mmco: unref short failure
[h264 @ 0x556e5062b900] mmco: unref short failure
[h264 @ 0x556e5927b7c0] mmco: unref short failure
[h264 @ 0x55e517f44f00] mmco: unref short failure
[h264 @ 0x55b7cc925f40] mmco: unref short failure
[h264 @ 0x55b7cc925f40] mmco: unref short failure
[h264 @ 0x556e6c331c40] mmco: unref short failure
[h264 @ 0x556e6c331c40] mmco: unref short failure
[h264 @ 0x556e4a00a980] mmco: unref short failure
[h264 @ 0x556e4a00a980] mmco: unref short failure
[h264 @ 0x556e531887c0] mmco: unref short failure
[h264 @ 0x556e4a21ecc0] mmco: unref short failure
[h264 @ 0x556e4a21ecc0] mmco: unref short failure
[h264 @ 0x556e4e9f6ec0] mmco: unref short failure
[h264 @ 0x55b7d1a46580] mmco: unref short failure
[h264 @ 0x55e4fd38d480] mmco: unref short failure
 68%|██████▊   | 1324/1945 [7:09:26<3:23:30, 19.66s/it][h264 @ 0x55b7e5d77540] mmco: unref short failure
[h264 @ 0x55b7e5d77540] mmco: unref short failure
[h264 @ 0x55e4fdf57980] mmco: unref short failure
[h264 @ 0x556e5cb1a240] mmco: unref short failure
[h264 @ 0x556e5cb1a240] mmco: unref short failure
 68%|██████▊   | 1325/1945 [7:09:38<2:59:59, 17.42s/it][h264 @ 0x556e51f895c0] mmco: unref short failure
[h264 @ 0x556e50ff6340] mmco: unref short failure
[h264 @ 0x55e5170b81c0] mmco: unref short failure
[h264 @ 0x556e50f778c0] mmco: unref short failure
 68%|██████▊   | 1326/1945 [7:09:59<3:11:51, 18.60s/it][h264 @ 0x556e58133640] mmco: unref short failure
[h264 @ 0x556e60b89cc0] mmco: unref short failure
[h264 @ 0x556e60b89cc0] mmco: unref short failure
[h264 @ 0x55e50c2156c0] mmco: unref short failure
[h264 @ 0x55e50c2156c0] mmco: unref short failure
 68%|██████▊   | 1327/1945 [7:10:06<2:35:53, 15.14s/it][h264 @ 0x556e42a02cc0] mmco: unref short failure
[h264 @ 0x556e42a02cc0] mmco: unref short failure
[h264 @ 0x556e55785b80] mmco: unref short failure
 68%|██████▊   | 1328/1945 [7:10:15<2:16:02, 13.23s/it][h264 @ 0x55b7d5da2d80] mmco: unref short failure
[h264 @ 0x556e44306280] mmco: unref short failure
[h264 @ 0x556e44306280] mmco: unref short failure
[h264 @ 0x556e44306280] mmco: unref short failure
 68%|██████▊   | 1329/1945 [7:10:28<2:15:44, 13.22s/it][h264 @ 0x55e4ff970f40] mmco: unref short failure
 68%|██████▊   | 1330/1945 [7:10:36<1:59:03, 11.62s/it] 68%|██████▊   | 1331/1945 [7:10:43<1:45:08, 10.27s/it][h264 @ 0x55e512516b80] mmco: unref short failure
[h264 @ 0x556e4275a5c0] mmco: unref short failure
[h264 @ 0x55b7ea735b40] mmco: unref short failure
[h264 @ 0x55b7ea735b40] mmco: unref short failure
[h264 @ 0x55b7d096ddc0] mmco: unref short failure
[h264 @ 0x55b7d096ddc0] mmco: unref short failure
[h264 @ 0x55b7d096ddc0] mmco: unref short failure
[h264 @ 0x55b7d096ddc0] mmco: unref short failure
[h264 @ 0x55e502fb3240] mmco: unref short failure
[h264 @ 0x55e502fb3240] mmco: unref short failure
[h264 @ 0x55b7cde1e100] mmco: unref short failure
[h264 @ 0x556e69e73600] mmco: unref short failure
[h264 @ 0x556e69e73600] mmco: unref short failure
[h264 @ 0x556e42927900] mmco: unref short failure
[h264 @ 0x556e42927900] mmco: unref short failure
 68%|██████▊   | 1332/1945 [7:11:26<3:25:33, 20.12s/it][h264 @ 0x55b7cb57bcc0] mmco: unref short failure
[h264 @ 0x55b7e3eabf80] mmco: unref short failure
[h264 @ 0x55b7e3eabf80] mmco: unref short failure
[h264 @ 0x55b7e3eabf80] mmco: unref short failure
[h264 @ 0x55b7e3eabf80] mmco: unref short failure
 69%|██████▊   | 1333/1945 [7:11:34<2:46:54, 16.36s/it][h264 @ 0x55b7d6a65680] mmco: unref short failure
[h264 @ 0x55b7e7420700] mmco: unref short failure
[h264 @ 0x55b7e7420700] mmco: unref short failure
[h264 @ 0x556e55785b80] mmco: unref short failure
[h264 @ 0x556e55785b80] mmco: unref short failure
[h264 @ 0x556e51ba6340] mmco: unref short failure
[h264 @ 0x55e5105e8040] mmco: unref short failure
[h264 @ 0x55e5105e8040] mmco: unref short failure
[h264 @ 0x55b7e10c7d00] mmco: unref short failure
[h264 @ 0x55b7e10c7d00] mmco: unref short failure
[h264 @ 0x556e42a02ec0] mmco: unref short failure
[h264 @ 0x55b7cf7c8d80] mmco: unref short failure
[h264 @ 0x55b7cf7c8d80] mmco: unref short failure
 69%|██████▊   | 1334/1945 [7:12:04<3:29:05, 20.53s/it][h264 @ 0x556e558dd640] mmco: unref short failure
[h264 @ 0x55b7d6a1cb00] mmco: unref short failure
[h264 @ 0x55e500aef340] mmco: unref short failure
[h264 @ 0x55e51a48e8c0] mmco: unref short failure
[h264 @ 0x55e51a48e8c0] mmco: unref short failure
 69%|██████▊   | 1335/1945 [7:12:12<2:48:36, 16.58s/it][h264 @ 0x55b7cf6f5480] mmco: unref short failure
[h264 @ 0x55b7cf6f5480] mmco: unref short failure
 69%|██████▊   | 1336/1945 [7:12:19<2:18:50, 13.68s/it] 69%|██████▊   | 1337/1945 [7:12:26<2:01:13, 11.96s/it] 69%|██████▉   | 1338/1945 [7:12:36<1:52:21, 11.11s/it] 69%|██████▉   | 1339/1945 [7:12:43<1:40:35,  9.96s/it][h264 @ 0x55e500aef540] mmco: unref short failure
[h264 @ 0x55b7cb6e29c0] mmco: unref short failure
[h264 @ 0x55b7cb6e29c0] mmco: unref short failure
[h264 @ 0x55e512424700] mmco: unref short failure
[h264 @ 0x55e518152400] mmco: unref short failure
[h264 @ 0x55e518152400] mmco: unref short failure
[h264 @ 0x556e4f093700] mmco: unref short failure
[h264 @ 0x556e4f093700] mmco: unref short failure
[h264 @ 0x556e67709a80] mmco: unref short failure
[h264 @ 0x556e67709a80] mmco: unref short failure
[h264 @ 0x556e67709a80] mmco: unref short failure
[h264 @ 0x556e67709a80] mmco: unref short failure
[h264 @ 0x556e590c5b80] mmco: unref short failure
[h264 @ 0x556e590c5b80] mmco: unref short failure
[h264 @ 0x55b7ea691040] mmco: unref short failure
[h264 @ 0x55b7ea691040] mmco: unref short failure
[h264 @ 0x55e50cf5d400] mmco: unref short failure
[h264 @ 0x55e50cf5d400] mmco: unref short failure
 69%|██████▉   | 1340/1945 [7:13:23<3:12:37, 19.10s/it] 69%|██████▉   | 1341/1945 [7:13:45<3:20:04, 19.88s/it][h264 @ 0x55b7ce8c24c0] mmco: unref short failure
[h264 @ 0x556e5b514500] mmco: unref short failure
[h264 @ 0x556e5b514500] mmco: unref short failure
[h264 @ 0x556e5cd5d380] mmco: unref short failure
[h264 @ 0x55b7d5468240] mmco: unref short failure
[h264 @ 0x556e5a188780] mmco: unref short failure
[h264 @ 0x556e5a188780] mmco: unref short failure
[h264 @ 0x556e4b6be9c0] mmco: unref short failure
[h264 @ 0x556e4b6be9c0] mmco: unref short failure
[h264 @ 0x556e72f9da40] mmco: unref short failure
 69%|██████▉   | 1342/1945 [7:14:19<4:01:54, 24.07s/it][h264 @ 0x556e42f51ac0] mmco: unref short failure
[h264 @ 0x55b7d1aa2140] mmco: unref short failure
[h264 @ 0x55b7d1aa2140] mmco: unref short failure
[h264 @ 0x556e5b514300] mmco: unref short failure
[h264 @ 0x556e5b514300] mmco: unref short failure
[h264 @ 0x55e517b3e580] mmco: unref short failure
[h264 @ 0x55e517b3e580] mmco: unref short failure
 69%|██████▉   | 1343/1945 [7:14:25<3:08:23, 18.78s/it][h264 @ 0x55e51a904980] mmco: unref short failure
[h264 @ 0x55e51a904980] mmco: unref short failure
[h264 @ 0x556e421e2f80] mmco: unref short failure
[h264 @ 0x556e421e2f80] mmco: unref short failure
 69%|██████▉   | 1344/1945 [7:14:32<2:33:05, 15.28s/it][h264 @ 0x556e70a27900] mmco: unref short failure
[h264 @ 0x556e70a27900] mmco: unref short failure
[h264 @ 0x556e70a27900] mmco: unref short failure
[h264 @ 0x556e70a27900] mmco: unref short failure
 69%|██████▉   | 1345/1945 [7:14:40<2:08:22, 12.84s/it][h264 @ 0x556e5fe73d00] mmco: unref short failure
[h264 @ 0x556e5fe73d00] mmco: unref short failure
 69%|██████▉   | 1346/1945 [7:14:47<1:52:23, 11.26s/it][h264 @ 0x55b7e46a6580] mmco: unref short failure
[h264 @ 0x55b7e46a6580] mmco: unref short failure
 69%|██████▉   | 1347/1945 [7:14:55<1:41:33, 10.19s/it][h264 @ 0x556e53ea8880] mmco: unref short failure
[h264 @ 0x556e53ea8880] mmco: unref short failure
[h264 @ 0x556e583f0580] mmco: unref short failure
[h264 @ 0x556e583f0580] mmco: unref short failure
[h264 @ 0x556e53396980] mmco: unref short failure
[h264 @ 0x556e53396980] mmco: unref short failure
[h264 @ 0x556e567db580] mmco: unref short failure
[h264 @ 0x55b7e719a180] mmco: unref short failure
[h264 @ 0x55b7e719a180] mmco: unref short failure
[h264 @ 0x55b7ed1550c0] mmco: unref short failure
[h264 @ 0x55b7ed1550c0] mmco: unref short failure
[h264 @ 0x55b7ed1550c0] mmco: unref short failure
[h264 @ 0x55b7ed1550c0] mmco: unref short failure
[h264 @ 0x55e51c84e840] mmco: unref short failure
[h264 @ 0x556e4c8a1880] mmco: unref short failure
[h264 @ 0x556e4c8a1880] mmco: unref short failure
[h264 @ 0x556e59a76300] mmco: unref short failure
[h264 @ 0x556e59a76300] mmco: unref short failure
[h264 @ 0x556e59a76300] mmco: unref short failure
[h264 @ 0x556e59a76300] mmco: unref short failure
[h264 @ 0x55e4fde564c0] mmco: unref short failure
 69%|██████▉   | 1348/1945 [7:15:23<2:35:27, 15.62s/it][h264 @ 0x55e51617f980] mmco: unref short failure
[h264 @ 0x55e51617f980] mmco: unref short failure
[h264 @ 0x55e51617f980] mmco: unref short failure
[h264 @ 0x55e51617f980] mmco: unref short failure
[h264 @ 0x55e51617f980] mmco: unref short failure
[h264 @ 0x556e548a9800] mmco: unref short failure
[h264 @ 0x556e42ad8f80] mmco: unref short failure
[h264 @ 0x556e42ad8f80] mmco: unref short failure
[h264 @ 0x556e5ca18400] mmco: unref short failure
[h264 @ 0x556e5e176e40] mmco: unref short failure
[h264 @ 0x556e5e176e40] mmco: unref short failure
[h264 @ 0x55b7e389f240] mmco: unref short failure
 69%|██████▉   | 1349/1945 [7:15:49<3:06:14, 18.75s/it]09/09/2024 22:41:18 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 22:41:18 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e4fdc68cc0] mmco: unref short failure
[h264 @ 0x556e70e33540] mmco: unref short failure
[h264 @ 0x556e70e33540] mmco: unref short failure
[h264 @ 0x55e505debd40] mmco: unref short failure
[h264 @ 0x556e5ae40ec0] mmco: unref short failure
[h264 @ 0x556e5ae40ec0] mmco: unref short failure
[h264 @ 0x556e4537a040] mmco: unref short failure
[h264 @ 0x55b7cb1edf00] mmco: unref short failure
[h264 @ 0x55b7cb1edf00] mmco: unref short failure
[h264 @ 0x556e440ea4c0] mmco: unref short failure
[h264 @ 0x556e577d2d40] mmco: unref short failure
[h264 @ 0x556e577d2d40] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e58d00dc0] mmco: unref short failure
[h264 @ 0x556e58d00dc0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e52042f00] mmco: unref short failure
[h264 @ 0x556e52042f00] mmco: unref short failure
[h264 @ 0x55e5170b7d40] mmco: unref short failure
[h264 @ 0x556e4de3cd00] mmco: unref short failure
[h264 @ 0x55e50219c200] mmco: unref short failure
[h264 @ 0x55e50219c200] mmco: unref short failure
[h264 @ 0x55e4fe031e00] mmco: unref short failure
[h264 @ 0x556e73108940] mmco: unref short failure
[h264 @ 0x556e5cd73240] mmco: unref short failure
[h264 @ 0x556e5cd73240] mmco: unref short failure
[h264 @ 0x556e4b404b00] mmco: unref short failure
[h264 @ 0x556e4b404b00] mmco: unref short failure
[h264 @ 0x55b7e977d780] mmco: unref short failure
[h264 @ 0x556e614a7b80] mmco: unref short failure
[h264 @ 0x55e4fd93fa40] mmco: unref short failure
[h264 @ 0x556e515d5280] mmco: unref short failure
[h264 @ 0x556e515d5280] mmco: unref short failure
[h264 @ 0x556e515d5280] mmco: unref short failure
[h264 @ 0x556e515d5280] mmco: unref short failure
[h264 @ 0x556e5024a100] mmco: unref short failure
[h264 @ 0x556e4b6be740] mmco: unref short failure
[h264 @ 0x556e4b6be740] mmco: unref short failure
[h264 @ 0x55b7d227e900] mmco: unref short failure
[h264 @ 0x55b7d227e900] mmco: unref short failure
[h264 @ 0x55b7d227e900] mmco: unref short failure
[h264 @ 0x55b7cb1ed840] mmco: unref short failure
[h264 @ 0x55b7cb1ed840] mmco: unref short failure
[h264 @ 0x55b7eb4811c0] mmco: unref short failure
[h264 @ 0x55b7eb4811c0] mmco: unref short failure
[h264 @ 0x55b7e8792bc0] mmco: unref short failure
[h264 @ 0x55b7e8792bc0] mmco: unref short failure
[h264 @ 0x556e5b6133c0] mmco: unref short failure
[h264 @ 0x556e5b6133c0] mmco: unref short failure
[h264 @ 0x55e5043d9a40] mmco: unref short failure
[h264 @ 0x556e5c86e240] mmco: unref short failure
[h264 @ 0x556e54b08f00] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:40,  5.43it/s][A
  1%|          | 2/221 [00:00<00:44,  4.92it/s][A
  1%|▏         | 3/221 [00:00<00:37,  5.87it/s][A
  2%|▏         | 4/221 [00:00<00:42,  5.15it/s][A
  2%|▏         | 5/221 [00:00<00:40,  5.30it/s][A
  3%|▎         | 6/221 [00:01<00:36,  5.83it/s][A
  3%|▎         | 7/221 [00:02<01:43,  2.07it/s][A
  4%|▎         | 8/221 [00:02<01:20,  2.66it/s][A
  4%|▍         | 9/221 [00:02<01:02,  3.38it/s][A
  5%|▍         | 10/221 [00:03<01:36,  2.20it/s][A
  5%|▌         | 12/221 [00:03<00:59,  3.52it/s][A
  6%|▌         | 13/221 [00:03<01:00,  3.43it/s][A
  6%|▋         | 14/221 [00:04<01:34,  2.20it/s][A
  7%|▋         | 15/221 [00:04<01:15,  2.73it/s][A[h264 @ 0x55b7d9c4cd00] mmco: unref short failure
[h264 @ 0x55b7d9c4cd00] mmco: unref short failure
[h264 @ 0x55b7d9c4cd00] mmco: unref short failure

  7%|▋         | 16/221 [00:09<04:56,  1.45s/it][A
  8%|▊         | 17/221 [00:09<03:44,  1.10s/it][A
  8%|▊         | 18/221 [00:09<02:57,  1.14it/s][A
  9%|▊         | 19/221 [00:09<02:12,  1.53it/s][A
  9%|▉         | 20/221 [00:09<01:39,  2.01it/s][A
 10%|▉         | 21/221 [00:10<01:26,  2.32it/s][A
 10%|▉         | 22/221 [00:10<01:14,  2.67it/s][A
 10%|█         | 23/221 [00:10<00:58,  3.39it/s][A
 11%|█         | 24/221 [00:10<00:49,  3.96it/s][A
 11%|█▏        | 25/221 [00:10<00:45,  4.31it/s][A
 12%|█▏        | 26/221 [00:10<00:41,  4.68it/s][A
 12%|█▏        | 27/221 [00:13<02:40,  1.21it/s][A
 13%|█▎        | 28/221 [00:13<02:02,  1.57it/s][A
 13%|█▎        | 29/221 [00:13<01:34,  2.04it/s][A
 14%|█▎        | 30/221 [00:13<01:21,  2.35it/s][A
 14%|█▍        | 31/221 [00:14<01:17,  2.46it/s][A
 14%|█▍        | 32/221 [00:14<01:02,  3.00it/s][A
 15%|█▌        | 34/221 [00:14<00:52,  3.58it/s][A
 16%|█▌        | 35/221 [00:14<00:44,  4.22it/s][A
 16%|█▋        | 36/221 [00:15<00:44,  4.18it/s][A[h264 @ 0x556e527c9f40] mmco: unref short failure
[h264 @ 0x556e527c9f40] mmco: unref short failure

 17%|█▋        | 37/221 [00:15<00:42,  4.31it/s][A
 17%|█▋        | 38/221 [00:15<00:38,  4.79it/s][A
 18%|█▊        | 39/221 [00:15<00:34,  5.33it/s][A
 18%|█▊        | 40/221 [00:15<00:31,  5.66it/s][A
 19%|█▊        | 41/221 [00:16<00:33,  5.42it/s][A
 19%|█▉        | 42/221 [00:16<00:29,  5.97it/s][A
 20%|█▉        | 44/221 [00:16<00:23,  7.49it/s][A
 20%|██        | 45/221 [00:18<01:52,  1.56it/s][A
 21%|██        | 46/221 [00:18<01:29,  1.96it/s][A[h264 @ 0x55b7d0636a00] mmco: unref short failure
[h264 @ 0x55b7d0636a00] mmco: unref short failure

 21%|██▏       | 47/221 [00:18<01:15,  2.30it/s][A
 22%|██▏       | 48/221 [00:19<01:01,  2.80it/s][A
 22%|██▏       | 49/221 [00:19<00:50,  3.38it/s][A
 23%|██▎       | 50/221 [00:19<00:44,  3.82it/s][A
 23%|██▎       | 51/221 [00:19<01:01,  2.75it/s][A
 24%|██▎       | 52/221 [00:20<00:51,  3.28it/s][A
 24%|██▍       | 53/221 [00:20<00:49,  3.40it/s][A
 24%|██▍       | 54/221 [00:20<00:46,  3.56it/s][A
 25%|██▍       | 55/221 [00:20<00:39,  4.24it/s][A
 25%|██▌       | 56/221 [00:21<00:42,  3.91it/s][A
 26%|██▌       | 57/221 [00:21<00:38,  4.30it/s][A
 26%|██▌       | 58/221 [00:21<00:40,  4.07it/s][A
 27%|██▋       | 59/221 [00:21<00:33,  4.90it/s][A
 27%|██▋       | 60/221 [00:21<00:28,  5.65it/s][A
 28%|██▊       | 61/221 [00:21<00:26,  5.93it/s][A
 28%|██▊       | 62/221 [00:22<00:24,  6.54it/s][A
 29%|██▊       | 63/221 [00:22<00:22,  7.08it/s][A
 29%|██▉       | 64/221 [00:22<00:21,  7.18it/s][A
 29%|██▉       | 65/221 [00:22<00:30,  5.19it/s][A[h264 @ 0x55b7d1348a40] mmco: unref short failure

 30%|██▉       | 66/221 [00:22<00:36,  4.24it/s][A
 30%|███       | 67/221 [00:23<00:42,  3.65it/s][A
 31%|███       | 68/221 [00:23<00:55,  2.76it/s][A
 31%|███       | 69/221 [00:23<00:43,  3.49it/s][A
 32%|███▏      | 70/221 [00:24<00:34,  4.32it/s][A
 32%|███▏      | 71/221 [00:24<00:32,  4.65it/s][A
 33%|███▎      | 72/221 [00:24<00:27,  5.50it/s][A
 33%|███▎      | 73/221 [00:24<00:24,  5.95it/s][A
 33%|███▎      | 74/221 [00:24<00:23,  6.24it/s][A
 34%|███▍      | 75/221 [00:28<03:13,  1.33s/it][A
 34%|███▍      | 76/221 [00:28<02:21,  1.03it/s][A
 35%|███▍      | 77/221 [00:29<01:47,  1.34it/s][A
 35%|███▌      | 78/221 [00:29<01:19,  1.80it/s][A
 36%|███▌      | 79/221 [00:29<01:15,  1.88it/s][A
 36%|███▌      | 80/221 [00:29<00:58,  2.43it/s][A
 37%|███▋      | 82/221 [00:30<00:51,  2.71it/s][A
 38%|███▊      | 83/221 [00:30<00:48,  2.85it/s][A
 38%|███▊      | 84/221 [00:30<00:43,  3.13it/s][A
 39%|███▉      | 86/221 [00:31<00:30,  4.41it/s][A
 39%|███▉      | 87/221 [00:31<00:34,  3.86it/s][A
 40%|███▉      | 88/221 [00:31<00:29,  4.47it/s][A
 40%|████      | 89/221 [00:31<00:26,  5.07it/s][A
 41%|████      | 90/221 [00:35<02:17,  1.05s/it][A
 41%|████      | 91/221 [00:35<01:42,  1.27it/s][A
 42%|████▏     | 92/221 [00:35<01:18,  1.65it/s][A
 42%|████▏     | 93/221 [00:35<00:59,  2.16it/s][A
 43%|████▎     | 94/221 [00:35<00:47,  2.68it/s][A
 43%|████▎     | 95/221 [00:35<00:37,  3.40it/s][A
 43%|████▎     | 96/221 [00:35<00:30,  4.13it/s][A
 44%|████▍     | 97/221 [00:36<00:29,  4.18it/s][A
 45%|████▍     | 99/221 [00:36<00:24,  4.95it/s][A[h264 @ 0x55b7e977de00] mmco: unref short failure

 45%|████▌     | 100/221 [00:37<00:51,  2.34it/s][A
 46%|████▌     | 101/221 [00:37<00:46,  2.60it/s][A
 46%|████▌     | 102/221 [00:37<00:37,  3.20it/s][A
 47%|████▋     | 103/221 [00:38<00:33,  3.47it/s][A
 47%|████▋     | 104/221 [00:38<00:31,  3.68it/s][A
 48%|████▊     | 105/221 [00:38<00:27,  4.25it/s][A
 48%|████▊     | 107/221 [00:38<00:18,  6.09it/s][A
 49%|████▉     | 108/221 [00:38<00:19,  5.80it/s][A[h264 @ 0x55e4ff09d5c0] mmco: unref short failure

 49%|████▉     | 109/221 [00:39<00:22,  4.95it/s][A
 50%|████▉     | 110/221 [00:39<00:21,  5.28it/s][A
 50%|█████     | 111/221 [00:39<00:21,  5.18it/s][A
 51%|█████     | 113/221 [00:39<00:19,  5.64it/s][A
 52%|█████▏    | 114/221 [00:39<00:16,  6.30it/s][A
 52%|█████▏    | 115/221 [00:40<00:19,  5.39it/s][A
 52%|█████▏    | 116/221 [00:40<00:17,  5.94it/s][A
 53%|█████▎    | 117/221 [00:40<00:16,  6.32it/s][A
 53%|█████▎    | 118/221 [00:40<00:17,  5.99it/s][A
 54%|█████▍    | 119/221 [00:40<00:15,  6.62it/s][A
 54%|█████▍    | 120/221 [00:41<00:25,  4.03it/s][A
 55%|█████▍    | 121/221 [00:41<00:21,  4.55it/s][A
 55%|█████▌    | 122/221 [00:41<00:33,  2.93it/s][A
 56%|█████▌    | 124/221 [00:42<00:23,  4.16it/s][A
 57%|█████▋    | 125/221 [00:42<00:21,  4.37it/s][A
 57%|█████▋    | 126/221 [00:42<00:19,  4.85it/s][A
 57%|█████▋    | 127/221 [00:42<00:19,  4.87it/s][A
 58%|█████▊    | 128/221 [00:43<00:21,  4.24it/s][A
 58%|█████▊    | 129/221 [00:43<00:26,  3.52it/s][A
 59%|█████▉    | 130/221 [00:47<01:58,  1.30s/it][A
 60%|█████▉    | 132/221 [00:47<01:08,  1.29it/s][A
 60%|██████    | 133/221 [00:47<00:55,  1.59it/s][A
 61%|██████    | 134/221 [00:47<00:43,  2.02it/s][A
 61%|██████    | 135/221 [00:48<00:46,  1.86it/s][A
 62%|██████▏   | 136/221 [00:48<00:41,  2.03it/s][A
 62%|██████▏   | 137/221 [00:49<00:33,  2.53it/s][A
 62%|██████▏   | 138/221 [00:49<00:25,  3.22it/s][A
 63%|██████▎   | 139/221 [00:49<00:26,  3.09it/s][A
 63%|██████▎   | 140/221 [00:49<00:22,  3.52it/s][A
 64%|██████▍   | 141/221 [00:49<00:18,  4.28it/s][A
 65%|██████▍   | 143/221 [00:49<00:12,  6.19it/s][A
 65%|██████▌   | 144/221 [00:50<00:11,  6.78it/s][A
 66%|██████▌   | 145/221 [00:50<00:12,  5.92it/s][A
 67%|██████▋   | 147/221 [00:50<00:09,  7.67it/s][A
 67%|██████▋   | 149/221 [00:50<00:09,  7.69it/s][A[h264 @ 0x556e61a776c0] mmco: unref short failure
[h264 @ 0x556e61a776c0] mmco: unref short failure

 68%|██████▊   | 150/221 [00:50<00:09,  7.20it/s][A
 68%|██████▊   | 151/221 [00:50<00:09,  7.39it/s][A
 69%|██████▉   | 152/221 [00:51<00:12,  5.62it/s][A
 69%|██████▉   | 153/221 [00:51<00:11,  5.77it/s][A
 70%|██████▉   | 154/221 [00:51<00:12,  5.42it/s][A
 71%|███████   | 156/221 [00:53<00:26,  2.49it/s][A
 71%|███████   | 157/221 [00:53<00:28,  2.26it/s][A[h264 @ 0x55b7e5a8c640] mmco: unref short failure

 71%|███████▏  | 158/221 [00:54<00:27,  2.25it/s][A
 72%|███████▏  | 159/221 [00:54<00:23,  2.65it/s][A
 72%|███████▏  | 160/221 [00:54<00:20,  3.03it/s][A
 73%|███████▎  | 161/221 [00:54<00:17,  3.44it/s][A
 73%|███████▎  | 162/221 [00:54<00:15,  3.83it/s][A[h264 @ 0x556e42055b40] mmco: unref short failure
[h264 @ 0x556e42055b40] mmco: unref short failure

 74%|███████▍  | 163/221 [00:55<00:22,  2.55it/s][A
 74%|███████▍  | 164/221 [00:55<00:18,  3.10it/s][A
 75%|███████▍  | 165/221 [00:55<00:14,  3.87it/s][A
 75%|███████▌  | 166/221 [00:55<00:12,  4.46it/s][A
 76%|███████▌  | 168/221 [00:56<00:12,  4.13it/s][A
 77%|███████▋  | 170/221 [00:56<00:11,  4.64it/s][A
 78%|███████▊  | 172/221 [00:56<00:07,  6.16it/s][A
 78%|███████▊  | 173/221 [00:57<00:07,  6.32it/s][A
 79%|███████▉  | 175/221 [00:57<00:05,  8.16it/s][A
 80%|████████  | 177/221 [00:57<00:05,  8.55it/s][A[h264 @ 0x55b7da56e000] mmco: unref short failure
[h264 @ 0x55b7da56e000] mmco: unref short failure

 81%|████████  | 179/221 [00:59<00:18,  2.30it/s][A
 81%|████████▏ | 180/221 [00:59<00:16,  2.46it/s][A
 82%|████████▏ | 181/221 [00:59<00:13,  2.86it/s][A
 83%|████████▎ | 183/221 [01:00<00:10,  3.52it/s][A
 84%|████████▎ | 185/221 [01:00<00:08,  4.49it/s][A
 84%|████████▍ | 186/221 [01:00<00:07,  4.62it/s][A
 85%|████████▍ | 187/221 [01:00<00:06,  5.03it/s][A
 86%|████████▌ | 189/221 [01:01<00:04,  6.94it/s][A
 86%|████████▌ | 190/221 [01:01<00:05,  5.89it/s][A
 86%|████████▋ | 191/221 [01:01<00:04,  6.05it/s][A
 87%|████████▋ | 193/221 [01:01<00:03,  7.52it/s][A
 88%|████████▊ | 194/221 [01:01<00:03,  7.95it/s][A
 89%|████████▊ | 196/221 [01:01<00:02,  9.98it/s][A
 90%|████████▉ | 198/221 [01:02<00:02,  8.92it/s][A 90%|█████████ | 200/221 [01:02<00:06,  3.22it/s]
[h264 @ 0x55e4fd5a6600] mmco: unref short failure
[h264 @ 0x55e4fd5a6600] mmco: unref short failure
[h264 @ 0x55e4fd5a6600] mmco: unref short failure
[h264 @ 0x55e4fd5a6600] mmco: unref short failure
[h264 @ 0x55e4fd5a6600] mmco: unref short failure
[h264 @ 0x55e4fd5a6600] mmco: unref short failure
[h264 @ 0x55e503de75c0] mmco: unref short failure
[h264 @ 0x55e503de75c0] mmco: unref short failure
[h264 @ 0x556e6fc24f40] mmco: unref short failure
[h264 @ 0x556e6fc24f40] mmco: unref short failure
[h264 @ 0x556e6fc24f40] mmco: unref short failure
[h264 @ 0x556e6fc24f40] mmco: unref short failure
[h264 @ 0x556e4f43b7c0] mmco: unref short failure
[h264 @ 0x556e5b83f740] mmco: unref short failure
[h264 @ 0x556e5b83f740] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.78it/s][A
  1%|          | 2/221 [00:00<00:57,  3.78it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.78it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.78it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.78it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.78it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.79it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.79it/s][A
  4%|▍         | 9/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.79it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.79it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.79it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.79it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.79it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.78it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.78it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.78it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.78it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.78it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.78it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 28/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.78it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.78it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.78it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.78it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.78it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.78it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.78it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.78it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.78it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.78it/s][A
 37%|███▋      | 81/221 [00:21<00:37,  3.78it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.78it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.78it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.78it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.78it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:33,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.79it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.79it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.79it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.79it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.79it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.79it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.79it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.79it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.79it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.79it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.79it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.79it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.79it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.79it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.79it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.79it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 159/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.79it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.79it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.79it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.79it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.79it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.79it/s][A
 76%|███████▌  | 168/221 [00:44<00:13,  3.79it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.78it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.79it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.78it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.78it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.78it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 178/221 [00:46<00:11,  3.78it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.78it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.79it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.79it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.79it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.79it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.79it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.79it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.79it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.79it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.79it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.79it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.78it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.79it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.79it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.79it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▌| 212/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.79it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.79it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.79it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.79it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.78it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.78it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.79it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.79it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.79it/s][A100%|██████████| 221/221 [00:58<00:00,  3.79it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  1%|          | 2/221 [00:00<00:32,  6.64it/s][A
  1%|▏         | 3/221 [00:00<00:34,  6.35it/s][A
  2%|▏         | 4/221 [00:00<00:31,  6.86it/s][A
  2%|▏         | 5/221 [00:00<00:35,  6.03it/s][A
  3%|▎         | 6/221 [00:00<00:36,  5.92it/s][A
  3%|▎         | 7/221 [00:01<00:44,  4.85it/s][A
  4%|▎         | 8/221 [00:01<00:52,  4.09it/s][A
  4%|▍         | 9/221 [00:01<00:50,  4.16it/s][A
  5%|▍         | 10/221 [00:02<01:13,  2.88it/s][A
  5%|▍         | 11/221 [00:02<01:02,  3.34it/s][A
  5%|▌         | 12/221 [00:02<00:51,  4.07it/s][A
  6%|▌         | 13/221 [00:03<01:25,  2.42it/s][A
  7%|▋         | 15/221 [00:03<00:59,  3.47it/s][A
  7%|▋         | 16/221 [00:04<00:58,  3.50it/s][A
  8%|▊         | 17/221 [00:04<01:03,  3.22it/s][A
  8%|▊         | 18/221 [00:04<01:08,  2.96it/s][A
  9%|▊         | 19/221 [00:05<01:02,  3.22it/s][A
  9%|▉         | 20/221 [00:05<00:51,  3.92it/s][A
 10%|▉         | 21/221 [00:05<00:47,  4.19it/s][A
 10%|▉         | 22/221 [00:05<00:41,  4.79it/s][A
 11%|█         | 24/221 [00:05<00:34,  5.67it/s][A
 11%|█▏        | 25/221 [00:06<00:37,  5.27it/s][A
 12%|█▏        | 26/221 [00:06<00:39,  4.89it/s][A
 12%|█▏        | 27/221 [00:06<00:52,  3.70it/s][A
 13%|█▎        | 28/221 [00:07<00:51,  3.72it/s][A
 13%|█▎        | 29/221 [00:07<00:47,  4.00it/s][A
 14%|█▎        | 30/221 [00:07<00:44,  4.30it/s][A
 14%|█▍        | 31/221 [00:07<00:41,  4.61it/s][A
 14%|█▍        | 32/221 [00:07<00:45,  4.14it/s][A
 15%|█▍        | 33/221 [00:08<00:44,  4.25it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.75it/s][A
 16%|█▌        | 35/221 [00:08<00:54,  3.39it/s][A
 16%|█▋        | 36/221 [00:09<00:51,  3.62it/s][A
 17%|█▋        | 37/221 [00:09<00:49,  3.69it/s][A
 17%|█▋        | 38/221 [00:09<00:44,  4.07it/s][A
 18%|█▊        | 39/221 [00:09<00:40,  4.50it/s][A
 18%|█▊        | 40/221 [00:10<00:51,  3.54it/s][A
 19%|█▊        | 41/221 [00:10<00:44,  4.05it/s][A
 19%|█▉        | 42/221 [00:10<00:39,  4.49it/s][A
 19%|█▉        | 43/221 [00:10<00:44,  4.02it/s][A
 20%|█▉        | 44/221 [00:10<00:37,  4.69it/s][A
 20%|██        | 45/221 [00:11<00:34,  5.06it/s][A
 21%|██        | 46/221 [00:11<00:48,  3.60it/s][A
 21%|██▏       | 47/221 [00:11<00:49,  3.50it/s][A
 22%|██▏       | 48/221 [00:12<00:47,  3.65it/s][A
 22%|██▏       | 49/221 [00:12<00:46,  3.71it/s][A
 23%|██▎       | 50/221 [00:12<00:46,  3.65it/s][A
 23%|██▎       | 51/221 [00:12<00:37,  4.48it/s][A
 24%|██▎       | 52/221 [00:12<00:35,  4.81it/s][A
 24%|██▍       | 53/221 [00:12<00:31,  5.38it/s][A
 24%|██▍       | 54/221 [00:13<00:35,  4.69it/s][A
 25%|██▍       | 55/221 [00:13<00:34,  4.76it/s][A
 25%|██▌       | 56/221 [00:13<00:32,  5.07it/s][A
 26%|██▌       | 57/221 [00:13<00:33,  4.83it/s][A
 26%|██▌       | 58/221 [00:14<00:47,  3.43it/s][A
 27%|██▋       | 59/221 [00:14<00:45,  3.60it/s][A
 28%|██▊       | 61/221 [00:14<00:34,  4.64it/s][A
 28%|██▊       | 62/221 [00:15<00:32,  4.87it/s][A
 29%|██▊       | 63/221 [00:15<00:28,  5.48it/s][A
 29%|██▉       | 64/221 [00:15<00:27,  5.65it/s][A
 29%|██▉       | 65/221 [00:15<00:25,  6.15it/s][A
 30%|██▉       | 66/221 [00:15<00:35,  4.31it/s][A
 30%|███       | 67/221 [00:16<01:06,  2.33it/s][A
 31%|███       | 68/221 [00:16<00:52,  2.92it/s][A
 31%|███       | 69/221 [00:17<00:58,  2.61it/s][A
 32%|███▏      | 70/221 [00:17<00:48,  3.13it/s][A
 32%|███▏      | 71/221 [00:17<00:46,  3.23it/s][A
 33%|███▎      | 72/221 [00:18<00:47,  3.11it/s][A
 33%|███▎      | 73/221 [00:18<00:40,  3.65it/s][A
 33%|███▎      | 74/221 [00:18<00:35,  4.15it/s][A
 34%|███▍      | 75/221 [00:18<00:33,  4.33it/s][A
 34%|███▍      | 76/221 [00:18<00:33,  4.39it/s][A
 35%|███▍      | 77/221 [00:19<00:27,  5.20it/s][A
 35%|███▌      | 78/221 [00:19<00:24,  5.75it/s][A
 36%|███▌      | 79/221 [00:19<00:44,  3.19it/s][A
 36%|███▌      | 80/221 [00:20<00:39,  3.54it/s][A
 37%|███▋      | 81/221 [00:20<00:36,  3.84it/s][A
 37%|███▋      | 82/221 [00:20<00:39,  3.52it/s][A
 38%|███▊      | 83/221 [00:20<00:37,  3.71it/s][A
 38%|███▊      | 84/221 [00:21<00:34,  3.95it/s][A
 38%|███▊      | 85/221 [00:21<00:33,  4.08it/s][A
 39%|███▉      | 86/221 [00:21<00:28,  4.74it/s][A
 39%|███▉      | 87/221 [00:21<00:28,  4.64it/s][A
 40%|███▉      | 88/221 [00:22<00:37,  3.57it/s][A
 40%|████      | 89/221 [00:22<00:43,  3.00it/s][A
 41%|████      | 90/221 [00:22<00:40,  3.22it/s][A
 41%|████      | 91/221 [00:22<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:23<00:35,  3.64it/s][A
 42%|████▏     | 93/221 [00:24<01:14,  1.72it/s][A
 43%|████▎     | 94/221 [00:24<01:09,  1.83it/s][A
 43%|████▎     | 95/221 [00:25<00:56,  2.24it/s][A
 43%|████▎     | 96/221 [00:25<00:45,  2.78it/s][A
 44%|████▍     | 97/221 [00:25<00:37,  3.35it/s][A
 44%|████▍     | 98/221 [00:25<00:30,  4.09it/s][A
 45%|████▍     | 99/221 [00:25<00:31,  3.91it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.89it/s][A
 46%|████▌     | 101/221 [00:26<00:43,  2.74it/s][A
 46%|████▌     | 102/221 [00:27<00:50,  2.35it/s][A
 47%|████▋     | 103/221 [00:27<00:47,  2.46it/s][A
 47%|████▋     | 104/221 [00:27<00:42,  2.78it/s][A
 48%|████▊     | 105/221 [00:28<00:36,  3.16it/s][A
 48%|████▊     | 106/221 [00:28<00:32,  3.49it/s][A
 48%|████▊     | 107/221 [00:28<00:31,  3.68it/s][A
 49%|████▉     | 108/221 [00:28<00:27,  4.12it/s][A
 49%|████▉     | 109/221 [00:29<00:26,  4.30it/s][A
 50%|████▉     | 110/221 [00:29<00:26,  4.20it/s][A
 50%|█████     | 111/221 [00:29<00:28,  3.82it/s][A
 51%|█████     | 112/221 [00:29<00:30,  3.62it/s][A
 51%|█████     | 113/221 [00:30<00:26,  4.07it/s][A
 52%|█████▏    | 114/221 [00:30<00:21,  4.94it/s][A
 52%|█████▏    | 115/221 [00:30<00:24,  4.41it/s][A
 52%|█████▏    | 116/221 [00:30<00:28,  3.75it/s][A
 53%|█████▎    | 117/221 [00:30<00:24,  4.29it/s][A
 53%|█████▎    | 118/221 [00:31<00:24,  4.28it/s][A
 54%|█████▍    | 119/221 [00:31<00:36,  2.80it/s][A
 54%|█████▍    | 120/221 [00:32<00:32,  3.12it/s][A
 55%|█████▍    | 121/221 [00:32<00:25,  3.92it/s][A
 55%|█████▌    | 122/221 [00:32<00:23,  4.14it/s][A
 56%|█████▌    | 123/221 [00:32<00:27,  3.61it/s][A
 56%|█████▌    | 124/221 [00:32<00:23,  4.19it/s][A
 57%|█████▋    | 125/221 [00:33<00:27,  3.54it/s][A
 57%|█████▋    | 126/221 [00:33<00:29,  3.22it/s][A
 57%|█████▋    | 127/221 [00:34<00:30,  3.07it/s][A
 58%|█████▊    | 128/221 [00:34<00:27,  3.38it/s][A
 58%|█████▊    | 129/221 [00:34<00:27,  3.36it/s][A
 59%|█████▉    | 130/221 [00:34<00:22,  4.07it/s][A
 60%|█████▉    | 132/221 [00:34<00:14,  6.29it/s][A
 60%|██████    | 133/221 [00:35<00:16,  5.49it/s][A
 61%|██████    | 134/221 [00:35<00:15,  5.55it/s][A
 61%|██████    | 135/221 [00:35<00:15,  5.66it/s][A
 62%|██████▏   | 136/221 [00:35<00:16,  5.15it/s][A
 62%|██████▏   | 137/221 [00:35<00:14,  5.68it/s][A
 62%|██████▏   | 138/221 [00:35<00:15,  5.34it/s][A
 63%|██████▎   | 139/221 [00:36<00:23,  3.56it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.85it/s][A
 64%|██████▍   | 141/221 [00:36<00:20,  3.85it/s][A
 64%|██████▍   | 142/221 [00:37<00:18,  4.33it/s][A
 65%|██████▍   | 143/221 [00:37<00:27,  2.88it/s][A
 65%|██████▌   | 144/221 [00:38<00:31,  2.43it/s][A
 66%|██████▌   | 145/221 [00:38<00:26,  2.85it/s][A
 66%|██████▌   | 146/221 [00:38<00:20,  3.59it/s][A
 67%|██████▋   | 147/221 [00:38<00:20,  3.68it/s][A
 67%|██████▋   | 148/221 [00:39<00:20,  3.60it/s][A
 67%|██████▋   | 149/221 [00:39<00:16,  4.35it/s][A
 68%|██████▊   | 150/221 [00:39<00:17,  3.97it/s][A
 68%|██████▊   | 151/221 [00:40<00:23,  3.04it/s][A
 69%|██████▉   | 152/221 [00:40<00:30,  2.30it/s][A
 69%|██████▉   | 153/221 [00:41<00:25,  2.67it/s][A
 70%|██████▉   | 154/221 [00:41<00:20,  3.21it/s][A
 70%|███████   | 155/221 [00:41<00:18,  3.55it/s][A
 71%|███████   | 156/221 [00:41<00:19,  3.25it/s][A
 71%|███████   | 157/221 [00:41<00:17,  3.64it/s][A
 71%|███████▏  | 158/221 [00:42<00:17,  3.57it/s][A
 72%|███████▏  | 159/221 [00:42<00:15,  3.89it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.76it/s][A
 73%|███████▎  | 161/221 [00:43<00:20,  2.88it/s][A
 73%|███████▎  | 162/221 [00:43<00:18,  3.24it/s][A
 74%|███████▍  | 163/221 [00:43<00:16,  3.54it/s][A
 74%|███████▍  | 164/221 [00:44<00:17,  3.26it/s][A
 75%|███████▍  | 165/221 [00:44<00:15,  3.70it/s][A
 75%|███████▌  | 166/221 [00:44<00:15,  3.63it/s][A
 76%|███████▌  | 168/221 [00:45<00:14,  3.67it/s][A
 76%|███████▋  | 169/221 [00:45<00:13,  3.87it/s][A
 77%|███████▋  | 170/221 [00:45<00:17,  2.94it/s][A
 77%|███████▋  | 171/221 [00:46<00:14,  3.57it/s][A
 78%|███████▊  | 172/221 [00:46<00:11,  4.20it/s][A
 78%|███████▊  | 173/221 [00:46<00:13,  3.58it/s][A
 79%|███████▊  | 174/221 [00:47<00:19,  2.45it/s][A
 79%|███████▉  | 175/221 [00:47<00:16,  2.73it/s][A
 80%|███████▉  | 176/221 [00:47<00:14,  3.08it/s][A
 80%|████████  | 177/221 [00:47<00:11,  3.74it/s][A
 81%|████████  | 178/221 [00:48<00:10,  4.19it/s][A
 81%|████████  | 179/221 [00:48<00:09,  4.31it/s][A
 81%|████████▏ | 180/221 [00:48<00:08,  4.73it/s][A
 82%|████████▏ | 181/221 [00:48<00:10,  3.90it/s][A
 82%|████████▏ | 182/221 [00:48<00:09,  4.23it/s][A
 83%|████████▎ | 183/221 [00:49<00:08,  4.32it/s][A
 83%|████████▎ | 184/221 [00:49<00:07,  5.06it/s][A
 84%|████████▎ | 185/221 [00:49<00:07,  4.93it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.68it/s][A
 85%|████████▍ | 187/221 [00:50<00:08,  4.18it/s][A
 85%|████████▌ | 188/221 [00:50<00:07,  4.18it/s][A
 86%|████████▌ | 189/221 [00:50<00:07,  4.21it/s][A
 86%|████████▌ | 190/221 [00:51<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:51<00:07,  3.92it/s][A
 87%|████████▋ | 192/221 [00:51<00:09,  3.07it/s][A
 87%|████████▋ | 193/221 [00:51<00:08,  3.45it/s][A
 88%|████████▊ | 194/221 [00:52<00:08,  3.36it/s][A
 88%|████████▊ | 195/221 [00:52<00:07,  3.54it/s][A
 89%|████████▊ | 196/221 [00:52<00:08,  2.88it/s][A
 89%|████████▉ | 197/221 [00:53<00:06,  3.62it/s][A
 90%|████████▉ | 198/221 [00:53<00:09,  2.36it/s][A
 90%|█████████ | 199/221 [00:54<00:07,  2.80it/s][A
 90%|█████████ | 200/221 [00:54<00:07,  2.90it/s][A
 91%|█████████ | 201/221 [00:54<00:06,  3.06it/s][A
 91%|█████████▏| 202/221 [00:55<00:06,  2.73it/s][A
 92%|█████████▏| 204/221 [00:55<00:06,  2.63it/s][A
 93%|█████████▎| 205/221 [00:55<00:05,  3.15it/s][A
 93%|█████████▎| 206/221 [00:56<00:04,  3.10it/s][A
 94%|█████████▎| 207/221 [00:56<00:04,  3.17it/s][A
 94%|█████████▍| 208/221 [00:56<00:03,  3.91it/s][A
 95%|█████████▍| 209/221 [00:57<00:03,  3.72it/s][A
 95%|█████████▌| 210/221 [00:57<00:02,  3.81it/s][A
 95%|█████████▌| 211/221 [00:57<00:02,  3.52it/s][A
 96%|█████████▌| 212/221 [00:57<00:02,  3.61it/s][A
 96%|█████████▋| 213/221 [00:58<00:02,  3.47it/s][A
 97%|█████████▋| 214/221 [00:58<00:02,  2.62it/s][A
 97%|█████████▋| 215/221 [00:59<00:02,  2.88it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  2.93it/s][A
 98%|█████████▊| 217/221 [00:59<00:01,  3.32it/s][A
 99%|█████████▊| 218/221 [00:59<00:00,  3.17it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  2.92it/s][A
100%|█████████▉| 220/221 [01:00<00:00,  2.92it/s][A
100%|██████████| 221/221 [01:01<00:00,  2.84it/s][A100%|██████████| 221/221 [01:01<00:00,  3.62it/s]
09/09/2024 22:47:02 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 1349--===========

09/09/2024 22:47:02 - INFO - __main__ -   {'area_r1': 14.9, 'area_recall': '14.9/31.9/44.5', 'area_ravg': 30.4}
09/09/2024 22:47:02 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 1349--===========

09/09/2024 22:47:02 - INFO - __main__ -   {'forward_r1': 33.0, 'forward_recall': '33.0/57.9/67.8', 'forward_ravg': 52.9}
09/09/2024 22:47:02 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 1349--===========

09/09/2024 22:47:02 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/69.6/80.1', 'area_video_ravg': 63.7}
09/09/2024 22:47:02 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 1199=======

09/09/2024 22:47:02 - INFO - __main__ -   {'area_video_r1': 42.6, 'area_video_recall': '42.6/70.6/80.1', 'area_video_ravg': 64.4}
09/09/2024 22:47:02 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 1349--===========

09/09/2024 22:47:02 - INFO - __main__ -   {'area_video_r1': 45.4, 'area_video_recall': '45.4/62.7/67.5', 'area_video_ravg': 58.5, 'area_video_back_r1': 49.4, 'area_video_back_recall': '49.4/71.3/79.2', 'area_video_back_ravg': 66.6}
09/09/2024 22:47:02 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 22:47:02 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 22:47:02 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 1349--===========

09/09/2024 22:47:02 - INFO - __main__ -   {'video_r1': 39.7, 'video_recall': '39.7/68.4/79.3', 'video_ravg': 62.5}
09/09/2024 22:47:02 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 22:47:02 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 22:47:02 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 1349--===========

09/09/2024 22:47:02 - INFO - __main__ -   {'video_r1': 52.1, 'video_recall': '52.1/74.5/82.7', 'video_ravg': 69.8}
09/09/2024 22:47:02 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 1049=======

09/09/2024 22:47:02 - INFO - __main__ -   {'video_r1': 52.9, 'video_recall': '52.9/74.5/82.8', 'video_ravg': 70.1}
09/09/2024 22:47:22 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.5075123310089111, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.02708616852760315, 'loss_ret%tv%ta--finetune_area/loss_area': 1.2478995323181152, 'loss_ret%tv%ta--finetune_area/total_loss': 2.7824978828430176}
 69%|██████▉   | 1350/1945 [7:21:57<20:23:08, 123.34s/it][h264 @ 0x55b7cd4e2300] mmco: unref short failure
 69%|██████▉   | 1351/1945 [7:22:01<14:27:38, 87.64s/it]  70%|██████▉   | 1352/1945 [7:22:05<10:19:37, 62.69s/it][h264 @ 0x55e4ff8de640] mmco: unref short failure
[h264 @ 0x55e4ff8de640] mmco: unref short failure
 70%|██████▉   | 1353/1945 [7:22:11<7:28:17, 45.43s/it]  70%|██████▉   | 1354/1945 [7:22:16<5:29:54, 33.49s/it][h264 @ 0x556e45d2ecc0] mmco: unref short failure
[h264 @ 0x556e45d2ecc0] mmco: unref short failure
 70%|██████▉   | 1355/1945 [7:22:22<4:09:08, 25.34s/it][h264 @ 0x55e4fc593d00] mmco: unref short failure
[h264 @ 0x556e4f093700] mmco: unref short failure
 70%|██████▉   | 1356/1945 [7:22:30<3:17:11, 20.09s/it][h264 @ 0x55e5043d9580] mmco: unref short failure
[h264 @ 0x556e53cb0780] mmco: unref short failure
[h264 @ 0x556e53cb0780] mmco: unref short failure
[h264 @ 0x556e53cb0780] mmco: unref short failure
 70%|██████▉   | 1357/1945 [7:22:37<2:38:50, 16.21s/it][h264 @ 0x556e69b39180] mmco: unref short failure
[h264 @ 0x556e69b39180] mmco: unref short failure
 70%|██████▉   | 1358/1945 [7:22:45<2:13:52, 13.68s/it][h264 @ 0x556e42ac9cc0] mmco: unref short failure
[h264 @ 0x55e4fd5a3980] mmco: unref short failure
[h264 @ 0x55e4fd5a3980] mmco: unref short failure
[h264 @ 0x55b7d1454840] mmco: unref short failure
[h264 @ 0x556e495b83c0] mmco: unref short failure
[h264 @ 0x556e495b83c0] mmco: unref short failure
[h264 @ 0x556e59b80000] mmco: unref short failure
[h264 @ 0x556e59b80000] mmco: unref short failure
 70%|██████▉   | 1359/1945 [7:22:55<2:00:51, 12.37s/it][h264 @ 0x556e4789df40] mmco: unref short failure
[h264 @ 0x556e4789df40] mmco: unref short failure
 70%|██████▉   | 1360/1945 [7:23:02<1:46:40, 10.94s/it][h264 @ 0x556e48641740] mmco: unref short failure
[h264 @ 0x556e48641740] mmco: unref short failure
[h264 @ 0x55b7d7b79380] mmco: unref short failure
[h264 @ 0x55b7d7b79380] mmco: unref short failure
 70%|██████▉   | 1361/1945 [7:23:09<1:35:05,  9.77s/it][h264 @ 0x55b7e80e8e40] mmco: unref short failure
[h264 @ 0x556e52ead400] mmco: unref short failure
[h264 @ 0x556e52ead400] mmco: unref short failure
[h264 @ 0x556e52ead400] mmco: unref short failure
[h264 @ 0x556e52ead400] mmco: unref short failure
[h264 @ 0x556e52ead400] mmco: unref short failure
[h264 @ 0x556e52ead400] mmco: unref short failure
 70%|███████   | 1362/1945 [7:23:17<1:28:48,  9.14s/it] 70%|███████   | 1363/1945 [7:23:24<1:22:51,  8.54s/it][h264 @ 0x556e47dc5f80] mmco: unref short failure
[h264 @ 0x556e47dc5f80] mmco: unref short failure
 70%|███████   | 1364/1945 [7:23:31<1:18:02,  8.06s/it][h264 @ 0x55b7e332a3c0] mmco: unref short failure
 70%|███████   | 1365/1945 [7:23:39<1:17:07,  7.98s/it][h264 @ 0x556e46f11980] mmco: unref short failure
 70%|███████   | 1366/1945 [7:23:45<1:13:25,  7.61s/it][h264 @ 0x556e5b57e640] mmco: unref short failure
[h264 @ 0x556e5b57e640] mmco: unref short failure
[h264 @ 0x556e5b57e640] mmco: unref short failure
[h264 @ 0x556e5b57e640] mmco: unref short failure
[h264 @ 0x55b7cb2ec240] mmco: unref short failure
[h264 @ 0x55b7cb2ec240] mmco: unref short failure
 70%|███████   | 1367/1945 [7:23:52<1:09:39,  7.23s/it][h264 @ 0x556e476989c0] mmco: unref short failure
[h264 @ 0x55e4ff688680] mmco: unref short failure
[h264 @ 0x55e4ff688680] mmco: unref short failure
 70%|███████   | 1368/1945 [7:23:59<1:09:22,  7.21s/it][h264 @ 0x556e67166380] mmco: unref short failure
[h264 @ 0x556e67166380] mmco: unref short failure
[h264 @ 0x556e612b1d00] mmco: unref short failure
[h264 @ 0x556e612b1d00] mmco: unref short failure
 70%|███████   | 1369/1945 [7:24:11<1:23:04,  8.65s/it][h264 @ 0x556e5d8ec680] mmco: unref short failure
[h264 @ 0x556e5d8ec680] mmco: unref short failure
 70%|███████   | 1370/1945 [7:24:24<1:35:15,  9.94s/it] 70%|███████   | 1371/1945 [7:24:33<1:31:06,  9.52s/it][h264 @ 0x55e518152cc0] mmco: unref short failure
[h264 @ 0x55e518152cc0] mmco: unref short failure
[h264 @ 0x55e518152cc0] mmco: unref short failure
[h264 @ 0x55e518152cc0] mmco: unref short failure
[h264 @ 0x55b7e80e87c0] mmco: unref short failure
 71%|███████   | 1372/1945 [7:24:39<1:23:17,  8.72s/it] 71%|███████   | 1373/1945 [7:24:49<1:25:47,  9.00s/it][h264 @ 0x556e6549cdc0] mmco: unref short failure
[h264 @ 0x556e48d21580] mmco: unref short failure
[h264 @ 0x556e5d08bb00] mmco: unref short failure
[h264 @ 0x556e5d08bb00] mmco: unref short failure
[h264 @ 0x556e6ef59540] mmco: unref short failure
[h264 @ 0x556e6ef59540] mmco: unref short failure
[h264 @ 0x55e505912540] mmco: unref short failure
[h264 @ 0x55e4ffb4b680] mmco: unref short failure
[h264 @ 0x55e4ffb4b680] mmco: unref short failure
[h264 @ 0x55e4ffb4b680] mmco: unref short failure
[h264 @ 0x55e4ffb4b680] mmco: unref short failure
[h264 @ 0x55b7cea75900] mmco: unref short failure
 71%|███████   | 1374/1945 [7:25:34<3:09:06, 19.87s/it][h264 @ 0x55e51c92cac0] mmco: unref short failure
[h264 @ 0x55e51c92cac0] mmco: unref short failure
[h264 @ 0x55b7d5218900] mmco: unref short failure
 71%|███████   | 1375/1945 [7:25:48<2:51:29, 18.05s/it][h264 @ 0x556e603ce880] mmco: unref short failure
[h264 @ 0x556e603ce880] mmco: unref short failure
[h264 @ 0x55b7cc9d5ec0] mmco: unref short failure
[h264 @ 0x55b7cc9d5ec0] mmco: unref short failure
[h264 @ 0x55e50c3dd240] mmco: unref short failure
[h264 @ 0x55b7cd1a6680] mmco: unref short failure
[h264 @ 0x55e4ffc285c0] mmco: unref short failure
[h264 @ 0x55e4ffc285c0] mmco: unref short failure
[h264 @ 0x55e4ffc285c0] mmco: unref short failure
[h264 @ 0x55e4ffc285c0] mmco: unref short failure
 71%|███████   | 1376/1945 [7:26:03<2:41:34, 17.04s/it][h264 @ 0x556e7155a180] mmco: unref short failure
[h264 @ 0x55e505f61340] mmco: unref short failure
 71%|███████   | 1377/1945 [7:26:12<2:20:25, 14.83s/it][h264 @ 0x556e567db300] mmco: unref short failure
[h264 @ 0x556e53a33180] mmco: unref short failure
[h264 @ 0x556e52d0b940] mmco: unref short failure
[h264 @ 0x556e5808b580] mmco: unref short failure
 71%|███████   | 1378/1945 [7:26:33<2:35:15, 16.43s/it][h264 @ 0x556e5745ea40] mmco: unref short failure
 71%|███████   | 1379/1945 [7:26:40<2:09:05, 13.69s/it][h264 @ 0x55e518f4c680] mmco: unref short failure
[h264 @ 0x556e54d56640] mmco: unref short failure
[h264 @ 0x556e54d56640] mmco: unref short failure
[h264 @ 0x556e54d56640] mmco: unref short failure
[h264 @ 0x556e54d56640] mmco: unref short failure
[h264 @ 0x556e536ce7c0] mmco: unref short failure
 71%|███████   | 1380/1945 [7:26:47<1:49:44, 11.65s/it][h264 @ 0x55b7e28a2980] mmco: unref short failure
[h264 @ 0x55b7e28a2980] mmco: unref short failure
 71%|███████   | 1381/1945 [7:26:55<1:38:41, 10.50s/it][h264 @ 0x556e4f35fc00] mmco: unref short failure
[h264 @ 0x556e5648be80] mmco: unref short failure
[h264 @ 0x55b7d7b8df40] mmco: unref short failure
[h264 @ 0x55b7cd410440] mmco: unref short failure
[h264 @ 0x55b7cd410440] mmco: unref short failure
[h264 @ 0x55e50289b640] mmco: unref short failure
[h264 @ 0x556e4f45af00] mmco: unref short failure
[h264 @ 0x556e4f45af00] mmco: unref short failure
 71%|███████   | 1382/1945 [7:27:39<3:13:15, 20.60s/it][h264 @ 0x556e58369d40] mmco: unref short failure
[h264 @ 0x556e58369d40] mmco: unref short failure
[h264 @ 0x55b7d7365240] mmco: unref short failure
[h264 @ 0x55b7d7365240] mmco: unref short failure
[h264 @ 0x556e58369d40] mmco: unref short failure
[h264 @ 0x556e58369d40] mmco: unref short failure
 71%|███████   | 1383/1945 [7:28:00<3:15:21, 20.86s/it][h264 @ 0x556e6b035900] mmco: unref short failure
[h264 @ 0x55b7d071cb00] mmco: unref short failure
[h264 @ 0x55b7d071cb00] mmco: unref short failure
 71%|███████   | 1384/1945 [7:28:09<2:41:15, 17.25s/it] 71%|███████   | 1385/1945 [7:28:17<2:14:27, 14.41s/it][h264 @ 0x556e6abadec0] mmco: unref short failure
[h264 @ 0x556e44b6a840] mmco: unref short failure
[h264 @ 0x556e44b6a840] mmco: unref short failure
 71%|███████▏  | 1386/1945 [7:28:37<2:31:18, 16.24s/it] 71%|███████▏  | 1387/1945 [7:28:44<2:04:35, 13.40s/it][h264 @ 0x556e59a934c0] mmco: unref short failure
[h264 @ 0x556e59a934c0] mmco: unref short failure
[h264 @ 0x55b7e7418bc0] mmco: unref short failure
 71%|███████▏  | 1388/1945 [7:28:51<1:46:24, 11.46s/it][h264 @ 0x556e55114e80] mmco: unref short failure
[h264 @ 0x556e536ed000] mmco: unref short failure
[h264 @ 0x556e536ed000] mmco: unref short failure
[h264 @ 0x556e66127c80] mmco: unref short failure
[h264 @ 0x556e66127c80] mmco: unref short failure
[h264 @ 0x556e66127c80] mmco: unref short failure
[h264 @ 0x556e66127c80] mmco: unref short failure
 71%|███████▏  | 1389/1945 [7:28:58<1:32:39, 10.00s/it][h264 @ 0x55e519018b80] mmco: unref short failure
[h264 @ 0x55e519018b80] mmco: unref short failure
[h264 @ 0x556e5b230a80] mmco: unref short failure
[h264 @ 0x556e5b230a80] mmco: unref short failure
[h264 @ 0x556e5b230a80] mmco: unref short failure
[h264 @ 0x556e5b230a80] mmco: unref short failure
[h264 @ 0x556e529f3840] mmco: unref short failure
[h264 @ 0x556e529f3840] mmco: unref short failure
[h264 @ 0x556e59a76740] mmco: unref short failure
[h264 @ 0x55b7cb1eda40] mmco: unref short failure
[h264 @ 0x55b7cb1eda40] mmco: unref short failure
[h264 @ 0x55e503a32c00] mmco: unref short failure
[h264 @ 0x556e55760000] mmco: unref short failure
[h264 @ 0x556e55760000] mmco: unref short failure
[h264 @ 0x556e515e2640] mmco: unref short failure
[h264 @ 0x556e515e2640] mmco: unref short failure
[h264 @ 0x556e58369d40] mmco: unref short failure
 71%|███████▏  | 1390/1945 [7:29:51<3:33:52, 23.12s/it][h264 @ 0x55b7dbff0600] mmco: unref short failure
[h264 @ 0x55b7dbff0600] mmco: unref short failure
[h264 @ 0x55b7d99ab080] mmco: unref short failure
[h264 @ 0x55b7d99ab080] mmco: unref short failure
 72%|███████▏  | 1391/1945 [7:30:09<3:18:25, 21.49s/it] 72%|███████▏  | 1392/1945 [7:30:17<2:39:19, 17.29s/it][h264 @ 0x55b7cc41e680] mmco: unref short failure
[h264 @ 0x556e53aaf080] mmco: unref short failure
[h264 @ 0x556e53aaf080] mmco: unref short failure
 72%|███████▏  | 1393/1945 [7:30:27<2:19:13, 15.13s/it][h264 @ 0x55e4fcfd9700] mmco: unref short failure
[h264 @ 0x55e4fcfd9700] mmco: unref short failure
[h264 @ 0x55e4fcfd9700] mmco: unref short failure
[h264 @ 0x55e4fcfd9700] mmco: unref short failure
[h264 @ 0x55e4fcfd9700] mmco: unref short failure
[h264 @ 0x55e4fcfd9700] mmco: unref short failure
[h264 @ 0x556e64d53680] mmco: unref short failure
[h264 @ 0x556e64d53680] mmco: unref short failure
 72%|███████▏  | 1394/1945 [7:30:37<2:06:44, 13.80s/it][h264 @ 0x55e4fdbc8900] mmco: unref short failure
[h264 @ 0x55e4fdbc8900] mmco: unref short failure
[h264 @ 0x556e63e7f8c0] mmco: unref short failure
[h264 @ 0x556e63e7f8c0] mmco: unref short failure
 72%|███████▏  | 1395/1945 [7:30:45<1:48:56, 11.89s/it][h264 @ 0x556e4f864b40] mmco: unref short failure
[h264 @ 0x556e53499300] mmco: unref short failure
 72%|███████▏  | 1396/1945 [7:31:03<2:06:59, 13.88s/it][h264 @ 0x55e50e3f2e40] mmco: unref short failure
 72%|███████▏  | 1397/1945 [7:31:10<1:46:32, 11.67s/it][h264 @ 0x556e52d0b000] mmco: unref short failure
[h264 @ 0x556e52d0b000] mmco: unref short failure
[h264 @ 0x55b7cf7cb240] mmco: unref short failure
[h264 @ 0x556e487ab180] mmco: unref short failure
[h264 @ 0x55e516637740] mmco: unref short failure
[h264 @ 0x55e516637740] mmco: unref short failure
[h264 @ 0x55e516637740] mmco: unref short failure
 72%|███████▏  | 1398/1945 [7:31:53<3:13:19, 21.21s/it][h264 @ 0x55e4ff690080] mmco: unref short failure
[h264 @ 0x55b7cbf4d180] mmco: unref short failure
[h264 @ 0x556e44d67740] mmco: unref short failure
[h264 @ 0x556e44d67740] mmco: unref short failure
[h264 @ 0x556e593f4d40] mmco: unref short failure
 72%|███████▏  | 1399/1945 [7:32:11<3:03:28, 20.16s/it]09/09/2024 22:57:40 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 22:57:40 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e4b6f5d00] mmco: unref short failure
[h264 @ 0x55e4fd78e000] mmco: unref short failure
[h264 @ 0x55e4fd78e000] mmco: unref short failure
[h264 @ 0x556e536fda80] mmco: unref short failure
[h264 @ 0x556e4484a2c0] mmco: unref short failure
[h264 @ 0x556e6b035b00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b7d31ed140] mmco: unref short failure
[h264 @ 0x55b7d31ed140] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e5071551c0] mmco: unref short failure
[h264 @ 0x55e5071551c0] mmco: unref short failure
[h264 @ 0x55e5071551c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e6c961d80] mmco: unref short failure
[h264 @ 0x556e6c961d80] mmco: unref short failure
[h264 @ 0x556e431aba80] mmco: unref short failure
[h264 @ 0x556e431aba80] mmco: unref short failure
[h264 @ 0x55b7d4c97940] mmco: unref short failure
[h264 @ 0x55e5054196c0] mmco: unref short failure
[h264 @ 0x55e5054196c0] mmco: unref short failure
[h264 @ 0x55b7cbc8a3c0] mmco: unref short failure
[h264 @ 0x55b7cbc8a3c0] mmco: unref short failure
[h264 @ 0x55b7cbc8a3c0] mmco: unref short failure
[h264 @ 0x55b7cbc8a3c0] mmco: unref short failure
[h264 @ 0x55b7d4f31b80] mmco: unref short failure
[h264 @ 0x556e68688e00] mmco: unref short failure
[h264 @ 0x556e68688e00] mmco: unref short failure
[h264 @ 0x55b7e5aea540] mmco: unref short failure
[h264 @ 0x55b7e5aea540] mmco: unref short failure
[h264 @ 0x556e490966c0] mmco: unref short failure
[h264 @ 0x55b7ebb5fbc0] mmco: unref short failure
[h264 @ 0x556e496565c0] mmco: unref short failure
[h264 @ 0x556e496565c0] mmco: unref short failure
[h264 @ 0x556e496565c0] mmco: unref short failure
[h264 @ 0x556e496565c0] mmco: unref short failure
[h264 @ 0x556e4ad56200] mmco: unref short failure
[h264 @ 0x55e52088a140] mmco: unref short failure
[h264 @ 0x55e52088a140] mmco: unref short failure
[h264 @ 0x55e52088a140] mmco: unref short failure
[h264 @ 0x55e52088a140] mmco: unref short failure
[h264 @ 0x55b7cedb9e40] mmco: unref short failure
[h264 @ 0x55b7cedb9e40] mmco: unref short failure
[h264 @ 0x55b7cedb9e40] mmco: unref short failure
[h264 @ 0x55b7cedb9e40] mmco: unref short failure
[h264 @ 0x55b7cb3ef9c0] mmco: unref short failure
[h264 @ 0x55b7cb3ef9c0] mmco: unref short failure
[h264 @ 0x55b7da8ef700] mmco: unref short failure
[h264 @ 0x55b7da8ef700] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:39,  5.55it/s][A
  1%|▏         | 3/221 [00:00<00:29,  7.51it/s][A
  2%|▏         | 5/221 [00:00<00:26,  8.15it/s][A
  3%|▎         | 6/221 [00:00<00:32,  6.63it/s][A
  3%|▎         | 7/221 [00:02<01:50,  1.94it/s][A
  4%|▎         | 8/221 [00:02<01:30,  2.37it/s][A[h264 @ 0x55e50bb8cb80] mmco: unref short failure
[h264 @ 0x55e50bb8cb80] mmco: unref short failure

  4%|▍         | 9/221 [00:02<01:14,  2.85it/s][A
  5%|▍         | 10/221 [00:03<01:53,  1.86it/s][A
  5%|▍         | 11/221 [00:03<01:27,  2.41it/s][A
  5%|▌         | 12/221 [00:03<01:08,  3.06it/s][A
  6%|▌         | 13/221 [00:04<01:48,  1.92it/s][A
  6%|▋         | 14/221 [00:05<01:24,  2.44it/s][A[h264 @ 0x55e504cac980] mmco: unref short failure
[h264 @ 0x55e504cac980] mmco: unref short failure

  7%|▋         | 15/221 [00:09<05:29,  1.60s/it][A
  7%|▋         | 16/221 [00:09<04:00,  1.18s/it][A
  8%|▊         | 17/221 [00:09<03:08,  1.08it/s][A
  8%|▊         | 18/221 [00:10<02:17,  1.48it/s][A
  9%|▊         | 19/221 [00:10<01:41,  1.98it/s][A
 10%|▉         | 21/221 [00:10<01:03,  3.14it/s][A
 10%|█         | 23/221 [00:10<00:45,  4.32it/s][A
 11%|█▏        | 25/221 [00:11<00:52,  3.74it/s][A
 12%|█▏        | 26/221 [00:12<01:25,  2.27it/s][A
 12%|█▏        | 27/221 [00:12<01:15,  2.58it/s][A
 13%|█▎        | 28/221 [00:12<01:07,  2.85it/s][A[h264 @ 0x55e50289b400] mmco: unref short failure

 14%|█▎        | 30/221 [00:13<00:55,  3.44it/s][A
 14%|█▍        | 31/221 [00:13<00:49,  3.81it/s][A
 14%|█▍        | 32/221 [00:13<00:49,  3.78it/s][A
 15%|█▍        | 33/221 [00:13<00:44,  4.21it/s][A
 15%|█▌        | 34/221 [00:13<00:41,  4.47it/s][A
 16%|█▋        | 36/221 [00:14<00:34,  5.31it/s][A
 17%|█▋        | 37/221 [00:14<00:31,  5.85it/s][A
 18%|█▊        | 39/221 [00:14<00:28,  6.37it/s][A
 18%|█▊        | 40/221 [00:14<00:29,  6.17it/s][A
 19%|█▊        | 41/221 [00:14<00:27,  6.59it/s][A
 19%|█▉        | 43/221 [00:16<00:56,  3.13it/s][A
 20%|█▉        | 44/221 [00:16<00:49,  3.61it/s][A
 20%|██        | 45/221 [00:16<00:47,  3.73it/s][A
 21%|██        | 46/221 [00:16<00:42,  4.12it/s][A
 21%|██▏       | 47/221 [00:16<00:48,  3.62it/s][A
 22%|██▏       | 48/221 [00:17<00:46,  3.70it/s][A
 22%|██▏       | 49/221 [00:17<00:58,  2.96it/s][A
 23%|██▎       | 51/221 [00:17<00:39,  4.32it/s][A
 24%|██▍       | 53/221 [00:18<00:31,  5.41it/s][A
 24%|██▍       | 54/221 [00:18<00:36,  4.61it/s][A
 25%|██▍       | 55/221 [00:18<00:34,  4.88it/s][A
 25%|██▌       | 56/221 [00:18<00:36,  4.47it/s][A
 26%|██▌       | 58/221 [00:19<00:26,  6.11it/s][A
 27%|██▋       | 59/221 [00:19<00:26,  6.02it/s][A
 27%|██▋       | 60/221 [00:19<00:24,  6.59it/s][A
 28%|██▊       | 61/221 [00:19<00:22,  7.03it/s][A
 28%|██▊       | 62/221 [00:19<00:22,  7.22it/s][A
 29%|██▊       | 63/221 [00:19<00:28,  5.60it/s][A
 29%|██▉       | 64/221 [00:20<00:37,  4.19it/s][A
 29%|██▉       | 65/221 [00:20<00:32,  4.86it/s][A
 30%|██▉       | 66/221 [00:20<00:46,  3.31it/s][A
 31%|███       | 68/221 [00:21<00:32,  4.64it/s][A
 31%|███       | 69/221 [00:21<00:34,  4.47it/s][A
 32%|███▏      | 70/221 [00:21<00:31,  4.84it/s][A
 32%|███▏      | 71/221 [00:21<00:29,  5.11it/s][A[h264 @ 0x55b7d6254dc0] mmco: unref short failure
[h264 @ 0x55b7d6254dc0] mmco: unref short failure
[h264 @ 0x556e51af1200] mmco: unref short failure
[h264 @ 0x556e62c118c0] mmco: unref short failure

 33%|███▎      | 72/221 [00:24<02:13,  1.12it/s][A
 33%|███▎      | 73/221 [00:24<01:46,  1.39it/s][A
 33%|███▎      | 74/221 [00:24<01:23,  1.76it/s][A[h264 @ 0x556e62c118c0] mmco: unref short failure

 34%|███▍      | 75/221 [00:25<01:09,  2.10it/s][A
 34%|███▍      | 76/221 [00:25<01:04,  2.24it/s][A
 35%|███▍      | 77/221 [00:25<00:53,  2.68it/s][A
 35%|███▌      | 78/221 [00:25<00:43,  3.30it/s][A
 36%|███▌      | 79/221 [00:26<00:53,  2.67it/s][A
 36%|███▌      | 80/221 [00:26<00:49,  2.85it/s][A
 37%|███▋      | 81/221 [00:27<00:45,  3.11it/s][A[h264 @ 0x55e51d9f9d40] mmco: unref short failure
[h264 @ 0x55e51d9f9d40] mmco: unref short failure
[h264 @ 0x55e51d9f9d40] mmco: unref short failure
[h264 @ 0x55e51d9f9d40] mmco: unref short failure

 38%|███▊      | 83/221 [00:27<00:30,  4.53it/s][A
 38%|███▊      | 84/221 [00:27<00:28,  4.80it/s][A
 38%|███▊      | 85/221 [00:27<00:26,  5.14it/s][A
 39%|███▉      | 86/221 [00:27<00:24,  5.52it/s][A
 39%|███▉      | 87/221 [00:31<02:35,  1.16s/it][A
 40%|████      | 89/221 [00:31<01:28,  1.49it/s][A
 41%|████      | 90/221 [00:31<01:14,  1.75it/s][A
 41%|████      | 91/221 [00:31<01:01,  2.12it/s][A[h264 @ 0x556e48fe3200] mmco: unref short failure

 42%|████▏     | 93/221 [00:32<00:39,  3.20it/s][A
 43%|████▎     | 94/221 [00:32<00:36,  3.50it/s][A
 43%|████▎     | 95/221 [00:32<00:33,  3.82it/s][A
 43%|████▎     | 96/221 [00:32<00:30,  4.06it/s][A
 44%|████▍     | 97/221 [00:34<01:08,  1.82it/s][A
 44%|████▍     | 98/221 [00:34<00:59,  2.07it/s][A
 45%|████▍     | 99/221 [00:34<00:49,  2.48it/s][A
 45%|████▌     | 100/221 [00:34<00:44,  2.72it/s][A
 46%|████▌     | 101/221 [00:35<00:39,  3.01it/s][A
 46%|████▌     | 102/221 [00:35<00:32,  3.64it/s][A[h264 @ 0x556e54c671c0] mmco: unref short failure
[h264 @ 0x556e54c671c0] mmco: unref short failure

 47%|████▋     | 104/221 [00:35<00:21,  5.43it/s][A
 48%|████▊     | 105/221 [00:35<00:22,  5.19it/s][A[h264 @ 0x556e653e6040] mmco: unref short failure

 48%|████▊     | 106/221 [00:35<00:26,  4.37it/s][A
 49%|████▉     | 108/221 [00:36<00:21,  5.23it/s][A
 49%|████▉     | 109/221 [00:36<00:20,  5.54it/s][A
 50%|████▉     | 110/221 [00:36<00:22,  4.97it/s][A
 50%|█████     | 111/221 [00:36<00:19,  5.73it/s][A
 51%|█████     | 112/221 [00:36<00:21,  5.03it/s][A
 52%|█████▏    | 114/221 [00:37<00:15,  6.81it/s][A
 52%|█████▏    | 115/221 [00:37<00:14,  7.34it/s][A
 52%|█████▏    | 116/221 [00:37<00:15,  6.79it/s][A
 53%|█████▎    | 117/221 [00:37<00:22,  4.72it/s][A
 53%|█████▎    | 118/221 [00:38<00:22,  4.55it/s][A
 54%|█████▍    | 119/221 [00:38<00:33,  3.04it/s][A[h264 @ 0x556e5e1b7f80] mmco: unref short failure
[h264 @ 0x556e5e1b7f80] mmco: unref short failure

 54%|█████▍    | 120/221 [00:38<00:27,  3.64it/s][A
 55%|█████▌    | 122/221 [00:38<00:17,  5.73it/s][A
 56%|█████▌    | 123/221 [00:39<00:17,  5.69it/s][A
 56%|█████▌    | 124/221 [00:39<00:15,  6.24it/s][A[h264 @ 0x55e50611a8c0] mmco: unref short failure

 57%|█████▋    | 125/221 [00:39<00:17,  5.37it/s][A
 57%|█████▋    | 126/221 [00:39<00:21,  4.43it/s][A
 57%|█████▋    | 127/221 [00:43<02:01,  1.29s/it][A
 58%|█████▊    | 129/221 [00:43<01:08,  1.35it/s][A
 59%|█████▉    | 131/221 [00:44<00:58,  1.54it/s][A
 60%|█████▉    | 132/221 [00:45<00:54,  1.64it/s][A
 60%|██████    | 133/221 [00:45<00:50,  1.75it/s][A
 61%|██████    | 134/221 [00:45<00:39,  2.20it/s][A
 62%|██████▏   | 136/221 [00:46<00:24,  3.41it/s][A
 62%|██████▏   | 137/221 [00:46<00:21,  3.89it/s][A
 62%|██████▏   | 138/221 [00:46<00:18,  4.50it/s][A
 63%|██████▎   | 140/221 [00:46<00:12,  6.43it/s][A
 64%|██████▍   | 142/221 [00:46<00:10,  7.57it/s][A
 65%|██████▌   | 144/221 [00:46<00:08,  9.40it/s][A
 66%|██████▌   | 146/221 [00:46<00:07,  9.71it/s][A
 67%|██████▋   | 148/221 [00:47<00:06, 11.61it/s][A
 68%|██████▊   | 150/221 [00:47<00:07, 10.11it/s][A
 69%|██████▉   | 152/221 [00:48<00:17,  3.89it/s][A[h264 @ 0x55b7e21ab480] mmco: unref short failure
[h264 @ 0x55b7e21ab480] mmco: unref short failure

 69%|██████▉   | 153/221 [00:49<00:22,  3.02it/s][A
 70%|██████▉   | 154/221 [00:49<00:24,  2.76it/s][A
 71%|███████   | 156/221 [00:49<00:16,  3.85it/s][A
 71%|███████▏  | 158/221 [00:50<00:13,  4.63it/s][A
 72%|███████▏  | 159/221 [00:50<00:19,  3.13it/s][A
 72%|███████▏  | 160/221 [00:50<00:16,  3.60it/s][A
 73%|███████▎  | 162/221 [00:51<00:11,  5.05it/s][A
 74%|███████▍  | 164/221 [00:51<00:12,  4.64it/s][A
 75%|███████▌  | 166/221 [00:52<00:11,  4.61it/s][A
 76%|███████▌  | 168/221 [00:52<00:08,  6.12it/s][A
 77%|███████▋  | 170/221 [00:52<00:06,  7.80it/s][A
 78%|███████▊  | 172/221 [00:52<00:05,  9.47it/s][A[h264 @ 0x55b7d69739c0] mmco: unref short failure
[h264 @ 0x55b7d69739c0] mmco: unref short failure

 79%|███████▊  | 174/221 [00:52<00:06,  6.87it/s][A
 80%|███████▉  | 176/221 [00:54<00:18,  2.38it/s][A
 80%|████████  | 177/221 [00:55<00:15,  2.75it/s][A
 81%|████████  | 179/221 [00:55<00:12,  3.33it/s][A
 82%|████████▏ | 181/221 [00:55<00:08,  4.51it/s][A
 83%|████████▎ | 183/221 [00:55<00:07,  5.12it/s][A
 84%|████████▍ | 186/221 [00:55<00:04,  7.55it/s][A
 85%|████████▌ | 188/221 [00:56<00:05,  6.47it/s][A
 86%|████████▋ | 191/221 [00:56<00:03,  8.40it/s][A
 87%|████████▋ | 193/221 [00:56<00:02,  9.64it/s][A
 88%|████████▊ | 195/221 [00:56<00:02, 10.34it/s][A 89%|████████▉ | 197/221 [00:56<00:06,  3.47it/s]
[h264 @ 0x55e513f74580] mmco: unref short failure
[h264 @ 0x55e513f74580] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.78it/s][A
  1%|          | 2/221 [00:00<00:57,  3.78it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.79it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.78it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.78it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.79it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.79it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.79it/s][A
  4%|▍         | 9/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.79it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.79it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.79it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.79it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.79it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:51,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:43,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:37,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 125/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.79it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.79it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.79it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.79it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.79it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.79it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.79it/s][A
 65%|██████▌   | 144/221 [00:37<00:20,  3.79it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.79it/s][A
 67%|██████▋   | 149/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.79it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.79it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.79it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.79it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.79it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.79it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.79it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 159/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.79it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.79it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.79it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.79it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.79it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.79it/s][A
 76%|███████▌  | 168/221 [00:44<00:13,  3.79it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.79it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.79it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.79it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.79it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.79it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 178/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.79it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.79it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.79it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.79it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.79it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.79it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.79it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.78it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.79it/s][A
 89%|████████▉ | 197/221 [00:51<00:06,  3.79it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.78it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.78it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.78it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.79it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.78it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.78it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.79it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.79it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.79it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▌| 212/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.79it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.79it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.79it/s][A
 98%|█████████▊| 216/221 [00:56<00:01,  3.79it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.79it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.79it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.79it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.79it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.79it/s][A100%|██████████| 221/221 [00:58<00:00,  3.79it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:27,  7.95it/s][A
  1%|          | 2/221 [00:00<00:37,  5.84it/s][A
  1%|▏         | 3/221 [00:00<00:36,  5.91it/s][A
  2%|▏         | 4/221 [00:00<00:33,  6.57it/s][A
  2%|▏         | 5/221 [00:00<00:38,  5.59it/s][A
  3%|▎         | 6/221 [00:01<00:38,  5.58it/s][A
  3%|▎         | 7/221 [00:01<00:45,  4.73it/s][A
  4%|▎         | 8/221 [00:01<00:52,  4.10it/s][A
  4%|▍         | 9/221 [00:01<00:49,  4.28it/s][A
  5%|▍         | 10/221 [00:02<01:10,  3.01it/s][A
  5%|▍         | 11/221 [00:02<01:00,  3.47it/s][A
  5%|▌         | 12/221 [00:02<00:49,  4.20it/s][A
  6%|▌         | 13/221 [00:03<01:24,  2.47it/s][A
  7%|▋         | 15/221 [00:03<00:58,  3.54it/s][A
  7%|▋         | 16/221 [00:04<00:57,  3.56it/s][A
  8%|▊         | 17/221 [00:04<01:05,  3.14it/s][A
  8%|▊         | 18/221 [00:04<01:09,  2.92it/s][A
  9%|▊         | 19/221 [00:05<01:02,  3.21it/s][A
  9%|▉         | 20/221 [00:05<00:51,  3.87it/s][A
 10%|▉         | 21/221 [00:05<00:50,  3.98it/s][A
 10%|▉         | 22/221 [00:05<00:43,  4.53it/s][A
 10%|█         | 23/221 [00:05<00:36,  5.38it/s][A
 11%|█         | 24/221 [00:05<00:37,  5.28it/s][A
 11%|█▏        | 25/221 [00:06<00:39,  4.90it/s][A
 12%|█▏        | 26/221 [00:06<00:42,  4.54it/s][A
 12%|█▏        | 27/221 [00:06<00:52,  3.70it/s][A
 13%|█▎        | 28/221 [00:07<00:51,  3.76it/s][A
 13%|█▎        | 29/221 [00:07<00:47,  4.01it/s][A
 14%|█▎        | 30/221 [00:07<00:43,  4.34it/s][A
 14%|█▍        | 31/221 [00:07<00:39,  4.77it/s][A
 14%|█▍        | 32/221 [00:07<00:44,  4.25it/s][A
 15%|█▍        | 33/221 [00:08<00:42,  4.38it/s][A
 15%|█▌        | 34/221 [00:08<00:45,  4.12it/s][A
 16%|█▌        | 35/221 [00:08<00:51,  3.64it/s][A
 16%|█▋        | 36/221 [00:08<00:47,  3.92it/s][A
 17%|█▋        | 37/221 [00:09<00:49,  3.74it/s][A
 17%|█▋        | 38/221 [00:09<00:44,  4.10it/s][A
 18%|█▊        | 39/221 [00:09<00:39,  4.58it/s][A
 18%|█▊        | 40/221 [00:10<00:51,  3.54it/s][A
 19%|█▊        | 41/221 [00:10<00:42,  4.22it/s][A
 19%|█▉        | 42/221 [00:10<00:38,  4.66it/s][A
 19%|█▉        | 43/221 [00:10<00:42,  4.14it/s][A
 20%|█▉        | 44/221 [00:10<00:37,  4.77it/s][A
 20%|██        | 45/221 [00:10<00:34,  5.08it/s][A
 21%|██        | 46/221 [00:11<00:49,  3.51it/s][A
 21%|██▏       | 47/221 [00:11<00:50,  3.44it/s][A
 22%|██▏       | 48/221 [00:11<00:47,  3.64it/s][A
 22%|██▏       | 49/221 [00:12<00:46,  3.70it/s][A
 23%|██▎       | 50/221 [00:12<00:45,  3.72it/s][A
 23%|██▎       | 51/221 [00:12<00:37,  4.53it/s][A
 24%|██▎       | 52/221 [00:12<00:35,  4.75it/s][A
 24%|██▍       | 53/221 [00:12<00:32,  5.21it/s][A
 24%|██▍       | 54/221 [00:13<00:35,  4.69it/s][A
 25%|██▍       | 55/221 [00:13<00:35,  4.73it/s][A
 25%|██▌       | 56/221 [00:13<00:33,  4.95it/s][A
 26%|██▌       | 57/221 [00:13<00:33,  4.85it/s][A
 26%|██▌       | 58/221 [00:14<00:48,  3.39it/s][A
 27%|██▋       | 59/221 [00:14<00:46,  3.51it/s][A
 28%|██▊       | 61/221 [00:14<00:35,  4.54it/s][A
 28%|██▊       | 62/221 [00:15<00:33,  4.76it/s][A
 29%|██▊       | 63/221 [00:15<00:29,  5.37it/s][A
 29%|██▉       | 64/221 [00:15<00:28,  5.53it/s][A
 29%|██▉       | 65/221 [00:15<00:25,  6.12it/s][A
 30%|██▉       | 66/221 [00:15<00:35,  4.40it/s][A
 30%|███       | 67/221 [00:16<01:06,  2.31it/s][A
 31%|███       | 68/221 [00:16<00:54,  2.81it/s][A
 31%|███       | 69/221 [00:17<01:02,  2.42it/s][A
 32%|███▏      | 70/221 [00:17<00:51,  2.94it/s][A
 32%|███▏      | 71/221 [00:17<00:47,  3.15it/s][A
 33%|███▎      | 72/221 [00:18<00:47,  3.12it/s][A
 33%|███▎      | 73/221 [00:18<00:40,  3.63it/s][A
 33%|███▎      | 74/221 [00:18<00:35,  4.14it/s][A
 34%|███▍      | 75/221 [00:18<00:33,  4.35it/s][A
 34%|███▍      | 76/221 [00:18<00:33,  4.34it/s][A
 35%|███▍      | 77/221 [00:19<00:27,  5.19it/s][A
 35%|███▌      | 78/221 [00:19<00:24,  5.75it/s][A
 36%|███▌      | 79/221 [00:19<00:42,  3.33it/s][A
 36%|███▌      | 80/221 [00:20<00:38,  3.64it/s][A
 37%|███▋      | 81/221 [00:20<00:35,  3.89it/s][A
 37%|███▋      | 82/221 [00:20<00:37,  3.74it/s][A
 38%|███▊      | 83/221 [00:20<00:35,  3.90it/s][A
 38%|███▊      | 84/221 [00:20<00:33,  4.12it/s][A
 38%|███▊      | 85/221 [00:21<00:32,  4.15it/s][A
 39%|███▉      | 86/221 [00:21<00:29,  4.60it/s][A
 39%|███▉      | 87/221 [00:21<00:31,  4.32it/s][A
 40%|███▉      | 88/221 [00:22<00:38,  3.44it/s][A
 40%|████      | 89/221 [00:22<00:43,  3.01it/s][A
 41%|████      | 90/221 [00:22<00:41,  3.17it/s][A
 41%|████      | 91/221 [00:22<00:34,  3.74it/s][A
 42%|████▏     | 92/221 [00:23<00:36,  3.54it/s][A
 42%|████▏     | 93/221 [00:24<01:14,  1.71it/s][A
 43%|████▎     | 94/221 [00:24<01:07,  1.87it/s][A
 43%|████▎     | 95/221 [00:25<00:55,  2.28it/s][A
 43%|████▎     | 96/221 [00:25<00:44,  2.82it/s][A
 44%|████▍     | 97/221 [00:25<00:36,  3.42it/s][A
 44%|████▍     | 98/221 [00:25<00:29,  4.23it/s][A
 45%|████▍     | 99/221 [00:25<00:29,  4.09it/s][A
 45%|████▌     | 100/221 [00:26<00:30,  4.02it/s][A
 46%|████▌     | 101/221 [00:26<00:42,  2.83it/s][A
 46%|████▌     | 102/221 [00:27<00:49,  2.38it/s][A
 47%|████▋     | 103/221 [00:27<00:46,  2.52it/s][A
 47%|████▋     | 104/221 [00:27<00:41,  2.82it/s][A
 48%|████▊     | 105/221 [00:28<00:35,  3.29it/s][A
 48%|████▊     | 106/221 [00:28<00:32,  3.56it/s][A
 48%|████▊     | 107/221 [00:28<00:31,  3.63it/s][A
 49%|████▉     | 108/221 [00:28<00:27,  4.07it/s][A
 49%|████▉     | 109/221 [00:28<00:25,  4.32it/s][A
 50%|████▉     | 110/221 [00:29<00:25,  4.38it/s][A
 50%|█████     | 111/221 [00:29<00:27,  4.00it/s][A
 51%|█████     | 112/221 [00:29<00:29,  3.70it/s][A
 51%|█████     | 113/221 [00:29<00:25,  4.17it/s][A
 52%|█████▏    | 114/221 [00:30<00:21,  5.02it/s][A
 52%|█████▏    | 115/221 [00:30<00:24,  4.41it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.83it/s][A
 53%|█████▎    | 117/221 [00:30<00:23,  4.35it/s][A
 53%|█████▎    | 118/221 [00:31<00:23,  4.34it/s][A
 54%|█████▍    | 119/221 [00:31<00:37,  2.68it/s][A
 54%|█████▍    | 120/221 [00:32<00:33,  2.99it/s][A
 55%|█████▌    | 122/221 [00:32<00:24,  4.00it/s][A
 56%|█████▌    | 123/221 [00:32<00:27,  3.51it/s][A
 56%|█████▌    | 124/221 [00:32<00:24,  3.97it/s][A
 57%|█████▋    | 125/221 [00:33<00:27,  3.48it/s][A
 57%|█████▋    | 126/221 [00:33<00:29,  3.17it/s][A
 57%|█████▋    | 127/221 [00:34<00:30,  3.05it/s][A
 58%|█████▊    | 128/221 [00:34<00:27,  3.35it/s][A
 58%|█████▊    | 129/221 [00:34<00:27,  3.34it/s][A
 59%|█████▉    | 130/221 [00:34<00:22,  4.01it/s][A
 60%|█████▉    | 132/221 [00:34<00:14,  6.05it/s][A
 60%|██████    | 133/221 [00:35<00:16,  5.45it/s][A
 61%|██████    | 134/221 [00:35<00:15,  5.55it/s][A
 61%|██████    | 135/221 [00:35<00:15,  5.59it/s][A
 62%|██████▏   | 136/221 [00:35<00:16,  5.05it/s][A
 62%|██████▏   | 137/221 [00:35<00:15,  5.60it/s][A
 62%|██████▏   | 138/221 [00:35<00:15,  5.32it/s][A
 63%|██████▎   | 139/221 [00:36<00:22,  3.57it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.85it/s][A
 64%|██████▍   | 141/221 [00:36<00:21,  3.68it/s][A
 64%|██████▍   | 142/221 [00:37<00:19,  4.16it/s][A
 65%|██████▍   | 143/221 [00:37<00:30,  2.60it/s][A
 65%|██████▌   | 144/221 [00:38<00:34,  2.26it/s][A
 66%|██████▌   | 145/221 [00:38<00:28,  2.69it/s][A
 66%|██████▌   | 146/221 [00:38<00:22,  3.41it/s][A
 67%|██████▋   | 147/221 [00:39<00:20,  3.53it/s][A
 67%|██████▋   | 148/221 [00:39<00:20,  3.64it/s][A
 67%|██████▋   | 149/221 [00:39<00:16,  4.35it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.86it/s][A
 68%|██████▊   | 151/221 [00:40<00:22,  3.11it/s][A
 69%|██████▉   | 152/221 [00:40<00:30,  2.27it/s][A
 69%|██████▉   | 153/221 [00:41<00:25,  2.67it/s][A
 70%|██████▉   | 154/221 [00:41<00:21,  3.19it/s][A
 70%|███████   | 155/221 [00:41<00:18,  3.56it/s][A
 71%|███████   | 156/221 [00:41<00:21,  3.00it/s][A
 71%|███████   | 157/221 [00:42<00:18,  3.41it/s][A
 71%|███████▏  | 158/221 [00:42<00:18,  3.41it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.75it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.78it/s][A
 73%|███████▎  | 161/221 [00:43<00:19,  3.01it/s][A
 73%|███████▎  | 162/221 [00:43<00:17,  3.35it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.64it/s][A
 74%|███████▍  | 164/221 [00:44<00:17,  3.25it/s][A
 75%|███████▍  | 165/221 [00:44<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:44<00:14,  3.73it/s][A
 76%|███████▌  | 168/221 [00:45<00:14,  3.68it/s][A
 76%|███████▋  | 169/221 [00:45<00:13,  3.91it/s][A
 77%|███████▋  | 170/221 [00:46<00:17,  2.97it/s][A
 77%|███████▋  | 171/221 [00:46<00:13,  3.59it/s][A
 78%|███████▊  | 172/221 [00:46<00:11,  4.32it/s][A
 78%|███████▊  | 173/221 [00:46<00:13,  3.46it/s][A
 79%|███████▊  | 174/221 [00:47<00:19,  2.41it/s][A
 79%|███████▉  | 175/221 [00:47<00:16,  2.74it/s][A
 80%|███████▉  | 176/221 [00:47<00:14,  3.03it/s][A
 80%|████████  | 177/221 [00:48<00:11,  3.67it/s][A
 81%|████████  | 178/221 [00:48<00:10,  4.21it/s][A
 81%|████████  | 179/221 [00:48<00:09,  4.24it/s][A
 81%|████████▏ | 180/221 [00:48<00:08,  4.68it/s][A
 82%|████████▏ | 181/221 [00:48<00:10,  3.88it/s][A
 82%|████████▏ | 182/221 [00:49<00:09,  4.23it/s][A
 83%|████████▎ | 183/221 [00:49<00:08,  4.42it/s][A
 83%|████████▎ | 184/221 [00:49<00:07,  5.22it/s][A
 84%|████████▎ | 185/221 [00:49<00:06,  5.24it/s][A
 84%|████████▍ | 186/221 [00:50<00:09,  3.63it/s][A
 85%|████████▍ | 187/221 [00:50<00:08,  4.09it/s][A
 85%|████████▌ | 188/221 [00:50<00:08,  4.08it/s][A
 86%|████████▌ | 189/221 [00:50<00:07,  4.14it/s][A
 86%|████████▌ | 190/221 [00:51<00:08,  3.55it/s][A
 86%|████████▋ | 191/221 [00:51<00:07,  4.00it/s][A
 87%|████████▋ | 192/221 [00:51<00:09,  3.11it/s][A
 87%|████████▋ | 193/221 [00:52<00:08,  3.41it/s][A
 88%|████████▊ | 194/221 [00:52<00:08,  3.32it/s][A
 88%|████████▊ | 195/221 [00:52<00:07,  3.59it/s][A
 89%|████████▊ | 196/221 [00:53<00:08,  2.98it/s][A
 89%|████████▉ | 197/221 [00:53<00:06,  3.73it/s][A
 90%|████████▉ | 198/221 [00:53<00:09,  2.42it/s][A
 90%|█████████ | 199/221 [00:54<00:07,  2.93it/s][A
 90%|█████████ | 200/221 [00:54<00:06,  3.02it/s][A
 91%|█████████ | 201/221 [00:54<00:06,  3.23it/s][A
 91%|█████████▏| 202/221 [00:55<00:06,  2.85it/s][A
 92%|█████████▏| 204/221 [00:55<00:06,  2.59it/s][A
 93%|█████████▎| 205/221 [00:56<00:05,  3.09it/s][A
 93%|█████████▎| 206/221 [00:56<00:04,  3.07it/s][A
 94%|█████████▎| 207/221 [00:56<00:04,  3.14it/s][A
 95%|█████████▍| 209/221 [00:57<00:03,  3.74it/s][A
 95%|█████████▌| 210/221 [00:57<00:03,  3.65it/s][A
 95%|█████████▌| 211/221 [00:57<00:02,  3.44it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  3.46it/s][A
 96%|█████████▋| 213/221 [00:58<00:02,  3.48it/s][A
 97%|█████████▋| 214/221 [00:58<00:02,  2.83it/s][A
 97%|█████████▋| 215/221 [00:59<00:02,  2.97it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  2.86it/s][A
 98%|█████████▊| 217/221 [00:59<00:01,  3.24it/s][A
 99%|█████████▊| 218/221 [01:00<00:00,  3.08it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  2.85it/s][A
100%|█████████▉| 220/221 [01:00<00:00,  2.91it/s][A
100%|██████████| 221/221 [01:01<00:00,  2.92it/s][A100%|██████████| 221/221 [01:01<00:00,  3.61it/s]
09/09/2024 23:03:28 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 1399--===========

09/09/2024 23:03:28 - INFO - __main__ -   {'area_r1': 14.6, 'area_recall': '14.6/31.3/43.1', 'area_ravg': 29.7}
09/09/2024 23:03:28 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 1399--===========

09/09/2024 23:03:28 - INFO - __main__ -   {'forward_r1': 33.3, 'forward_recall': '33.3/58.7/68.9', 'forward_ravg': 53.6}
09/09/2024 23:03:28 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 1399--===========

09/09/2024 23:03:28 - INFO - __main__ -   {'area_video_r1': 41.7, 'area_video_recall': '41.7/69.9/80.2', 'area_video_ravg': 64.0}
09/09/2024 23:03:28 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 1199=======

09/09/2024 23:03:28 - INFO - __main__ -   {'area_video_r1': 42.6, 'area_video_recall': '42.6/70.6/80.1', 'area_video_ravg': 64.4}
09/09/2024 23:03:28 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 1399--===========

09/09/2024 23:03:28 - INFO - __main__ -   {'area_video_r1': 45.4, 'area_video_recall': '45.4/61.8/67.1', 'area_video_ravg': 58.1, 'area_video_back_r1': 49.8, 'area_video_back_recall': '49.8/72.1/80.1', 'area_video_back_ravg': 67.3}
09/09/2024 23:03:28 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 23:03:28 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 23:03:28 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 1399--===========

09/09/2024 23:03:28 - INFO - __main__ -   {'video_r1': 39.7, 'video_recall': '39.7/67.9/78.8', 'video_ravg': 62.1}
09/09/2024 23:03:28 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 23:03:28 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 23:03:28 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 1399--===========

09/09/2024 23:03:28 - INFO - __main__ -   {'video_r1': 52.3, 'video_recall': '52.3/74.1/82.1', 'video_ravg': 69.5}
09/09/2024 23:03:28 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 1049=======

09/09/2024 23:03:28 - INFO - __main__ -   {'video_r1': 52.9, 'video_recall': '52.9/74.5/82.8', 'video_ravg': 70.1}
09/09/2024 23:03:50 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.6313605308532715, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.02634131908416748, 'loss_ret%tv%ta--finetune_area/loss_area': 1.2060716152191162, 'loss_ret%tv%ta--finetune_area/total_loss': 2.8637733459472656}
 72%|███████▏  | 1400/1945 [7:38:24<19:05:47, 126.14s/it][h264 @ 0x55b7e1063480] mmco: unref short failure
[h264 @ 0x55b7e1063480] mmco: unref short failure
[h264 @ 0x55b7e1063480] mmco: unref short failure
[h264 @ 0x55b7e1063480] mmco: unref short failure
 72%|███████▏  | 1401/1945 [7:38:29<13:31:46, 89.53s/it]  72%|███████▏  | 1402/1945 [7:38:33<9:40:06, 64.10s/it] [h264 @ 0x556e4142dc80] mmco: unref short failure
[h264 @ 0x556e4142dc80] mmco: unref short failure
[h264 @ 0x556e4142dc80] mmco: unref short failure
[h264 @ 0x556e4142dc80] mmco: unref short failure
[h264 @ 0x556e622e3d00] mmco: unref short failure
[h264 @ 0x556e622e3d00] mmco: unref short failure
 72%|███████▏  | 1403/1945 [7:38:39<6:59:44, 46.47s/it] 72%|███████▏  | 1404/1945 [7:38:45<5:11:03, 34.50s/it][h264 @ 0x55b7e0135280] mmco: unref short failure
[h264 @ 0x55b7e0135480] mmco: unref short failure
[h264 @ 0x55b7e0135480] mmco: unref short failure
 72%|███████▏  | 1405/1945 [7:38:51<3:53:48, 25.98s/it] 72%|███████▏  | 1406/1945 [7:38:58<3:01:30, 20.20s/it] 72%|███████▏  | 1407/1945 [7:39:05<2:26:17, 16.31s/it][h264 @ 0x55b7d3075400] mmco: unref short failure
 72%|███████▏  | 1408/1945 [7:39:13<2:04:10, 13.88s/it] 72%|███████▏  | 1409/1945 [7:39:21<1:45:51, 11.85s/it][h264 @ 0x556e4ff45dc0] mmco: unref short failure
[h264 @ 0x556e4ff45dc0] mmco: unref short failure
[h264 @ 0x556e533fdc00] mmco: unref short failure
[h264 @ 0x556e6abadec0] mmco: unref short failure
[h264 @ 0x556e6abadec0] mmco: unref short failure
[h264 @ 0x556e6abadec0] mmco: unref short failure
[h264 @ 0x556e6abadec0] mmco: unref short failure
 72%|███████▏  | 1410/1945 [7:39:28<1:34:04, 10.55s/it][h264 @ 0x556e708cb800] mmco: unref short failure
[h264 @ 0x556e708cb800] mmco: unref short failure
[h264 @ 0x556e708cb800] mmco: unref short failure
[h264 @ 0x556e708cb800] mmco: unref short failure
[h264 @ 0x55e50c834a80] mmco: unref short failure
[h264 @ 0x55e50c834a80] mmco: unref short failure
 73%|███████▎  | 1411/1945 [7:39:35<1:24:46,  9.52s/it] 73%|███████▎  | 1412/1945 [7:39:42<1:18:02,  8.78s/it] 73%|███████▎  | 1413/1945 [7:39:50<1:14:09,  8.36s/it][h264 @ 0x556e70ef9000] mmco: unref short failure
[h264 @ 0x556e70ef9000] mmco: unref short failure
[h264 @ 0x55e5054196c0] mmco: unref short failure
[h264 @ 0x55e5054196c0] mmco: unref short failure
 73%|███████▎  | 1414/1945 [7:39:57<1:11:10,  8.04s/it][h264 @ 0x556e574fb540] mmco: unref short failure
 73%|███████▎  | 1415/1945 [7:40:04<1:09:46,  7.90s/it] 73%|███████▎  | 1416/1945 [7:40:12<1:07:28,  7.65s/it][h264 @ 0x556e582220c0] mmco: unref short failure
[h264 @ 0x556e582220c0] mmco: unref short failure
[h264 @ 0x556e582220c0] mmco: unref short failure
[h264 @ 0x556e582220c0] mmco: unref short failure
[h264 @ 0x556e5b57eac0] mmco: unref short failure
[h264 @ 0x556e5b57eac0] mmco: unref short failure
 73%|███████▎  | 1417/1945 [7:40:21<1:11:53,  8.17s/it][h264 @ 0x55e50986b0c0] mmco: unref short failure
[h264 @ 0x55e50986b0c0] mmco: unref short failure
[h264 @ 0x556e547ef000] mmco: unref short failure
[h264 @ 0x556e53bbaa40] mmco: unref short failure
[h264 @ 0x556e53bbaa40] mmco: unref short failure
[h264 @ 0x556e70a03ac0] mmco: unref short failure
 73%|███████▎  | 1418/1945 [7:40:34<1:25:22,  9.72s/it][h264 @ 0x556e5a44e4c0] mmco: unref short failure
[h264 @ 0x556e5a44e4c0] mmco: unref short failure
 73%|███████▎  | 1419/1945 [7:40:45<1:27:40, 10.00s/it][h264 @ 0x556e62818ac0] mmco: unref short failure
 73%|███████▎  | 1420/1945 [7:40:53<1:22:05,  9.38s/it][h264 @ 0x55e5096d9ec0] mmco: unref short failure
[h264 @ 0x55e5096d9ec0] mmco: unref short failure
 73%|███████▎  | 1421/1945 [7:41:02<1:21:44,  9.36s/it][h264 @ 0x55e5012a6100] mmco: unref short failure
[h264 @ 0x55e5012a6100] mmco: unref short failure
[h264 @ 0x55b7da3d4a40] mmco: unref short failure
[h264 @ 0x55b7da3d4a40] mmco: unref short failure
[h264 @ 0x55b7da3d4a40] mmco: unref short failure
[h264 @ 0x55b7da3d4a40] mmco: unref short failure
[h264 @ 0x556e751d22c0] mmco: unref short failure
 73%|███████▎  | 1422/1945 [7:41:10<1:17:28,  8.89s/it] 73%|███████▎  | 1423/1945 [7:41:17<1:12:56,  8.38s/it][h264 @ 0x556e42ac9ec0] mmco: unref short failure
[h264 @ 0x556e42ac9ec0] mmco: unref short failure
[h264 @ 0x556e51c91f40] mmco: unref short failure
[h264 @ 0x556e51c91f40] mmco: unref short failure
[h264 @ 0x556e51c91f40] mmco: unref short failure
[h264 @ 0x556e51c91f40] mmco: unref short failure
[h264 @ 0x55e518037e00] mmco: unref short failure
[h264 @ 0x556e482cf200] mmco: unref short failure
[h264 @ 0x556e482cf200] mmco: unref short failure
[h264 @ 0x556e482cf200] mmco: unref short failure
[h264 @ 0x556e5f7161c0] mmco: unref short failure
[h264 @ 0x556e5f7161c0] mmco: unref short failure
[h264 @ 0x556e5fe4f100] mmco: unref short failure
[h264 @ 0x556e5fe4f100] mmco: unref short failure
[h264 @ 0x55e5109a1880] mmco: unref short failure
[h264 @ 0x55e5109a1880] mmco: unref short failure
[h264 @ 0x55b7e41a4bc0] mmco: unref short failure
[h264 @ 0x55b7e41a4bc0] mmco: unref short failure
[h264 @ 0x55e4fe1923c0] mmco: unref short failure
[h264 @ 0x556e4f1a29c0] mmco: unref short failure
[h264 @ 0x556e58222740] mmco: unref short failure
[h264 @ 0x556e58222740] mmco: unref short failure
 73%|███████▎  | 1424/1945 [7:42:07<3:00:20, 20.77s/it][h264 @ 0x55b7d8054600] mmco: unref short failure
[h264 @ 0x55b7d8054600] mmco: unref short failure
[h264 @ 0x55b7d8054600] mmco: unref short failure
[h264 @ 0x55b7d8054600] mmco: unref short failure
[h264 @ 0x55e5097c6640] mmco: unref short failure
[h264 @ 0x55e5097c6640] mmco: unref short failure
 73%|███████▎  | 1425/1945 [7:42:24<2:51:44, 19.82s/it][h264 @ 0x55e50dd01e40] mmco: unref short failure
[h264 @ 0x55e50dd01e40] mmco: unref short failure
[h264 @ 0x556e53a33280] mmco: unref short failure
 73%|███████▎  | 1426/1945 [7:42:36<2:29:21, 17.27s/it][h264 @ 0x55e51fb7df40] mmco: unref short failure
[h264 @ 0x55b7d1454e40] mmco: unref short failure
[h264 @ 0x55b7d1454e40] mmco: unref short failure
[h264 @ 0x55e4fd5201c0] mmco: unref short failure
[h264 @ 0x55e508050b40] mmco: unref short failure
 73%|███████▎  | 1427/1945 [7:42:49<2:17:54, 15.97s/it][h264 @ 0x556e52a82cc0] mmco: unref short failure
[h264 @ 0x556e52a82cc0] mmco: unref short failure
 73%|███████▎  | 1428/1945 [7:42:56<1:55:18, 13.38s/it][h264 @ 0x556e4b7185c0] mmco: unref short failure
 73%|███████▎  | 1429/1945 [7:43:04<1:40:13, 11.65s/it][h264 @ 0x55b7cad29000] mmco: unref short failure
[h264 @ 0x55b7d41acc40] mmco: unref short failure
[h264 @ 0x55b7d41acc40] mmco: unref short failure
 74%|███████▎  | 1430/1945 [7:43:15<1:38:32, 11.48s/it] 74%|███████▎  | 1431/1945 [7:43:22<1:27:28, 10.21s/it][h264 @ 0x556e659b6400] mmco: unref short failure
[h264 @ 0x55b7cb2d35c0] mmco: unref short failure
[h264 @ 0x55e518037980] mmco: unref short failure
[h264 @ 0x556e512be2c0] mmco: unref short failure
[h264 @ 0x556e512be2c0] mmco: unref short failure
[h264 @ 0x556e512be2c0] mmco: unref short failure
[h264 @ 0x556e512be2c0] mmco: unref short failure
[h264 @ 0x55e4fd6fdbc0] mmco: unref short failure
[h264 @ 0x556e5a3f2800] mmco: unref short failure
[h264 @ 0x556e5a3f2800] mmco: unref short failure
[h264 @ 0x55e4fd5d2c40] mmco: unref short failure
[h264 @ 0x55b7e358f780] mmco: unref short failure
[h264 @ 0x556e4fd22180] mmco: unref short failure
[h264 @ 0x556e4fd22180] mmco: unref short failure
[h264 @ 0x55b7d1454e40] mmco: unref short failure
[h264 @ 0x55b7d1454e40] mmco: unref short failure
[h264 @ 0x55e4fe481d40] mmco: unref short failure
[h264 @ 0x55b7da056dc0] mmco: unref short failure
[h264 @ 0x556e529c3340] mmco: unref short failure
[h264 @ 0x556e529c3340] mmco: unref short failure
[h264 @ 0x55b7d86aa600] mmco: unref short failure
[h264 @ 0x556e44979580] mmco: unref short failure
[h264 @ 0x556e44979580] mmco: unref short failure
[h264 @ 0x556e44979580] mmco: unref short failure
[h264 @ 0x556e44979580] mmco: unref short failure
[h264 @ 0x556e463e62c0] mmco: unref short failure
[h264 @ 0x55e519c65500] mmco: unref short failure
[h264 @ 0x55e519c65500] mmco: unref short failure
 74%|███████▎  | 1432/1945 [7:44:10<3:05:29, 21.70s/it][h264 @ 0x556e4be3d900] mmco: unref short failure
[h264 @ 0x556e4be3d900] mmco: unref short failure
[h264 @ 0x556e4bd8fb80] mmco: unref short failure
[h264 @ 0x556e4bd8fb80] mmco: unref short failure
[h264 @ 0x55e50ceefcc0] mmco: unref short failure
[h264 @ 0x55e50ceefcc0] mmco: unref short failure
[h264 @ 0x556e70868900] mmco: unref short failure
[h264 @ 0x556e70868900] mmco: unref short failure
[h264 @ 0x55b7e997c080] mmco: unref short failure
[h264 @ 0x55b7e1e431c0] mmco: unref short failure
[h264 @ 0x55b7e1e431c0] mmco: unref short failure
[h264 @ 0x556e4bd8f740] mmco: unref short failure
[h264 @ 0x556e4bd8f740] mmco: unref short failure
 74%|███████▎  | 1433/1945 [7:44:25<2:45:36, 19.41s/it][h264 @ 0x556e73476a80] mmco: unref short failure
[h264 @ 0x556e73476a80] mmco: unref short failure
[h264 @ 0x55e50f521cc0] mmco: unref short failure
[h264 @ 0x55e50f521cc0] mmco: unref short failure
[h264 @ 0x55b7cb20a580] mmco: unref short failure
[h264 @ 0x55b7cb20a580] mmco: unref short failure
 74%|███████▎  | 1434/1945 [7:44:42<2:41:14, 18.93s/it][h264 @ 0x55b7d4b852c0] mmco: unref short failure
[h264 @ 0x55b7d4b852c0] mmco: unref short failure
 74%|███████▍  | 1435/1945 [7:44:49<2:09:07, 15.19s/it][h264 @ 0x556e64fd3800] mmco: unref short failure
[h264 @ 0x556e64fd3800] mmco: unref short failure
 74%|███████▍  | 1436/1945 [7:44:57<1:51:30, 13.14s/it][h264 @ 0x55b7cdc93cc0] mmco: unref short failure
 74%|███████▍  | 1437/1945 [7:45:06<1:41:21, 11.97s/it][h264 @ 0x556e42111880] mmco: unref short failure
[h264 @ 0x556e559ff740] mmco: unref short failure
[h264 @ 0x556e559ff740] mmco: unref short failure
[h264 @ 0x556e559ff740] mmco: unref short failure
[h264 @ 0x556e559ff740] mmco: unref short failure
[h264 @ 0x55e50436a580] mmco: unref short failure
[h264 @ 0x55e50436a580] mmco: unref short failure
 74%|███████▍  | 1438/1945 [7:45:23<1:53:05, 13.38s/it][h264 @ 0x55e50c7c5c80] mmco: unref short failure
 74%|███████▍  | 1439/1945 [7:45:30<1:37:18, 11.54s/it][h264 @ 0x55e5089f9f00] mmco: unref short failure
[h264 @ 0x55e5089f9f00] mmco: unref short failure
[h264 @ 0x55e5172df380] mmco: unref short failure
[h264 @ 0x55e510b54300] mmco: unref short failure
[h264 @ 0x556e612afb80] mmco: unref short failure
[h264 @ 0x556e612afb80] mmco: unref short failure
[h264 @ 0x556e53384c00] mmco: unref short failure
[h264 @ 0x556e53384c00] mmco: unref short failure
[h264 @ 0x55e4fd777a00] mmco: unref short failure
[h264 @ 0x55e4fea0be80] mmco: unref short failure
[h264 @ 0x55e4fea0be80] mmco: unref short failure
[h264 @ 0x55e503277ac0] mmco: unref short failure
[h264 @ 0x55e50fb14300] mmco: unref short failure
 74%|███████▍  | 1440/1945 [7:46:17<3:04:50, 21.96s/it][h264 @ 0x55b7cb346980] mmco: unref short failure
[h264 @ 0x55b7cb346980] mmco: unref short failure
[h264 @ 0x55e51c842c00] mmco: unref short failure
[h264 @ 0x55e51c842c00] mmco: unref short failure
[h264 @ 0x55e51c842c00] mmco: unref short failure
[h264 @ 0x55e51c842c00] mmco: unref short failure
[h264 @ 0x556e4ad56000] mmco: unref short failure
[h264 @ 0x556e4ad56000] mmco: unref short failure
[h264 @ 0x556e42c728c0] mmco: unref short failure
[h264 @ 0x556e42c728c0] mmco: unref short failure
 74%|███████▍  | 1441/1945 [7:46:38<3:03:27, 21.84s/it][h264 @ 0x556e544305c0] mmco: unref short failure
[h264 @ 0x556e544305c0] mmco: unref short failure
[h264 @ 0x556e544305c0] mmco: unref short failure
[h264 @ 0x556e544305c0] mmco: unref short failure
[h264 @ 0x556e710e17c0] mmco: unref short failure
[h264 @ 0x556e710e17c0] mmco: unref short failure
 74%|███████▍  | 1442/1945 [7:46:45<2:24:10, 17.20s/it][h264 @ 0x55e5164041c0] mmco: unref short failure
[h264 @ 0x55e5164041c0] mmco: unref short failure
 74%|███████▍  | 1443/1945 [7:46:52<1:59:43, 14.31s/it] 74%|███████▍  | 1444/1945 [7:46:59<1:41:58, 12.21s/it][h264 @ 0x55b7caa44bc0] mmco: unref short failure
[h264 @ 0x55b7caa44bc0] mmco: unref short failure
[h264 @ 0x556e5c3d1400] mmco: unref short failure
 74%|███████▍  | 1445/1945 [7:47:10<1:37:36, 11.71s/it][h264 @ 0x556e62cb4280] mmco: unref short failure
[h264 @ 0x556e62cb4280] mmco: unref short failure
[h264 @ 0x55b7d8f7be00] mmco: unref short failure
[h264 @ 0x55e5187d23c0] mmco: unref short failure
[h264 @ 0x55e5187d23c0] mmco: unref short failure
[h264 @ 0x55b7cb4fc540] mmco: unref short failure
[h264 @ 0x55e4fcddf140] mmco: unref short failure
[h264 @ 0x556e64359e00] mmco: unref short failure
[h264 @ 0x55b7cab3b180] mmco: unref short failure
[h264 @ 0x55b7cab3b180] mmco: unref short failure
 74%|███████▍  | 1446/1945 [7:47:30<1:58:29, 14.25s/it][h264 @ 0x55b7cc6eccc0] mmco: unref short failure
[h264 @ 0x55b7cc6eccc0] mmco: unref short failure
 74%|███████▍  | 1447/1945 [7:47:38<1:41:36, 12.24s/it][h264 @ 0x55e506e28080] mmco: unref short failure
[h264 @ 0x55e50cef4840] mmco: unref short failure
[h264 @ 0x55e50cef4840] mmco: unref short failure
[h264 @ 0x556e52ff8a80] mmco: unref short failure
[h264 @ 0x55b7cb396f80] mmco: unref short failure
[h264 @ 0x556e748ccf40] mmco: unref short failure
[h264 @ 0x55e506016800] mmco: unref short failure
[h264 @ 0x55b7dde23bc0] mmco: unref short failure
[h264 @ 0x55b7d8f10dc0] mmco: unref short failure
[h264 @ 0x556e4e5fc980] mmco: unref short failure
[h264 @ 0x556e4e5fc980] mmco: unref short failure
 74%|███████▍  | 1448/1945 [7:48:14<2:40:21, 19.36s/it] 74%|███████▍  | 1449/1945 [7:48:37<2:49:03, 20.45s/it]09/09/2024 23:14:05 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 23:14:05 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b7cdd66200] mmco: unref short failure
[h264 @ 0x55b7cdd66200] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e55d7b080] mmco: unref short failure
[h264 @ 0x556e52dbf6c0] mmco: unref short failure
[h264 @ 0x556e52dbf6c0] mmco: unref short failure
[h264 @ 0x556e5c99ca80] mmco: unref short failure
[h264 @ 0x556e5c99ca80] mmco: unref short failure
[h264 @ 0x556e45a5ab00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b7cb202fc0] mmco: unref short failure
[h264 @ 0x55b7cb202fc0] mmco: unref short failure
[h264 @ 0x55b7cb202fc0] mmco: unref short failure
[h264 @ 0x55b7cb202fc0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b7cb202fc0] mmco: unref short failure
[h264 @ 0x55b7cb202fc0] mmco: unref short failure
[h264 @ 0x556e73d83e00] mmco: unref short failure
[h264 @ 0x556e5da56940] mmco: unref short failure
[h264 @ 0x556e53a30e00] mmco: unref short failure
[h264 @ 0x556e53a30e00] mmco: unref short failure
[h264 @ 0x55e503277ec0] mmco: unref short failure
[h264 @ 0x55e503277ec0] mmco: unref short failure
[h264 @ 0x556e60613a00] mmco: unref short failure
[h264 @ 0x556e60613a00] mmco: unref short failure
[h264 @ 0x556e42b98f40] mmco: unref short failure
[h264 @ 0x556e703b1140] mmco: unref short failure
[h264 @ 0x556e703b1140] mmco: unref short failure
[h264 @ 0x55e50673b340] mmco: unref short failure
[h264 @ 0x556e4c8006c0] mmco: unref short failure
[h264 @ 0x556e46459080] mmco: unref short failure
[h264 @ 0x556e7227c840] mmco: unref short failure
[h264 @ 0x556e7227c840] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:23,  9.30it/s][A
  1%|          | 2/221 [00:00<00:26,  8.23it/s][A
  1%|▏         | 3/221 [00:00<00:27,  8.02it/s][A
  2%|▏         | 5/221 [00:00<00:26,  8.26it/s][A
  3%|▎         | 6/221 [00:00<00:27,  7.80it/s][A
  3%|▎         | 7/221 [00:01<01:24,  2.52it/s][A
  4%|▎         | 8/221 [00:01<01:11,  2.97it/s][A
  4%|▍         | 9/221 [00:02<01:00,  3.53it/s][A[h264 @ 0x55b7cca55740] mmco: unref short failure

  5%|▍         | 10/221 [00:03<01:55,  1.82it/s][A
  5%|▍         | 11/221 [00:03<01:32,  2.27it/s][A[h264 @ 0x55e517536c00] mmco: unref short failure
[h264 @ 0x55e517536c00] mmco: unref short failure

  6%|▌         | 13/221 [00:04<01:59,  1.75it/s][A
  6%|▋         | 14/221 [00:05<01:42,  2.02it/s][A[h264 @ 0x55b7d6a3e000] mmco: unref short failure
[h264 @ 0x55b7d6a3e000] mmco: unref short failure
[h264 @ 0x55b7d6a3e000] mmco: unref short failure
[h264 @ 0x55b7d6a3e000] mmco: unref short failure

  7%|▋         | 15/221 [00:09<05:20,  1.56s/it][A
  7%|▋         | 16/221 [00:09<03:59,  1.17s/it][A
  8%|▊         | 17/221 [00:10<03:10,  1.07it/s][A
  8%|▊         | 18/221 [00:10<02:29,  1.36it/s][A
  9%|▊         | 19/221 [00:10<01:57,  1.72it/s][A
  9%|▉         | 20/221 [00:10<01:28,  2.27it/s][A
 10%|▉         | 21/221 [00:11<01:25,  2.35it/s][A
 10%|▉         | 22/221 [00:11<01:09,  2.85it/s][A
 10%|█         | 23/221 [00:11<00:55,  3.54it/s][A
 11%|█         | 24/221 [00:11<00:49,  4.00it/s][A
 11%|█▏        | 25/221 [00:11<00:41,  4.70it/s][A
 12%|█▏        | 26/221 [00:11<00:38,  5.04it/s][A
 12%|█▏        | 27/221 [00:12<00:33,  5.76it/s][A
 13%|█▎        | 28/221 [00:12<00:29,  6.50it/s][A
 13%|█▎        | 29/221 [00:12<00:51,  3.70it/s][A
 14%|█▎        | 30/221 [00:12<00:43,  4.44it/s][A
 14%|█▍        | 31/221 [00:13<00:48,  3.94it/s][A
 14%|█▍        | 32/221 [00:13<00:40,  4.71it/s][A
 15%|█▍        | 33/221 [00:13<00:39,  4.75it/s][A
 15%|█▌        | 34/221 [00:13<00:36,  5.07it/s][A
 16%|█▌        | 35/221 [00:13<00:31,  5.84it/s][A
 17%|█▋        | 37/221 [00:14<00:40,  4.57it/s][A
 18%|█▊        | 39/221 [00:14<00:34,  5.32it/s][A
 18%|█▊        | 40/221 [00:14<00:33,  5.35it/s][A
 19%|█▊        | 41/221 [00:15<00:39,  4.51it/s][A
 19%|█▉        | 42/221 [00:15<00:34,  5.12it/s][A
 19%|█▉        | 43/221 [00:15<00:31,  5.57it/s][A
 20%|█▉        | 44/221 [00:15<00:36,  4.86it/s][A
 20%|██        | 45/221 [00:16<01:03,  2.77it/s][A
 21%|██        | 46/221 [00:16<00:53,  3.26it/s][A
 22%|██▏       | 48/221 [00:16<00:35,  4.86it/s][A
 22%|██▏       | 49/221 [00:16<00:37,  4.64it/s][A
 23%|██▎       | 50/221 [00:17<00:39,  4.38it/s][A
 23%|██▎       | 51/221 [00:17<00:44,  3.86it/s][A
 24%|██▎       | 52/221 [00:17<00:40,  4.16it/s][A
 24%|██▍       | 53/221 [00:17<00:34,  4.90it/s][A
 24%|██▍       | 54/221 [00:18<00:32,  5.19it/s][A
 25%|██▍       | 55/221 [00:18<00:27,  6.02it/s][A
 25%|██▌       | 56/221 [00:18<00:30,  5.41it/s][A
 26%|██▌       | 57/221 [00:18<00:30,  5.32it/s][A
 26%|██▌       | 58/221 [00:18<00:36,  4.41it/s][A
 27%|██▋       | 59/221 [00:19<00:40,  3.96it/s][A
 27%|██▋       | 60/221 [00:19<00:40,  3.97it/s][A
 28%|██▊       | 61/221 [00:20<01:06,  2.39it/s][A
 28%|██▊       | 62/221 [00:20<00:52,  3.05it/s][A
 29%|██▊       | 63/221 [00:20<00:42,  3.70it/s][A
 29%|██▉       | 64/221 [00:20<00:40,  3.88it/s][A
 29%|██▉       | 65/221 [00:20<00:33,  4.70it/s][A
 30%|██▉       | 66/221 [00:21<00:33,  4.57it/s][A
 30%|███       | 67/221 [00:21<00:52,  2.92it/s][A
 31%|███       | 68/221 [00:21<00:48,  3.18it/s][A
 31%|███       | 69/221 [00:22<00:45,  3.34it/s][A
 32%|███▏      | 70/221 [00:22<00:39,  3.78it/s][A
 32%|███▏      | 71/221 [00:22<00:45,  3.28it/s][A
 33%|███▎      | 72/221 [00:22<00:36,  4.07it/s][A
 33%|███▎      | 73/221 [00:23<00:30,  4.85it/s][A
 33%|███▎      | 74/221 [00:23<00:42,  3.46it/s][A
 34%|███▍      | 75/221 [00:23<00:45,  3.22it/s][A
 34%|███▍      | 76/221 [00:24<00:42,  3.38it/s][A
 35%|███▍      | 77/221 [00:24<00:38,  3.74it/s][A
 35%|███▌      | 78/221 [00:24<00:32,  4.45it/s][A
 36%|███▌      | 79/221 [00:24<00:33,  4.24it/s][A
 36%|███▌      | 80/221 [00:24<00:33,  4.23it/s][A
 37%|███▋      | 81/221 [00:25<00:29,  4.76it/s][A
 37%|███▋      | 82/221 [00:28<02:59,  1.29s/it][A
 38%|███▊      | 84/221 [00:29<01:40,  1.37it/s][A
 38%|███▊      | 85/221 [00:29<01:18,  1.73it/s][A
 39%|███▉      | 86/221 [00:29<01:02,  2.16it/s][A
 39%|███▉      | 87/221 [00:29<00:50,  2.68it/s][A
 40%|████      | 89/221 [00:29<00:37,  3.56it/s][A
 41%|████      | 90/221 [00:29<00:32,  4.06it/s][A
 41%|████      | 91/221 [00:30<00:28,  4.51it/s][A[h264 @ 0x55e50048f400] mmco: unref short failure
[h264 @ 0x55e50048f400] mmco: unref short failure
[h264 @ 0x55e50048f400] mmco: unref short failure

 42%|████▏     | 92/221 [00:31<01:13,  1.76it/s][A
 42%|████▏     | 93/221 [00:32<01:07,  1.90it/s][A
 43%|████▎     | 94/221 [00:32<00:55,  2.29it/s][A
 43%|████▎     | 95/221 [00:32<00:48,  2.58it/s][A
 43%|████▎     | 96/221 [00:32<00:43,  2.90it/s][A
 44%|████▍     | 97/221 [00:32<00:34,  3.59it/s][A
 45%|████▍     | 99/221 [00:33<00:25,  4.84it/s][A
 45%|████▌     | 100/221 [00:33<00:28,  4.22it/s][A
 46%|████▌     | 102/221 [00:33<00:22,  5.26it/s][A
 47%|████▋     | 104/221 [00:34<00:22,  5.16it/s][A
 48%|████▊     | 105/221 [00:34<00:20,  5.61it/s][A
 48%|████▊     | 106/221 [00:34<00:26,  4.40it/s][A
 48%|████▊     | 107/221 [00:34<00:22,  4.98it/s][A
 49%|████▉     | 109/221 [00:34<00:17,  6.58it/s][A
 50%|████▉     | 110/221 [00:34<00:16,  6.84it/s][A[h264 @ 0x55e5143630c0] mmco: unref short failure
[h264 @ 0x55e5143630c0] mmco: unref short failure

 50%|█████     | 111/221 [00:35<00:17,  6.13it/s][A
 51%|█████     | 112/221 [00:35<00:18,  5.89it/s][A
 51%|█████     | 113/221 [00:35<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:36<00:19,  5.48it/s][A
 53%|█████▎    | 117/221 [00:36<00:15,  6.92it/s][A
 54%|█████▍    | 119/221 [00:36<00:15,  6.72it/s][A
 54%|█████▍    | 120/221 [00:36<00:14,  7.16it/s][A
 55%|█████▍    | 121/221 [00:41<01:51,  1.11s/it][A
 55%|█████▌    | 122/221 [00:41<01:26,  1.15it/s][A
 56%|█████▌    | 123/221 [00:41<01:08,  1.44it/s][A
 56%|█████▌    | 124/221 [00:41<00:51,  1.87it/s][A
 57%|█████▋    | 126/221 [00:42<00:39,  2.43it/s][A
 57%|█████▋    | 127/221 [00:42<00:39,  2.41it/s][A
 58%|█████▊    | 128/221 [00:42<00:33,  2.77it/s][A
 58%|█████▊    | 129/221 [00:42<00:28,  3.18it/s][A
 59%|█████▉    | 130/221 [00:43<00:28,  3.22it/s][A[h264 @ 0x556e55d7b700] mmco: unref short failure

 59%|█████▉    | 131/221 [00:43<00:23,  3.91it/s][A
 60%|██████    | 133/221 [00:43<00:15,  5.69it/s][A
 61%|██████    | 135/221 [00:43<00:11,  7.67it/s][A
 62%|██████▏   | 137/221 [00:43<00:08,  9.44it/s][A
 63%|██████▎   | 139/221 [00:43<00:08,  9.39it/s][A
 64%|██████▍   | 141/221 [00:44<00:09,  8.71it/s][A
 65%|██████▍   | 143/221 [00:44<00:08,  9.46it/s][A
 66%|██████▌   | 145/221 [00:45<00:25,  2.97it/s][A
 66%|██████▌   | 146/221 [00:46<00:29,  2.57it/s][A
 67%|██████▋   | 147/221 [00:46<00:24,  2.99it/s][A
 67%|██████▋   | 148/221 [00:46<00:21,  3.39it/s][A
 67%|██████▋   | 149/221 [00:47<00:27,  2.66it/s][A
 68%|██████▊   | 150/221 [00:47<00:22,  3.15it/s][A
 68%|██████▊   | 151/221 [00:47<00:19,  3.66it/s][A
 69%|██████▉   | 153/221 [00:48<00:18,  3.68it/s][A[h264 @ 0x556e53a31000] mmco: unref short failure

 70%|███████   | 155/221 [00:48<00:17,  3.82it/s][A
 71%|███████▏  | 158/221 [00:48<00:10,  6.16it/s][A
 72%|███████▏  | 160/221 [00:49<00:07,  7.75it/s][A
 73%|███████▎  | 162/221 [00:49<00:07,  8.23it/s][A
 74%|███████▍  | 164/221 [00:51<00:25,  2.20it/s][A
 75%|███████▍  | 165/221 [00:51<00:22,  2.49it/s][A
 76%|███████▌  | 167/221 [00:52<00:17,  3.09it/s][A
 76%|███████▋  | 169/221 [00:52<00:12,  4.04it/s][A[h264 @ 0x556e719e6ec0] mmco: unref short failure
[h264 @ 0x556e719e6ec0] mmco: unref short failure
[h264 @ 0x556e719e6ec0] mmco: unref short failure
[h264 @ 0x556e719e6ec0] mmco: unref short failure

 77%|███████▋  | 170/221 [00:52<00:12,  4.07it/s][A
 78%|███████▊  | 173/221 [00:53<00:09,  5.01it/s][A
 79%|███████▊  | 174/221 [00:53<00:08,  5.32it/s][A
 80%|███████▉  | 176/221 [00:53<00:07,  6.38it/s][A
 81%|████████  | 178/221 [00:53<00:05,  7.69it/s][A
 81%|████████▏ | 180/221 [00:53<00:04,  8.68it/s][A 82%|████████▏ | 181/221 [00:53<00:11,  3.36it/s]
[h264 @ 0x556e4c0dc700] mmco: unref short failure
[h264 @ 0x556e64b8b900] mmco: unref short failure
[h264 @ 0x556e64b8b900] mmco: unref short failure
[h264 @ 0x556e4c456280] mmco: unref short failure
[h264 @ 0x556e4c456280] mmco: unref short failure
[h264 @ 0x55b7d4da2880] mmco: unref short failure
[h264 @ 0x55b7d4da2880] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.78it/s][A
  1%|          | 2/221 [00:00<00:57,  3.78it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.79it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.79it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.79it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.79it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.79it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.79it/s][A
  4%|▍         | 9/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.79it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.79it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.79it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.79it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.79it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:51,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:47,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:37,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.78it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:23<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 125/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 130/221 [00:34<00:23,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.79it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.79it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.79it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.79it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.79it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.79it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.79it/s][A
 65%|██████▌   | 144/221 [00:37<00:20,  3.79it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.79it/s][A
 67%|██████▋   | 149/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.79it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.79it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.79it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.79it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.79it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.79it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.79it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 159/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.79it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.79it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 163/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.79it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.79it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.79it/s][A
 76%|███████▌  | 168/221 [00:44<00:13,  3.79it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.79it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.79it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.79it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.79it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.79it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 178/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.79it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 182/221 [00:47<00:10,  3.79it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.79it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.79it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.79it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.79it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.79it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.79it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.79it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.79it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.79it/s][A
 89%|████████▉ | 197/221 [00:51<00:06,  3.79it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.79it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.79it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.79it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.79it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.79it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.79it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.79it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.79it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.79it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.79it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.79it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▌| 212/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.79it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.79it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.79it/s][A
 98%|█████████▊| 216/221 [00:56<00:01,  3.79it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.79it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.79it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.79it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.79it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.79it/s][A100%|██████████| 221/221 [00:58<00:00,  3.79it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:26,  8.15it/s][A
  1%|          | 2/221 [00:00<00:37,  5.88it/s][A
  1%|▏         | 3/221 [00:00<00:36,  6.00it/s][A
  2%|▏         | 4/221 [00:00<00:32,  6.65it/s][A
  2%|▏         | 5/221 [00:00<00:38,  5.63it/s][A
  3%|▎         | 6/221 [00:01<00:37,  5.66it/s][A
  3%|▎         | 7/221 [00:01<00:45,  4.70it/s][A
  4%|▎         | 8/221 [00:01<00:53,  3.95it/s][A
  4%|▍         | 9/221 [00:01<00:50,  4.19it/s][A
  5%|▍         | 10/221 [00:02<01:08,  3.10it/s][A
  5%|▍         | 11/221 [00:02<01:00,  3.48it/s][A
  5%|▌         | 12/221 [00:02<00:49,  4.24it/s][A
  6%|▌         | 13/221 [00:03<01:19,  2.61it/s][A
  7%|▋         | 15/221 [00:03<00:56,  3.67it/s][A
  7%|▋         | 16/221 [00:03<00:56,  3.63it/s][A
  8%|▊         | 17/221 [00:04<01:02,  3.28it/s][A
  8%|▊         | 18/221 [00:04<01:05,  3.11it/s][A
  9%|▊         | 19/221 [00:04<01:00,  3.35it/s][A
  9%|▉         | 20/221 [00:05<00:50,  4.02it/s][A
 10%|▉         | 21/221 [00:05<00:48,  4.16it/s][A
 10%|▉         | 22/221 [00:05<00:42,  4.68it/s][A
 11%|█         | 24/221 [00:05<00:35,  5.53it/s][A
 11%|█▏        | 25/221 [00:06<00:39,  4.97it/s][A
 12%|█▏        | 26/221 [00:06<00:43,  4.53it/s][A
 12%|█▏        | 27/221 [00:06<00:55,  3.48it/s][A
 13%|█▎        | 28/221 [00:07<00:53,  3.59it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.82it/s][A
 14%|█▎        | 30/221 [00:07<00:45,  4.17it/s][A
 14%|█▍        | 31/221 [00:07<00:42,  4.50it/s][A
 14%|█▍        | 32/221 [00:07<00:48,  3.93it/s][A
 15%|█▍        | 33/221 [00:08<00:45,  4.14it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.80it/s][A
 16%|█▌        | 35/221 [00:08<00:54,  3.40it/s][A
 16%|█▋        | 36/221 [00:09<00:49,  3.73it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.80it/s][A
 17%|█▋        | 38/221 [00:09<00:43,  4.17it/s][A
 18%|█▊        | 39/221 [00:09<00:40,  4.47it/s][A
 18%|█▊        | 40/221 [00:10<00:50,  3.56it/s][A
 19%|█▊        | 41/221 [00:10<00:44,  4.05it/s][A
 19%|█▉        | 42/221 [00:10<00:40,  4.44it/s][A
 19%|█▉        | 43/221 [00:10<00:44,  3.96it/s][A
 20%|█▉        | 44/221 [00:10<00:39,  4.47it/s][A
 20%|██        | 45/221 [00:11<00:35,  4.92it/s][A
 21%|██        | 46/221 [00:11<00:50,  3.47it/s][A
 21%|██▏       | 47/221 [00:11<00:51,  3.40it/s][A
 22%|██▏       | 48/221 [00:12<00:51,  3.37it/s][A
 22%|██▏       | 49/221 [00:12<00:50,  3.40it/s][A
 23%|██▎       | 50/221 [00:12<00:48,  3.51it/s][A
 23%|██▎       | 51/221 [00:12<00:40,  4.19it/s][A
 24%|██▎       | 52/221 [00:13<00:37,  4.47it/s][A
 24%|██▍       | 53/221 [00:13<00:35,  4.75it/s][A
 24%|██▍       | 54/221 [00:13<00:37,  4.49it/s][A
 25%|██▍       | 55/221 [00:13<00:36,  4.57it/s][A
 25%|██▌       | 56/221 [00:13<00:33,  4.92it/s][A
 26%|██▌       | 57/221 [00:14<00:33,  4.87it/s][A
 26%|██▌       | 58/221 [00:14<00:52,  3.11it/s][A
 27%|██▋       | 59/221 [00:14<00:48,  3.34it/s][A
 28%|██▊       | 61/221 [00:15<00:35,  4.46it/s][A
 28%|██▊       | 62/221 [00:15<00:34,  4.66it/s][A
 29%|██▊       | 63/221 [00:15<00:30,  5.25it/s][A
 29%|██▉       | 64/221 [00:15<00:28,  5.43it/s][A
 29%|██▉       | 65/221 [00:15<00:26,  5.96it/s][A
 30%|██▉       | 66/221 [00:16<00:36,  4.24it/s][A
 30%|███       | 67/221 [00:17<01:07,  2.28it/s][A
 31%|███       | 68/221 [00:17<00:55,  2.76it/s][A
 31%|███       | 69/221 [00:17<01:00,  2.51it/s][A
 32%|███▏      | 70/221 [00:17<00:49,  3.05it/s][A
 32%|███▏      | 71/221 [00:18<00:45,  3.32it/s][A
 33%|███▎      | 72/221 [00:18<00:45,  3.27it/s][A
 33%|███▎      | 73/221 [00:18<00:39,  3.76it/s][A
 33%|███▎      | 74/221 [00:18<00:34,  4.23it/s][A
 34%|███▍      | 75/221 [00:19<00:33,  4.39it/s][A
 34%|███▍      | 76/221 [00:19<00:32,  4.40it/s][A
 35%|███▍      | 77/221 [00:19<00:27,  5.28it/s][A
 35%|███▌      | 78/221 [00:19<00:25,  5.58it/s][A
 36%|███▌      | 79/221 [00:20<00:42,  3.36it/s][A
 36%|███▌      | 80/221 [00:20<00:38,  3.70it/s][A
 37%|███▋      | 81/221 [00:20<00:35,  3.94it/s][A
 37%|███▋      | 82/221 [00:20<00:38,  3.62it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.83it/s][A
 38%|███▊      | 84/221 [00:21<00:33,  4.07it/s][A
 38%|███▊      | 85/221 [00:21<00:33,  4.03it/s][A
 39%|███▉      | 86/221 [00:21<00:29,  4.52it/s][A
 39%|███▉      | 87/221 [00:21<00:29,  4.49it/s][A
 40%|███▉      | 88/221 [00:22<00:36,  3.67it/s][A
 40%|████      | 89/221 [00:22<00:42,  3.13it/s][A
 41%|████      | 90/221 [00:22<00:39,  3.34it/s][A
 41%|████      | 91/221 [00:23<00:33,  3.89it/s][A
 42%|████▏     | 92/221 [00:23<00:35,  3.67it/s][A
 42%|████▏     | 93/221 [00:24<01:10,  1.82it/s][A
 43%|████▎     | 94/221 [00:25<01:05,  1.94it/s][A
 43%|████▎     | 95/221 [00:25<00:53,  2.35it/s][A
 43%|████▎     | 96/221 [00:25<00:43,  2.89it/s][A
 44%|████▍     | 97/221 [00:25<00:35,  3.49it/s][A
 44%|████▍     | 98/221 [00:25<00:28,  4.31it/s][A
 45%|████▍     | 99/221 [00:25<00:29,  4.07it/s][A
 45%|████▌     | 100/221 [00:26<00:30,  4.03it/s][A
 46%|████▌     | 101/221 [00:26<00:40,  2.95it/s][A
 46%|████▌     | 102/221 [00:27<00:48,  2.44it/s][A
 47%|████▋     | 103/221 [00:27<00:47,  2.49it/s][A
 47%|████▋     | 104/221 [00:27<00:41,  2.81it/s][A
 48%|████▊     | 105/221 [00:28<00:35,  3.22it/s][A
 48%|████▊     | 106/221 [00:28<00:32,  3.57it/s][A
 48%|████▊     | 107/221 [00:28<00:32,  3.53it/s][A
 49%|████▉     | 108/221 [00:28<00:28,  3.93it/s][A
 49%|████▉     | 109/221 [00:29<00:26,  4.18it/s][A
 50%|████▉     | 110/221 [00:29<00:27,  4.06it/s][A
 50%|█████     | 111/221 [00:29<00:28,  3.81it/s][A
 51%|█████     | 112/221 [00:29<00:29,  3.74it/s][A
 51%|█████     | 113/221 [00:30<00:25,  4.19it/s][A
 52%|█████▏    | 114/221 [00:30<00:21,  5.04it/s][A
 52%|█████▏    | 115/221 [00:30<00:24,  4.32it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:24,  4.31it/s][A
 53%|█████▎    | 118/221 [00:31<00:23,  4.32it/s][A
 54%|█████▍    | 119/221 [00:31<00:39,  2.57it/s][A
 54%|█████▍    | 120/221 [00:32<00:34,  2.91it/s][A
 55%|█████▍    | 121/221 [00:32<00:27,  3.67it/s][A
 55%|█████▌    | 122/221 [00:32<00:25,  3.96it/s][A
 56%|█████▌    | 123/221 [00:32<00:28,  3.41it/s][A
 56%|█████▌    | 124/221 [00:33<00:24,  3.94it/s][A
 57%|█████▋    | 125/221 [00:33<00:28,  3.43it/s][A
 57%|█████▋    | 126/221 [00:33<00:29,  3.21it/s][A
 57%|█████▋    | 127/221 [00:34<00:30,  3.07it/s][A
 58%|█████▊    | 128/221 [00:34<00:27,  3.36it/s][A
 58%|█████▊    | 129/221 [00:34<00:28,  3.26it/s][A
 59%|█████▉    | 130/221 [00:34<00:23,  3.83it/s][A
 60%|█████▉    | 132/221 [00:35<00:15,  5.87it/s][A
 60%|██████    | 133/221 [00:35<00:16,  5.28it/s][A
 61%|██████    | 134/221 [00:35<00:16,  5.39it/s][A
 61%|██████    | 135/221 [00:35<00:15,  5.58it/s][A
 62%|██████▏   | 136/221 [00:35<00:16,  5.05it/s][A
 62%|██████▏   | 137/221 [00:35<00:15,  5.59it/s][A
 62%|██████▏   | 138/221 [00:36<00:15,  5.32it/s][A
 63%|██████▎   | 139/221 [00:36<00:25,  3.25it/s][A
 63%|██████▎   | 140/221 [00:36<00:22,  3.61it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.79it/s][A
 64%|██████▍   | 142/221 [00:37<00:18,  4.23it/s][A
 65%|██████▍   | 143/221 [00:38<00:27,  2.81it/s][A
 65%|██████▌   | 144/221 [00:38<00:32,  2.35it/s][A
 66%|██████▌   | 145/221 [00:38<00:27,  2.77it/s][A
 66%|██████▌   | 146/221 [00:38<00:21,  3.53it/s][A
 67%|██████▋   | 147/221 [00:39<00:20,  3.64it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.72it/s][A
 67%|██████▋   | 149/221 [00:39<00:15,  4.53it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.93it/s][A
 68%|██████▊   | 151/221 [00:40<00:23,  2.95it/s][A
 69%|██████▉   | 152/221 [00:41<00:30,  2.23it/s][A
 69%|██████▉   | 153/221 [00:41<00:25,  2.62it/s][A
 70%|██████▉   | 154/221 [00:41<00:21,  3.14it/s][A
 70%|███████   | 155/221 [00:41<00:19,  3.44it/s][A
 71%|███████   | 156/221 [00:42<00:22,  2.92it/s][A
 71%|███████   | 157/221 [00:42<00:19,  3.32it/s][A
 71%|███████▏  | 158/221 [00:42<00:19,  3.27it/s][A
 72%|███████▏  | 159/221 [00:42<00:17,  3.64it/s][A
 72%|███████▏  | 160/221 [00:43<00:16,  3.72it/s][A
 73%|███████▎  | 161/221 [00:43<00:20,  2.90it/s][A
 73%|███████▎  | 162/221 [00:43<00:17,  3.31it/s][A
 74%|███████▍  | 163/221 [00:44<00:16,  3.61it/s][A
 74%|███████▍  | 164/221 [00:44<00:17,  3.30it/s][A
 75%|███████▍  | 165/221 [00:44<00:15,  3.73it/s][A
 75%|███████▌  | 166/221 [00:44<00:14,  3.67it/s][A
 76%|███████▌  | 168/221 [00:45<00:14,  3.70it/s][A
 76%|███████▋  | 169/221 [00:45<00:13,  3.96it/s][A
 77%|███████▋  | 170/221 [00:46<00:16,  3.02it/s][A
 77%|███████▋  | 171/221 [00:46<00:13,  3.66it/s][A
 78%|███████▊  | 172/221 [00:46<00:11,  4.20it/s][A
 78%|███████▊  | 173/221 [00:46<00:14,  3.37it/s][A
 79%|███████▊  | 174/221 [00:47<00:19,  2.44it/s][A
 79%|███████▉  | 175/221 [00:47<00:16,  2.79it/s][A
 80%|███████▉  | 176/221 [00:48<00:14,  3.13it/s][A
 80%|████████  | 177/221 [00:48<00:11,  3.78it/s][A
 81%|████████  | 178/221 [00:48<00:09,  4.43it/s][A
 81%|████████  | 179/221 [00:48<00:09,  4.46it/s][A
 81%|████████▏ | 180/221 [00:48<00:08,  4.90it/s][A
 82%|████████▏ | 181/221 [00:49<00:10,  3.92it/s][A
 82%|████████▏ | 182/221 [00:49<00:09,  4.26it/s][A
 83%|████████▎ | 183/221 [00:49<00:08,  4.42it/s][A
 83%|████████▎ | 184/221 [00:49<00:07,  5.23it/s][A
 84%|████████▎ | 185/221 [00:49<00:07,  5.00it/s][A
 84%|████████▍ | 186/221 [00:50<00:09,  3.69it/s][A
 85%|████████▍ | 187/221 [00:50<00:08,  4.17it/s][A
 85%|████████▌ | 188/221 [00:50<00:07,  4.20it/s][A
 86%|████████▌ | 189/221 [00:50<00:07,  4.23it/s][A
 86%|████████▌ | 190/221 [00:51<00:08,  3.53it/s][A
 86%|████████▋ | 191/221 [00:51<00:07,  3.99it/s][A
 87%|████████▋ | 192/221 [00:51<00:09,  3.05it/s][A
 87%|████████▋ | 193/221 [00:52<00:08,  3.38it/s][A
 88%|████████▊ | 194/221 [00:52<00:08,  3.32it/s][A
 88%|████████▊ | 195/221 [00:52<00:07,  3.57it/s][A
 89%|████████▊ | 196/221 [00:53<00:08,  3.12it/s][A
 89%|████████▉ | 197/221 [00:53<00:06,  3.85it/s][A
 90%|████████▉ | 198/221 [00:54<00:09,  2.35it/s][A
 90%|█████████ | 199/221 [00:54<00:07,  2.80it/s][A
 90%|█████████ | 200/221 [00:54<00:07,  2.90it/s][A
 91%|█████████ | 201/221 [00:54<00:06,  3.09it/s][A
 91%|█████████▏| 202/221 [00:55<00:07,  2.69it/s][A
 92%|█████████▏| 204/221 [00:56<00:06,  2.66it/s][A
 93%|█████████▎| 205/221 [00:56<00:05,  3.17it/s][A
 93%|█████████▎| 206/221 [00:56<00:04,  3.17it/s][A
 94%|█████████▎| 207/221 [00:56<00:04,  3.33it/s][A
 94%|█████████▍| 208/221 [00:56<00:03,  4.07it/s][A
 95%|█████████▍| 209/221 [00:57<00:03,  3.79it/s][A
 95%|█████████▌| 210/221 [00:57<00:02,  3.67it/s][A
 95%|█████████▌| 211/221 [00:57<00:02,  3.43it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [00:58<00:02,  3.45it/s][A
 97%|█████████▋| 214/221 [00:58<00:02,  2.88it/s][A
 97%|█████████▋| 215/221 [00:59<00:01,  3.10it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  3.01it/s][A
 98%|█████████▊| 217/221 [00:59<00:01,  3.38it/s][A
 99%|█████████▊| 218/221 [01:00<00:00,  3.31it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  3.05it/s][A
100%|█████████▉| 220/221 [01:00<00:00,  3.08it/s][A
100%|██████████| 221/221 [01:01<00:00,  2.80it/s][A100%|██████████| 221/221 [01:01<00:00,  3.61it/s]
09/09/2024 23:19:57 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 1449--===========

09/09/2024 23:19:57 - INFO - __main__ -   {'area_r1': 13.8, 'area_recall': '13.8/29.0/40.4', 'area_ravg': 27.7}
09/09/2024 23:19:57 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 1449--===========

09/09/2024 23:19:57 - INFO - __main__ -   {'forward_r1': 33.7, 'forward_recall': '33.7/58.9/68.7', 'forward_ravg': 53.8}
09/09/2024 23:19:57 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 1449--===========

09/09/2024 23:19:57 - INFO - __main__ -   {'area_video_r1': 42.4, 'area_video_recall': '42.4/70.0/80.1', 'area_video_ravg': 64.2}
09/09/2024 23:19:57 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 1199=======

09/09/2024 23:19:57 - INFO - __main__ -   {'area_video_r1': 42.6, 'area_video_recall': '42.6/70.6/80.1', 'area_video_ravg': 64.4}
09/09/2024 23:19:57 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 1449--===========

09/09/2024 23:19:57 - INFO - __main__ -   {'area_video_r1': 41.6, 'area_video_recall': '41.6/57.6/62.7', 'area_video_ravg': 54.0, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/71.8/79.6', 'area_video_back_ravg': 67.0}
09/09/2024 23:19:57 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 23:19:57 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 23:19:57 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 1449--===========

09/09/2024 23:19:57 - INFO - __main__ -   {'video_r1': 39.9, 'video_recall': '39.9/68.2/79.0', 'video_ravg': 62.4}
09/09/2024 23:19:57 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 23:19:57 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 23:19:57 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 1449--===========

09/09/2024 23:19:57 - INFO - __main__ -   {'video_r1': 52.0, 'video_recall': '52.0/74.3/82.0', 'video_ravg': 69.5}
09/09/2024 23:19:57 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 1049=======

09/09/2024 23:19:57 - INFO - __main__ -   {'video_r1': 52.9, 'video_recall': '52.9/74.5/82.8', 'video_ravg': 70.1}
09/09/2024 23:20:18 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.5576177835464478, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.02307954430580139, 'loss_ret%tv%ta--finetune_area/loss_area': 1.2076241970062256, 'loss_ret%tv%ta--finetune_area/total_loss': 2.7883214950561523}
 75%|███████▍  | 1450/1945 [7:54:52<17:26:36, 126.86s/it] 75%|███████▍  | 1451/1945 [7:54:56<12:21:03, 90.01s/it] [h264 @ 0x556e5031cd80] mmco: unref short failure
[h264 @ 0x556e5031cd80] mmco: unref short failure
 75%|███████▍  | 1452/1945 [7:55:01<8:49:37, 64.46s/it]  75%|███████▍  | 1453/1945 [7:55:06<6:23:52, 46.81s/it] 75%|███████▍  | 1454/1945 [7:55:12<4:41:06, 34.35s/it][h264 @ 0x556e4f4c2f40] mmco: unref short failure
[h264 @ 0x556e5782f300] mmco: unref short failure
[h264 @ 0x556e5782f300] mmco: unref short failure
 75%|███████▍  | 1455/1945 [7:55:19<3:34:03, 26.21s/it][h264 @ 0x55b7cac85280] mmco: unref short failure
[h264 @ 0x556e5989c440] mmco: unref short failure
[h264 @ 0x55e506420580] mmco: unref short failure
[h264 @ 0x55e506420580] mmco: unref short failure
[h264 @ 0x55b7caa44bc0] mmco: unref short failure
[h264 @ 0x55b7caa44bc0] mmco: unref short failure
 75%|███████▍  | 1456/1945 [7:55:26<2:46:24, 20.42s/it][h264 @ 0x55b7cedb9c40] mmco: unref short failure
 75%|███████▍  | 1457/1945 [7:55:33<2:14:49, 16.58s/it][h264 @ 0x55e4fea57640] mmco: unref short failure
[h264 @ 0x55e4fea57640] mmco: unref short failure
 75%|███████▍  | 1458/1945 [7:55:41<1:51:43, 13.77s/it] 75%|███████▌  | 1459/1945 [7:55:48<1:37:17, 12.01s/it][h264 @ 0x55e4fc99c8c0] mmco: unref short failure
[h264 @ 0x55e4fc99c8c0] mmco: unref short failure
[h264 @ 0x55b7cad42a00] mmco: unref short failure
[h264 @ 0x556e49e7ed80] mmco: unref short failure
[h264 @ 0x556e49e7ed80] mmco: unref short failure
[h264 @ 0x55b7caacbfc0] mmco: unref short failure
[h264 @ 0x55b7caacbfc0] mmco: unref short failure
 75%|███████▌  | 1460/1945 [7:55:57<1:27:34, 10.83s/it] 75%|███████▌  | 1461/1945 [7:56:04<1:19:22,  9.84s/it] 75%|███████▌  | 1462/1945 [7:56:12<1:14:24,  9.24s/it][h264 @ 0x55e501ec91c0] mmco: unref short failure
[h264 @ 0x55e501ec91c0] mmco: unref short failure
[h264 @ 0x55e51265aec0] mmco: unref short failure
[h264 @ 0x55b7cab0c540] mmco: unref short failure
[h264 @ 0x55b7cab0c540] mmco: unref short failure
[h264 @ 0x556e4e5fcc00] mmco: unref short failure
[h264 @ 0x556e4e5fcc00] mmco: unref short failure
[h264 @ 0x55b7ed644c00] mmco: unref short failure
[h264 @ 0x556e6c2d8b40] mmco: unref short failure
[h264 @ 0x556e6c2d8b40] mmco: unref short failure
[h264 @ 0x55e509021980] mmco: unref short failure
[h264 @ 0x55e509021980] mmco: unref short failure
[h264 @ 0x556e5e238980] mmco: unref short failure
[h264 @ 0x556e5e238980] mmco: unref short failure
[h264 @ 0x556e5e238980] mmco: unref short failure
[h264 @ 0x556e5e238980] mmco: unref short failure
 75%|███████▌  | 1463/1945 [7:56:23<1:18:39,  9.79s/it] 75%|███████▌  | 1464/1945 [7:56:30<1:12:34,  9.05s/it][h264 @ 0x556e55845c40] mmco: unref short failure
 75%|███████▌  | 1465/1945 [7:56:38<1:09:34,  8.70s/it] 75%|███████▌  | 1466/1945 [7:56:46<1:06:38,  8.35s/it][h264 @ 0x556e739f0780] mmco: unref short failure
[h264 @ 0x556e739f0780] mmco: unref short failure
[h264 @ 0x556e4b3812c0] mmco: unref short failure
[h264 @ 0x556e4b3812c0] mmco: unref short failure
[h264 @ 0x556e62d36500] mmco: unref short failure
[h264 @ 0x556e62d36500] mmco: unref short failure
 75%|███████▌  | 1467/1945 [7:56:53<1:03:11,  7.93s/it][h264 @ 0x556e52025e80] mmco: unref short failure
[h264 @ 0x556e52025e80] mmco: unref short failure
[h264 @ 0x55b7d5c7ce40] mmco: unref short failure
[h264 @ 0x55b7d5c7ce40] mmco: unref short failure
[h264 @ 0x55b7d5c7ce40] mmco: unref short failure
[h264 @ 0x55b7d5c7ce40] mmco: unref short failure
 75%|███████▌  | 1468/1945 [7:57:03<1:09:27,  8.74s/it][h264 @ 0x55e4fce91dc0] mmco: unref short failure
[h264 @ 0x556e451a2dc0] mmco: unref short failure
[h264 @ 0x556e451a2dc0] mmco: unref short failure
[h264 @ 0x556e5d24d800] mmco: unref short failure
 76%|███████▌  | 1469/1945 [7:57:11<1:06:19,  8.36s/it][h264 @ 0x55b7ce8dd100] mmco: unref short failure
[h264 @ 0x55b7ce8dd100] mmco: unref short failure
[h264 @ 0x55b7ce8dd100] mmco: unref short failure
[h264 @ 0x55b7e715ab40] mmco: unref short failure
[h264 @ 0x55b7e715ab40] mmco: unref short failure
[h264 @ 0x55b7e715ab40] mmco: unref short failure
[h264 @ 0x55b7e715ab40] mmco: unref short failure
[h264 @ 0x55b7e715ab40] mmco: unref short failure
[h264 @ 0x55b7e715ab40] mmco: unref short failure
 76%|███████▌  | 1470/1945 [7:57:23<1:14:58,  9.47s/it][h264 @ 0x55e501114740] mmco: unref short failure
[h264 @ 0x55e501114740] mmco: unref short failure
[h264 @ 0x556e479ed140] mmco: unref short failure
[h264 @ 0x556e479ed140] mmco: unref short failure
 76%|███████▌  | 1471/1945 [7:57:41<1:35:15, 12.06s/it][h264 @ 0x55e50673b340] mmco: unref short failure
[h264 @ 0x55e51fc4e640] mmco: unref short failure
 76%|███████▌  | 1472/1945 [7:57:49<1:24:55, 10.77s/it][h264 @ 0x55e513b81680] mmco: unref short failure
[h264 @ 0x55e513b81680] mmco: unref short failure
 76%|███████▌  | 1473/1945 [7:57:56<1:16:36,  9.74s/it][h264 @ 0x556e751d24c0] mmco: unref short failure
[h264 @ 0x556e4c03d7c0] mmco: unref short failure
[h264 @ 0x556e4c03d7c0] mmco: unref short failure
[h264 @ 0x55e501c8ba40] mmco: unref short failure
[h264 @ 0x55b7cab2f440] mmco: unref short failure
[h264 @ 0x55b7cab2f440] mmco: unref short failure
[h264 @ 0x55b7d6a68940] mmco: unref short failure
[h264 @ 0x55b7d6a68940] mmco: unref short failure
[h264 @ 0x556e4ba669c0] mmco: unref short failure
[h264 @ 0x556e4ba669c0] mmco: unref short failure
[h264 @ 0x556e4ba669c0] mmco: unref short failure
[h264 @ 0x55b7cb6abf80] mmco: unref short failure
[h264 @ 0x55b7cb6abf80] mmco: unref short failure
[h264 @ 0x55b7dc7eca80] mmco: unref short failure
[h264 @ 0x55b7dc7eca80] mmco: unref short failure
[h264 @ 0x55b7dc7eca80] mmco: unref short failure
[h264 @ 0x55b7dc7eca80] mmco: unref short failure
[h264 @ 0x556e61a26e00] mmco: unref short failure
[h264 @ 0x556e61a26e00] mmco: unref short failure
[h264 @ 0x556e4c0072c0] mmco: unref short failure
 76%|███████▌  | 1474/1945 [7:58:32<2:17:24, 17.51s/it][h264 @ 0x55b7e27309c0] mmco: unref short failure
[h264 @ 0x556e64f71b40] mmco: unref short failure
[h264 @ 0x556e68e94f40] mmco: unref short failure
[h264 @ 0x556e68e94f40] mmco: unref short failure
 76%|███████▌  | 1475/1945 [7:58:54<2:27:20, 18.81s/it][h264 @ 0x556e5e377e00] mmco: unref short failure
[h264 @ 0x556e5e377e00] mmco: unref short failure
[h264 @ 0x556e47f70540] mmco: unref short failure
[h264 @ 0x556e47f70540] mmco: unref short failure
[h264 @ 0x556e4887e4c0] mmco: unref short failure
[h264 @ 0x556e4887e4c0] mmco: unref short failure
[h264 @ 0x55e4ffb5e800] mmco: unref short failure
[h264 @ 0x55e4ffb5e800] mmco: unref short failure
 76%|███████▌  | 1476/1945 [7:59:01<1:59:57, 15.35s/it][h264 @ 0x55e5097363c0] mmco: unref short failure
 76%|███████▌  | 1477/1945 [7:59:09<1:42:43, 13.17s/it][h264 @ 0x55b7e33cc240] mmco: unref short failure
[h264 @ 0x55b7e33cc240] mmco: unref short failure
[h264 @ 0x556e4603c900] mmco: unref short failure
[h264 @ 0x55b7de166080] mmco: unref short failure
[h264 @ 0x55b7de166080] mmco: unref short failure
[h264 @ 0x556e72b74900] mmco: unref short failure
[h264 @ 0x556e72b74900] mmco: unref short failure
[h264 @ 0x556e5ddb67c0] mmco: unref short failure
 76%|███████▌  | 1478/1945 [7:59:32<2:06:19, 16.23s/it][h264 @ 0x55b7d22cc140] mmco: unref short failure
[h264 @ 0x55b7d22cc140] mmco: unref short failure
[h264 @ 0x55b7ea9ee480] mmco: unref short failure
[h264 @ 0x55b7ea9ee480] mmco: unref short failure
[h264 @ 0x556e600e9d40] mmco: unref short failure
 76%|███████▌  | 1479/1945 [7:59:51<2:11:55, 16.99s/it] 76%|███████▌  | 1480/1945 [7:59:58<1:48:04, 13.94s/it][h264 @ 0x55e513b64000] mmco: unref short failure
[h264 @ 0x55e513b64000] mmco: unref short failure
 76%|███████▌  | 1481/1945 [8:00:05<1:32:34, 11.97s/it][h264 @ 0x556e67399f00] mmco: unref short failure
[h264 @ 0x556e58d74d80] mmco: unref short failure
[h264 @ 0x55e511a42440] mmco: unref short failure
[h264 @ 0x55e511a42440] mmco: unref short failure
[h264 @ 0x556e5b814080] mmco: unref short failure
[h264 @ 0x556e5b814080] mmco: unref short failure
 76%|███████▌  | 1482/1945 [8:00:38<2:21:39, 18.36s/it][h264 @ 0x55b7cab63740] mmco: unref short failure
 76%|███████▌  | 1483/1945 [8:00:53<2:13:14, 17.31s/it][h264 @ 0x55e4fcc97980] mmco: unref short failure
[h264 @ 0x55e4fcc97980] mmco: unref short failure
 76%|███████▋  | 1484/1945 [8:01:01<1:51:05, 14.46s/it][h264 @ 0x55e4fca35a00] mmco: unref short failure
[h264 @ 0x55e501fbb180] mmco: unref short failure
[h264 @ 0x556e6ee2f900] mmco: unref short failure
[h264 @ 0x556e6ee2f900] mmco: unref short failure
 76%|███████▋  | 1485/1945 [8:01:17<1:53:28, 14.80s/it][h264 @ 0x556e5ba08e40] mmco: unref short failure
[h264 @ 0x556e5ba08e40] mmco: unref short failure
[h264 @ 0x55e505ff1c40] mmco: unref short failure
 76%|███████▋  | 1486/1945 [8:01:37<2:05:19, 16.38s/it][h264 @ 0x55b7caabca00] mmco: unref short failure
[h264 @ 0x556e42a5f5c0] mmco: unref short failure
[h264 @ 0x556e6ed3bf00] mmco: unref short failure
[h264 @ 0x556e6ed3bf00] mmco: unref short failure
[h264 @ 0x556e6a2dd5c0] mmco: unref short failure
[h264 @ 0x556e6a2dd5c0] mmco: unref short failure
[h264 @ 0x55e4fca85380] mmco: unref short failure
[h264 @ 0x55e4fca85380] mmco: unref short failure
[h264 @ 0x556e4b2ae400] mmco: unref short failure
[h264 @ 0x556e43b4b100] mmco: unref short failure
[h264 @ 0x556e42c91480] mmco: unref short failure
[h264 @ 0x556e42c91480] mmco: unref short failure
 76%|███████▋  | 1487/1945 [8:01:56<2:11:58, 17.29s/it][h264 @ 0x55b7cb489c00] mmco: unref short failure
[h264 @ 0x55b7cb489c00] mmco: unref short failure
 77%|███████▋  | 1488/1945 [8:02:03<1:47:37, 14.13s/it][h264 @ 0x556e68c45680] mmco: unref short failure
[h264 @ 0x556e68c45680] mmco: unref short failure
[h264 @ 0x55e5039e6140] mmco: unref short failure
 77%|███████▋  | 1489/1945 [8:02:10<1:31:07, 11.99s/it][h264 @ 0x55e5039e6140] mmco: unref short failure
[h264 @ 0x55e5039e6140] mmco: unref short failure
[h264 @ 0x55b7e0e49900] mmco: unref short failure
[h264 @ 0x556e6e4c0f80] mmco: unref short failure
[h264 @ 0x556e537f83c0] mmco: unref short failure
[h264 @ 0x556e42b99140] mmco: unref short failure
[h264 @ 0x55e505debd80] mmco: unref short failure
[h264 @ 0x556e58747f80] mmco: unref short failure
[h264 @ 0x556e58eead00] mmco: unref short failure
[h264 @ 0x556e58eead00] mmco: unref short failure
[h264 @ 0x556e58eead00] mmco: unref short failure
 77%|███████▋  | 1490/1945 [8:02:38<2:07:41, 16.84s/it][h264 @ 0x556e5a3ee9c0] mmco: unref short failure
[h264 @ 0x556e5a3ee9c0] mmco: unref short failure
[h264 @ 0x556e5a3ee9c0] mmco: unref short failure
[h264 @ 0x556e5a3ee9c0] mmco: unref short failure
[h264 @ 0x556e687c4d00] mmco: unref short failure
[h264 @ 0x55b7cab53300] mmco: unref short failure
 77%|███████▋  | 1491/1945 [8:02:54<2:05:01, 16.52s/it][h264 @ 0x556e581f02c0] mmco: unref short failure
[h264 @ 0x556e585ff180] mmco: unref short failure
[h264 @ 0x55e4ff21a540] mmco: unref short failure
[h264 @ 0x55e4ff21a540] mmco: unref short failure
[h264 @ 0x556e587efdc0] mmco: unref short failure
 77%|███████▋  | 1492/1945 [8:03:04<1:51:13, 14.73s/it][h264 @ 0x556e52a94240] mmco: unref short failure
[h264 @ 0x556e52a94240] mmco: unref short failure
[h264 @ 0x556e505adc00] mmco: unref short failure
[h264 @ 0x55e4fd777a00] mmco: unref short failure
[h264 @ 0x55e4fd777a00] mmco: unref short failure
 77%|███████▋  | 1493/1945 [8:03:13<1:36:23, 12.80s/it][h264 @ 0x55b7e4292140] mmco: unref short failure
[h264 @ 0x556e5839e000] mmco: unref short failure
[h264 @ 0x556e61822f40] mmco: unref short failure
[h264 @ 0x556e61822f40] mmco: unref short failure
[h264 @ 0x55b7cab2f440] mmco: unref short failure
[h264 @ 0x55b7cab2f440] mmco: unref short failure
[h264 @ 0x55e51231f140] mmco: unref short failure
[h264 @ 0x55b7db8d5740] mmco: unref short failure
[h264 @ 0x55b7db8d5740] mmco: unref short failure
[h264 @ 0x55b7caabbb00] mmco: unref short failure
[h264 @ 0x55b7caabbb00] mmco: unref short failure
[h264 @ 0x556e5c2cc540] mmco: unref short failure
 77%|███████▋  | 1494/1945 [8:03:39<2:06:22, 16.81s/it][h264 @ 0x55e51966b740] mmco: unref short failure
[h264 @ 0x55e51966b740] mmco: unref short failure
[h264 @ 0x55e51966b740] mmco: unref short failure
[h264 @ 0x55e51966b740] mmco: unref short failure
[h264 @ 0x55e4fecf2e00] mmco: unref short failure
[h264 @ 0x55e4fecf2e00] mmco: unref short failure
[h264 @ 0x556e4915ad40] mmco: unref short failure
[h264 @ 0x55b7caabbb00] mmco: unref short failure
[h264 @ 0x55b7caabbb00] mmco: unref short failure
[h264 @ 0x55b7cab2f440] mmco: unref short failure
[h264 @ 0x556e6e04c500] mmco: unref short failure
[h264 @ 0x556e6e04c500] mmco: unref short failure
[h264 @ 0x556e6e04c500] mmco: unref short failure
[h264 @ 0x556e6e04c500] mmco: unref short failure
 77%|███████▋  | 1495/1945 [8:04:07<2:31:59, 20.27s/it][h264 @ 0x55b7e80f2b80] mmco: unref short failure
[h264 @ 0x556e586e0640] mmco: unref short failure
[h264 @ 0x556e586e0640] mmco: unref short failure
[h264 @ 0x556e5432e800] mmco: unref short failure
 77%|███████▋  | 1496/1945 [8:04:15<2:03:53, 16.56s/it][h264 @ 0x556e59c89080] mmco: unref short failure
 77%|███████▋  | 1497/1945 [8:04:23<1:43:03, 13.80s/it][h264 @ 0x556e5dbded80] mmco: unref short failure
[h264 @ 0x55e4fd777a00] mmco: unref short failure
[h264 @ 0x55e4fd777a00] mmco: unref short failure
[h264 @ 0x55e4fd777a00] mmco: unref short failure
[h264 @ 0x55e4fd777a00] mmco: unref short failure
[h264 @ 0x55b7d4dac480] mmco: unref short failure
[h264 @ 0x55b7d4dac480] mmco: unref short failure
[h264 @ 0x55b7d4dac480] mmco: unref short failure
[h264 @ 0x55b7d4dac480] mmco: unref short failure
[h264 @ 0x556e5fe6b080] mmco: unref short failure
[h264 @ 0x55b7e4292140] mmco: unref short failure
[h264 @ 0x55b7e4292140] mmco: unref short failure
 77%|███████▋  | 1498/1945 [8:04:42<1:55:40, 15.53s/it][h264 @ 0x556e694cf400] mmco: unref short failure
[h264 @ 0x556e694cf400] mmco: unref short failure
[h264 @ 0x55e515536dc0] mmco: unref short failure
[h264 @ 0x55e515536dc0] mmco: unref short failure
[h264 @ 0x556e5af24540] mmco: unref short failure
 77%|███████▋  | 1499/1945 [8:05:03<2:06:26, 17.01s/it]09/09/2024 23:30:31 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 23:30:31 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b7cc17ad00] mmco: unref short failure
[h264 @ 0x55e51d08e6c0] mmco: unref short failure
[h264 @ 0x55e51d08e6c0] mmco: unref short failure
[h264 @ 0x556e5747c500] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e51201d280] mmco: unref short failure
[h264 @ 0x55e507732040] mmco: unref short failure
[h264 @ 0x55b7d54d4580] mmco: unref short failure
[h264 @ 0x55b7d54d4580] mmco: unref short failure
[h264 @ 0x556e5fe6b080] mmco: unref short failure
[h264 @ 0x55e51123b740] mmco: unref short failure
[h264 @ 0x55e51123b740] mmco: unref short failure
[h264 @ 0x556e5e8b2340] mmco: unref short failure
[h264 @ 0x556e5e8b2340] mmco: unref short failure
[h264 @ 0x556e5e8b2340] mmco: unref short failure
[h264 @ 0x556e5e8b2340] mmco: unref short failure
[h264 @ 0x55b7d02feac0] mmco: unref short failure
[h264 @ 0x55b7d02feac0] mmco: unref short failure
[h264 @ 0x55e504db7900] mmco: unref short failure
[h264 @ 0x55e504db7900] mmco: unref short failure
[h264 @ 0x556e5209e7c0] mmco: unref short failure
[h264 @ 0x556e52f5d500] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:30,  7.24it/s][A
  1%|          | 2/221 [00:00<00:26,  8.11it/s][A
  2%|▏         | 4/221 [00:00<00:20, 10.41it/s][A
  3%|▎         | 6/221 [00:00<00:24,  8.84it/s][A[h264 @ 0x556e5321b1c0] mmco: unref short failure

  3%|▎         | 7/221 [00:01<01:22,  2.60it/s][A
  4%|▎         | 8/221 [00:02<01:15,  2.82it/s][A
  4%|▍         | 9/221 [00:02<01:07,  3.15it/s][A[h264 @ 0x556e5d0884c0] mmco: unref short failure

  5%|▍         | 10/221 [00:03<01:38,  2.15it/s][A
  5%|▍         | 11/221 [00:03<01:22,  2.54it/s][A
  5%|▌         | 12/221 [00:03<01:13,  2.86it/s][A
  6%|▌         | 13/221 [00:04<01:29,  2.33it/s][A
  6%|▋         | 14/221 [00:04<01:12,  2.86it/s][A
  7%|▋         | 15/221 [00:08<05:00,  1.46s/it][A
  7%|▋         | 16/221 [00:08<03:37,  1.06s/it][A
  8%|▊         | 17/221 [00:08<02:51,  1.19it/s][A
  8%|▊         | 18/221 [00:09<02:12,  1.53it/s][A
  9%|▊         | 19/221 [00:09<01:44,  1.94it/s][A
  9%|▉         | 20/221 [00:09<01:19,  2.53it/s][A
 10%|▉         | 21/221 [00:09<01:03,  3.14it/s][A
 10%|█         | 23/221 [00:09<00:42,  4.69it/s][A
 11%|█         | 24/221 [00:09<00:36,  5.33it/s][A[h264 @ 0x556e5b5bbdc0] mmco: unref short failure
[h264 @ 0x556e5b5bbdc0] mmco: unref short failure

 11%|█▏        | 25/221 [00:10<00:35,  5.51it/s][A
 12%|█▏        | 26/221 [00:12<02:10,  1.49it/s][A
 12%|█▏        | 27/221 [00:12<01:42,  1.89it/s][A
 13%|█▎        | 28/221 [00:12<01:19,  2.42it/s][A
 13%|█▎        | 29/221 [00:12<01:03,  3.02it/s][A
 14%|█▎        | 30/221 [00:12<01:03,  3.00it/s][A
 14%|█▍        | 31/221 [00:13<01:11,  2.65it/s][A
 14%|█▍        | 32/221 [00:13<01:06,  2.82it/s][A
 15%|█▍        | 33/221 [00:13<00:54,  3.45it/s][A
 15%|█▌        | 34/221 [00:13<00:49,  3.76it/s][A
 16%|█▌        | 35/221 [00:14<00:43,  4.30it/s][A
 16%|█▋        | 36/221 [00:14<00:41,  4.46it/s][A[h264 @ 0x556e515f1b00] mmco: unref short failure
[h264 @ 0x556e515f1b00] mmco: unref short failure

 17%|█▋        | 38/221 [00:14<00:35,  5.13it/s][A
 18%|█▊        | 39/221 [00:15<00:45,  3.97it/s][A
 18%|█▊        | 40/221 [00:15<00:43,  4.14it/s][A
 19%|█▊        | 41/221 [00:15<00:42,  4.21it/s][A
 19%|█▉        | 42/221 [00:15<00:43,  4.14it/s][A[h264 @ 0x55b7de0bbc80] mmco: unref short failure

 19%|█▉        | 43/221 [00:17<02:12,  1.35it/s][A
 20%|██        | 45/221 [00:18<01:26,  2.03it/s][A[h264 @ 0x556e7522f5c0] mmco: unref short failure

 21%|██▏       | 47/221 [00:18<01:03,  2.72it/s][A
 22%|██▏       | 48/221 [00:18<00:59,  2.89it/s][A
 22%|██▏       | 49/221 [00:19<01:13,  2.34it/s][A
 23%|██▎       | 50/221 [00:19<01:05,  2.63it/s][A
 23%|██▎       | 51/221 [00:19<00:59,  2.84it/s][A
 24%|██▎       | 52/221 [00:20<00:55,  3.06it/s][A
 24%|██▍       | 53/221 [00:20<00:54,  3.07it/s][A[h264 @ 0x556e58a62c80] mmco: unref short failure

 24%|██▍       | 54/221 [00:20<00:47,  3.50it/s][A
 25%|██▍       | 55/221 [00:20<00:40,  4.13it/s][A
 25%|██▌       | 56/221 [00:21<00:42,  3.86it/s][A
 26%|██▌       | 57/221 [00:21<00:35,  4.60it/s][A
 26%|██▌       | 58/221 [00:21<00:30,  5.39it/s][A
 27%|██▋       | 60/221 [00:21<00:21,  7.39it/s][A
 28%|██▊       | 61/221 [00:21<00:24,  6.55it/s][A
 28%|██▊       | 62/221 [00:22<00:30,  5.15it/s][A
 29%|██▊       | 63/221 [00:22<00:34,  4.64it/s][A
 29%|██▉       | 64/221 [00:22<00:31,  5.00it/s][A
 29%|██▉       | 65/221 [00:22<00:42,  3.64it/s][A
 30%|██▉       | 66/221 [00:23<00:36,  4.26it/s][A
 30%|███       | 67/221 [00:23<00:31,  4.94it/s][A
 31%|███       | 68/221 [00:23<00:27,  5.66it/s][A
 32%|███▏      | 70/221 [00:23<00:25,  5.85it/s][A
 32%|███▏      | 71/221 [00:23<00:24,  6.23it/s][A
 33%|███▎      | 72/221 [00:27<02:54,  1.17s/it][A
 33%|███▎      | 73/221 [00:27<02:13,  1.11it/s][A
 33%|███▎      | 74/221 [00:28<01:43,  1.42it/s][A
 34%|███▍      | 75/221 [00:28<01:19,  1.83it/s][A
 34%|███▍      | 76/221 [00:28<01:08,  2.12it/s][A
 35%|███▍      | 77/221 [00:28<00:52,  2.75it/s][A
 35%|███▌      | 78/221 [00:28<00:42,  3.35it/s][A[h264 @ 0x556e56fe3880] mmco: unref short failure
[h264 @ 0x556e56fe3880] mmco: unref short failure

 36%|███▌      | 79/221 [00:29<00:43,  3.25it/s][A
 36%|███▌      | 80/221 [00:29<00:43,  3.22it/s][A
 37%|███▋      | 81/221 [00:29<00:39,  3.50it/s][A
 37%|███▋      | 82/221 [00:29<00:33,  4.11it/s][A
 38%|███▊      | 83/221 [00:30<00:36,  3.76it/s][A
 38%|███▊      | 84/221 [00:30<00:31,  4.39it/s][A
 38%|███▊      | 85/221 [00:30<00:29,  4.61it/s][A[h264 @ 0x556e56268e00] mmco: unref short failure
[h264 @ 0x556e56268e00] mmco: unref short failure
[h264 @ 0x556e56268e00] mmco: unref short failure
[h264 @ 0x556e56268e00] mmco: unref short failure

 39%|███▉      | 86/221 [00:34<02:45,  1.22s/it][A
 40%|███▉      | 88/221 [00:34<01:31,  1.46it/s][A
 40%|████      | 89/221 [00:34<01:12,  1.81it/s][A
 41%|████      | 90/221 [00:34<00:57,  2.30it/s][A
 42%|████▏     | 92/221 [00:34<00:36,  3.51it/s][A
 42%|████▏     | 93/221 [00:34<00:34,  3.66it/s][A
 43%|████▎     | 95/221 [00:35<00:26,  4.84it/s][A
 43%|████▎     | 96/221 [00:36<00:54,  2.28it/s][A
 44%|████▍     | 97/221 [00:36<00:49,  2.51it/s][A
 44%|████▍     | 98/221 [00:36<00:41,  2.93it/s][A
 45%|████▍     | 99/221 [00:36<00:37,  3.24it/s][A
 45%|████▌     | 100/221 [00:37<00:34,  3.49it/s][A
 46%|████▌     | 101/221 [00:37<00:35,  3.38it/s][A[h264 @ 0x55e510995a00] mmco: unref short failure

 47%|████▋     | 103/221 [00:37<00:24,  4.90it/s][A
 47%|████▋     | 104/221 [00:37<00:23,  4.90it/s][A
 48%|████▊     | 105/221 [00:38<00:25,  4.55it/s][A
 48%|████▊     | 107/221 [00:38<00:19,  5.84it/s][A
 49%|████▉     | 109/221 [00:38<00:21,  5.13it/s][A
 50%|████▉     | 110/221 [00:39<00:20,  5.35it/s][A
 50%|█████     | 111/221 [00:39<00:20,  5.31it/s][A
 51%|█████     | 113/221 [00:39<00:15,  6.93it/s][A
 52%|█████▏    | 115/221 [00:39<00:13,  7.77it/s][A
 52%|█████▏    | 116/221 [00:39<00:16,  6.45it/s][A
 53%|█████▎    | 117/221 [00:39<00:15,  6.64it/s][A
 53%|█████▎    | 118/221 [00:40<00:22,  4.66it/s][A
 54%|█████▍    | 119/221 [00:40<00:19,  5.19it/s][A
 54%|█████▍    | 120/221 [00:40<00:19,  5.23it/s][A
 55%|█████▍    | 121/221 [00:40<00:19,  5.09it/s][A
 55%|█████▌    | 122/221 [00:41<00:18,  5.24it/s][A
 56%|█████▌    | 123/221 [00:41<00:16,  5.89it/s][A
 56%|█████▌    | 124/221 [00:41<00:18,  5.27it/s][A
 57%|█████▋    | 125/221 [00:41<00:17,  5.34it/s][A[h264 @ 0x55b7d9a3dd40] mmco: unref short failure
[h264 @ 0x556e544d4f80] mmco: unref short failure

 57%|█████▋    | 126/221 [00:45<02:13,  1.41s/it][A
 58%|█████▊    | 128/221 [00:46<01:13,  1.26it/s][A
 59%|█████▉    | 130/221 [00:46<00:46,  1.97it/s][A
 59%|█████▉    | 131/221 [00:46<00:43,  2.05it/s][A
 60%|█████▉    | 132/221 [00:46<00:40,  2.19it/s][A
 60%|██████    | 133/221 [00:47<00:33,  2.63it/s][A
 61%|██████    | 135/221 [00:47<00:22,  3.74it/s][A
 62%|██████▏   | 136/221 [00:47<00:20,  4.23it/s][A
 62%|██████▏   | 137/221 [00:47<00:17,  4.74it/s][A
 63%|██████▎   | 139/221 [00:47<00:12,  6.43it/s][A
 64%|██████▍   | 141/221 [00:48<00:11,  7.12it/s][A
 65%|██████▍   | 143/221 [00:48<00:09,  8.10it/s][A
 65%|██████▌   | 144/221 [00:48<00:09,  8.12it/s][A
 66%|██████▌   | 146/221 [00:48<00:07,  9.61it/s][A
 67%|██████▋   | 148/221 [00:48<00:10,  7.07it/s][A
 68%|██████▊   | 150/221 [00:49<00:18,  3.90it/s][A
 68%|██████▊   | 151/221 [00:50<00:21,  3.19it/s][A
 69%|██████▉   | 152/221 [00:50<00:24,  2.85it/s][A
 70%|██████▉   | 154/221 [00:51<00:16,  4.00it/s][A
 71%|███████   | 156/221 [00:51<00:14,  4.54it/s][A
 71%|███████   | 157/221 [00:52<00:19,  3.34it/s][A
 71%|███████▏  | 158/221 [00:52<00:16,  3.81it/s][A
 72%|███████▏  | 159/221 [00:52<00:13,  4.43it/s][A
 72%|███████▏  | 160/221 [00:52<00:13,  4.47it/s][A
 73%|███████▎  | 161/221 [00:52<00:13,  4.49it/s][A
 73%|███████▎  | 162/221 [00:53<00:18,  3.26it/s][A
 74%|███████▍  | 163/221 [00:53<00:14,  3.88it/s][A
 74%|███████▍  | 164/221 [00:53<00:14,  4.06it/s][A
 75%|███████▌  | 166/221 [00:53<00:10,  5.24it/s][A
 76%|███████▌  | 168/221 [00:54<00:07,  6.86it/s][A
 76%|███████▋  | 169/221 [00:54<00:07,  7.29it/s][A
 77%|███████▋  | 171/221 [00:54<00:06,  7.36it/s][A
 78%|███████▊  | 172/221 [00:54<00:10,  4.63it/s][A
 78%|███████▊  | 173/221 [00:56<00:27,  1.75it/s][A
 79%|███████▊  | 174/221 [00:56<00:23,  1.97it/s][A
 79%|███████▉  | 175/221 [00:57<00:18,  2.44it/s][A
 80%|████████  | 177/221 [00:57<00:13,  3.29it/s][A
 81%|████████  | 179/221 [00:57<00:09,  4.45it/s][A
 81%|████████▏ | 180/221 [00:57<00:08,  4.77it/s][A
 82%|████████▏ | 181/221 [00:57<00:07,  5.38it/s][A
 83%|████████▎ | 183/221 [00:57<00:05,  7.54it/s][A
 84%|████████▎ | 185/221 [00:58<00:05,  6.12it/s][A
 84%|████████▍ | 186/221 [00:58<00:05,  6.29it/s][A
 85%|████████▍ | 187/221 [00:58<00:05,  5.84it/s][A
 85%|████████▌ | 188/221 [00:58<00:05,  6.05it/s][A
 86%|████████▌ | 190/221 [00:59<00:03,  7.86it/s][A
 87%|████████▋ | 192/221 [00:59<00:03,  9.11it/s][A 88%|████████▊ | 194/221 [00:59<00:08,  3.27it/s]
[h264 @ 0x556e578d9280] mmco: unref short failure
[h264 @ 0x556e578d9280] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.79it/s][A
  1%|          | 2/221 [00:00<00:57,  3.79it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.79it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.79it/s][A
  2%|▏         | 5/221 [00:01<00:56,  3.79it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.79it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.79it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.79it/s][A
  4%|▍         | 9/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.79it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.79it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.79it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 15/221 [00:03<00:54,  3.79it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.79it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.79it/s][A
  8%|▊         | 18/221 [00:04<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.79it/s][A
 10%|▉         | 21/221 [00:05<00:52,  3.79it/s][A
 10%|▉         | 22/221 [00:05<00:52,  3.79it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.79it/s][A
 11%|█         | 24/221 [00:06<00:51,  3.79it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 26/221 [00:06<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.79it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:07<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:11<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:12<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:14<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:15<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:37,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:22<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:25<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:26<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:29<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:31<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 125/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 130/221 [00:34<00:23,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:34<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.79it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.79it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 136/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.79it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 140/221 [00:36<00:21,  3.79it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.79it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.79it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.79it/s][A
 65%|██████▌   | 144/221 [00:37<00:20,  3.79it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.78it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.78it/s][A
 67%|██████▋   | 147/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.79it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.79it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 151/221 [00:39<00:18,  3.79it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.79it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.79it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.79it/s][A
 70%|███████   | 155/221 [00:40<00:17,  3.79it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.79it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.79it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 159/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.79it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.79it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 163/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.79it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:43<00:14,  3.79it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.79it/s][A
 76%|███████▌  | 168/221 [00:44<00:13,  3.79it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.79it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.79it/s][A
 79%|███████▊  | 174/221 [00:45<00:12,  3.79it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.79it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.79it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 178/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.79it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.79it/s][A
 84%|████████▎ | 185/221 [00:48<00:09,  3.79it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.79it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.79it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 189/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.79it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 193/221 [00:50<00:07,  3.79it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.79it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.79it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.79it/s][A
 89%|████████▉ | 197/221 [00:51<00:06,  3.79it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.79it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.79it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.79it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.79it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.79it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.79it/s][A
 92%|█████████▏| 204/221 [00:53<00:04,  3.79it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.79it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▍| 208/221 [00:54<00:03,  3.79it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.79it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.79it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▌| 212/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.79it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.79it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.79it/s][A
 98%|█████████▊| 216/221 [00:56<00:01,  3.79it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.79it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.79it/s][A
 99%|█████████▉| 219/221 [00:57<00:00,  3.79it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.79it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.79it/s][A100%|██████████| 221/221 [00:58<00:00,  3.79it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:29,  7.38it/s][A
  1%|          | 2/221 [00:00<00:35,  6.19it/s][A
  1%|▏         | 3/221 [00:00<00:36,  6.02it/s][A
  2%|▏         | 4/221 [00:00<00:32,  6.66it/s][A
  2%|▏         | 5/221 [00:00<00:37,  5.76it/s][A
  3%|▎         | 6/221 [00:00<00:35,  6.06it/s][A
  3%|▎         | 7/221 [00:01<00:43,  4.96it/s][A
  4%|▎         | 8/221 [00:01<00:50,  4.21it/s][A
  4%|▍         | 9/221 [00:01<00:48,  4.34it/s][A
  5%|▍         | 10/221 [00:02<01:08,  3.06it/s][A
  5%|▍         | 11/221 [00:02<01:00,  3.45it/s][A
  5%|▌         | 12/221 [00:02<00:49,  4.21it/s][A
  6%|▌         | 13/221 [00:03<01:19,  2.60it/s][A
  7%|▋         | 15/221 [00:03<00:56,  3.66it/s][A
  7%|▋         | 16/221 [00:03<00:56,  3.63it/s][A
  8%|▊         | 17/221 [00:04<01:03,  3.21it/s][A
  8%|▊         | 18/221 [00:04<01:06,  3.07it/s][A
  9%|▊         | 19/221 [00:04<01:01,  3.27it/s][A
  9%|▉         | 20/221 [00:05<00:50,  3.95it/s][A
 10%|▉         | 21/221 [00:05<00:46,  4.26it/s][A
 10%|▉         | 22/221 [00:05<00:42,  4.72it/s][A
 11%|█         | 24/221 [00:05<00:34,  5.71it/s][A
 11%|█▏        | 25/221 [00:05<00:37,  5.24it/s][A
 12%|█▏        | 26/221 [00:06<00:40,  4.83it/s][A
 12%|█▏        | 27/221 [00:06<00:52,  3.69it/s][A
 13%|█▎        | 28/221 [00:06<00:53,  3.60it/s][A
 13%|█▎        | 29/221 [00:07<00:49,  3.85it/s][A
 14%|█▎        | 30/221 [00:07<00:45,  4.19it/s][A
 14%|█▍        | 31/221 [00:07<00:42,  4.52it/s][A
 14%|█▍        | 32/221 [00:07<00:48,  3.91it/s][A
 15%|█▍        | 33/221 [00:08<00:45,  4.12it/s][A
 15%|█▌        | 34/221 [00:08<00:49,  3.81it/s][A
 16%|█▌        | 35/221 [00:08<00:53,  3.45it/s][A
 16%|█▋        | 36/221 [00:08<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:09<00:49,  3.73it/s][A
 17%|█▋        | 38/221 [00:09<00:45,  4.05it/s][A
 18%|█▊        | 39/221 [00:09<00:39,  4.60it/s][A
 18%|█▊        | 40/221 [00:09<00:50,  3.61it/s][A
 19%|█▊        | 41/221 [00:10<00:43,  4.15it/s][A
 19%|█▉        | 42/221 [00:10<00:39,  4.54it/s][A
 19%|█▉        | 43/221 [00:10<00:43,  4.05it/s][A
 20%|█▉        | 44/221 [00:10<00:37,  4.69it/s][A
 20%|██        | 45/221 [00:10<00:34,  5.11it/s][A
 21%|██        | 46/221 [00:11<00:51,  3.41it/s][A
 21%|██▏       | 47/221 [00:11<00:51,  3.37it/s][A
 22%|██▏       | 48/221 [00:12<00:51,  3.36it/s][A
 22%|██▏       | 49/221 [00:12<00:48,  3.57it/s][A
 23%|██▎       | 50/221 [00:12<00:45,  3.74it/s][A
 23%|██▎       | 51/221 [00:12<00:37,  4.57it/s][A
 24%|██▎       | 52/221 [00:12<00:35,  4.77it/s][A
 24%|██▍       | 53/221 [00:12<00:34,  4.93it/s][A
 24%|██▍       | 54/221 [00:13<00:36,  4.53it/s][A
 25%|██▍       | 55/221 [00:13<00:36,  4.53it/s][A
 25%|██▌       | 56/221 [00:13<00:33,  4.86it/s][A
 26%|██▌       | 57/221 [00:13<00:33,  4.83it/s][A
 26%|██▌       | 58/221 [00:14<00:52,  3.09it/s][A
 27%|██▋       | 59/221 [00:14<00:48,  3.32it/s][A
 28%|██▊       | 61/221 [00:14<00:36,  4.40it/s][A
 28%|██▊       | 62/221 [00:15<00:34,  4.64it/s][A
 29%|██▊       | 63/221 [00:15<00:30,  5.15it/s][A
 29%|██▉       | 64/221 [00:15<00:27,  5.69it/s][A
 29%|██▉       | 65/221 [00:15<00:24,  6.42it/s][A
 30%|██▉       | 66/221 [00:15<00:35,  4.37it/s][A
 30%|███       | 67/221 [00:16<01:07,  2.29it/s][A
 31%|███       | 68/221 [00:17<00:55,  2.77it/s][A
 31%|███       | 69/221 [00:17<01:01,  2.47it/s][A
 32%|███▏      | 70/221 [00:17<00:50,  2.99it/s][A
 32%|███▏      | 71/221 [00:17<00:46,  3.21it/s][A
 33%|███▎      | 72/221 [00:18<00:47,  3.15it/s][A
 33%|███▎      | 73/221 [00:18<00:40,  3.64it/s][A
 33%|███▎      | 74/221 [00:18<00:35,  4.14it/s][A
 34%|███▍      | 75/221 [00:18<00:33,  4.38it/s][A
 34%|███▍      | 76/221 [00:19<00:33,  4.39it/s][A
 35%|███▍      | 77/221 [00:19<00:27,  5.26it/s][A
 35%|███▌      | 78/221 [00:19<00:25,  5.63it/s][A
 36%|███▌      | 79/221 [00:19<00:42,  3.37it/s][A
 36%|███▌      | 80/221 [00:20<00:38,  3.69it/s][A
 37%|███▋      | 81/221 [00:20<00:35,  3.93it/s][A
 37%|███▋      | 82/221 [00:20<00:35,  3.93it/s][A
 38%|███▊      | 83/221 [00:20<00:33,  4.12it/s][A
 38%|███▊      | 84/221 [00:21<00:31,  4.31it/s][A
 38%|███▊      | 85/221 [00:21<00:32,  4.14it/s][A
 39%|███▉      | 86/221 [00:21<00:28,  4.68it/s][A
 39%|███▉      | 87/221 [00:21<00:28,  4.72it/s][A
 40%|███▉      | 88/221 [00:22<00:35,  3.76it/s][A
 40%|████      | 89/221 [00:22<00:41,  3.20it/s][A
 41%|████      | 90/221 [00:22<00:39,  3.31it/s][A
 41%|████      | 91/221 [00:22<00:33,  3.88it/s][A
 42%|████▏     | 92/221 [00:23<00:35,  3.66it/s][A
 42%|████▏     | 93/221 [00:24<01:16,  1.68it/s][A
 43%|████▎     | 94/221 [00:25<01:11,  1.79it/s][A
 43%|████▎     | 95/221 [00:25<00:57,  2.19it/s][A
 43%|████▎     | 96/221 [00:25<00:45,  2.72it/s][A
 44%|████▍     | 97/221 [00:25<00:37,  3.30it/s][A
 44%|████▍     | 98/221 [00:25<00:29,  4.12it/s][A
 45%|████▍     | 99/221 [00:25<00:30,  4.01it/s][A
 45%|████▌     | 100/221 [00:26<00:30,  3.94it/s][A
 46%|████▌     | 101/221 [00:26<00:40,  2.94it/s][A
 46%|████▌     | 102/221 [00:27<00:49,  2.40it/s][A
 47%|████▋     | 103/221 [00:27<00:49,  2.39it/s][A
 47%|████▋     | 104/221 [00:27<00:42,  2.74it/s][A
 48%|████▊     | 105/221 [00:28<00:35,  3.23it/s][A
 48%|████▊     | 106/221 [00:28<00:32,  3.56it/s][A
 48%|████▊     | 107/221 [00:28<00:31,  3.64it/s][A
 49%|████▉     | 108/221 [00:28<00:27,  4.10it/s][A
 49%|████▉     | 109/221 [00:28<00:24,  4.53it/s][A
 50%|████▉     | 110/221 [00:29<00:24,  4.47it/s][A
 50%|█████     | 111/221 [00:29<00:27,  4.01it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.88it/s][A
 51%|█████     | 113/221 [00:29<00:24,  4.34it/s][A
 52%|█████▏    | 114/221 [00:30<00:20,  5.21it/s][A
 52%|█████▏    | 115/221 [00:30<00:23,  4.51it/s][A
 52%|█████▏    | 116/221 [00:30<00:26,  3.90it/s][A
 53%|█████▎    | 117/221 [00:30<00:22,  4.60it/s][A
 53%|█████▎    | 118/221 [00:31<00:22,  4.52it/s][A
 54%|█████▍    | 119/221 [00:31<00:38,  2.64it/s][A
 54%|█████▍    | 120/221 [00:32<00:34,  2.94it/s][A
 55%|█████▍    | 121/221 [00:32<00:26,  3.71it/s][A
 55%|█████▌    | 122/221 [00:32<00:25,  3.95it/s][A
 56%|█████▌    | 123/221 [00:32<00:28,  3.50it/s][A
 56%|█████▌    | 124/221 [00:32<00:24,  3.99it/s][A
 57%|█████▋    | 125/221 [00:33<00:27,  3.47it/s][A
 57%|█████▋    | 126/221 [00:33<00:29,  3.23it/s][A
 57%|█████▋    | 127/221 [00:33<00:30,  3.07it/s][A
 58%|█████▊    | 128/221 [00:34<00:27,  3.36it/s][A
 58%|█████▊    | 129/221 [00:34<00:28,  3.26it/s][A
 59%|█████▉    | 130/221 [00:34<00:23,  3.86it/s][A
 60%|█████▉    | 132/221 [00:34<00:14,  5.98it/s][A
 60%|██████    | 133/221 [00:35<00:16,  5.23it/s][A
 61%|██████    | 134/221 [00:35<00:16,  5.31it/s][A
 61%|██████    | 135/221 [00:35<00:15,  5.55it/s][A
 62%|██████▏   | 136/221 [00:35<00:16,  5.03it/s][A
 62%|██████▏   | 137/221 [00:35<00:15,  5.58it/s][A
 62%|██████▏   | 138/221 [00:36<00:15,  5.27it/s][A
 63%|██████▎   | 139/221 [00:36<00:25,  3.16it/s][A
 63%|██████▎   | 140/221 [00:36<00:23,  3.49it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.67it/s][A
 64%|██████▍   | 142/221 [00:37<00:19,  4.12it/s][A
 65%|██████▍   | 143/221 [00:37<00:28,  2.70it/s][A
 65%|██████▌   | 144/221 [00:38<00:33,  2.30it/s][A
 66%|██████▌   | 145/221 [00:38<00:27,  2.72it/s][A
 66%|██████▌   | 146/221 [00:38<00:21,  3.47it/s][A
 67%|██████▋   | 147/221 [00:39<00:20,  3.56it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.68it/s][A
 68%|██████▊   | 150/221 [00:39<00:17,  4.09it/s][A
 68%|██████▊   | 151/221 [00:40<00:22,  3.12it/s][A
 69%|██████▉   | 152/221 [00:40<00:28,  2.40it/s][A
 69%|██████▉   | 153/221 [00:41<00:24,  2.74it/s][A
 70%|██████▉   | 154/221 [00:41<00:20,  3.21it/s][A
 70%|███████   | 155/221 [00:41<00:18,  3.58it/s][A
 71%|███████   | 156/221 [00:42<00:21,  3.00it/s][A
 71%|███████   | 157/221 [00:42<00:19,  3.37it/s][A
 71%|███████▏  | 158/221 [00:42<00:18,  3.34it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.83it/s][A
 72%|███████▏  | 160/221 [00:43<00:16,  3.76it/s][A
 73%|███████▎  | 161/221 [00:43<00:19,  3.05it/s][A
 73%|███████▎  | 162/221 [00:43<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.70it/s][A
 74%|███████▍  | 164/221 [00:44<00:17,  3.29it/s][A
 75%|███████▍  | 165/221 [00:44<00:14,  3.83it/s][A
 75%|███████▌  | 166/221 [00:44<00:14,  3.76it/s][A
 76%|███████▌  | 168/221 [00:45<00:14,  3.74it/s][A
 76%|███████▋  | 169/221 [00:45<00:12,  4.03it/s][A
 77%|███████▋  | 170/221 [00:46<00:16,  3.00it/s][A
 77%|███████▋  | 171/221 [00:46<00:13,  3.67it/s][A
 78%|███████▊  | 172/221 [00:46<00:11,  4.33it/s][A
 78%|███████▊  | 173/221 [00:46<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:47<00:20,  2.33it/s][A
 79%|███████▉  | 175/221 [00:47<00:16,  2.73it/s][A
 80%|███████▉  | 176/221 [00:47<00:14,  3.04it/s][A
 80%|████████  | 177/221 [00:48<00:12,  3.63it/s][A
 81%|████████  | 178/221 [00:48<00:09,  4.33it/s][A
 81%|████████  | 179/221 [00:48<00:09,  4.33it/s][A
 81%|████████▏ | 180/221 [00:48<00:08,  4.72it/s][A
 82%|████████▏ | 181/221 [00:48<00:10,  3.96it/s][A
 82%|████████▏ | 182/221 [00:49<00:08,  4.43it/s][A
 83%|████████▎ | 183/221 [00:49<00:08,  4.57it/s][A
 83%|████████▎ | 184/221 [00:49<00:07,  5.23it/s][A
 84%|████████▎ | 185/221 [00:49<00:06,  5.25it/s][A
 84%|████████▍ | 186/221 [00:50<00:09,  3.82it/s][A
 85%|████████▍ | 187/221 [00:50<00:07,  4.28it/s][A
 85%|████████▌ | 188/221 [00:50<00:07,  4.21it/s][A
 86%|████████▌ | 189/221 [00:50<00:07,  4.23it/s][A
 86%|████████▌ | 190/221 [00:51<00:08,  3.63it/s][A
 86%|████████▋ | 191/221 [00:51<00:07,  4.13it/s][A
 87%|████████▋ | 192/221 [00:51<00:09,  3.18it/s][A
 87%|████████▋ | 193/221 [00:51<00:07,  3.51it/s][A
 88%|████████▊ | 194/221 [00:52<00:07,  3.40it/s][A
 88%|████████▊ | 195/221 [00:52<00:07,  3.68it/s][A
 89%|████████▊ | 196/221 [00:53<00:08,  2.91it/s][A
 89%|████████▉ | 197/221 [00:53<00:06,  3.66it/s][A
 90%|████████▉ | 198/221 [00:53<00:09,  2.38it/s][A
 90%|█████████ | 199/221 [00:54<00:07,  2.82it/s][A
 90%|█████████ | 200/221 [00:54<00:07,  2.94it/s][A
 91%|█████████ | 201/221 [00:54<00:06,  3.17it/s][A
 91%|█████████▏| 202/221 [00:55<00:06,  2.79it/s][A
 92%|█████████▏| 204/221 [00:55<00:06,  2.75it/s][A
 93%|█████████▎| 205/221 [00:55<00:04,  3.27it/s][A
 93%|█████████▎| 206/221 [00:56<00:04,  3.28it/s][A
 94%|█████████▎| 207/221 [00:56<00:04,  3.36it/s][A
 95%|█████████▍| 209/221 [00:56<00:03,  3.94it/s][A
 95%|█████████▌| 210/221 [00:57<00:02,  3.86it/s][A
 95%|█████████▌| 211/221 [00:57<00:02,  3.59it/s][A
 96%|█████████▌| 212/221 [00:57<00:02,  3.55it/s][A
 96%|█████████▋| 213/221 [00:58<00:02,  3.47it/s][A
 97%|█████████▋| 214/221 [00:58<00:02,  2.83it/s][A
 97%|█████████▋| 215/221 [00:58<00:01,  3.07it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  3.03it/s][A
 98%|█████████▊| 217/221 [00:59<00:01,  3.34it/s][A
 99%|█████████▊| 218/221 [00:59<00:00,  3.20it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  2.90it/s][A
100%|█████████▉| 220/221 [01:00<00:00,  2.93it/s][A
100%|██████████| 221/221 [01:00<00:00,  2.84it/s][A100%|██████████| 221/221 [01:00<00:00,  3.62it/s]
09/09/2024 23:36:14 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 1499--===========

09/09/2024 23:36:14 - INFO - __main__ -   {'area_r1': 15.0, 'area_recall': '15.0/31.8/42.4', 'area_ravg': 29.8}
09/09/2024 23:36:14 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 1499--===========

09/09/2024 23:36:14 - INFO - __main__ -   {'forward_r1': 33.1, 'forward_recall': '33.1/57.8/67.6', 'forward_ravg': 52.9}
09/09/2024 23:36:14 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 1499--===========

09/09/2024 23:36:14 - INFO - __main__ -   {'area_video_r1': 42.4, 'area_video_recall': '42.4/70.2/80.2', 'area_video_ravg': 64.3}
09/09/2024 23:36:14 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 1199=======

09/09/2024 23:36:14 - INFO - __main__ -   {'area_video_r1': 42.6, 'area_video_recall': '42.6/70.6/80.1', 'area_video_ravg': 64.4}
09/09/2024 23:36:14 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 1499--===========

09/09/2024 23:36:14 - INFO - __main__ -   {'area_video_r1': 44.1, 'area_video_recall': '44.1/60.2/65.4', 'area_video_ravg': 56.6, 'area_video_back_r1': 49.1, 'area_video_back_recall': '49.1/71.7/79.6', 'area_video_back_ravg': 66.8}
09/09/2024 23:36:14 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 23:36:14 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 23:36:14 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 1499--===========

09/09/2024 23:36:14 - INFO - __main__ -   {'video_r1': 39.8, 'video_recall': '39.8/67.9/79.1', 'video_ravg': 62.3}
09/09/2024 23:36:14 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 23:36:14 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 23:36:14 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 1499--===========

09/09/2024 23:36:14 - INFO - __main__ -   {'video_r1': 51.6, 'video_recall': '51.6/74.5/81.9', 'video_ravg': 69.3}
09/09/2024 23:36:14 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 1049=======

09/09/2024 23:36:14 - INFO - __main__ -   {'video_r1': 52.9, 'video_recall': '52.9/74.5/82.8', 'video_ravg': 70.1}
09/09/2024 23:36:35 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.5329205989837646, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.02457067370414734, 'loss_ret%tv%ta--finetune_area/loss_area': 1.263227939605713, 'loss_ret%tv%ta--finetune_area/total_loss': 2.8207192420959473}
 77%|███████▋  | 1500/1945 [8:11:09<15:04:39, 121.98s/it][h264 @ 0x556e5faa47c0] mmco: unref short failure
[h264 @ 0x556e5f3ce240] mmco: unref short failure
[h264 @ 0x556e5f3ce240] mmco: unref short failure
[h264 @ 0x556e5f3ce240] mmco: unref short failure
[h264 @ 0x556e5f3ce240] mmco: unref short failure
[h264 @ 0x55e5154a5cc0] mmco: unref short failure
[h264 @ 0x55e5154a5cc0] mmco: unref short failure
 77%|███████▋  | 1501/1945 [8:11:13<10:40:51, 86.60s/it] [h264 @ 0x55e4fecc6a80] mmco: unref short failure
[h264 @ 0x55e4fecc6a80] mmco: unref short failure
[h264 @ 0x55e4fecc6a80] mmco: unref short failure
[h264 @ 0x55e4fecc6a80] mmco: unref short failure
[h264 @ 0x55e4fecc6a80] mmco: unref short failure
[h264 @ 0x55e4fecc6a80] mmco: unref short failure
 77%|███████▋  | 1502/1945 [8:11:18<7:38:05, 62.04s/it] [h264 @ 0x556e656e0780] mmco: unref short failure
[h264 @ 0x55e50a213200] mmco: unref short failure
 77%|███████▋  | 1503/1945 [8:11:24<5:32:45, 45.17s/it] 77%|███████▋  | 1504/1945 [8:11:29<4:03:32, 33.13s/it] 77%|███████▋  | 1505/1945 [8:11:36<3:04:42, 25.19s/it][h264 @ 0x556e43b0de80] mmco: unref short failure
[h264 @ 0x556e43b0de80] mmco: unref short failure
 77%|███████▋  | 1506/1945 [8:11:42<2:23:05, 19.56s/it][h264 @ 0x556e51271f80] mmco: unref short failure
 77%|███████▋  | 1507/1945 [8:11:49<1:55:46, 15.86s/it][h264 @ 0x556e4edba840] mmco: unref short failure
[h264 @ 0x556e54ba19c0] mmco: unref short failure
 78%|███████▊  | 1508/1945 [8:11:57<1:36:54, 13.31s/it] 78%|███████▊  | 1509/1945 [8:12:04<1:22:45, 11.39s/it][h264 @ 0x55b7e35a7c00] mmco: unref short failure
[h264 @ 0x556e6d52c900] mmco: unref short failure
[h264 @ 0x556e6d52c900] mmco: unref short failure
[h264 @ 0x556e6048a600] mmco: unref short failure
[h264 @ 0x556e6048a600] mmco: unref short failure
 78%|███████▊  | 1510/1945 [8:12:12<1:15:23, 10.40s/it][h264 @ 0x556e6a0f3700] mmco: unref short failure
[h264 @ 0x556e6a0f3700] mmco: unref short failure
[h264 @ 0x556e4528aa00] mmco: unref short failure
[h264 @ 0x556e4528aa00] mmco: unref short failure
[h264 @ 0x55b7caaccac0] mmco: unref short failure
[h264 @ 0x55b7caaccac0] mmco: unref short failure
[h264 @ 0x55e51a96f200] mmco: unref short failure
 78%|███████▊  | 1511/1945 [8:12:19<1:08:07,  9.42s/it][h264 @ 0x55e51a96f200] mmco: unref short failure
[h264 @ 0x55b7d0bbc900] mmco: unref short failure
[h264 @ 0x55b7d0bbc900] mmco: unref short failure
[h264 @ 0x55e51a96f200] mmco: unref short failure
[h264 @ 0x55b7d0bbc900] mmco: unref short failure
[h264 @ 0x55b7d0bbc900] mmco: unref short failure
 78%|███████▊  | 1512/1945 [8:12:26<1:02:38,  8.68s/it][h264 @ 0x55e51adf7e00] mmco: unref short failure
[h264 @ 0x55e51adf7e00] mmco: unref short failure
 78%|███████▊  | 1513/1945 [8:12:34<1:02:14,  8.65s/it][h264 @ 0x556e44533e80] mmco: unref short failure
[h264 @ 0x556e44533e80] mmco: unref short failure
[h264 @ 0x556e6ffe7500] mmco: unref short failure
[h264 @ 0x556e6ffe7500] mmco: unref short failure
[h264 @ 0x556e4927c6c0] mmco: unref short failure
 78%|███████▊  | 1514/1945 [8:12:42<59:25,  8.27s/it]  [h264 @ 0x55b7cbd6e600] mmco: unref short failure
[h264 @ 0x55b7cbd6e600] mmco: unref short failure
[h264 @ 0x55e511586e40] mmco: unref short failure
 78%|███████▊  | 1515/1945 [8:12:49<57:05,  7.97s/it][h264 @ 0x55b7cb389b00] mmco: unref short failure
[h264 @ 0x556e68d07040] mmco: unref short failure
[h264 @ 0x556e68d07040] mmco: unref short failure
 78%|███████▊  | 1516/1945 [8:12:56<54:51,  7.67s/it][h264 @ 0x556e4c78b0c0] mmco: unref short failure
[h264 @ 0x556e4c78b0c0] mmco: unref short failure
[h264 @ 0x556e4c78b0c0] mmco: unref short failure
 78%|███████▊  | 1517/1945 [8:13:03<53:58,  7.57s/it][h264 @ 0x55e504626880] mmco: unref short failure
[h264 @ 0x55e504626880] mmco: unref short failure
 78%|███████▊  | 1518/1945 [8:13:11<53:37,  7.53s/it][h264 @ 0x55b7d34ddb80] mmco: unref short failure
[h264 @ 0x55b7d34ddb80] mmco: unref short failure
[h264 @ 0x55b7cf7e87c0] mmco: unref short failure
[h264 @ 0x55b7cf7e87c0] mmco: unref short failure
[h264 @ 0x556e4b490200] mmco: unref short failure
[h264 @ 0x556e4b490200] mmco: unref short failure
 78%|███████▊  | 1519/1945 [8:13:18<53:19,  7.51s/it][h264 @ 0x556e56737a80] mmco: unref short failure
[h264 @ 0x556e5e4f0180] mmco: unref short failure
[h264 @ 0x556e49630540] mmco: unref short failure
[h264 @ 0x556e49630540] mmco: unref short failure
[h264 @ 0x55e503d8f7c0] mmco: unref short failure
[h264 @ 0x55e503d8f7c0] mmco: unref short failure
[h264 @ 0x55e503d8f7c0] mmco: unref short failure
[h264 @ 0x55e503d8f7c0] mmco: unref short failure
[h264 @ 0x556e436f4c80] mmco: unref short failure
 78%|███████▊  | 1520/1945 [8:13:37<1:16:33, 10.81s/it][h264 @ 0x55e501deca80] mmco: unref short failure
[h264 @ 0x55e519397480] mmco: unref short failure
 78%|███████▊  | 1521/1945 [8:13:44<1:08:56,  9.76s/it][h264 @ 0x556e51271f80] mmco: unref short failure
[h264 @ 0x556e51271f80] mmco: unref short failure
[h264 @ 0x556e687a0880] mmco: unref short failure
 78%|███████▊  | 1522/1945 [8:13:52<1:05:54,  9.35s/it][h264 @ 0x55b7d2d64640] mmco: unref short failure
[h264 @ 0x55e5102ee200] mmco: unref short failure
[h264 @ 0x55e5102ee200] mmco: unref short failure
 78%|███████▊  | 1523/1945 [8:14:01<1:03:11,  8.98s/it][h264 @ 0x55e51dd3d580] mmco: unref short failure
[h264 @ 0x55b7d9a3dd40] mmco: unref short failure
[h264 @ 0x55b7e0c271c0] mmco: unref short failure
[h264 @ 0x55e508b6a100] mmco: unref short failure
[h264 @ 0x55e508b6a100] mmco: unref short failure
[h264 @ 0x556e551ef680] mmco: unref short failure
[h264 @ 0x556e551ef680] mmco: unref short failure
[h264 @ 0x55b7cb9ecb00] mmco: unref short failure
[h264 @ 0x55b7d9a3dd40] mmco: unref short failure
[h264 @ 0x55b7d9a3dd40] mmco: unref short failure
[h264 @ 0x55b7cc2baa00] mmco: unref short failure
[h264 @ 0x55b7cc2baa00] mmco: unref short failure
[h264 @ 0x556e69ad5900] mmco: unref short failure
[h264 @ 0x556e69ad5900] mmco: unref short failure
[h264 @ 0x55b7eb317000] mmco: unref short failure
[h264 @ 0x556e6e43e8c0] mmco: unref short failure
[h264 @ 0x556e6e43e8c0] mmco: unref short failure
[h264 @ 0x556e5bda5e40] mmco: unref short failure
[h264 @ 0x556e5bda5e40] mmco: unref short failure
[h264 @ 0x55e50bdea8c0] mmco: unref short failure
[h264 @ 0x55e51cb21380] mmco: unref short failure
[h264 @ 0x55e51cb21380] mmco: unref short failure
 78%|███████▊  | 1524/1945 [8:14:53<2:35:02, 22.10s/it][h264 @ 0x556e4d10d380] mmco: unref short failure
[h264 @ 0x556e5febaa00] mmco: unref short failure
[h264 @ 0x556e5febaa00] mmco: unref short failure
[h264 @ 0x55e503a48580] mmco: unref short failure
 78%|███████▊  | 1525/1945 [8:15:01<2:03:33, 17.65s/it][h264 @ 0x556e5e4f0180] mmco: unref short failure
[h264 @ 0x556e5b30c340] mmco: unref short failure
[h264 @ 0x556e5b30c340] mmco: unref short failure
 78%|███████▊  | 1526/1945 [8:15:17<1:59:57, 17.18s/it][h264 @ 0x556e586a2b00] mmco: unref short failure
[h264 @ 0x556e586a2b00] mmco: unref short failure
[h264 @ 0x55e4fd02c240] mmco: unref short failure
 79%|███████▊  | 1527/1945 [8:15:28<1:47:19, 15.40s/it][h264 @ 0x55e506106540] mmco: unref short failure
[h264 @ 0x55e506106540] mmco: unref short failure
 79%|███████▊  | 1528/1945 [8:15:41<1:43:08, 14.84s/it][h264 @ 0x556e53585640] mmco: unref short failure
 79%|███████▊  | 1529/1945 [8:15:50<1:29:49, 12.96s/it] 79%|███████▊  | 1530/1945 [8:15:57<1:17:45, 11.24s/it][h264 @ 0x55e51cb21380] mmco: unref short failure
[h264 @ 0x55e4fdebd580] mmco: unref short failure
 79%|███████▊  | 1531/1945 [8:16:10<1:21:14, 11.77s/it][h264 @ 0x55b7d315b6c0] mmco: unref short failure
[h264 @ 0x55b7d315b6c0] mmco: unref short failure
[h264 @ 0x556e5df33dc0] mmco: unref short failure
[h264 @ 0x556e5df33dc0] mmco: unref short failure
[h264 @ 0x55e4fde2e180] mmco: unref short failure
[h264 @ 0x55e4fde2e180] mmco: unref short failure
[h264 @ 0x556e56490140] mmco: unref short failure
[h264 @ 0x556e5af24540] mmco: unref short failure
[h264 @ 0x556e5af24540] mmco: unref short failure
[h264 @ 0x556e5af24540] mmco: unref short failure
[h264 @ 0x556e5af24540] mmco: unref short failure
[h264 @ 0x55e506fe1340] mmco: unref short failure
[h264 @ 0x55e506fe1340] mmco: unref short failure
[h264 @ 0x55e506fe1340] mmco: unref short failure
[h264 @ 0x556e59459a00] mmco: unref short failure
[h264 @ 0x556e59459a00] mmco: unref short failure
[h264 @ 0x556e54ba19c0] mmco: unref short failure
[h264 @ 0x556e54ba19c0] mmco: unref short failure
[h264 @ 0x55e50e5ba7c0] mmco: unref short failure
[h264 @ 0x55e50e5ba7c0] mmco: unref short failure
[h264 @ 0x556e4828f8c0] mmco: unref short failure
[h264 @ 0x556e4b762400] mmco: unref short failure
[h264 @ 0x55e50fc0b540] mmco: unref short failure
 79%|███████▉  | 1532/1945 [8:17:02<2:44:15, 23.86s/it][h264 @ 0x55e5068ea500] mmco: unref short failure
[h264 @ 0x55e5068ea500] mmco: unref short failure
[h264 @ 0x55e5068ea500] mmco: unref short failure
 79%|███████▉  | 1533/1945 [8:17:09<2:08:14, 18.68s/it][h264 @ 0x55b7e1a22b00] mmco: unref short failure
[h264 @ 0x55b7e1a22b00] mmco: unref short failure
[h264 @ 0x55e51aae5c80] mmco: unref short failure
[h264 @ 0x55e51aae5c80] mmco: unref short failure
 79%|███████▉  | 1534/1945 [8:17:16<1:45:03, 15.34s/it][h264 @ 0x55b7d2cb6d80] mmco: unref short failure
[h264 @ 0x556e6180f480] mmco: unref short failure
[h264 @ 0x556e6180f480] mmco: unref short failure
 79%|███████▉  | 1535/1945 [8:17:26<1:33:41, 13.71s/it][h264 @ 0x556e57b73380] mmco: unref short failure
[h264 @ 0x556e62179940] mmco: unref short failure
[h264 @ 0x556e62179940] mmco: unref short failure
[h264 @ 0x556e43116f80] mmco: unref short failure
[h264 @ 0x556e43116f80] mmco: unref short failure
[h264 @ 0x55e50e02e7c0] mmco: unref short failure
[h264 @ 0x55e50e02e7c0] mmco: unref short failure
[h264 @ 0x55e50e02e7c0] mmco: unref short failure
[h264 @ 0x556e6b44a4c0] mmco: unref short failure
[h264 @ 0x556e6b44a4c0] mmco: unref short failure
[h264 @ 0x556e6b44a4c0] mmco: unref short failure
 79%|███████▉  | 1536/1945 [8:17:53<1:58:54, 17.44s/it] 79%|███████▉  | 1537/1945 [8:17:59<1:36:37, 14.21s/it][h264 @ 0x55b7cb3fee80] mmco: unref short failure
[h264 @ 0x55e5114f8680] mmco: unref short failure
 79%|███████▉  | 1538/1945 [8:18:06<1:21:55, 12.08s/it][h264 @ 0x556e450f2480] mmco: unref short failure
[h264 @ 0x556e450f2480] mmco: unref short failure
[h264 @ 0x556e450f2480] mmco: unref short failure
[h264 @ 0x556e450f2480] mmco: unref short failure
[h264 @ 0x556e61a51080] mmco: unref short failure
[h264 @ 0x556e61a51080] mmco: unref short failure
[h264 @ 0x55b7dc6c3a00] mmco: unref short failure
[h264 @ 0x55b7dc6c3a00] mmco: unref short failure
 79%|███████▉  | 1539/1945 [8:18:18<1:20:00, 11.82s/it][h264 @ 0x55e514ef4c80] mmco: unref short failure
[h264 @ 0x55e514ef4c80] mmco: unref short failure
[h264 @ 0x55b7e1f4c180] mmco: unref short failure
[h264 @ 0x556e5b30c340] mmco: unref short failure
[h264 @ 0x55b7caac0840] mmco: unref short failure
[h264 @ 0x55b7caac0840] mmco: unref short failure
[h264 @ 0x556e44c55c00] mmco: unref short failure
[h264 @ 0x556e44c55c00] mmco: unref short failure
[h264 @ 0x556e52c71000] mmco: unref short failure
[h264 @ 0x556e52c71000] mmco: unref short failure
[h264 @ 0x556e52c71000] mmco: unref short failure
[h264 @ 0x556e52c71000] mmco: unref short failure
[h264 @ 0x55e517541600] mmco: unref short failure
[h264 @ 0x55e517541600] mmco: unref short failure
[h264 @ 0x55e51c88f880] mmco: unref short failure
[h264 @ 0x55e51c88f880] mmco: unref short failure
[h264 @ 0x55b7caabca00] mmco: unref short failure
[h264 @ 0x55b7caabca00] mmco: unref short failure
[h264 @ 0x556e42c61b40] mmco: unref short failure
[h264 @ 0x55e50e02e7c0] mmco: unref short failure
 79%|███████▉  | 1540/1945 [8:19:01<2:24:30, 21.41s/it][h264 @ 0x556e512fa440] mmco: unref short failure
[h264 @ 0x55b7e8120a80] mmco: unref short failure
[h264 @ 0x55b7e73381c0] mmco: unref short failure
[h264 @ 0x55b7e73381c0] mmco: unref short failure
[h264 @ 0x55b7e73381c0] mmco: unref short failure
[h264 @ 0x55b7e73381c0] mmco: unref short failure
 79%|███████▉  | 1541/1945 [8:19:09<1:56:44, 17.34s/it][h264 @ 0x55b7caac0840] mmco: unref short failure
[h264 @ 0x55b7caac0840] mmco: unref short failure
 79%|███████▉  | 1542/1945 [8:19:20<1:43:53, 15.47s/it] 79%|███████▉  | 1543/1945 [8:19:28<1:27:16, 13.03s/it][h264 @ 0x556e68c4ff00] mmco: unref short failure
[h264 @ 0x55b7ccaf9440] mmco: unref short failure
[h264 @ 0x55b7ccaf9440] mmco: unref short failure
[h264 @ 0x556e52d768c0] mmco: unref short failure
[h264 @ 0x556e52d768c0] mmco: unref short failure
 79%|███████▉  | 1544/1945 [8:20:00<2:05:52, 18.83s/it] 79%|███████▉  | 1545/1945 [8:20:07<1:41:31, 15.23s/it][h264 @ 0x55e517f98b80] mmco: unref short failure
[h264 @ 0x55e517f98b80] mmco: unref short failure
 79%|███████▉  | 1546/1945 [8:20:13<1:24:01, 12.63s/it] 80%|███████▉  | 1547/1945 [8:20:22<1:16:22, 11.51s/it][h264 @ 0x556e64d0b080] mmco: unref short failure
[h264 @ 0x556e58ae7740] mmco: unref short failure
[h264 @ 0x556e58ae7740] mmco: unref short failure
[h264 @ 0x556e58ae7740] mmco: unref short failure
[h264 @ 0x556e58ae7740] mmco: unref short failure
[h264 @ 0x556e5c1cf480] mmco: unref short failure
[h264 @ 0x556e5c1cf480] mmco: unref short failure
[h264 @ 0x556e5c1cf480] mmco: unref short failure
[h264 @ 0x556e5c1cf480] mmco: unref short failure
[h264 @ 0x55e501b6c440] mmco: unref short failure
[h264 @ 0x55e501b6c440] mmco: unref short failure
[h264 @ 0x55e517f91f00] mmco: unref short failure
[h264 @ 0x55e517f91f00] mmco: unref short failure
 80%|███████▉  | 1548/1945 [8:21:00<2:08:52, 19.48s/it][h264 @ 0x55e5114f8680] mmco: unref short failure
 80%|███████▉  | 1549/1945 [8:21:07<1:42:34, 15.54s/it]09/09/2024 23:46:35 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/09/2024 23:46:35 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e506e7d680] mmco: unref short failure
[h264 @ 0x55e506e7d680] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(

  0%|          | 0/221 [00:00<?, ?it/s][A
  1%|▏         | 3/221 [00:00<00:07, 28.43it/s][A
  3%|▎         | 7/221 [00:01<00:46,  4.60it/s][A
  4%|▍         | 9/221 [00:01<00:37,  5.67it/s][A
  5%|▍         | 11/221 [00:02<01:00,  3.48it/s][A
  6%|▌         | 13/221 [00:03<01:11,  2.90it/s][A
  6%|▋         | 14/221 [00:03<01:03,  3.26it/s][A
  7%|▋         | 15/221 [00:08<03:59,  1.16s/it][A
  8%|▊         | 17/221 [00:08<02:41,  1.27it/s][A
 10%|▉         | 21/221 [00:08<01:21,  2.45it/s][A
 11%|█         | 24/221 [00:08<00:54,  3.59it/s][A
 12%|█▏        | 26/221 [00:08<00:44,  4.34it/s][A
 13%|█▎        | 29/221 [00:09<00:39,  4.80it/s][A
 14%|█▍        | 31/221 [00:09<00:35,  5.32it/s][A
 15%|█▍        | 33/221 [00:09<00:32,  5.84it/s][A
 15%|█▌        | 34/221 [00:10<00:30,  6.16it/s][A
 17%|█▋        | 38/221 [00:10<00:18, 10.07it/s][A
 19%|█▉        | 42/221 [00:10<00:18,  9.94it/s][A
 20%|██        | 45/221 [00:10<00:15, 11.23it/s][A
 21%|██▏       | 47/221 [00:11<00:28,  6.05it/s][A
 23%|██▎       | 50/221 [00:11<00:24,  6.89it/s][A
 24%|██▎       | 52/221 [00:12<00:23,  7.29it/s][A
 24%|██▍       | 54/221 [00:12<00:19,  8.58it/s][A
 26%|██▌       | 57/221 [00:12<00:15, 10.27it/s][A
 27%|██▋       | 59/221 [00:13<00:22,  7.15it/s][A
 28%|██▊       | 61/221 [00:13<00:28,  5.70it/s][A
 29%|██▊       | 63/221 [00:13<00:23,  6.85it/s][A
 29%|██▉       | 65/221 [00:13<00:21,  7.33it/s][A
 30%|███       | 67/221 [00:14<00:24,  6.35it/s][A
 31%|███       | 68/221 [00:14<00:23,  6.51it/s][A
 32%|███▏      | 71/221 [00:14<00:22,  6.73it/s][A
 33%|███▎      | 73/221 [00:15<00:17,  8.24it/s][A
 34%|███▍      | 75/221 [00:15<00:26,  5.45it/s][A
 34%|███▍      | 76/221 [00:15<00:26,  5.43it/s][A
 35%|███▌      | 78/221 [00:15<00:20,  7.00it/s][A
 37%|███▋      | 81/221 [00:16<00:16,  8.49it/s][A
 38%|███▊      | 83/221 [00:20<01:30,  1.52it/s][A
 39%|███▉      | 86/221 [00:20<00:58,  2.30it/s][A
 40%|███▉      | 88/221 [00:20<00:44,  2.96it/s][A
 41%|████      | 90/221 [00:20<00:36,  3.56it/s][A
 42%|████▏     | 92/221 [00:22<00:49,  2.58it/s][A
 42%|████▏     | 93/221 [00:22<00:49,  2.59it/s][A
 43%|████▎     | 95/221 [00:22<00:35,  3.60it/s][A
 43%|████▎     | 96/221 [00:22<00:34,  3.66it/s][A
 44%|████▍     | 97/221 [00:23<00:32,  3.83it/s][A
 45%|████▌     | 100/221 [00:23<00:21,  5.73it/s][A
 46%|████▌     | 101/221 [00:23<00:23,  5.04it/s][A
 47%|████▋     | 103/221 [00:23<00:19,  6.12it/s][A
 48%|████▊     | 105/221 [00:24<00:18,  6.25it/s][A
 48%|████▊     | 107/221 [00:24<00:16,  6.79it/s][A
 50%|████▉     | 110/221 [00:24<00:12,  9.07it/s][A
 51%|█████     | 112/221 [00:24<00:13,  8.22it/s][A
 51%|█████     | 113/221 [00:25<00:12,  8.45it/s][A
 52%|█████▏    | 114/221 [00:25<00:20,  5.24it/s][A
 52%|█████▏    | 116/221 [00:25<00:15,  6.92it/s][A
 53%|█████▎    | 118/221 [00:25<00:11,  8.67it/s][A
 54%|█████▍    | 120/221 [00:25<00:11,  8.67it/s][A
 55%|█████▌    | 122/221 [00:30<01:18,  1.26it/s][A
 57%|█████▋    | 125/221 [00:30<00:46,  2.05it/s][A
 57%|█████▋    | 127/221 [00:30<00:38,  2.46it/s][A
 58%|█████▊    | 129/221 [00:31<00:32,  2.83it/s][A
 59%|█████▉    | 131/221 [00:31<00:24,  3.66it/s][A
 60%|██████    | 133/221 [00:31<00:18,  4.70it/s][A
 61%|██████    | 135/221 [00:31<00:14,  6.00it/s][A
 63%|██████▎   | 139/221 [00:31<00:08,  9.61it/s][A
 64%|██████▍   | 141/221 [00:32<00:07, 10.17it/s][A
 65%|██████▍   | 143/221 [00:32<00:08,  9.54it/s][A
 66%|██████▌   | 145/221 [00:33<00:17,  4.29it/s][A
 67%|██████▋   | 147/221 [00:34<00:24,  2.99it/s][A
 67%|██████▋   | 149/221 [00:34<00:19,  3.72it/s][A
 68%|██████▊   | 150/221 [00:35<00:23,  3.00it/s][A
 68%|██████▊   | 151/221 [00:35<00:20,  3.35it/s][A
 69%|██████▉   | 153/221 [00:35<00:14,  4.59it/s][A
 70%|██████▉   | 154/221 [00:36<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:37<00:19,  3.31it/s][A
 72%|███████▏  | 160/221 [00:37<00:10,  6.01it/s][A
 73%|███████▎  | 162/221 [00:37<00:08,  6.60it/s][A
 74%|███████▍  | 164/221 [00:39<00:24,  2.32it/s][A
 75%|███████▍  | 165/221 [00:40<00:22,  2.45it/s][A
 75%|███████▌  | 166/221 [00:40<00:19,  2.86it/s][A
 76%|███████▌  | 168/221 [00:40<00:14,  3.63it/s][A
 77%|███████▋  | 170/221 [00:40<00:10,  4.78it/s][A
 77%|███████▋  | 171/221 [00:40<00:10,  4.95it/s][A
 79%|███████▊  | 174/221 [00:41<00:08,  5.87it/s][A
 79%|███████▉  | 175/221 [00:41<00:07,  6.10it/s][A
 80%|████████  | 177/221 [00:41<00:06,  7.24it/s][A
 81%|████████  | 179/221 [00:41<00:04,  8.44it/s][A
 82%|████████▏ | 181/221 [00:41<00:04,  9.51it/s][A 82%|████████▏ | 182/221 [00:41<00:08,  4.35it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.78it/s][A
  1%|          | 2/221 [00:00<00:57,  3.78it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.78it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.79it/s][A
  2%|▏         | 5/221 [00:01<00:56,  3.79it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.79it/s][A
  3%|▎         | 7/221 [00:01<00:56,  3.79it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.79it/s][A
  4%|▍         | 9/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.79it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.79it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.79it/s][A
  6%|▌         | 13/221 [00:03<01:09,  2.97it/s][A
  6%|▋         | 14/221 [00:03<01:05,  3.18it/s][A
  7%|▋         | 15/221 [00:04<01:01,  3.34it/s][A
  7%|▋         | 16/221 [00:04<00:59,  3.46it/s][A
  8%|▊         | 17/221 [00:04<00:57,  3.56it/s][A
  8%|▊         | 18/221 [00:04<00:56,  3.62it/s][A
  9%|▊         | 19/221 [00:05<00:54,  3.67it/s][A
  9%|▉         | 20/221 [00:05<00:54,  3.71it/s][A
 10%|▉         | 21/221 [00:05<00:53,  3.73it/s][A
 10%|▉         | 22/221 [00:06<00:53,  3.75it/s][A
 10%|█         | 23/221 [00:06<00:52,  3.76it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.77it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.78it/s][A
 12%|█▏        | 26/221 [00:07<00:51,  3.78it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.79it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.79it/s][A
 14%|█▎        | 30/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.79it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:09<00:49,  3.79it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.79it/s][A
 16%|█▋        | 36/221 [00:09<00:48,  3.79it/s][A
 17%|█▋        | 37/221 [00:10<00:48,  3.79it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.79it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:11<00:46,  3.79it/s][A
 20%|██        | 45/221 [00:12<00:46,  3.79it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.79it/s][A
 21%|██▏       | 47/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 48/221 [00:12<00:45,  3.79it/s][A
 22%|██▏       | 49/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 50/221 [00:13<00:45,  3.79it/s][A
 23%|██▎       | 51/221 [00:13<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:13<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:14<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:14<00:44,  3.79it/s][A
 25%|██▍       | 55/221 [00:14<00:43,  3.79it/s][A
 25%|██▌       | 56/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 57/221 [00:15<00:43,  3.79it/s][A
 26%|██▌       | 58/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 59/221 [00:15<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 61/221 [00:16<00:42,  3.79it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.79it/s][A
 29%|██▊       | 63/221 [00:16<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:17<00:41,  3.79it/s][A
 29%|██▉       | 65/221 [00:17<00:41,  3.79it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.79it/s][A
 30%|███       | 67/221 [00:17<00:40,  3.79it/s][A
 31%|███       | 68/221 [00:18<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:18<00:40,  3.79it/s][A
 32%|███▏      | 70/221 [00:18<00:39,  3.79it/s][A
 32%|███▏      | 71/221 [00:18<00:39,  3.79it/s][A
 33%|███▎      | 72/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 73/221 [00:19<00:39,  3.79it/s][A
 33%|███▎      | 74/221 [00:19<00:38,  3.79it/s][A
 34%|███▍      | 75/221 [00:20<00:38,  3.79it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:37,  3.79it/s][A
 35%|███▌      | 78/221 [00:20<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:21<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:21<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 86/221 [00:22<00:35,  3.79it/s][A
 39%|███▉      | 87/221 [00:23<00:35,  3.79it/s][A
 40%|███▉      | 88/221 [00:23<00:35,  3.79it/s][A
 40%|████      | 89/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 90/221 [00:23<00:34,  3.79it/s][A
 41%|████      | 91/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 92/221 [00:24<00:34,  3.79it/s][A
 42%|████▏     | 93/221 [00:24<00:33,  3.79it/s][A
 43%|████▎     | 94/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 95/221 [00:25<00:33,  3.79it/s][A
 43%|████▎     | 96/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 97/221 [00:25<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:26<00:32,  3.79it/s][A
 45%|████▍     | 99/221 [00:26<00:32,  3.79it/s][A
 45%|████▌     | 100/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:26<00:31,  3.79it/s][A
 46%|████▌     | 102/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 103/221 [00:27<00:31,  3.79it/s][A
 47%|████▋     | 104/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 105/221 [00:27<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:28<00:30,  3.79it/s][A
 48%|████▊     | 107/221 [00:28<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:28<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:28<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:29<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:29<00:29,  3.79it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.79it/s][A
 51%|█████     | 113/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 114/221 [00:30<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:30<00:27,  3.79it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.79it/s][A
 53%|█████▎    | 117/221 [00:31<00:27,  3.79it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:31<00:26,  3.79it/s][A
 54%|█████▍    | 120/221 [00:31<00:26,  3.79it/s][A
 55%|█████▍    | 121/221 [00:32<00:26,  3.79it/s][A
 55%|█████▌    | 122/221 [00:32<00:26,  3.79it/s][A
 56%|█████▌    | 123/221 [00:32<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.79it/s][A
 57%|█████▋    | 125/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 126/221 [00:33<00:25,  3.79it/s][A
 57%|█████▋    | 127/221 [00:33<00:24,  3.79it/s][A
 58%|█████▊    | 128/221 [00:34<00:24,  3.79it/s][A
 58%|█████▊    | 129/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 130/221 [00:34<00:24,  3.79it/s][A
 59%|█████▉    | 131/221 [00:34<00:23,  3.79it/s][A
 60%|█████▉    | 132/221 [00:35<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:35<00:23,  3.79it/s][A
 61%|██████    | 134/221 [00:35<00:22,  3.79it/s][A
 61%|██████    | 135/221 [00:35<00:22,  3.79it/s][A
 62%|██████▏   | 136/221 [00:36<00:22,  3.79it/s][A
 62%|██████▏   | 137/221 [00:36<00:22,  3.79it/s][A
 62%|██████▏   | 138/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 139/221 [00:36<00:21,  3.79it/s][A
 63%|██████▎   | 140/221 [00:37<00:21,  3.79it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.79it/s][A
 64%|██████▍   | 142/221 [00:37<00:20,  3.79it/s][A
 65%|██████▍   | 143/221 [00:37<00:20,  3.79it/s][A
 65%|██████▌   | 144/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 145/221 [00:38<00:20,  3.79it/s][A
 66%|██████▌   | 146/221 [00:38<00:19,  3.79it/s][A
 67%|██████▋   | 147/221 [00:39<00:19,  3.79it/s][A
 67%|██████▋   | 148/221 [00:39<00:19,  3.79it/s][A
 67%|██████▋   | 149/221 [00:39<00:19,  3.79it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.79it/s][A
 68%|██████▊   | 151/221 [00:40<00:18,  3.79it/s][A
 69%|██████▉   | 152/221 [00:40<00:18,  3.79it/s][A
 69%|██████▉   | 153/221 [00:40<00:17,  3.79it/s][A
 70%|██████▉   | 154/221 [00:40<00:17,  3.79it/s][A
 70%|███████   | 155/221 [00:41<00:17,  3.79it/s][A
 71%|███████   | 156/221 [00:41<00:17,  3.79it/s][A
 71%|███████   | 157/221 [00:41<00:16,  3.79it/s][A
 71%|███████▏  | 158/221 [00:41<00:16,  3.79it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.79it/s][A
 72%|███████▏  | 160/221 [00:42<00:16,  3.79it/s][A
 73%|███████▎  | 161/221 [00:42<00:15,  3.79it/s][A
 73%|███████▎  | 162/221 [00:42<00:15,  3.79it/s][A
 74%|███████▍  | 163/221 [00:43<00:15,  3.79it/s][A
 74%|███████▍  | 164/221 [00:43<00:15,  3.79it/s][A
 75%|███████▍  | 165/221 [00:43<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [00:44<00:14,  3.79it/s][A
 76%|███████▌  | 167/221 [00:44<00:14,  3.79it/s][A
 76%|███████▌  | 168/221 [00:44<00:13,  3.79it/s][A
 76%|███████▋  | 169/221 [00:44<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:45<00:13,  3.79it/s][A
 77%|███████▋  | 171/221 [00:45<00:13,  3.79it/s][A
 78%|███████▊  | 172/221 [00:45<00:12,  3.79it/s][A
 78%|███████▊  | 173/221 [00:45<00:12,  3.79it/s][A
 79%|███████▊  | 174/221 [00:46<00:12,  3.79it/s][A
 79%|███████▉  | 175/221 [00:46<00:12,  3.79it/s][A
 80%|███████▉  | 176/221 [00:46<00:11,  3.79it/s][A
 80%|████████  | 177/221 [00:46<00:11,  3.79it/s][A
 81%|████████  | 178/221 [00:47<00:11,  3.79it/s][A
 81%|████████  | 179/221 [00:47<00:11,  3.79it/s][A
 81%|████████▏ | 180/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 181/221 [00:47<00:10,  3.79it/s][A
 82%|████████▏ | 182/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 183/221 [00:48<00:10,  3.79it/s][A
 83%|████████▎ | 184/221 [00:48<00:09,  3.79it/s][A
 84%|████████▎ | 185/221 [00:49<00:09,  3.79it/s][A
 84%|████████▍ | 186/221 [00:49<00:09,  3.79it/s][A
 85%|████████▍ | 187/221 [00:49<00:08,  3.79it/s][A
 85%|████████▌ | 188/221 [00:49<00:08,  3.79it/s][A
 86%|████████▌ | 189/221 [00:50<00:08,  3.79it/s][A
 86%|████████▌ | 190/221 [00:50<00:08,  3.79it/s][A
 86%|████████▋ | 191/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 192/221 [00:50<00:07,  3.79it/s][A
 87%|████████▋ | 193/221 [00:51<00:07,  3.79it/s][A
 88%|████████▊ | 194/221 [00:51<00:07,  3.79it/s][A
 88%|████████▊ | 195/221 [00:51<00:06,  3.79it/s][A
 89%|████████▊ | 196/221 [00:51<00:06,  3.79it/s][A
 89%|████████▉ | 197/221 [00:52<00:06,  3.79it/s][A
 90%|████████▉ | 198/221 [00:52<00:06,  3.79it/s][A
 90%|█████████ | 199/221 [00:52<00:05,  3.79it/s][A
 90%|█████████ | 200/221 [00:52<00:05,  3.79it/s][A
 91%|█████████ | 201/221 [00:53<00:05,  3.79it/s][A
 91%|█████████▏| 202/221 [00:53<00:05,  3.79it/s][A
 92%|█████████▏| 203/221 [00:53<00:04,  3.79it/s][A
 92%|█████████▏| 204/221 [00:54<00:04,  3.79it/s][A
 93%|█████████▎| 205/221 [00:54<00:04,  3.79it/s][A
 93%|█████████▎| 206/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▎| 207/221 [00:54<00:03,  3.79it/s][A
 94%|█████████▍| 208/221 [00:55<00:03,  3.79it/s][A
 95%|█████████▍| 209/221 [00:55<00:03,  3.79it/s][A
 95%|█████████▌| 210/221 [00:55<00:02,  3.79it/s][A
 95%|█████████▌| 211/221 [00:55<00:02,  3.79it/s][A
 96%|█████████▌| 212/221 [00:56<00:02,  3.79it/s][A
 96%|█████████▋| 213/221 [00:56<00:02,  3.79it/s][A
 97%|█████████▋| 214/221 [00:56<00:01,  3.79it/s][A
 97%|█████████▋| 215/221 [00:56<00:01,  3.79it/s][A
 98%|█████████▊| 216/221 [00:57<00:01,  3.79it/s][A
 98%|█████████▊| 217/221 [00:57<00:01,  3.79it/s][A
 99%|█████████▊| 218/221 [00:57<00:00,  3.79it/s][A
 99%|█████████▉| 219/221 [00:58<00:00,  3.79it/s][A
100%|█████████▉| 220/221 [00:58<00:00,  3.79it/s][A
100%|██████████| 221/221 [00:58<00:00,  3.79it/s][A100%|██████████| 221/221 [00:58<00:00,  3.78it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:27,  7.95it/s][A
  1%|          | 2/221 [00:00<00:36,  5.92it/s][A
  1%|▏         | 3/221 [00:00<00:39,  5.48it/s][A
  2%|▏         | 4/221 [00:00<00:34,  6.24it/s][A
  2%|▏         | 5/221 [00:00<00:38,  5.61it/s][A
  3%|▎         | 6/221 [00:01<00:36,  5.87it/s][A
  3%|▎         | 7/221 [00:01<00:44,  4.82it/s][A
  4%|▎         | 8/221 [00:01<00:51,  4.17it/s][A
  4%|▍         | 9/221 [00:01<00:48,  4.34it/s][A
  5%|▍         | 10/221 [00:02<01:08,  3.08it/s][A
  5%|▍         | 11/221 [00:02<01:01,  3.44it/s][A
  5%|▌         | 12/221 [00:02<00:49,  4.20it/s][A
  6%|▌         | 13/221 [00:03<01:18,  2.64it/s][A
  7%|▋         | 15/221 [00:03<00:56,  3.67it/s][A
  7%|▋         | 16/221 [00:03<00:56,  3.65it/s][A
  8%|▊         | 17/221 [00:04<01:00,  3.37it/s][A
  8%|▊         | 18/221 [00:04<01:02,  3.23it/s][A
  9%|▊         | 19/221 [00:04<00:58,  3.47it/s][A
  9%|▉         | 20/221 [00:05<00:48,  4.14it/s][A
 10%|▉         | 21/221 [00:05<00:45,  4.37it/s][A
 10%|▉         | 22/221 [00:05<00:41,  4.82it/s][A
 11%|█         | 24/221 [00:05<00:34,  5.72it/s][A
 11%|█▏        | 25/221 [00:05<00:37,  5.16it/s][A
 12%|█▏        | 26/221 [00:06<00:40,  4.79it/s][A
 12%|█▏        | 27/221 [00:06<00:53,  3.60it/s][A
 13%|█▎        | 28/221 [00:06<00:52,  3.65it/s][A
 13%|█▎        | 29/221 [00:07<00:50,  3.84it/s][A
 14%|█▎        | 30/221 [00:07<00:45,  4.18it/s][A
 14%|█▍        | 31/221 [00:07<00:42,  4.46it/s][A
 14%|█▍        | 32/221 [00:07<00:50,  3.77it/s][A
 15%|█▍        | 33/221 [00:08<00:47,  4.00it/s][A
 15%|█▌        | 34/221 [00:08<00:50,  3.74it/s][A
 16%|█▌        | 35/221 [00:08<00:54,  3.43it/s][A
 16%|█▋        | 36/221 [00:08<00:49,  3.75it/s][A
 17%|█▋        | 37/221 [00:09<00:49,  3.71it/s][A
 17%|█▋        | 38/221 [00:09<00:46,  3.97it/s][A
 18%|█▊        | 39/221 [00:09<00:40,  4.53it/s][A
 18%|█▊        | 40/221 [00:09<00:50,  3.58it/s][A
 19%|█▊        | 41/221 [00:10<00:43,  4.10it/s][A
 19%|█▉        | 42/221 [00:10<00:39,  4.48it/s][A
 19%|█▉        | 43/221 [00:10<00:44,  3.99it/s][A
 20%|█▉        | 44/221 [00:10<00:39,  4.49it/s][A
 20%|██        | 45/221 [00:10<00:35,  4.92it/s][A
 21%|██        | 46/221 [00:11<00:53,  3.25it/s][A
 21%|██▏       | 47/221 [00:11<00:53,  3.27it/s][A
 22%|██▏       | 48/221 [00:12<00:51,  3.33it/s][A
 22%|██▏       | 49/221 [00:12<00:48,  3.52it/s][A
 23%|██▎       | 50/221 [00:12<00:46,  3.65it/s][A
 23%|██▎       | 51/221 [00:12<00:39,  4.33it/s][A
 24%|██▎       | 52/221 [00:12<00:36,  4.60it/s][A
 24%|██▍       | 53/221 [00:13<00:36,  4.64it/s][A
 24%|██▍       | 54/221 [00:13<00:38,  4.38it/s][A
 25%|██▍       | 55/221 [00:13<00:37,  4.39it/s][A
 25%|██▌       | 56/221 [00:13<00:34,  4.74it/s][A
 26%|██▌       | 57/221 [00:13<00:34,  4.77it/s][A
 26%|██▌       | 58/221 [00:14<00:54,  3.01it/s][A
 27%|██▋       | 59/221 [00:14<00:49,  3.30it/s][A
 28%|██▊       | 61/221 [00:15<00:36,  4.40it/s][A
 28%|██▊       | 62/221 [00:15<00:34,  4.59it/s][A
 29%|██▊       | 63/221 [00:15<00:31,  5.10it/s][A
 29%|██▉       | 64/221 [00:15<00:28,  5.57it/s][A
 29%|██▉       | 65/221 [00:15<00:26,  5.85it/s][A
 30%|██▉       | 66/221 [00:16<00:37,  4.16it/s][A
 30%|███       | 67/221 [00:17<01:12,  2.13it/s][A
 31%|███       | 68/221 [00:17<00:58,  2.62it/s][A
 31%|███       | 69/221 [00:17<01:04,  2.37it/s][A
 32%|███▏      | 70/221 [00:18<00:52,  2.90it/s][A
 32%|███▏      | 71/221 [00:18<00:47,  3.15it/s][A
 33%|███▎      | 72/221 [00:18<00:46,  3.19it/s][A
 33%|███▎      | 73/221 [00:18<00:40,  3.63it/s][A
 33%|███▎      | 74/221 [00:18<00:35,  4.14it/s][A
 34%|███▍      | 75/221 [00:19<00:32,  4.43it/s][A
 34%|███▍      | 76/221 [00:19<00:32,  4.43it/s][A
 35%|███▍      | 77/221 [00:19<00:27,  5.27it/s][A
 35%|███▌      | 78/221 [00:19<00:26,  5.40it/s][A
 36%|███▌      | 79/221 [00:20<00:41,  3.42it/s][A
 36%|███▌      | 80/221 [00:20<00:37,  3.73it/s][A
 37%|███▋      | 81/221 [00:20<00:35,  3.97it/s][A
 37%|███▋      | 82/221 [00:20<00:34,  4.06it/s][A
 38%|███▊      | 83/221 [00:21<00:33,  4.16it/s][A
 38%|███▊      | 84/221 [00:21<00:30,  4.44it/s][A
 38%|███▊      | 85/221 [00:21<00:32,  4.12it/s][A
 39%|███▉      | 86/221 [00:21<00:28,  4.82it/s][A
 39%|███▉      | 87/221 [00:21<00:26,  4.98it/s][A
 40%|███▉      | 88/221 [00:22<00:33,  3.93it/s][A
 40%|████      | 89/221 [00:22<00:39,  3.30it/s][A
 41%|████      | 90/221 [00:22<00:39,  3.33it/s][A
 41%|████      | 91/221 [00:23<00:33,  3.89it/s][A
 42%|████▏     | 92/221 [00:23<00:34,  3.74it/s][A
 42%|████▏     | 93/221 [00:24<01:14,  1.71it/s][A
 43%|████▎     | 94/221 [00:25<01:10,  1.81it/s][A
 43%|████▎     | 95/221 [00:25<00:56,  2.22it/s][A
 43%|████▎     | 96/221 [00:25<00:44,  2.81it/s][A
 44%|████▍     | 97/221 [00:25<00:36,  3.36it/s][A
 44%|████▍     | 98/221 [00:25<00:29,  4.17it/s][A
 45%|████▍     | 99/221 [00:26<00:29,  4.07it/s][A
 45%|████▌     | 100/221 [00:26<00:29,  4.04it/s][A
 46%|████▌     | 101/221 [00:26<00:38,  3.14it/s][A
 46%|████▌     | 102/221 [00:27<00:47,  2.51it/s][A
 47%|████▋     | 103/221 [00:27<00:45,  2.58it/s][A
 47%|████▋     | 104/221 [00:27<00:39,  2.98it/s][A
 48%|████▊     | 105/221 [00:28<00:33,  3.46it/s][A
 48%|████▊     | 106/221 [00:28<00:30,  3.75it/s][A
 48%|████▊     | 107/221 [00:28<00:29,  3.80it/s][A
 49%|████▉     | 108/221 [00:28<00:26,  4.24it/s][A
 49%|████▉     | 109/221 [00:28<00:24,  4.60it/s][A
 50%|████▉     | 110/221 [00:29<00:25,  4.35it/s][A
 50%|█████     | 111/221 [00:29<00:27,  4.01it/s][A
 51%|█████     | 112/221 [00:29<00:28,  3.80it/s][A
 51%|█████     | 113/221 [00:29<00:25,  4.29it/s][A
 52%|█████▏    | 114/221 [00:30<00:20,  5.14it/s][A
 52%|█████▏    | 115/221 [00:30<00:24,  4.42it/s][A
 52%|█████▏    | 116/221 [00:30<00:27,  3.82it/s][A
 53%|█████▎    | 117/221 [00:30<00:24,  4.31it/s][A
 53%|█████▎    | 118/221 [00:31<00:23,  4.32it/s][A
 54%|█████▍    | 119/221 [00:31<00:39,  2.60it/s][A
 54%|█████▍    | 120/221 [00:32<00:34,  2.95it/s][A
 55%|█████▍    | 121/221 [00:32<00:27,  3.70it/s][A
 55%|█████▌    | 122/221 [00:32<00:25,  3.94it/s][A
 56%|█████▌    | 123/221 [00:32<00:29,  3.31it/s][A
 56%|█████▌    | 124/221 [00:32<00:25,  3.88it/s][A
 57%|█████▋    | 125/221 [00:33<00:27,  3.44it/s][A
 57%|█████▋    | 126/221 [00:33<00:28,  3.31it/s][A
 57%|█████▋    | 127/221 [00:34<00:30,  3.11it/s][A
 58%|█████▊    | 128/221 [00:34<00:27,  3.40it/s][A
 58%|█████▊    | 129/221 [00:34<00:28,  3.25it/s][A
 59%|█████▉    | 130/221 [00:34<00:23,  3.93it/s][A
 60%|█████▉    | 132/221 [00:34<00:14,  6.03it/s][A
 60%|██████    | 133/221 [00:35<00:16,  5.35it/s][A
 61%|██████    | 134/221 [00:35<00:16,  5.33it/s][A
 61%|██████    | 135/221 [00:35<00:15,  5.60it/s][A
 62%|██████▏   | 136/221 [00:35<00:16,  5.06it/s][A
 62%|██████▏   | 137/221 [00:35<00:15,  5.56it/s][A
 62%|██████▏   | 138/221 [00:36<00:15,  5.30it/s][A
 63%|██████▎   | 139/221 [00:36<00:25,  3.25it/s][A
 63%|██████▎   | 140/221 [00:36<00:22,  3.58it/s][A
 64%|██████▍   | 141/221 [00:37<00:21,  3.74it/s][A
 64%|██████▍   | 142/221 [00:37<00:18,  4.19it/s][A
 65%|██████▍   | 143/221 [00:37<00:29,  2.65it/s][A
 65%|██████▌   | 144/221 [00:38<00:35,  2.15it/s][A
 66%|██████▌   | 145/221 [00:38<00:30,  2.53it/s][A
 67%|██████▋   | 147/221 [00:39<00:21,  3.38it/s][A
 67%|██████▋   | 148/221 [00:39<00:20,  3.57it/s][A
 67%|██████▋   | 149/221 [00:39<00:16,  4.27it/s][A
 68%|██████▊   | 150/221 [00:39<00:18,  3.90it/s][A
 68%|██████▊   | 151/221 [00:40<00:24,  2.81it/s][A
 69%|██████▉   | 152/221 [00:41<00:31,  2.18it/s][A
 69%|██████▉   | 153/221 [00:41<00:26,  2.55it/s][A
 70%|██████▉   | 154/221 [00:41<00:21,  3.07it/s][A
 70%|███████   | 155/221 [00:41<00:19,  3.43it/s][A
 71%|███████   | 156/221 [00:42<00:22,  2.85it/s][A
 71%|███████   | 157/221 [00:42<00:19,  3.27it/s][A
 71%|███████▏  | 158/221 [00:42<00:19,  3.24it/s][A
 72%|███████▏  | 159/221 [00:42<00:16,  3.72it/s][A
 72%|███████▏  | 160/221 [00:43<00:16,  3.68it/s][A
 73%|███████▎  | 161/221 [00:43<00:20,  2.91it/s][A
 73%|███████▎  | 162/221 [00:43<00:17,  3.45it/s][A
 74%|███████▍  | 163/221 [00:44<00:15,  3.72it/s][A
 74%|███████▍  | 164/221 [00:44<00:16,  3.41it/s][A
 75%|███████▍  | 165/221 [00:44<00:14,  3.83it/s][A
 75%|███████▌  | 166/221 [00:44<00:14,  3.73it/s][A
 76%|███████▌  | 168/221 [00:45<00:13,  3.80it/s][A
 76%|███████▋  | 169/221 [00:45<00:12,  4.08it/s][A
 77%|███████▋  | 170/221 [00:46<00:16,  3.02it/s][A
 77%|███████▋  | 171/221 [00:46<00:13,  3.65it/s][A
 78%|███████▊  | 172/221 [00:46<00:11,  4.18it/s][A
 78%|███████▊  | 173/221 [00:46<00:14,  3.29it/s][A
 79%|███████▊  | 174/221 [00:47<00:20,  2.24it/s][A
 79%|███████▉  | 175/221 [00:47<00:17,  2.64it/s][A
 80%|███████▉  | 176/221 [00:48<00:15,  2.98it/s][A
 80%|████████  | 177/221 [00:48<00:12,  3.64it/s][A
 81%|████████  | 178/221 [00:48<00:09,  4.43it/s][A
 81%|████████  | 179/221 [00:48<00:09,  4.40it/s][A
 81%|████████▏ | 180/221 [00:48<00:08,  4.78it/s][A
 82%|████████▏ | 181/221 [00:49<00:10,  3.90it/s][A
 82%|████████▏ | 182/221 [00:49<00:08,  4.42it/s][A
 83%|████████▎ | 183/221 [00:49<00:08,  4.66it/s][A
 83%|████████▎ | 184/221 [00:49<00:07,  5.28it/s][A
 84%|████████▎ | 185/221 [00:49<00:07,  5.13it/s][A
 84%|████████▍ | 186/221 [00:50<00:09,  3.79it/s][A
 85%|████████▍ | 187/221 [00:50<00:07,  4.31it/s][A
 85%|████████▌ | 188/221 [00:50<00:07,  4.27it/s][A
 86%|████████▌ | 189/221 [00:50<00:07,  4.27it/s][A
 86%|████████▌ | 190/221 [00:51<00:08,  3.74it/s][A
 86%|████████▋ | 191/221 [00:51<00:07,  4.17it/s][A
 87%|████████▋ | 192/221 [00:51<00:09,  3.15it/s][A
 87%|████████▋ | 193/221 [00:52<00:08,  3.49it/s][A
 88%|████████▊ | 194/221 [00:52<00:07,  3.50it/s][A
 88%|████████▊ | 195/221 [00:52<00:06,  3.81it/s][A
 89%|████████▊ | 196/221 [00:53<00:07,  3.15it/s][A
 89%|████████▉ | 197/221 [00:53<00:06,  3.88it/s][A
 90%|████████▉ | 198/221 [00:54<00:09,  2.35it/s][A
 90%|█████████ | 199/221 [00:54<00:07,  2.85it/s][A
 90%|█████████ | 200/221 [00:54<00:07,  2.91it/s][A
 91%|█████████ | 201/221 [00:54<00:06,  3.14it/s][A
 91%|█████████▏| 202/221 [00:55<00:07,  2.71it/s][A
 92%|█████████▏| 204/221 [00:56<00:06,  2.73it/s][A
 93%|█████████▎| 205/221 [00:56<00:04,  3.25it/s][A
 93%|█████████▎| 206/221 [00:56<00:04,  3.27it/s][A
 94%|█████████▎| 207/221 [00:56<00:04,  3.39it/s][A
 95%|█████████▍| 209/221 [00:57<00:03,  3.85it/s][A
 95%|█████████▌| 210/221 [00:57<00:02,  3.89it/s][A
 95%|█████████▌| 211/221 [00:57<00:02,  3.61it/s][A
 96%|█████████▌| 212/221 [00:58<00:02,  3.50it/s][A
 96%|█████████▋| 213/221 [00:58<00:02,  3.48it/s][A
 97%|█████████▋| 214/221 [00:58<00:02,  2.95it/s][A
 97%|█████████▋| 215/221 [00:59<00:01,  3.17it/s][A
 98%|█████████▊| 216/221 [00:59<00:01,  3.07it/s][A
 98%|█████████▊| 217/221 [00:59<00:01,  3.39it/s][A
 99%|█████████▊| 218/221 [00:59<00:00,  3.27it/s][A
 99%|█████████▉| 219/221 [01:00<00:00,  2.96it/s][A
100%|█████████▉| 220/221 [01:00<00:00,  2.99it/s][A
100%|██████████| 221/221 [01:01<00:00,  2.85it/s][A100%|██████████| 221/221 [01:01<00:00,  3.62it/s]
09/09/2024 23:51:35 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_forward=====step 1549--===========

09/09/2024 23:51:35 - INFO - __main__ -   {'area_r1': 14.3, 'area_recall': '14.3/28.6/40.6', 'area_ravg': 27.8}
09/09/2024 23:51:35 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_backard=====step 1549--===========

09/09/2024 23:51:35 - INFO - __main__ -   {'forward_r1': 33.9, 'forward_recall': '33.9/58.0/68.9', 'forward_ravg': 53.6}
09/09/2024 23:51:35 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video=====step 1549--===========

09/09/2024 23:51:35 - INFO - __main__ -   {'area_video_r1': 42.2, 'area_video_recall': '42.2/70.5/80.2', 'area_video_ravg': 64.3}
09/09/2024 23:51:35 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_area_back_with_video====history best step: 1199=======

09/09/2024 23:51:35 - INFO - __main__ -   {'area_video_r1': 42.6, 'area_video_recall': '42.6/70.6/80.1', 'area_video_ravg': 64.4}
09/09/2024 23:51:35 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_area=====step 1549--===========

09/09/2024 23:51:35 - INFO - __main__ -   {'area_video_r1': 41.5, 'area_video_recall': '41.5/56.8/62.2', 'area_video_ravg': 53.5, 'area_video_back_r1': 49.9, 'area_video_back_recall': '49.9/72.1/79.9', 'area_video_back_ravg': 67.3}
09/09/2024 23:51:35 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_area====history best step: 149=======

09/09/2024 23:51:35 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.7/83.3', 'area_video_ravg': 70.5, 'area_video_back_r1': 49.7, 'area_video_back_recall': '49.7/73.6/80.8', 'area_video_back_ravg': 68.0}
09/09/2024 23:51:35 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itc_tv=====step 1549--===========

09/09/2024 23:51:35 - INFO - __main__ -   {'video_r1': 39.5, 'video_recall': '39.5/68.3/78.7', 'video_ravg': 62.2}
09/09/2024 23:51:35 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itc_tv====history best step: 49=======

09/09/2024 23:51:35 - INFO - __main__ -   {'video_r1': 45.4, 'video_recall': '45.4/73.0/82.4', 'video_ravg': 66.9}
09/09/2024 23:51:35 - INFO - __main__ -   ====-evaluation--ret%tv--msrvtt_ret_ret_itm_tv=====step 1549--===========

09/09/2024 23:51:35 - INFO - __main__ -   {'video_r1': 52.1, 'video_recall': '52.1/74.3/82.2', 'video_ravg': 69.6}
09/09/2024 23:51:35 - INFO - __main__ -   ======evaluation--ret%tv--msrvtt_ret_ret_itm_tv====history best step: 1049=======

09/09/2024 23:51:35 - INFO - __main__ -   {'video_r1': 52.9, 'video_recall': '52.9/74.5/82.8', 'video_ravg': 70.1}
09/09/2024 23:51:55 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 1.478582501411438, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.023074200376868248, 'loss_ret%tv%ta--finetune_area/loss_area': 1.2141151428222656, 'loss_ret%tv%ta--finetune_area/total_loss': 2.7157716751098633}
 80%|███████▉  | 1550/1945 [8:26:29<11:48:56, 107.69s/it] 80%|███████▉  | 1551/1945 [8:26:33<8:22:28, 76.52s/it]   80%|███████▉  | 1552/1945 [8:26:37<5:58:18, 54.70s/it] 80%|███████▉  | 1553/1945 [8:26:41<4:17:36, 39.43s/it] 80%|███████▉  | 1554/1945 [8:26:45<3:07:14, 28.73s/it] 80%|███████▉  | 1555/1945 [8:26:48<2:18:08, 21.25s/it]/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x556e428d7c00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e4fd9ffe80] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55e4fdc5b1c0] mmco: unref short failure
[h264 @ 0x556e41fa0080] mmco: unref short failure
[h264 @ 0x556e41fa0080] mmco: unref short failure
[h264 @ 0x556e429f69c0] mmco: unref short failure
[h264 @ 0x556e429f69c0] mmco: unref short failure
[h264 @ 0x55e4fd612a80] mmco: unref short failure
[h264 @ 0x55e4fd612a80] mmco: unref short failure
[h264 @ 0x556e428f8300] mmco: unref short failure
[h264 @ 0x556e421db880] mmco: unref short failure
[h264 @ 0x556e421db880] mmco: unref short failure
[h264 @ 0x556e421db880] mmco: unref short failure
[h264 @ 0x556e421db880] mmco: unref short failure
[h264 @ 0x556e42a47880] mmco: unref short failure
[h264 @ 0x556e42a47880] mmco: unref short failure
[h264 @ 0x55b7cf84dd00] mmco: unref short failure
[h264 @ 0x55b7cf84dd00] mmco: unref short failure
[h264 @ 0x55b7cb346700] mmco: unref short failure
[h264 @ 0x556e429a80c0] mmco: unref short failure
[h264 @ 0x55e4fe427180] mmco: unref short failure
[h264 @ 0x55e4fe427180] mmco: unref short failure
[h264 @ 0x55e4ff138180] mmco: unref short failure
[h264 @ 0x55e4ff138180] mmco: unref short failure
[h264 @ 0x556e5469b380] mmco: unref short failure
[h264 @ 0x55b7cd303a00] mmco: unref short failure
[h264 @ 0x556e437d88c0] mmco: unref short failure
[h264 @ 0x556e4430ef80] mmco: unref short failure
[h264 @ 0x55e4fd008080] mmco: unref short failure
[h264 @ 0x556e45e7aa00] mmco: unref short failure
[h264 @ 0x556e45e7aa00] mmco: unref short failure
[h264 @ 0x55b7d1cce080] mmco: unref short failure
[h264 @ 0x55b7d1cce080] mmco: unref short failure
[h264 @ 0x55e4fe5f5d00] mmco: unref short failure
[h264 @ 0x556e53395b40] mmco: unref short failure
[h264 @ 0x556e4e000200] mmco: unref short failure
[h264 @ 0x556e4e000200] mmco: unref short failure
[h264 @ 0x55b7ce13d180] mmco: unref short failure
[h264 @ 0x556e55335000] mmco: unref short failure
[h264 @ 0x556e55335000] mmco: unref short failure
[h264 @ 0x556e443d4980] mmco: unref short failure
[h264 @ 0x556e443d4980] mmco: unref short failure
 80%|████████  | 1556/1945 [8:29:11<6:14:24, 57.75s/it][h264 @ 0x55e500de7140] mmco: unref short failure
 80%|████████  | 1557/1945 [8:29:18<4:34:34, 42.46s/it][h264 @ 0x556e420c2640] mmco: unref short failure
[h264 @ 0x556e4485cfc0] mmco: unref short failure
[h264 @ 0x556e4485cfc0] mmco: unref short failure
 80%|████████  | 1558/1945 [8:29:25<3:25:38, 31.88s/it] 80%|████████  | 1559/1945 [8:29:32<2:37:32, 24.49s/it][h264 @ 0x556e5b2e9cc0] mmco: unref short failure
[h264 @ 0x556e5b2e9cc0] mmco: unref short failure
[h264 @ 0x556e428bf980] mmco: unref short failure
[h264 @ 0x556e428bf980] mmco: unref short failure
 80%|████████  | 1560/1945 [8:29:40<2:05:19, 19.53s/it][h264 @ 0x55b7d6e36540] mmco: unref short failure
[h264 @ 0x55b7d6e36540] mmco: unref short failure
[h264 @ 0x55e509c06ac0] mmco: unref short failure
[h264 @ 0x55e509c06ac0] mmco: unref short failure
 80%|████████  | 1561/1945 [8:29:48<1:42:46, 16.06s/it][h264 @ 0x55b7cc79b640] mmco: unref short failure
[h264 @ 0x55b7cc79b640] mmco: unref short failure
 80%|████████  | 1562/1945 [8:29:56<1:26:06, 13.49s/it][h264 @ 0x55e508cc69c0] mmco: unref short failure
[h264 @ 0x55e508cc69c0] mmco: unref short failure
[h264 @ 0x556e441d7800] mmco: unref short failure
[h264 @ 0x556e441d7800] mmco: unref short failure
 80%|████████  | 1563/1945 [8:30:04<1:15:23, 11.84s/it][h264 @ 0x556e53557a40] mmco: unref short failure
[h264 @ 0x556e53557a40] mmco: unref short failure
[h264 @ 0x556e4ecbfac0] mmco: unref short failure
[h264 @ 0x556e4ecbfac0] mmco: unref short failure
[h264 @ 0x55b7cd0d6e40] mmco: unref short failure
[h264 @ 0x55e4fd870580] mmco: unref short failure
[h264 @ 0x55e4fd870580] mmco: unref short failure
[h264 @ 0x556e44fe7280] mmco: unref short failure
[h264 @ 0x556e44fe7280] mmco: unref short failure
[h264 @ 0x556e44fe7280] mmco: unref short failure
[h264 @ 0x556e44fe7280] mmco: unref short failure
[h264 @ 0x55b7cd693000] mmco: unref short failure
[h264 @ 0x55b7cd693000] mmco: unref short failure
[h264 @ 0x55e5041eeb80] mmco: unref short failure
[h264 @ 0x55b7d0e75bc0] mmco: unref short failure
[h264 @ 0x55b7d0e75bc0] mmco: unref short failure
[h264 @ 0x55e5075a1480] mmco: unref short failure
[h264 @ 0x55e502072880] mmco: unref short failure
[h264 @ 0x55e500a1fa00] mmco: unref short failure
[h264 @ 0x55b7ccd6a480] mmco: unref short failure
[h264 @ 0x55b7ccd6a480] mmco: unref short failure
[h264 @ 0x55e5010bd0c0] mmco: unref short failure
[h264 @ 0x556e56dab540] mmco: unref short failure
[h264 @ 0x55e4fdec97c0] mmco: unref short failure
[h264 @ 0x556e5fff8dc0] mmco: unref short failure
 80%|████████  | 1564/1945 [8:31:22<3:21:22, 31.71s/it][h264 @ 0x55e4fd7f0880] mmco: unref short failure
[h264 @ 0x55e4fd7f0880] mmco: unref short failure
 80%|████████  | 1565/1945 [8:31:29<2:34:34, 24.41s/it][h264 @ 0x556e53ddf040] mmco: unref short failure
[h264 @ 0x556e53ddf040] mmco: unref short failure
[h264 @ 0x55e4fdeb2280] mmco: unref short failure
[h264 @ 0x55e4fdeb2280] mmco: unref short failure
[h264 @ 0x556e4cb18400] mmco: unref short failure
 81%|████████  | 1566/1945 [8:31:37<2:01:51, 19.29s/it][h264 @ 0x55b7d77e6b40] mmco: unref short failure
[h264 @ 0x55b7d77e6b40] mmco: unref short failure
[h264 @ 0x556e43dbee00] mmco: unref short failure
[h264 @ 0x556e43dbee00] mmco: unref short failure
 81%|████████  | 1567/1945 [8:31:44<1:38:07, 15.58s/it][h264 @ 0x55b7cb5eb0c0] mmco: unref short failure
[h264 @ 0x55b7cb5eb0c0] mmco: unref short failure
[h264 @ 0x55b7cb5eb0c0] mmco: unref short failure
[h264 @ 0x55b7cb5eb0c0] mmco: unref short failure
[h264 @ 0x55e508aa2900] mmco: unref short failure
 81%|████████  | 1568/1945 [8:31:52<1:23:58, 13.36s/it] 81%|████████  | 1569/1945 [8:31:59<1:13:07, 11.67s/it][h264 @ 0x55e504b62f80] mmco: unref short failure
[h264 @ 0x55e504b62f80] mmco: unref short failure
 81%|████████  | 1570/1945 [8:32:06<1:03:18, 10.13s/it][h264 @ 0x556e578e8f00] mmco: unref short failure
[h264 @ 0x556e578e8f00] mmco: unref short failure
[h264 @ 0x556e5875d300] mmco: unref short failure
 81%|████████  | 1571/1945 [8:32:13<57:49,  9.28s/it]  [h264 @ 0x55e501c847c0] mmco: unref short failure
[h264 @ 0x55b7d459e700] mmco: unref short failure
[h264 @ 0x55b7d459e700] mmco: unref short failure
[h264 @ 0x55b7d459e700] mmco: unref short failure
[h264 @ 0x55e507534b40] mmco: unref short failure
[h264 @ 0x55e509d7bf00] mmco: unref short failure
[h264 @ 0x556e591c1c00] mmco: unref short failure
[h264 @ 0x556e591c1c00] mmco: unref short failure
[h264 @ 0x55e50473e900] mmco: unref short failure
[h264 @ 0x556e4ba5e700] mmco: unref short failure
[h264 @ 0x55b7d63bde00] mmco: unref short failure
[h264 @ 0x55b7d63bde00] mmco: unref short failure
[h264 @ 0x55b7d1b6ac40] mmco: unref short failure
[h264 @ 0x55b7d1b6ac40] mmco: unref short failure
[h264 @ 0x55b7d1b6ac40] mmco: unref short failure
[h264 @ 0x556e51eee840] mmco: unref short failure
[h264 @ 0x556e51eee840] mmco: unref short failure
[h264 @ 0x55b7cba1de40] mmco: unref short failure
[h264 @ 0x55b7cba1de40] mmco: unref short failure
[h264 @ 0x55b7d3b3f780] mmco: unref short failure
[h264 @ 0x556e42152640] mmco: unref short failure
[h264 @ 0x556e50344a80] mmco: unref short failure
[h264 @ 0x556e50344a80] mmco: unref short failure
[h264 @ 0x556e52167d00] mmco: unref short failure
[h264 @ 0x55b7cb2abd00] mmco: unref short failure
[h264 @ 0x55b7cb2abd00] mmco: unref short failure
[h264 @ 0x55e508c64ac0] mmco: unref short failure
[h264 @ 0x55e508c64ac0] mmco: unref short failure
[h264 @ 0x55b7d1bbe140] mmco: unref short failure
[h264 @ 0x55b7d1bbe140] mmco: unref short failure
[h264 @ 0x55b7d1bbe140] mmco: unref short failure
 81%|████████  | 1572/1945 [8:33:26<2:55:48, 28.28s/it][h264 @ 0x556e54771400] mmco: unref short failure
[h264 @ 0x556e54771400] mmco: unref short failure
[h264 @ 0x556e5d9988c0] mmco: unref short failure
[h264 @ 0x556e5e4ae4c0] mmco: unref short failure
[h264 @ 0x556e4d3eddc0] mmco: unref short failure
[h264 @ 0x556e4d3eddc0] mmco: unref short failure
 81%|████████  | 1573/1945 [8:33:33<2:15:07, 21.80s/it] 81%|████████  | 1574/1945 [8:33:39<1:47:04, 17.32s/it][h264 @ 0x556e43723800] mmco: unref short failure
[h264 @ 0x556e43723800] mmco: unref short failure
[h264 @ 0x556e5bfd4cc0] mmco: unref short failure
[h264 @ 0x556e5bfd4cc0] mmco: unref short failure
[h264 @ 0x556e4d5541c0] mmco: unref short failure
[h264 @ 0x556e4d5541c0] mmco: unref short failure
[h264 @ 0x556e4d5541c0] mmco: unref short failure
[h264 @ 0x556e4d5541c0] mmco: unref short failure
[h264 @ 0x556e4d5541c0] mmco: unref short failure
[h264 @ 0x556e4d5541c0] mmco: unref short failure
[h264 @ 0x556e52dea300] mmco: unref short failure
[h264 @ 0x556e52dea300] mmco: unref short failure
[h264 @ 0x556e52dea300] mmco: unref short failure
[h264 @ 0x556e52dea300] mmco: unref short failure
[h264 @ 0x556e52dea300] mmco: unref short failure
 81%|████████  | 1575/1945 [8:33:46<1:27:46, 14.23s/it] 81%|████████  | 1576/1945 [8:33:53<1:13:04, 11.88s/it] 81%|████████  | 1577/1945 [8:34:00<1:03:40, 10.38s/it][h264 @ 0x556e55154b00] mmco: unref short failure
 81%|████████  | 1578/1945 [8:34:06<56:08,  9.18s/it]  [h264 @ 0x55b7d4a76d40] mmco: unref short failure
[h264 @ 0x55b7d4a76d40] mmco: unref short failure
 81%|████████  | 1579/1945 [8:34:13<51:55,  8.51s/it][h264 @ 0x55e502be33c0] mmco: unref short failure
[h264 @ 0x556e535db640] mmco: unref short failure
[h264 @ 0x556e535db640] mmco: unref short failure
[h264 @ 0x556e46400c00] mmco: unref short failure
[h264 @ 0x556e46400c00] mmco: unref short failure
[h264 @ 0x55e5011bc940] mmco: unref short failure
[h264 @ 0x55e5011bc940] mmco: unref short failure
[h264 @ 0x556e436bb340] mmco: unref short failure
[h264 @ 0x556e436bb340] mmco: unref short failure
[h264 @ 0x556e436bb340] mmco: unref short failure
[h264 @ 0x556e436bb340] mmco: unref short failure
[h264 @ 0x556e4e05bbc0] mmco: unref short failure
[h264 @ 0x556e4b181c00] mmco: unref short failure
[h264 @ 0x556e4b181c00] mmco: unref short failure
[h264 @ 0x55e504eca680] mmco: unref short failure
[h264 @ 0x55e504eca680] mmco: unref short failure
[h264 @ 0x556e4a275840] mmco: unref short failure
[h264 @ 0x556e4a275840] mmco: unref short failure
[h264 @ 0x556e52f80100] mmco: unref short failure
[h264 @ 0x556e52f80100] mmco: unref short failure
[h264 @ 0x556e475543c0] mmco: unref short failure
[h264 @ 0x556e475543c0] mmco: unref short failure
[h264 @ 0x55e50213b340] mmco: unref short failure
[h264 @ 0x556e5da88f00] mmco: unref short failure
[h264 @ 0x556e51330900] mmco: unref short failure
[h264 @ 0x556e51330900] mmco: unref short failure
[h264 @ 0x556e51330900] mmco: unref short failure
[h264 @ 0x556e51330900] mmco: unref short failure
[h264 @ 0x556e56abb180] mmco: unref short failure
[h264 @ 0x556e56abb180] mmco: unref short failure
[h264 @ 0x556e601a9240] mmco: unref short failure
[h264 @ 0x55b7cfb47340] mmco: unref short failure
[h264 @ 0x55b7cfb47340] mmco: unref short failure
[h264 @ 0x556e553ba780] mmco: unref short failure
[h264 @ 0x556e553ba780] mmco: unref short failure
[h264 @ 0x556e579528c0] mmco: unref short failure
[h264 @ 0x556e4a3fb680] mmco: unref short failure
[h264 @ 0x556e4a3fb680] mmco: unref short failure
 81%|████████  | 1580/1945 [8:35:27<2:51:15, 28.15s/it][h264 @ 0x556e54302440] mmco: unref short failure
[h264 @ 0x556e54302440] mmco: unref short failure
 81%|████████▏ | 1581/1945 [8:35:34<2:12:12, 21.79s/it][h264 @ 0x55e508c95d40] mmco: unref short failure
[h264 @ 0x55e508c95d40] mmco: unref short failure
[h264 @ 0x55e508c95d40] mmco: unref short failure
[h264 @ 0x55e508c95d40] mmco: unref short failure
 81%|████████▏ | 1582/1945 [8:35:41<1:45:40, 17.47s/it] 81%|████████▏ | 1583/1945 [8:35:49<1:26:47, 14.39s/it][h264 @ 0x556e4f518140] mmco: unref short failure
 81%|████████▏ | 1584/1945 [8:35:56<1:14:16, 12.34s/it][h264 @ 0x556e503ea440] mmco: unref short failure
 81%|████████▏ | 1585/1945 [8:36:03<1:04:44, 10.79s/it] 82%|████████▏ | 1586/1945 [8:36:11<58:15,  9.74s/it]  [h264 @ 0x556e545cbc00] mmco: unref short failure
[h264 @ 0x556e545cbc00] mmco: unref short failure
not have audios 8-qwaveiHMM.3
 82%|████████▏ | 1587/1945 [8:36:18<53:19,  8.94s/it][h264 @ 0x556e545d7ec0] mmco: unref short failure
[h264 @ 0x55e50120eac0] mmco: unref short failure
[h264 @ 0x55b7d2547bc0] mmco: unref short failure
[h264 @ 0x55b7d21cec00] mmco: unref short failure
[h264 @ 0x55b7cf422140] mmco: unref short failure
[h264 @ 0x556e53222a80] mmco: unref short failure
[h264 @ 0x556e494febc0] mmco: unref short failure
[h264 @ 0x556e494febc0] mmco: unref short failure
[h264 @ 0x55e5093ae880] mmco: unref short failure
[h264 @ 0x55e5093ae880] mmco: unref short failure
[h264 @ 0x556e53455140] mmco: unref short failure
[h264 @ 0x55b7d06fa900] mmco: unref short failure
[h264 @ 0x55b7d06fa900] mmco: unref short failure
[h264 @ 0x556e52dfa1c0] mmco: unref short failure
[h264 @ 0x55e50862e600] mmco: unref short failure
[h264 @ 0x556e60251fc0] mmco: unref short failure
[h264 @ 0x556e5ab38ac0] mmco: unref short failure
[h264 @ 0x55b7d8409ac0] mmco: unref short failure
[h264 @ 0x55b7d8409ac0] mmco: unref short failure
[h264 @ 0x55b7d8409ac0] mmco: unref short failure
[h264 @ 0x55b7d8409ac0] mmco: unref short failure
[h264 @ 0x55b7d3f34a00] mmco: unref short failure
[h264 @ 0x55e501ec66c0] mmco: unref short failure
[h264 @ 0x55e501ec66c0] mmco: unref short failure
[h264 @ 0x556e5cf52540] mmco: unref short failure
[h264 @ 0x556e5cf52540] mmco: unref short failure
 82%|████████▏ | 1588/1945 [8:37:25<2:37:05, 26.40s/it] 82%|████████▏ | 1589/1945 [8:37:33<2:03:40, 20.84s/it][h264 @ 0x556e42a1be80] mmco: unref short failure
[h264 @ 0x55b7cec56300] mmco: unref short failure
[h264 @ 0x55e50551b8c0] mmco: unref short failure
 82%|████████▏ | 1590/1945 [8:37:41<1:41:07, 17.09s/it][h264 @ 0x556e59cddd00] mmco: unref short failure
 82%|████████▏ | 1591/1945 [8:37:48<1:23:09, 14.10s/it][h264 @ 0x556e6253bf00] mmco: unref short failure
 82%|████████▏ | 1592/1945 [8:37:55<1:09:40, 11.84s/it][h264 @ 0x556e5dbbe080] mmco: unref short failure
[h264 @ 0x556e5dbbe080] mmco: unref short failure
[h264 @ 0x556e5dbbe080] mmco: unref short failure
[h264 @ 0x556e5dbbe080] mmco: unref short failure
 82%|████████▏ | 1593/1945 [8:38:04<1:04:09, 10.94s/it][h264 @ 0x55e50085d800] mmco: unref short failure
[h264 @ 0x55e50085d800] mmco: unref short failure
 82%|████████▏ | 1594/1945 [8:38:10<56:17,  9.62s/it]  [h264 @ 0x55e50bb45040] mmco: unref short failure
[h264 @ 0x55e5095bd540] mmco: unref short failure
[h264 @ 0x55e5095bd540] mmco: unref short failure
[h264 @ 0x55b7da4422c0] mmco: unref short failure
[h264 @ 0x55b7da4422c0] mmco: unref short failure
 82%|████████▏ | 1595/1945 [8:38:16<50:27,  8.65s/it][h264 @ 0x55e5006eac40] mmco: unref short failure
[h264 @ 0x55e5006eac40] mmco: unref short failure
[h264 @ 0x55b7dc7ce000] mmco: unref short failure
[h264 @ 0x55b7dc7ce000] mmco: unref short failure
[h264 @ 0x55e5006eb500] mmco: unref short failure
[h264 @ 0x55e5006eb500] mmco: unref short failure
[h264 @ 0x556e58695200] mmco: unref short failure
[h264 @ 0x556e58695200] mmco: unref short failure
[h264 @ 0x55b7cc66e540] mmco: unref short failure
[h264 @ 0x55b7cc66e540] mmco: unref short failure
[h264 @ 0x556e578e9b00] mmco: unref short failure
[h264 @ 0x556e578e9b00] mmco: unref short failure
[h264 @ 0x556e54231940] mmco: unref short failure
[h264 @ 0x556e57884dc0] mmco: unref short failure
[h264 @ 0x556e553bac00] mmco: unref short failure
[h264 @ 0x556e553bac00] mmco: unref short failure
[h264 @ 0x556e553bac00] mmco: unref short failure
[h264 @ 0x556e553bac00] mmco: unref short failure
[h264 @ 0x55b7cb8a9f80] mmco: unref short failure
[h264 @ 0x55b7cb8a9f80] mmco: unref short failure
[h264 @ 0x55e506b1e2c0] mmco: unref short failure
[h264 @ 0x55e506b1e2c0] mmco: unref short failure
[h264 @ 0x556e45053380] mmco: unref short failure
[h264 @ 0x556e45053380] mmco: unref short failure
[h264 @ 0x556e4c452940] mmco: unref short failure
[h264 @ 0x55b7d7d85180] mmco: unref short failure
[h264 @ 0x556e59cdda80] mmco: unref short failure
 82%|████████▏ | 1596/1945 [8:39:27<2:38:15, 27.21s/it][h264 @ 0x55e5028e00c0] mmco: unref short failure
[h264 @ 0x55e5028e00c0] mmco: unref short failure
 82%|████████▏ | 1597/1945 [8:39:35<2:03:48, 21.35s/it] 82%|████████▏ | 1598/1945 [8:39:44<1:42:26, 17.71s/it][h264 @ 0x55e504026900] mmco: unref short failure
 82%|████████▏ | 1599/1945 [8:39:52<1:24:42, 14.69s/it]09/10/2024 00:05:20 - INFO - __main__ -   evaluate on ret%tv--msrvtt_ret task
09/10/2024 00:05:20 - INFO - __main__ -   start running ret%tv validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55b7d4ce4180] mmco: unref short failure
[h264 @ 0x55b7d5064a80] mmco: unref short failure
[h264 @ 0x55e5137e4800] mmco: unref short failure
[h264 @ 0x55e5137e4800] mmco: unref short failure
[h264 @ 0x55e4fd78f1c0] mmco: unref short failure
[h264 @ 0x55b7df76b040] mmco: unref short failure
[h264 @ 0x55b7df76b040] mmco: unref short failure
[h264 @ 0x55b7df76b040] mmco: unref short failure
[h264 @ 0x55b7df76b040] mmco: unref short failure
srun: Job step aborted: Waiting up to 92 seconds for job step to finish.
slurmstepd: error: *** JOB 7457645 ON lrdn3102 CANCELLED AT 2024-09-10T00:05:49 ***
