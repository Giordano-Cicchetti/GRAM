NODELIST=lrdn3286
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/distributed/launch.py:181: FutureWarning: The module torch.distributed.launch is deprecated
and will be removed in future. Use torchrun.
Note that --use-env is set by default in torchrun.
If your script expects `--local-rank` argument to be set, please
change it to read from `os.environ['LOCAL_RANK']` instead. See 
https://pytorch.org/docs/stable/distributed.html#launch-utility for 
further instructions

  warnings.warn(
WARNING:torch.distributed.run:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
1203



DEVICE SET
DEVICE SET
DEVICE SET
DEVICE SET
09/10/2024 19:58:01 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 0
09/10/2024 19:58:01 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 3
09/10/2024 19:58:01 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 2
09/10/2024 19:58:01 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 1
09/10/2024 19:58:01 - INFO - torch.distributed.distributed_c10d -   Rank 0: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/10/2024 19:58:01 - INFO - torch.distributed.distributed_c10d -   Rank 1: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/10/2024 19:58:01 - INFO - torch.distributed.distributed_c10d -   Rank 3: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/10/2024 19:58:01 - INFO - torch.distributed.distributed_c10d -   Rank 2: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/10/2024 19:58:01 - INFO - __main__ -   ==================model_configs==================

09/10/2024 19:58:01 - INFO - __main__ -   model_cfg_model_type : vast
09/10/2024 19:58:01 - INFO - __main__ -   model_cfg_itm_ratio : 0.1
09/10/2024 19:58:01 - INFO - __main__ -   model_cfg_frozen_vision : False
09/10/2024 19:58:01 - INFO - __main__ -   model_cfg_frozen_audio : False
09/10/2024 19:58:01 - INFO - __main__ -   model_cfg_checkpointing : True
09/10/2024 19:58:01 - INFO - __main__ -   model_cfg_max_caption_len : 40
09/10/2024 19:58:01 - INFO - __main__ -   model_cfg_max_omni_caption_len : 70
09/10/2024 19:58:01 - INFO - __main__ -   model_cfg_max_subtitle_len : 70
09/10/2024 19:58:01 - INFO - __main__ -   model_cfg_contra_dim : 512
09/10/2024 19:58:01 - INFO - __main__ -   model_cfg_inherit_keys : ['vision_encoder_type', 'audio_encoder_type', 'audio_melbins', 'audio_target_length']
09/10/2024 19:58:01 - INFO - __main__ -   model_cfg_frame_embedding_type : adaptive
09/10/2024 19:58:01 - INFO - __main__ -   model_cfg_vision_resolution : 224
09/10/2024 19:58:01 - INFO - __main__ -   model_cfg_vision_encoder_type : evaclip01_giant
09/10/2024 19:58:01 - INFO - __main__ -   model_cfg_audio_encoder_type : beats
09/10/2024 19:58:01 - INFO - __main__ -   model_cfg_audio_melbins : 64
09/10/2024 19:58:01 - INFO - __main__ -   model_cfg_audio_target_length : 1024
09/10/2024 19:58:01 - INFO - __main__ -   model_cfg_beam_size : 3
09/10/2024 19:58:01 - INFO - __main__ -   model_cfg_captioner_mode : False
09/10/2024 19:58:01 - INFO - __main__ -   model_cfg_generate_nums : 1
09/10/2024 19:58:01 - INFO - __main__ -   model_cfg_ret_bidirection_evaluation : False
09/10/2024 19:58:01 - INFO - __main__ -   model_cfg_itm_rerank_num : 50
09/10/2024 19:58:01 - INFO - __main__ -   model_cfg_evaluation_type : evaluation_mm
09/10/2024 19:58:01 - INFO - __main__ -   model_cfg_default : ./config/vast/default_model_cfg.json
09/10/2024 19:58:01 - INFO - __main__ -   model_cfg_max_vision_sample_num : 2
09/10/2024 19:58:01 - INFO - __main__ -   model_cfg_max_audio_sample_num : 1
09/10/2024 19:58:01 - INFO - __main__ -   ==================run_configs==================

09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_checkpoint : 
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_output_dir : ./output/vast/pretrain_vast/downstream/finetuneVolume256batchlossonlyvolumeAndvideoaudiosub_inItm
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_gradient_accumulation_steps : 1
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_clip_lr : 5e-07
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_optim : adamw
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_learning_rate : 2e-05
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_betas : [0.9, 0.98]
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_weight_decay : 0.01
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_grad_norm : 2.0
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_warmup_ratio : 0.1
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_resume : False
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_seed : 50
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_fp16 : True
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_bf16 : False
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_zero_shot : False
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_scheduler : warmup_linear
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_new_lr : 0
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_new_params_name : []
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_valid_freq : 10
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_dataset_mix_type : random
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_remove_before_ckpt : True
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_first_eval : True
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_pretrain_dir : ./output/vast/pretrain_vast
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_num_train_steps : 0
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_save_best : True
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_pin_mem : True
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_vision_resolution : 224
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_use_ddp : False
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_mode : training
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_log_steps : 100
09/10/2024 19:58:01 - INFO - __main__ -   run_cfg_default : ./config/vast/default_run_cfg.json
09/10/2024 19:58:01 - INFO - __main__ -   ==================data_configs==================

09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_finetune_area_train_type : annoindexed
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_finetune_area_train_training : True
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_finetune_area_train_name : finetune_area
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_finetune_area_train_txt : ../vast27m/annotations100k.json
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_finetune_area_train_vision : ../vast27m/videos/
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_finetune_area_train_audio : ../vast27m/audios
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_finetune_area_train_vision_transforms : crop_flip
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_finetune_area_train_vision_format : video_rawvideo
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_finetune_area_train_vision_sample_num : 2
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_finetune_area_train_audio_sample_num : 1
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_finetune_area_train_task : ret%tv%ta
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_finetune_area_train_epoch : 5
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_finetune_area_train_n_workers : 8
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_finetune_area_train_batch_size : 256
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_msrvtt_ret_val_type : annoindexed
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_msrvtt_ret_val_training : False
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_msrvtt_ret_val_name : msrvtt_ret
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_msrvtt_ret_val_txt : datasets/annotations/msrvtt/descs_ret_test.json
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision : ../MSRVTT/video_test
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_transforms : crop_flip
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_format : video_rawvideo
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_msrvtt_ret_val_audio : ../MSRVTT/audio_test
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_sample_num : 8
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_msrvtt_ret_val_audio_sample_num : 1
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_msrvtt_ret_val_task : ret%tvas
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_msrvtt_ret_val_n_workers : 8
09/10/2024 19:58:01 - INFO - __main__ -   data_cfg_msrvtt_ret_val_batch_size : 64
wandb: Tracking run with wandb version 0.17.8
wandb: W&B syncing is set to `offline` in this directory.  
wandb: Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
09/10/2024 19:58:05 - INFO - __main__ -   finetune_area Using clip mean and std.
09/10/2024 19:58:05 - INFO - __main__ -   finetune_area transforms crop_flip
ci sono 99621 labelsci sono 99621 labelsci sono 99621 labels

ci sono 99621 labels

09/10/2024 19:58:49 - INFO - __main__ -   Create Dataset finetune_area Success
09/10/2024 19:58:49 - INFO - __main__ -    loader ret%tv%ta--finetune_area , ratio 1945 , bs_pergpu 64, n_workers 8
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55a82bdb5e80] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
09/10/2024 19:58:52 - INFO - __main__ -   msrvtt_ret Using clip mean and std.
09/10/2024 19:58:52 - INFO - __main__ -   msrvtt_ret transforms crop_flip
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
ci sono 884 labelsci sono 884 labels
ci sono 884 labels
ci sono 884 labels

09/10/2024 19:58:53 - INFO - __main__ -   Create Dataset msrvtt_ret Success
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
09/10/2024 19:58:56 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
09/10/2024 19:58:56 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
09/10/2024 19:58:56 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
09/10/2024 19:58:56 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x56439126b700] mmco: unref short failure
[h264 @ 0x55edf088a500] mmco: unref short failure
[h264 @ 0x55edf088a500] mmco: unref short failure
[h264 @ 0x55d5b1019e00] mmco: unref short failure
[h264 @ 0x55d5b1019e00] mmco: unref short failure
[h264 @ 0x55d5b0876dc0] mmco: unref short failure
[h264 @ 0x55d5b4788740] mmco: unref short failure
[h264 @ 0x55d5b4788740] mmco: unref short failure
[h264 @ 0x56439174d140] mmco: unref short failure
[h264 @ 0x55edf09c1040] mmco: unref short failure
[h264 @ 0x55d5b14872c0] mmco: unref short failure
[h264 @ 0x55d5b14872c0] mmco: unref short failure
09/10/2024 20:00:04 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
09/10/2024 20:00:04 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
[h264 @ 0x55d5b08e32c0] mmco: unref short failure
09/10/2024 20:00:12 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
09/10/2024 20:00:14 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
09/10/2024 20:00:17 - INFO - root -   incompatible_keys.missing_keys: []
09/10/2024 20:00:17 - INFO - root -   incompatible_keys.missing_keys: []
09/10/2024 20:00:19 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/10/2024 20:00:19 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/10/2024 20:00:23 - INFO - root -   incompatible_keys.missing_keys: []
[h264 @ 0x55d5b13a9200] mmco: unref short failure
[h264 @ 0x55d5b13a9200] mmco: unref short failure
09/10/2024 20:00:25 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/10/2024 20:00:25 - INFO - root -   incompatible_keys.missing_keys: []
09/10/2024 20:00:27 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
[h264 @ 0x55edf07eeb40] mmco: unref short failure
[h264 @ 0x55edf07eeb40] mmco: unref short failure
[h264 @ 0x55edf1fe6a40] mmco: unref short failure
[h264 @ 0x55edf1fe6a40] mmco: unref short failure
09/10/2024 20:00:32 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
09/10/2024 20:00:32 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
[h264 @ 0x55a82da56ac0] mmco: unref short failure
09/10/2024 20:00:38 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
09/10/2024 20:00:41 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.1.crossattention.self.value.weight', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.6.crossattention.self.key.weight', 'cls.predictions.transform.dense.bias', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.7.crossattention.self.query.bias', 'cls.predictions.bias', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.8.crossattention.output.dense.weight', 'cls.predictions.transform.dense.weight', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.self.query.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
[h264 @ 0x55a82f6d4180] mmco: unref short failure
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.4.crossattention.self.value.weight', 'cls.predictions.transform.dense.bias', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.5.crossattention.output.dense.bias', 'cls.predictions.transform.dense.weight', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.self.query.bias', 'cls.predictions.bias', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.7.crossattention.self.key.bias', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.1.crossattention.output.LayerNorm.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.output.dense.weight', 'cls.predictions.bias', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.self.key.weight', 'cls.predictions.transform.dense.weight', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.5.crossattention.self.value.bias', 'cls.predictions.transform.dense.bias', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.key.weight', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.2.crossattention.self.query.weight', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.query.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
[h264 @ 0x55a82e342700] mmco: unref short failure
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.10.crossattention.self.value.bias', 'cls.predictions.transform.dense.bias', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'cls.predictions.bias', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.8.crossattention.self.key.bias', 'cls.predictions.transform.dense.weight', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.2.crossattention.self.key.bias', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.8.crossattention.output.LayerNorm.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
[h264 @ 0x564392f20580] mmco: unref short failure
[h264 @ 0x564392f20580] mmco: unref short failure
09/10/2024 20:01:08 - INFO - __main__ -   load_from_pretrained: ./output/vast/pretrain_vast/ckpt/model_step_204994.pt
09/10/2024 20:01:08 - INFO - __main__ -   Load from pretrained dir ./output/vast/pretrain_vast
[h264 @ 0x55a82d151800] mmco: unref short failure
[h264 @ 0x55a82d151800] mmco: unref short failure
09/10/2024 20:01:15 - INFO - __main__ -   Unexpected keys ['vision_encoder.text.logit_scale']
09/10/2024 20:01:15 - INFO - __main__ -   missing_keys  ['vision_encoder.logit_scale']
[h264 @ 0x55edf030b9c0] mmco: unref short failure
[h264 @ 0x564397b15000] mmco: unref short failure
[h264 @ 0x564397b15000] mmco: unref short failure
[h264 @ 0x564391864540] mmco: unref short failure
09/10/2024 20:01:22 - INFO - __main__ -   ==================learning_rate_settings==================

09/10/2024 20:01:22 - INFO - __main__ -     basic_lr : 2e-05
09/10/2024 20:01:22 - INFO - __main__ -     clip_lr_visual : 5e-07
09/10/2024 20:01:22 - INFO - __main__ -     clip_lr_visual_len : 245
09/10/2024 20:01:22 - INFO - __main__ -     new_lr : 0
09/10/2024 20:01:22 - INFO - __main__ -     new_params_name: []
09/10/2024 20:01:22 - INFO - __main__ -   evaluate on ret%tvas--msrvtt_ret task
09/10/2024 20:01:22 - INFO - __main__ -   start running ret%tvas validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55edf107b240] mmco: unref short failure
[h264 @ 0x55d5b11c00c0] mmco: unref short failure
[h264 @ 0x564390f0d880] mmco: unref short failure
[h264 @ 0x564390f0d880] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55d5bc7ca040] mmco: unref short failure
[h264 @ 0x55d5bc7ca040] mmco: unref short failure
[h264 @ 0x56439187a300] mmco: unref short failure
[h264 @ 0x56439187a300] mmco: unref short failure
[h264 @ 0x564395013280] mmco: unref short failure
[h264 @ 0x564395013280] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
[h264 @ 0x55d5b465fd40] mmco: unref short failure
[h264 @ 0x55a83167f540] mmco: unref short failure
[h264 @ 0x55a83167f540] mmco: unref short failure
[h264 @ 0x55a82dc40800] mmco: unref short failure
[h264 @ 0x55a83228a140] mmco: unref short failure
[h264 @ 0x55a83228a140] mmco: unref short failure
[h264 @ 0x55edf6c772c0] mmco: unref short failure
[h264 @ 0x55edf6c772c0] mmco: unref short failure
[h264 @ 0x55a82fc4cf00] mmco: unref short failure
[h264 @ 0x5643963fbd80] mmco: unref short failure
[h264 @ 0x55d5b0e21740] mmco: unref short failure
[h264 @ 0x5643955f1a80] mmco: unref short failure
[h264 @ 0x5643955f1a80] mmco: unref short failure
[h264 @ 0x5643955f1a80] mmco: unref short failure
[h264 @ 0x5643955f1a80] mmco: unref short failure
[h264 @ 0x55edf802d580] mmco: unref short failure
[h264 @ 0x55edf802d580] mmco: unref short failure
[h264 @ 0x55edf14f0a00] mmco: unref short failure
[h264 @ 0x55d5bd879f00] mmco: unref short failure
[h264 @ 0x55d5bd879f00] mmco: unref short failure
[h264 @ 0x5643999a6dc0] mmco: unref short failure
[h264 @ 0x5643999a6dc0] mmco: unref short failure
  0%|          | 0/221 [00:00<?, ?it/s]  0%|          | 1/221 [00:00<00:27,  8.08it/s]  1%|          | 2/221 [00:00<00:57,  3.80it/s]  1%|▏         | 3/221 [00:00<01:05,  3.35it/s][h264 @ 0x55edf79ca340] mmco: unref short failure
[h264 @ 0x55edf79ca340] mmco: unref short failure
  2%|▏         | 4/221 [00:00<00:51,  4.21it/s]  2%|▏         | 5/221 [00:01<00:44,  4.82it/s]  3%|▎         | 7/221 [00:01<00:44,  4.85it/s]  4%|▎         | 8/221 [00:01<00:53,  3.99it/s]  4%|▍         | 9/221 [00:02<00:46,  4.58it/s]  5%|▍         | 10/221 [00:02<00:54,  3.90it/s]  5%|▍         | 11/221 [00:02<00:55,  3.75it/s]  5%|▌         | 12/221 [00:03<01:09,  3.01it/s]  6%|▌         | 13/221 [00:03<01:17,  2.68it/s]  6%|▋         | 14/221 [00:03<01:12,  2.87it/s]  7%|▋         | 15/221 [00:04<01:04,  3.21it/s]  7%|▋         | 16/221 [00:04<01:06,  3.08it/s]  8%|▊         | 17/221 [00:05<01:22,  2.46it/s]  8%|▊         | 18/221 [00:05<01:12,  2.82it/s]  9%|▊         | 19/221 [00:05<01:10,  2.85it/s]  9%|▉         | 20/221 [00:05<00:59,  3.35it/s] 10%|▉         | 21/221 [00:06<00:59,  3.34it/s] 10%|▉         | 22/221 [00:06<01:15,  2.65it/s] 11%|█         | 24/221 [00:07<00:57,  3.41it/s] 11%|█▏        | 25/221 [00:07<00:57,  3.38it/s] 12%|█▏        | 26/221 [00:07<00:59,  3.28it/s] 12%|█▏        | 27/221 [00:07<00:53,  3.61it/s] 13%|█▎        | 28/221 [00:08<01:06,  2.89it/s] 13%|█▎        | 29/221 [00:08<01:07,  2.84it/s] 14%|█▎        | 30/221 [00:09<01:04,  2.98it/s] 14%|█▍        | 31/221 [00:09<01:00,  3.13it/s] 14%|█▍        | 32/221 [00:09<00:49,  3.82it/s] 15%|█▍        | 33/221 [00:09<00:46,  4.08it/s] 15%|█▌        | 34/221 [00:09<00:44,  4.23it/s] 16%|█▌        | 35/221 [00:10<00:49,  3.73it/s] 16%|█▋        | 36/221 [00:10<00:51,  3.62it/s] 17%|█▋        | 37/221 [00:10<00:49,  3.74it/s] 17%|█▋        | 38/221 [00:11<00:47,  3.83it/s] 18%|█▊        | 39/221 [00:11<00:48,  3.79it/s] 18%|█▊        | 40/221 [00:11<00:52,  3.42it/s] 19%|█▊        | 41/221 [00:12<00:53,  3.33it/s] 19%|█▉        | 42/221 [00:12<00:45,  3.96it/s] 19%|█▉        | 43/221 [00:12<00:41,  4.30it/s] 20%|█▉        | 44/221 [00:12<00:38,  4.64it/s] 20%|██        | 45/221 [00:12<00:47,  3.67it/s] 21%|██        | 46/221 [00:13<00:51,  3.39it/s] 21%|██▏       | 47/221 [00:13<01:00,  2.86it/s] 22%|██▏       | 48/221 [00:13<00:49,  3.46it/s] 22%|██▏       | 49/221 [00:14<00:45,  3.74it/s] 23%|██▎       | 50/221 [00:14<00:54,  3.12it/s] 23%|██▎       | 51/221 [00:14<00:47,  3.61it/s] 24%|██▎       | 52/221 [00:15<00:45,  3.74it/s] 24%|██▍       | 53/221 [00:15<00:44,  3.76it/s] 24%|██▍       | 54/221 [00:15<01:03,  2.61it/s] 25%|██▍       | 55/221 [00:16<01:03,  2.61it/s] 25%|██▌       | 56/221 [00:16<00:56,  2.92it/s] 26%|██▌       | 57/221 [00:16<00:50,  3.24it/s] 26%|██▌       | 58/221 [00:17<00:48,  3.33it/s] 27%|██▋       | 59/221 [00:17<00:42,  3.80it/s] 27%|██▋       | 60/221 [00:17<00:42,  3.83it/s] 28%|██▊       | 61/221 [00:17<00:41,  3.85it/s] 28%|██▊       | 62/221 [00:18<00:41,  3.84it/s] 29%|██▊       | 63/221 [00:18<00:39,  3.98it/s] 29%|██▉       | 64/221 [00:18<00:40,  3.84it/s] 29%|██▉       | 65/221 [00:18<00:38,  4.05it/s] 30%|██▉       | 66/221 [00:19<01:10,  2.21it/s] 30%|███       | 67/221 [00:20<01:06,  2.31it/s] 31%|███       | 68/221 [00:20<00:55,  2.78it/s] 31%|███       | 69/221 [00:20<01:09,  2.18it/s] 32%|███▏      | 70/221 [00:21<01:01,  2.45it/s] 32%|███▏      | 71/221 [00:21<00:52,  2.88it/s] 33%|███▎      | 72/221 [00:21<00:53,  2.77it/s] 33%|███▎      | 73/221 [00:22<00:47,  3.12it/s] 33%|███▎      | 74/221 [00:22<00:37,  3.93it/s] 34%|███▍      | 75/221 [00:22<00:39,  3.72it/s] 34%|███▍      | 76/221 [00:22<00:36,  4.03it/s] 35%|███▍      | 77/221 [00:23<00:43,  3.33it/s] 35%|███▌      | 78/221 [00:23<00:39,  3.66it/s] 36%|███▌      | 79/221 [00:24<00:58,  2.42it/s] 36%|███▌      | 80/221 [00:24<00:56,  2.52it/s] 37%|███▋      | 81/221 [00:24<00:45,  3.08it/s] 37%|███▋      | 82/221 [00:24<00:49,  2.80it/s] 38%|███▊      | 83/221 [00:25<00:46,  2.99it/s] 38%|███▊      | 84/221 [00:25<00:41,  3.28it/s] 38%|███▊      | 85/221 [00:25<00:33,  4.07it/s] 39%|███▉      | 86/221 [00:25<00:30,  4.39it/s] 39%|███▉      | 87/221 [00:25<00:29,  4.59it/s] 40%|███▉      | 88/221 [00:26<00:42,  3.10it/s] 40%|████      | 89/221 [00:27<00:48,  2.72it/s] 41%|████      | 90/221 [00:27<00:42,  3.08it/s] 41%|████      | 91/221 [00:27<00:36,  3.57it/s] 42%|████▏     | 92/221 [00:27<00:40,  3.17it/s] 42%|████▏     | 93/221 [00:28<00:52,  2.45it/s] 43%|████▎     | 94/221 [00:28<00:46,  2.71it/s] 43%|████▎     | 95/221 [00:29<00:43,  2.90it/s] 43%|████▎     | 96/221 [00:29<00:42,  2.91it/s] 44%|████▍     | 97/221 [00:29<00:39,  3.10it/s] 44%|████▍     | 98/221 [00:30<00:44,  2.77it/s] 45%|████▍     | 99/221 [00:30<00:43,  2.79it/s] 45%|████▌     | 100/221 [00:30<00:40,  2.98it/s] 46%|████▌     | 101/221 [00:30<00:37,  3.19it/s] 46%|████▌     | 102/221 [00:31<00:43,  2.72it/s] 47%|████▋     | 103/221 [00:31<00:37,  3.14it/s] 47%|████▋     | 104/221 [00:31<00:36,  3.23it/s] 48%|████▊     | 105/221 [00:32<00:39,  2.96it/s] 48%|████▊     | 106/221 [00:32<00:40,  2.87it/s] 48%|████▊     | 107/221 [00:33<00:39,  2.86it/s] 49%|████▉     | 108/221 [00:33<00:36,  3.06it/s] 49%|████▉     | 109/221 [00:33<00:31,  3.55it/s] 50%|████▉     | 110/221 [00:33<00:31,  3.50it/s] 50%|█████     | 111/221 [00:34<00:36,  3.01it/s] 51%|█████     | 112/221 [00:34<00:35,  3.06it/s] 51%|█████     | 113/221 [00:34<00:32,  3.37it/s] 52%|█████▏    | 114/221 [00:34<00:25,  4.14it/s] 52%|█████▏    | 115/221 [00:35<00:28,  3.75it/s] 52%|█████▏    | 116/221 [00:36<00:46,  2.25it/s] 53%|█████▎    | 117/221 [00:36<00:43,  2.40it/s] 53%|█████▎    | 118/221 [00:36<00:37,  2.76it/s] 54%|█████▍    | 119/221 [00:37<00:35,  2.85it/s] 54%|█████▍    | 120/221 [00:37<00:32,  3.07it/s] 55%|█████▍    | 121/221 [00:37<00:26,  3.79it/s] 55%|█████▌    | 122/221 [00:37<00:25,  3.90it/s] 56%|█████▌    | 123/221 [00:37<00:25,  3.85it/s] 56%|█████▌    | 124/221 [00:38<00:26,  3.67it/s] 57%|█████▋    | 125/221 [00:38<00:33,  2.88it/s] 57%|█████▋    | 126/221 [00:39<00:31,  3.00it/s] 57%|█████▋    | 127/221 [00:39<00:38,  2.43it/s] 58%|█████▊    | 128/221 [00:40<00:37,  2.46it/s] 58%|█████▊    | 129/221 [00:40<00:31,  2.95it/s] 59%|█████▉    | 130/221 [00:40<00:27,  3.27it/s] 59%|█████▉    | 131/221 [00:40<00:21,  4.09it/s] 60%|█████▉    | 132/221 [00:40<00:25,  3.53it/s] 60%|██████    | 133/221 [00:41<00:29,  2.96it/s] 61%|██████    | 134/221 [00:41<00:32,  2.71it/s] 61%|██████    | 135/221 [00:42<00:32,  2.68it/s] 62%|██████▏   | 136/221 [00:42<00:33,  2.55it/s] 62%|██████▏   | 137/221 [00:43<00:35,  2.36it/s] 62%|██████▏   | 138/221 [00:43<00:36,  2.30it/s] 63%|██████▎   | 139/221 [00:44<00:36,  2.25it/s] 63%|██████▎   | 140/221 [00:44<00:35,  2.31it/s] 64%|██████▍   | 141/221 [00:44<00:33,  2.38it/s] 64%|██████▍   | 142/221 [00:45<00:28,  2.73it/s] 65%|██████▍   | 143/221 [00:45<00:27,  2.85it/s] 65%|██████▌   | 144/221 [00:45<00:26,  2.89it/s] 66%|██████▌   | 145/221 [00:45<00:22,  3.38it/s] 66%|██████▌   | 146/221 [00:46<00:19,  3.88it/s] 67%|██████▋   | 147/221 [00:46<00:21,  3.51it/s] 67%|██████▋   | 148/221 [00:46<00:25,  2.83it/s] 67%|██████▋   | 149/221 [00:47<00:24,  2.98it/s] 68%|██████▊   | 150/221 [00:47<00:21,  3.35it/s] 68%|██████▊   | 151/221 [00:48<00:26,  2.64it/s] 69%|██████▉   | 152/221 [00:48<00:31,  2.23it/s] 69%|██████▉   | 153/221 [00:48<00:25,  2.62it/s] 70%|██████▉   | 154/221 [00:49<00:21,  3.05it/s] 70%|███████   | 155/221 [00:49<00:21,  3.06it/s] 71%|███████   | 156/221 [00:49<00:21,  3.02it/s] 71%|███████   | 157/221 [00:50<00:33,  1.90it/s] 71%|███████▏  | 158/221 [00:51<00:29,  2.15it/s] 72%|███████▏  | 159/221 [00:51<00:23,  2.66it/s] 72%|███████▏  | 160/221 [00:51<00:19,  3.12it/s] 73%|███████▎  | 161/221 [00:51<00:16,  3.57it/s] 73%|███████▎  | 162/221 [00:51<00:14,  3.98it/s] 74%|███████▍  | 163/221 [00:52<00:16,  3.56it/s] 74%|███████▍  | 164/221 [00:52<00:16,  3.37it/s] 75%|███████▍  | 165/221 [00:52<00:18,  3.07it/s] 75%|███████▌  | 166/221 [00:53<00:24,  2.28it/s] 76%|███████▌  | 167/221 [00:53<00:18,  2.85it/s] 76%|███████▌  | 168/221 [00:54<00:19,  2.69it/s] 76%|███████▋  | 169/221 [00:54<00:16,  3.22it/s] 77%|███████▋  | 170/221 [00:55<00:23,  2.20it/s] 77%|███████▋  | 171/221 [00:55<00:19,  2.53it/s] 78%|███████▊  | 172/221 [00:55<00:17,  2.82it/s] 78%|███████▊  | 173/221 [00:55<00:17,  2.80it/s] 79%|███████▊  | 174/221 [00:56<00:16,  2.82it/s] 79%|███████▉  | 175/221 [00:56<00:16,  2.87it/s] 80%|███████▉  | 176/221 [00:56<00:14,  3.07it/s] 80%|████████  | 177/221 [00:57<00:13,  3.35it/s] 81%|████████  | 178/221 [00:57<00:15,  2.70it/s] 81%|████████  | 179/221 [00:58<00:16,  2.50it/s] 81%|████████▏ | 180/221 [00:58<00:13,  2.95it/s] 82%|████████▏ | 181/221 [00:58<00:11,  3.55it/s] 82%|████████▏ | 182/221 [00:58<00:12,  3.03it/s] 83%|████████▎ | 183/221 [00:59<00:12,  3.00it/s] 83%|████████▎ | 184/221 [00:59<00:10,  3.37it/s] 84%|████████▎ | 185/221 [00:59<00:09,  3.78it/s] 84%|████████▍ | 186/221 [01:00<00:10,  3.36it/s] 85%|████████▍ | 187/221 [01:00<00:10,  3.13it/s] 85%|████████▌ | 188/221 [01:00<00:10,  3.21it/s] 86%|████████▌ | 189/221 [01:00<00:09,  3.37it/s] 86%|████████▌ | 190/221 [01:01<00:09,  3.13it/s] 86%|████████▋ | 191/221 [01:01<00:07,  3.84it/s] 87%|████████▋ | 192/221 [01:01<00:07,  3.79it/s] 87%|████████▋ | 193/221 [01:01<00:06,  4.65it/s] 88%|████████▊ | 194/221 [01:02<00:06,  4.49it/s] 88%|████████▊ | 195/221 [01:02<00:06,  4.29it/s] 89%|████████▊ | 196/221 [01:02<00:06,  4.14it/s] 89%|████████▉ | 197/221 [01:02<00:05,  4.23it/s] 90%|████████▉ | 198/221 [01:03<00:06,  3.56it/s] 90%|█████████ | 199/221 [01:03<00:06,  3.54it/s] 90%|█████████ | 200/221 [01:03<00:06,  3.07it/s] 91%|█████████ | 201/221 [01:04<00:06,  3.23it/s] 91%|█████████▏| 202/221 [01:04<00:06,  2.84it/s] 92%|█████████▏| 203/221 [01:04<00:05,  3.17it/s] 92%|█████████▏| 204/221 [01:05<00:05,  3.40it/s] 93%|█████████▎| 205/221 [01:05<00:03,  4.04it/s] 93%|█████████▎| 206/221 [01:05<00:04,  3.20it/s] 94%|█████████▎| 207/221 [01:06<00:04,  3.30it/s] 94%|█████████▍| 208/221 [01:06<00:04,  2.91it/s] 95%|█████████▍| 209/221 [01:06<00:04,  2.87it/s] 95%|█████████▌| 210/221 [01:06<00:03,  3.47it/s] 95%|█████████▌| 211/221 [01:07<00:03,  3.01it/s] 96%|█████████▌| 212/221 [01:07<00:02,  3.05it/s] 96%|█████████▋| 213/221 [01:07<00:02,  3.44it/s] 97%|█████████▋| 214/221 [01:08<00:02,  2.71it/s] 97%|█████████▋| 215/221 [01:08<00:01,  3.11it/s] 98%|█████████▊| 216/221 [01:08<00:01,  3.16it/s] 98%|█████████▊| 217/221 [01:09<00:01,  2.51it/s] 99%|█████████▊| 218/221 [01:09<00:01,  2.72it/s] 99%|█████████▉| 219/221 [01:10<00:00,  2.68it/s]100%|█████████▉| 220/221 [01:11<00:00,  1.91it/s]100%|██████████| 221/221 [01:11<00:00,  2.14it/s]100%|██████████| 221/221 [01:11<00:00,  3.09it/s]
  0%|          | 0/221 [00:00<?, ?it/s]  0%|          | 1/221 [00:00<01:06,  3.30it/s]  1%|          | 2/221 [00:00<01:06,  3.30it/s]  1%|▏         | 3/221 [00:00<01:05,  3.30it/s]  2%|▏         | 4/221 [00:01<01:05,  3.31it/s]  2%|▏         | 5/221 [00:01<01:05,  3.31it/s]  3%|▎         | 6/221 [00:01<01:05,  3.31it/s]  3%|▎         | 7/221 [00:02<01:04,  3.31it/s]  4%|▎         | 8/221 [00:02<01:04,  3.31it/s]  4%|▍         | 9/221 [00:02<01:04,  3.31it/s]  5%|▍         | 10/221 [00:03<01:03,  3.31it/s]  5%|▍         | 11/221 [00:03<01:03,  3.31it/s]  5%|▌         | 12/221 [00:03<01:03,  3.31it/s]  6%|▌         | 13/221 [00:03<01:02,  3.31it/s]  6%|▋         | 14/221 [00:04<01:02,  3.31it/s]  7%|▋         | 15/221 [00:04<01:02,  3.31it/s]  7%|▋         | 16/221 [00:04<01:01,  3.31it/s]  8%|▊         | 17/221 [00:05<01:01,  3.31it/s]  8%|▊         | 18/221 [00:05<01:01,  3.31it/s]  9%|▊         | 19/221 [00:05<01:01,  3.31it/s]  9%|▉         | 20/221 [00:06<01:00,  3.31it/s] 10%|▉         | 21/221 [00:06<01:00,  3.31it/s] 10%|▉         | 22/221 [00:06<01:00,  3.31it/s] 10%|█         | 23/221 [00:06<00:59,  3.31it/s] 11%|█         | 24/221 [00:07<00:59,  3.31it/s] 11%|█▏        | 25/221 [00:07<00:59,  3.31it/s] 12%|█▏        | 26/221 [00:07<00:58,  3.31it/s] 12%|█▏        | 27/221 [00:08<00:58,  3.31it/s] 13%|█▎        | 28/221 [00:08<00:58,  3.31it/s] 13%|█▎        | 29/221 [00:08<00:58,  3.31it/s] 14%|█▎        | 30/221 [00:09<00:57,  3.31it/s] 14%|█▍        | 31/221 [00:09<00:57,  3.31it/s] 14%|█▍        | 32/221 [00:09<00:57,  3.31it/s] 15%|█▍        | 33/221 [00:09<00:56,  3.31it/s] 15%|█▌        | 34/221 [00:10<00:56,  3.31it/s] 16%|█▌        | 35/221 [00:10<00:56,  3.31it/s] 16%|█▋        | 36/221 [00:10<00:55,  3.31it/s] 17%|█▋        | 37/221 [00:11<00:55,  3.31it/s] 17%|█▋        | 38/221 [00:11<00:55,  3.31it/s] 18%|█▊        | 39/221 [00:11<00:55,  3.31it/s] 18%|█▊        | 40/221 [00:12<00:54,  3.31it/s] 19%|█▊        | 41/221 [00:12<00:54,  3.31it/s] 19%|█▉        | 42/221 [00:12<00:54,  3.31it/s] 19%|█▉        | 43/221 [00:13<00:53,  3.31it/s] 20%|█▉        | 44/221 [00:13<00:53,  3.31it/s] 20%|██        | 45/221 [00:13<00:53,  3.31it/s] 21%|██        | 46/221 [00:13<00:52,  3.31it/s] 21%|██▏       | 47/221 [00:14<00:52,  3.31it/s] 22%|██▏       | 48/221 [00:14<00:52,  3.31it/s] 22%|██▏       | 49/221 [00:14<00:51,  3.31it/s] 23%|██▎       | 50/221 [00:15<00:51,  3.31it/s] 23%|██▎       | 51/221 [00:15<00:51,  3.31it/s] 24%|██▎       | 52/221 [00:15<00:51,  3.31it/s] 24%|██▍       | 53/221 [00:16<00:50,  3.31it/s] 24%|██▍       | 54/221 [00:16<00:50,  3.31it/s] 25%|██▍       | 55/221 [00:16<00:50,  3.31it/s] 25%|██▌       | 56/221 [00:16<00:49,  3.31it/s] 26%|██▌       | 57/221 [00:17<00:49,  3.31it/s] 26%|██▌       | 58/221 [00:17<00:49,  3.31it/s] 27%|██▋       | 59/221 [00:17<00:48,  3.31it/s] 27%|██▋       | 60/221 [00:18<00:48,  3.31it/s] 28%|██▊       | 61/221 [00:18<00:48,  3.31it/s] 28%|██▊       | 62/221 [00:18<00:48,  3.31it/s] 29%|██▊       | 63/221 [00:19<00:47,  3.31it/s] 29%|██▉       | 64/221 [00:19<00:47,  3.31it/s] 29%|██▉       | 65/221 [00:19<00:47,  3.31it/s] 30%|██▉       | 66/221 [00:19<00:46,  3.31it/s] 30%|███       | 67/221 [00:20<00:46,  3.31it/s] 31%|███       | 68/221 [00:20<00:46,  3.31it/s] 31%|███       | 69/221 [00:20<00:45,  3.31it/s] 32%|███▏      | 70/221 [00:21<00:45,  3.31it/s] 32%|███▏      | 71/221 [00:21<00:45,  3.31it/s] 33%|███▎      | 72/221 [00:21<00:45,  3.31it/s] 33%|███▎      | 73/221 [00:22<00:44,  3.31it/s] 33%|███▎      | 74/221 [00:22<00:44,  3.31it/s] 34%|███▍      | 75/221 [00:22<00:44,  3.31it/s] 34%|███▍      | 76/221 [00:22<00:43,  3.31it/s] 35%|███▍      | 77/221 [00:23<00:43,  3.31it/s] 35%|███▌      | 78/221 [00:23<00:43,  3.31it/s] 36%|███▌      | 79/221 [00:23<00:42,  3.31it/s] 36%|███▌      | 80/221 [00:24<00:42,  3.31it/s] 37%|███▋      | 81/221 [00:24<00:42,  3.31it/s] 37%|███▋      | 82/221 [00:24<00:42,  3.31it/s] 38%|███▊      | 83/221 [00:25<00:41,  3.31it/s] 38%|███▊      | 84/221 [00:25<00:41,  3.31it/s] 38%|███▊      | 85/221 [00:25<00:41,  3.31it/s] 39%|███▉      | 86/221 [00:26<00:40,  3.31it/s] 39%|███▉      | 87/221 [00:26<00:40,  3.31it/s] 40%|███▉      | 88/221 [00:26<00:40,  3.31it/s] 40%|████      | 89/221 [00:26<00:39,  3.31it/s] 41%|████      | 90/221 [00:27<00:39,  3.31it/s] 41%|████      | 91/221 [00:27<00:39,  3.31it/s] 42%|████▏     | 92/221 [00:27<00:39,  3.31it/s] 42%|████▏     | 93/221 [00:28<00:38,  3.31it/s] 43%|████▎     | 94/221 [00:28<00:38,  3.31it/s] 43%|████▎     | 95/221 [00:28<00:38,  3.31it/s] 43%|████▎     | 96/221 [00:29<00:37,  3.31it/s] 44%|████▍     | 97/221 [00:29<00:37,  3.31it/s] 44%|████▍     | 98/221 [00:29<00:37,  3.31it/s] 45%|████▍     | 99/221 [00:29<00:36,  3.31it/s] 45%|████▌     | 100/221 [00:30<00:36,  3.31it/s] 46%|████▌     | 101/221 [00:30<00:36,  3.31it/s] 46%|████▌     | 102/221 [00:30<00:35,  3.31it/s] 47%|████▋     | 103/221 [00:31<00:35,  3.31it/s] 47%|████▋     | 104/221 [00:31<00:35,  3.31it/s] 48%|████▊     | 105/221 [00:31<00:35,  3.31it/s] 48%|████▊     | 106/221 [00:32<00:34,  3.31it/s] 48%|████▊     | 107/221 [00:32<00:34,  3.31it/s] 49%|████▉     | 108/221 [00:32<00:34,  3.31it/s] 49%|████▉     | 109/221 [00:32<00:33,  3.31it/s] 50%|████▉     | 110/221 [00:33<00:33,  3.31it/s] 50%|█████     | 111/221 [00:33<00:33,  3.31it/s] 51%|█████     | 112/221 [00:33<00:32,  3.31it/s] 51%|█████     | 113/221 [00:34<00:32,  3.31it/s] 52%|█████▏    | 114/221 [00:34<00:32,  3.31it/s] 52%|█████▏    | 115/221 [00:34<00:32,  3.31it/s] 52%|█████▏    | 116/221 [00:35<00:31,  3.31it/s] 53%|█████▎    | 117/221 [00:35<00:31,  3.31it/s] 53%|█████▎    | 118/221 [00:35<00:31,  3.31it/s] 54%|█████▍    | 119/221 [00:35<00:30,  3.31it/s] 54%|█████▍    | 120/221 [00:36<00:30,  3.31it/s] 55%|█████▍    | 121/221 [00:36<00:30,  3.31it/s] 55%|█████▌    | 122/221 [00:36<00:29,  3.31it/s] 56%|█████▌    | 123/221 [00:37<00:29,  3.31it/s] 56%|█████▌    | 124/221 [00:37<00:29,  3.31it/s] 57%|█████▋    | 125/221 [00:37<00:29,  3.31it/s] 57%|█████▋    | 126/221 [00:38<00:28,  3.31it/s] 57%|█████▋    | 127/221 [00:38<00:28,  3.31it/s] 58%|█████▊    | 128/221 [00:38<00:28,  3.31it/s] 58%|█████▊    | 129/221 [00:39<00:27,  3.31it/s] 59%|█████▉    | 130/221 [00:39<00:27,  3.31it/s] 59%|█████▉    | 131/221 [00:39<00:27,  3.31it/s] 60%|█████▉    | 132/221 [00:39<00:26,  3.31it/s] 60%|██████    | 133/221 [00:40<00:26,  3.31it/s] 61%|██████    | 134/221 [00:40<00:26,  3.31it/s] 61%|██████    | 135/221 [00:40<00:26,  3.31it/s] 62%|██████▏   | 136/221 [00:41<00:25,  3.31it/s] 62%|██████▏   | 137/221 [00:41<00:25,  3.31it/s] 62%|██████▏   | 138/221 [00:41<00:25,  3.31it/s] 63%|██████▎   | 139/221 [00:42<00:24,  3.31it/s] 63%|██████▎   | 140/221 [00:42<00:24,  3.31it/s] 64%|██████▍   | 141/221 [00:42<00:24,  3.31it/s] 64%|██████▍   | 142/221 [00:42<00:23,  3.31it/s] 65%|██████▍   | 143/221 [00:43<00:23,  3.31it/s] 65%|██████▌   | 144/221 [00:43<00:23,  3.31it/s] 66%|██████▌   | 145/221 [00:43<00:22,  3.31it/s] 66%|██████▌   | 146/221 [00:44<00:22,  3.31it/s] 67%|██████▋   | 147/221 [00:44<00:22,  3.31it/s] 67%|██████▋   | 148/221 [00:44<00:22,  3.30it/s] 67%|██████▋   | 149/221 [00:45<00:21,  3.30it/s] 68%|██████▊   | 150/221 [00:45<00:21,  3.30it/s] 68%|██████▊   | 151/221 [00:45<00:21,  3.31it/s] 69%|██████▉   | 152/221 [00:45<00:20,  3.31it/s] 69%|██████▉   | 153/221 [00:46<00:20,  3.31it/s] 70%|██████▉   | 154/221 [00:46<00:20,  3.31it/s] 70%|███████   | 155/221 [00:46<00:19,  3.31it/s] 71%|███████   | 156/221 [00:47<00:19,  3.31it/s] 71%|███████   | 157/221 [00:47<00:19,  3.31it/s] 71%|███████▏  | 158/221 [00:47<00:19,  3.31it/s] 72%|███████▏  | 159/221 [00:48<00:18,  3.31it/s] 72%|███████▏  | 160/221 [00:48<00:18,  3.31it/s] 73%|███████▎  | 161/221 [00:48<00:18,  3.31it/s] 73%|███████▎  | 162/221 [00:48<00:17,  3.31it/s] 74%|███████▍  | 163/221 [00:49<00:17,  3.31it/s] 74%|███████▍  | 164/221 [00:49<00:17,  3.31it/s] 75%|███████▍  | 165/221 [00:49<00:16,  3.31it/s] 75%|███████▌  | 166/221 [00:50<00:16,  3.31it/s] 76%|███████▌  | 167/221 [00:50<00:16,  3.31it/s] 76%|███████▌  | 168/221 [00:50<00:16,  3.30it/s] 76%|███████▋  | 169/221 [00:51<00:15,  3.30it/s] 77%|███████▋  | 170/221 [00:51<00:15,  3.31it/s] 77%|███████▋  | 171/221 [00:51<00:15,  3.31it/s] 78%|███████▊  | 172/221 [00:52<00:14,  3.31it/s] 78%|███████▊  | 173/221 [00:52<00:14,  3.30it/s] 79%|███████▊  | 174/221 [00:52<00:14,  3.31it/s] 79%|███████▉  | 175/221 [00:52<00:13,  3.31it/s] 80%|███████▉  | 176/221 [00:53<00:13,  3.30it/s] 80%|████████  | 177/221 [00:53<00:13,  3.30it/s] 81%|████████  | 178/221 [00:53<00:13,  3.30it/s] 81%|████████  | 179/221 [00:54<00:12,  3.30it/s] 81%|████████▏ | 180/221 [00:54<00:12,  3.30it/s] 82%|████████▏ | 181/221 [00:54<00:12,  3.30it/s] 82%|████████▏ | 182/221 [00:55<00:11,  3.30it/s] 83%|████████▎ | 183/221 [00:55<00:11,  3.30it/s] 83%|████████▎ | 184/221 [00:55<00:11,  3.30it/s] 84%|████████▎ | 185/221 [00:55<00:10,  3.30it/s] 84%|████████▍ | 186/221 [00:56<00:10,  3.30it/s] 85%|████████▍ | 187/221 [00:56<00:10,  3.30it/s] 85%|████████▌ | 188/221 [00:56<00:09,  3.30it/s] 86%|████████▌ | 189/221 [00:57<00:09,  3.30it/s] 86%|████████▌ | 190/221 [00:57<00:09,  3.30it/s] 86%|████████▋ | 191/221 [00:57<00:09,  3.30it/s] 87%|████████▋ | 192/221 [00:58<00:08,  3.30it/s] 87%|████████▋ | 193/221 [00:58<00:08,  3.30it/s] 88%|████████▊ | 194/221 [00:58<00:08,  3.30it/s] 88%|████████▊ | 195/221 [00:58<00:07,  3.30it/s] 89%|████████▊ | 196/221 [00:59<00:07,  3.30it/s] 89%|████████▉ | 197/221 [00:59<00:07,  3.30it/s] 90%|████████▉ | 198/221 [00:59<00:06,  3.30it/s] 90%|█████████ | 199/221 [01:00<00:06,  3.30it/s] 90%|█████████ | 200/221 [01:00<00:06,  3.30it/s] 91%|█████████ | 201/221 [01:00<00:06,  3.30it/s] 91%|█████████▏| 202/221 [01:01<00:05,  3.30it/s] 92%|█████████▏| 203/221 [01:01<00:05,  3.30it/s] 92%|█████████▏| 204/221 [01:01<00:05,  3.30it/s] 93%|█████████▎| 205/221 [01:02<00:04,  3.30it/s] 93%|█████████▎| 206/221 [01:02<00:04,  3.30it/s] 94%|█████████▎| 207/221 [01:02<00:04,  3.30it/s] 94%|█████████▍| 208/221 [01:02<00:03,  3.30it/s] 95%|█████████▍| 209/221 [01:03<00:03,  3.30it/s] 95%|█████████▌| 210/221 [01:03<00:03,  3.30it/s] 95%|█████████▌| 211/221 [01:03<00:03,  3.30it/s] 96%|█████████▌| 212/221 [01:04<00:02,  3.30it/s] 96%|█████████▋| 213/221 [01:04<00:02,  3.30it/s] 97%|█████████▋| 214/221 [01:04<00:02,  3.30it/s] 97%|█████████▋| 215/221 [01:05<00:01,  3.30it/s] 98%|█████████▊| 216/221 [01:05<00:01,  3.30it/s] 98%|█████████▊| 217/221 [01:05<00:01,  3.30it/s] 99%|█████████▊| 218/221 [01:05<00:00,  3.30it/s] 99%|█████████▉| 219/221 [01:06<00:00,  3.30it/s]100%|█████████▉| 220/221 [01:06<00:00,  3.30it/s]100%|██████████| 221/221 [01:06<00:00,  3.30it/s]100%|██████████| 221/221 [01:06<00:00,  3.31it/s]
  0%|          | 0/221 [00:00<?, ?it/s]  0%|          | 1/221 [00:00<00:23,  9.17it/s]  1%|          | 2/221 [00:00<00:50,  4.32it/s]  1%|▏         | 3/221 [00:00<00:39,  5.48it/s]  2%|▏         | 4/221 [00:01<01:18,  2.78it/s]  2%|▏         | 5/221 [00:01<01:26,  2.49it/s]  3%|▎         | 7/221 [00:02<01:04,  3.33it/s]  4%|▎         | 8/221 [00:02<01:23,  2.55it/s]  4%|▍         | 9/221 [00:03<01:27,  2.41it/s]  5%|▍         | 10/221 [00:03<01:22,  2.54it/s]  5%|▍         | 11/221 [00:03<01:27,  2.40it/s]  5%|▌         | 12/221 [00:04<01:17,  2.70it/s]  6%|▌         | 13/221 [00:04<01:39,  2.09it/s]  6%|▋         | 14/221 [00:05<01:41,  2.03it/s]  7%|▋         | 15/221 [00:05<01:20,  2.56it/s]  7%|▋         | 16/221 [00:05<01:04,  3.17it/s]  8%|▊         | 17/221 [00:06<01:43,  1.98it/s]  8%|▊         | 18/221 [00:07<01:30,  2.25it/s]  9%|▊         | 19/221 [00:07<01:16,  2.63it/s] 10%|▉         | 21/221 [00:07<00:49,  4.06it/s] 10%|▉         | 22/221 [00:07<00:42,  4.69it/s] 10%|█         | 23/221 [00:07<00:44,  4.49it/s] 11%|█         | 24/221 [00:08<00:44,  4.42it/s] 11%|█▏        | 25/221 [00:08<00:51,  3.79it/s] 12%|█▏        | 26/221 [00:08<00:59,  3.26it/s] 12%|█▏        | 27/221 [00:09<01:01,  3.13it/s] 13%|█▎        | 28/221 [00:09<01:11,  2.71it/s] 13%|█▎        | 29/221 [00:10<01:30,  2.13it/s] 14%|█▎        | 30/221 [00:10<01:11,  2.65it/s] 14%|█▍        | 31/221 [00:10<00:58,  3.24it/s] 15%|█▍        | 33/221 [00:11<00:52,  3.57it/s] 15%|█▌        | 34/221 [00:11<01:03,  2.93it/s] 16%|█▌        | 35/221 [00:12<01:03,  2.94it/s] 16%|█▋        | 36/221 [00:12<01:08,  2.71it/s] 17%|█▋        | 37/221 [00:12<01:09,  2.66it/s] 17%|█▋        | 38/221 [00:13<00:59,  3.09it/s] 18%|█▊        | 39/221 [00:13<01:12,  2.51it/s] 18%|█▊        | 40/221 [00:13<01:08,  2.65it/s] 19%|█▉        | 42/221 [00:14<00:50,  3.54it/s] 19%|█▉        | 43/221 [00:14<00:45,  3.90it/s] 20%|█▉        | 44/221 [00:14<00:41,  4.28it/s] 20%|██        | 45/221 [00:15<00:51,  3.42it/s] 21%|██        | 46/221 [00:15<00:43,  4.01it/s] 21%|██▏       | 47/221 [00:15<00:41,  4.23it/s] 22%|██▏       | 48/221 [00:15<00:38,  4.45it/s] 22%|██▏       | 49/221 [00:15<00:43,  3.94it/s] 23%|██▎       | 50/221 [00:17<01:25,  2.00it/s] 23%|██▎       | 51/221 [00:17<01:09,  2.43it/s] 24%|██▎       | 52/221 [00:17<00:58,  2.89it/s] 24%|██▍       | 53/221 [00:17<00:46,  3.63it/s] 24%|██▍       | 54/221 [00:18<01:00,  2.76it/s] 25%|██▌       | 56/221 [00:18<00:38,  4.29it/s] 26%|██▌       | 57/221 [00:18<00:36,  4.55it/s] 26%|██▌       | 58/221 [00:18<00:46,  3.49it/s] 27%|██▋       | 59/221 [00:19<00:52,  3.06it/s] 27%|██▋       | 60/221 [00:19<00:44,  3.65it/s] 28%|██▊       | 61/221 [00:19<00:37,  4.32it/s] 28%|██▊       | 62/221 [00:19<00:31,  5.03it/s] 29%|██▊       | 63/221 [00:20<00:33,  4.77it/s] 29%|██▉       | 64/221 [00:20<00:32,  4.89it/s] 29%|██▉       | 65/221 [00:20<00:37,  4.15it/s] 30%|██▉       | 66/221 [00:20<00:31,  4.92it/s] 30%|███       | 67/221 [00:21<00:43,  3.55it/s] 31%|███       | 68/221 [00:21<00:34,  4.40it/s] 31%|███       | 69/221 [00:21<00:41,  3.69it/s] 32%|███▏      | 70/221 [00:21<00:42,  3.59it/s] 32%|███▏      | 71/221 [00:22<00:44,  3.39it/s] 33%|███▎      | 72/221 [00:22<00:49,  3.01it/s] 33%|███▎      | 73/221 [00:22<00:44,  3.31it/s] 33%|███▎      | 74/221 [00:23<00:41,  3.57it/s] 34%|███▍      | 75/221 [00:23<00:43,  3.34it/s] 34%|███▍      | 76/221 [00:23<00:35,  4.08it/s] 35%|███▍      | 77/221 [00:24<00:46,  3.09it/s] 35%|███▌      | 78/221 [00:24<00:52,  2.73it/s] 36%|███▌      | 79/221 [00:24<00:50,  2.83it/s] 36%|███▌      | 80/221 [00:25<00:43,  3.21it/s] 37%|███▋      | 81/221 [00:25<00:39,  3.50it/s] 37%|███▋      | 82/221 [00:26<01:04,  2.16it/s] 38%|███▊      | 83/221 [00:26<01:08,  2.00it/s] 38%|███▊      | 84/221 [00:27<01:01,  2.22it/s] 38%|███▊      | 85/221 [00:27<00:56,  2.42it/s] 39%|███▉      | 86/221 [00:27<00:48,  2.76it/s] 39%|███▉      | 87/221 [00:28<00:49,  2.69it/s] 40%|███▉      | 88/221 [00:28<00:39,  3.40it/s] 40%|████      | 89/221 [00:28<00:46,  2.87it/s] 41%|████      | 90/221 [00:28<00:37,  3.50it/s] 42%|████▏     | 92/221 [00:29<00:28,  4.49it/s] 42%|████▏     | 93/221 [00:29<00:36,  3.51it/s] 43%|████▎     | 94/221 [00:29<00:31,  4.05it/s] 43%|████▎     | 95/221 [00:30<00:41,  3.02it/s] 43%|████▎     | 96/221 [00:30<00:37,  3.38it/s] 44%|████▍     | 97/221 [00:30<00:32,  3.81it/s] 44%|████▍     | 98/221 [00:30<00:30,  4.09it/s] 45%|████▍     | 99/221 [00:31<00:30,  4.00it/s] 45%|████▌     | 100/221 [00:31<00:28,  4.25it/s] 46%|████▌     | 101/221 [00:31<00:28,  4.25it/s] 46%|████▌     | 102/221 [00:32<00:39,  3.01it/s] 47%|████▋     | 103/221 [00:32<00:31,  3.71it/s] 47%|████▋     | 104/221 [00:32<00:30,  3.81it/s] 48%|████▊     | 105/221 [00:32<00:26,  4.34it/s] 48%|████▊     | 106/221 [00:32<00:25,  4.55it/s] 49%|████▉     | 108/221 [00:33<00:19,  5.91it/s] 49%|████▉     | 109/221 [00:33<00:22,  4.98it/s] 50%|████▉     | 110/221 [00:33<00:33,  3.30it/s] 50%|█████     | 111/221 [00:34<00:40,  2.75it/s] 51%|█████     | 112/221 [00:34<00:42,  2.55it/s] 51%|█████     | 113/221 [00:35<00:35,  3.08it/s] 52%|█████▏    | 114/221 [00:35<00:31,  3.41it/s] 52%|█████▏    | 116/221 [00:35<00:26,  3.94it/s] 53%|█████▎    | 117/221 [00:35<00:25,  4.15it/s] 53%|█████▎    | 118/221 [00:36<00:35,  2.93it/s] 54%|█████▍    | 119/221 [00:36<00:30,  3.34it/s] 54%|█████▍    | 120/221 [00:36<00:28,  3.54it/s] 55%|█████▍    | 121/221 [00:37<00:25,  3.88it/s] 55%|█████▌    | 122/221 [00:37<00:22,  4.43it/s] 56%|█████▌    | 124/221 [00:37<00:21,  4.55it/s] 57%|█████▋    | 125/221 [00:37<00:21,  4.52it/s] 57%|█████▋    | 126/221 [00:38<00:20,  4.66it/s] 57%|█████▋    | 127/221 [00:38<00:21,  4.47it/s] 58%|█████▊    | 128/221 [00:38<00:17,  5.18it/s] 58%|█████▊    | 129/221 [00:38<00:16,  5.59it/s] 59%|█████▉    | 130/221 [00:38<00:16,  5.48it/s] 60%|█████▉    | 132/221 [00:38<00:11,  7.44it/s] 60%|██████    | 133/221 [00:39<00:15,  5.53it/s] 61%|██████    | 134/221 [00:39<00:13,  6.24it/s] 61%|██████    | 135/221 [00:39<00:16,  5.15it/s] 62%|██████▏   | 136/221 [00:40<00:21,  4.00it/s] 62%|██████▏   | 137/221 [00:40<00:20,  4.18it/s] 62%|██████▏   | 138/221 [00:40<00:17,  4.79it/s] 63%|██████▎   | 139/221 [00:40<00:24,  3.33it/s] 63%|██████▎   | 140/221 [00:41<00:25,  3.15it/s] 64%|██████▍   | 141/221 [00:41<00:22,  3.57it/s] 64%|██████▍   | 142/221 [00:41<00:23,  3.43it/s] 65%|██████▍   | 143/221 [00:41<00:19,  3.99it/s] 66%|██████▌   | 145/221 [00:42<00:20,  3.65it/s] 66%|██████▌   | 146/221 [00:42<00:22,  3.33it/s] 67%|██████▋   | 147/221 [00:43<00:18,  4.00it/s] 67%|██████▋   | 148/221 [00:43<00:17,  4.22it/s] 67%|██████▋   | 149/221 [00:43<00:14,  4.91it/s] 68%|██████▊   | 150/221 [00:43<00:13,  5.40it/s] 68%|██████▊   | 151/221 [00:44<00:19,  3.63it/s] 69%|██████▉   | 152/221 [00:45<00:36,  1.89it/s] 69%|██████▉   | 153/221 [00:45<00:31,  2.18it/s] 70%|██████▉   | 154/221 [00:45<00:25,  2.59it/s] 70%|███████   | 155/221 [00:45<00:22,  2.95it/s] 71%|███████   | 156/221 [00:46<00:21,  2.98it/s] 71%|███████   | 157/221 [00:46<00:18,  3.48it/s] 72%|███████▏  | 159/221 [00:46<00:13,  4.67it/s] 72%|███████▏  | 160/221 [00:46<00:12,  4.79it/s] 73%|███████▎  | 162/221 [00:47<00:12,  4.55it/s] 74%|███████▍  | 163/221 [00:47<00:12,  4.56it/s] 74%|███████▍  | 164/221 [00:48<00:18,  3.03it/s] 75%|███████▌  | 166/221 [00:48<00:18,  2.95it/s] 76%|███████▌  | 168/221 [00:49<00:13,  3.96it/s] 76%|███████▋  | 169/221 [00:49<00:13,  3.92it/s] 77%|███████▋  | 170/221 [00:50<00:19,  2.64it/s] 77%|███████▋  | 171/221 [00:50<00:15,  3.19it/s] 78%|███████▊  | 172/221 [00:50<00:14,  3.39it/s] 79%|███████▊  | 174/221 [00:51<00:19,  2.43it/s] 79%|███████▉  | 175/221 [00:52<00:19,  2.32it/s] 80%|███████▉  | 176/221 [00:52<00:16,  2.67it/s] 80%|████████  | 177/221 [00:52<00:14,  2.97it/s] 81%|████████  | 178/221 [00:52<00:12,  3.42it/s] 81%|████████  | 179/221 [00:52<00:11,  3.79it/s] 81%|████████▏ | 180/221 [00:53<00:11,  3.71it/s] 82%|████████▏ | 181/221 [00:53<00:11,  3.58it/s] 82%|████████▏ | 182/221 [00:53<00:09,  4.31it/s] 83%|████████▎ | 183/221 [00:53<00:07,  4.78it/s] 83%|████████▎ | 184/221 [00:53<00:07,  5.27it/s] 84%|████████▎ | 185/221 [00:54<00:08,  4.22it/s] 84%|████████▍ | 186/221 [00:54<00:08,  4.15it/s] 85%|████████▍ | 187/221 [00:54<00:07,  4.56it/s] 85%|████████▌ | 188/221 [00:55<00:10,  3.16it/s] 86%|████████▌ | 189/221 [00:56<00:14,  2.20it/s] 86%|████████▌ | 190/221 [00:56<00:15,  2.07it/s] 87%|████████▋ | 192/221 [00:56<00:08,  3.28it/s] 87%|████████▋ | 193/221 [00:57<00:07,  3.57it/s] 88%|████████▊ | 194/221 [00:57<00:08,  3.18it/s] 88%|████████▊ | 195/221 [00:57<00:07,  3.47it/s] 89%|████████▊ | 196/221 [00:58<00:10,  2.34it/s] 89%|████████▉ | 197/221 [00:58<00:09,  2.53it/s] 90%|████████▉ | 198/221 [00:58<00:07,  2.97it/s] 90%|█████████ | 199/221 [00:59<00:06,  3.48it/s] 90%|█████████ | 200/221 [00:59<00:05,  3.54it/s] 91%|█████████ | 201/221 [00:59<00:05,  3.49it/s] 92%|█████████▏| 203/221 [00:59<00:03,  4.98it/s] 92%|█████████▏| 204/221 [01:00<00:04,  3.76it/s] 93%|█████████▎| 205/221 [01:00<00:03,  4.39it/s] 93%|█████████▎| 206/221 [01:00<00:03,  4.30it/s] 94%|█████████▎| 207/221 [01:01<00:04,  3.21it/s] 94%|█████████▍| 208/221 [01:01<00:03,  3.30it/s] 95%|█████████▍| 209/221 [01:01<00:03,  3.01it/s] 95%|█████████▌| 210/221 [01:02<00:03,  3.61it/s] 95%|█████████▌| 211/221 [01:02<00:02,  4.15it/s] 96%|█████████▌| 212/221 [01:02<00:02,  4.42it/s] 96%|█████████▋| 213/221 [01:03<00:03,  2.28it/s] 97%|█████████▋| 214/221 [01:03<00:03,  2.11it/s] 97%|█████████▋| 215/221 [01:04<00:02,  2.23it/s] 98%|█████████▊| 216/221 [01:04<00:01,  2.79it/s] 98%|█████████▊| 217/221 [01:04<00:01,  3.52it/s] 99%|█████████▊| 218/221 [01:04<00:00,  4.16it/s] 99%|█████████▉| 219/221 [01:05<00:00,  2.98it/s]100%|█████████▉| 220/221 [01:05<00:00,  2.51it/s]100%|██████████| 221/221 [01:06<00:00,  1.95it/s]100%|██████████| 221/221 [01:06<00:00,  3.32it/s]
09/10/2024 20:07:38 - INFO - __main__ -   ==== evaluation--ret%tvas--msrvtt_ret_ret_area_forward========

09/10/2024 20:07:38 - INFO - __main__ -   {'area_r1': 24.1, 'area_recall': '24.1/43.1/50.6', 'area_ravg': 39.3}
09/10/2024 20:07:38 - INFO - __main__ -   ==== evaluation--ret%tvas--msrvtt_ret_ret_area_backard========

09/10/2024 20:07:38 - INFO - __main__ -   {'forward_r1': 33.3, 'forward_recall': '33.3/64.7/75.1', 'forward_ravg': 57.7}
09/10/2024 20:07:38 - INFO - __main__ -   ==== evaluation--ret%tvas--msrvtt_ret_ret_area_back_with_video========

09/10/2024 20:07:38 - INFO - __main__ -   {'area_video_r1': 33.3, 'area_video_recall': '33.3/64.4/75.9', 'area_video_ravg': 57.8}
09/10/2024 20:07:38 - INFO - __main__ -   ==== evaluation--ret%tvas--msrvtt_ret_ret_itm_area========

09/10/2024 20:07:38 - INFO - __main__ -   {'area_video_r1': 52.8, 'area_video_recall': '52.8/75.5/82.8', 'area_video_ravg': 70.4, 'area_video_back_r1': 48.5, 'area_video_back_recall': '48.5/70.8/77.7', 'area_video_back_ravg': 65.7}
09/10/2024 20:07:38 - INFO - __main__ -   ==== evaluation--ret%tvas--msrvtt_ret_ret_itc_tvas========

09/10/2024 20:07:38 - INFO - __main__ -   {'video_r1': 31.0, 'video_recall': '31.0/53.2/63.1', 'video_ravg': 49.1}
09/10/2024 20:07:38 - INFO - __main__ -   ==== evaluation--ret%tvas--msrvtt_ret_ret_itm_tvas========

09/10/2024 20:07:38 - INFO - __main__ -   {'video_r1': 50.7, 'video_recall': '50.7/68.7/74.4', 'video_ravg': 64.6}
  0%|          | 0/1945 [00:00<?, ?it/s][h264 @ 0x55edf47c8500] mmco: unref short failure
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
  0%|          | 1/1945 [00:09<5:06:26,  9.46s/it][h264 @ 0x55d5b5ede0c0] mmco: unref short failure
[h264 @ 0x55d5b5ede0c0] mmco: unref short failure
[h264 @ 0x55d5b5ede0c0] mmco: unref short failure
[h264 @ 0x55d5b5ede0c0] mmco: unref short failure
  0%|          | 2/1945 [00:13<3:20:46,  6.20s/it][h264 @ 0x55edf647fc80] mmco: unref short failure
[h264 @ 0x56439b77d0c0] mmco: unref short failure
[h264 @ 0x56439b77d0c0] mmco: unref short failure
[h264 @ 0x56439b77d0c0] mmco: unref short failure
[h264 @ 0x56439b77d0c0] mmco: unref short failure
[h264 @ 0x56439b77d0c0] mmco: unref short failure
[h264 @ 0x56439b77d0c0] mmco: unref short failure
  0%|          | 3/1945 [00:17<2:53:13,  5.35s/it][h264 @ 0x564390cbb300] mmco: unref short failure
[h264 @ 0x564390cbb300] mmco: unref short failure
[h264 @ 0x55a838f9b580] mmco: unref short failure
  0%|          | 4/1945 [00:22<2:40:40,  4.97s/it][h264 @ 0x55d5b735d740] mmco: unref short failure
[h264 @ 0x55d5b735d740] mmco: unref short failure
[h264 @ 0x55d5b19fde80] mmco: unref short failure
[h264 @ 0x55d5b19fde80] mmco: unref short failure
[h264 @ 0x55d5b19fde80] mmco: unref short failure
  0%|          | 5/1945 [00:26<2:38:22,  4.90s/it][h264 @ 0x564390cbfec0] mmco: unref short failure
[h264 @ 0x564390cbfec0] mmco: unref short failure
  0%|          | 6/1945 [00:32<2:46:05,  5.14s/it][h264 @ 0x55a832326e00] mmco: unref short failure
[h264 @ 0x55a832326e00] mmco: unref short failure
  0%|          | 7/1945 [00:37<2:47:24,  5.18s/it][h264 @ 0x55d5b95cae00] mmco: unref short failure
[h264 @ 0x55d5b95cae00] mmco: unref short failure
  0%|          | 8/1945 [00:42<2:47:13,  5.18s/it]  0%|          | 9/1945 [00:48<2:48:43,  5.23s/it][h264 @ 0x564396af9340] mmco: unref short failure
  1%|          | 10/1945 [00:54<2:56:16,  5.47s/it][h264 @ 0x55d5b0ea9ec0] mmco: unref short failure
[h264 @ 0x55d5b0ea9ec0] mmco: unref short failure
not have audios 8-qwaveiHMM.3
  1%|          | 11/1945 [00:59<2:51:29,  5.32s/it]  1%|          | 12/1945 [01:04<2:52:20,  5.35s/it][h264 @ 0x564399146e80] mmco: unref short failure
[h264 @ 0x564399146e80] mmco: unref short failure
  1%|          | 13/1945 [01:10<2:57:14,  5.50s/it]  1%|          | 14/1945 [01:16<2:59:31,  5.58s/it][h264 @ 0x55a832289cc0] mmco: unref short failure
[h264 @ 0x55a832289cc0] mmco: unref short failure
  1%|          | 15/1945 [01:22<3:06:15,  5.79s/it][h264 @ 0x55edf51c08c0] mmco: unref short failure
[h264 @ 0x55a835898440] mmco: unref short failure
[h264 @ 0x55a835898440] mmco: unref short failure
  1%|          | 16/1945 [01:44<5:46:48, 10.79s/it][h264 @ 0x55d5ba4b1380] mmco: unref short failure
[h264 @ 0x55d5ba4b1380] mmco: unref short failure
[h264 @ 0x56439ae6d880] mmco: unref short failure
[h264 @ 0x56439ae6d880] mmco: unref short failure
[h264 @ 0x56439ae6d880] mmco: unref short failure
  1%|          | 17/1945 [01:52<5:18:14,  9.90s/it][h264 @ 0x55edf38cfe80] mmco: unref short failure
[h264 @ 0x55edf38cfe80] mmco: unref short failure
[h264 @ 0x55edf38cfe80] mmco: unref short failure
[h264 @ 0x55edf38cfe80] mmco: unref short failure
[h264 @ 0x56439efd4740] mmco: unref short failure
[h264 @ 0x56439efd4740] mmco: unref short failure
[h264 @ 0x56439efd4740] mmco: unref short failure
[h264 @ 0x56439efd4740] mmco: unref short failure
[h264 @ 0x56439efd4740] mmco: unref short failure
[h264 @ 0x56439efd4740] mmco: unref short failure
[h264 @ 0x56439efd4740] mmco: unref short failure
[h264 @ 0x56439efd4740] mmco: unref short failure
[h264 @ 0x55edfec41a80] mmco: unref short failure
[h264 @ 0x55edfec41a80] mmco: unref short failure
[h264 @ 0x55a8359bbf00] mmco: unref short failure
[h264 @ 0x55a8359bbf00] mmco: unref short failure
[h264 @ 0x55d5b0e40a80] mmco: unref short failure
[h264 @ 0x55d5b0e40a80] mmco: unref short failure
[h264 @ 0x55a82e6c56c0] mmco: unref short failure
[h264 @ 0x564397dc0c00] mmco: unref short failure
[h264 @ 0x56439bfbce00] mmco: unref short failure
[h264 @ 0x55edf6b7a000] mmco: unref short failure
[h264 @ 0x55edf6b7a000] mmco: unref short failure
[h264 @ 0x55edf314b280] mmco: unref short failure
[h264 @ 0x55edf314b280] mmco: unref short failure
[h264 @ 0x55edf314b280] mmco: unref short failure
[h264 @ 0x55edf314b280] mmco: unref short failure
[h264 @ 0x56439a9c4040] mmco: unref short failure
  1%|          | 18/1945 [02:15<7:24:34, 13.84s/it][h264 @ 0x55edfe03e340] mmco: unref short failure
[h264 @ 0x55edfe03e340] mmco: unref short failure
  1%|          | 19/1945 [02:21<6:10:32, 11.54s/it][h264 @ 0x55d5bbb32c80] mmco: unref short failure
[h264 @ 0x55d5bbb32c80] mmco: unref short failure
[h264 @ 0x55a835c151c0] mmco: unref short failure
  1%|          | 20/1945 [02:29<5:35:14, 10.45s/it][h264 @ 0x55a838f15bc0] mmco: unref short failure
[h264 @ 0x55a838f15bc0] mmco: unref short failure
[h264 @ 0x55a838f15bc0] mmco: unref short failure
[h264 @ 0x55a838f15bc0] mmco: unref short failure
[h264 @ 0x55edf3c89540] mmco: unref short failure
  1%|          | 21/1945 [02:35<4:45:38,  8.91s/it][h264 @ 0x55a8344c2740] mmco: unref short failure
  1%|          | 22/1945 [02:41<4:23:10,  8.21s/it][h264 @ 0x55d5b1068540] mmco: unref short failure
[h264 @ 0x55d5b3bdccc0] mmco: unref short failure
  1%|          | 23/1945 [02:47<4:02:22,  7.57s/it][h264 @ 0x5643960b1280] mmco: unref short failure
[h264 @ 0x5643960b1280] mmco: unref short failure
[h264 @ 0x5643960b1280] mmco: unref short failure
[h264 @ 0x5643960b1280] mmco: unref short failure
[h264 @ 0x564391454500] mmco: unref short failure
[h264 @ 0x564391454500] mmco: unref short failure
[h264 @ 0x55a835d20400] mmco: unref short failure
[h264 @ 0x55edf3c814c0] mmco: unref short failure
[h264 @ 0x55edf3c814c0] mmco: unref short failure
[h264 @ 0x56439f629500] mmco: unref short failure
[h264 @ 0x56439f629500] mmco: unref short failure
[h264 @ 0x56439f629500] mmco: unref short failure
[h264 @ 0x56439f629500] mmco: unref short failure
[h264 @ 0x55edf429d6c0] mmco: unref short failure
[h264 @ 0x55edf429d6c0] mmco: unref short failure
[h264 @ 0x55a830eacb00] mmco: unref short failure
[h264 @ 0x55a830eacb00] mmco: unref short failure
[h264 @ 0x55d5bce78340] mmco: unref short failure
[h264 @ 0x55d5bce78340] mmco: unref short failure
[h264 @ 0x55d5b0781480] mmco: unref short failure
[h264 @ 0x55d5b0781480] mmco: unref short failure
[h264 @ 0x564394b6f100] mmco: unref short failure
[h264 @ 0x564394b6f100] mmco: unref short failure
  1%|          | 24/1945 [03:37<10:48:03, 20.24s/it][h264 @ 0x55d5b18dda40] mmco: unref short failure
  1%|▏         | 25/1945 [03:43<8:28:51, 15.90s/it] [h264 @ 0x55edfd2e3240] mmco: unref short failure
[h264 @ 0x56439db02cc0] mmco: unref short failure
[h264 @ 0x55edf31a7480] mmco: unref short failure
[h264 @ 0x55edfc5a3980] mmco: unref short failure
[h264 @ 0x55a82d8247c0] mmco: unref short failure
[h264 @ 0x55a82d8247c0] mmco: unref short failure
[h264 @ 0x55edfe121c40] mmco: unref short failure
[h264 @ 0x55edfe121c40] mmco: unref short failure
[h264 @ 0x56439daf7bc0] mmco: unref short failure
[h264 @ 0x56439daf7bc0] mmco: unref short failure
[h264 @ 0x56439daf7bc0] mmco: unref short failure
[h264 @ 0x56439daf7bc0] mmco: unref short failure
[h264 @ 0x55d5bc5e2dc0] mmco: unref short failure
[h264 @ 0x55d5bc5e2dc0] mmco: unref short failure
[h264 @ 0x55ee00576900] mmco: unref short failure
[h264 @ 0x55ee00576900] mmco: unref short failure
[h264 @ 0x5643948e0100] mmco: unref short failure
  1%|▏         | 26/1945 [04:24<12:34:22, 23.59s/it]  1%|▏         | 27/1945 [04:31<9:47:50, 18.39s/it]   1%|▏         | 28/1945 [04:37<7:47:56, 14.65s/it]  1%|▏         | 29/1945 [04:43<6:25:22, 12.07s/it]  2%|▏         | 30/1945 [04:48<5:17:39,  9.95s/it][h264 @ 0x55edf42b2740] mmco: unref short failure
[h264 @ 0x55d5b5643f40] mmco: unref short failure
  2%|▏         | 31/1945 [04:53<4:33:35,  8.58s/it][h264 @ 0x55edfacd6280] mmco: unref short failure
[h264 @ 0x55a8305c7400] mmco: unref short failure
[h264 @ 0x55edfe803680] mmco: unref short failure
[h264 @ 0x564398673180] mmco: unref short failure
[h264 @ 0x564398673180] mmco: unref short failure
[h264 @ 0x55d5c0efba80] mmco: unref short failure
[h264 @ 0x55d5c0efba80] mmco: unref short failure
[h264 @ 0x55a82db6bd80] mmco: unref short failure
[h264 @ 0x55a82db6bd80] mmco: unref short failure
[h264 @ 0x55a82db6bd80] mmco: unref short failure
[h264 @ 0x55a82db6bd80] mmco: unref short failure
[h264 @ 0x55d5bbad7900] mmco: unref short failure
[h264 @ 0x55d5b33dc6c0] mmco: unref short failure
[h264 @ 0x55d5b33dc6c0] mmco: unref short failure
[h264 @ 0x55a835a059c0] mmco: unref short failure
[h264 @ 0x564390cbe840] mmco: unref short failure
[h264 @ 0x564390cbe840] mmco: unref short failure
[h264 @ 0x55edf87aee80] mmco: unref short failure
  2%|▏         | 32/1945 [05:43<11:06:50, 20.92s/it]  2%|▏         | 33/1945 [05:49<8:46:57, 16.54s/it] [h264 @ 0x55a830deb500] mmco: unref short failure
[h264 @ 0x55a830deb500] mmco: unref short failure
[h264 @ 0x55edf72adec0] mmco: unref short failure
[h264 @ 0x55edff69f600] mmco: unref short failure
[h264 @ 0x55edfec32600] mmco: unref short failure
[h264 @ 0x55a82f992a80] mmco: unref short failure
[h264 @ 0x55a82f992a80] mmco: unref short failure
[h264 @ 0x55edf260e0c0] mmco: unref short failure
[h264 @ 0x55edf260e0c0] mmco: unref short failure
[h264 @ 0x55edf0ba6cc0] mmco: unref short failure
[h264 @ 0x55d5b66f7800] mmco: unref short failure
[h264 @ 0x55d5b66f7800] mmco: unref short failure
  2%|▏         | 34/1945 [06:23<11:34:24, 21.80s/it][h264 @ 0x55a83d22c000] mmco: unref short failure
[h264 @ 0x55a83d22c000] mmco: unref short failure
[h264 @ 0x55d5b80e6080] mmco: unref short failure
[h264 @ 0x564394706b80] mmco: unref short failure
  2%|▏         | 35/1945 [06:32<9:30:48, 17.93s/it]   2%|▏         | 36/1945 [06:38<7:34:20, 14.28s/it][h264 @ 0x56439db02ec0] mmco: unref short failure
[h264 @ 0x56439db02ec0] mmco: unref short failure
  2%|▏         | 37/1945 [06:46<6:38:55, 12.54s/it][h264 @ 0x55ee01025740] mmco: unref short failure
[h264 @ 0x55ee01025740] mmco: unref short failure
  2%|▏         | 38/1945 [06:52<5:36:46, 10.60s/it][h264 @ 0x55edfd9479c0] mmco: unref short failure
  2%|▏         | 39/1945 [06:58<4:50:42,  9.15s/it][h264 @ 0x55edf32d14c0] mmco: unref short failure
[h264 @ 0x55edf32d14c0] mmco: unref short failure
[h264 @ 0x55d5be19e8c0] mmco: unref short failure
[h264 @ 0x55d5be19e8c0] mmco: unref short failure
[h264 @ 0x55a82faee280] mmco: unref short failure
[h264 @ 0x55a82faee280] mmco: unref short failure
[h264 @ 0x55ee009b0280] mmco: unref short failure
[h264 @ 0x55ee009b0280] mmco: unref short failure
[h264 @ 0x55a832012000] mmco: unref short failure
[h264 @ 0x55edfabef940] mmco: unref short failure
[h264 @ 0x564391e39d00] mmco: unref short failure
[h264 @ 0x5643977e9e40] mmco: unref short failure
[h264 @ 0x55edf78a62c0] mmco: unref short failure
[h264 @ 0x55d5bd88ffc0] mmco: unref short failure
[h264 @ 0x55d5bd88ffc0] mmco: unref short failure
[h264 @ 0x56439fd84840] mmco: unref short failure
[h264 @ 0x56439fd84840] mmco: unref short failure
[h264 @ 0x55a839cc06c0] mmco: unref short failure
[h264 @ 0x55a839cc06c0] mmco: unref short failure
[h264 @ 0x55d5af898d80] mmco: unref short failure
[h264 @ 0x55d5af898d80] mmco: unref short failure
[h264 @ 0x5643968493c0] mmco: unref short failure
[h264 @ 0x5643968493c0] mmco: unref short failure
  2%|▏         | 40/1945 [07:47<11:05:03, 20.95s/it][h264 @ 0x55a8415c8780] mmco: unref short failure
[h264 @ 0x55a8415c8780] mmco: unref short failure
[h264 @ 0x55a8415c8780] mmco: unref short failure
[h264 @ 0x55a8415c8780] mmco: unref short failure
[h264 @ 0x55edf9cda440] mmco: unref short failure
[h264 @ 0x55edf9cda440] mmco: unref short failure
[h264 @ 0x56439a505240] mmco: unref short failure
[h264 @ 0x56439a505240] mmco: unref short failure
  2%|▏         | 41/1945 [07:55<9:00:45, 17.04s/it] [h264 @ 0x564392eb1b80] mmco: unref short failure
[h264 @ 0x55edf29009c0] mmco: unref short failure
[h264 @ 0x55edfed33a80] mmco: unref short failure
[h264 @ 0x55edfe811740] mmco: unref short failure
[h264 @ 0x55edf2b9a4c0] mmco: unref short failure
  2%|▏         | 42/1945 [08:26<11:17:39, 21.37s/it][h264 @ 0x55a82f5de4c0] mmco: unref short failure
  2%|▏         | 43/1945 [08:31<8:45:11, 16.57s/it] [h264 @ 0x55d5be4ed0c0] mmco: unref short failure
[h264 @ 0x5643a25577c0] mmco: unref short failure
  2%|▏         | 44/1945 [08:37<7:05:03, 13.42s/it]  2%|▏         | 45/1945 [08:46<6:19:17, 11.98s/it][h264 @ 0x56439b685900] mmco: unref short failure
[h264 @ 0x56439b685900] mmco: unref short failure
[h264 @ 0x5643973bc940] mmco: unref short failure
[h264 @ 0x55a83b304880] mmco: unref short failure
[h264 @ 0x55a83b304880] mmco: unref short failure
  2%|▏         | 46/1945 [08:53<5:32:32, 10.51s/it][h264 @ 0x55ee06e554c0] mmco: unref short failure
[h264 @ 0x55d5c4774040] mmco: unref short failure
[h264 @ 0x5643a6d0ef80] mmco: unref short failure
[h264 @ 0x5643a6d0ef80] mmco: unref short failure
[h264 @ 0x5643a6d0ef80] mmco: unref short failure
[h264 @ 0x5643a6d0ef80] mmco: unref short failure
  2%|▏         | 47/1945 [09:04<5:35:38, 10.61s/it][h264 @ 0x55a837b80180] mmco: unref short failure
[h264 @ 0x55edfe1e0080] mmco: unref short failure
[h264 @ 0x564394533640] mmco: unref short failure
[h264 @ 0x55d5b6e1f500] mmco: unref short failure
[h264 @ 0x564394533640] mmco: unref short failure
[h264 @ 0x564394533640] mmco: unref short failure
[h264 @ 0x564390cbac40] mmco: unref short failure
[h264 @ 0x564390cbac40] mmco: unref short failure
[h264 @ 0x55d5c4fa7c80] mmco: unref short failure
[h264 @ 0x55d5c4fa7c80] mmco: unref short failure
[h264 @ 0x55a832368680] mmco: unref short failure
[h264 @ 0x55a832368680] mmco: unref short failure
[h264 @ 0x564392a1e540] mmco: unref short failure
[h264 @ 0x564392a1e540] mmco: unref short failure
  2%|▏         | 48/1945 [09:47<10:41:25, 20.29s/it]  3%|▎         | 49/1945 [09:52<8:18:57, 15.79s/it] 09/10/2024 20:17:31 - INFO - __main__ -   evaluate on ret%tvas--msrvtt_ret task
09/10/2024 20:17:31 - INFO - __main__ -   start running ret%tvas validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55a845e6bc80] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x56439f767800] mmco: unref short failure
[h264 @ 0x56439f767800] mmco: unref short failure
[h264 @ 0x564396f19380] mmco: unref short failure
[h264 @ 0x55a83d469340] mmco: unref short failure
[h264 @ 0x55edfd95de40] mmco: unref short failure
[h264 @ 0x55edfd95de40] mmco: unref short failure
[h264 @ 0x55a8372b0b00] mmco: unref short failure
[h264 @ 0x55a8310318c0] mmco: unref short failure
[h264 @ 0x55a8310318c0] mmco: unref short failure
[h264 @ 0x564398164b00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55edf683ee00] mmco: unref short failure
[h264 @ 0x5643988158c0] mmco: unref short failure
[h264 @ 0x5643988158c0] mmco: unref short failure
[h264 @ 0x5643988158c0] mmco: unref short failure
[h264 @ 0x5643988158c0] mmco: unref short failure
[h264 @ 0x55a842c7b7c0] mmco: unref short failure
[h264 @ 0x55d5b322f300] mmco: unref short failure
[h264 @ 0x55d5bf235f00] mmco: unref short failure
[h264 @ 0x55d5c4982c40] mmco: unref short failure
[h264 @ 0x55d5c4982c40] mmco: unref short failure
[h264 @ 0x55a82d065f80] mmco: unref short failure
[h264 @ 0x55d5b4f83900] mmco: unref short failure
[h264 @ 0x55d5b4f83900] mmco: unref short failure
[h264 @ 0x55edf4214f80] mmco: unref short failure
[h264 @ 0x55edf4214f80] mmco: unref short failure
[h264 @ 0x55a83ad94e40] mmco: unref short failure
[h264 @ 0x55a83ad94e40] mmco: unref short failure
[h264 @ 0x564398673700] mmco: unref short failure
[h264 @ 0x564398673700] mmco: unref short failure
[h264 @ 0x55ee032fadc0] mmco: unref short failure
[h264 @ 0x55ee032fadc0] mmco: unref short failure
[h264 @ 0x5643a6c8c800] mmco: unref short failure
[h264 @ 0x5643a6c8c800] mmco: unref short failure
[h264 @ 0x55d5c1d12080] mmco: unref short failure
[h264 @ 0x55d5c1d12080] mmco: unref short failure
[h264 @ 0x55d5be6b77c0] mmco: unref short failure
[h264 @ 0x55d5be6b77c0] mmco: unref short failure
[h264 @ 0x55a838efdbc0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:29,  7.53it/s][A
  1%|          | 2/221 [00:00<01:17,  2.82it/s][A
  1%|▏         | 3/221 [00:01<01:20,  2.71it/s][A
  2%|▏         | 4/221 [00:01<01:10,  3.10it/s][A
  2%|▏         | 5/221 [00:01<01:12,  2.96it/s][A
  3%|▎         | 6/221 [00:01<01:12,  2.98it/s][A
  3%|▎         | 7/221 [00:02<01:24,  2.53it/s][A
  4%|▎         | 8/221 [00:02<01:23,  2.54it/s][A[h264 @ 0x55d5bbac0300] mmco: unref short failure

  4%|▍         | 9/221 [00:03<01:12,  2.93it/s][A
  5%|▍         | 10/221 [00:03<01:22,  2.55it/s][A
  5%|▍         | 11/221 [00:04<01:22,  2.54it/s][A
  5%|▌         | 12/221 [00:04<01:18,  2.68it/s][A
  6%|▌         | 13/221 [00:04<01:26,  2.41it/s][A
  6%|▋         | 14/221 [00:05<01:20,  2.57it/s][A
  7%|▋         | 15/221 [00:05<01:24,  2.44it/s][A
  7%|▋         | 16/221 [00:06<01:29,  2.30it/s][A
  8%|▊         | 17/221 [00:06<01:47,  1.89it/s][A
  8%|▊         | 18/221 [00:07<01:35,  2.13it/s][A
  9%|▊         | 19/221 [00:07<01:28,  2.29it/s][A
  9%|▉         | 20/221 [00:07<01:15,  2.65it/s][A
 10%|▉         | 21/221 [00:08<01:12,  2.78it/s][A
 10%|▉         | 22/221 [00:08<01:35,  2.08it/s][A
 10%|█         | 23/221 [00:09<01:15,  2.64it/s][A
 11%|█         | 24/221 [00:09<01:10,  2.78it/s][A
 11%|█▏        | 25/221 [00:09<01:11,  2.74it/s][A
 12%|█▏        | 26/221 [00:10<01:19,  2.44it/s][A
 12%|█▏        | 27/221 [00:10<01:05,  2.98it/s][A[h264 @ 0x56439ecd66c0] mmco: unref short failure
[h264 @ 0x56439ecd66c0] mmco: unref short failure

 13%|█▎        | 28/221 [00:10<01:19,  2.41it/s][A
 13%|█▎        | 29/221 [00:11<01:11,  2.67it/s][A
 14%|█▎        | 30/221 [00:11<01:27,  2.19it/s][A
 14%|█▍        | 31/221 [00:12<01:22,  2.30it/s][A
 14%|█▍        | 32/221 [00:12<01:05,  2.87it/s][A
 15%|█▍        | 33/221 [00:12<01:00,  3.09it/s][A
 15%|█▌        | 34/221 [00:12<00:53,  3.47it/s][A[h264 @ 0x55edf159e400] mmco: unref short failure
[h264 @ 0x55edf159e400] mmco: unref short failure

 16%|█▌        | 35/221 [00:13<00:57,  3.24it/s][A
 16%|█▋        | 36/221 [00:13<01:01,  3.00it/s][A
 17%|█▋        | 37/221 [00:13<00:59,  3.12it/s][A
 17%|█▋        | 38/221 [00:14<00:59,  3.05it/s][A
 18%|█▊        | 39/221 [00:14<01:00,  3.03it/s][A
 18%|█▊        | 40/221 [00:15<01:05,  2.75it/s][A
 19%|█▊        | 41/221 [00:15<01:02,  2.90it/s][A
 19%|█▉        | 42/221 [00:15<00:57,  3.10it/s][A
 19%|█▉        | 43/221 [00:15<00:51,  3.42it/s][A
 20%|█▉        | 44/221 [00:16<00:49,  3.54it/s][A
 20%|██        | 45/221 [00:16<01:03,  2.76it/s][A
 21%|██        | 46/221 [00:17<01:05,  2.69it/s][A[h264 @ 0x55a845e647c0] mmco: unref short failure
[h264 @ 0x564395d4f940] mmco: unref short failure

 21%|██▏       | 47/221 [00:17<01:25,  2.04it/s][A
 22%|██▏       | 48/221 [00:18<01:10,  2.47it/s][A
 22%|██▏       | 49/221 [00:18<01:12,  2.37it/s][A
 23%|██▎       | 50/221 [00:19<01:20,  2.12it/s][A
 23%|██▎       | 51/221 [00:19<01:03,  2.68it/s][A
 24%|██▎       | 52/221 [00:19<01:03,  2.67it/s][A
 24%|██▍       | 53/221 [00:19<00:56,  2.98it/s][A[h264 @ 0x5643a3a0a2c0] mmco: unref short failure

 24%|██▍       | 54/221 [00:20<01:15,  2.21it/s][A
 25%|██▍       | 55/221 [00:21<01:18,  2.11it/s][A
 25%|██▌       | 56/221 [00:21<01:04,  2.58it/s][A
 26%|██▌       | 57/221 [00:21<01:02,  2.62it/s][A
 26%|██▌       | 58/221 [00:22<01:04,  2.54it/s][A
 27%|██▋       | 59/221 [00:22<01:03,  2.56it/s][A
 27%|██▋       | 60/221 [00:22<01:02,  2.58it/s][A[h264 @ 0x55a843d04a00] mmco: unref short failure

 28%|██▊       | 61/221 [00:23<00:56,  2.85it/s][A
 28%|██▊       | 62/221 [00:23<00:58,  2.74it/s][A
 29%|██▊       | 63/221 [00:23<00:57,  2.76it/s][A
 29%|██▉       | 64/221 [00:24<01:00,  2.61it/s][A
 29%|██▉       | 65/221 [00:24<01:00,  2.57it/s][A
 30%|██▉       | 66/221 [00:25<01:18,  1.97it/s][A
 30%|███       | 67/221 [00:26<01:19,  1.93it/s][A
 31%|███       | 68/221 [00:26<01:11,  2.15it/s][A
 31%|███       | 69/221 [00:27<01:27,  1.74it/s][A
 32%|███▏      | 70/221 [00:27<01:15,  1.99it/s][A
 32%|███▏      | 71/221 [00:27<01:04,  2.31it/s][A[h264 @ 0x55d5bba01e00] mmco: unref short failure
[h264 @ 0x55d5bba01e00] mmco: unref short failure

 33%|███▎      | 72/221 [00:28<01:09,  2.14it/s][A
 33%|███▎      | 73/221 [00:28<01:09,  2.12it/s][A
 33%|███▎      | 74/221 [00:29<00:55,  2.65it/s][A
 34%|███▍      | 75/221 [00:29<00:52,  2.76it/s][A
 34%|███▍      | 76/221 [00:29<00:50,  2.88it/s][A
 35%|███▍      | 77/221 [00:30<00:56,  2.56it/s][A
 35%|███▌      | 78/221 [00:30<00:48,  2.97it/s][A
 36%|███▌      | 79/221 [00:31<01:04,  2.20it/s][A
 36%|███▌      | 80/221 [00:31<01:03,  2.23it/s][A[h264 @ 0x55edf48dc500] mmco: unref short failure
[h264 @ 0x55edf48dc500] mmco: unref short failure

 37%|███▋      | 81/221 [00:31<01:00,  2.32it/s][A
 37%|███▋      | 82/221 [00:32<01:01,  2.25it/s][A
 38%|███▊      | 83/221 [00:32<00:58,  2.37it/s][A
 38%|███▊      | 84/221 [00:33<00:52,  2.62it/s][A
 38%|███▊      | 85/221 [00:33<00:42,  3.21it/s][A
 39%|███▉      | 86/221 [00:33<00:40,  3.31it/s][A
 39%|███▉      | 87/221 [00:33<00:46,  2.91it/s][A
 40%|███▉      | 88/221 [00:34<00:57,  2.32it/s][A
 40%|████      | 89/221 [00:35<01:01,  2.15it/s][A
 41%|████      | 90/221 [00:35<00:53,  2.44it/s][A
 41%|████      | 91/221 [00:35<00:45,  2.85it/s][A
 42%|████▏     | 92/221 [00:35<00:46,  2.80it/s][A
 42%|████▏     | 93/221 [00:36<00:54,  2.33it/s][A
 43%|████▎     | 94/221 [00:37<00:57,  2.20it/s][A
 43%|████▎     | 95/221 [00:37<01:01,  2.04it/s][A[h264 @ 0x55a833e8ca00] mmco: unref short failure
[h264 @ 0x55a833e8ca00] mmco: unref short failure

 43%|████▎     | 96/221 [00:38<01:07,  1.84it/s][A
 44%|████▍     | 97/221 [00:38<00:59,  2.10it/s][A[h264 @ 0x5643a5a7d800] mmco: unref short failure
[h264 @ 0x5643a5a7d800] mmco: unref short failure

 44%|████▍     | 98/221 [00:39<01:05,  1.87it/s][A
 45%|████▍     | 99/221 [00:39<00:58,  2.10it/s][A
 45%|████▌     | 100/221 [00:40<00:54,  2.20it/s][A
 46%|████▌     | 101/221 [00:40<00:49,  2.43it/s][A
 46%|████▌     | 102/221 [00:40<00:56,  2.12it/s][A
 47%|████▋     | 103/221 [00:41<00:47,  2.47it/s][A
 47%|████▋     | 104/221 [00:41<00:43,  2.67it/s][A[h264 @ 0x55edff461300] mmco: unref short failure
[h264 @ 0x55edff461300] mmco: unref short failure

 48%|████▊     | 105/221 [00:42<00:47,  2.45it/s][A
 48%|████▊     | 106/221 [00:42<00:49,  2.30it/s][A
 48%|████▊     | 107/221 [00:42<00:45,  2.49it/s][A
 49%|████▉     | 108/221 [00:43<00:41,  2.69it/s][A
 49%|████▉     | 109/221 [00:43<00:36,  3.10it/s][A
 50%|████▉     | 110/221 [00:43<00:35,  3.13it/s][A
 50%|█████     | 111/221 [00:44<00:40,  2.69it/s][A
 51%|█████     | 112/221 [00:44<00:39,  2.78it/s][A
 51%|█████     | 113/221 [00:44<00:35,  3.06it/s][A
 52%|█████▏    | 114/221 [00:44<00:30,  3.56it/s][A
 52%|█████▏    | 115/221 [00:45<00:30,  3.49it/s][A
 52%|█████▏    | 116/221 [00:45<00:38,  2.70it/s][A
 53%|█████▎    | 117/221 [00:46<00:38,  2.68it/s][A
 53%|█████▎    | 118/221 [00:46<00:34,  2.94it/s][A
 54%|█████▍    | 119/221 [00:46<00:42,  2.42it/s][A
 54%|█████▍    | 120/221 [00:47<00:36,  2.79it/s][A
 55%|█████▍    | 121/221 [00:47<00:28,  3.48it/s][A
 55%|█████▌    | 122/221 [00:47<00:30,  3.28it/s][A
 56%|█████▌    | 123/221 [00:47<00:29,  3.33it/s][A
 56%|█████▌    | 124/221 [00:48<00:31,  3.05it/s][A
 57%|█████▋    | 125/221 [00:48<00:36,  2.64it/s][A
 57%|█████▋    | 126/221 [00:49<00:33,  2.87it/s][A[h264 @ 0x55edfb848640] mmco: unref short failure

 57%|█████▋    | 127/221 [00:49<00:39,  2.37it/s][A
 58%|█████▊    | 128/221 [00:50<00:41,  2.22it/s][A
 58%|█████▊    | 129/221 [00:50<00:33,  2.72it/s][A
 59%|█████▉    | 130/221 [00:50<00:30,  2.94it/s][A
 59%|█████▉    | 131/221 [00:50<00:29,  3.08it/s][A
 60%|█████▉    | 132/221 [00:51<00:42,  2.09it/s][A
 60%|██████    | 133/221 [00:52<00:40,  2.17it/s][A
 61%|██████    | 134/221 [00:52<00:46,  1.89it/s][A
 61%|██████    | 135/221 [00:53<00:48,  1.78it/s][A
 62%|██████▏   | 136/221 [00:53<00:43,  1.94it/s][A
 62%|██████▏   | 137/221 [00:54<00:42,  2.00it/s][A
 62%|██████▏   | 138/221 [00:54<00:41,  2.00it/s][A
 63%|██████▎   | 139/221 [00:55<00:42,  1.94it/s][A
 63%|██████▎   | 140/221 [00:55<00:41,  1.96it/s][A[h264 @ 0x55a841641c80] mmco: unref short failure

 64%|██████▍   | 141/221 [00:56<00:40,  1.99it/s][A
 64%|██████▍   | 142/221 [00:56<00:36,  2.19it/s][A
 65%|██████▍   | 143/221 [00:57<00:35,  2.20it/s][A
 65%|██████▌   | 144/221 [00:57<00:35,  2.17it/s][A
 66%|██████▌   | 145/221 [00:57<00:29,  2.58it/s][A
 66%|██████▌   | 146/221 [00:58<00:23,  3.17it/s][A
 67%|██████▋   | 147/221 [00:58<00:24,  2.98it/s][A
 67%|██████▋   | 148/221 [00:59<00:32,  2.23it/s][A[h264 @ 0x55edf218fd80] mmco: unref short failure
[h264 @ 0x55edf218fd80] mmco: unref short failure

 67%|██████▋   | 149/221 [00:59<00:33,  2.15it/s][A
 68%|██████▊   | 150/221 [01:00<00:29,  2.37it/s][A
 68%|██████▊   | 151/221 [01:00<00:29,  2.36it/s][A
 69%|██████▉   | 152/221 [01:01<00:31,  2.17it/s][A
 69%|██████▉   | 153/221 [01:01<00:27,  2.48it/s][A
 70%|██████▉   | 154/221 [01:01<00:24,  2.73it/s][A
 70%|███████   | 155/221 [01:01<00:22,  2.90it/s][A
 71%|███████   | 156/221 [01:02<00:23,  2.80it/s][A
 71%|███████   | 157/221 [01:03<00:35,  1.82it/s][A
 71%|███████▏  | 158/221 [01:03<00:32,  1.96it/s][A
 72%|███████▏  | 159/221 [01:03<00:25,  2.46it/s][A
 72%|███████▏  | 160/221 [01:04<00:21,  2.81it/s][A
 73%|███████▎  | 161/221 [01:04<00:19,  3.13it/s][A
 73%|███████▎  | 162/221 [01:04<00:16,  3.64it/s][A
 74%|███████▍  | 163/221 [01:04<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [01:05<00:17,  3.23it/s][A
 75%|███████▍  | 165/221 [01:05<00:20,  2.76it/s][A
 75%|███████▌  | 166/221 [01:06<00:22,  2.42it/s][A
 76%|███████▌  | 167/221 [01:06<00:17,  3.03it/s][A
 76%|███████▌  | 168/221 [01:06<00:20,  2.58it/s][A
 76%|███████▋  | 169/221 [01:07<00:17,  3.00it/s][A
 77%|███████▋  | 170/221 [01:07<00:18,  2.72it/s][A[h264 @ 0x55d5c021bb80] mmco: unref short failure

 77%|███████▋  | 171/221 [01:07<00:20,  2.46it/s][A
 78%|███████▊  | 172/221 [01:08<00:18,  2.59it/s][A
 78%|███████▊  | 173/221 [01:08<00:19,  2.42it/s][A
 79%|███████▊  | 174/221 [01:09<00:17,  2.66it/s][A[h264 @ 0x55a83b276a80] mmco: unref short failure

 79%|███████▉  | 175/221 [01:09<00:16,  2.81it/s][A
 80%|███████▉  | 176/221 [01:09<00:13,  3.28it/s][A
 80%|████████  | 177/221 [01:09<00:12,  3.39it/s][A[h264 @ 0x5643977e1ec0] mmco: unref short failure
[h264 @ 0x5643977e1ec0] mmco: unref short failure
[h264 @ 0x5643977e1ec0] mmco: unref short failure
[h264 @ 0x5643977e1ec0] mmco: unref short failure

 81%|████████  | 178/221 [01:10<00:16,  2.58it/s][A
 81%|████████  | 179/221 [01:10<00:17,  2.39it/s][A
 81%|████████▏ | 180/221 [01:11<00:14,  2.83it/s][A
 82%|████████▏ | 181/221 [01:11<00:12,  3.21it/s][A
 82%|████████▏ | 182/221 [01:11<00:12,  3.09it/s][A
 83%|████████▎ | 183/221 [01:12<00:12,  2.94it/s][A
 83%|████████▎ | 184/221 [01:12<00:12,  3.06it/s][A
 84%|████████▎ | 185/221 [01:12<00:10,  3.48it/s][A
 84%|████████▍ | 186/221 [01:13<00:13,  2.51it/s][A
 85%|████████▍ | 187/221 [01:13<00:12,  2.70it/s][A
 85%|████████▌ | 188/221 [01:13<00:11,  2.88it/s][A
 86%|████████▌ | 189/221 [01:14<00:10,  2.95it/s][A
 86%|████████▌ | 190/221 [01:14<00:10,  3.05it/s][A
 86%|████████▋ | 191/221 [01:14<00:07,  3.76it/s][A
 87%|████████▋ | 192/221 [01:14<00:07,  3.88it/s][A
 87%|████████▋ | 193/221 [01:14<00:06,  4.47it/s][A
 88%|████████▊ | 194/221 [01:15<00:06,  3.93it/s][A
 88%|████████▊ | 195/221 [01:15<00:06,  3.86it/s][A
 89%|████████▊ | 196/221 [01:15<00:06,  3.62it/s][A
 89%|████████▉ | 197/221 [01:16<00:06,  3.92it/s][A
 90%|████████▉ | 198/221 [01:16<00:06,  3.35it/s][A
 90%|█████████ | 199/221 [01:16<00:06,  3.21it/s][A
 90%|█████████ | 200/221 [01:17<00:06,  3.24it/s][A
 91%|█████████ | 201/221 [01:17<00:05,  3.52it/s][A
 91%|█████████▏| 202/221 [01:17<00:06,  3.02it/s][A[h264 @ 0x55edfecf7e00] mmco: unref short failure
[h264 @ 0x55edfecf7e00] mmco: unref short failure
[h264 @ 0x55edfecf7e00] mmco: unref short failure
[h264 @ 0x55edfecf7e00] mmco: unref short failure

 92%|█████████▏| 203/221 [01:18<00:05,  3.29it/s][A
 92%|█████████▏| 204/221 [01:18<00:04,  3.49it/s][A
 93%|█████████▎| 205/221 [01:18<00:04,  3.98it/s][A
 93%|█████████▎| 206/221 [01:18<00:04,  3.19it/s][A
 94%|█████████▎| 207/221 [01:19<00:04,  3.35it/s][A
 94%|█████████▍| 208/221 [01:19<00:04,  3.11it/s][A
 95%|█████████▍| 209/221 [01:19<00:03,  3.12it/s][A
 95%|█████████▌| 210/221 [01:19<00:02,  3.84it/s][A
 95%|█████████▌| 211/221 [01:20<00:03,  3.01it/s][A
 96%|█████████▌| 212/221 [01:20<00:02,  3.04it/s][A
 96%|█████████▋| 213/221 [01:21<00:02,  3.40it/s][A
 97%|█████████▋| 214/221 [01:21<00:02,  2.74it/s][A
 97%|█████████▋| 215/221 [01:21<00:01,  3.23it/s][A
 98%|█████████▊| 216/221 [01:22<00:01,  3.10it/s][A
 98%|█████████▊| 217/221 [01:22<00:01,  2.02it/s][A
 99%|█████████▊| 218/221 [01:23<00:01,  2.24it/s][A
 99%|█████████▉| 219/221 [01:23<00:00,  2.47it/s][A
100%|█████████▉| 220/221 [01:24<00:00,  2.36it/s][A
100%|██████████| 221/221 [01:24<00:00,  2.60it/s][A100%|██████████| 221/221 [01:24<00:00,  2.62it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:06,  3.29it/s][A
  1%|          | 2/221 [00:00<01:06,  3.29it/s][A
  1%|▏         | 3/221 [00:00<01:06,  3.29it/s][A
  2%|▏         | 4/221 [00:01<01:05,  3.29it/s][A
  2%|▏         | 5/221 [00:01<01:05,  3.29it/s][A
  3%|▎         | 6/221 [00:01<01:05,  3.29it/s][A
  3%|▎         | 7/221 [00:02<01:05,  3.29it/s][A
  4%|▎         | 8/221 [00:02<01:04,  3.29it/s][A
  4%|▍         | 9/221 [00:02<01:04,  3.29it/s][A
  5%|▍         | 10/221 [00:03<01:06,  3.18it/s][A
  5%|▍         | 11/221 [00:03<01:05,  3.21it/s][A
  5%|▌         | 12/221 [00:03<01:04,  3.24it/s][A
  6%|▌         | 13/221 [00:03<01:03,  3.26it/s][A
  6%|▋         | 14/221 [00:04<01:03,  3.27it/s][A
  7%|▋         | 15/221 [00:04<01:02,  3.28it/s][A
  7%|▋         | 16/221 [00:04<01:02,  3.29it/s][A
  8%|▊         | 17/221 [00:05<01:01,  3.29it/s][A
  8%|▊         | 18/221 [00:05<01:01,  3.30it/s][A
  9%|▊         | 19/221 [00:05<01:01,  3.30it/s][A
  9%|▉         | 20/221 [00:06<01:00,  3.30it/s][A
 10%|▉         | 21/221 [00:06<01:00,  3.30it/s][A
 10%|▉         | 22/221 [00:06<01:00,  3.30it/s][A
 10%|█         | 23/221 [00:07<00:59,  3.30it/s][A
 11%|█         | 24/221 [00:07<00:59,  3.30it/s][A
 11%|█▏        | 25/221 [00:07<00:59,  3.30it/s][A
 12%|█▏        | 26/221 [00:07<00:59,  3.30it/s][A
 12%|█▏        | 27/221 [00:08<00:58,  3.30it/s][A
 13%|█▎        | 28/221 [00:08<00:58,  3.30it/s][A
 13%|█▎        | 29/221 [00:08<00:58,  3.30it/s][A
 14%|█▎        | 30/221 [00:09<00:57,  3.30it/s][A
 14%|█▍        | 31/221 [00:09<00:57,  3.30it/s][A
 14%|█▍        | 32/221 [00:09<00:57,  3.30it/s][A
 15%|█▍        | 33/221 [00:10<00:56,  3.30it/s][A
 15%|█▌        | 34/221 [00:10<00:56,  3.30it/s][A
 16%|█▌        | 35/221 [00:10<00:56,  3.31it/s][A
 16%|█▋        | 36/221 [00:10<00:55,  3.31it/s][A
 17%|█▋        | 37/221 [00:11<00:55,  3.31it/s][A
 17%|█▋        | 38/221 [00:11<00:55,  3.31it/s][A
 18%|█▊        | 39/221 [00:11<00:55,  3.31it/s][A
 18%|█▊        | 40/221 [00:12<00:54,  3.31it/s][A
 19%|█▊        | 41/221 [00:12<00:54,  3.31it/s][A
 19%|█▉        | 42/221 [00:12<00:54,  3.31it/s][A
 19%|█▉        | 43/221 [00:13<00:53,  3.31it/s][A
 20%|█▉        | 44/221 [00:13<00:53,  3.30it/s][A
 20%|██        | 45/221 [00:13<00:53,  3.30it/s][A
 21%|██        | 46/221 [00:13<00:52,  3.30it/s][A
 21%|██▏       | 47/221 [00:14<00:52,  3.30it/s][A
 22%|██▏       | 48/221 [00:14<00:52,  3.30it/s][A
 22%|██▏       | 49/221 [00:14<00:52,  3.30it/s][A
 23%|██▎       | 50/221 [00:15<00:51,  3.30it/s][A
 23%|██▎       | 51/221 [00:15<00:51,  3.30it/s][A
 24%|██▎       | 52/221 [00:15<00:51,  3.30it/s][A
 24%|██▍       | 53/221 [00:16<00:50,  3.30it/s][A
 24%|██▍       | 54/221 [00:16<00:50,  3.30it/s][A
 25%|██▍       | 55/221 [00:16<00:50,  3.30it/s][A
 25%|██▌       | 56/221 [00:16<00:49,  3.30it/s][A
 26%|██▌       | 57/221 [00:17<00:49,  3.30it/s][A
 26%|██▌       | 58/221 [00:17<00:49,  3.30it/s][A
 27%|██▋       | 59/221 [00:17<00:49,  3.30it/s][A
 27%|██▋       | 60/221 [00:18<00:48,  3.30it/s][A
 28%|██▊       | 61/221 [00:18<00:48,  3.30it/s][A
 28%|██▊       | 62/221 [00:18<00:48,  3.30it/s][A
 29%|██▊       | 63/221 [00:19<00:47,  3.30it/s][A
 29%|██▉       | 64/221 [00:19<00:47,  3.30it/s][A
 29%|██▉       | 65/221 [00:19<00:47,  3.30it/s][A
 30%|██▉       | 66/221 [00:20<00:46,  3.30it/s][A
 30%|███       | 67/221 [00:20<00:46,  3.30it/s][A
 31%|███       | 68/221 [00:20<00:46,  3.30it/s][A
 31%|███       | 69/221 [00:20<00:46,  3.30it/s][A
 32%|███▏      | 70/221 [00:21<00:45,  3.30it/s][A
 32%|███▏      | 71/221 [00:21<00:45,  3.30it/s][A
 33%|███▎      | 72/221 [00:21<00:45,  3.30it/s][A
 33%|███▎      | 73/221 [00:22<00:44,  3.30it/s][A
 33%|███▎      | 74/221 [00:22<00:44,  3.30it/s][A
 34%|███▍      | 75/221 [00:22<00:44,  3.30it/s][A
 34%|███▍      | 76/221 [00:23<00:43,  3.30it/s][A
 35%|███▍      | 77/221 [00:23<00:43,  3.30it/s][A
 35%|███▌      | 78/221 [00:23<00:43,  3.30it/s][A
 36%|███▌      | 79/221 [00:23<00:42,  3.30it/s][A
 36%|███▌      | 80/221 [00:24<00:42,  3.30it/s][A
 37%|███▋      | 81/221 [00:24<00:42,  3.31it/s][A
 37%|███▋      | 82/221 [00:24<00:42,  3.31it/s][A
 38%|███▊      | 83/221 [00:25<00:41,  3.31it/s][A
 38%|███▊      | 84/221 [00:25<00:41,  3.30it/s][A
 38%|███▊      | 85/221 [00:25<00:41,  3.30it/s][A
 39%|███▉      | 86/221 [00:26<00:40,  3.30it/s][A
 39%|███▉      | 87/221 [00:26<00:40,  3.30it/s][A
 40%|███▉      | 88/221 [00:26<00:40,  3.30it/s][A
 40%|████      | 89/221 [00:26<00:39,  3.30it/s][A
 41%|████      | 90/221 [00:27<00:39,  3.30it/s][A
 41%|████      | 91/221 [00:27<00:39,  3.30it/s][A
 42%|████▏     | 92/221 [00:27<00:39,  3.30it/s][A
 42%|████▏     | 93/221 [00:28<00:38,  3.30it/s][A
 43%|████▎     | 94/221 [00:28<00:38,  3.30it/s][A
 43%|████▎     | 95/221 [00:28<00:38,  3.30it/s][A
 43%|████▎     | 96/221 [00:29<00:37,  3.30it/s][A
 44%|████▍     | 97/221 [00:29<00:37,  3.30it/s][A
 44%|████▍     | 98/221 [00:29<00:37,  3.30it/s][A
 45%|████▍     | 99/221 [00:30<00:36,  3.30it/s][A
 45%|████▌     | 100/221 [00:30<00:36,  3.30it/s][A
 46%|████▌     | 101/221 [00:30<00:36,  3.30it/s][A
 46%|████▌     | 102/221 [00:30<00:36,  3.30it/s][A
 47%|████▋     | 103/221 [00:31<00:35,  3.30it/s][A
 47%|████▋     | 104/221 [00:31<00:35,  3.30it/s][A
 48%|████▊     | 105/221 [00:31<00:35,  3.30it/s][A
 48%|████▊     | 106/221 [00:32<00:34,  3.30it/s][A
 48%|████▊     | 107/221 [00:32<00:34,  3.30it/s][A
 49%|████▉     | 108/221 [00:32<00:34,  3.30it/s][A
 49%|████▉     | 109/221 [00:33<00:33,  3.30it/s][A
 50%|████▉     | 110/221 [00:33<00:33,  3.30it/s][A
 50%|█████     | 111/221 [00:33<00:33,  3.30it/s][A
 51%|█████     | 112/221 [00:33<00:32,  3.30it/s][A
 51%|█████     | 113/221 [00:34<00:32,  3.30it/s][A
 52%|█████▏    | 114/221 [00:34<00:32,  3.30it/s][A
 52%|█████▏    | 115/221 [00:34<00:32,  3.30it/s][A
 52%|█████▏    | 116/221 [00:35<00:31,  3.30it/s][A
 53%|█████▎    | 117/221 [00:35<00:31,  3.30it/s][A
 53%|█████▎    | 118/221 [00:35<00:31,  3.30it/s][A
 54%|█████▍    | 119/221 [00:36<00:30,  3.30it/s][A
 54%|█████▍    | 120/221 [00:36<00:30,  3.31it/s][A
 55%|█████▍    | 121/221 [00:36<00:30,  3.30it/s][A
 55%|█████▌    | 122/221 [00:36<00:29,  3.30it/s][A
 56%|█████▌    | 123/221 [00:37<00:29,  3.30it/s][A
 56%|█████▌    | 124/221 [00:37<00:29,  3.30it/s][A
 57%|█████▋    | 125/221 [00:37<00:29,  3.30it/s][A
 57%|█████▋    | 126/221 [00:38<00:28,  3.30it/s][A
 57%|█████▋    | 127/221 [00:38<00:28,  3.30it/s][A
 58%|█████▊    | 128/221 [00:38<00:28,  3.30it/s][A
 58%|█████▊    | 129/221 [00:39<00:27,  3.30it/s][A
 59%|█████▉    | 130/221 [00:39<00:27,  3.30it/s][A
 59%|█████▉    | 131/221 [00:39<00:27,  3.30it/s][A
 60%|█████▉    | 132/221 [00:40<00:26,  3.30it/s][A
 60%|██████    | 133/221 [00:40<00:26,  3.30it/s][A
 61%|██████    | 134/221 [00:40<00:26,  3.30it/s][A
 61%|██████    | 135/221 [00:40<00:26,  3.30it/s][A
 62%|██████▏   | 136/221 [00:41<00:25,  3.30it/s][A
 62%|██████▏   | 137/221 [00:41<00:25,  3.30it/s][A
 62%|██████▏   | 138/221 [00:41<00:25,  3.30it/s][A
 63%|██████▎   | 139/221 [00:42<00:24,  3.30it/s][A
 63%|██████▎   | 140/221 [00:42<00:24,  3.30it/s][A
 64%|██████▍   | 141/221 [00:42<00:24,  3.30it/s][A
 64%|██████▍   | 142/221 [00:43<00:23,  3.30it/s][A
 65%|██████▍   | 143/221 [00:43<00:23,  3.30it/s][A
 65%|██████▌   | 144/221 [00:43<00:23,  3.30it/s][A
 66%|██████▌   | 145/221 [00:43<00:23,  3.30it/s][A
 66%|██████▌   | 146/221 [00:44<00:22,  3.30it/s][A
 67%|██████▋   | 147/221 [00:44<00:22,  3.30it/s][A
 67%|██████▋   | 148/221 [00:44<00:22,  3.30it/s][A
 67%|██████▋   | 149/221 [00:45<00:21,  3.30it/s][A
 68%|██████▊   | 150/221 [00:45<00:21,  3.30it/s][A
 68%|██████▊   | 151/221 [00:45<00:21,  3.30it/s][A
 69%|██████▉   | 152/221 [00:46<00:20,  3.30it/s][A
 69%|██████▉   | 153/221 [00:46<00:20,  3.30it/s][A
 70%|██████▉   | 154/221 [00:46<00:20,  3.30it/s][A
 70%|███████   | 155/221 [00:46<00:19,  3.30it/s][A
 71%|███████   | 156/221 [00:47<00:19,  3.30it/s][A
 71%|███████   | 157/221 [00:47<00:19,  3.30it/s][A
 71%|███████▏  | 158/221 [00:47<00:19,  3.30it/s][A
 72%|███████▏  | 159/221 [00:48<00:18,  3.30it/s][A
 72%|███████▏  | 160/221 [00:48<00:18,  3.30it/s][A
 73%|███████▎  | 161/221 [00:48<00:18,  3.30it/s][A
 73%|███████▎  | 162/221 [00:49<00:17,  3.30it/s][A
 74%|███████▍  | 163/221 [00:49<00:17,  3.30it/s][A
 74%|███████▍  | 164/221 [00:49<00:17,  3.30it/s][A
 75%|███████▍  | 165/221 [00:49<00:16,  3.30it/s][A
 75%|███████▌  | 166/221 [00:50<00:16,  3.30it/s][A
 76%|███████▌  | 167/221 [00:50<00:16,  3.30it/s][A
 76%|███████▌  | 168/221 [00:50<00:16,  3.30it/s][A
 76%|███████▋  | 169/221 [00:51<00:15,  3.30it/s][A
 77%|███████▋  | 170/221 [00:51<00:15,  3.30it/s][A
 77%|███████▋  | 171/221 [00:51<00:15,  3.30it/s][A
 78%|███████▊  | 172/221 [00:52<00:14,  3.30it/s][A
 78%|███████▊  | 173/221 [00:52<00:14,  3.30it/s][A
 79%|███████▊  | 174/221 [00:52<00:14,  3.30it/s][A
 79%|███████▉  | 175/221 [00:53<00:13,  3.30it/s][A
 80%|███████▉  | 176/221 [00:53<00:13,  3.30it/s][A
 80%|████████  | 177/221 [00:53<00:13,  3.30it/s][A
 81%|████████  | 178/221 [00:53<00:13,  3.30it/s][A
 81%|████████  | 179/221 [00:54<00:12,  3.30it/s][A
 81%|████████▏ | 180/221 [00:54<00:12,  3.30it/s][A
 82%|████████▏ | 181/221 [00:54<00:12,  3.30it/s][A
 82%|████████▏ | 182/221 [00:55<00:11,  3.30it/s][A
 83%|████████▎ | 183/221 [00:55<00:11,  3.29it/s][A
 83%|████████▎ | 184/221 [00:55<00:11,  3.29it/s][A
 84%|████████▎ | 185/221 [00:56<00:10,  3.30it/s][A
 84%|████████▍ | 186/221 [00:56<00:10,  3.30it/s][A
 85%|████████▍ | 187/221 [00:56<00:10,  3.30it/s][A
 85%|████████▌ | 188/221 [00:56<00:09,  3.30it/s][A
 86%|████████▌ | 189/221 [00:57<00:09,  3.30it/s][A
 86%|████████▌ | 190/221 [00:57<00:09,  3.30it/s][A
 86%|████████▋ | 191/221 [00:57<00:09,  3.30it/s][A
 87%|████████▋ | 192/221 [00:58<00:08,  3.30it/s][A
 87%|████████▋ | 193/221 [00:58<00:08,  3.30it/s][A
 88%|████████▊ | 194/221 [00:58<00:08,  3.30it/s][A
 88%|████████▊ | 195/221 [00:59<00:07,  3.30it/s][A
 89%|████████▊ | 196/221 [00:59<00:07,  3.30it/s][A
 89%|████████▉ | 197/221 [00:59<00:07,  3.30it/s][A
 90%|████████▉ | 198/221 [01:00<00:06,  3.30it/s][A
 90%|█████████ | 199/221 [01:00<00:06,  3.30it/s][A
 90%|█████████ | 200/221 [01:00<00:06,  3.30it/s][A
 91%|█████████ | 201/221 [01:00<00:06,  3.30it/s][A
 91%|█████████▏| 202/221 [01:01<00:05,  3.30it/s][A
 92%|█████████▏| 203/221 [01:01<00:05,  3.30it/s][A
 92%|█████████▏| 204/221 [01:01<00:05,  3.30it/s][A
 93%|█████████▎| 205/221 [01:02<00:04,  3.30it/s][A
 93%|█████████▎| 206/221 [01:02<00:04,  3.30it/s][A
 94%|█████████▎| 207/221 [01:02<00:04,  3.30it/s][A
 94%|█████████▍| 208/221 [01:03<00:03,  3.30it/s][A
 95%|█████████▍| 209/221 [01:03<00:03,  3.30it/s][A
 95%|█████████▌| 210/221 [01:03<00:03,  3.30it/s][A
 95%|█████████▌| 211/221 [01:03<00:03,  3.30it/s][A
 96%|█████████▌| 212/221 [01:04<00:02,  3.30it/s][A
 96%|█████████▋| 213/221 [01:04<00:02,  3.30it/s][A
 97%|█████████▋| 214/221 [01:04<00:02,  3.30it/s][A
 97%|█████████▋| 215/221 [01:05<00:01,  3.30it/s][A
 98%|█████████▊| 216/221 [01:05<00:01,  3.30it/s][A
 98%|█████████▊| 217/221 [01:05<00:01,  3.30it/s][A
 99%|█████████▊| 218/221 [01:06<00:00,  3.30it/s][A
 99%|█████████▉| 219/221 [01:06<00:00,  3.30it/s][A
100%|█████████▉| 220/221 [01:06<00:00,  3.30it/s][A
100%|██████████| 221/221 [01:06<00:00,  3.30it/s][A100%|██████████| 221/221 [01:06<00:00,  3.30it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  1%|          | 2/221 [00:00<00:43,  5.00it/s][A
  2%|▏         | 4/221 [00:01<00:56,  3.82it/s][A
  2%|▏         | 5/221 [00:01<01:09,  3.11it/s][A
  3%|▎         | 7/221 [00:01<00:57,  3.70it/s][A
  4%|▎         | 8/221 [00:02<01:09,  3.09it/s][A
  4%|▍         | 9/221 [00:02<01:18,  2.69it/s][A
  5%|▍         | 10/221 [00:03<01:26,  2.44it/s][A
  5%|▍         | 11/221 [00:03<01:30,  2.33it/s][A
  5%|▌         | 12/221 [00:04<01:14,  2.79it/s][A
  6%|▌         | 13/221 [00:04<01:35,  2.17it/s][A
  6%|▋         | 14/221 [00:05<01:37,  2.12it/s][A
  7%|▋         | 15/221 [00:05<01:19,  2.58it/s][A
  7%|▋         | 16/221 [00:05<01:06,  3.08it/s][A
  8%|▊         | 17/221 [00:06<01:50,  1.85it/s][A
  8%|▊         | 18/221 [00:06<01:34,  2.14it/s][A
  9%|▊         | 19/221 [00:07<01:26,  2.34it/s][A
 10%|▉         | 21/221 [00:07<00:54,  3.67it/s][A
 10%|█         | 23/221 [00:07<00:44,  4.44it/s][A
 11%|█         | 24/221 [00:08<00:46,  4.25it/s][A
 11%|█▏        | 25/221 [00:08<00:45,  4.27it/s][A
 12%|█▏        | 26/221 [00:08<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:09<01:10,  2.77it/s][A
 13%|█▎        | 28/221 [00:09<01:27,  2.20it/s][A
 13%|█▎        | 29/221 [00:10<01:52,  1.70it/s][A
 14%|█▎        | 30/221 [00:11<01:29,  2.13it/s][A
 14%|█▍        | 31/221 [00:11<01:11,  2.66it/s][A
 14%|█▍        | 32/221 [00:11<00:56,  3.34it/s][A
 15%|█▍        | 33/221 [00:11<00:57,  3.28it/s][A
 15%|█▌        | 34/221 [00:12<01:06,  2.81it/s][A
 16%|█▌        | 35/221 [00:12<01:02,  2.99it/s][A
 16%|█▋        | 36/221 [00:12<01:09,  2.65it/s][A
 17%|█▋        | 37/221 [00:13<01:11,  2.58it/s][A
 17%|█▋        | 38/221 [00:13<01:10,  2.61it/s][A
 18%|█▊        | 39/221 [00:14<01:23,  2.18it/s][A
 18%|█▊        | 40/221 [00:14<01:11,  2.53it/s][A
 19%|█▉        | 42/221 [00:14<00:52,  3.43it/s][A
 19%|█▉        | 43/221 [00:15<00:50,  3.52it/s][A
 20%|█▉        | 44/221 [00:15<00:43,  4.04it/s][A
 20%|██        | 45/221 [00:15<00:54,  3.24it/s][A
 21%|██        | 46/221 [00:15<00:45,  3.85it/s][A
 21%|██▏       | 47/221 [00:16<00:46,  3.74it/s][A
 22%|██▏       | 48/221 [00:16<00:43,  3.97it/s][A
 22%|██▏       | 49/221 [00:16<00:43,  3.93it/s][A
 23%|██▎       | 50/221 [00:17<01:30,  1.88it/s][A
 23%|██▎       | 51/221 [00:18<01:13,  2.32it/s][A
 24%|██▎       | 52/221 [00:18<00:56,  3.00it/s][A
 24%|██▍       | 54/221 [00:18<00:53,  3.14it/s][A
 25%|██▌       | 56/221 [00:18<00:37,  4.35it/s][A
 26%|██▌       | 57/221 [00:19<00:35,  4.62it/s][A
 26%|██▌       | 58/221 [00:19<00:51,  3.14it/s][A
 27%|██▋       | 59/221 [00:20<00:52,  3.10it/s][A
 27%|██▋       | 60/221 [00:20<00:46,  3.47it/s][A
 28%|██▊       | 61/221 [00:20<00:40,  3.92it/s][A
 28%|██▊       | 62/221 [00:20<00:34,  4.58it/s][A
 29%|██▊       | 63/221 [00:20<00:40,  3.89it/s][A
 29%|██▉       | 64/221 [00:21<00:36,  4.32it/s][A
 29%|██▉       | 65/221 [00:21<00:43,  3.60it/s][A
 30%|██▉       | 66/221 [00:21<00:37,  4.14it/s][A
 30%|███       | 67/221 [00:22<00:46,  3.33it/s][A
 31%|███       | 69/221 [00:22<00:34,  4.40it/s][A
 32%|███▏      | 70/221 [00:22<00:34,  4.38it/s][A
 32%|███▏      | 71/221 [00:22<00:39,  3.81it/s][A
 33%|███▎      | 72/221 [00:23<00:45,  3.30it/s][A
 33%|███▎      | 73/221 [00:23<00:43,  3.41it/s][A
 33%|███▎      | 74/221 [00:23<00:39,  3.69it/s][A
 34%|███▍      | 75/221 [00:24<00:43,  3.35it/s][A
 34%|███▍      | 76/221 [00:24<00:35,  4.07it/s][A
 35%|███▍      | 77/221 [00:24<00:33,  4.24it/s][A
 35%|███▌      | 78/221 [00:24<00:37,  3.84it/s][A
 36%|███▌      | 79/221 [00:25<00:41,  3.40it/s][A
 36%|███▌      | 80/221 [00:25<00:36,  3.84it/s][A
 37%|███▋      | 81/221 [00:25<00:35,  3.95it/s][A
 37%|███▋      | 82/221 [00:26<00:56,  2.47it/s][A
 38%|███▊      | 83/221 [00:26<01:01,  2.25it/s][A
 38%|███▊      | 84/221 [00:27<00:59,  2.32it/s][A
 38%|███▊      | 85/221 [00:27<00:52,  2.61it/s][A
 39%|███▉      | 86/221 [00:27<00:43,  3.11it/s][A
 39%|███▉      | 87/221 [00:28<00:45,  2.95it/s][A
 40%|███▉      | 88/221 [00:28<00:38,  3.44it/s][A
 40%|████      | 89/221 [00:28<00:43,  3.01it/s][A
 41%|████      | 90/221 [00:28<00:37,  3.50it/s][A
 41%|████      | 91/221 [00:29<00:29,  4.34it/s][A
 42%|████▏     | 92/221 [00:29<00:31,  4.07it/s][A
 42%|████▏     | 93/221 [00:29<00:33,  3.80it/s][A
 43%|████▎     | 95/221 [00:30<00:36,  3.45it/s][A
 43%|████▎     | 96/221 [00:30<00:31,  3.94it/s][A
 44%|████▍     | 97/221 [00:30<00:26,  4.68it/s][A
 44%|████▍     | 98/221 [00:31<00:37,  3.29it/s][A
 45%|████▍     | 99/221 [00:31<00:33,  3.64it/s][A
 45%|████▌     | 100/221 [00:31<00:33,  3.64it/s][A
 46%|████▌     | 101/221 [00:31<00:31,  3.84it/s][A
 46%|████▌     | 102/221 [00:32<00:32,  3.66it/s][A
 47%|████▋     | 103/221 [00:32<00:28,  4.07it/s][A
 47%|████▋     | 104/221 [00:32<00:28,  4.07it/s][A
 48%|████▊     | 105/221 [00:32<00:25,  4.57it/s][A
 48%|████▊     | 106/221 [00:33<00:28,  3.97it/s][A
 48%|████▊     | 107/221 [00:33<00:23,  4.84it/s][A
 49%|████▉     | 108/221 [00:33<00:21,  5.33it/s][A
 49%|████▉     | 109/221 [00:33<00:24,  4.50it/s][A
 50%|████▉     | 110/221 [00:34<00:36,  3.08it/s][A
 50%|█████     | 111/221 [00:34<00:48,  2.28it/s][A
 51%|█████     | 112/221 [00:35<00:42,  2.58it/s][A
 51%|█████     | 113/221 [00:35<00:34,  3.11it/s][A
 52%|█████▏    | 114/221 [00:35<00:29,  3.60it/s][A
 52%|█████▏    | 116/221 [00:35<00:24,  4.32it/s][A
 53%|█████▎    | 117/221 [00:36<00:26,  3.87it/s][A
 53%|█████▎    | 118/221 [00:36<00:33,  3.11it/s][A
 54%|█████▍    | 119/221 [00:36<00:31,  3.19it/s][A
 54%|█████▍    | 120/221 [00:37<00:29,  3.45it/s][A
 55%|█████▍    | 121/221 [00:37<00:24,  4.05it/s][A
 55%|█████▌    | 122/221 [00:37<00:24,  4.00it/s][A
 56%|█████▌    | 123/221 [00:37<00:20,  4.84it/s][A
 56%|█████▌    | 124/221 [00:38<00:26,  3.71it/s][A
 57%|█████▋    | 125/221 [00:38<00:25,  3.69it/s][A
 57%|█████▋    | 126/221 [00:38<00:22,  4.16it/s][A
 57%|█████▋    | 127/221 [00:38<00:24,  3.91it/s][A
 58%|█████▊    | 128/221 [00:38<00:21,  4.29it/s][A
 58%|█████▊    | 129/221 [00:39<00:18,  4.92it/s][A
 59%|█████▉    | 130/221 [00:39<00:22,  4.09it/s][A
 60%|█████▉    | 132/221 [00:39<00:14,  6.17it/s][A
 60%|██████    | 133/221 [00:39<00:16,  5.27it/s][A
 61%|██████    | 134/221 [00:40<00:15,  5.71it/s][A
 61%|██████    | 135/221 [00:40<00:17,  4.87it/s][A
 62%|██████▏   | 136/221 [00:40<00:21,  3.96it/s][A
 62%|██████▏   | 137/221 [00:40<00:18,  4.45it/s][A
 62%|██████▏   | 138/221 [00:40<00:16,  5.11it/s][A
 63%|██████▎   | 139/221 [00:41<00:22,  3.72it/s][A
 63%|██████▎   | 140/221 [00:41<00:20,  3.95it/s][A
 64%|██████▍   | 141/221 [00:41<00:21,  3.76it/s][A
 64%|██████▍   | 142/221 [00:42<00:22,  3.53it/s][A
 65%|██████▍   | 143/221 [00:42<00:20,  3.73it/s][A
 66%|██████▌   | 145/221 [00:43<00:21,  3.54it/s][A
 66%|██████▌   | 146/221 [00:43<00:22,  3.39it/s][A
 67%|██████▋   | 147/221 [00:43<00:18,  3.91it/s][A
 67%|██████▋   | 148/221 [00:43<00:17,  4.23it/s][A
 67%|██████▋   | 149/221 [00:43<00:14,  4.94it/s][A
 68%|██████▊   | 150/221 [00:43<00:13,  5.43it/s][A
 68%|██████▊   | 151/221 [00:44<00:15,  4.57it/s][A
 69%|██████▉   | 152/221 [00:45<00:32,  2.12it/s][A
 69%|██████▉   | 153/221 [00:45<00:29,  2.29it/s][A
 70%|██████▉   | 154/221 [00:45<00:25,  2.58it/s][A
 70%|███████   | 155/221 [00:46<00:23,  2.81it/s][A
 71%|███████   | 156/221 [00:46<00:24,  2.62it/s][A
 71%|███████   | 157/221 [00:46<00:20,  3.15it/s][A
 72%|███████▏  | 159/221 [00:47<00:14,  4.24it/s][A
 72%|███████▏  | 160/221 [00:47<00:13,  4.43it/s][A
 73%|███████▎  | 161/221 [00:47<00:11,  5.09it/s][A
 73%|███████▎  | 162/221 [00:47<00:13,  4.36it/s][A
 74%|███████▍  | 163/221 [00:48<00:13,  4.27it/s][A
 74%|███████▍  | 164/221 [00:48<00:20,  2.72it/s][A
 75%|███████▍  | 165/221 [00:48<00:17,  3.29it/s][A
 75%|███████▌  | 166/221 [00:49<00:21,  2.60it/s][A
 76%|███████▌  | 167/221 [00:49<00:16,  3.19it/s][A
 76%|███████▌  | 168/221 [00:49<00:13,  3.84it/s][A
 76%|███████▋  | 169/221 [00:50<00:14,  3.61it/s][A
 77%|███████▋  | 170/221 [00:50<00:20,  2.53it/s][A
 77%|███████▋  | 171/221 [00:50<00:15,  3.14it/s][A
 78%|███████▊  | 172/221 [00:50<00:12,  3.86it/s][A
 78%|███████▊  | 173/221 [00:51<00:11,  4.25it/s][A
 79%|███████▊  | 174/221 [00:52<00:19,  2.40it/s][A
 79%|███████▉  | 175/221 [00:52<00:20,  2.23it/s][A
 80%|███████▉  | 176/221 [00:52<00:16,  2.81it/s][A
 80%|████████  | 177/221 [00:52<00:14,  3.12it/s][A
 81%|████████  | 178/221 [00:53<00:12,  3.32it/s][A
 81%|████████  | 179/221 [00:53<00:11,  3.79it/s][A
 81%|████████▏ | 180/221 [00:53<00:10,  3.87it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.39it/s][A
 83%|████████▎ | 183/221 [00:54<00:07,  4.99it/s][A
 83%|████████▎ | 184/221 [00:54<00:07,  4.72it/s][A
 84%|████████▎ | 185/221 [00:54<00:09,  3.77it/s][A
 84%|████████▍ | 186/221 [00:55<00:09,  3.89it/s][A
 85%|████████▍ | 187/221 [00:55<00:07,  4.68it/s][A
 85%|████████▌ | 188/221 [00:55<00:10,  3.22it/s][A
 86%|████████▌ | 189/221 [00:56<00:13,  2.33it/s][A
 86%|████████▌ | 190/221 [00:56<00:14,  2.19it/s][A
 86%|████████▋ | 191/221 [00:57<00:10,  2.85it/s][A
 87%|████████▋ | 192/221 [00:57<00:08,  3.45it/s][A
 87%|████████▋ | 193/221 [00:57<00:07,  3.84it/s][A
 88%|████████▊ | 194/221 [00:57<00:08,  3.17it/s][A
 88%|████████▊ | 195/221 [00:58<00:08,  2.94it/s][A
 89%|████████▊ | 196/221 [00:59<00:11,  2.10it/s][A
 89%|████████▉ | 197/221 [00:59<00:09,  2.43it/s][A
 90%|████████▉ | 198/221 [00:59<00:08,  2.65it/s][A
 90%|█████████ | 200/221 [00:59<00:05,  3.63it/s][A
 91%|█████████ | 201/221 [01:00<00:05,  3.43it/s][A
 92%|█████████▏| 203/221 [01:00<00:03,  4.78it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  4.08it/s][A
 93%|█████████▎| 205/221 [01:00<00:03,  4.67it/s][A
 93%|█████████▎| 206/221 [01:01<00:03,  4.80it/s][A
 94%|█████████▎| 207/221 [01:01<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.58it/s][A
 95%|█████████▍| 209/221 [01:02<00:04,  2.86it/s][A
 95%|█████████▌| 210/221 [01:02<00:03,  3.48it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  4.12it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  4.25it/s][A
 96%|█████████▋| 213/221 [01:03<00:03,  2.18it/s][A
 97%|█████████▋| 214/221 [01:04<00:03,  2.27it/s][A
 97%|█████████▋| 215/221 [01:04<00:02,  2.37it/s][A
 98%|█████████▊| 216/221 [01:04<00:01,  2.80it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  3.28it/s][A
 99%|█████████▊| 218/221 [01:05<00:00,  3.95it/s][A
 99%|█████████▉| 219/221 [01:05<00:00,  2.77it/s][A
100%|█████████▉| 220/221 [01:06<00:00,  2.55it/s][A
100%|██████████| 221/221 [01:07<00:00,  1.80it/s][A100%|██████████| 221/221 [01:07<00:00,  3.29it/s]
09/10/2024 20:23:42 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_area_forward=====step 49--===========

09/10/2024 20:23:42 - INFO - __main__ -   {'area_r1': 36.3, 'area_recall': '36.3/58.7/65.4', 'area_ravg': 53.5}
09/10/2024 20:23:42 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_area_backard=====step 49--===========

09/10/2024 20:23:42 - INFO - __main__ -   {'forward_r1': 38.1, 'forward_recall': '38.1/67.1/77.8', 'forward_ravg': 61.0}
09/10/2024 20:23:42 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_area_back_with_video=====step 49--===========

09/10/2024 20:23:42 - INFO - __main__ -   {'area_video_r1': 37.6, 'area_video_recall': '37.6/68.3/77.9', 'area_video_ravg': 61.3}
09/10/2024 20:23:42 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_area_back_with_video====history best step: 49=======

09/10/2024 20:23:42 - INFO - __main__ -   {'area_video_r1': 37.6, 'area_video_recall': '37.6/68.3/77.9', 'area_video_ravg': 61.3}
09/10/2024 20:23:42 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_itm_area=====step 49--===========

09/10/2024 20:23:42 - INFO - __main__ -   {'area_video_r1': 53.4, 'area_video_recall': '53.4/75.5/82.6', 'area_video_ravg': 70.5, 'area_video_back_r1': 51.4, 'area_video_back_recall': '51.4/73.1/80.9', 'area_video_back_ravg': 68.4}
09/10/2024 20:23:42 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_itm_area====history best step: 49=======

09/10/2024 20:23:42 - INFO - __main__ -   {'area_video_r1': 53.4, 'area_video_recall': '53.4/75.5/82.6', 'area_video_ravg': 70.5, 'area_video_back_r1': 51.4, 'area_video_back_recall': '51.4/73.1/80.9', 'area_video_back_ravg': 68.4}
09/10/2024 20:23:42 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_itc_tvas=====step 49--===========

09/10/2024 20:23:42 - INFO - __main__ -   {'video_r1': 30.9, 'video_recall': '30.9/56.2/67.1', 'video_ravg': 51.4}
09/10/2024 20:23:42 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_itc_tvas====history best step: 49=======

09/10/2024 20:23:42 - INFO - __main__ -   {'video_r1': 30.9, 'video_recall': '30.9/56.2/67.1', 'video_ravg': 51.4}
09/10/2024 20:23:42 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_itm_tvas=====step 49--===========

09/10/2024 20:23:42 - INFO - __main__ -   {'video_r1': 52.6, 'video_recall': '52.6/72.3/77.8', 'video_ravg': 67.6}
09/10/2024 20:23:42 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_itm_tvas====history best step: 49=======

09/10/2024 20:23:42 - INFO - __main__ -   {'video_r1': 52.6, 'video_recall': '52.6/72.3/77.8', 'video_ravg': 67.6}
09/10/2024 20:24:21 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.0006629794370383024, 'loss_ret%tv%ta--finetune_area/loss_area': 3.7961089611053467, 'loss_ret%tv%ta--finetune_area/total_loss': 3.796772003173828}
  3%|▎         | 50/1945 [16:44<70:54:18, 134.70s/it][h264 @ 0x55edfd15ba40] mmco: unref short failure
[h264 @ 0x55edfd15ba40] mmco: unref short failure
  3%|▎         | 51/1945 [16:48<50:12:26, 95.43s/it] [h264 @ 0x55a82d3ec740] mmco: unref short failure
[h264 @ 0x55a82d3ec740] mmco: unref short failure
  3%|▎         | 52/1945 [16:52<35:44:22, 67.97s/it]  3%|▎         | 53/1945 [16:56<25:39:45, 48.83s/it]  3%|▎         | 54/1945 [17:01<18:40:35, 35.56s/it][h264 @ 0x55d5b8c52d00] mmco: unref short failure
[h264 @ 0x55d5b8c52d00] mmco: unref short failure
  3%|▎         | 55/1945 [17:07<14:04:19, 26.80s/it][h264 @ 0x55a840806300] mmco: unref short failure
[h264 @ 0x55a840806300] mmco: unref short failure
  3%|▎         | 56/1945 [17:14<10:58:26, 20.91s/it]  3%|▎         | 57/1945 [17:20<8:32:32, 16.29s/it]   3%|▎         | 58/1945 [17:25<6:47:15, 12.95s/it][h264 @ 0x55d5b07cee40] mmco: unref short failure
  3%|▎         | 59/1945 [17:31<5:41:49, 10.87s/it][h264 @ 0x56439ffc32c0] mmco: unref short failure
[h264 @ 0x56439ffc32c0] mmco: unref short failure
  3%|▎         | 60/1945 [17:37<4:53:02,  9.33s/it][h264 @ 0x55a8439cc2c0] mmco: unref short failure
[h264 @ 0x55a8439cc2c0] mmco: unref short failure
  3%|▎         | 61/1945 [17:42<4:17:04,  8.19s/it]  3%|▎         | 62/1945 [17:49<3:59:54,  7.64s/it]  3%|▎         | 63/1945 [17:54<3:39:31,  7.00s/it]  3%|▎         | 64/1945 [18:00<3:27:29,  6.62s/it][h264 @ 0x55d5bc756800] mmco: unref short failure
[h264 @ 0x55a830fb3540] mmco: unref short failure
[h264 @ 0x55a830fb3540] mmco: unref short failure
[h264 @ 0x55a8332e0340] mmco: unref short failure
  3%|▎         | 65/1945 [18:06<3:21:18,  6.42s/it][h264 @ 0x55a835427280] mmco: unref short failure
[h264 @ 0x55d5af7715c0] mmco: unref short failure
[h264 @ 0x564395253840] mmco: unref short failure
[h264 @ 0x564395253840] mmco: unref short failure
[h264 @ 0x55a838f2a2c0] mmco: unref short failure
[h264 @ 0x55a838f2a2c0] mmco: unref short failure
[h264 @ 0x5643a10d9240] mmco: unref short failure
  3%|▎         | 66/1945 [18:34<6:48:34, 13.05s/it]  3%|▎         | 67/1945 [18:40<5:34:56, 10.70s/it][h264 @ 0x5643982d4bc0] mmco: unref short failure
[h264 @ 0x564391fb6100] mmco: unref short failure
[h264 @ 0x564391fb6100] mmco: unref short failure
  3%|▎         | 68/1945 [18:47<5:05:03,  9.75s/it][h264 @ 0x55a83dbbf600] mmco: unref short failure
[h264 @ 0x55d5b65b02c0] mmco: unref short failure
[h264 @ 0x55a82d10ea80] mmco: unref short failure
  4%|▎         | 69/1945 [19:00<5:35:36, 10.73s/it][h264 @ 0x55edfc065280] mmco: unref short failure
[h264 @ 0x564395253a40] mmco: unref short failure
[h264 @ 0x564395253a40] mmco: unref short failure
[h264 @ 0x564395253a40] mmco: unref short failure
[h264 @ 0x564395253a40] mmco: unref short failure
  4%|▎         | 70/1945 [19:08<5:04:06,  9.73s/it][h264 @ 0x55edf159a840] mmco: unref short failure
[h264 @ 0x55edf159a840] mmco: unref short failure
[h264 @ 0x55a83b1a2740] mmco: unref short failure
[h264 @ 0x55a83b1a2740] mmco: unref short failure
[h264 @ 0x55a83b1a2740] mmco: unref short failure
[h264 @ 0x55a83b1a2740] mmco: unref short failure
  4%|▎         | 71/1945 [19:13<4:24:05,  8.46s/it][h264 @ 0x55edf52375c0] mmco: unref short failure
[h264 @ 0x55edf52375c0] mmco: unref short failure
[h264 @ 0x55d5b4c12900] mmco: unref short failure
  4%|▎         | 72/1945 [19:19<4:01:24,  7.73s/it][h264 @ 0x55edfe482b00] mmco: unref short failure
[h264 @ 0x55edfe482b00] mmco: unref short failure
[h264 @ 0x5643a7a1f6c0] mmco: unref short failure
[h264 @ 0x5643a7a1f6c0] mmco: unref short failure
[h264 @ 0x5643a7a1f6c0] mmco: unref short failure
[h264 @ 0x5643a7a1f6c0] mmco: unref short failure
[h264 @ 0x55a842f99c40] mmco: unref short failure
[h264 @ 0x55a842f99c40] mmco: unref short failure
  4%|▍         | 73/1945 [19:30<4:29:39,  8.64s/it][h264 @ 0x55a82f5b8f80] mmco: unref short failure
[h264 @ 0x55a82f5b8f80] mmco: unref short failure
[h264 @ 0x55a83c8eb740] mmco: unref short failure
[h264 @ 0x55a83c8eb740] mmco: unref short failure
[h264 @ 0x55d5b4d7b2c0] mmco: unref short failure
[h264 @ 0x55a832012000] mmco: unref short failure
[h264 @ 0x5643a7af5780] mmco: unref short failure
[h264 @ 0x5643a7af5780] mmco: unref short failure
[h264 @ 0x5643a2043480] mmco: unref short failure
[h264 @ 0x5643a2043480] mmco: unref short failure
[h264 @ 0x55edfc4be840] mmco: unref short failure
[h264 @ 0x55edfc4be840] mmco: unref short failure
[h264 @ 0x55edfc82dd80] mmco: unref short failure
[h264 @ 0x55edfc82dd80] mmco: unref short failure
[h264 @ 0x55ee00e13280] mmco: unref short failure
[h264 @ 0x5643a3b08bc0] mmco: unref short failure
[h264 @ 0x55a83c1ef540] mmco: unref short failure
[h264 @ 0x55a83c1ef540] mmco: unref short failure
[h264 @ 0x55d5c45ef1c0] mmco: unref short failure
[h264 @ 0x5643981a7b40] mmco: unref short failure
[h264 @ 0x5643981a7b40] mmco: unref short failure
[h264 @ 0x5643981a7b40] mmco: unref short failure
[h264 @ 0x55d5b4c8ccc0] mmco: unref short failure
[h264 @ 0x55d5b4c8ccc0] mmco: unref short failure
[h264 @ 0x55ee06880dc0] mmco: unref short failure
[h264 @ 0x5643a4dac680] mmco: unref short failure
[h264 @ 0x5643a4dac680] mmco: unref short failure
[h264 @ 0x5643a4dac680] mmco: unref short failure
[h264 @ 0x5643a4dac680] mmco: unref short failure
[h264 @ 0x5643ab0e4cc0] mmco: unref short failure
[h264 @ 0x5643ab0e4cc0] mmco: unref short failure
[h264 @ 0x5643a3b00c00] mmco: unref short failure
[h264 @ 0x5643a3b00c00] mmco: unref short failure
[h264 @ 0x55ee0399e400] mmco: unref short failure
[h264 @ 0x5643aa5891c0] mmco: unref short failure
[h264 @ 0x5643997c3500] mmco: unref short failure
[h264 @ 0x55a8453ae280] mmco: unref short failure
[h264 @ 0x55d5c72a0f80] mmco: unref short failure
[h264 @ 0x55d5c72a0f80] mmco: unref short failure
[h264 @ 0x55d5c72a0f80] mmco: unref short failure
[h264 @ 0x55d5c72a0f80] mmco: unref short failure
  4%|▍         | 74/1945 [20:40<14:04:42, 27.09s/it][h264 @ 0x55a843404f40] mmco: unref short failure
  4%|▍         | 75/1945 [20:47<10:52:47, 20.95s/it][h264 @ 0x55a837f79a00] mmco: unref short failure
[h264 @ 0x55a837f79a00] mmco: unref short failure
[h264 @ 0x55d5bdf3fd40] mmco: unref short failure
[h264 @ 0x55d5bdf3fd40] mmco: unref short failure
  4%|▍         | 76/1945 [20:53<8:35:19, 16.54s/it] [h264 @ 0x55a83e3703c0] mmco: unref short failure
[h264 @ 0x55a83e3703c0] mmco: unref short failure
[h264 @ 0x55a83e3703c0] mmco: unref short failure
[h264 @ 0x55a83e3703c0] mmco: unref short failure
[h264 @ 0x55a82f46f580] mmco: unref short failure
[h264 @ 0x55ee09240840] mmco: unref short failure
  4%|▍         | 77/1945 [21:04<7:43:24, 14.88s/it][h264 @ 0x55a82ef07540] mmco: unref short failure
[h264 @ 0x55a82ef07540] mmco: unref short failure
[h264 @ 0x5643a6729c00] mmco: unref short failure
[h264 @ 0x55d5b0e40180] mmco: unref short failure
[h264 @ 0x55d5b0e40180] mmco: unref short failure
[h264 @ 0x55a8435f0d40] mmco: unref short failure
[h264 @ 0x55ee003a0140] mmco: unref short failure
[h264 @ 0x55ee003a0140] mmco: unref short failure
[h264 @ 0x55edf4d41dc0] mmco: unref short failure
[h264 @ 0x55edf4d41dc0] mmco: unref short failure
[h264 @ 0x55edf4d41dc0] mmco: unref short failure
[h264 @ 0x55edf4d41dc0] mmco: unref short failure
[h264 @ 0x55edf4d41dc0] mmco: unref short failure
[h264 @ 0x55edf4d41dc0] mmco: unref short failure
[h264 @ 0x55edf4d41dc0] mmco: unref short failure
[h264 @ 0x55edf4d41dc0] mmco: unref short failure
[h264 @ 0x55edf4d41dc0] mmco: unref short failure
[h264 @ 0x55edf4d41dc0] mmco: unref short failure
  4%|▍         | 78/1945 [21:20<7:55:13, 15.27s/it]  4%|▍         | 79/1945 [21:25<6:19:34, 12.21s/it][h264 @ 0x55d5bd678440] mmco: unref short failure
[h264 @ 0x55d5bd678440] mmco: unref short failure
  4%|▍         | 80/1945 [21:31<5:20:38, 10.32s/it][h264 @ 0x55ee0839ec00] mmco: unref short failure
[h264 @ 0x55ee0839ec00] mmco: unref short failure
  4%|▍         | 81/1945 [21:37<4:36:51,  8.91s/it][h264 @ 0x55a834907fc0] mmco: unref short failure
[h264 @ 0x564393266580] mmco: unref short failure
[h264 @ 0x564393266580] mmco: unref short failure
[h264 @ 0x55a83f56dec0] mmco: unref short failure
[h264 @ 0x55a83f56dec0] mmco: unref short failure
[h264 @ 0x55d5bc0e8040] mmco: unref short failure
[h264 @ 0x55d5bc0e8040] mmco: unref short failure
[h264 @ 0x55edfd802540] mmco: unref short failure
[h264 @ 0x55edfd802540] mmco: unref short failure
[h264 @ 0x564395b9a3c0] mmco: unref short failure
[h264 @ 0x564395b9a3c0] mmco: unref short failure
[h264 @ 0x55ee02dd7c80] mmco: unref short failure
[h264 @ 0x55ee02dd7c80] mmco: unref short failure
[h264 @ 0x5643ae9a9480] mmco: unref short failure
[h264 @ 0x5643ae9a9480] mmco: unref short failure
[h264 @ 0x55d5c7603440] mmco: unref short failure
[h264 @ 0x55d5c7603440] mmco: unref short failure
[h264 @ 0x55d5c7603440] mmco: unref short failure
[h264 @ 0x55d5c7603440] mmco: unref short failure
[h264 @ 0x55edf263f200] mmco: unref short failure
[h264 @ 0x55edf263f200] mmco: unref short failure
[h264 @ 0x55edf263f200] mmco: unref short failure
not have audios 7wavFXW3AFw.7
[h264 @ 0x55a83ee70e40] mmco: unref short failure
[h264 @ 0x55a83ee70e40] mmco: unref short failure
[h264 @ 0x55a8378189c0] mmco: unref short failure
  4%|▍         | 82/1945 [22:43<13:36:00, 26.28s/it][h264 @ 0x56439222e880] mmco: unref short failure
[h264 @ 0x56439222e880] mmco: unref short failure
  4%|▍         | 83/1945 [22:49<10:26:37, 20.19s/it][h264 @ 0x55a845b5bec0] mmco: unref short failure
[h264 @ 0x55a843404d40] mmco: unref short failure
[h264 @ 0x55d5b1337980] mmco: unref short failure
[h264 @ 0x55d5b1337980] mmco: unref short failure
[h264 @ 0x55d5ba7f5280] mmco: unref short failure
[h264 @ 0x55d5ba7f5280] mmco: unref short failure
  4%|▍         | 84/1945 [23:02<9:18:15, 18.00s/it] [h264 @ 0x55a83c1d4040] mmco: unref short failure
  4%|▍         | 85/1945 [23:09<7:30:44, 14.54s/it]  4%|▍         | 86/1945 [23:19<6:51:13, 13.27s/it][h264 @ 0x55a83dc30bc0] mmco: unref short failure
[h264 @ 0x55a83dc30bc0] mmco: unref short failure
  4%|▍         | 87/1945 [23:25<5:46:20, 11.18s/it][h264 @ 0x55a84650d4c0] mmco: unref short failure
  5%|▍         | 88/1945 [23:32<5:03:31,  9.81s/it][h264 @ 0x55d5ccfcd140] mmco: unref short failure
[h264 @ 0x55d5ccfcd140] mmco: unref short failure
[h264 @ 0x56439f691640] mmco: unref short failure
[h264 @ 0x56439f691640] mmco: unref short failure
[h264 @ 0x564395062180] mmco: unref short failure
[h264 @ 0x564395062180] mmco: unref short failure
[h264 @ 0x56439dbb1540] mmco: unref short failure
[h264 @ 0x564394545000] mmco: unref short failure
[h264 @ 0x564394545000] mmco: unref short failure
  5%|▍         | 89/1945 [23:41<4:57:40,  9.62s/it][h264 @ 0x55ee0a4a3900] mmco: unref short failure
[h264 @ 0x5643a2526b00] mmco: unref short failure
[h264 @ 0x5643a2526b00] mmco: unref short failure
[h264 @ 0x55a843e82740] mmco: unref short failure
[h264 @ 0x55d5c82f9140] mmco: unref short failure
[h264 @ 0x55d5c82f9140] mmco: unref short failure
[h264 @ 0x55ee078ee880] mmco: unref short failure
[h264 @ 0x55ee078ee880] mmco: unref short failure
[h264 @ 0x55ee078ee880] mmco: unref short failure
[h264 @ 0x55ee078ee880] mmco: unref short failure
[h264 @ 0x55a83ea41bc0] mmco: unref short failure
[h264 @ 0x55a83ea41bc0] mmco: unref short failure
[h264 @ 0x5643916db340] mmco: unref short failure
[h264 @ 0x5643916db340] mmco: unref short failure
[h264 @ 0x55d5c7196e40] mmco: unref short failure
[h264 @ 0x55d5c7196e40] mmco: unref short failure
[h264 @ 0x55d5c9985b80] mmco: unref short failure
[h264 @ 0x55d5c9985b80] mmco: unref short failure
[h264 @ 0x55ee08785300] mmco: unref short failure
[h264 @ 0x5643a7671b80] mmco: unref short failure
[h264 @ 0x55d5cd946b40] mmco: unref short failure
[h264 @ 0x55d5cd946b40] mmco: unref short failure
[h264 @ 0x55a840aa4040] mmco: unref short failure
[h264 @ 0x55d5b7bcc000] mmco: unref short failure
[h264 @ 0x56439fd84f00] mmco: unref short failure
[h264 @ 0x56439fd84f00] mmco: unref short failure
[h264 @ 0x56439fd84f00] mmco: unref short failure
[h264 @ 0x56439fd84f00] mmco: unref short failure
[h264 @ 0x56439fd84f00] mmco: unref short failure
[h264 @ 0x56439fd84f00] mmco: unref short failure
[h264 @ 0x55ee02fb5380] mmco: unref short failure
[h264 @ 0x55ee02fb5380] mmco: unref short failure
[h264 @ 0x5643a30ceb00] mmco: unref short failure
[h264 @ 0x55a83c91ed80] mmco: unref short failure
[h264 @ 0x5643abbc4e80] mmco: unref short failure
[h264 @ 0x55edfe843800] mmco: unref short failure
[h264 @ 0x55edfe843800] mmco: unref short failure
  5%|▍         | 90/1945 [24:54<14:40:43, 28.49s/it][h264 @ 0x56439ff51780] mmco: unref short failure
  5%|▍         | 91/1945 [25:00<11:12:06, 21.75s/it]  5%|▍         | 92/1945 [25:06<8:44:09, 16.97s/it] [h264 @ 0x55a841890500] mmco: unref short failure
  5%|▍         | 93/1945 [25:16<7:47:12, 15.14s/it][h264 @ 0x5643af45f780] mmco: unref short failure
[h264 @ 0x5643af45f780] mmco: unref short failure
  5%|▍         | 94/1945 [25:25<6:42:33, 13.05s/it][h264 @ 0x5643920a4040] mmco: unref short failure
[h264 @ 0x5643920a4040] mmco: unref short failure
[h264 @ 0x5643935568c0] mmco: unref short failure
  5%|▍         | 95/1945 [25:31<5:38:50, 10.99s/it][h264 @ 0x5643aa4a2c40] mmco: unref short failure
[h264 @ 0x5643aa4a2c40] mmco: unref short failure
  5%|▍         | 96/1945 [25:37<4:52:18,  9.49s/it][h264 @ 0x55ee0839ee00] mmco: unref short failure
  5%|▍         | 97/1945 [25:43<4:19:29,  8.43s/it][h264 @ 0x55a83ca20100] mmco: unref short failure
[h264 @ 0x55d5c8f01a40] mmco: unref short failure
[h264 @ 0x55ee0827f680] mmco: unref short failure
[h264 @ 0x55ee0827f680] mmco: unref short failure
[h264 @ 0x5643aa1285c0] mmco: unref short failure
[h264 @ 0x55d5c8999080] mmco: unref short failure
[h264 @ 0x55d5c8999080] mmco: unref short failure
[h264 @ 0x55ee08364ec0] mmco: unref short failure
[h264 @ 0x55d5c839ca40] mmco: unref short failure
[h264 @ 0x55d5c839ca40] mmco: unref short failure
[h264 @ 0x55d5b5a6e9c0] mmco: unref short failure
[h264 @ 0x55d5c72a45c0] mmco: unref short failure
[h264 @ 0x55d5c72a45c0] mmco: unref short failure
[h264 @ 0x55a84629e7c0] mmco: unref short failure
[h264 @ 0x55edfd6746c0] mmco: unref short failure
[h264 @ 0x55d5b1171700] mmco: unref short failure
[h264 @ 0x55d5b1171700] mmco: unref short failure
[h264 @ 0x55a8452ab1c0] mmco: unref short failure
[h264 @ 0x55a8452ab1c0] mmco: unref short failure
[h264 @ 0x55a8439c0780] mmco: unref short failure
[h264 @ 0x55a8439c0780] mmco: unref short failure
[h264 @ 0x55a849387200] mmco: unref short failure
[h264 @ 0x56439d2c5b00] mmco: unref short failure
[h264 @ 0x56439d2c5b00] mmco: unref short failure
[h264 @ 0x56439d2c5b00] mmco: unref short failure
[h264 @ 0x56439d2c5b00] mmco: unref short failure
[h264 @ 0x55ee075f07c0] mmco: unref short failure
[h264 @ 0x55ee098c7340] mmco: unref short failure
[h264 @ 0x55ee098c7340] mmco: unref short failure
  5%|▌         | 98/1945 [27:08<16:14:01, 31.64s/it][h264 @ 0x55d5b05d3f00] mmco: unref short failure
[h264 @ 0x55d5b05d3f00] mmco: unref short failure
[h264 @ 0x55d5b05d3f00] mmco: unref short failure
[h264 @ 0x55d5b05d3f00] mmco: unref short failure
[h264 @ 0x55d5b05d3f00] mmco: unref short failure
[h264 @ 0x5643916f5e00] mmco: unref short failure
[h264 @ 0x5643916f5e00] mmco: unref short failure
  5%|▌         | 99/1945 [27:15<12:20:13, 24.06s/it]09/10/2024 20:34:54 - INFO - __main__ -   evaluate on ret%tvas--msrvtt_ret task
09/10/2024 20:34:54 - INFO - __main__ -   start running ret%tvas validation...
[h264 @ 0x55ee0204eac0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55a82d270500] mmco: unref short failure
[h264 @ 0x55a82d270500] mmco: unref short failure
[h264 @ 0x55ee00056700] mmco: unref short failure
[h264 @ 0x55ee00056700] mmco: unref short failure
[h264 @ 0x564398261d00] mmco: unref short failure
[h264 @ 0x564398261d00] mmco: unref short failure
[h264 @ 0x55d5c7e95080] mmco: unref short failure
[h264 @ 0x55a830a64c40] mmco: unref short failure
[h264 @ 0x55d5cabfd2c0] mmco: unref short failure
[h264 @ 0x55d5cabfd2c0] mmco: unref short failure
[h264 @ 0x55d5cabfd2c0] mmco: unref short failure
[h264 @ 0x55d5cabfd2c0] mmco: unref short failure
[h264 @ 0x55d5cabfd2c0] mmco: unref short failure
[h264 @ 0x55d5cabfd2c0] mmco: unref short failure
[h264 @ 0x55d5cabfd2c0] mmco: unref short failure
[h264 @ 0x55d5cabfd2c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55a846654800] mmco: unref short failure
[h264 @ 0x55a846654800] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55a846654800] mmco: unref short failure
[h264 @ 0x55a846654800] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55a846654800] mmco: unref short failure
[h264 @ 0x55a846654800] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55a849eb9500] mmco: unref short failure
[h264 @ 0x55ee087521c0] mmco: unref short failure
[h264 @ 0x55ee087521c0] mmco: unref short failure
[h264 @ 0x55d5c9323e40] mmco: unref short failure
[h264 @ 0x55edfbf2ae40] mmco: unref short failure
[h264 @ 0x55edfbf2ae40] mmco: unref short failure
[h264 @ 0x55ee083d9d00] mmco: unref short failure
[h264 @ 0x55ee083d9d00] mmco: unref short failure
[h264 @ 0x55a841a30dc0] mmco: unref short failure
[h264 @ 0x55a841a30dc0] mmco: unref short failure
[h264 @ 0x55a841a30dc0] mmco: unref short failure
[h264 @ 0x5643a122bb80] mmco: unref short failure
[h264 @ 0x55ee08353180] mmco: unref short failure
[h264 @ 0x55a843991780] mmco: unref short failure
[h264 @ 0x55a843991780] mmco: unref short failure
[h264 @ 0x5643ab2a5c00] mmco: unref short failure
[h264 @ 0x5643ac818d40] mmco: unref short failure
[h264 @ 0x56439170f480] mmco: unref short failure
[h264 @ 0x56439170f480] mmco: unref short failure
[h264 @ 0x55a844174240] mmco: unref short failure
[h264 @ 0x55a844174240] mmco: unref short failure
[h264 @ 0x55d5c9d17900] mmco: unref short failure
[h264 @ 0x55d5c9d17900] mmco: unref short failure
[h264 @ 0x55d5c9d17900] mmco: unref short failure
[h264 @ 0x55d5c9d17900] mmco: unref short failure
[h264 @ 0x55d5c9d17900] mmco: unref short failure
[h264 @ 0x55d5c9d17900] mmco: unref short failure
[h264 @ 0x55a836982400] mmco: unref short failure
[h264 @ 0x55ee064c4900] mmco: unref short failure
[h264 @ 0x55edfd802300] mmco: unref short failure
[h264 @ 0x55edfd802300] mmco: unref short failure
[h264 @ 0x55edfd802300] mmco: unref short failure
[h264 @ 0x55edfd802300] mmco: unref short failure
[h264 @ 0x56439c2463c0] mmco: unref short failure
[h264 @ 0x55edf7460f80] mmco: unref short failure
[h264 @ 0x55ee0e0a4240] mmco: unref short failure
[h264 @ 0x55ee0e0a4240] mmco: unref short failure
[h264 @ 0x5643935568c0] mmco: unref short failure
[h264 @ 0x55ee09505600] mmco: unref short failure
[h264 @ 0x55ee09505600] mmco: unref short failure
[h264 @ 0x5643aab1ef80] mmco: unref short failure
[h264 @ 0x55ee0bf94d80] mmco: unref short failure
[h264 @ 0x55ee0bf94d80] mmco: unref short failure
[h264 @ 0x55ee0bf94d80] mmco: unref short failure
[h264 @ 0x55ee0bf94d80] mmco: unref short failure
[h264 @ 0x55edfc6d9200] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:49,  4.43it/s][A
  1%|          | 2/221 [00:00<01:24,  2.60it/s][A
  1%|▏         | 3/221 [00:01<01:29,  2.45it/s][A
  2%|▏         | 4/221 [00:01<01:15,  2.89it/s][A
  2%|▏         | 5/221 [00:01<01:06,  3.23it/s][A
  3%|▎         | 6/221 [00:01<00:59,  3.62it/s][A
  3%|▎         | 7/221 [00:02<01:04,  3.33it/s][A
  4%|▎         | 8/221 [00:02<00:57,  3.72it/s][A
  4%|▍         | 9/221 [00:02<00:55,  3.84it/s][A[h264 @ 0x55ee04b7da40] mmco: unref short failure
[h264 @ 0x55ee04b7da40] mmco: unref short failure

  5%|▍         | 10/221 [00:03<01:13,  2.89it/s][A
  5%|▍         | 11/221 [00:03<01:03,  3.30it/s][A
  5%|▌         | 12/221 [00:03<00:59,  3.50it/s][A
  6%|▌         | 13/221 [00:04<01:06,  3.15it/s][A
  6%|▋         | 14/221 [00:04<01:00,  3.41it/s][A
  7%|▋         | 15/221 [00:04<01:02,  3.30it/s][A
  7%|▋         | 16/221 [00:05<01:09,  2.93it/s][A
  8%|▊         | 17/221 [00:05<01:35,  2.14it/s][A
  8%|▊         | 18/221 [00:06<01:26,  2.34it/s][A
  9%|▊         | 19/221 [00:06<01:13,  2.73it/s][A
  9%|▉         | 20/221 [00:06<01:02,  3.24it/s][A
 10%|▉         | 21/221 [00:06<00:54,  3.66it/s][A
 10%|▉         | 22/221 [00:07<01:01,  3.26it/s][A
 10%|█         | 23/221 [00:07<00:55,  3.54it/s][A
 11%|█         | 24/221 [00:07<00:53,  3.70it/s][A
 11%|█▏        | 25/221 [00:07<00:51,  3.80it/s][A[h264 @ 0x55ee0819e480] mmco: unref short failure
[h264 @ 0x55ee0819e480] mmco: unref short failure

 12%|█▏        | 26/221 [00:08<00:58,  3.34it/s][A
 12%|█▏        | 27/221 [00:08<00:47,  4.08it/s][A
 13%|█▎        | 28/221 [00:08<01:03,  3.05it/s][A
 13%|█▎        | 29/221 [00:09<01:05,  2.91it/s][A
 14%|█▎        | 30/221 [00:09<01:21,  2.35it/s][A
 14%|█▍        | 31/221 [00:10<01:11,  2.67it/s][A
 15%|█▍        | 33/221 [00:10<00:55,  3.36it/s][A
 15%|█▌        | 34/221 [00:10<00:46,  4.01it/s][A
 16%|█▌        | 35/221 [00:10<00:48,  3.81it/s][A
 16%|█▋        | 36/221 [00:11<01:00,  3.06it/s][A
 17%|█▋        | 37/221 [00:11<01:02,  2.94it/s][A
 17%|█▋        | 38/221 [00:12<01:11,  2.56it/s][A
 18%|█▊        | 39/221 [00:12<00:59,  3.07it/s][A
 18%|█▊        | 40/221 [00:12<01:00,  2.99it/s][A
 19%|█▊        | 41/221 [00:13<00:54,  3.33it/s][A
 19%|█▉        | 42/221 [00:13<01:01,  2.89it/s][A
 19%|█▉        | 43/221 [00:13<01:00,  2.94it/s][A
 20%|█▉        | 44/221 [00:14<00:54,  3.26it/s][A
 20%|██        | 45/221 [00:14<01:04,  2.73it/s][A
 21%|██        | 46/221 [00:14<00:58,  2.97it/s][A
 21%|██▏       | 47/221 [00:15<01:00,  2.85it/s][A
 22%|██▏       | 48/221 [00:15<00:48,  3.55it/s][A
 22%|██▏       | 49/221 [00:15<00:49,  3.51it/s][A
 23%|██▎       | 50/221 [00:15<00:53,  3.22it/s][A
 23%|██▎       | 51/221 [00:16<00:53,  3.17it/s][A
 24%|██▎       | 52/221 [00:16<00:50,  3.35it/s][A
 24%|██▍       | 53/221 [00:16<00:45,  3.71it/s][A[h264 @ 0x5643a7d3dd80] mmco: unref short failure
[h264 @ 0x5643a7d3dd80] mmco: unref short failure

 24%|██▍       | 54/221 [00:17<01:16,  2.17it/s][A
 25%|██▍       | 55/221 [00:18<01:14,  2.24it/s][A
 25%|██▌       | 56/221 [00:18<01:02,  2.66it/s][A
 26%|██▌       | 57/221 [00:18<00:53,  3.07it/s][A
 26%|██▌       | 58/221 [00:18<00:50,  3.22it/s][A
 27%|██▋       | 59/221 [00:19<00:48,  3.36it/s][A
 27%|██▋       | 60/221 [00:19<01:08,  2.37it/s][A
 28%|██▊       | 61/221 [00:19<00:55,  2.86it/s][A
 28%|██▊       | 62/221 [00:20<00:58,  2.71it/s][A
 29%|██▊       | 63/221 [00:20<00:59,  2.68it/s][A[h264 @ 0x5643a1c2edc0] mmco: unref short failure
[h264 @ 0x5643a1c2edc0] mmco: unref short failure

 29%|██▉       | 64/221 [00:21<01:15,  2.07it/s][A
 29%|██▉       | 65/221 [00:21<01:06,  2.36it/s][A
 30%|██▉       | 66/221 [00:22<01:08,  2.27it/s][A
 30%|███       | 67/221 [00:22<00:57,  2.66it/s][A[h264 @ 0x55a83e24a040] mmco: unref short failure
[h264 @ 0x55a83e24a040] mmco: unref short failure

 31%|███       | 68/221 [00:22<00:46,  3.29it/s][A
 31%|███       | 69/221 [00:23<01:14,  2.04it/s][A
 32%|███▏      | 70/221 [00:23<01:05,  2.32it/s][A[h264 @ 0x55d5c15c0f80] mmco: unref short failure

 32%|███▏      | 71/221 [00:24<00:57,  2.60it/s][A
 33%|███▎      | 72/221 [00:24<01:08,  2.17it/s][A
 33%|███▎      | 73/221 [00:25<01:11,  2.07it/s][A
 33%|███▎      | 74/221 [00:25<00:54,  2.70it/s][A
 34%|███▍      | 75/221 [00:25<00:53,  2.74it/s][A
 34%|███▍      | 76/221 [00:25<00:46,  3.12it/s][A
 35%|███▍      | 77/221 [00:26<00:54,  2.63it/s][A
 36%|███▌      | 79/221 [00:26<00:45,  3.10it/s][A[h264 @ 0x55a8466c8940] mmco: unref short failure

 36%|███▌      | 80/221 [00:27<00:45,  3.10it/s][A
 37%|███▋      | 81/221 [00:27<00:46,  3.02it/s][A
 37%|███▋      | 82/221 [00:28<00:48,  2.86it/s][A
 38%|███▊      | 83/221 [00:28<01:01,  2.24it/s][A
 38%|███▊      | 84/221 [00:29<00:55,  2.49it/s][A
 39%|███▉      | 86/221 [00:29<00:35,  3.77it/s][A
 39%|███▉      | 87/221 [00:30<01:05,  2.03it/s][A
 40%|███▉      | 88/221 [00:31<01:07,  1.96it/s][A[h264 @ 0x55d5cd012780] mmco: unref short failure

 40%|████      | 89/221 [00:31<00:58,  2.25it/s][A
 41%|████      | 90/221 [00:31<00:51,  2.54it/s][A
 41%|████      | 91/221 [00:31<00:45,  2.87it/s][A
 42%|████▏     | 92/221 [00:32<00:41,  3.08it/s][A
 42%|████▏     | 93/221 [00:32<00:44,  2.87it/s][A
 43%|████▎     | 94/221 [00:32<00:43,  2.94it/s][A
 43%|████▎     | 95/221 [00:33<00:43,  2.90it/s][A
 43%|████▎     | 96/221 [00:33<00:59,  2.09it/s][A
 44%|████▍     | 97/221 [00:34<00:51,  2.42it/s][A
 44%|████▍     | 98/221 [00:35<01:10,  1.75it/s][A
 45%|████▍     | 99/221 [00:35<00:57,  2.12it/s][A
 45%|████▌     | 100/221 [00:35<00:49,  2.45it/s][A
 46%|████▌     | 101/221 [00:35<00:43,  2.77it/s][A
 46%|████▌     | 102/221 [00:36<00:57,  2.06it/s][A
 47%|████▋     | 104/221 [00:36<00:37,  3.14it/s][A
 48%|████▊     | 105/221 [00:37<00:36,  3.17it/s][A
 48%|████▊     | 106/221 [00:37<00:48,  2.36it/s][A
 48%|████▊     | 107/221 [00:38<00:41,  2.75it/s][A
 49%|████▉     | 108/221 [00:38<00:40,  2.78it/s][A
 49%|████▉     | 109/221 [00:38<00:36,  3.08it/s][A
 50%|████▉     | 110/221 [00:38<00:33,  3.30it/s][A
 50%|█████     | 111/221 [00:39<00:35,  3.10it/s][A
 51%|█████     | 112/221 [00:39<00:33,  3.25it/s][A
 51%|█████     | 113/221 [00:39<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:40<00:22,  4.66it/s][A
 52%|█████▏    | 116/221 [00:40<00:25,  4.16it/s][A
 53%|█████▎    | 117/221 [00:40<00:30,  3.45it/s][A
 53%|█████▎    | 118/221 [00:41<00:28,  3.62it/s][A
 54%|█████▍    | 119/221 [00:41<00:33,  3.09it/s][A
 54%|█████▍    | 120/221 [00:41<00:27,  3.65it/s][A
 55%|█████▍    | 121/221 [00:41<00:22,  4.38it/s][A
 55%|█████▌    | 122/221 [00:42<00:25,  3.81it/s][A
 56%|█████▌    | 123/221 [00:42<00:24,  4.07it/s][A
 56%|█████▌    | 124/221 [00:42<00:29,  3.32it/s][A
 57%|█████▋    | 125/221 [00:43<00:32,  2.92it/s][A[h264 @ 0x55ee1025f100] mmco: unref short failure
[h264 @ 0x55ee1025f100] mmco: unref short failure

 57%|█████▋    | 126/221 [00:43<00:26,  3.53it/s][A[h264 @ 0x55ee1025f100] mmco: unref short failure
[h264 @ 0x55ee1025f100] mmco: unref short failure
[h264 @ 0x55a837647280] mmco: unref short failure

 57%|█████▋    | 127/221 [00:44<00:37,  2.50it/s][A
 58%|█████▊    | 128/221 [00:44<00:35,  2.63it/s][A
 58%|█████▊    | 129/221 [00:44<00:27,  3.33it/s][A
[h264 @ 0x55a848455480] mmco: unref short failure
 59%|█████▉    | 130/221 [00:44<00:26,  3.45it/s][A
 59%|█████▉    | 131/221 [00:44<00:22,  4.08it/s][A[h264 @ 0x55edfc3f1a80] mmco: unref short failure
[h264 @ 0x5643a9a40100] mmco: unref short failure

 60%|█████▉    | 132/221 [00:46<01:01,  1.44it/s][A
 60%|██████    | 133/221 [00:47<00:52,  1.67it/s][A
 61%|██████    | 134/221 [00:47<01:00,  1.43it/s][A
 61%|██████    | 135/221 [00:49<01:10,  1.23it/s][A
 62%|██████▏   | 136/221 [00:49<00:57,  1.49it/s][A
 62%|██████▏   | 137/221 [00:49<00:48,  1.73it/s][A
 62%|██████▏   | 138/221 [00:50<00:43,  1.90it/s][A[h264 @ 0x55ee0b498200] mmco: unref short failure
[h264 @ 0x55ee0b498200] mmco: unref short failure

 63%|██████▎   | 139/221 [00:50<00:46,  1.77it/s][A
 63%|██████▎   | 140/221 [00:51<00:41,  1.94it/s][A
 64%|██████▍   | 141/221 [00:51<00:37,  2.11it/s][A
 64%|██████▍   | 142/221 [00:51<00:34,  2.30it/s][A[h264 @ 0x55a8435aa840] mmco: unref short failure

 65%|██████▍   | 143/221 [00:52<00:35,  2.22it/s][A
 65%|██████▌   | 144/221 [00:52<00:34,  2.25it/s][A
 66%|██████▌   | 146/221 [00:53<00:21,  3.55it/s][A
 67%|██████▋   | 147/221 [00:53<00:22,  3.32it/s][A
 67%|██████▋   | 148/221 [00:53<00:24,  3.04it/s][A
 67%|██████▋   | 149/221 [00:54<00:29,  2.42it/s][A
 68%|██████▊   | 150/221 [00:54<00:26,  2.70it/s][A
 68%|██████▊   | 151/221 [00:55<00:27,  2.58it/s][A
 69%|██████▉   | 152/221 [00:55<00:30,  2.28it/s][A
 69%|██████▉   | 153/221 [00:55<00:23,  2.94it/s][A
 70%|██████▉   | 154/221 [00:55<00:20,  3.34it/s][A
 70%|███████   | 155/221 [00:56<00:20,  3.25it/s][A
 71%|███████   | 156/221 [00:56<00:20,  3.19it/s][A
 71%|███████   | 157/221 [00:57<00:22,  2.87it/s][A
 71%|███████▏  | 158/221 [00:57<00:22,  2.86it/s][A
 72%|███████▏  | 159/221 [00:57<00:17,  3.47it/s][A
 72%|███████▏  | 160/221 [00:57<00:15,  3.96it/s][A
 73%|███████▎  | 161/221 [00:57<00:14,  4.06it/s][A
 74%|███████▍  | 163/221 [00:58<00:13,  4.41it/s][A
 74%|███████▍  | 164/221 [00:58<00:12,  4.52it/s][A
 75%|███████▍  | 165/221 [00:58<00:13,  4.12it/s][A
 75%|███████▌  | 166/221 [00:59<00:14,  3.74it/s][A
 76%|███████▌  | 167/221 [00:59<00:12,  4.48it/s][A
 76%|███████▌  | 168/221 [00:59<00:12,  4.12it/s][A
 76%|███████▋  | 169/221 [00:59<00:10,  4.84it/s][A
 77%|███████▋  | 170/221 [00:59<00:10,  4.71it/s][A
 77%|███████▋  | 171/221 [01:00<00:15,  3.25it/s][A
 78%|███████▊  | 172/221 [01:00<00:14,  3.47it/s][A
 78%|███████▊  | 173/221 [01:01<00:17,  2.75it/s][A
 79%|███████▊  | 174/221 [01:01<00:16,  2.91it/s][A
 79%|███████▉  | 175/221 [01:01<00:15,  3.02it/s][A
 80%|███████▉  | 176/221 [01:02<00:12,  3.66it/s][A
 80%|████████  | 177/221 [01:02<00:10,  4.00it/s][A
 81%|████████  | 178/221 [01:03<00:18,  2.35it/s][A
 81%|████████  | 179/221 [01:03<00:17,  2.40it/s][A
 81%|████████▏ | 180/221 [01:03<00:14,  2.89it/s][A
 82%|████████▏ | 181/221 [01:03<00:11,  3.62it/s][A
 82%|████████▏ | 182/221 [01:04<00:11,  3.52it/s][A
 83%|████████▎ | 183/221 [01:04<00:12,  3.09it/s][A
 83%|████████▎ | 184/221 [01:04<00:12,  2.93it/s][A
 84%|████████▎ | 185/221 [01:04<00:09,  3.71it/s][A
 84%|████████▍ | 186/221 [01:05<00:14,  2.35it/s][A
 85%|████████▍ | 187/221 [01:06<00:12,  2.64it/s][A
 85%|████████▌ | 188/221 [01:06<00:11,  2.78it/s][A
 86%|████████▌ | 189/221 [01:06<00:11,  2.83it/s][A
 86%|████████▌ | 190/221 [01:07<00:10,  2.83it/s][A
 86%|████████▋ | 191/221 [01:07<00:08,  3.44it/s][A
 87%|████████▋ | 192/221 [01:07<00:08,  3.53it/s][A
 87%|████████▋ | 193/221 [01:07<00:06,  4.38it/s][A
 88%|████████▊ | 194/221 [01:08<00:10,  2.53it/s][A
 88%|████████▊ | 195/221 [01:08<00:09,  2.80it/s][A
 89%|████████▊ | 196/221 [01:08<00:08,  3.05it/s][A
 89%|████████▉ | 197/221 [01:09<00:08,  2.79it/s][A
 90%|████████▉ | 198/221 [01:09<00:08,  2.80it/s][A
 90%|█████████ | 199/221 [01:09<00:07,  2.95it/s][A
 90%|█████████ | 200/221 [01:10<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [01:10<00:05,  3.92it/s][A
 91%|█████████▏| 202/221 [01:10<00:05,  3.44it/s][A
 92%|█████████▏| 203/221 [01:10<00:05,  3.54it/s][A
 92%|█████████▏| 204/221 [01:11<00:04,  3.64it/s][A
 93%|█████████▎| 205/221 [01:11<00:03,  4.45it/s][A
 93%|█████████▎| 206/221 [01:11<00:04,  3.28it/s][A
 94%|█████████▍| 208/221 [01:12<00:03,  3.70it/s][A
 95%|█████████▍| 209/221 [01:12<00:03,  3.59it/s][A
 95%|█████████▌| 211/221 [01:12<00:02,  3.89it/s][A
 96%|█████████▌| 212/221 [01:13<00:02,  3.74it/s][A
 96%|█████████▋| 213/221 [01:13<00:01,  4.01it/s][A
 97%|█████████▋| 214/221 [01:14<00:02,  2.72it/s][A
 97%|█████████▋| 215/221 [01:14<00:01,  3.27it/s][A
 98%|█████████▊| 216/221 [01:14<00:01,  3.00it/s][A
 98%|█████████▊| 217/221 [01:15<00:01,  2.67it/s][A
 99%|█████████▊| 218/221 [01:15<00:01,  2.78it/s][A
 99%|█████████▉| 219/221 [01:15<00:00,  2.96it/s][A
100%|█████████▉| 220/221 [01:16<00:00,  3.17it/s][A
100%|██████████| 221/221 [01:16<00:00,  3.76it/s][A100%|██████████| 221/221 [01:16<00:00,  2.90it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:06,  3.30it/s][A
  1%|          | 2/221 [00:00<01:06,  3.30it/s][A
  1%|▏         | 3/221 [00:00<01:06,  3.30it/s][A
  2%|▏         | 4/221 [00:01<01:05,  3.30it/s][A
  2%|▏         | 5/221 [00:01<01:05,  3.30it/s][A
  3%|▎         | 6/221 [00:01<01:05,  3.30it/s][A
  3%|▎         | 7/221 [00:02<01:04,  3.30it/s][A
  4%|▎         | 8/221 [00:02<01:04,  3.30it/s][A
  4%|▍         | 9/221 [00:02<01:04,  3.30it/s][A
  5%|▍         | 10/221 [00:03<01:03,  3.30it/s][A
  5%|▍         | 11/221 [00:03<01:03,  3.30it/s][A
  5%|▌         | 12/221 [00:03<01:03,  3.30it/s][A
  6%|▌         | 13/221 [00:03<01:02,  3.30it/s][A
  6%|▋         | 14/221 [00:04<01:02,  3.30it/s][A
  7%|▋         | 15/221 [00:04<01:02,  3.31it/s][A
  7%|▋         | 16/221 [00:04<01:02,  3.31it/s][A
  8%|▊         | 17/221 [00:05<01:01,  3.31it/s][A
  8%|▊         | 18/221 [00:05<01:01,  3.30it/s][A
  9%|▊         | 19/221 [00:05<01:01,  3.30it/s][A
  9%|▉         | 20/221 [00:06<01:00,  3.30it/s][A
 10%|▉         | 21/221 [00:06<01:00,  3.30it/s][A
 10%|▉         | 22/221 [00:06<01:00,  3.30it/s][A
 10%|█         | 23/221 [00:06<00:59,  3.30it/s][A
 11%|█         | 24/221 [00:07<00:59,  3.30it/s][A
 11%|█▏        | 25/221 [00:07<00:59,  3.30it/s][A
 12%|█▏        | 26/221 [00:07<00:59,  3.31it/s][A
 12%|█▏        | 27/221 [00:08<00:58,  3.30it/s][A
 13%|█▎        | 28/221 [00:08<00:58,  3.31it/s][A
 13%|█▎        | 29/221 [00:08<00:58,  3.31it/s][A
 14%|█▎        | 30/221 [00:09<00:57,  3.31it/s][A
 14%|█▍        | 31/221 [00:09<00:57,  3.31it/s][A
 14%|█▍        | 32/221 [00:09<00:57,  3.30it/s][A
 15%|█▍        | 33/221 [00:09<00:56,  3.30it/s][A
 15%|█▌        | 34/221 [00:10<00:56,  3.31it/s][A
 16%|█▌        | 35/221 [00:10<00:56,  3.31it/s][A
 16%|█▋        | 36/221 [00:10<00:55,  3.31it/s][A
 17%|█▋        | 37/221 [00:11<00:55,  3.30it/s][A
 17%|█▋        | 38/221 [00:11<00:55,  3.31it/s][A
 18%|█▊        | 39/221 [00:11<00:55,  3.30it/s][A
 18%|█▊        | 40/221 [00:12<00:54,  3.30it/s][A
 19%|█▊        | 41/221 [00:12<00:54,  3.30it/s][A
 19%|█▉        | 42/221 [00:12<00:54,  3.30it/s][A
 19%|█▉        | 43/221 [00:13<00:53,  3.30it/s][A
 20%|█▉        | 44/221 [00:13<00:53,  3.31it/s][A
 20%|██        | 45/221 [00:13<00:53,  3.31it/s][A
 21%|██        | 46/221 [00:13<00:52,  3.31it/s][A
 21%|██▏       | 47/221 [00:14<00:52,  3.31it/s][A
 22%|██▏       | 48/221 [00:14<00:52,  3.31it/s][A
 22%|██▏       | 49/221 [00:14<00:52,  3.31it/s][A
 23%|██▎       | 50/221 [00:15<00:51,  3.31it/s][A
 23%|██▎       | 51/221 [00:15<00:51,  3.31it/s][A
 24%|██▎       | 52/221 [00:15<00:51,  3.31it/s][A
 24%|██▍       | 53/221 [00:16<00:50,  3.31it/s][A
 24%|██▍       | 54/221 [00:16<00:50,  3.31it/s][A
 25%|██▍       | 55/221 [00:16<00:50,  3.31it/s][A
 25%|██▌       | 56/221 [00:16<00:49,  3.31it/s][A
 26%|██▌       | 57/221 [00:17<00:49,  3.31it/s][A
 26%|██▌       | 58/221 [00:17<00:49,  3.31it/s][A
 27%|██▋       | 59/221 [00:17<00:49,  3.31it/s][A
 27%|██▋       | 60/221 [00:18<00:48,  3.30it/s][A
 28%|██▊       | 61/221 [00:18<00:48,  3.30it/s][A
 28%|██▊       | 62/221 [00:18<00:48,  3.30it/s][A
 29%|██▊       | 63/221 [00:19<00:47,  3.30it/s][A
 29%|██▉       | 64/221 [00:19<00:47,  3.30it/s][A
 29%|██▉       | 65/221 [00:19<00:47,  3.30it/s][A
 30%|██▉       | 66/221 [00:19<00:46,  3.30it/s][A
 30%|███       | 67/221 [00:20<00:46,  3.30it/s][A
 31%|███       | 68/221 [00:20<00:46,  3.30it/s][A
 31%|███       | 69/221 [00:20<00:46,  3.30it/s][A
 32%|███▏      | 70/221 [00:21<00:45,  3.30it/s][A
 32%|███▏      | 71/221 [00:21<00:45,  3.30it/s][A
 33%|███▎      | 72/221 [00:21<00:45,  3.30it/s][A
 33%|███▎      | 73/221 [00:22<00:44,  3.30it/s][A
 33%|███▎      | 74/221 [00:22<00:44,  3.30it/s][A
 34%|███▍      | 75/221 [00:22<00:44,  3.30it/s][A
 34%|███▍      | 76/221 [00:22<00:43,  3.30it/s][A
 35%|███▍      | 77/221 [00:23<00:43,  3.31it/s][A
 35%|███▌      | 78/221 [00:23<00:43,  3.30it/s][A
 36%|███▌      | 79/221 [00:23<00:42,  3.31it/s][A
 36%|███▌      | 80/221 [00:24<00:42,  3.31it/s][A
 37%|███▋      | 81/221 [00:24<00:42,  3.30it/s][A
 37%|███▋      | 82/221 [00:24<00:42,  3.30it/s][A
 38%|███▊      | 83/221 [00:25<00:41,  3.30it/s][A
 38%|███▊      | 84/221 [00:25<00:41,  3.30it/s][A
 38%|███▊      | 85/221 [00:25<00:41,  3.31it/s][A
 39%|███▉      | 86/221 [00:26<00:40,  3.31it/s][A
 39%|███▉      | 87/221 [00:26<00:40,  3.31it/s][A
 40%|███▉      | 88/221 [00:26<00:40,  3.31it/s][A
 40%|████      | 89/221 [00:26<00:39,  3.31it/s][A
 41%|████      | 90/221 [00:27<00:39,  3.31it/s][A
 41%|████      | 91/221 [00:27<00:39,  3.31it/s][A
 42%|████▏     | 92/221 [00:27<00:39,  3.30it/s][A
 42%|████▏     | 93/221 [00:28<00:38,  3.30it/s][A
 43%|████▎     | 94/221 [00:28<00:38,  3.31it/s][A
 43%|████▎     | 95/221 [00:28<00:38,  3.30it/s][A
 43%|████▎     | 96/221 [00:29<00:37,  3.30it/s][A
 44%|████▍     | 97/221 [00:29<00:37,  3.30it/s][A
 44%|████▍     | 98/221 [00:29<00:37,  3.30it/s][A
 45%|████▍     | 99/221 [00:29<00:36,  3.30it/s][A
 45%|████▌     | 100/221 [00:30<00:36,  3.30it/s][A
 46%|████▌     | 101/221 [00:30<00:36,  3.30it/s][A
 46%|████▌     | 102/221 [00:30<00:36,  3.30it/s][A
 47%|████▋     | 103/221 [00:31<00:35,  3.31it/s][A
 47%|████▋     | 104/221 [00:31<00:35,  3.30it/s][A
 48%|████▊     | 105/221 [00:31<00:35,  3.30it/s][A
 48%|████▊     | 106/221 [00:32<00:34,  3.30it/s][A
 48%|████▊     | 107/221 [00:32<00:34,  3.31it/s][A
 49%|████▉     | 108/221 [00:32<00:34,  3.31it/s][A
 49%|████▉     | 109/221 [00:32<00:33,  3.31it/s][A
 50%|████▉     | 110/221 [00:33<00:33,  3.31it/s][A
 50%|█████     | 111/221 [00:33<00:33,  3.31it/s][A
 51%|█████     | 112/221 [00:33<00:32,  3.31it/s][A
 51%|█████     | 113/221 [00:34<00:32,  3.31it/s][A
 52%|█████▏    | 114/221 [00:34<00:32,  3.31it/s][A
 52%|█████▏    | 115/221 [00:34<00:32,  3.31it/s][A
 52%|█████▏    | 116/221 [00:35<00:31,  3.31it/s][A
 53%|█████▎    | 117/221 [00:35<00:31,  3.31it/s][A
 53%|█████▎    | 118/221 [00:35<00:31,  3.31it/s][A
 54%|█████▍    | 119/221 [00:36<00:30,  3.31it/s][A
 54%|█████▍    | 120/221 [00:36<00:30,  3.31it/s][A
 55%|█████▍    | 121/221 [00:36<00:30,  3.31it/s][A
 55%|█████▌    | 122/221 [00:36<00:29,  3.31it/s][A
 56%|█████▌    | 123/221 [00:37<00:29,  3.30it/s][A
 56%|█████▌    | 124/221 [00:37<00:29,  3.30it/s][A
 57%|█████▋    | 125/221 [00:37<00:29,  3.30it/s][A
 57%|█████▋    | 126/221 [00:38<00:28,  3.30it/s][A
 57%|█████▋    | 127/221 [00:38<00:28,  3.30it/s][A
 58%|█████▊    | 128/221 [00:38<00:28,  3.30it/s][A
 58%|█████▊    | 129/221 [00:39<00:27,  3.30it/s][A
 59%|█████▉    | 130/221 [00:39<00:27,  3.30it/s][A
 59%|█████▉    | 131/221 [00:39<00:27,  3.30it/s][A
 60%|█████▉    | 132/221 [00:39<00:26,  3.30it/s][A
 60%|██████    | 133/221 [00:40<00:26,  3.30it/s][A
 61%|██████    | 134/221 [00:40<00:26,  3.30it/s][A
 61%|██████    | 135/221 [00:40<00:26,  3.31it/s][A
 62%|██████▏   | 136/221 [00:41<00:25,  3.30it/s][A
 62%|██████▏   | 137/221 [00:41<00:25,  3.30it/s][A
 62%|██████▏   | 138/221 [00:41<00:25,  3.30it/s][A
 63%|██████▎   | 139/221 [00:42<00:24,  3.30it/s][A
 63%|██████▎   | 140/221 [00:42<00:24,  3.30it/s][A
 64%|██████▍   | 141/221 [00:42<00:24,  3.30it/s][A
 64%|██████▍   | 142/221 [00:42<00:23,  3.30it/s][A
 65%|██████▍   | 143/221 [00:43<00:23,  3.30it/s][A
 65%|██████▌   | 144/221 [00:43<00:23,  3.30it/s][A
 66%|██████▌   | 145/221 [00:43<00:23,  3.30it/s][A
 66%|██████▌   | 146/221 [00:44<00:22,  3.30it/s][A
 67%|██████▋   | 147/221 [00:44<00:22,  3.30it/s][A
 67%|██████▋   | 148/221 [00:44<00:22,  3.30it/s][A
 67%|██████▋   | 149/221 [00:45<00:21,  3.30it/s][A
 68%|██████▊   | 150/221 [00:45<00:21,  3.30it/s][A
 68%|██████▊   | 151/221 [00:45<00:21,  3.30it/s][A
 69%|██████▉   | 152/221 [00:46<00:20,  3.30it/s][A
 69%|██████▉   | 153/221 [00:46<00:20,  3.30it/s][A
 70%|██████▉   | 154/221 [00:46<00:20,  3.30it/s][A
 70%|███████   | 155/221 [00:46<00:20,  3.30it/s][A
 71%|███████   | 156/221 [00:47<00:19,  3.30it/s][A
 71%|███████   | 157/221 [00:47<00:19,  3.30it/s][A
 71%|███████▏  | 158/221 [00:47<00:19,  3.30it/s][A
 72%|███████▏  | 159/221 [00:48<00:18,  3.30it/s][A
 72%|███████▏  | 160/221 [00:48<00:18,  3.30it/s][A
 73%|███████▎  | 161/221 [00:48<00:18,  3.30it/s][A
 73%|███████▎  | 162/221 [00:49<00:17,  3.30it/s][A
 74%|███████▍  | 163/221 [00:49<00:17,  3.30it/s][A
 74%|███████▍  | 164/221 [00:49<00:17,  3.30it/s][A
 75%|███████▍  | 165/221 [00:49<00:16,  3.30it/s][A
 75%|███████▌  | 166/221 [00:50<00:16,  3.30it/s][A
 76%|███████▌  | 167/221 [00:50<00:16,  3.30it/s][A
 76%|███████▌  | 168/221 [00:50<00:16,  3.30it/s][A
 76%|███████▋  | 169/221 [00:51<00:15,  3.30it/s][A
 77%|███████▋  | 170/221 [00:51<00:15,  3.29it/s][A
 77%|███████▋  | 171/221 [00:51<00:15,  3.29it/s][A
 78%|███████▊  | 172/221 [00:52<00:14,  3.30it/s][A
 78%|███████▊  | 173/221 [00:52<00:14,  3.30it/s][A
 79%|███████▊  | 174/221 [00:52<00:14,  3.30it/s][A
 79%|███████▉  | 175/221 [00:52<00:13,  3.30it/s][A
 80%|███████▉  | 176/221 [00:53<00:13,  3.30it/s][A
 80%|████████  | 177/221 [00:53<00:13,  3.30it/s][A
 81%|████████  | 178/221 [00:53<00:13,  3.30it/s][A
 81%|████████  | 179/221 [00:54<00:12,  3.30it/s][A
 81%|████████▏ | 180/221 [00:54<00:12,  3.30it/s][A
 82%|████████▏ | 181/221 [00:54<00:12,  3.30it/s][A
 82%|████████▏ | 182/221 [00:55<00:11,  3.30it/s][A
 83%|████████▎ | 183/221 [00:55<00:11,  3.30it/s][A
 83%|████████▎ | 184/221 [00:55<00:11,  3.30it/s][A
 84%|████████▎ | 185/221 [00:56<00:10,  3.30it/s][A
 84%|████████▍ | 186/221 [00:56<00:10,  3.30it/s][A
 85%|████████▍ | 187/221 [00:56<00:10,  3.30it/s][A
 85%|████████▌ | 188/221 [00:56<00:09,  3.30it/s][A
 86%|████████▌ | 189/221 [00:57<00:09,  3.30it/s][A
 86%|████████▌ | 190/221 [00:57<00:09,  3.30it/s][A
 86%|████████▋ | 191/221 [00:57<00:09,  3.30it/s][A
 87%|████████▋ | 192/221 [00:58<00:08,  3.30it/s][A
 87%|████████▋ | 193/221 [00:58<00:08,  3.30it/s][A
 88%|████████▊ | 194/221 [00:58<00:08,  3.30it/s][A
 88%|████████▊ | 195/221 [00:59<00:07,  3.30it/s][A
 89%|████████▊ | 196/221 [00:59<00:07,  3.30it/s][A
 89%|████████▉ | 197/221 [00:59<00:07,  3.30it/s][A
 90%|████████▉ | 198/221 [00:59<00:06,  3.30it/s][A
 90%|█████████ | 199/221 [01:00<00:06,  3.30it/s][A
 90%|█████████ | 200/221 [01:00<00:06,  3.30it/s][A
 91%|█████████ | 201/221 [01:00<00:06,  3.30it/s][A
 91%|█████████▏| 202/221 [01:01<00:05,  3.30it/s][A
 92%|█████████▏| 203/221 [01:01<00:05,  3.30it/s][A
 92%|█████████▏| 204/221 [01:01<00:05,  3.30it/s][A
 93%|█████████▎| 205/221 [01:02<00:04,  3.30it/s][A
 93%|█████████▎| 206/221 [01:02<00:04,  3.30it/s][A
 94%|█████████▎| 207/221 [01:02<00:04,  3.30it/s][A
 94%|█████████▍| 208/221 [01:02<00:03,  3.30it/s][A
 95%|█████████▍| 209/221 [01:03<00:03,  3.30it/s][A
 95%|█████████▌| 210/221 [01:03<00:03,  3.30it/s][A
 95%|█████████▌| 211/221 [01:03<00:03,  3.30it/s][A
 96%|█████████▌| 212/221 [01:04<00:02,  3.30it/s][A
 96%|█████████▋| 213/221 [01:04<00:02,  3.30it/s][A
 97%|█████████▋| 214/221 [01:04<00:02,  3.30it/s][A
 97%|█████████▋| 215/221 [01:05<00:01,  3.30it/s][A
 98%|█████████▊| 216/221 [01:05<00:01,  3.30it/s][A
 98%|█████████▊| 217/221 [01:05<00:01,  3.30it/s][A
 99%|█████████▊| 218/221 [01:06<00:00,  3.30it/s][A
 99%|█████████▉| 219/221 [01:06<00:00,  3.30it/s][A
100%|█████████▉| 220/221 [01:06<00:00,  3.30it/s][A
100%|██████████| 221/221 [01:06<00:00,  3.30it/s][A100%|██████████| 221/221 [01:06<00:00,  3.30it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:31,  6.97it/s][A
  1%|          | 2/221 [00:00<01:05,  3.32it/s][A
  1%|▏         | 3/221 [00:00<00:58,  3.72it/s][A
  2%|▏         | 4/221 [00:01<00:54,  3.97it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.76it/s][A
  3%|▎         | 7/221 [00:01<00:50,  4.25it/s][A
  4%|▎         | 8/221 [00:02<00:53,  4.01it/s][A
  4%|▍         | 9/221 [00:02<00:58,  3.63it/s][A
  5%|▍         | 10/221 [00:03<01:25,  2.46it/s][A
  5%|▍         | 11/221 [00:03<01:14,  2.84it/s][A
  5%|▌         | 12/221 [00:03<01:07,  3.10it/s][A
  6%|▌         | 13/221 [00:04<01:20,  2.59it/s][A
  6%|▋         | 14/221 [00:04<01:18,  2.63it/s][A
  7%|▋         | 15/221 [00:04<01:04,  3.19it/s][A
  7%|▋         | 16/221 [00:04<01:00,  3.40it/s][A
  8%|▊         | 17/221 [00:05<01:30,  2.26it/s][A
  8%|▊         | 18/221 [00:06<01:24,  2.40it/s][A
  9%|▊         | 19/221 [00:06<01:38,  2.05it/s][A
 10%|▉         | 21/221 [00:06<01:07,  2.97it/s][A
 10%|▉         | 22/221 [00:07<00:58,  3.38it/s][A
 10%|█         | 23/221 [00:07<00:49,  3.99it/s][A
 11%|█         | 24/221 [00:07<00:49,  4.01it/s][A
 11%|█▏        | 25/221 [00:07<00:50,  3.85it/s][A
 12%|█▏        | 26/221 [00:08<00:48,  4.00it/s][A
 12%|█▏        | 27/221 [00:08<00:47,  4.11it/s][A
 13%|█▎        | 28/221 [00:09<01:42,  1.88it/s][A
 13%|█▎        | 29/221 [00:10<01:49,  1.76it/s][A
 14%|█▎        | 30/221 [00:10<01:36,  1.97it/s][A
 14%|█▍        | 31/221 [00:10<01:27,  2.18it/s][A
 14%|█▍        | 32/221 [00:10<01:08,  2.75it/s][A
 15%|█▍        | 33/221 [00:11<01:01,  3.07it/s][A
 15%|█▌        | 34/221 [00:11<00:52,  3.55it/s][A
 16%|█▌        | 35/221 [00:11<00:45,  4.13it/s][A
 16%|█▋        | 36/221 [00:11<00:53,  3.43it/s][A
 17%|█▋        | 37/221 [00:12<00:55,  3.29it/s][A
 17%|█▋        | 38/221 [00:12<01:03,  2.89it/s][A
 18%|█▊        | 39/221 [00:13<01:00,  3.00it/s][A
 18%|█▊        | 40/221 [00:13<00:57,  3.17it/s][A
 19%|█▊        | 41/221 [00:13<00:47,  3.81it/s][A
 19%|█▉        | 42/221 [00:13<00:50,  3.54it/s][A
 19%|█▉        | 43/221 [00:14<00:53,  3.34it/s][A
 20%|██        | 45/221 [00:14<00:47,  3.70it/s][A
 21%|██        | 46/221 [00:14<00:45,  3.82it/s][A
 21%|██▏       | 47/221 [00:15<00:45,  3.84it/s][A
 22%|██▏       | 48/221 [00:15<00:39,  4.35it/s][A
 22%|██▏       | 49/221 [00:15<00:35,  4.86it/s][A
 23%|██▎       | 50/221 [00:16<00:56,  3.03it/s][A
 23%|██▎       | 51/221 [00:16<00:51,  3.27it/s][A
 24%|██▎       | 52/221 [00:16<00:41,  4.03it/s][A
 24%|██▍       | 53/221 [00:16<00:40,  4.14it/s][A
 24%|██▍       | 54/221 [00:17<00:50,  3.29it/s][A
 25%|██▍       | 55/221 [00:17<00:42,  3.93it/s][A
 25%|██▌       | 56/221 [00:17<00:36,  4.48it/s][A
 26%|██▌       | 57/221 [00:17<00:33,  4.93it/s][A
 26%|██▌       | 58/221 [00:17<00:42,  3.83it/s][A
 27%|██▋       | 59/221 [00:18<00:43,  3.74it/s][A
 27%|██▋       | 60/221 [00:18<00:52,  3.06it/s][A
 28%|██▊       | 61/221 [00:18<00:47,  3.35it/s][A
 28%|██▊       | 62/221 [00:19<00:42,  3.71it/s][A
 29%|██▊       | 63/221 [00:19<00:45,  3.48it/s][A
 29%|██▉       | 64/221 [00:19<00:47,  3.34it/s][A
 29%|██▉       | 65/221 [00:20<00:58,  2.65it/s][A
 30%|██▉       | 66/221 [00:20<00:46,  3.31it/s][A
 30%|███       | 67/221 [00:20<00:47,  3.23it/s][A
 31%|███       | 68/221 [00:20<00:38,  3.93it/s][A
 32%|███▏      | 70/221 [00:21<00:30,  4.88it/s][A
 32%|███▏      | 71/221 [00:21<00:37,  3.96it/s][A
 33%|███▎      | 72/221 [00:21<00:41,  3.58it/s][A
 33%|███▎      | 73/221 [00:22<00:46,  3.21it/s][A
 33%|███▎      | 74/221 [00:22<00:39,  3.76it/s][A
 34%|███▍      | 75/221 [00:22<00:41,  3.52it/s][A
 34%|███▍      | 76/221 [00:22<00:37,  3.89it/s][A
 35%|███▍      | 77/221 [00:23<00:39,  3.64it/s][A
 35%|███▌      | 78/221 [00:23<00:36,  3.93it/s][A
 36%|███▌      | 79/221 [00:24<00:48,  2.96it/s][A
 36%|███▌      | 80/221 [00:24<00:37,  3.73it/s][A
 37%|███▋      | 81/221 [00:24<00:34,  4.01it/s][A
 37%|███▋      | 82/221 [00:24<00:41,  3.36it/s][A
 38%|███▊      | 83/221 [00:25<00:43,  3.20it/s][A
 38%|███▊      | 84/221 [00:25<00:56,  2.44it/s][A
 38%|███▊      | 85/221 [00:25<00:48,  2.79it/s][A
 39%|███▉      | 86/221 [00:26<00:43,  3.08it/s][A
 39%|███▉      | 87/221 [00:26<00:41,  3.19it/s][A
 40%|███▉      | 88/221 [00:26<00:46,  2.87it/s][A
 40%|████      | 89/221 [00:27<00:47,  2.80it/s][A
 41%|████      | 90/221 [00:27<00:45,  2.89it/s][A
 41%|████      | 91/221 [00:27<00:39,  3.27it/s][A
 42%|████▏     | 92/221 [00:28<00:41,  3.13it/s][A
 42%|████▏     | 93/221 [00:28<00:32,  3.94it/s][A
 43%|████▎     | 94/221 [00:28<00:29,  4.34it/s][A
 43%|████▎     | 95/221 [00:28<00:35,  3.57it/s][A
 43%|████▎     | 96/221 [00:29<00:32,  3.90it/s][A
 44%|████▍     | 98/221 [00:29<00:34,  3.52it/s][A
 45%|████▍     | 99/221 [00:30<00:36,  3.32it/s][A
 45%|████▌     | 100/221 [00:30<00:36,  3.34it/s][A
 46%|████▌     | 101/221 [00:30<00:36,  3.26it/s][A
 46%|████▌     | 102/221 [00:30<00:30,  3.85it/s][A
 47%|████▋     | 103/221 [00:30<00:27,  4.35it/s][A
 47%|████▋     | 104/221 [00:31<00:29,  3.92it/s][A
 48%|████▊     | 105/221 [00:31<00:28,  4.00it/s][A
 48%|████▊     | 106/221 [00:31<00:28,  4.04it/s][A
 48%|████▊     | 107/221 [00:32<00:28,  4.05it/s][A
 49%|████▉     | 108/221 [00:32<00:27,  4.15it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.49it/s][A
 50%|████▉     | 110/221 [00:33<00:36,  3.01it/s][A
 50%|█████     | 111/221 [00:33<00:46,  2.38it/s][A
 51%|█████     | 112/221 [00:33<00:35,  3.08it/s][A
 51%|█████     | 113/221 [00:34<00:30,  3.50it/s][A
 52%|█████▏    | 115/221 [00:34<00:21,  4.91it/s][A
 52%|█████▏    | 116/221 [00:34<00:21,  4.86it/s][A
 53%|█████▎    | 117/221 [00:34<00:27,  3.82it/s][A
 53%|█████▎    | 118/221 [00:35<00:30,  3.35it/s][A
 54%|█████▍    | 119/221 [00:35<00:37,  2.72it/s][A
 54%|█████▍    | 120/221 [00:36<00:35,  2.81it/s][A
 55%|█████▍    | 121/221 [00:36<00:30,  3.27it/s][A
 55%|█████▌    | 122/221 [00:36<00:29,  3.41it/s][A
 56%|█████▌    | 123/221 [00:36<00:26,  3.76it/s][A
 56%|█████▌    | 124/221 [00:37<00:30,  3.15it/s][A
 57%|█████▋    | 125/221 [00:37<00:32,  2.93it/s][A
 57%|█████▋    | 126/221 [00:37<00:26,  3.57it/s][A
 57%|█████▋    | 127/221 [00:38<00:32,  2.92it/s][A
 58%|█████▊    | 128/221 [00:38<00:28,  3.23it/s][A
 58%|█████▊    | 129/221 [00:38<00:24,  3.74it/s][A
 59%|█████▉    | 130/221 [00:39<00:27,  3.27it/s][A
 60%|█████▉    | 132/221 [00:39<00:19,  4.59it/s][A
 60%|██████    | 133/221 [00:39<00:19,  4.55it/s][A
 61%|██████    | 134/221 [00:39<00:22,  3.89it/s][A
 61%|██████    | 135/221 [00:40<00:24,  3.45it/s][A
 62%|██████▏   | 136/221 [00:40<00:24,  3.40it/s][A
 62%|██████▏   | 137/221 [00:40<00:21,  3.83it/s][A
 62%|██████▏   | 138/221 [00:41<00:23,  3.60it/s][A
 63%|██████▎   | 139/221 [00:41<00:27,  2.95it/s][A
 63%|██████▎   | 140/221 [00:41<00:29,  2.78it/s][A
 64%|██████▍   | 141/221 [00:42<00:27,  2.88it/s][A
 64%|██████▍   | 142/221 [00:42<00:28,  2.74it/s][A
 65%|██████▍   | 143/221 [00:43<00:29,  2.68it/s][A
 65%|██████▌   | 144/221 [00:43<00:22,  3.36it/s][A
 66%|██████▌   | 145/221 [00:43<00:19,  3.86it/s][A
 66%|██████▌   | 146/221 [00:43<00:19,  3.87it/s][A
 67%|██████▋   | 148/221 [00:43<00:14,  4.88it/s][A
 67%|██████▋   | 149/221 [00:43<00:13,  5.52it/s][A
 68%|██████▊   | 150/221 [00:44<00:13,  5.15it/s][A
 68%|██████▊   | 151/221 [00:44<00:14,  4.90it/s][A
 69%|██████▉   | 152/221 [00:45<00:23,  2.95it/s][A
 69%|██████▉   | 153/221 [00:45<00:22,  2.96it/s][A
 70%|██████▉   | 154/221 [00:45<00:23,  2.83it/s][A
 70%|███████   | 155/221 [00:46<00:24,  2.74it/s][A
 71%|███████   | 156/221 [00:47<00:32,  1.99it/s][A
 71%|███████   | 157/221 [00:47<00:27,  2.29it/s][A
 71%|███████▏  | 158/221 [00:47<00:22,  2.80it/s][A
 72%|███████▏  | 159/221 [00:47<00:20,  2.97it/s][A
 72%|███████▏  | 160/221 [00:48<00:17,  3.45it/s][A
 73%|███████▎  | 161/221 [00:48<00:14,  4.22it/s][A
 74%|███████▍  | 163/221 [00:48<00:12,  4.64it/s][A
 74%|███████▍  | 164/221 [00:48<00:15,  3.75it/s][A
 75%|███████▍  | 165/221 [00:49<00:13,  4.15it/s][A
 75%|███████▌  | 166/221 [00:49<00:19,  2.87it/s][A
 76%|███████▌  | 167/221 [00:49<00:17,  3.12it/s][A
 76%|███████▌  | 168/221 [00:50<00:15,  3.36it/s][A
 76%|███████▋  | 169/221 [00:50<00:14,  3.70it/s][A
 77%|███████▋  | 170/221 [00:50<00:16,  3.02it/s][A
 77%|███████▋  | 171/221 [00:51<00:15,  3.30it/s][A
 78%|███████▊  | 172/221 [00:51<00:13,  3.76it/s][A
 78%|███████▊  | 173/221 [00:51<00:12,  3.73it/s][A
 79%|███████▊  | 174/221 [00:51<00:14,  3.34it/s][A
 79%|███████▉  | 175/221 [00:52<00:14,  3.23it/s][A
 80%|███████▉  | 176/221 [00:52<00:12,  3.59it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.49it/s][A
 81%|████████  | 178/221 [00:53<00:15,  2.86it/s][A
 81%|████████  | 179/221 [00:53<00:13,  3.18it/s][A
 81%|████████▏ | 180/221 [00:53<00:11,  3.60it/s][A
 82%|████████▏ | 181/221 [00:54<00:11,  3.53it/s][A
 82%|████████▏ | 182/221 [00:54<00:10,  3.74it/s][A
 83%|████████▎ | 183/221 [00:54<00:09,  4.16it/s][A
 83%|████████▎ | 184/221 [00:54<00:12,  3.08it/s][A
 84%|████████▎ | 185/221 [00:55<00:12,  2.96it/s][A
 85%|████████▍ | 187/221 [00:55<00:07,  4.38it/s][A
 85%|████████▌ | 188/221 [00:55<00:08,  3.78it/s][A
 86%|████████▌ | 189/221 [00:56<00:09,  3.25it/s][A
 86%|████████▌ | 190/221 [00:56<00:11,  2.78it/s][A
 86%|████████▋ | 191/221 [00:57<00:09,  3.14it/s][A
 87%|████████▋ | 192/221 [00:57<00:09,  3.22it/s][A
 87%|████████▋ | 193/221 [00:57<00:07,  3.71it/s][A
 88%|████████▊ | 194/221 [00:58<00:10,  2.54it/s][A
 88%|████████▊ | 195/221 [00:58<00:11,  2.34it/s][A
 89%|████████▊ | 196/221 [00:59<00:10,  2.28it/s][A
 89%|████████▉ | 197/221 [00:59<00:09,  2.44it/s][A
 90%|████████▉ | 198/221 [00:59<00:08,  2.78it/s][A
 90%|█████████ | 200/221 [01:00<00:06,  3.26it/s][A
 91%|█████████ | 201/221 [01:00<00:06,  3.11it/s][A
 91%|█████████▏| 202/221 [01:00<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [01:00<00:04,  3.92it/s][A
 92%|█████████▏| 204/221 [01:01<00:04,  4.21it/s][A
 93%|█████████▎| 205/221 [01:01<00:03,  4.98it/s][A
 93%|█████████▎| 206/221 [01:01<00:03,  4.40it/s][A
 94%|█████████▎| 207/221 [01:01<00:02,  4.90it/s][A
 94%|█████████▍| 208/221 [01:01<00:02,  4.35it/s][A
 95%|█████████▍| 209/221 [01:02<00:03,  3.04it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.84it/s][A
 96%|█████████▌| 212/221 [01:03<00:02,  3.61it/s][A
 96%|█████████▋| 213/221 [01:03<00:02,  2.83it/s][A
 97%|█████████▋| 214/221 [01:04<00:02,  3.21it/s][A
 97%|█████████▋| 215/221 [01:04<00:02,  2.96it/s][A
 98%|█████████▊| 216/221 [01:04<00:01,  3.13it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  3.19it/s][A
 99%|█████████▊| 218/221 [01:05<00:00,  3.75it/s][A
 99%|█████████▉| 219/221 [01:05<00:00,  3.73it/s][A
100%|█████████▉| 220/221 [01:05<00:00,  3.73it/s][A
100%|██████████| 221/221 [01:06<00:00,  2.62it/s][A100%|██████████| 221/221 [01:06<00:00,  3.33it/s]
09/10/2024 20:40:53 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_area_forward=====step 99--===========

09/10/2024 20:40:53 - INFO - __main__ -   {'area_r1': 42.0, 'area_recall': '42.0/70.1/80.1', 'area_ravg': 64.1}
09/10/2024 20:40:53 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_area_backard=====step 99--===========

09/10/2024 20:40:53 - INFO - __main__ -   {'forward_r1': 37.0, 'forward_recall': '37.0/64.9/75.9', 'forward_ravg': 59.3}
09/10/2024 20:40:53 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_area_back_with_video=====step 99--===========

09/10/2024 20:40:53 - INFO - __main__ -   {'area_video_r1': 37.0, 'area_video_recall': '37.0/65.4/75.9', 'area_video_ravg': 59.4}
09/10/2024 20:40:53 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_area_back_with_video====history best step: 49=======

09/10/2024 20:40:53 - INFO - __main__ -   {'area_video_r1': 37.6, 'area_video_recall': '37.6/68.3/77.9', 'area_video_ravg': 61.3}
09/10/2024 20:40:53 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_itm_area=====step 99--===========

09/10/2024 20:40:53 - INFO - __main__ -   {'area_video_r1': 50.0, 'area_video_recall': '50.0/73.0/81.6', 'area_video_ravg': 68.2, 'area_video_back_r1': 48.9, 'area_video_back_recall': '48.9/71.5/79.3', 'area_video_back_ravg': 66.6}
09/10/2024 20:40:53 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_itm_area====history best step: 49=======

09/10/2024 20:40:53 - INFO - __main__ -   {'area_video_r1': 53.4, 'area_video_recall': '53.4/75.5/82.6', 'area_video_ravg': 70.5, 'area_video_back_r1': 51.4, 'area_video_back_recall': '51.4/73.1/80.9', 'area_video_back_ravg': 68.4}
09/10/2024 20:40:53 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_itc_tvas=====step 99--===========

09/10/2024 20:40:53 - INFO - __main__ -   {'video_r1': 31.4, 'video_recall': '31.4/57.5/68.2', 'video_ravg': 52.4}
09/10/2024 20:40:53 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_itc_tvas====history best step: 99=======

09/10/2024 20:40:53 - INFO - __main__ -   {'video_r1': 31.4, 'video_recall': '31.4/57.5/68.2', 'video_ravg': 52.4}
09/10/2024 20:40:53 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_itm_tvas=====step 99--===========

09/10/2024 20:40:53 - INFO - __main__ -   {'video_r1': 49.3, 'video_recall': '49.3/71.3/79.6', 'video_ravg': 66.7}
09/10/2024 20:40:53 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_itm_tvas====history best step: 49=======

09/10/2024 20:40:53 - INFO - __main__ -   {'video_r1': 52.6, 'video_recall': '52.6/72.3/77.8', 'video_ravg': 67.6}
09/10/2024 20:41:18 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.00021817543893121183, 'loss_ret%tv%ta--finetune_area/loss_area': 2.5942883491516113, 'loss_ret%tv%ta--finetune_area/total_loss': 2.5945065021514893}
[h264 @ 0x55d5b6d4cc00] mmco: unref short failure
[h264 @ 0x55d5b6d4cc00] mmco: unref short failure
  5%|▌         | 100/1945 [33:42<68:07:59, 132.94s/it][h264 @ 0x5643a89fa340] mmco: unref short failure
[h264 @ 0x5643a89fa340] mmco: unref short failure
[h264 @ 0x55ee095e28c0] mmco: unref short failure
  5%|▌         | 101/1945 [33:45<48:13:20, 94.14s/it]   5%|▌         | 102/1945 [33:49<34:21:11, 67.10s/it]  5%|▌         | 103/1945 [33:54<24:43:50, 48.33s/it][h264 @ 0x55edfa6c41c0] mmco: unref short failure
[h264 @ 0x55edfa6c41c0] mmco: unref short failure
[h264 @ 0x55d5c9fdc840] mmco: unref short failure
[h264 @ 0x56439b3330c0] mmco: unref short failure
[h264 @ 0x56439b3330c0] mmco: unref short failure
[h264 @ 0x56439b3330c0] mmco: unref short failure
[h264 @ 0x56439b3330c0] mmco: unref short failure
[h264 @ 0x56439b3330c0] mmco: unref short failure
[h264 @ 0x56439b3330c0] mmco: unref short failure
[h264 @ 0x56439b3330c0] mmco: unref short failure
[h264 @ 0x56439b3330c0] mmco: unref short failure
  5%|▌         | 104/1945 [33:59<18:03:01, 35.30s/it][h264 @ 0x55ee107cf340] mmco: unref short failure
[h264 @ 0x55ee107cf340] mmco: unref short failure
[h264 @ 0x55ee107cf340] mmco: unref short failure
[h264 @ 0x55ee107cf340] mmco: unref short failure
[h264 @ 0x55ee07a3a940] mmco: unref short failure
[h264 @ 0x55ee07a3a940] mmco: unref short failure
[h264 @ 0x55ee07a3a940] mmco: unref short failure
[h264 @ 0x5643ac7d8ec0] mmco: unref short failure
  5%|▌         | 105/1945 [34:04<13:25:10, 26.26s/it][h264 @ 0x55d5c3ffeec0] mmco: unref short failure
  5%|▌         | 106/1945 [34:10<10:14:44, 20.06s/it][h264 @ 0x55d5bb22d940] mmco: unref short failure
[h264 @ 0x55d5bb22d940] mmco: unref short failure
  6%|▌         | 107/1945 [34:15<8:03:41, 15.79s/it] [h264 @ 0x55a83c2809c0] mmco: unref short failure
[h264 @ 0x55a83c2809c0] mmco: unref short failure
[h264 @ 0x5643a1fa3c40] mmco: unref short failure
[h264 @ 0x5643a1fa3c40] mmco: unref short failure
[h264 @ 0x55edfa80a400] mmco: unref short failure
[h264 @ 0x55edfa80a400] mmco: unref short failure
  6%|▌         | 108/1945 [34:21<6:28:35, 12.69s/it]  6%|▌         | 109/1945 [34:28<5:34:12, 10.92s/it][h264 @ 0x55ee015fbb80] mmco: unref short failure
  6%|▌         | 110/1945 [34:34<4:55:01,  9.65s/it][h264 @ 0x5643ac39df00] mmco: unref short failure
[h264 @ 0x5643ac39df00] mmco: unref short failure
[h264 @ 0x5643ac39df00] mmco: unref short failure
[h264 @ 0x5643ac39df00] mmco: unref short failure
  6%|▌         | 111/1945 [34:40<4:16:13,  8.38s/it][h264 @ 0x55edf1b38bc0] mmco: unref short failure
[h264 @ 0x55edf1b38bc0] mmco: unref short failure
  6%|▌         | 112/1945 [34:47<4:00:49,  7.88s/it]  6%|▌         | 113/1945 [34:52<3:42:27,  7.29s/it]  6%|▌         | 114/1945 [34:58<3:25:33,  6.74s/it]  6%|▌         | 115/1945 [35:04<3:21:08,  6.59s/it][h264 @ 0x55d5c7cc3540] mmco: unref short failure
[h264 @ 0x55d5c7cc3540] mmco: unref short failure
[h264 @ 0x5643ace6cb00] mmco: unref short failure
[h264 @ 0x55a84338fcc0] mmco: unref short failure
[h264 @ 0x55a84338fcc0] mmco: unref short failure
[h264 @ 0x5643938d0980] mmco: unref short failure
[h264 @ 0x5643938d0980] mmco: unref short failure
[h264 @ 0x5643938d0980] mmco: unref short failure
  6%|▌         | 116/1945 [35:18<4:25:24,  8.71s/it][h264 @ 0x5643af601240] mmco: unref short failure
[h264 @ 0x5643af601240] mmco: unref short failure
[h264 @ 0x55d5cad401c0] mmco: unref short failure
[h264 @ 0x5643a9e9c1c0] mmco: unref short failure
  6%|▌         | 117/1945 [35:28<4:38:55,  9.16s/it][h264 @ 0x55ee0a5c10c0] mmco: unref short failure
[h264 @ 0x55ee0a5c10c0] mmco: unref short failure
[h264 @ 0x55ee0bf698c0] mmco: unref short failure
[h264 @ 0x55ee0bf698c0] mmco: unref short failure
[h264 @ 0x55edf633bec0] mmco: unref short failure
[h264 @ 0x55edf633bec0] mmco: unref short failure
[h264 @ 0x55edfd0b8380] mmco: unref short failure
[h264 @ 0x55edfd0b8380] mmco: unref short failure
[h264 @ 0x55d5ce526bc0] mmco: unref short failure
[h264 @ 0x55d5ce526bc0] mmco: unref short failure
[h264 @ 0x55d5c196c7c0] mmco: unref short failure
[h264 @ 0x55d5b7759080] mmco: unref short failure
[h264 @ 0x55d5b7759080] mmco: unref short failure
[h264 @ 0x55a837c975c0] mmco: unref short failure
[h264 @ 0x55a837c975c0] mmco: unref short failure
  6%|▌         | 118/1945 [35:48<6:13:44, 12.27s/it][h264 @ 0x55ee036f3880] mmco: unref short failure
[h264 @ 0x55ee036f3880] mmco: unref short failure
[h264 @ 0x55ee036f3880] mmco: unref short failure
  6%|▌         | 119/1945 [35:58<5:58:07, 11.77s/it][h264 @ 0x5643a9590340] mmco: unref short failure
[h264 @ 0x55ee01c2c440] mmco: unref short failure
[h264 @ 0x55ee047e3cc0] mmco: unref short failure
[h264 @ 0x55ee047e3cc0] mmco: unref short failure
  6%|▌         | 120/1945 [36:07<5:29:27, 10.83s/it][h264 @ 0x55d5cf24f500] mmco: unref short failure
  6%|▌         | 121/1945 [36:12<4:40:27,  9.23s/it][h264 @ 0x55a847eee740] mmco: unref short failure
[h264 @ 0x55d5c0a52d00] mmco: unref short failure
[h264 @ 0x55d5c0a52d00] mmco: unref short failure
[h264 @ 0x55edfc6fb8c0] mmco: unref short failure
[h264 @ 0x55a84396d5c0] mmco: unref short failure
[h264 @ 0x55a84396d5c0] mmco: unref short failure
  6%|▋         | 122/1945 [36:23<4:56:26,  9.76s/it]  6%|▋         | 123/1945 [36:29<4:15:32,  8.41s/it][h264 @ 0x55a83321c300] mmco: unref short failure
[h264 @ 0x55a84270af00] mmco: unref short failure
[h264 @ 0x55a84270af00] mmco: unref short failure
[h264 @ 0x55d5cdf30ec0] mmco: unref short failure
[h264 @ 0x55ee0b596cc0] mmco: unref short failure
[h264 @ 0x55a84881b780] mmco: unref short failure
[h264 @ 0x55d5cdf31340] mmco: unref short failure
[h264 @ 0x55d5b070f700] mmco: unref short failure
[h264 @ 0x55d5b070f700] mmco: unref short failure
[h264 @ 0x55a8426ab980] mmco: unref short failure
[h264 @ 0x55a8426ab980] mmco: unref short failure
[h264 @ 0x55d5c3fff180] mmco: unref short failure
[h264 @ 0x55d5c3fff180] mmco: unref short failure
[h264 @ 0x55a84054c340] mmco: unref short failure
[h264 @ 0x56439f8be480] mmco: unref short failure
[h264 @ 0x56439f8be480] mmco: unref short failure
[h264 @ 0x55d5b1c61900] mmco: unref short failure
[h264 @ 0x55d5b1c61900] mmco: unref short failure
[h264 @ 0x5643a973aa40] mmco: unref short failure
[h264 @ 0x5643a973aa40] mmco: unref short failure
  6%|▋         | 124/1945 [37:14<9:57:09, 19.68s/it][h264 @ 0x55a8466ccf00] mmco: unref short failure
[h264 @ 0x55d5c6f07c40] mmco: unref short failure
[h264 @ 0x55d5c6f07c40] mmco: unref short failure
[h264 @ 0x55ee0f078b40] mmco: unref short failure
[h264 @ 0x55ee0f078b40] mmco: unref short failure
[h264 @ 0x55a849de9140] mmco: unref short failure
[h264 @ 0x55a849de9140] mmco: unref short failure
[h264 @ 0x55a846334cc0] mmco: unref short failure
[h264 @ 0x55a846334cc0] mmco: unref short failure
[h264 @ 0x55edfd3a8c00] mmco: unref short failure
  6%|▋         | 125/1945 [37:37<10:21:56, 20.50s/it][h264 @ 0x55d5c98700c0] mmco: unref short failure
[h264 @ 0x55a849d13000] mmco: unref short failure
  6%|▋         | 126/1945 [37:53<9:37:52, 19.06s/it]   7%|▋         | 127/1945 [38:01<7:59:06, 15.81s/it][h264 @ 0x55edf3fc3540] mmco: unref short failure
[h264 @ 0x5643aadfdbc0] mmco: unref short failure
[h264 @ 0x5643aadfdbc0] mmco: unref short failure
[h264 @ 0x5643aadfdbc0] mmco: unref short failure
[h264 @ 0x5643aadfdbc0] mmco: unref short failure
[h264 @ 0x56439a2a2ac0] mmco: unref short failure
[h264 @ 0x55edfc6dccc0] mmco: unref short failure
  7%|▋         | 128/1945 [38:17<8:01:24, 15.90s/it]  7%|▋         | 129/1945 [38:23<6:33:51, 13.01s/it][h264 @ 0x56439e22a980] mmco: unref short failure
[h264 @ 0x55ee0edef900] mmco: unref short failure
[h264 @ 0x55ee0edef900] mmco: unref short failure
  7%|▋         | 130/1945 [38:29<5:24:36, 10.73s/it]  7%|▋         | 131/1945 [38:34<4:39:46,  9.25s/it][h264 @ 0x55d5baf8b800] mmco: unref short failure
[h264 @ 0x55ee00cdc880] mmco: unref short failure
[h264 @ 0x55ee00cdc880] mmco: unref short failure
[h264 @ 0x56439515b840] mmco: unref short failure
[h264 @ 0x56439515b840] mmco: unref short failure
[h264 @ 0x55edf20ddcc0] mmco: unref short failure
[h264 @ 0x55ee0a369f40] mmco: unref short failure
[h264 @ 0x55ee0a369f40] mmco: unref short failure
  7%|▋         | 132/1945 [39:19<9:57:59, 19.79s/it][h264 @ 0x55ee00c81780] mmco: unref short failure
[h264 @ 0x55ee00c81780] mmco: unref short failure
[h264 @ 0x55ee00c81780] mmco: unref short failure
[h264 @ 0x55ee00c81780] mmco: unref short failure
[h264 @ 0x55a84ac3d700] mmco: unref short failure
[h264 @ 0x55a84ac3d700] mmco: unref short failure
[h264 @ 0x55a84ac3d700] mmco: unref short failure
[h264 @ 0x55ee0be46280] mmco: unref short failure
[h264 @ 0x55d5b235d4c0] mmco: unref short failure
[h264 @ 0x55d5ccfcd140] mmco: unref short failure
[h264 @ 0x55d5ce5264c0] mmco: unref short failure
  7%|▋         | 133/1945 [39:46<11:04:02, 21.99s/it][h264 @ 0x5643a862ddc0] mmco: unref short failure
[h264 @ 0x5643a862ddc0] mmco: unref short failure
[h264 @ 0x55ee0a321140] mmco: unref short failure
[h264 @ 0x55ee0a321140] mmco: unref short failure
[h264 @ 0x5643a4650180] mmco: unref short failure
[h264 @ 0x5643a4650180] mmco: unref short failure
  7%|▋         | 134/1945 [39:52<8:43:23, 17.34s/it] [h264 @ 0x5643ae911600] mmco: unref short failure
[h264 @ 0x5643ae911600] mmco: unref short failure
  7%|▋         | 135/1945 [40:08<8:22:44, 16.67s/it][h264 @ 0x55a82e825640] mmco: unref short failure
[h264 @ 0x55a82e825640] mmco: unref short failure
[h264 @ 0x55a846b304c0] mmco: unref short failure
[h264 @ 0x55a846b304c0] mmco: unref short failure
[h264 @ 0x55ee01576e80] mmco: unref short failure
[h264 @ 0x55d5c737d640] mmco: unref short failure
[h264 @ 0x55d5c737d640] mmco: unref short failure
[h264 @ 0x55d5c737d640] mmco: unref short failure
[h264 @ 0x55a849b13840] mmco: unref short failure
[h264 @ 0x55a849b13840] mmco: unref short failure
[h264 @ 0x5643a409cc00] mmco: unref short failure
  7%|▋         | 136/1945 [40:32<9:30:19, 18.92s/it]  7%|▋         | 137/1945 [40:37<7:29:01, 14.90s/it][h264 @ 0x55a83b7d5bc0] mmco: unref short failure
[h264 @ 0x55a83b7d5bc0] mmco: unref short failure
  7%|▋         | 138/1945 [40:43<6:07:19, 12.20s/it][h264 @ 0x55edf474f500] mmco: unref short failure
  7%|▋         | 139/1945 [40:49<5:11:59, 10.37s/it][h264 @ 0x55ee05b18180] mmco: unref short failure
[h264 @ 0x55d5bd5cfa00] mmco: unref short failure
[h264 @ 0x55d5bd5cfa00] mmco: unref short failure
[h264 @ 0x5643b0a27cc0] mmco: unref short failure
[h264 @ 0x5643b0a27cc0] mmco: unref short failure
[h264 @ 0x5643b0a27cc0] mmco: unref short failure
[h264 @ 0x5643b0a27cc0] mmco: unref short failure
[h264 @ 0x55a847de9080] mmco: unref short failure
[h264 @ 0x56439e0a4a40] mmco: unref short failure
[h264 @ 0x55a83c91f2c0] mmco: unref short failure
[h264 @ 0x55edfba6b440] mmco: unref short failure
  7%|▋         | 140/1945 [41:23<8:41:34, 17.34s/it][h264 @ 0x55d5b16369c0] mmco: unref short failure
[h264 @ 0x55d5b16369c0] mmco: unref short failure
[h264 @ 0x55d5b16369c0] mmco: unref short failure
[h264 @ 0x55d5b16369c0] mmco: unref short failure
[h264 @ 0x55d5cd194500] mmco: unref short failure
[h264 @ 0x564393539700] mmco: unref short failure
[h264 @ 0x5643ac4c6880] mmco: unref short failure
[h264 @ 0x5643ac4c6880] mmco: unref short failure
  7%|▋         | 141/1945 [41:49<10:02:52, 20.05s/it]  7%|▋         | 142/1945 [42:00<8:37:25, 17.22s/it] [h264 @ 0x55edf7b5fb80] mmco: unref short failure
[h264 @ 0x55edf7b5fb80] mmco: unref short failure
[h264 @ 0x55a82d66adc0] mmco: unref short failure
[h264 @ 0x5643aefc4ec0] mmco: unref short failure
[h264 @ 0x55d5d2ea2380] mmco: unref short failure
[h264 @ 0x55d5b3d89f00] mmco: unref short failure
[h264 @ 0x55d5b3d89f00] mmco: unref short failure
[h264 @ 0x55d5b3d89f00] mmco: unref short failure
[h264 @ 0x55d5b3d89f00] mmco: unref short failure
[h264 @ 0x564396433440] mmco: unref short failure
  7%|▋         | 143/1945 [42:24<9:39:26, 19.29s/it][h264 @ 0x55edfd7e1e00] mmco: unref short failure
  7%|▋         | 144/1945 [42:34<8:20:03, 16.66s/it][h264 @ 0x55a84c2de0c0] mmco: unref short failure
[h264 @ 0x55a84c2de0c0] mmco: unref short failure
[h264 @ 0x5643aa988b80] mmco: unref short failure
  7%|▋         | 145/1945 [42:41<6:47:59, 13.60s/it][h264 @ 0x56439e54b280] mmco: unref short failure
  8%|▊         | 146/1945 [42:47<5:39:22, 11.32s/it][h264 @ 0x55edf09e2880] mmco: unref short failure
[h264 @ 0x55edf09e2880] mmco: unref short failure
[h264 @ 0x55edf09e2880] mmco: unref short failure
[h264 @ 0x55edf09e2880] mmco: unref short failure
[h264 @ 0x55ee0798c040] mmco: unref short failure
  8%|▊         | 147/1945 [42:55<5:07:29, 10.26s/it][h264 @ 0x55a83c1ace40] mmco: unref short failure
[h264 @ 0x56439bda5000] mmco: unref short failure
[h264 @ 0x56439bda5000] mmco: unref short failure
[h264 @ 0x55a83ca6f440] mmco: unref short failure
[h264 @ 0x55ee04b6e340] mmco: unref short failure
[h264 @ 0x55ee04b6e340] mmco: unref short failure
[h264 @ 0x55ee1073e440] mmco: unref short failure
[h264 @ 0x55ee04b6e340] mmco: unref short failure
[h264 @ 0x55a84da7cd00] mmco: unref short failure
[h264 @ 0x55a84da7cd00] mmco: unref short failure
[h264 @ 0x55ee07912500] mmco: unref short failure
[h264 @ 0x55ee07912500] mmco: unref short failure
[h264 @ 0x55edf07118c0] mmco: unref short failure
[h264 @ 0x55edf07118c0] mmco: unref short failure
[h264 @ 0x55edf07118c0] mmco: unref short failure
[h264 @ 0x55edf07118c0] mmco: unref short failure
[h264 @ 0x55a83aa575c0] mmco: unref short failure
[h264 @ 0x5643b5145a80] mmco: unref short failure
[h264 @ 0x5643b5145a80] mmco: unref short failure
  8%|▊         | 148/1945 [43:32<9:06:13, 18.24s/it][h264 @ 0x564394503c00] mmco: unref short failure
[h264 @ 0x564394503c00] mmco: unref short failure
  8%|▊         | 149/1945 [43:48<8:48:01, 17.64s/it]09/10/2024 20:51:27 - INFO - __main__ -   evaluate on ret%tvas--msrvtt_ret task
09/10/2024 20:51:27 - INFO - __main__ -   start running ret%tvas validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55edf7cf0540] mmco: unref short failure
[h264 @ 0x55edf7cf0540] mmco: unref short failure
[h264 @ 0x55ee0917b5c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5643aeeaa300] mmco: unref short failure
[h264 @ 0x5643aeeaa300] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5643977e1cc0] mmco: unref short failure
[h264 @ 0x55d5c55b8c40] mmco: unref short failure
[h264 @ 0x55d5c55b8c40] mmco: unref short failure
[h264 @ 0x55ee05592700] mmco: unref short failure
[h264 @ 0x55ee05592700] mmco: unref short failure
[h264 @ 0x55d5bd5e0780] mmco: unref short failure
[h264 @ 0x56439d876980] mmco: unref short failure
[h264 @ 0x56439d876980] mmco: unref short failure
[h264 @ 0x55d5bfe718c0] mmco: unref short failure
[h264 @ 0x55d5bfe718c0] mmco: unref short failure
[h264 @ 0x55d5cb36c000] mmco: unref short failure
[h264 @ 0x564392bd4640] mmco: unref short failure
[h264 @ 0x564392bd4640] mmco: unref short failure
[h264 @ 0x56439d876780] mmco: unref short failure
[h264 @ 0x56439d876780] mmco: unref short failure
[h264 @ 0x5643b3151700] mmco: unref short failure
[h264 @ 0x5643b3151700] mmco: unref short failure
[h264 @ 0x55d5b2b51140] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:59,  3.71it/s][A
  1%|          | 2/221 [00:00<01:27,  2.50it/s][A
  1%|▏         | 3/221 [00:01<01:30,  2.41it/s][A
  2%|▏         | 4/221 [00:01<01:13,  2.95it/s][A
  2%|▏         | 5/221 [00:01<01:09,  3.12it/s][A
  3%|▎         | 7/221 [00:02<00:53,  3.98it/s][A
  4%|▎         | 8/221 [00:02<00:48,  4.40it/s][A
  4%|▍         | 9/221 [00:02<00:53,  3.93it/s][A
  5%|▍         | 10/221 [00:03<01:24,  2.49it/s][A
  5%|▍         | 11/221 [00:03<01:12,  2.91it/s][A
  5%|▌         | 12/221 [00:03<01:05,  3.21it/s][A
  6%|▌         | 13/221 [00:04<01:11,  2.89it/s][A
  6%|▋         | 14/221 [00:04<01:02,  3.32it/s][A
  7%|▋         | 15/221 [00:04<01:00,  3.39it/s][A
  7%|▋         | 16/221 [00:05<01:12,  2.82it/s][A[h264 @ 0x55d5c929fd40] mmco: unref short failure
[h264 @ 0x55d5c929fd40] mmco: unref short failure

  8%|▊         | 17/221 [00:06<01:46,  1.91it/s][A
  8%|▊         | 18/221 [00:06<01:36,  2.10it/s][A
  9%|▊         | 19/221 [00:06<01:20,  2.50it/s][A
  9%|▉         | 20/221 [00:06<01:09,  2.88it/s][A[h264 @ 0x55d5b0d17880] mmco: unref short failure

 10%|▉         | 21/221 [00:07<01:02,  3.22it/s][A
 10%|▉         | 22/221 [00:07<01:10,  2.83it/s][A
 10%|█         | 23/221 [00:07<00:56,  3.51it/s][A
 11%|█         | 24/221 [00:07<00:53,  3.68it/s][A
 11%|█▏        | 25/221 [00:08<00:52,  3.70it/s][A
 12%|█▏        | 26/221 [00:08<01:00,  3.24it/s][A
 12%|█▏        | 27/221 [00:08<00:58,  3.31it/s][A[h264 @ 0x55edf20dd380] mmco: unref short failure
[h264 @ 0x55edf20dd380] mmco: unref short failure

 13%|█▎        | 28/221 [00:09<01:19,  2.42it/s][A
 13%|█▎        | 29/221 [00:09<01:11,  2.70it/s][A
 14%|█▎        | 30/221 [00:10<01:20,  2.39it/s][A
 14%|█▍        | 31/221 [00:10<01:13,  2.59it/s][A
 14%|█▍        | 32/221 [00:10<00:58,  3.25it/s][A
 15%|█▍        | 33/221 [00:11<00:55,  3.38it/s][A
 15%|█▌        | 34/221 [00:11<00:44,  4.17it/s][A
 16%|█▌        | 35/221 [00:11<00:45,  4.05it/s][A
 16%|█▋        | 36/221 [00:12<01:03,  2.91it/s][A
 17%|█▋        | 37/221 [00:12<01:02,  2.95it/s][A
 17%|█▋        | 38/221 [00:12<01:08,  2.68it/s][A
 18%|█▊        | 39/221 [00:13<01:01,  2.98it/s][A[h264 @ 0x5643915ac700] mmco: unref short failure
[h264 @ 0x5643915ac700] mmco: unref short failure

 18%|█▊        | 40/221 [00:15<02:30,  1.21it/s][A
 19%|█▊        | 41/221 [00:15<01:56,  1.54it/s][A
 19%|█▉        | 42/221 [00:15<01:43,  1.73it/s][A
 19%|█▉        | 43/221 [00:16<01:30,  1.97it/s][A
 20%|█▉        | 44/221 [00:16<01:24,  2.10it/s][A
 20%|██        | 45/221 [00:16<01:24,  2.09it/s][A
 21%|██        | 46/221 [00:17<01:08,  2.57it/s][A
 21%|██▏       | 47/221 [00:17<01:04,  2.70it/s][A
 22%|██▏       | 48/221 [00:17<00:51,  3.38it/s][A
 22%|██▏       | 49/221 [00:17<00:49,  3.45it/s][A
 23%|██▎       | 50/221 [00:18<00:49,  3.48it/s][A
 23%|██▎       | 51/221 [00:18<00:46,  3.67it/s][A
 24%|██▎       | 52/221 [00:18<00:47,  3.56it/s][A
 24%|██▍       | 53/221 [00:18<00:46,  3.59it/s][A
 24%|██▍       | 54/221 [00:20<01:28,  1.88it/s][A[h264 @ 0x55edf0c08240] mmco: unref short failure
[h264 @ 0x55edf0c08240] mmco: unref short failure

 25%|██▍       | 55/221 [00:20<01:28,  1.88it/s][A
 25%|██▌       | 56/221 [00:20<01:20,  2.06it/s][A
 26%|██▌       | 57/221 [00:21<01:24,  1.94it/s][A
 26%|██▌       | 58/221 [00:22<01:35,  1.71it/s][A
 27%|██▋       | 59/221 [00:22<01:24,  1.91it/s][A
 27%|██▋       | 60/221 [00:23<01:41,  1.58it/s][A
 28%|██▊       | 61/221 [00:23<01:29,  1.78it/s][A
 28%|██▊       | 62/221 [00:24<01:26,  1.84it/s][A[h264 @ 0x55edf0708980] mmco: unref short failure
[h264 @ 0x55edf0708980] mmco: unref short failure

 29%|██▊       | 63/221 [00:25<01:28,  1.79it/s][A
 29%|██▉       | 64/221 [00:25<01:36,  1.63it/s][A
 29%|██▉       | 65/221 [00:25<01:16,  2.03it/s][A
 30%|██▉       | 66/221 [00:26<01:16,  2.02it/s][A
 30%|███       | 67/221 [00:26<01:07,  2.27it/s][A
 31%|███       | 68/221 [00:26<00:56,  2.72it/s][A
 31%|███       | 69/221 [00:28<01:35,  1.60it/s][A
 32%|███▏      | 70/221 [00:28<01:19,  1.89it/s][A
 32%|███▏      | 71/221 [00:28<01:10,  2.12it/s][A
 33%|███▎      | 72/221 [00:29<01:14,  2.01it/s][A
 33%|███▎      | 73/221 [00:29<01:14,  1.97it/s][A
 33%|███▎      | 74/221 [00:30<01:30,  1.62it/s][A
 34%|███▍      | 75/221 [00:31<01:23,  1.74it/s][A
 34%|███▍      | 76/221 [00:31<01:08,  2.12it/s][A
 35%|███▍      | 77/221 [00:32<01:10,  2.05it/s][A
 35%|███▌      | 78/221 [00:32<00:59,  2.40it/s][A
 36%|███▌      | 79/221 [00:32<01:04,  2.20it/s][A
 36%|███▌      | 80/221 [00:33<00:57,  2.45it/s][A
 37%|███▋      | 81/221 [00:33<00:53,  2.62it/s][A
 37%|███▋      | 82/221 [00:33<00:56,  2.44it/s][A
 38%|███▊      | 83/221 [00:34<01:06,  2.06it/s][A[h264 @ 0x564395b93940] mmco: unref short failure

 38%|███▊      | 84/221 [00:34<00:58,  2.33it/s][A
 38%|███▊      | 85/221 [00:35<00:47,  2.89it/s][A
 39%|███▉      | 86/221 [00:35<00:39,  3.42it/s][A
 39%|███▉      | 87/221 [00:36<01:11,  1.87it/s][A[h264 @ 0x55a842893300] mmco: unref short failure
[h264 @ 0x55a842893300] mmco: unref short failure

 40%|███▉      | 88/221 [00:37<01:17,  1.72it/s][A
 40%|████      | 89/221 [00:37<01:07,  1.95it/s][A[h264 @ 0x5643aa983bc0] mmco: unref short failure
[h264 @ 0x5643aa983bc0] mmco: unref short failure

 41%|████      | 90/221 [00:37<00:59,  2.22it/s][A
 41%|████      | 91/221 [00:37<00:49,  2.64it/s][A
 42%|████▏     | 92/221 [00:38<00:44,  2.89it/s][A
 42%|████▏     | 93/221 [00:38<00:52,  2.43it/s][A
 43%|████▎     | 94/221 [00:39<00:51,  2.48it/s][A
 43%|████▎     | 95/221 [00:39<00:50,  2.47it/s][A
 43%|████▎     | 96/221 [00:40<00:59,  2.10it/s][A
 44%|████▍     | 97/221 [00:40<00:50,  2.44it/s][A
 44%|████▍     | 98/221 [00:41<01:02,  1.98it/s][A
 45%|████▍     | 99/221 [00:41<00:54,  2.26it/s][A
 45%|████▌     | 100/221 [00:41<00:48,  2.50it/s][A
 46%|████▌     | 101/221 [00:41<00:43,  2.77it/s][A
 46%|████▌     | 102/221 [00:43<01:09,  1.72it/s][A
 47%|████▋     | 103/221 [00:43<00:53,  2.22it/s][A
 47%|████▋     | 104/221 [00:43<00:45,  2.58it/s][A
 48%|████▊     | 105/221 [00:43<00:41,  2.78it/s][A
 48%|████▊     | 106/221 [00:44<00:51,  2.22it/s][A
 48%|████▊     | 107/221 [00:44<00:47,  2.38it/s][A
 49%|████▉     | 108/221 [00:45<00:46,  2.44it/s][A
 49%|████▉     | 109/221 [00:45<00:37,  2.96it/s][A
 50%|████▉     | 110/221 [00:45<00:36,  3.07it/s][A
 50%|█████     | 111/221 [00:46<00:40,  2.70it/s][A
 51%|█████     | 112/221 [00:46<00:38,  2.80it/s][A[h264 @ 0x55d5cd73b780] mmco: unref short failure

 51%|█████     | 113/221 [00:46<00:43,  2.46it/s][A
 52%|█████▏    | 115/221 [00:47<00:29,  3.57it/s][A
 52%|█████▏    | 116/221 [00:47<00:31,  3.30it/s][A
 53%|█████▎    | 117/221 [00:47<00:34,  3.05it/s][A
 53%|█████▎    | 118/221 [00:48<00:31,  3.23it/s][A
 54%|█████▍    | 119/221 [00:48<00:36,  2.79it/s][A
 54%|█████▍    | 120/221 [00:48<00:33,  3.06it/s][A
 55%|█████▍    | 121/221 [00:49<00:28,  3.53it/s][A
 55%|█████▌    | 122/221 [00:49<00:29,  3.30it/s][A
 56%|█████▌    | 123/221 [00:49<00:27,  3.52it/s][A
 56%|█████▌    | 124/221 [00:50<00:34,  2.80it/s][A
 57%|█████▋    | 125/221 [00:50<00:38,  2.51it/s][A
 57%|█████▋    | 126/221 [00:51<00:33,  2.81it/s][A[h264 @ 0x55a84dbc4680] mmco: unref short failure

 57%|█████▋    | 127/221 [00:51<00:43,  2.16it/s][A
 58%|█████▊    | 128/221 [00:52<00:40,  2.30it/s][A
 58%|█████▊    | 129/221 [00:52<00:31,  2.92it/s][A
 59%|█████▉    | 130/221 [00:52<00:27,  3.27it/s][A
 59%|█████▉    | 131/221 [00:52<00:24,  3.72it/s][A[h264 @ 0x56439b582e80] mmco: unref short failure
[h264 @ 0x56439f84d5c0] mmco: unref short failure
[h264 @ 0x56439f84d5c0] mmco: unref short failure

 60%|█████▉    | 132/221 [00:54<01:06,  1.34it/s][A
 60%|██████    | 133/221 [00:54<00:56,  1.56it/s][A[h264 @ 0x55d5c6e90e00] mmco: unref short failure

 61%|██████    | 134/221 [00:55<01:03,  1.36it/s][A
 61%|██████    | 135/221 [00:56<01:08,  1.26it/s][A
 62%|██████▏   | 136/221 [00:57<00:56,  1.51it/s][A
 62%|██████▏   | 137/221 [00:57<00:46,  1.81it/s][A
 62%|██████▏   | 138/221 [00:57<00:42,  1.95it/s][A[h264 @ 0x5643a7fe2dc0] mmco: unref short failure
[h264 @ 0x5643a7fe2dc0] mmco: unref short failure
[h264 @ 0x5643a7fe2dc0] mmco: unref short failure
[h264 @ 0x5643a7fe2dc0] mmco: unref short failure

 63%|██████▎   | 139/221 [00:58<00:47,  1.74it/s][A
 63%|██████▎   | 140/221 [00:58<00:41,  1.94it/s][A
 64%|██████▍   | 141/221 [00:59<00:34,  2.31it/s][A
 64%|██████▍   | 142/221 [00:59<00:31,  2.51it/s][A
 65%|██████▍   | 143/221 [01:00<00:37,  2.08it/s][A
 65%|██████▌   | 144/221 [01:00<00:37,  2.07it/s][A
 66%|██████▌   | 146/221 [01:00<00:22,  3.26it/s][A
 67%|██████▋   | 147/221 [01:01<00:24,  3.06it/s][A
 67%|██████▋   | 148/221 [01:01<00:26,  2.78it/s][A
 67%|██████▋   | 149/221 [01:02<00:29,  2.43it/s][A
 68%|██████▊   | 150/221 [01:02<00:26,  2.73it/s][A[h264 @ 0x5643a649a000] mmco: unref short failure

 68%|██████▊   | 151/221 [01:03<00:28,  2.44it/s][A
 69%|██████▉   | 152/221 [01:03<00:38,  1.77it/s][A
 69%|██████▉   | 153/221 [01:04<00:30,  2.25it/s][A
 70%|██████▉   | 154/221 [01:04<00:25,  2.58it/s][A
 70%|███████   | 155/221 [01:04<00:24,  2.70it/s][A
 71%|███████   | 156/221 [01:05<00:23,  2.74it/s][A
 71%|███████   | 157/221 [01:05<00:24,  2.64it/s][A
 71%|███████▏  | 158/221 [01:05<00:22,  2.85it/s][A
 72%|███████▏  | 159/221 [01:05<00:17,  3.47it/s][A
 72%|███████▏  | 160/221 [01:06<00:16,  3.71it/s][A
 73%|███████▎  | 161/221 [01:06<00:16,  3.74it/s][A
 73%|███████▎  | 162/221 [01:06<00:12,  4.59it/s][A
 74%|███████▍  | 163/221 [01:06<00:13,  4.16it/s][A
 74%|███████▍  | 164/221 [01:07<00:13,  4.21it/s][A
 75%|███████▍  | 165/221 [01:07<00:14,  3.88it/s][A
 75%|███████▌  | 166/221 [01:07<00:14,  3.73it/s][A
 76%|███████▌  | 167/221 [01:07<00:12,  4.50it/s][A
 76%|███████▌  | 168/221 [01:08<00:13,  3.86it/s][A
 76%|███████▋  | 169/221 [01:08<00:11,  4.45it/s][A
 77%|███████▋  | 170/221 [01:08<00:12,  4.16it/s][A
 77%|███████▋  | 171/221 [01:08<00:15,  3.30it/s][A
 78%|███████▊  | 172/221 [01:09<00:13,  3.60it/s][A
 78%|███████▊  | 173/221 [01:09<00:17,  2.82it/s][A
 79%|███████▊  | 174/221 [01:10<00:17,  2.72it/s][A
 79%|███████▉  | 175/221 [01:10<00:16,  2.82it/s][A
 80%|███████▉  | 176/221 [01:10<00:12,  3.53it/s][A
 80%|████████  | 177/221 [01:10<00:11,  3.90it/s][A
 81%|████████  | 178/221 [01:11<00:17,  2.46it/s][A
 81%|████████  | 179/221 [01:11<00:16,  2.48it/s][A
 81%|████████▏ | 180/221 [01:12<00:13,  2.96it/s][A
 82%|████████▏ | 181/221 [01:12<00:10,  3.68it/s][A
 82%|████████▏ | 182/221 [01:12<00:10,  3.63it/s][A
 83%|████████▎ | 183/221 [01:12<00:11,  3.34it/s][A
 83%|████████▎ | 184/221 [01:13<00:11,  3.16it/s][A
 84%|████████▍ | 186/221 [01:13<00:11,  2.95it/s][A
 85%|████████▍ | 187/221 [01:14<00:11,  3.04it/s][A
 85%|████████▌ | 188/221 [01:14<00:10,  3.01it/s][A
 86%|████████▌ | 189/221 [01:14<00:10,  2.97it/s][A
 86%|████████▌ | 190/221 [01:15<00:10,  2.93it/s][A
 86%|████████▋ | 191/221 [01:15<00:08,  3.57it/s][A
 87%|████████▋ | 192/221 [01:15<00:07,  3.78it/s][A
 87%|████████▋ | 193/221 [01:15<00:06,  4.56it/s][A
 88%|████████▊ | 194/221 [01:16<00:09,  2.78it/s][A
 88%|████████▊ | 195/221 [01:16<00:08,  3.06it/s][A
 89%|████████▊ | 196/221 [01:17<00:08,  2.97it/s][A
 89%|████████▉ | 197/221 [01:17<00:08,  2.97it/s][A
 90%|████████▉ | 198/221 [01:17<00:07,  2.96it/s][A
 90%|█████████ | 199/221 [01:18<00:07,  3.02it/s][A
 90%|█████████ | 200/221 [01:18<00:06,  3.33it/s][A
 91%|█████████ | 201/221 [01:18<00:05,  3.73it/s][A
 91%|█████████▏| 202/221 [01:18<00:05,  3.40it/s][A
 92%|█████████▏| 203/221 [01:19<00:05,  3.53it/s][A
 92%|█████████▏| 204/221 [01:19<00:04,  3.41it/s][A
 93%|█████████▎| 205/221 [01:19<00:03,  4.24it/s][A
 93%|█████████▎| 206/221 [01:20<00:04,  3.06it/s][A
 94%|█████████▎| 207/221 [01:20<00:03,  3.86it/s][A
 94%|█████████▍| 208/221 [01:20<00:03,  3.80it/s][A
 95%|█████████▍| 209/221 [01:20<00:02,  4.06it/s][A
 95%|█████████▌| 211/221 [01:21<00:02,  4.21it/s][A
 96%|█████████▌| 212/221 [01:21<00:02,  3.88it/s][A
 96%|█████████▋| 213/221 [01:21<00:01,  4.01it/s][A
 97%|█████████▋| 214/221 [01:22<00:03,  2.22it/s][A
 97%|█████████▋| 215/221 [01:22<00:02,  2.61it/s][A
 98%|█████████▊| 216/221 [01:23<00:01,  2.63it/s][A
 98%|█████████▊| 217/221 [01:23<00:01,  2.49it/s][A
 99%|█████████▊| 218/221 [01:23<00:01,  2.64it/s][A
 99%|█████████▉| 219/221 [01:24<00:00,  2.84it/s][A
100%|█████████▉| 220/221 [01:24<00:00,  3.11it/s][A
100%|██████████| 221/221 [01:24<00:00,  3.68it/s][A100%|██████████| 221/221 [01:24<00:00,  2.61it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:06,  3.30it/s][A
  1%|          | 2/221 [00:00<01:06,  3.29it/s][A
  1%|▏         | 3/221 [00:00<01:06,  3.30it/s][A
  2%|▏         | 4/221 [00:01<01:05,  3.30it/s][A
  2%|▏         | 5/221 [00:01<01:05,  3.30it/s][A
  3%|▎         | 6/221 [00:01<01:05,  3.30it/s][A
  3%|▎         | 7/221 [00:02<01:04,  3.30it/s][A
  4%|▎         | 8/221 [00:02<01:04,  3.30it/s][A
  4%|▍         | 9/221 [00:02<01:04,  3.30it/s][A
  5%|▍         | 10/221 [00:03<01:03,  3.30it/s][A
  5%|▍         | 11/221 [00:03<01:03,  3.31it/s][A
  5%|▌         | 12/221 [00:03<01:03,  3.31it/s][A
  6%|▌         | 13/221 [00:03<01:02,  3.30it/s][A
  6%|▋         | 14/221 [00:04<01:02,  3.30it/s][A
  7%|▋         | 15/221 [00:04<01:02,  3.31it/s][A
  7%|▋         | 16/221 [00:04<01:02,  3.31it/s][A
  8%|▊         | 17/221 [00:05<01:01,  3.30it/s][A
  8%|▊         | 18/221 [00:05<01:01,  3.30it/s][A
  9%|▊         | 19/221 [00:05<01:01,  3.30it/s][A
  9%|▉         | 20/221 [00:06<01:00,  3.31it/s][A
 10%|▉         | 21/221 [00:06<01:00,  3.31it/s][A
 10%|▉         | 22/221 [00:06<01:00,  3.31it/s][A
 10%|█         | 23/221 [00:06<00:59,  3.31it/s][A
 11%|█         | 24/221 [00:07<00:59,  3.31it/s][A
 11%|█▏        | 25/221 [00:07<00:59,  3.31it/s][A
 12%|█▏        | 26/221 [00:07<00:58,  3.31it/s][A
 12%|█▏        | 27/221 [00:08<00:58,  3.31it/s][A
 13%|█▎        | 28/221 [00:08<00:58,  3.31it/s][A
 13%|█▎        | 29/221 [00:08<00:58,  3.31it/s][A
 14%|█▎        | 30/221 [00:09<00:57,  3.31it/s][A
 14%|█▍        | 31/221 [00:09<00:57,  3.31it/s][A
 14%|█▍        | 32/221 [00:09<00:57,  3.30it/s][A
 15%|█▍        | 33/221 [00:09<00:56,  3.30it/s][A
 15%|█▌        | 34/221 [00:10<00:56,  3.30it/s][A
 16%|█▌        | 35/221 [00:10<00:56,  3.30it/s][A
 16%|█▋        | 36/221 [00:10<00:56,  3.30it/s][A
 17%|█▋        | 37/221 [00:11<00:55,  3.30it/s][A
 17%|█▋        | 38/221 [00:11<00:55,  3.30it/s][A
 18%|█▊        | 39/221 [00:11<00:55,  3.30it/s][A
 18%|█▊        | 40/221 [00:12<00:54,  3.31it/s][A
 19%|█▊        | 41/221 [00:12<00:54,  3.31it/s][A
 19%|█▉        | 42/221 [00:12<00:54,  3.31it/s][A
 19%|█▉        | 43/221 [00:13<00:53,  3.31it/s][A
 20%|█▉        | 44/221 [00:13<00:53,  3.31it/s][A
 20%|██        | 45/221 [00:13<00:53,  3.31it/s][A
 21%|██        | 46/221 [00:13<00:52,  3.30it/s][A
 21%|██▏       | 47/221 [00:14<00:52,  3.31it/s][A
 22%|██▏       | 48/221 [00:14<00:52,  3.30it/s][A
 22%|██▏       | 49/221 [00:14<00:52,  3.30it/s][A
 23%|██▎       | 50/221 [00:15<00:51,  3.30it/s][A
 23%|██▎       | 51/221 [00:15<00:51,  3.30it/s][A
 24%|██▎       | 52/221 [00:15<00:51,  3.30it/s][A
 24%|██▍       | 53/221 [00:16<00:50,  3.30it/s][A
 24%|██▍       | 54/221 [00:16<00:50,  3.30it/s][A
 25%|██▍       | 55/221 [00:16<00:50,  3.30it/s][A
 25%|██▌       | 56/221 [00:16<00:49,  3.30it/s][A
 26%|██▌       | 57/221 [00:17<00:49,  3.30it/s][A
 26%|██▌       | 58/221 [00:17<00:49,  3.30it/s][A
 27%|██▋       | 59/221 [00:17<00:49,  3.30it/s][A
 27%|██▋       | 60/221 [00:18<00:48,  3.30it/s][A
 28%|██▊       | 61/221 [00:18<00:48,  3.30it/s][A
 28%|██▊       | 62/221 [00:18<00:48,  3.30it/s][A
 29%|██▊       | 63/221 [00:19<00:47,  3.30it/s][A
 29%|██▉       | 64/221 [00:19<00:47,  3.30it/s][A
 29%|██▉       | 65/221 [00:19<00:47,  3.30it/s][A
 30%|██▉       | 66/221 [00:19<00:46,  3.30it/s][A
 30%|███       | 67/221 [00:20<00:46,  3.30it/s][A
 31%|███       | 68/221 [00:20<00:46,  3.30it/s][A
 31%|███       | 69/221 [00:20<00:46,  3.30it/s][A
 32%|███▏      | 70/221 [00:21<00:45,  3.30it/s][A
 32%|███▏      | 71/221 [00:21<00:45,  3.30it/s][A
 33%|███▎      | 72/221 [00:21<00:45,  3.30it/s][A
 33%|███▎      | 73/221 [00:22<00:44,  3.30it/s][A
 33%|███▎      | 74/221 [00:22<00:44,  3.30it/s][A
 34%|███▍      | 75/221 [00:22<00:44,  3.30it/s][A
 34%|███▍      | 76/221 [00:23<00:43,  3.30it/s][A
 35%|███▍      | 77/221 [00:23<00:43,  3.30it/s][A
 35%|███▌      | 78/221 [00:23<00:43,  3.30it/s][A
 36%|███▌      | 79/221 [00:23<00:43,  3.30it/s][A
 36%|███▌      | 80/221 [00:24<00:42,  3.30it/s][A
 37%|███▋      | 81/221 [00:24<00:42,  3.30it/s][A
 37%|███▋      | 82/221 [00:24<00:42,  3.30it/s][A
 38%|███▊      | 83/221 [00:25<00:41,  3.30it/s][A
 38%|███▊      | 84/221 [00:25<00:41,  3.30it/s][A
 38%|███▊      | 85/221 [00:25<00:41,  3.30it/s][A
 39%|███▉      | 86/221 [00:26<00:40,  3.30it/s][A
 39%|███▉      | 87/221 [00:26<00:40,  3.30it/s][A
 40%|███▉      | 88/221 [00:26<00:40,  3.30it/s][A
 40%|████      | 89/221 [00:26<00:39,  3.30it/s][A
 41%|████      | 90/221 [00:27<00:39,  3.30it/s][A
 41%|████      | 91/221 [00:27<00:39,  3.30it/s][A
 42%|████▏     | 92/221 [00:27<00:39,  3.30it/s][A
 42%|████▏     | 93/221 [00:28<00:38,  3.30it/s][A
 43%|████▎     | 94/221 [00:28<00:38,  3.30it/s][A
 43%|████▎     | 95/221 [00:28<00:38,  3.30it/s][A
 43%|████▎     | 96/221 [00:29<00:37,  3.30it/s][A
 44%|████▍     | 97/221 [00:29<00:37,  3.30it/s][A
 44%|████▍     | 98/221 [00:29<00:37,  3.30it/s][A
 45%|████▍     | 99/221 [00:29<00:36,  3.30it/s][A
 45%|████▌     | 100/221 [00:30<00:36,  3.30it/s][A
 46%|████▌     | 101/221 [00:30<00:36,  3.30it/s][A
 46%|████▌     | 102/221 [00:30<00:36,  3.30it/s][A
 47%|████▋     | 103/221 [00:31<00:35,  3.30it/s][A
 47%|████▋     | 104/221 [00:31<00:35,  3.30it/s][A
 48%|████▊     | 105/221 [00:31<00:35,  3.30it/s][A
 48%|████▊     | 106/221 [00:32<00:34,  3.30it/s][A
 48%|████▊     | 107/221 [00:32<00:34,  3.30it/s][A
 49%|████▉     | 108/221 [00:32<00:34,  3.30it/s][A
 49%|████▉     | 109/221 [00:33<00:33,  3.30it/s][A
 50%|████▉     | 110/221 [00:33<00:33,  3.30it/s][A
 50%|█████     | 111/221 [00:33<00:33,  3.30it/s][A
 51%|█████     | 112/221 [00:33<00:33,  3.30it/s][A
 51%|█████     | 113/221 [00:34<00:32,  3.30it/s][A
 52%|█████▏    | 114/221 [00:34<00:32,  3.30it/s][A
 52%|█████▏    | 115/221 [00:34<00:32,  3.30it/s][A
 52%|█████▏    | 116/221 [00:35<00:31,  3.30it/s][A
 53%|█████▎    | 117/221 [00:35<00:31,  3.30it/s][A
 53%|█████▎    | 118/221 [00:35<00:31,  3.30it/s][A
 54%|█████▍    | 119/221 [00:36<00:30,  3.30it/s][A
 54%|█████▍    | 120/221 [00:36<00:30,  3.30it/s][A
 55%|█████▍    | 121/221 [00:36<00:30,  3.30it/s][A
 55%|█████▌    | 122/221 [00:36<00:30,  3.30it/s][A
 56%|█████▌    | 123/221 [00:37<00:29,  3.30it/s][A
 56%|█████▌    | 124/221 [00:37<00:29,  3.30it/s][A
 57%|█████▋    | 125/221 [00:37<00:29,  3.30it/s][A
 57%|█████▋    | 126/221 [00:38<00:28,  3.30it/s][A
 57%|█████▋    | 127/221 [00:38<00:28,  3.30it/s][A
 58%|█████▊    | 128/221 [00:38<00:28,  3.30it/s][A
 58%|█████▊    | 129/221 [00:39<00:27,  3.30it/s][A
 59%|█████▉    | 130/221 [00:39<00:27,  3.30it/s][A
 59%|█████▉    | 131/221 [00:39<00:27,  3.30it/s][A
 60%|█████▉    | 132/221 [00:39<00:26,  3.30it/s][A
 60%|██████    | 133/221 [00:40<00:26,  3.30it/s][A
 61%|██████    | 134/221 [00:40<00:26,  3.30it/s][A
 61%|██████    | 135/221 [00:40<00:26,  3.30it/s][A
 62%|██████▏   | 136/221 [00:41<00:25,  3.30it/s][A
 62%|██████▏   | 137/221 [00:41<00:25,  3.30it/s][A
 62%|██████▏   | 138/221 [00:41<00:25,  3.30it/s][A
 63%|██████▎   | 139/221 [00:42<00:24,  3.30it/s][A
 63%|██████▎   | 140/221 [00:42<00:24,  3.30it/s][A
 64%|██████▍   | 141/221 [00:42<00:24,  3.30it/s][A
 64%|██████▍   | 142/221 [00:43<00:23,  3.30it/s][A
 65%|██████▍   | 143/221 [00:43<00:23,  3.30it/s][A
 65%|██████▌   | 144/221 [00:43<00:23,  3.30it/s][A
 66%|██████▌   | 145/221 [00:43<00:23,  3.30it/s][A
 66%|██████▌   | 146/221 [00:44<00:22,  3.30it/s][A
 67%|██████▋   | 147/221 [00:44<00:22,  3.30it/s][A
 67%|██████▋   | 148/221 [00:44<00:22,  3.30it/s][A
 67%|██████▋   | 149/221 [00:45<00:21,  3.30it/s][A
 68%|██████▊   | 150/221 [00:45<00:21,  3.30it/s][A
 68%|██████▊   | 151/221 [00:45<00:21,  3.30it/s][A
 69%|██████▉   | 152/221 [00:46<00:20,  3.30it/s][A
 69%|██████▉   | 153/221 [00:46<00:20,  3.30it/s][A
 70%|██████▉   | 154/221 [00:46<00:20,  3.30it/s][A
 70%|███████   | 155/221 [00:46<00:20,  3.30it/s][A
 71%|███████   | 156/221 [00:47<00:19,  3.30it/s][A
 71%|███████   | 157/221 [00:47<00:19,  3.30it/s][A
 71%|███████▏  | 158/221 [00:47<00:19,  3.30it/s][A
 72%|███████▏  | 159/221 [00:48<00:18,  3.30it/s][A
 72%|███████▏  | 160/221 [00:48<00:18,  3.30it/s][A
 73%|███████▎  | 161/221 [00:48<00:18,  3.30it/s][A
 73%|███████▎  | 162/221 [00:49<00:17,  3.30it/s][A
 74%|███████▍  | 163/221 [00:49<00:17,  3.30it/s][A
 74%|███████▍  | 164/221 [00:49<00:17,  3.30it/s][A
 75%|███████▍  | 165/221 [00:49<00:16,  3.30it/s][A
 75%|███████▌  | 166/221 [00:50<00:16,  3.30it/s][A
 76%|███████▌  | 167/221 [00:50<00:16,  3.30it/s][A
 76%|███████▌  | 168/221 [00:50<00:16,  3.30it/s][A
 76%|███████▋  | 169/221 [00:51<00:15,  3.30it/s][A
 77%|███████▋  | 170/221 [00:51<00:15,  3.30it/s][A
 77%|███████▋  | 171/221 [00:51<00:15,  3.30it/s][A
 78%|███████▊  | 172/221 [00:52<00:14,  3.30it/s][A
 78%|███████▊  | 173/221 [00:52<00:14,  3.30it/s][A
 79%|███████▊  | 174/221 [00:52<00:14,  3.30it/s][A
 79%|███████▉  | 175/221 [00:53<00:13,  3.30it/s][A
 80%|███████▉  | 176/221 [00:53<00:13,  3.30it/s][A
 80%|████████  | 177/221 [00:53<00:13,  3.30it/s][A
 81%|████████  | 178/221 [00:53<00:13,  3.30it/s][A
 81%|████████  | 179/221 [00:54<00:12,  3.30it/s][A
 81%|████████▏ | 180/221 [00:54<00:12,  3.30it/s][A
 82%|████████▏ | 181/221 [00:54<00:12,  3.30it/s][A
 82%|████████▏ | 182/221 [00:55<00:11,  3.30it/s][A
 83%|████████▎ | 183/221 [00:55<00:11,  3.30it/s][A
 83%|████████▎ | 184/221 [00:55<00:11,  3.30it/s][A
 84%|████████▎ | 185/221 [00:56<00:10,  3.30it/s][A
 84%|████████▍ | 186/221 [00:56<00:10,  3.30it/s][A
 85%|████████▍ | 187/221 [00:56<00:10,  3.30it/s][A
 85%|████████▌ | 188/221 [00:56<00:10,  3.30it/s][A
 86%|████████▌ | 189/221 [00:57<00:09,  3.30it/s][A
 86%|████████▌ | 190/221 [00:57<00:09,  3.30it/s][A
 86%|████████▋ | 191/221 [00:57<00:09,  3.30it/s][A
 87%|████████▋ | 192/221 [00:58<00:08,  3.30it/s][A
 87%|████████▋ | 193/221 [00:58<00:08,  3.30it/s][A
 88%|████████▊ | 194/221 [00:58<00:08,  3.30it/s][A
 88%|████████▊ | 195/221 [00:59<00:07,  3.30it/s][A
 89%|████████▊ | 196/221 [00:59<00:07,  3.30it/s][A
 89%|████████▉ | 197/221 [00:59<00:07,  3.30it/s][A
 90%|████████▉ | 198/221 [00:59<00:06,  3.30it/s][A
 90%|█████████ | 199/221 [01:00<00:06,  3.30it/s][A
 90%|█████████ | 200/221 [01:00<00:06,  3.30it/s][A
 91%|█████████ | 201/221 [01:00<00:06,  3.30it/s][A
 91%|█████████▏| 202/221 [01:01<00:05,  3.30it/s][A
 92%|█████████▏| 203/221 [01:01<00:05,  3.30it/s][A
 92%|█████████▏| 204/221 [01:01<00:05,  3.30it/s][A
 93%|█████████▎| 205/221 [01:02<00:04,  3.30it/s][A
 93%|█████████▎| 206/221 [01:02<00:04,  3.30it/s][A
 94%|█████████▎| 207/221 [01:02<00:04,  3.30it/s][A
 94%|█████████▍| 208/221 [01:03<00:03,  3.30it/s][A
 95%|█████████▍| 209/221 [01:03<00:03,  3.30it/s][A
 95%|█████████▌| 210/221 [01:03<00:03,  3.30it/s][A
 95%|█████████▌| 211/221 [01:03<00:03,  3.30it/s][A
 96%|█████████▌| 212/221 [01:04<00:02,  3.30it/s][A
 96%|█████████▋| 213/221 [01:04<00:02,  3.30it/s][A
 97%|█████████▋| 214/221 [01:04<00:02,  3.30it/s][A
 97%|█████████▋| 215/221 [01:05<00:01,  3.30it/s][A
 98%|█████████▊| 216/221 [01:05<00:01,  3.30it/s][A
 98%|█████████▊| 217/221 [01:05<00:01,  3.30it/s][A
 99%|█████████▊| 218/221 [01:06<00:00,  3.30it/s][A
 99%|█████████▉| 219/221 [01:06<00:00,  3.30it/s][A
100%|█████████▉| 220/221 [01:06<00:00,  3.30it/s][A
100%|██████████| 221/221 [01:06<00:00,  3.30it/s][A100%|██████████| 221/221 [01:06<00:00,  3.30it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:39,  5.55it/s][A
  1%|          | 2/221 [00:00<01:10,  3.11it/s][A
  1%|▏         | 3/221 [00:00<01:06,  3.27it/s][A
  2%|▏         | 4/221 [00:01<01:00,  3.59it/s][A
  2%|▏         | 5/221 [00:01<00:58,  3.67it/s][A
  3%|▎         | 7/221 [00:01<00:51,  4.19it/s][A
  4%|▎         | 8/221 [00:02<00:53,  3.98it/s][A
  4%|▍         | 9/221 [00:02<00:59,  3.54it/s][A
  5%|▍         | 10/221 [00:03<01:37,  2.17it/s][A
  5%|▍         | 11/221 [00:03<01:23,  2.52it/s][A
  5%|▌         | 12/221 [00:03<01:13,  2.85it/s][A
  6%|▌         | 13/221 [00:04<01:26,  2.41it/s][A
  6%|▋         | 14/221 [00:04<01:23,  2.48it/s][A
  7%|▋         | 15/221 [00:04<01:10,  2.94it/s][A
  7%|▋         | 16/221 [00:05<01:07,  3.04it/s][A
  8%|▊         | 17/221 [00:06<01:37,  2.08it/s][A
  8%|▊         | 18/221 [00:06<01:29,  2.27it/s][A
  9%|▊         | 19/221 [00:07<01:35,  2.12it/s][A
 10%|▉         | 21/221 [00:07<01:06,  3.02it/s][A
 10%|▉         | 22/221 [00:07<00:58,  3.41it/s][A
 10%|█         | 23/221 [00:07<00:50,  3.96it/s][A
 11%|█         | 24/221 [00:07<00:46,  4.24it/s][A
 11%|█▏        | 25/221 [00:08<00:50,  3.86it/s][A
 12%|█▏        | 26/221 [00:08<00:47,  4.11it/s][A
 12%|█▏        | 27/221 [00:08<00:47,  4.11it/s][A
 13%|█▎        | 28/221 [00:09<01:43,  1.86it/s][A
 13%|█▎        | 29/221 [00:10<01:33,  2.06it/s][A
 14%|█▎        | 30/221 [00:10<01:25,  2.24it/s][A
 14%|█▍        | 31/221 [00:10<01:16,  2.48it/s][A
 14%|█▍        | 32/221 [00:11<01:01,  3.08it/s][A
 15%|█▍        | 33/221 [00:11<00:53,  3.50it/s][A
 15%|█▌        | 34/221 [00:11<00:47,  3.93it/s][A
 16%|█▌        | 35/221 [00:11<00:40,  4.58it/s][A
 16%|█▋        | 36/221 [00:11<00:49,  3.71it/s][A
 17%|█▋        | 37/221 [00:12<00:53,  3.46it/s][A
 17%|█▋        | 38/221 [00:12<01:02,  2.91it/s][A
 18%|█▊        | 39/221 [00:12<00:56,  3.22it/s][A
 18%|█▊        | 40/221 [00:13<00:55,  3.28it/s][A
 19%|█▊        | 41/221 [00:13<00:48,  3.72it/s][A
 19%|█▉        | 42/221 [00:13<00:55,  3.23it/s][A
 19%|█▉        | 43/221 [00:14<00:59,  2.98it/s][A
 20%|█▉        | 44/221 [00:14<00:49,  3.58it/s][A
 20%|██        | 45/221 [00:14<00:57,  3.05it/s][A
 21%|██        | 46/221 [00:15<00:54,  3.22it/s][A
 21%|██▏       | 47/221 [00:15<00:51,  3.36it/s][A
 22%|██▏       | 48/221 [00:15<00:43,  3.95it/s][A
 22%|██▏       | 49/221 [00:15<00:37,  4.60it/s][A
 23%|██▎       | 50/221 [00:16<00:46,  3.70it/s][A
 23%|██▎       | 51/221 [00:16<00:41,  4.12it/s][A
 24%|██▎       | 52/221 [00:16<00:36,  4.63it/s][A
 24%|██▍       | 53/221 [00:16<00:36,  4.65it/s][A
 24%|██▍       | 54/221 [00:17<00:53,  3.14it/s][A
 25%|██▍       | 55/221 [00:17<00:44,  3.71it/s][A
 25%|██▌       | 56/221 [00:17<00:38,  4.32it/s][A
 26%|██▌       | 57/221 [00:17<00:33,  4.91it/s][A
 26%|██▌       | 58/221 [00:17<00:37,  4.35it/s][A
 27%|██▋       | 59/221 [00:18<00:39,  4.14it/s][A
 27%|██▋       | 60/221 [00:18<00:54,  2.97it/s][A
 28%|██▊       | 61/221 [00:18<00:47,  3.38it/s][A
 28%|██▊       | 62/221 [00:19<00:42,  3.76it/s][A
 29%|██▊       | 63/221 [00:19<00:42,  3.75it/s][A
 29%|██▉       | 64/221 [00:19<00:40,  3.84it/s][A
 29%|██▉       | 65/221 [00:20<00:47,  3.28it/s][A
 30%|██▉       | 66/221 [00:20<00:38,  3.98it/s][A
 30%|███       | 67/221 [00:20<00:42,  3.60it/s][A
 31%|███       | 68/221 [00:20<00:35,  4.32it/s][A
 32%|███▏      | 70/221 [00:20<00:28,  5.32it/s][A
 32%|███▏      | 71/221 [00:21<00:38,  3.87it/s][A
 33%|███▎      | 72/221 [00:21<00:44,  3.37it/s][A
 33%|███▎      | 73/221 [00:22<00:47,  3.10it/s][A
 33%|███▎      | 74/221 [00:22<00:39,  3.75it/s][A
 34%|███▍      | 75/221 [00:22<00:45,  3.23it/s][A
 34%|███▍      | 76/221 [00:22<00:39,  3.66it/s][A
 35%|███▍      | 77/221 [00:23<00:42,  3.40it/s][A
 35%|███▌      | 78/221 [00:23<00:39,  3.61it/s][A
 36%|███▌      | 79/221 [00:23<00:48,  2.92it/s][A
 36%|███▌      | 80/221 [00:24<00:42,  3.35it/s][A
 37%|███▋      | 81/221 [00:24<00:34,  4.01it/s][A
 37%|███▋      | 82/221 [00:24<00:37,  3.68it/s][A
 38%|███▊      | 83/221 [00:24<00:39,  3.50it/s][A
 38%|███▊      | 84/221 [00:25<00:43,  3.17it/s][A
 38%|███▊      | 85/221 [00:25<00:38,  3.56it/s][A
 39%|███▉      | 86/221 [00:25<00:35,  3.76it/s][A
 39%|███▉      | 87/221 [00:26<00:41,  3.23it/s][A
 40%|███▉      | 88/221 [00:26<00:42,  3.11it/s][A
 40%|████      | 89/221 [00:26<00:47,  2.78it/s][A
 41%|████      | 90/221 [00:27<00:45,  2.86it/s][A
 41%|████      | 91/221 [00:27<00:38,  3.38it/s][A
 42%|████▏     | 92/221 [00:27<00:39,  3.28it/s][A
 43%|████▎     | 94/221 [00:28<00:29,  4.34it/s][A
 43%|████▎     | 95/221 [00:28<00:32,  3.88it/s][A
 43%|████▎     | 96/221 [00:28<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:29<00:29,  4.15it/s][A
 45%|████▍     | 99/221 [00:29<00:32,  3.74it/s][A
 45%|████▌     | 100/221 [00:29<00:33,  3.62it/s][A
 46%|████▌     | 101/221 [00:30<00:39,  3.06it/s][A
 46%|████▌     | 102/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 103/221 [00:30<00:30,  3.88it/s][A
 47%|████▋     | 104/221 [00:30<00:32,  3.58it/s][A
 48%|████▊     | 105/221 [00:31<00:29,  3.94it/s][A
 48%|████▊     | 106/221 [00:31<00:27,  4.24it/s][A
 48%|████▊     | 107/221 [00:31<00:27,  4.13it/s][A
 49%|████▉     | 108/221 [00:31<00:24,  4.54it/s][A
 49%|████▉     | 109/221 [00:32<00:29,  3.84it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.43it/s][A
 50%|█████     | 111/221 [00:33<00:43,  2.53it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.39it/s][A
 52%|█████▏    | 115/221 [00:33<00:22,  4.62it/s][A
 52%|█████▏    | 116/221 [00:33<00:23,  4.55it/s][A
 53%|█████▎    | 117/221 [00:34<00:26,  3.95it/s][A
 53%|█████▎    | 118/221 [00:34<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:35<00:37,  2.71it/s][A
 54%|█████▍    | 120/221 [00:35<00:35,  2.88it/s][A
 55%|█████▍    | 121/221 [00:35<00:30,  3.33it/s][A
 55%|█████▌    | 122/221 [00:35<00:28,  3.47it/s][A
 56%|█████▌    | 123/221 [00:36<00:25,  3.81it/s][A
 56%|█████▌    | 124/221 [00:36<00:33,  2.94it/s][A
 57%|█████▋    | 125/221 [00:37<00:34,  2.82it/s][A
 57%|█████▋    | 126/221 [00:37<00:29,  3.26it/s][A
 57%|█████▋    | 127/221 [00:37<00:36,  2.55it/s][A
 58%|█████▊    | 128/221 [00:38<00:32,  2.89it/s][A
 58%|█████▊    | 129/221 [00:38<00:27,  3.34it/s][A
 59%|█████▉    | 130/221 [00:38<00:28,  3.20it/s][A
 60%|█████▉    | 132/221 [00:38<00:19,  4.60it/s][A
 60%|██████    | 133/221 [00:39<00:20,  4.33it/s][A
 61%|██████    | 134/221 [00:39<00:21,  4.09it/s][A
 61%|██████    | 135/221 [00:39<00:24,  3.58it/s][A
 62%|██████▏   | 136/221 [00:40<00:25,  3.39it/s][A
 62%|██████▏   | 137/221 [00:40<00:21,  3.95it/s][A
 62%|██████▏   | 138/221 [00:40<00:22,  3.62it/s][A
 63%|██████▎   | 139/221 [00:41<00:28,  2.89it/s][A
 63%|██████▎   | 140/221 [00:41<00:28,  2.84it/s][A
 64%|██████▍   | 141/221 [00:41<00:25,  3.18it/s][A
 64%|██████▍   | 142/221 [00:42<00:27,  2.91it/s][A
 65%|██████▍   | 143/221 [00:42<00:28,  2.74it/s][A
 66%|██████▌   | 145/221 [00:42<00:19,  3.89it/s][A
 66%|██████▌   | 146/221 [00:43<00:19,  3.93it/s][A
 67%|██████▋   | 147/221 [00:43<00:16,  4.59it/s][A
 67%|██████▋   | 148/221 [00:43<00:16,  4.32it/s][A
 68%|██████▊   | 150/221 [00:43<00:15,  4.69it/s][A
 68%|██████▊   | 151/221 [00:43<00:14,  4.69it/s][A
 69%|██████▉   | 152/221 [00:44<00:23,  2.90it/s][A
 69%|██████▉   | 153/221 [00:45<00:25,  2.72it/s][A
 70%|██████▉   | 154/221 [00:45<00:27,  2.42it/s][A
 70%|███████   | 155/221 [00:46<00:28,  2.34it/s][A
 71%|███████   | 156/221 [00:46<00:34,  1.87it/s][A
 71%|███████   | 157/221 [00:47<00:29,  2.15it/s][A
 71%|███████▏  | 158/221 [00:47<00:24,  2.61it/s][A
 72%|███████▏  | 159/221 [00:47<00:21,  2.83it/s][A
 72%|███████▏  | 160/221 [00:47<00:18,  3.21it/s][A
 73%|███████▎  | 161/221 [00:48<00:14,  4.02it/s][A
 73%|███████▎  | 162/221 [00:48<00:12,  4.83it/s][A
 74%|███████▍  | 163/221 [00:48<00:13,  4.41it/s][A
 74%|███████▍  | 164/221 [00:48<00:15,  3.63it/s][A
 75%|███████▍  | 165/221 [00:48<00:13,  4.21it/s][A
 75%|███████▌  | 166/221 [00:49<00:18,  3.05it/s][A
 76%|███████▌  | 167/221 [00:49<00:15,  3.49it/s][A
 76%|███████▌  | 168/221 [00:49<00:14,  3.64it/s][A
 76%|███████▋  | 169/221 [00:50<00:13,  3.91it/s][A
 77%|███████▋  | 170/221 [00:50<00:16,  3.11it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.34it/s][A
 78%|███████▊  | 172/221 [00:50<00:12,  4.05it/s][A
 78%|███████▊  | 173/221 [00:51<00:11,  4.03it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.61it/s][A
 79%|███████▉  | 175/221 [00:51<00:12,  3.67it/s][A
 80%|███████▉  | 176/221 [00:52<00:11,  3.91it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.65it/s][A
 81%|████████  | 178/221 [00:52<00:15,  2.82it/s][A
 81%|████████  | 179/221 [00:53<00:13,  3.10it/s][A
 81%|████████▏ | 180/221 [00:53<00:11,  3.67it/s][A
 82%|████████▏ | 181/221 [00:53<00:10,  3.77it/s][A
 82%|████████▏ | 182/221 [00:53<00:10,  3.78it/s][A
 83%|████████▎ | 183/221 [00:54<00:09,  3.99it/s][A
 83%|████████▎ | 184/221 [00:54<00:11,  3.11it/s][A
 84%|████████▎ | 185/221 [00:54<00:11,  3.05it/s][A
 85%|████████▍ | 187/221 [00:55<00:07,  4.59it/s][A
 85%|████████▌ | 188/221 [00:55<00:08,  3.82it/s][A
 86%|████████▌ | 189/221 [00:55<00:10,  3.10it/s][A
 86%|████████▌ | 190/221 [00:56<00:11,  2.68it/s][A
 86%|████████▋ | 191/221 [00:56<00:09,  3.12it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.29it/s][A
 87%|████████▋ | 193/221 [00:57<00:06,  4.08it/s][A
 88%|████████▊ | 194/221 [00:57<00:09,  2.70it/s][A
 88%|████████▊ | 195/221 [00:58<00:10,  2.40it/s][A
 89%|████████▊ | 196/221 [00:58<00:10,  2.39it/s][A
 89%|████████▉ | 197/221 [00:58<00:08,  2.68it/s][A
 90%|████████▉ | 198/221 [00:59<00:07,  3.02it/s][A
 90%|█████████ | 199/221 [00:59<00:05,  3.74it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.13it/s][A
 91%|█████████ | 201/221 [01:00<00:06,  3.03it/s][A
 91%|█████████▏| 202/221 [01:00<00:05,  3.47it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  4.08it/s][A
 93%|█████████▎| 205/221 [01:00<00:03,  4.77it/s][A
 93%|█████████▎| 206/221 [01:01<00:04,  3.71it/s][A
 94%|█████████▎| 207/221 [01:01<00:03,  4.27it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.85it/s][A
 95%|█████████▍| 209/221 [01:02<00:04,  2.91it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.73it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.49it/s][A
 96%|█████████▋| 213/221 [01:03<00:02,  2.78it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  3.17it/s][A
 97%|█████████▋| 215/221 [01:04<00:02,  2.87it/s][A
 98%|█████████▊| 216/221 [01:04<00:01,  3.12it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  3.11it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.52it/s][A
 99%|█████████▉| 219/221 [01:05<00:00,  3.75it/s][A
100%|█████████▉| 220/221 [01:05<00:00,  3.60it/s][A
100%|██████████| 221/221 [01:05<00:00,  2.91it/s][A100%|██████████| 221/221 [01:05<00:00,  3.36it/s]
09/10/2024 20:57:35 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_area_forward=====step 149--===========

09/10/2024 20:57:35 - INFO - __main__ -   {'area_r1': 42.3, 'area_recall': '42.3/70.5/80.0', 'area_ravg': 64.3}
09/10/2024 20:57:35 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_area_backard=====step 149--===========

09/10/2024 20:57:35 - INFO - __main__ -   {'forward_r1': 38.7, 'forward_recall': '38.7/66.5/77.4', 'forward_ravg': 60.9}
09/10/2024 20:57:35 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_area_back_with_video=====step 149--===========

09/10/2024 20:57:35 - INFO - __main__ -   {'area_video_r1': 38.9, 'area_video_recall': '38.9/66.4/77.4', 'area_video_ravg': 60.9}
09/10/2024 20:57:35 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_area_back_with_video====history best step: 149=======

09/10/2024 20:57:35 - INFO - __main__ -   {'area_video_r1': 38.9, 'area_video_recall': '38.9/66.4/77.4', 'area_video_ravg': 60.9}
09/10/2024 20:57:35 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_itm_area=====step 149--===========

09/10/2024 20:57:35 - INFO - __main__ -   {'area_video_r1': 50.7, 'area_video_recall': '50.7/72.4/81.7', 'area_video_ravg': 68.3, 'area_video_back_r1': 47.7, 'area_video_back_recall': '47.7/70.4/79.4', 'area_video_back_ravg': 65.8}
09/10/2024 20:57:35 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_itm_area====history best step: 49=======

09/10/2024 20:57:35 - INFO - __main__ -   {'area_video_r1': 53.4, 'area_video_recall': '53.4/75.5/82.6', 'area_video_ravg': 70.5, 'area_video_back_r1': 51.4, 'area_video_back_recall': '51.4/73.1/80.9', 'area_video_back_ravg': 68.4}
09/10/2024 20:57:35 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_itc_tvas=====step 149--===========

09/10/2024 20:57:35 - INFO - __main__ -   {'video_r1': 32.0, 'video_recall': '32.0/58.8/69.1', 'video_ravg': 53.3}
09/10/2024 20:57:35 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_itc_tvas====history best step: 149=======

09/10/2024 20:57:35 - INFO - __main__ -   {'video_r1': 32.0, 'video_recall': '32.0/58.8/69.1', 'video_ravg': 53.3}
09/10/2024 20:57:35 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_itm_tvas=====step 149--===========

09/10/2024 20:57:35 - INFO - __main__ -   {'video_r1': 49.7, 'video_recall': '49.7/70.8/79.6', 'video_ravg': 66.7}
09/10/2024 20:57:35 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_itm_tvas====history best step: 49=======

09/10/2024 20:57:35 - INFO - __main__ -   {'video_r1': 52.6, 'video_recall': '52.6/72.3/77.8', 'video_ravg': 67.6}
09/10/2024 20:58:06 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.0004739880678243935, 'loss_ret%tv%ta--finetune_area/loss_area': 2.6421852111816406, 'loss_ret%tv%ta--finetune_area/total_loss': 2.6426591873168945}
  8%|▊         | 150/1945 [50:29<66:13:15, 132.81s/it]  8%|▊         | 151/1945 [50:33<46:51:16, 94.02s/it] [h264 @ 0x55edfd20d740] mmco: unref short failure
[h264 @ 0x55edfd20d740] mmco: unref short failure
  8%|▊         | 152/1945 [50:37<33:22:53, 67.02s/it]  8%|▊         | 153/1945 [50:41<23:59:21, 48.19s/it][h264 @ 0x5643a4c1a080] mmco: unref short failure
  8%|▊         | 154/1945 [50:46<17:28:39, 35.13s/it][h264 @ 0x55d5c9d06080] mmco: unref short failure
  8%|▊         | 155/1945 [50:51<13:01:09, 26.18s/it]  8%|▊         | 156/1945 [50:57<9:58:21, 20.07s/it] [h264 @ 0x55ee0dcb6000] mmco: unref short failure
[h264 @ 0x55ee0dcb6000] mmco: unref short failure
  8%|▊         | 157/1945 [51:03<7:49:35, 15.76s/it][h264 @ 0x55ee07923340] mmco: unref short failure
  8%|▊         | 158/1945 [51:08<6:18:19, 12.70s/it][h264 @ 0x55ee014c3e00] mmco: unref short failure
[h264 @ 0x56439f8664c0] mmco: unref short failure
  8%|▊         | 159/1945 [51:14<5:17:17, 10.66s/it][h264 @ 0x55d5c913ac80] mmco: unref short failure
[h264 @ 0x55a83a9f1800] mmco: unref short failure
  8%|▊         | 160/1945 [51:20<4:34:24,  9.22s/it][h264 @ 0x55a84dc342c0] mmco: unref short failure
  8%|▊         | 161/1945 [51:25<3:59:01,  8.04s/it][h264 @ 0x55d5c68796c0] mmco: unref short failure
  8%|▊         | 162/1945 [51:31<3:38:46,  7.36s/it][h264 @ 0x55d5b1350e40] mmco: unref short failure
[h264 @ 0x55d5b1350e40] mmco: unref short failure
[h264 @ 0x55d5bb67ff00] mmco: unref short failure
[h264 @ 0x55d5bb67ff00] mmco: unref short failure
  8%|▊         | 163/1945 [51:37<3:27:31,  6.99s/it]  8%|▊         | 164/1945 [51:43<3:16:50,  6.63s/it][h264 @ 0x56439f95a640] mmco: unref short failure
[h264 @ 0x56439f95a640] mmco: unref short failure
[h264 @ 0x55d5b1839b40] mmco: unref short failure
[h264 @ 0x55d5b1839b40] mmco: unref short failure
  8%|▊         | 165/1945 [51:48<3:04:31,  6.22s/it][h264 @ 0x55ee05307e80] mmco: unref short failure
[h264 @ 0x564390ee1740] mmco: unref short failure
[h264 @ 0x564390ee1740] mmco: unref short failure
[h264 @ 0x55edfd36e480] mmco: unref short failure
[h264 @ 0x55edfd36e480] mmco: unref short failure
[h264 @ 0x55d5b3842700] mmco: unref short failure
[h264 @ 0x55d5b3842700] mmco: unref short failure
[h264 @ 0x55a847b8c680] mmco: unref short failure
[h264 @ 0x5643a63023c0] mmco: unref short failure
  9%|▊         | 166/1945 [52:21<7:04:27, 14.32s/it][h264 @ 0x55d5b119b740] mmco: unref short failure
[h264 @ 0x55d5b119b740] mmco: unref short failure
[h264 @ 0x55d5b315afc0] mmco: unref short failure
  9%|▊         | 167/1945 [52:28<5:53:36, 11.93s/it]  9%|▊         | 168/1945 [52:34<5:02:48, 10.22s/it][h264 @ 0x55a84c9fcb00] mmco: unref short failure
  9%|▊         | 169/1945 [52:41<4:35:26,  9.31s/it][h264 @ 0x55edf9106540] mmco: unref short failure
[h264 @ 0x55d5b6fb6100] mmco: unref short failure
[h264 @ 0x5643a7d1c240] mmco: unref short failure
[h264 @ 0x5643a7d1c240] mmco: unref short failure
  9%|▊         | 170/1945 [52:55<5:17:35, 10.74s/it][h264 @ 0x55d5b063f680] mmco: unref short failure
[h264 @ 0x55d5b063f680] mmco: unref short failure
[h264 @ 0x55a84cdc8080] mmco: unref short failure
[h264 @ 0x55a84cdc8080] mmco: unref short failure
[h264 @ 0x5643a54e3dc0] mmco: unref short failure
  9%|▉         | 171/1945 [53:01<4:36:21,  9.35s/it][h264 @ 0x56439df6c5c0] mmco: unref short failure
[h264 @ 0x56439df6c5c0] mmco: unref short failure
  9%|▉         | 172/1945 [53:07<4:07:30,  8.38s/it]  9%|▉         | 173/1945 [53:17<4:19:40,  8.79s/it][h264 @ 0x564390e7f800] mmco: unref short failure
[h264 @ 0x55a831c6cd00] mmco: unref short failure
[h264 @ 0x55a836b63540] mmco: unref short failure
[h264 @ 0x55edf50ddac0] mmco: unref short failure
[h264 @ 0x55d5c7e40300] mmco: unref short failure
[h264 @ 0x55d5c7e40300] mmco: unref short failure
[h264 @ 0x55d5c4936800] mmco: unref short failure
[h264 @ 0x56439d744380] mmco: unref short failure
[h264 @ 0x56439d744380] mmco: unref short failure
[h264 @ 0x55edf2f7de00] mmco: unref short failure
[h264 @ 0x55edf2f7de00] mmco: unref short failure
[h264 @ 0x55edf1d8a400] mmco: unref short failure
[h264 @ 0x55edf1d8a400] mmco: unref short failure
[h264 @ 0x55a84fa5cf00] mmco: unref short failure
[h264 @ 0x55a84fa5cf00] mmco: unref short failure
[h264 @ 0x5643acd82140] mmco: unref short failure
[h264 @ 0x55a83228d300] mmco: unref short failure
[h264 @ 0x55a83e240ac0] mmco: unref short failure
[h264 @ 0x55d5ce482cc0] mmco: unref short failure
[h264 @ 0x55ee0c2c34c0] mmco: unref short failure
[h264 @ 0x55ee0c2c34c0] mmco: unref short failure
[h264 @ 0x55ee0c2c34c0] mmco: unref short failure
[h264 @ 0x55ee0c2c34c0] mmco: unref short failure
[h264 @ 0x55d5b9fd7a00] mmco: unref short failure
[h264 @ 0x5643916adec0] mmco: unref short failure
[h264 @ 0x5643916adec0] mmco: unref short failure
  9%|▉         | 174/1945 [54:22<12:36:26, 25.63s/it][h264 @ 0x55ee07cdb5c0] mmco: unref short failure
  9%|▉         | 175/1945 [54:29<9:50:49, 20.03s/it] [h264 @ 0x55ee0792f600] mmco: unref short failure
[h264 @ 0x55ee0792f600] mmco: unref short failure
[h264 @ 0x55ee0792f600] mmco: unref short failure
[h264 @ 0x55ee0792f600] mmco: unref short failure
  9%|▉         | 176/1945 [54:36<7:56:59, 16.18s/it][h264 @ 0x55ee0bcd5280] mmco: unref short failure
[h264 @ 0x55ee0bcd5280] mmco: unref short failure
  9%|▉         | 177/1945 [54:42<6:21:41, 12.95s/it][h264 @ 0x55d5b5f2b400] mmco: unref short failure
[h264 @ 0x55d5b5f2b400] mmco: unref short failure
[h264 @ 0x55a83228d300] mmco: unref short failure
[h264 @ 0x55a83228d300] mmco: unref short failure
  9%|▉         | 178/1945 [54:53<6:11:12, 12.60s/it][h264 @ 0x55d5d26e5680] mmco: unref short failure
[h264 @ 0x5643929f0340] mmco: unref short failure
[h264 @ 0x5643929f0340] mmco: unref short failure
  9%|▉         | 179/1945 [54:59<5:08:24, 10.48s/it][h264 @ 0x55a82e41c680] mmco: unref short failure
[h264 @ 0x55a82e41c680] mmco: unref short failure
[h264 @ 0x55a82d0eb440] mmco: unref short failure
[h264 @ 0x55a82d0eb440] mmco: unref short failure
[h264 @ 0x55a82d0eb440] mmco: unref short failure
[h264 @ 0x55a82d0eb440] mmco: unref short failure
  9%|▉         | 180/1945 [55:14<5:46:18, 11.77s/it]  9%|▉         | 181/1945 [55:21<5:09:31, 10.53s/it][h264 @ 0x5643a09f08c0] mmco: unref short failure
[h264 @ 0x5643a09f08c0] mmco: unref short failure
[h264 @ 0x5643b2d27500] mmco: unref short failure
[h264 @ 0x55edf00cb300] mmco: unref short failure
[h264 @ 0x55edf00cb300] mmco: unref short failure
[h264 @ 0x55edf133fa00] mmco: unref short failure
[h264 @ 0x55edf133fa00] mmco: unref short failure
[h264 @ 0x55a83275f9c0] mmco: unref short failure
[h264 @ 0x55a83275f9c0] mmco: unref short failure
[h264 @ 0x55a83275f9c0] mmco: unref short failure
[h264 @ 0x55a83275f9c0] mmco: unref short failure
[h264 @ 0x55a83275f9c0] mmco: unref short failure
[h264 @ 0x55a83275f9c0] mmco: unref short failure
[h264 @ 0x55a84cc5c100] mmco: unref short failure
[h264 @ 0x55a84cc5c100] mmco: unref short failure
[h264 @ 0x564395653b80] mmco: unref short failure
[h264 @ 0x564395653b80] mmco: unref short failure
[h264 @ 0x55ee0ecae980] mmco: unref short failure
[h264 @ 0x55a84518fbc0] mmco: unref short failure
[h264 @ 0x55edfc754e40] mmco: unref short failure
[h264 @ 0x55edfc754e40] mmco: unref short failure
[h264 @ 0x55edf8f4e100] mmco: unref short failure
[h264 @ 0x55edf8f4e100] mmco: unref short failure
[h264 @ 0x55edf1425100] mmco: unref short failure
[h264 @ 0x55edf1425100] mmco: unref short failure
[h264 @ 0x55a82d86a240] mmco: unref short failure
[h264 @ 0x55a82d86a240] mmco: unref short failure
[h264 @ 0x55a848af8040] mmco: unref short failure
[h264 @ 0x55a848af8040] mmco: unref short failure
[h264 @ 0x564391d36240] mmco: unref short failure
[h264 @ 0x564391d36240] mmco: unref short failure
[h264 @ 0x55a832368640] mmco: unref short failure
[h264 @ 0x55a82db5a040] mmco: unref short failure
  9%|▉         | 182/1945 [56:26<13:08:39, 26.84s/it][h264 @ 0x5643b461b000] mmco: unref short failure
  9%|▉         | 183/1945 [56:32<10:01:22, 20.48s/it]  9%|▉         | 184/1945 [56:37<7:45:45, 15.87s/it]  10%|▉         | 185/1945 [56:49<7:10:51, 14.69s/it][h264 @ 0x55edf0cd9600] mmco: unref short failure
[h264 @ 0x55edf0cd9600] mmco: unref short failure
[h264 @ 0x55edf0cd9600] mmco: unref short failure
[h264 @ 0x55edf0cd9600] mmco: unref short failure
[h264 @ 0x55d5b1affec0] mmco: unref short failure
[h264 @ 0x55d5b1affec0] mmco: unref short failure
[h264 @ 0x55d5b1affec0] mmco: unref short failure
[h264 @ 0x55d5b1affec0] mmco: unref short failure
[h264 @ 0x55d5b1affec0] mmco: unref short failure
[h264 @ 0x55d5b1affec0] mmco: unref short failure
[h264 @ 0x55d5b1affec0] mmco: unref short failure
[h264 @ 0x55d5cd1970c0] mmco: unref short failure
[h264 @ 0x55edfd36ed80] mmco: unref short failure
[h264 @ 0x55edf0906d80] mmco: unref short failure
[h264 @ 0x55edf0be8bc0] mmco: unref short failure
 10%|▉         | 186/1945 [57:09<7:54:30, 16.19s/it][h264 @ 0x55d5b0d5b000] mmco: unref short failure
[h264 @ 0x55d5b0d5b000] mmco: unref short failure
[h264 @ 0x55edf0242000] mmco: unref short failure
 10%|▉         | 187/1945 [57:14<6:22:35, 13.06s/it][h264 @ 0x55edf0906d80] mmco: unref short failure
[h264 @ 0x55edf0906d80] mmco: unref short failure
[h264 @ 0x564394323940] mmco: unref short failure
[h264 @ 0x564394323940] mmco: unref short failure
[h264 @ 0x564394323940] mmco: unref short failure
[h264 @ 0x564394323940] mmco: unref short failure
[h264 @ 0x564394323940] mmco: unref short failure
 10%|▉         | 188/1945 [57:20<5:19:42, 10.92s/it][h264 @ 0x55d5ba3dffc0] mmco: unref short failure
[h264 @ 0x55d5ca42b100] mmco: unref short failure
 10%|▉         | 189/1945 [57:26<4:32:59,  9.33s/it][h264 @ 0x55ee0b46e0c0] mmco: unref short failure
[h264 @ 0x55edf1525600] mmco: unref short failure
[h264 @ 0x55a831c35c00] mmco: unref short failure
[h264 @ 0x55a831c35c00] mmco: unref short failure
[h264 @ 0x5643ac1cae80] mmco: unref short failure
[h264 @ 0x5643ac1cae80] mmco: unref short failure
[h264 @ 0x55a834e4f380] mmco: unref short failure
[h264 @ 0x55a84498a180] mmco: unref short failure
[h264 @ 0x55ee0af00040] mmco: unref short failure
[h264 @ 0x55ee0af00040] mmco: unref short failure
[h264 @ 0x55ee02bd37c0] mmco: unref short failure
[h264 @ 0x55ee02bd37c0] mmco: unref short failure
[h264 @ 0x55d5cd5a1780] mmco: unref short failure
[h264 @ 0x55d5cd5a1780] mmco: unref short failure
[h264 @ 0x564393912c80] mmco: unref short failure
[h264 @ 0x55ee10504a40] mmco: unref short failure
[h264 @ 0x55ee10504a40] mmco: unref short failure
[h264 @ 0x55ee10504a40] mmco: unref short failure
[h264 @ 0x56439fb1d140] mmco: unref short failure
[h264 @ 0x56439fb1d140] mmco: unref short failure
 10%|▉         | 190/1945 [58:27<12:08:42, 24.91s/it] 10%|▉         | 191/1945 [58:34<9:31:21, 19.54s/it]  10%|▉         | 192/1945 [58:40<7:29:38, 15.39s/it][h264 @ 0x55edf0bd12c0] mmco: unref short failure
[h264 @ 0x55edf0bd12c0] mmco: unref short failure
[h264 @ 0x55a84c9f7bc0] mmco: unref short failure
[h264 @ 0x55a84c9f7bc0] mmco: unref short failure
[h264 @ 0x55d5b5017940] mmco: unref short failure
[h264 @ 0x55d5b5017940] mmco: unref short failure
 10%|▉         | 193/1945 [58:59<7:59:43, 16.43s/it][h264 @ 0x55ee02943c00] mmco: unref short failure
 10%|▉         | 194/1945 [59:11<7:25:31, 15.27s/it][h264 @ 0x55d5bf6fd080] mmco: unref short failure
[h264 @ 0x55d5bf6fd080] mmco: unref short failure
 10%|█         | 195/1945 [59:18<6:09:49, 12.68s/it][h264 @ 0x55a82fe41200] mmco: unref short failure
[h264 @ 0x5643924cd500] mmco: unref short failure
[h264 @ 0x5643924cd500] mmco: unref short failure
 10%|█         | 196/1945 [59:25<5:21:07, 11.02s/it][h264 @ 0x5643a1331b40] mmco: unref short failure
[h264 @ 0x55d5b611fdc0] mmco: unref short failure
[h264 @ 0x55d5b611fdc0] mmco: unref short failure
 10%|█         | 197/1945 [59:36<5:23:31, 11.11s/it][h264 @ 0x55d5c174e7c0] mmco: unref short failure
[h264 @ 0x55a848020400] mmco: unref short failure
[h264 @ 0x55a848020400] mmco: unref short failure
[h264 @ 0x55d5b0b18140] mmco: unref short failure
[h264 @ 0x55d5b0b18140] mmco: unref short failure
[h264 @ 0x55a8308a4d40] mmco: unref short failure
[h264 @ 0x55a8308a4d40] mmco: unref short failure
[h264 @ 0x55a8384d4180] mmco: unref short failure
[h264 @ 0x55edf1d64780] mmco: unref short failure
[h264 @ 0x55edf1d64780] mmco: unref short failure
[h264 @ 0x55ee095e1680] mmco: unref short failure
[h264 @ 0x55ee0c3f27c0] mmco: unref short failure
[h264 @ 0x55ee0c3f27c0] mmco: unref short failure
[h264 @ 0x55a83c5e8c40] mmco: unref short failure
[h264 @ 0x55a83c5e8c40] mmco: unref short failure
[h264 @ 0x55a83c5e8c40] mmco: unref short failure
[h264 @ 0x55a83c5e8c40] mmco: unref short failure
 10%|█         | 198/1945 [1:00:37<12:32:42, 25.85s/it] 10%|█         | 199/1945 [1:00:43<9:44:57, 20.10s/it] 09/10/2024 21:08:22 - INFO - __main__ -   evaluate on ret%tvas--msrvtt_ret task
09/10/2024 21:08:22 - INFO - __main__ -   start running ret%tvas validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55a8440b4240] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55a838698480] mmco: unref short failure
[h264 @ 0x55a838698480] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x564391506140] mmco: unref short failure
[h264 @ 0x5643911f2780] mmco: unref short failure
[h264 @ 0x5643911f2780] mmco: unref short failure
[h264 @ 0x55a84085c3c0] mmco: unref short failure
[h264 @ 0x55a82d66adc0] mmco: unref short failure
[h264 @ 0x564395d73240] mmco: unref short failure
[h264 @ 0x55a84e9d6000] mmco: unref short failure
[h264 @ 0x55a849985cc0] mmco: unref short failure
[h264 @ 0x55edf26d0040] mmco: unref short failure
[h264 @ 0x55edf0e02680] mmco: unref short failure
[h264 @ 0x55edf0e02680] mmco: unref short failure
[h264 @ 0x55edf0e02680] mmco: unref short failure
[h264 @ 0x55edf0e02680] mmco: unref short failure
[h264 @ 0x55edf0e02680] mmco: unref short failure
[h264 @ 0x55edf0e02680] mmco: unref short failure
[h264 @ 0x55d5ce970500] mmco: unref short failure
[h264 @ 0x55a833021040] mmco: unref short failure
[h264 @ 0x55a833021040] mmco: unref short failure
[h264 @ 0x55d5c7a66d80] mmco: unref short failure
[h264 @ 0x55d5c7a66d80] mmco: unref short failure
[h264 @ 0x55edf13d2ac0] mmco: unref short failure
[h264 @ 0x55d5c9043d00] mmco: unref short failure
[h264 @ 0x55d5c9043d00] mmco: unref short failure
[h264 @ 0x55d5c9043d00] mmco: unref short failure
[h264 @ 0x55d5c9043d00] mmco: unref short failure
[h264 @ 0x56439f701740] mmco: unref short failure
[h264 @ 0x5643a80f9400] mmco: unref short failure
[h264 @ 0x5643a80f9400] mmco: unref short failure
[h264 @ 0x55edf8b0c240] mmco: unref short failure
[h264 @ 0x55edf8b0c240] mmco: unref short failure
[h264 @ 0x55a84ce09240] mmco: unref short failure
[h264 @ 0x55a84ce09240] mmco: unref short failure
[h264 @ 0x55a84bc419c0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:35,  2.29it/s][A
  1%|          | 2/221 [00:00<01:47,  2.03it/s][A[h264 @ 0x5643a7d1c480] mmco: unref short failure

  1%|▏         | 3/221 [00:01<01:45,  2.07it/s][A
  2%|▏         | 4/221 [00:01<01:26,  2.51it/s][A
  2%|▏         | 5/221 [00:01<01:12,  2.99it/s][A
  3%|▎         | 6/221 [00:02<01:03,  3.40it/s][A
  3%|▎         | 7/221 [00:02<01:02,  3.45it/s][A[h264 @ 0x564394f029c0] mmco: unref short failure

  4%|▎         | 8/221 [00:02<01:02,  3.43it/s][A
  4%|▍         | 9/221 [00:03<01:08,  3.09it/s][A
  5%|▍         | 10/221 [00:03<01:35,  2.20it/s][A
  5%|▍         | 11/221 [00:04<01:26,  2.42it/s][A
  5%|▌         | 12/221 [00:04<01:15,  2.75it/s][A
  6%|▌         | 13/221 [00:05<01:31,  2.28it/s][A
  6%|▋         | 14/221 [00:05<01:11,  2.88it/s][A
  7%|▋         | 15/221 [00:05<01:06,  3.11it/s][A
  7%|▋         | 16/221 [00:06<01:21,  2.53it/s][A
  8%|▊         | 17/221 [00:07<01:57,  1.74it/s][A
  8%|▊         | 18/221 [00:07<01:43,  1.95it/s][A
  9%|▊         | 19/221 [00:07<01:34,  2.14it/s][A
  9%|▉         | 20/221 [00:07<01:16,  2.62it/s][A
 10%|▉         | 21/221 [00:08<01:07,  2.97it/s][A
 10%|▉         | 22/221 [00:08<01:12,  2.74it/s][A
 10%|█         | 23/221 [00:08<00:59,  3.34it/s][A
 11%|█         | 24/221 [00:08<00:54,  3.59it/s][A
 11%|█▏        | 25/221 [00:09<00:57,  3.44it/s][A
 12%|█▏        | 26/221 [00:09<01:03,  3.05it/s][A
 12%|█▏        | 27/221 [00:09<00:59,  3.25it/s][A
 13%|█▎        | 28/221 [00:10<01:18,  2.44it/s][A
 13%|█▎        | 29/221 [00:10<01:09,  2.75it/s][A
 14%|█▎        | 30/221 [00:11<01:06,  2.88it/s][A
 14%|█▍        | 31/221 [00:11<01:04,  2.96it/s][A
 14%|█▍        | 32/221 [00:11<00:50,  3.73it/s][A
 15%|█▍        | 33/221 [00:11<00:52,  3.57it/s][A
 15%|█▌        | 34/221 [00:12<00:50,  3.72it/s][A
 16%|█▌        | 35/221 [00:12<00:57,  3.26it/s][A
 16%|█▋        | 36/221 [00:13<01:06,  2.77it/s][A
 17%|█▋        | 37/221 [00:13<01:04,  2.84it/s][A
 17%|█▋        | 38/221 [00:13<01:15,  2.42it/s][A
 18%|█▊        | 39/221 [00:14<01:00,  2.99it/s][A
 18%|█▊        | 40/221 [00:14<01:02,  2.90it/s][A
 19%|█▊        | 41/221 [00:14<00:55,  3.23it/s][A
 19%|█▉        | 42/221 [00:15<01:05,  2.72it/s][A
 19%|█▉        | 43/221 [00:15<01:10,  2.51it/s][A
 20%|█▉        | 44/221 [00:15<01:06,  2.66it/s][A
 20%|██        | 45/221 [00:16<01:14,  2.35it/s][A
 21%|██        | 46/221 [00:16<01:11,  2.46it/s][A
 21%|██▏       | 47/221 [00:17<01:12,  2.39it/s][A
 22%|██▏       | 48/221 [00:17<00:59,  2.90it/s][A
 22%|██▏       | 49/221 [00:17<00:54,  3.14it/s][A
 23%|██▎       | 50/221 [00:18<00:53,  3.19it/s][A
 23%|██▎       | 51/221 [00:18<00:50,  3.35it/s][A
 24%|██▎       | 52/221 [00:18<00:47,  3.56it/s][A
 24%|██▍       | 53/221 [00:18<00:46,  3.64it/s][A
 24%|██▍       | 54/221 [00:19<01:22,  2.03it/s][A
 25%|██▍       | 55/221 [00:20<01:20,  2.07it/s][A[h264 @ 0x55d5bd687500] mmco: unref short failure
[h264 @ 0x55d5bd687500] mmco: unref short failure

 25%|██▌       | 56/221 [00:20<01:04,  2.55it/s][A
 26%|██▌       | 57/221 [00:20<00:59,  2.76it/s][A
 26%|██▌       | 58/221 [00:20<00:53,  3.04it/s][A
 27%|██▋       | 59/221 [00:21<00:49,  3.27it/s][A
 27%|██▋       | 60/221 [00:21<01:02,  2.56it/s][A
 28%|██▊       | 61/221 [00:22<00:55,  2.87it/s][A
 28%|██▊       | 62/221 [00:22<00:54,  2.94it/s][A
 29%|██▊       | 63/221 [00:22<00:51,  3.09it/s][A
 29%|██▉       | 64/221 [00:23<00:57,  2.73it/s][A
 29%|██▉       | 65/221 [00:23<00:49,  3.17it/s][A
 30%|██▉       | 66/221 [00:23<01:02,  2.48it/s][A
 30%|███       | 67/221 [00:24<01:02,  2.47it/s][A
 31%|███       | 68/221 [00:24<00:49,  3.10it/s][A
 31%|███       | 69/221 [00:25<01:23,  1.81it/s][A
 32%|███▏      | 70/221 [00:25<01:09,  2.17it/s][A
 32%|███▏      | 71/221 [00:26<01:00,  2.49it/s][A[h264 @ 0x55a82da0ec40] mmco: unref short failure

 33%|███▎      | 72/221 [00:26<01:04,  2.32it/s][A
 33%|███▎      | 73/221 [00:27<01:08,  2.17it/s][A[h264 @ 0x55a8386f2780] mmco: unref short failure
[h264 @ 0x55a8386f2780] mmco: unref short failure

 33%|███▎      | 74/221 [00:27<00:52,  2.80it/s][A
 34%|███▍      | 75/221 [00:27<00:52,  2.77it/s][A
 34%|███▍      | 76/221 [00:27<00:49,  2.91it/s][A
 35%|███▍      | 77/221 [00:28<01:00,  2.39it/s][A
 35%|███▌      | 78/221 [00:28<00:49,  2.91it/s][A
 36%|███▌      | 79/221 [00:29<00:54,  2.62it/s][A
 36%|███▌      | 80/221 [00:29<00:47,  2.95it/s][A
 37%|███▋      | 81/221 [00:29<00:45,  3.09it/s][A
 37%|███▋      | 82/221 [00:30<00:51,  2.69it/s][A
 38%|███▊      | 83/221 [00:30<01:03,  2.18it/s][A
 38%|███▊      | 84/221 [00:31<01:13,  1.85it/s][A
 38%|███▊      | 85/221 [00:31<00:56,  2.42it/s][A
 39%|███▉      | 86/221 [00:31<00:48,  2.77it/s][A[h264 @ 0x56439bdc7800] mmco: unref short failure

 39%|███▉      | 87/221 [00:32<01:17,  1.74it/s][A
 40%|███▉      | 88/221 [00:33<01:19,  1.66it/s][A
 40%|████      | 89/221 [00:33<01:06,  1.98it/s][A
 41%|████      | 90/221 [00:34<01:05,  2.01it/s][A
 41%|████      | 91/221 [00:34<00:55,  2.35it/s][A
 42%|████▏     | 92/221 [00:34<00:50,  2.57it/s][A
 42%|████▏     | 93/221 [00:35<00:56,  2.25it/s][A
 43%|████▎     | 94/221 [00:35<00:52,  2.42it/s][A
 43%|████▎     | 95/221 [00:36<00:52,  2.41it/s][A
 43%|████▎     | 96/221 [00:37<01:06,  1.89it/s][A
 44%|████▍     | 97/221 [00:37<00:54,  2.26it/s][A
 44%|████▍     | 98/221 [00:37<01:02,  1.97it/s][A[h264 @ 0x55edfd36eb00] mmco: unref short failure
[h264 @ 0x55edfd36eb00] mmco: unref short failure

 45%|████▍     | 99/221 [00:38<00:52,  2.32it/s][A
 45%|████▌     | 100/221 [00:38<00:46,  2.63it/s][A
 46%|████▌     | 101/221 [00:38<00:38,  3.08it/s][A
 46%|████▌     | 102/221 [00:39<01:03,  1.89it/s][A
 47%|████▋     | 103/221 [00:39<00:47,  2.46it/s][A
 47%|████▋     | 104/221 [00:40<00:40,  2.86it/s][A
 48%|████▊     | 105/221 [00:40<00:39,  2.91it/s][A
 48%|████▊     | 106/221 [00:41<00:54,  2.11it/s][A
 48%|████▊     | 107/221 [00:41<00:47,  2.39it/s][A
 49%|████▉     | 108/221 [00:41<00:43,  2.60it/s][A
 49%|████▉     | 109/221 [00:41<00:35,  3.16it/s][A
 50%|████▉     | 110/221 [00:42<00:38,  2.88it/s][A
 50%|█████     | 111/221 [00:42<00:41,  2.63it/s][A
 51%|█████     | 112/221 [00:43<00:38,  2.86it/s][A
 51%|█████     | 113/221 [00:43<00:43,  2.48it/s][A
 52%|█████▏    | 114/221 [00:43<00:34,  3.12it/s][A
 52%|█████▏    | 115/221 [00:43<00:29,  3.61it/s][A[h264 @ 0x55d5c174e9c0] mmco: unref short failure

 52%|█████▏    | 116/221 [00:44<00:34,  3.03it/s][A[h264 @ 0x55edf5156980] mmco: unref short failure
[h264 @ 0x55edf5156980] mmco: unref short failure

 53%|█████▎    | 117/221 [00:44<00:36,  2.83it/s][A
 53%|█████▎    | 118/221 [00:44<00:32,  3.14it/s][A
 54%|█████▍    | 119/221 [00:45<00:39,  2.61it/s][A
 54%|█████▍    | 120/221 [00:45<00:32,  3.09it/s][A
 55%|█████▍    | 121/221 [00:45<00:26,  3.80it/s][A
 55%|█████▌    | 122/221 [00:46<00:27,  3.61it/s][A
 56%|█████▌    | 123/221 [00:46<00:24,  3.93it/s][A
 56%|█████▌    | 124/221 [00:46<00:29,  3.33it/s][A
 57%|█████▋    | 125/221 [00:47<00:33,  2.85it/s][A
 57%|█████▋    | 126/221 [00:47<00:29,  3.27it/s][A
 57%|█████▋    | 127/221 [00:48<00:39,  2.40it/s][A
 58%|█████▊    | 128/221 [00:48<00:36,  2.55it/s][A
 58%|█████▊    | 129/221 [00:48<00:28,  3.28it/s][A
 59%|█████▉    | 130/221 [00:48<00:25,  3.55it/s][A
 59%|█████▉    | 131/221 [00:48<00:21,  4.16it/s][A[h264 @ 0x55d5b6d68c00] mmco: unref short failure
[h264 @ 0x55d5b6d68c00] mmco: unref short failure
[h264 @ 0x55d5b6d68c00] mmco: unref short failure
[h264 @ 0x55d5b6d68c00] mmco: unref short failure
[h264 @ 0x55d5b6d68c00] mmco: unref short failure
[h264 @ 0x55d5b6d68c00] mmco: unref short failure

 60%|█████▉    | 132/221 [00:50<00:56,  1.57it/s][A
 60%|██████    | 133/221 [00:50<00:51,  1.72it/s][A
 61%|██████    | 134/221 [00:51<00:56,  1.54it/s][A
 61%|██████    | 135/221 [00:52<00:49,  1.73it/s][A
 62%|██████▏   | 136/221 [00:52<00:44,  1.92it/s][A
 62%|██████▏   | 137/221 [00:52<00:38,  2.20it/s][A
 62%|██████▏   | 138/221 [00:53<00:36,  2.26it/s][A
 63%|██████▎   | 139/221 [00:53<00:43,  1.87it/s][A
 63%|██████▎   | 140/221 [00:54<00:38,  2.08it/s][A
 64%|██████▍   | 141/221 [00:54<00:32,  2.50it/s][A
 64%|██████▍   | 142/221 [00:54<00:28,  2.78it/s][A
 65%|██████▍   | 143/221 [00:55<00:34,  2.26it/s][A
 65%|██████▌   | 144/221 [00:55<00:35,  2.16it/s][A
 66%|██████▌   | 146/221 [00:56<00:21,  3.46it/s][A
 67%|██████▋   | 147/221 [00:56<00:22,  3.30it/s][A
 67%|██████▋   | 148/221 [00:56<00:25,  2.83it/s][A[h264 @ 0x55edf0b6c780] mmco: unref short failure

 67%|██████▋   | 149/221 [00:57<00:28,  2.54it/s][A
 68%|██████▊   | 150/221 [00:57<00:25,  2.84it/s][A
 68%|██████▊   | 151/221 [00:58<00:28,  2.44it/s][A
 69%|██████▉   | 152/221 [00:59<00:44,  1.56it/s][A
 69%|██████▉   | 153/221 [00:59<00:33,  2.01it/s][A
 70%|██████▉   | 154/221 [00:59<00:28,  2.33it/s][A
 70%|███████   | 155/221 [01:00<00:26,  2.48it/s][A
 71%|███████   | 156/221 [01:00<00:28,  2.24it/s][A[h264 @ 0x55d5c3427100] mmco: unref short failure

 71%|███████   | 157/221 [01:01<00:28,  2.24it/s][A
 71%|███████▏  | 158/221 [01:01<00:24,  2.54it/s][A
 72%|███████▏  | 159/221 [01:01<00:20,  2.98it/s][A
 72%|███████▏  | 160/221 [01:01<00:18,  3.24it/s][A
 73%|███████▎  | 161/221 [01:02<00:17,  3.47it/s][A
 73%|███████▎  | 162/221 [01:02<00:14,  4.20it/s][A
 74%|███████▍  | 163/221 [01:02<00:14,  4.03it/s][A
 74%|███████▍  | 164/221 [01:02<00:12,  4.61it/s][A
 75%|███████▍  | 165/221 [01:02<00:13,  4.27it/s][A
 75%|███████▌  | 166/221 [01:03<00:14,  3.92it/s][A
 76%|███████▌  | 167/221 [01:03<00:11,  4.57it/s][A
 76%|███████▌  | 168/221 [01:03<00:14,  3.76it/s][A
 76%|███████▋  | 169/221 [01:03<00:11,  4.47it/s][A
 77%|███████▋  | 170/221 [01:04<00:13,  3.92it/s][A
 77%|███████▋  | 171/221 [01:04<00:15,  3.31it/s][A
 78%|███████▊  | 172/221 [01:04<00:13,  3.61it/s][A
 78%|███████▊  | 173/221 [01:05<00:17,  2.78it/s][A
 79%|███████▊  | 174/221 [01:05<00:17,  2.71it/s][A
 79%|███████▉  | 175/221 [01:06<00:16,  2.86it/s][A
 80%|███████▉  | 176/221 [01:06<00:12,  3.58it/s][A
 80%|████████  | 177/221 [01:06<00:11,  3.93it/s][A
 81%|████████  | 178/221 [01:07<00:15,  2.83it/s][A
 81%|████████  | 179/221 [01:07<00:15,  2.73it/s][A
 81%|████████▏ | 180/221 [01:07<00:12,  3.33it/s][A
 82%|████████▏ | 181/221 [01:07<00:10,  3.99it/s][A
 82%|████████▏ | 182/221 [01:08<00:10,  3.59it/s][A
 83%|████████▎ | 183/221 [01:08<00:10,  3.65it/s][A
 83%|████████▎ | 184/221 [01:08<00:10,  3.68it/s][A
 84%|████████▎ | 185/221 [01:08<00:07,  4.53it/s][A
 84%|████████▍ | 186/221 [01:09<00:10,  3.36it/s][A
 85%|████████▍ | 187/221 [01:09<00:10,  3.26it/s][A
 85%|████████▌ | 188/221 [01:09<00:10,  3.22it/s][A
 86%|████████▌ | 189/221 [01:10<00:10,  3.19it/s][A
 86%|████████▌ | 190/221 [01:10<00:10,  2.86it/s][A
 86%|████████▋ | 191/221 [01:10<00:08,  3.47it/s][A
 87%|████████▋ | 192/221 [01:10<00:08,  3.60it/s][A
 88%|████████▊ | 194/221 [01:11<00:08,  3.04it/s][A
 88%|████████▊ | 195/221 [01:11<00:07,  3.31it/s][A
 89%|████████▊ | 196/221 [01:12<00:08,  3.07it/s][A
 89%|████████▉ | 197/221 [01:12<00:08,  2.98it/s][A
 90%|████████▉ | 198/221 [01:13<00:08,  2.73it/s][A
 90%|█████████ | 199/221 [01:13<00:07,  3.00it/s][A
 90%|█████████ | 200/221 [01:13<00:06,  3.14it/s][A
 91%|█████████ | 201/221 [01:13<00:05,  3.54it/s][A
 91%|█████████▏| 202/221 [01:14<00:05,  3.39it/s][A
 92%|█████████▏| 203/221 [01:14<00:05,  3.40it/s][A
 92%|█████████▏| 204/221 [01:14<00:05,  3.39it/s][A
 93%|█████████▎| 205/221 [01:14<00:03,  4.22it/s][A
 93%|█████████▎| 206/221 [01:15<00:04,  3.07it/s][A
 94%|█████████▍| 208/221 [01:15<00:03,  3.75it/s][A
 95%|█████████▍| 209/221 [01:16<00:03,  3.82it/s][A
 95%|█████████▌| 211/221 [01:16<00:02,  4.03it/s][A
 96%|█████████▌| 212/221 [01:16<00:02,  3.86it/s][A
 96%|█████████▋| 213/221 [01:17<00:02,  3.99it/s][A
 97%|█████████▋| 214/221 [01:18<00:03,  2.21it/s][A
 97%|█████████▋| 215/221 [01:18<00:02,  2.50it/s][A
 98%|█████████▊| 216/221 [01:18<00:02,  2.49it/s][A
 98%|█████████▊| 217/221 [01:19<00:01,  2.38it/s][A
 99%|█████████▊| 218/221 [01:19<00:01,  2.56it/s][A
 99%|█████████▉| 219/221 [01:19<00:00,  2.78it/s][A
100%|█████████▉| 220/221 [01:20<00:00,  3.07it/s][A
100%|██████████| 221/221 [01:20<00:00,  3.45it/s][A100%|██████████| 221/221 [01:20<00:00,  2.75it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:06,  3.30it/s][A
  1%|          | 2/221 [00:00<01:06,  3.30it/s][A
  1%|▏         | 3/221 [00:00<01:05,  3.31it/s][A
  2%|▏         | 4/221 [00:01<01:05,  3.31it/s][A
  2%|▏         | 5/221 [00:01<01:05,  3.31it/s][A
  3%|▎         | 6/221 [00:01<01:05,  3.31it/s][A
  3%|▎         | 7/221 [00:02<01:04,  3.31it/s][A
  4%|▎         | 8/221 [00:02<01:04,  3.31it/s][A
  4%|▍         | 9/221 [00:02<01:04,  3.31it/s][A
  5%|▍         | 10/221 [00:03<01:03,  3.31it/s][A
  5%|▍         | 11/221 [00:03<01:03,  3.31it/s][A
  5%|▌         | 12/221 [00:03<01:03,  3.31it/s][A
  6%|▌         | 13/221 [00:03<01:02,  3.31it/s][A
  6%|▋         | 14/221 [00:04<01:02,  3.31it/s][A
  7%|▋         | 15/221 [00:04<01:02,  3.31it/s][A
  7%|▋         | 16/221 [00:04<01:02,  3.30it/s][A
  8%|▊         | 17/221 [00:05<01:01,  3.31it/s][A
  8%|▊         | 18/221 [00:05<01:01,  3.30it/s][A
  9%|▊         | 19/221 [00:05<01:01,  3.31it/s][A
  9%|▉         | 20/221 [00:06<01:00,  3.31it/s][A
 10%|▉         | 21/221 [00:06<01:00,  3.31it/s][A
 10%|▉         | 22/221 [00:06<01:00,  3.31it/s][A
 10%|█         | 23/221 [00:06<00:59,  3.31it/s][A
 11%|█         | 24/221 [00:07<00:59,  3.31it/s][A
 11%|█▏        | 25/221 [00:07<00:59,  3.31it/s][A
 12%|█▏        | 26/221 [00:07<00:58,  3.31it/s][A
 12%|█▏        | 27/221 [00:08<00:58,  3.31it/s][A
 13%|█▎        | 28/221 [00:08<00:58,  3.31it/s][A
 13%|█▎        | 29/221 [00:08<00:58,  3.31it/s][A
 14%|█▎        | 30/221 [00:09<00:57,  3.31it/s][A
 14%|█▍        | 31/221 [00:09<00:57,  3.31it/s][A
 14%|█▍        | 32/221 [00:09<00:57,  3.31it/s][A
 15%|█▍        | 33/221 [00:09<00:56,  3.31it/s][A
 15%|█▌        | 34/221 [00:10<00:56,  3.31it/s][A
 16%|█▌        | 35/221 [00:10<00:56,  3.31it/s][A
 16%|█▋        | 36/221 [00:10<00:55,  3.31it/s][A
 17%|█▋        | 37/221 [00:11<00:55,  3.31it/s][A
 17%|█▋        | 38/221 [00:11<00:55,  3.31it/s][A
 18%|█▊        | 39/221 [00:11<00:55,  3.31it/s][A
 18%|█▊        | 40/221 [00:12<00:54,  3.31it/s][A
 19%|█▊        | 41/221 [00:12<00:54,  3.31it/s][A
 19%|█▉        | 42/221 [00:12<00:54,  3.31it/s][A
 19%|█▉        | 43/221 [00:13<00:53,  3.31it/s][A
 20%|█▉        | 44/221 [00:13<00:53,  3.31it/s][A
 20%|██        | 45/221 [00:13<00:53,  3.31it/s][A
 21%|██        | 46/221 [00:13<00:52,  3.31it/s][A
 21%|██▏       | 47/221 [00:14<00:52,  3.30it/s][A
 22%|██▏       | 48/221 [00:14<00:52,  3.31it/s][A
 22%|██▏       | 49/221 [00:14<00:52,  3.30it/s][A
 23%|██▎       | 50/221 [00:15<00:51,  3.30it/s][A
 23%|██▎       | 51/221 [00:15<00:51,  3.31it/s][A
 24%|██▎       | 52/221 [00:15<00:51,  3.31it/s][A
 24%|██▍       | 53/221 [00:16<00:50,  3.31it/s][A
 24%|██▍       | 54/221 [00:16<00:50,  3.31it/s][A
 25%|██▍       | 55/221 [00:16<00:50,  3.31it/s][A
 25%|██▌       | 56/221 [00:16<00:49,  3.31it/s][A
 26%|██▌       | 57/221 [00:17<00:49,  3.31it/s][A
 26%|██▌       | 58/221 [00:17<00:49,  3.31it/s][A
 27%|██▋       | 59/221 [00:17<00:48,  3.31it/s][A
 27%|██▋       | 60/221 [00:18<00:48,  3.31it/s][A
 28%|██▊       | 61/221 [00:18<00:48,  3.31it/s][A
 28%|██▊       | 62/221 [00:18<00:48,  3.31it/s][A
 29%|██▊       | 63/221 [00:19<00:47,  3.31it/s][A
 29%|██▉       | 64/221 [00:19<00:47,  3.30it/s][A
 29%|██▉       | 65/221 [00:19<00:47,  3.30it/s][A
 30%|██▉       | 66/221 [00:19<00:46,  3.31it/s][A
 30%|███       | 67/221 [00:20<00:46,  3.31it/s][A
 31%|███       | 68/221 [00:20<00:46,  3.30it/s][A
 31%|███       | 69/221 [00:20<00:45,  3.30it/s][A
 32%|███▏      | 70/221 [00:21<00:45,  3.30it/s][A
 32%|███▏      | 71/221 [00:21<00:45,  3.30it/s][A
 33%|███▎      | 72/221 [00:21<00:45,  3.31it/s][A
 33%|███▎      | 73/221 [00:22<00:44,  3.30it/s][A
 33%|███▎      | 74/221 [00:22<00:44,  3.30it/s][A
 34%|███▍      | 75/221 [00:22<00:44,  3.30it/s][A
 34%|███▍      | 76/221 [00:22<00:43,  3.30it/s][A
 35%|███▍      | 77/221 [00:23<00:43,  3.31it/s][A
 35%|███▌      | 78/221 [00:23<00:43,  3.30it/s][A
 36%|███▌      | 79/221 [00:23<00:42,  3.30it/s][A
 36%|███▌      | 80/221 [00:24<00:42,  3.30it/s][A
 37%|███▋      | 81/221 [00:24<00:42,  3.30it/s][A
 37%|███▋      | 82/221 [00:24<00:42,  3.30it/s][A
 38%|███▊      | 83/221 [00:25<00:41,  3.30it/s][A
 38%|███▊      | 84/221 [00:25<00:41,  3.30it/s][A
 38%|███▊      | 85/221 [00:25<00:41,  3.30it/s][A
 39%|███▉      | 86/221 [00:26<00:40,  3.30it/s][A
 39%|███▉      | 87/221 [00:26<00:40,  3.30it/s][A
 40%|███▉      | 88/221 [00:26<00:40,  3.30it/s][A
 40%|████      | 89/221 [00:26<00:39,  3.30it/s][A
 41%|████      | 90/221 [00:27<00:39,  3.30it/s][A
 41%|████      | 91/221 [00:27<00:39,  3.30it/s][A
 42%|████▏     | 92/221 [00:27<00:39,  3.30it/s][A
 42%|████▏     | 93/221 [00:28<00:38,  3.30it/s][A
 43%|████▎     | 94/221 [00:28<00:38,  3.30it/s][A
 43%|████▎     | 95/221 [00:28<00:38,  3.30it/s][A
 43%|████▎     | 96/221 [00:29<00:37,  3.30it/s][A
 44%|████▍     | 97/221 [00:29<00:37,  3.31it/s][A
 44%|████▍     | 98/221 [00:29<00:37,  3.31it/s][A
 45%|████▍     | 99/221 [00:29<00:36,  3.31it/s][A
 45%|████▌     | 100/221 [00:30<00:36,  3.31it/s][A
 46%|████▌     | 101/221 [00:30<00:36,  3.31it/s][A
 46%|████▌     | 102/221 [00:30<00:35,  3.31it/s][A
 47%|████▋     | 103/221 [00:31<00:35,  3.31it/s][A
 47%|████▋     | 104/221 [00:31<00:35,  3.31it/s][A
 48%|████▊     | 105/221 [00:31<00:35,  3.31it/s][A
 48%|████▊     | 106/221 [00:32<00:34,  3.30it/s][A
 48%|████▊     | 107/221 [00:32<00:34,  3.30it/s][A
 49%|████▉     | 108/221 [00:32<00:34,  3.30it/s][A
 49%|████▉     | 109/221 [00:32<00:33,  3.30it/s][A
 50%|████▉     | 110/221 [00:33<00:33,  3.30it/s][A
 50%|█████     | 111/221 [00:33<00:33,  3.30it/s][A
 51%|█████     | 112/221 [00:33<00:32,  3.30it/s][A
 51%|█████     | 113/221 [00:34<00:32,  3.31it/s][A
 52%|█████▏    | 114/221 [00:34<00:32,  3.31it/s][A
 52%|█████▏    | 115/221 [00:34<00:32,  3.31it/s][A
 52%|█████▏    | 116/221 [00:35<00:31,  3.31it/s][A
 53%|█████▎    | 117/221 [00:35<00:31,  3.31it/s][A
 53%|█████▎    | 118/221 [00:35<00:31,  3.31it/s][A
 54%|█████▍    | 119/221 [00:36<00:30,  3.30it/s][A
 54%|█████▍    | 120/221 [00:36<00:30,  3.30it/s][A
 55%|█████▍    | 121/221 [00:36<00:30,  3.30it/s][A
 55%|█████▌    | 122/221 [00:36<00:29,  3.30it/s][A
 56%|█████▌    | 123/221 [00:37<00:29,  3.30it/s][A
 56%|█████▌    | 124/221 [00:37<00:29,  3.30it/s][A
 57%|█████▋    | 125/221 [00:37<00:29,  3.30it/s][A
 57%|█████▋    | 126/221 [00:38<00:28,  3.31it/s][A
 57%|█████▋    | 127/221 [00:38<00:28,  3.31it/s][A
 58%|█████▊    | 128/221 [00:38<00:28,  3.31it/s][A
 58%|█████▊    | 129/221 [00:39<00:27,  3.30it/s][A
 59%|█████▉    | 130/221 [00:39<00:27,  3.30it/s][A
 59%|█████▉    | 131/221 [00:39<00:27,  3.31it/s][A
 60%|█████▉    | 132/221 [00:39<00:26,  3.31it/s][A
 60%|██████    | 133/221 [00:40<00:26,  3.31it/s][A
 61%|██████    | 134/221 [00:40<00:26,  3.31it/s][A
 61%|██████    | 135/221 [00:40<00:26,  3.31it/s][A
 62%|██████▏   | 136/221 [00:41<00:25,  3.30it/s][A
 62%|██████▏   | 137/221 [00:41<00:25,  3.30it/s][A
 62%|██████▏   | 138/221 [00:41<00:25,  3.30it/s][A
 63%|██████▎   | 139/221 [00:42<00:24,  3.30it/s][A
 63%|██████▎   | 140/221 [00:42<00:24,  3.30it/s][A
 64%|██████▍   | 141/221 [00:42<00:24,  3.30it/s][A
 64%|██████▍   | 142/221 [00:42<00:23,  3.30it/s][A
 65%|██████▍   | 143/221 [00:43<00:23,  3.30it/s][A
 65%|██████▌   | 144/221 [00:43<00:23,  3.30it/s][A
 66%|██████▌   | 145/221 [00:43<00:23,  3.30it/s][A
 66%|██████▌   | 146/221 [00:44<00:22,  3.30it/s][A
 67%|██████▋   | 147/221 [00:44<00:22,  3.30it/s][A
 67%|██████▋   | 148/221 [00:44<00:22,  3.30it/s][A
 67%|██████▋   | 149/221 [00:45<00:21,  3.30it/s][A
 68%|██████▊   | 150/221 [00:45<00:21,  3.30it/s][A
 68%|██████▊   | 151/221 [00:45<00:21,  3.30it/s][A
 69%|██████▉   | 152/221 [00:45<00:20,  3.30it/s][A
 69%|██████▉   | 153/221 [00:46<00:20,  3.30it/s][A
 70%|██████▉   | 154/221 [00:46<00:20,  3.30it/s][A
 70%|███████   | 155/221 [00:46<00:19,  3.31it/s][A
 71%|███████   | 156/221 [00:47<00:19,  3.30it/s][A
 71%|███████   | 157/221 [00:47<00:19,  3.30it/s][A
 71%|███████▏  | 158/221 [00:47<00:19,  3.30it/s][A
 72%|███████▏  | 159/221 [00:48<00:18,  3.30it/s][A
 72%|███████▏  | 160/221 [00:48<00:18,  3.30it/s][A
 73%|███████▎  | 161/221 [00:48<00:18,  3.30it/s][A
 73%|███████▎  | 162/221 [00:49<00:17,  3.30it/s][A
 74%|███████▍  | 163/221 [00:49<00:17,  3.30it/s][A
 74%|███████▍  | 164/221 [00:49<00:17,  3.30it/s][A
 75%|███████▍  | 165/221 [00:49<00:16,  3.30it/s][A
 75%|███████▌  | 166/221 [00:50<00:16,  3.30it/s][A
 76%|███████▌  | 167/221 [00:50<00:16,  3.30it/s][A
 76%|███████▌  | 168/221 [00:50<00:16,  3.30it/s][A
 76%|███████▋  | 169/221 [00:51<00:15,  3.30it/s][A
 77%|███████▋  | 170/221 [00:51<00:15,  3.30it/s][A
 77%|███████▋  | 171/221 [00:51<00:15,  3.30it/s][A
 78%|███████▊  | 172/221 [00:52<00:14,  3.30it/s][A
 78%|███████▊  | 173/221 [00:52<00:14,  3.30it/s][A
 79%|███████▊  | 174/221 [00:52<00:14,  3.30it/s][A
 79%|███████▉  | 175/221 [00:52<00:13,  3.30it/s][A
 80%|███████▉  | 176/221 [00:53<00:13,  3.30it/s][A
 80%|████████  | 177/221 [00:53<00:13,  3.30it/s][A
 81%|████████  | 178/221 [00:53<00:13,  3.30it/s][A
 81%|████████  | 179/221 [00:54<00:12,  3.30it/s][A
 81%|████████▏ | 180/221 [00:54<00:12,  3.30it/s][A
 82%|████████▏ | 181/221 [00:54<00:12,  3.30it/s][A
 82%|████████▏ | 182/221 [00:55<00:11,  3.30it/s][A
 83%|████████▎ | 183/221 [00:55<00:11,  3.30it/s][A
 83%|████████▎ | 184/221 [00:55<00:11,  3.30it/s][A
 84%|████████▎ | 185/221 [00:55<00:10,  3.30it/s][A
 84%|████████▍ | 186/221 [00:56<00:10,  3.30it/s][A
 85%|████████▍ | 187/221 [00:56<00:10,  3.30it/s][A
 85%|████████▌ | 188/221 [00:56<00:09,  3.30it/s][A
 86%|████████▌ | 189/221 [00:57<00:09,  3.30it/s][A
 86%|████████▌ | 190/221 [00:57<00:09,  3.30it/s][A
 86%|████████▋ | 191/221 [00:57<00:09,  3.30it/s][A
 87%|████████▋ | 192/221 [00:58<00:08,  3.30it/s][A
 87%|████████▋ | 193/221 [00:58<00:08,  3.30it/s][A
 88%|████████▊ | 194/221 [00:58<00:08,  3.30it/s][A
 88%|████████▊ | 195/221 [00:59<00:07,  3.30it/s][A
 89%|████████▊ | 196/221 [00:59<00:07,  3.30it/s][A
 89%|████████▉ | 197/221 [00:59<00:07,  3.30it/s][A
 90%|████████▉ | 198/221 [00:59<00:06,  3.30it/s][A
 90%|█████████ | 199/221 [01:00<00:06,  3.30it/s][A
 90%|█████████ | 200/221 [01:00<00:06,  3.31it/s][A
 91%|█████████ | 201/221 [01:00<00:06,  3.31it/s][A
 91%|█████████▏| 202/221 [01:01<00:05,  3.31it/s][A
 92%|█████████▏| 203/221 [01:01<00:05,  3.31it/s][A
 92%|█████████▏| 204/221 [01:01<00:05,  3.31it/s][A
 93%|█████████▎| 205/221 [01:02<00:04,  3.30it/s][A
 93%|█████████▎| 206/221 [01:02<00:04,  3.30it/s][A
 94%|█████████▎| 207/221 [01:02<00:04,  3.31it/s][A
 94%|█████████▍| 208/221 [01:02<00:03,  3.30it/s][A
 95%|█████████▍| 209/221 [01:03<00:03,  3.30it/s][A
 95%|█████████▌| 210/221 [01:03<00:03,  3.30it/s][A
 95%|█████████▌| 211/221 [01:03<00:03,  3.30it/s][A
 96%|█████████▌| 212/221 [01:04<00:02,  3.30it/s][A
 96%|█████████▋| 213/221 [01:04<00:02,  3.30it/s][A
 97%|█████████▋| 214/221 [01:04<00:02,  3.30it/s][A
 97%|█████████▋| 215/221 [01:05<00:01,  3.30it/s][A
 98%|█████████▊| 216/221 [01:05<00:01,  3.30it/s][A
 98%|█████████▊| 217/221 [01:05<00:01,  3.30it/s][A
 99%|█████████▊| 218/221 [01:05<00:00,  3.30it/s][A
 99%|█████████▉| 219/221 [01:06<00:00,  3.30it/s][A
100%|█████████▉| 220/221 [01:06<00:00,  3.30it/s][A
100%|██████████| 221/221 [01:06<00:00,  3.30it/s][A100%|██████████| 221/221 [01:06<00:00,  3.30it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:40,  5.39it/s][A
  1%|          | 2/221 [00:00<01:14,  2.92it/s][A
  1%|▏         | 3/221 [00:00<01:13,  2.96it/s][A
  2%|▏         | 4/221 [00:01<01:03,  3.40it/s][A
  2%|▏         | 5/221 [00:01<00:56,  3.84it/s][A
  3%|▎         | 7/221 [00:01<00:49,  4.34it/s][A
  4%|▎         | 8/221 [00:02<00:54,  3.90it/s][A
  4%|▍         | 9/221 [00:02<01:00,  3.49it/s][A
  5%|▍         | 10/221 [00:03<01:34,  2.24it/s][A
  5%|▍         | 11/221 [00:03<01:19,  2.66it/s][A
  5%|▌         | 12/221 [00:03<01:08,  3.04it/s][A
  6%|▌         | 13/221 [00:04<01:24,  2.47it/s][A
  6%|▋         | 14/221 [00:04<01:10,  2.94it/s][A
  7%|▋         | 15/221 [00:04<01:00,  3.43it/s][A
  7%|▋         | 16/221 [00:05<01:08,  2.98it/s][A
  8%|▊         | 17/221 [00:05<01:32,  2.20it/s][A
  8%|▊         | 18/221 [00:06<01:27,  2.32it/s][A
  9%|▊         | 19/221 [00:06<01:35,  2.12it/s][A
 10%|▉         | 21/221 [00:07<01:06,  3.01it/s][A
 10%|▉         | 22/221 [00:07<01:02,  3.21it/s][A
 10%|█         | 23/221 [00:07<00:52,  3.76it/s][A
 11%|█         | 24/221 [00:07<00:48,  4.02it/s][A
 11%|█▏        | 25/221 [00:08<00:56,  3.45it/s][A
 12%|█▏        | 26/221 [00:08<00:52,  3.72it/s][A
 12%|█▏        | 27/221 [00:08<00:49,  3.90it/s][A
 13%|█▎        | 28/221 [00:09<01:28,  2.17it/s][A
 13%|█▎        | 29/221 [00:09<01:16,  2.50it/s][A
 14%|█▎        | 30/221 [00:10<01:12,  2.65it/s][A
 14%|█▍        | 31/221 [00:10<01:06,  2.87it/s][A
 14%|█▍        | 32/221 [00:10<00:54,  3.48it/s][A
 15%|█▍        | 33/221 [00:10<00:45,  4.12it/s][A
 15%|█▌        | 34/221 [00:10<00:38,  4.83it/s][A
 16%|█▌        | 35/221 [00:10<00:33,  5.49it/s][A
 16%|█▋        | 36/221 [00:11<00:41,  4.49it/s][A
 17%|█▋        | 37/221 [00:11<00:44,  4.11it/s][A
 17%|█▋        | 38/221 [00:12<00:57,  3.20it/s][A
 18%|█▊        | 39/221 [00:12<00:48,  3.77it/s][A
 18%|█▊        | 40/221 [00:12<00:50,  3.56it/s][A
 19%|█▊        | 41/221 [00:12<00:45,  3.92it/s][A
 19%|█▉        | 42/221 [00:13<00:59,  2.99it/s][A
 19%|█▉        | 43/221 [00:13<01:13,  2.44it/s][A
 20%|█▉        | 44/221 [00:14<01:02,  2.84it/s][A
 20%|██        | 45/221 [00:14<01:09,  2.52it/s][A
 21%|██        | 46/221 [00:14<01:04,  2.71it/s][A
 21%|██▏       | 47/221 [00:15<01:01,  2.83it/s][A
 22%|██▏       | 48/221 [00:15<00:49,  3.48it/s][A
 23%|██▎       | 50/221 [00:15<00:38,  4.42it/s][A
 23%|██▎       | 51/221 [00:15<00:35,  4.83it/s][A
 24%|██▎       | 52/221 [00:15<00:33,  5.03it/s][A
 24%|██▍       | 53/221 [00:16<00:36,  4.65it/s][A
 24%|██▍       | 54/221 [00:16<00:48,  3.45it/s][A
 25%|██▍       | 55/221 [00:16<00:41,  4.04it/s][A
 25%|██▌       | 56/221 [00:16<00:37,  4.35it/s][A
 26%|██▌       | 57/221 [00:17<00:33,  4.89it/s][A
 26%|██▌       | 58/221 [00:17<00:35,  4.65it/s][A
 27%|██▋       | 59/221 [00:17<00:37,  4.31it/s][A
 27%|██▋       | 60/221 [00:18<00:51,  3.10it/s][A
 28%|██▊       | 61/221 [00:18<00:47,  3.39it/s][A
 28%|██▊       | 62/221 [00:18<00:42,  3.73it/s][A
 29%|██▊       | 63/221 [00:18<00:45,  3.44it/s][A
 29%|██▉       | 64/221 [00:19<00:44,  3.51it/s][A
 29%|██▉       | 65/221 [00:19<00:50,  3.08it/s][A
 30%|██▉       | 66/221 [00:19<00:43,  3.54it/s][A
 30%|███       | 67/221 [00:20<00:45,  3.41it/s][A
 31%|███       | 68/221 [00:20<00:36,  4.18it/s][A
 32%|███▏      | 70/221 [00:20<00:29,  5.15it/s][A
 32%|███▏      | 71/221 [00:20<00:39,  3.82it/s][A
 33%|███▎      | 72/221 [00:21<00:45,  3.25it/s][A
 33%|███▎      | 73/221 [00:21<00:49,  3.02it/s][A
 33%|███▎      | 74/221 [00:21<00:41,  3.58it/s][A
 34%|███▍      | 75/221 [00:22<00:40,  3.61it/s][A
 34%|███▍      | 76/221 [00:22<00:36,  3.99it/s][A
 35%|███▍      | 77/221 [00:22<00:39,  3.62it/s][A
 35%|███▌      | 78/221 [00:23<00:41,  3.43it/s][A
 36%|███▌      | 79/221 [00:23<00:46,  3.03it/s][A
 36%|███▌      | 80/221 [00:23<00:44,  3.19it/s][A
 37%|███▋      | 81/221 [00:23<00:34,  4.00it/s][A
 37%|███▋      | 82/221 [00:24<00:36,  3.83it/s][A
 38%|███▊      | 83/221 [00:24<00:39,  3.48it/s][A
 38%|███▊      | 84/221 [00:24<00:43,  3.15it/s][A
 38%|███▊      | 85/221 [00:25<00:40,  3.32it/s][A
 39%|███▉      | 86/221 [00:25<00:37,  3.57it/s][A
 39%|███▉      | 87/221 [00:26<00:52,  2.57it/s][A
 40%|███▉      | 88/221 [00:26<00:50,  2.64it/s][A
 40%|████      | 89/221 [00:26<00:50,  2.61it/s][A
 41%|████      | 90/221 [00:27<00:48,  2.70it/s][A
 41%|████      | 91/221 [00:27<00:40,  3.20it/s][A
 42%|████▏     | 92/221 [00:27<00:38,  3.36it/s][A
 43%|████▎     | 94/221 [00:27<00:28,  4.46it/s][A
 43%|████▎     | 95/221 [00:28<00:30,  4.20it/s][A
 43%|████▎     | 96/221 [00:28<00:32,  3.82it/s][A
 44%|████▍     | 97/221 [00:28<00:27,  4.46it/s][A
 44%|████▍     | 98/221 [00:28<00:28,  4.34it/s][A
 45%|████▍     | 99/221 [00:29<00:28,  4.28it/s][A
 45%|████▌     | 100/221 [00:29<00:30,  4.00it/s][A
 46%|████▌     | 101/221 [00:29<00:34,  3.49it/s][A
 46%|████▌     | 102/221 [00:30<00:35,  3.36it/s][A
 47%|████▋     | 103/221 [00:30<00:31,  3.72it/s][A
 47%|████▋     | 104/221 [00:30<00:33,  3.49it/s][A
 48%|████▊     | 105/221 [00:30<00:31,  3.68it/s][A
 48%|████▊     | 106/221 [00:31<00:29,  3.88it/s][A
 48%|████▊     | 107/221 [00:31<00:29,  3.84it/s][A
 49%|████▉     | 108/221 [00:31<00:25,  4.49it/s][A
 49%|████▉     | 109/221 [00:31<00:31,  3.60it/s][A
 50%|████▉     | 110/221 [00:32<00:34,  3.20it/s][A
 50%|█████     | 111/221 [00:32<00:41,  2.65it/s][A
 51%|█████     | 112/221 [00:32<00:32,  3.37it/s][A
 51%|█████     | 113/221 [00:33<00:32,  3.37it/s][A
 52%|█████▏    | 115/221 [00:33<00:21,  4.82it/s][A
 52%|█████▏    | 116/221 [00:33<00:20,  5.06it/s][A
 53%|█████▎    | 117/221 [00:33<00:25,  4.10it/s][A
 53%|█████▎    | 118/221 [00:34<00:30,  3.40it/s][A
 54%|█████▍    | 119/221 [00:35<00:40,  2.49it/s][A
 54%|█████▍    | 120/221 [00:35<00:38,  2.65it/s][A
 55%|█████▍    | 121/221 [00:35<00:30,  3.25it/s][A
 55%|█████▌    | 122/221 [00:35<00:29,  3.36it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.48it/s][A
 56%|█████▌    | 124/221 [00:36<00:32,  3.01it/s][A
 57%|█████▋    | 125/221 [00:36<00:31,  3.03it/s][A
 57%|█████▋    | 126/221 [00:37<00:28,  3.34it/s][A
 57%|█████▋    | 127/221 [00:37<00:32,  2.85it/s][A
 58%|█████▊    | 128/221 [00:37<00:30,  3.08it/s][A
 58%|█████▊    | 129/221 [00:37<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:25,  3.51it/s][A
 59%|█████▉    | 131/221 [00:38<00:20,  4.31it/s][A
 60%|█████▉    | 132/221 [00:38<00:18,  4.69it/s][A
 60%|██████    | 133/221 [00:38<00:22,  3.94it/s][A
 61%|██████    | 134/221 [00:39<00:23,  3.63it/s][A
 61%|██████    | 135/221 [00:39<00:23,  3.70it/s][A
 62%|██████▏   | 136/221 [00:39<00:23,  3.64it/s][A
 62%|██████▏   | 137/221 [00:39<00:20,  4.00it/s][A
 62%|██████▏   | 138/221 [00:40<00:23,  3.56it/s][A
 63%|██████▎   | 139/221 [00:40<00:27,  3.01it/s][A
 63%|██████▎   | 140/221 [00:41<00:27,  2.90it/s][A
 64%|██████▍   | 141/221 [00:41<00:24,  3.27it/s][A
 64%|██████▍   | 142/221 [00:41<00:26,  2.98it/s][A
 65%|██████▍   | 143/221 [00:42<00:28,  2.78it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.50it/s][A
 66%|██████▌   | 145/221 [00:42<00:19,  3.99it/s][A
 66%|██████▌   | 146/221 [00:42<00:18,  4.00it/s][A
 67%|██████▋   | 147/221 [00:42<00:15,  4.71it/s][A
 67%|██████▋   | 148/221 [00:43<00:16,  4.37it/s][A
 67%|██████▋   | 149/221 [00:43<00:14,  4.89it/s][A
 68%|██████▊   | 150/221 [00:43<00:17,  4.08it/s][A
 68%|██████▊   | 151/221 [00:43<00:16,  4.18it/s][A
 69%|██████▉   | 152/221 [00:44<00:24,  2.81it/s][A
 69%|██████▉   | 153/221 [00:44<00:25,  2.63it/s][A
 70%|██████▉   | 154/221 [00:45<00:29,  2.27it/s][A
 70%|███████   | 155/221 [00:46<00:31,  2.09it/s][A
 71%|███████   | 156/221 [00:46<00:37,  1.71it/s][A
 71%|███████   | 157/221 [00:47<00:31,  2.00it/s][A
 71%|███████▏  | 158/221 [00:47<00:25,  2.44it/s][A
 72%|███████▏  | 159/221 [00:47<00:23,  2.69it/s][A
 72%|███████▏  | 160/221 [00:47<00:20,  3.01it/s][A
 73%|███████▎  | 161/221 [00:47<00:16,  3.73it/s][A
 73%|███████▎  | 162/221 [00:48<00:13,  4.50it/s][A
 74%|███████▍  | 163/221 [00:48<00:14,  3.89it/s][A
 74%|███████▍  | 164/221 [00:48<00:15,  3.78it/s][A
 75%|███████▍  | 165/221 [00:48<00:12,  4.35it/s][A
 75%|███████▌  | 166/221 [00:49<00:17,  3.10it/s][A
 76%|███████▌  | 167/221 [00:49<00:14,  3.76it/s][A
 76%|███████▌  | 168/221 [00:49<00:14,  3.78it/s][A
 76%|███████▋  | 169/221 [00:50<00:13,  3.99it/s][A
 77%|███████▋  | 170/221 [00:50<00:15,  3.40it/s][A
 77%|███████▋  | 171/221 [00:50<00:13,  3.57it/s][A
 78%|███████▊  | 172/221 [00:50<00:11,  4.24it/s][A
 78%|███████▊  | 173/221 [00:51<00:11,  4.19it/s][A
 79%|███████▊  | 174/221 [00:51<00:11,  4.20it/s][A
 79%|███████▉  | 175/221 [00:51<00:10,  4.21it/s][A
 80%|███████▉  | 176/221 [00:51<00:11,  4.08it/s][A
 80%|████████  | 177/221 [00:52<00:11,  3.81it/s][A
 81%|████████  | 178/221 [00:52<00:16,  2.59it/s][A
 81%|████████  | 179/221 [00:52<00:14,  2.90it/s][A
 81%|████████▏ | 180/221 [00:53<00:11,  3.63it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.53it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.46it/s][A
 83%|████████▎ | 183/221 [00:53<00:10,  3.79it/s][A
 83%|████████▎ | 184/221 [00:54<00:12,  3.02it/s][A
 84%|████████▎ | 185/221 [00:54<00:11,  3.16it/s][A
 85%|████████▍ | 187/221 [00:54<00:07,  4.39it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.44it/s][A
 86%|████████▌ | 189/221 [00:55<00:10,  3.09it/s][A
 86%|████████▌ | 190/221 [00:56<00:12,  2.39it/s][A
 86%|████████▋ | 191/221 [00:56<00:11,  2.73it/s][A
 87%|████████▋ | 192/221 [00:57<00:09,  2.94it/s][A
 88%|████████▊ | 194/221 [00:57<00:09,  2.74it/s][A
 88%|████████▊ | 195/221 [00:58<00:10,  2.50it/s][A
 89%|████████▊ | 196/221 [00:58<00:09,  2.66it/s][A
 89%|████████▉ | 197/221 [00:58<00:08,  2.93it/s][A
 90%|████████▉ | 198/221 [00:59<00:06,  3.34it/s][A
 90%|█████████ | 199/221 [00:59<00:05,  4.07it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.17it/s][A
 91%|█████████ | 201/221 [00:59<00:06,  3.12it/s][A
 91%|█████████▏| 202/221 [01:00<00:05,  3.56it/s][A
 92%|█████████▏| 203/221 [01:00<00:04,  4.19it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  4.18it/s][A
 93%|█████████▎| 205/221 [01:00<00:03,  5.05it/s][A
 93%|█████████▎| 206/221 [01:01<00:04,  3.24it/s][A
 94%|█████████▎| 207/221 [01:01<00:03,  4.02it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:02<00:04,  2.73it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.53it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.39it/s][A
 96%|█████████▋| 213/221 [01:03<00:02,  2.84it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  3.26it/s][A
 97%|█████████▋| 215/221 [01:04<00:02,  2.91it/s][A
 98%|█████████▊| 216/221 [01:04<00:01,  3.07it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  3.01it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.59it/s][A
 99%|█████████▉| 219/221 [01:05<00:00,  3.98it/s][A
100%|█████████▉| 220/221 [01:05<00:00,  3.99it/s][A
100%|██████████| 221/221 [01:05<00:00,  3.15it/s][A100%|██████████| 221/221 [01:05<00:00,  3.36it/s]
09/10/2024 21:14:27 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_area_forward=====step 199--===========

09/10/2024 21:14:27 - INFO - __main__ -   {'area_r1': 41.9, 'area_recall': '41.9/70.1/78.3', 'area_ravg': 63.4}
09/10/2024 21:14:27 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_area_backard=====step 199--===========

09/10/2024 21:14:27 - INFO - __main__ -   {'forward_r1': 38.9, 'forward_recall': '38.9/66.4/76.1', 'forward_ravg': 60.5}
09/10/2024 21:14:27 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_area_back_with_video=====step 199--===========

09/10/2024 21:14:27 - INFO - __main__ -   {'area_video_r1': 40.0, 'area_video_recall': '40.0/66.9/78.6', 'area_video_ravg': 61.8}
09/10/2024 21:14:27 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_area_back_with_video====history best step: 199=======

09/10/2024 21:14:27 - INFO - __main__ -   {'area_video_r1': 40.0, 'area_video_recall': '40.0/66.9/78.6', 'area_video_ravg': 61.8}
09/10/2024 21:14:27 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_itm_area=====step 199--===========

09/10/2024 21:14:27 - INFO - __main__ -   {'area_video_r1': 49.9, 'area_video_recall': '49.9/71.7/79.8', 'area_video_ravg': 67.1, 'area_video_back_r1': 47.9, 'area_video_back_recall': '47.9/70.1/78.5', 'area_video_back_ravg': 65.5}
09/10/2024 21:14:27 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_itm_area====history best step: 49=======

09/10/2024 21:14:27 - INFO - __main__ -   {'area_video_r1': 53.4, 'area_video_recall': '53.4/75.5/82.6', 'area_video_ravg': 70.5, 'area_video_back_r1': 51.4, 'area_video_back_recall': '51.4/73.1/80.9', 'area_video_back_ravg': 68.4}
09/10/2024 21:14:27 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_itc_tvas=====step 199--===========

09/10/2024 21:14:27 - INFO - __main__ -   {'video_r1': 32.2, 'video_recall': '32.2/57.6/68.4', 'video_ravg': 52.8}
09/10/2024 21:14:27 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_itc_tvas====history best step: 199=======

09/10/2024 21:14:27 - INFO - __main__ -   {'video_r1': 32.2, 'video_recall': '32.2/57.6/68.4', 'video_ravg': 52.8}
09/10/2024 21:14:27 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_itm_tvas=====step 199--===========

09/10/2024 21:14:27 - INFO - __main__ -   {'video_r1': 48.8, 'video_recall': '48.8/70.0/77.7', 'video_ravg': 65.5}
09/10/2024 21:14:27 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_itm_tvas====history best step: 49=======

09/10/2024 21:14:27 - INFO - __main__ -   {'video_r1': 52.6, 'video_recall': '52.6/72.3/77.8', 'video_ravg': 67.6}
09/10/2024 21:14:57 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.0003757630183827132, 'loss_ret%tv%ta--finetune_area/loss_area': 2.5269088745117188, 'loss_ret%tv%ta--finetune_area/total_loss': 2.527284622192383}
 10%|█         | 200/1945 [1:07:21<64:38:47, 133.37s/it] 10%|█         | 201/1945 [1:07:25<45:44:34, 94.42s/it] [h264 @ 0x55edfdcf5d40] mmco: unref short failure
[h264 @ 0x55edfdcf5d40] mmco: unref short failure
[h264 @ 0x55a83bc768c0] mmco: unref short failure
 10%|█         | 202/1945 [1:07:29<32:35:45, 67.32s/it] 10%|█         | 203/1945 [1:07:33<23:23:13, 48.33s/it] 10%|█         | 204/1945 [1:07:38<17:04:15, 35.30s/it][h264 @ 0x55edffdade40] mmco: unref short failure
[h264 @ 0x55edffdade40] mmco: unref short failure
[h264 @ 0x55ee01e9e140] mmco: unref short failure
[h264 @ 0x55ee01e9e140] mmco: unref short failure
[h264 @ 0x55ee01e9e140] mmco: unref short failure
[h264 @ 0x55ee01e9e140] mmco: unref short failure
 11%|█         | 205/1945 [1:07:43<12:44:20, 26.36s/it][h264 @ 0x55a83bc76440] mmco: unref short failure
[h264 @ 0x55a83bc76440] mmco: unref short failure
[h264 @ 0x55d5b0ecd840] mmco: unref short failure
 11%|█         | 206/1945 [1:07:49<9:44:25, 20.16s/it] [h264 @ 0x55a84ce09240] mmco: unref short failure
[h264 @ 0x55a84ce09240] mmco: unref short failure
[h264 @ 0x55ee043aabc0] mmco: unref short failure
 11%|█         | 207/1945 [1:07:55<7:38:51, 15.84s/it][h264 @ 0x55edff69fb00] mmco: unref short failure
[h264 @ 0x55edff69fb00] mmco: unref short failure
 11%|█         | 208/1945 [1:08:00<6:08:32, 12.73s/it][h264 @ 0x55d5b6787540] mmco: unref short failure
[h264 @ 0x55d5b6787540] mmco: unref short failure
 11%|█         | 209/1945 [1:08:06<5:11:02, 10.75s/it][h264 @ 0x55ee00a16e00] mmco: unref short failure
 11%|█         | 210/1945 [1:08:12<4:29:02,  9.30s/it][h264 @ 0x5643abcca9c0] mmco: unref short failure
[h264 @ 0x5643b09c6340] mmco: unref short failure
[h264 @ 0x5643b09c6340] mmco: unref short failure
 11%|█         | 211/1945 [1:08:18<4:02:02,  8.38s/it][h264 @ 0x55edfe702700] mmco: unref short failure
[h264 @ 0x55edfe702700] mmco: unref short failure
 11%|█         | 212/1945 [1:08:24<3:38:27,  7.56s/it][h264 @ 0x55ee0c727fc0] mmco: unref short failure
[h264 @ 0x55ee0c727fc0] mmco: unref short failure
[h264 @ 0x55ee0c727fc0] mmco: unref short failure
[h264 @ 0x55ee0c727fc0] mmco: unref short failure
 11%|█         | 213/1945 [1:08:30<3:23:09,  7.04s/it][h264 @ 0x5643940be180] mmco: unref short failure
[h264 @ 0x5643940be180] mmco: unref short failure
 11%|█         | 214/1945 [1:08:36<3:17:51,  6.86s/it][h264 @ 0x55d5b861e480] mmco: unref short failure
[h264 @ 0x55d5b861e480] mmco: unref short failure
[h264 @ 0x56439e6a5ec0] mmco: unref short failure
 11%|█         | 215/1945 [1:08:42<3:04:21,  6.39s/it][h264 @ 0x56439a115ac0] mmco: unref short failure
[h264 @ 0x56439a115ac0] mmco: unref short failure
[h264 @ 0x55ee044e6ec0] mmco: unref short failure
[h264 @ 0x5643a1c82480] mmco: unref short failure
[h264 @ 0x55ee044e6ec0] mmco: unref short failure
[h264 @ 0x55ee138e0680] mmco: unref short failure
[h264 @ 0x55edfe702900] mmco: unref short failure
[h264 @ 0x55edfe702900] mmco: unref short failure
[h264 @ 0x55d5b2193740] mmco: unref short failure
[h264 @ 0x55d5b2193740] mmco: unref short failure
[h264 @ 0x55d5b2193740] mmco: unref short failure
[h264 @ 0x55a82d4dcbc0] mmco: unref short failure
[h264 @ 0x55a830adc080] mmco: unref short failure
[h264 @ 0x55a830adc080] mmco: unref short failure
[h264 @ 0x5643982d09c0] mmco: unref short failure
[h264 @ 0x55a84518f700] mmco: unref short failure
[h264 @ 0x55a84518f700] mmco: unref short failure
 11%|█         | 216/1945 [1:09:18<7:23:31, 15.39s/it][h264 @ 0x55d5ba78d8c0] mmco: unref short failure
 11%|█         | 217/1945 [1:09:24<5:59:46, 12.49s/it] 11%|█         | 218/1945 [1:09:29<4:59:43, 10.41s/it] 11%|█▏        | 219/1945 [1:09:35<4:15:23,  8.88s/it][h264 @ 0x55ee034696c0] mmco: unref short failure
[h264 @ 0x55ee034696c0] mmco: unref short failure
[h264 @ 0x55ee034696c0] mmco: unref short failure
 11%|█▏        | 220/1945 [1:09:43<4:12:13,  8.77s/it][h264 @ 0x55d5c8cb9b40] mmco: unref short failure
[h264 @ 0x55edf6f16fc0] mmco: unref short failure
[h264 @ 0x55edf6f16fc0] mmco: unref short failure
[h264 @ 0x55edf20dd380] mmco: unref short failure
 11%|█▏        | 221/1945 [1:09:51<4:06:34,  8.58s/it][h264 @ 0x55a84b4eb000] mmco: unref short failure
[h264 @ 0x55a84b4eb000] mmco: unref short failure
[h264 @ 0x55a82d186880] mmco: unref short failure
[h264 @ 0x55a82d186880] mmco: unref short failure
[h264 @ 0x55a82d186880] mmco: unref short failure
[h264 @ 0x55a82d186880] mmco: unref short failure
[h264 @ 0x55edf23fdd40] mmco: unref short failure
[h264 @ 0x55edf23fdd40] mmco: unref short failure
[h264 @ 0x5643a1ea2940] mmco: unref short failure
 11%|█▏        | 222/1945 [1:10:05<4:49:48, 10.09s/it][h264 @ 0x55edfaada940] mmco: unref short failure
 11%|█▏        | 223/1945 [1:10:11<4:13:17,  8.83s/it][h264 @ 0x5643a1fadf00] mmco: unref short failure
[h264 @ 0x5643a1fadf00] mmco: unref short failure
[h264 @ 0x56439d1a3900] mmco: unref short failure
[h264 @ 0x55d5b0ecd180] mmco: unref short failure
[h264 @ 0x55edf8d18200] mmco: unref short failure
[h264 @ 0x55a8379f8180] mmco: unref short failure
[h264 @ 0x55a8379f8180] mmco: unref short failure
[h264 @ 0x55d5b60b7340] mmco: unref short failure
[h264 @ 0x55edf54821c0] mmco: unref short failure
[h264 @ 0x55a8384d3a40] mmco: unref short failure
[h264 @ 0x55a8384d3a40] mmco: unref short failure
[h264 @ 0x55ee03aaabc0] mmco: unref short failure
[h264 @ 0x55ee03aaabc0] mmco: unref short failure
[h264 @ 0x55a849388c40] mmco: unref short failure
[h264 @ 0x55d5beb1aac0] mmco: unref short failure
[h264 @ 0x55d5beb1aac0] mmco: unref short failure
[h264 @ 0x55a830c8e140] mmco: unref short failure
 12%|█▏        | 224/1945 [1:11:16<12:16:15, 25.67s/it][h264 @ 0x56439d40ed00] mmco: unref short failure
[h264 @ 0x56439d40ed00] mmco: unref short failure
[h264 @ 0x55edf1852300] mmco: unref short failure
[h264 @ 0x55a82f4f89c0] mmco: unref short failure
[h264 @ 0x55a82f4f89c0] mmco: unref short failure
 12%|█▏        | 225/1945 [1:11:22<9:26:57, 19.78s/it] [h264 @ 0x55a84e6236c0] mmco: unref short failure
[h264 @ 0x55a83f1e8fc0] mmco: unref short failure
[h264 @ 0x55a83f1e8fc0] mmco: unref short failure
[h264 @ 0x5643ada53440] mmco: unref short failure
[h264 @ 0x5643914cd440] mmco: unref short failure
[h264 @ 0x5643914cd440] mmco: unref short failure
[h264 @ 0x55d5ba088180] mmco: unref short failure
[h264 @ 0x55d5ba088180] mmco: unref short failure
[h264 @ 0x55a8428ac800] mmco: unref short failure
[h264 @ 0x55a8428ac800] mmco: unref short failure
[h264 @ 0x5643914cd8c0] mmco: unref short failure
 12%|█▏        | 226/1945 [1:11:41<9:21:06, 19.59s/it] 12%|█▏        | 227/1945 [1:11:47<7:27:57, 15.64s/it][h264 @ 0x55edf7c962c0] mmco: unref short failure
[h264 @ 0x55edf7c962c0] mmco: unref short failure
[h264 @ 0x55a834632f00] mmco: unref short failure
 12%|█▏        | 228/1945 [1:11:53<6:05:43, 12.78s/it] 12%|█▏        | 229/1945 [1:11:59<5:06:19, 10.71s/it][h264 @ 0x56439ec8ac00] mmco: unref short failure
[h264 @ 0x56439ec8ac00] mmco: unref short failure
[h264 @ 0x5643914e6c40] mmco: unref short failure
[h264 @ 0x564399a1d600] mmco: unref short failure
[h264 @ 0x564399a1d600] mmco: unref short failure
 12%|█▏        | 230/1945 [1:12:12<5:21:23, 11.24s/it][h264 @ 0x55d5c5e13d40] mmco: unref short failure
[h264 @ 0x55d5b7ac6940] mmco: unref short failure
[h264 @ 0x55d5b7ac6940] mmco: unref short failure
[h264 @ 0x55d5b7ac6940] mmco: unref short failure
 12%|█▏        | 231/1945 [1:12:18<4:35:46,  9.65s/it][h264 @ 0x55ee0ecae500] mmco: unref short failure
[h264 @ 0x55ee0ecae500] mmco: unref short failure
[h264 @ 0x55d5cb43e0c0] mmco: unref short failure
[h264 @ 0x55d5cb43e0c0] mmco: unref short failure
[h264 @ 0x55d5cb43e0c0] mmco: unref short failure
[h264 @ 0x55d5cb43e0c0] mmco: unref short failure
[h264 @ 0x55d5cb43e0c0] mmco: unref short failure
[h264 @ 0x55d5cb43e0c0] mmco: unref short failure
[h264 @ 0x55edfbaf8c00] mmco: unref short failure
[h264 @ 0x55a831279700] mmco: unref short failure
[h264 @ 0x55a831279700] mmco: unref short failure
[h264 @ 0x55a831279700] mmco: unref short failure
[h264 @ 0x55a831279700] mmco: unref short failure
[h264 @ 0x5643929e52c0] mmco: unref short failure
[h264 @ 0x5643929e52c0] mmco: unref short failure
[h264 @ 0x55a847a5fd00] mmco: unref short failure
[h264 @ 0x5643a7e72000] mmco: unref short failure
[h264 @ 0x5643a7e72000] mmco: unref short failure
not have audios ua_Kowav7hg.20
[h264 @ 0x5643984e3c00] mmco: unref short failure
[h264 @ 0x5643984e3c00] mmco: unref short failure
[h264 @ 0x55ee07c652c0] mmco: unref short failure
[h264 @ 0x55ee07c652c0] mmco: unref short failure
[h264 @ 0x55d5b5c1c980] mmco: unref short failure
[h264 @ 0x55d5b5c1c980] mmco: unref short failure
[h264 @ 0x55d5b815e140] mmco: unref short failure
[h264 @ 0x55d5b7ac7000] mmco: unref short failure
[h264 @ 0x55d5b7ac7000] mmco: unref short failure
[h264 @ 0x55d5b86619c0] mmco: unref short failure
[h264 @ 0x55a84c148a40] mmco: unref short failure
[h264 @ 0x55a84c148a40] mmco: unref short failure
[h264 @ 0x55ee1073e8c0] mmco: unref short failure
[h264 @ 0x55ee1073e8c0] mmco: unref short failure
[h264 @ 0x55a82de6d9c0] mmco: unref short failure
[h264 @ 0x55a82de6d9c0] mmco: unref short failure
[h264 @ 0x55a82de6d9c0] mmco: unref short failure
[h264 @ 0x5643aa96bd40] mmco: unref short failure
[h264 @ 0x55d5b7ac6940] mmco: unref short failure
[h264 @ 0x55d5b7ac6940] mmco: unref short failure
[h264 @ 0x55a82e13da00] mmco: unref short failure
[h264 @ 0x55a82e13da00] mmco: unref short failure
[h264 @ 0x55ee00a24540] mmco: unref short failure
[h264 @ 0x55ee00a24540] mmco: unref short failure
[h264 @ 0x55ee00a24540] mmco: unref short failure
[h264 @ 0x55ee00a24540] mmco: unref short failure
[h264 @ 0x56439ee22d00] mmco: unref short failure
[h264 @ 0x5643b635aa00] mmco: unref short failure
[h264 @ 0x5643b635aa00] mmco: unref short failure
 12%|█▏        | 232/1945 [1:13:20<12:09:00, 25.53s/it][h264 @ 0x55a834152480] mmco: unref short failure
[h264 @ 0x55ee05a02fc0] mmco: unref short failure
 12%|█▏        | 233/1945 [1:13:26<9:18:34, 19.58s/it] [h264 @ 0x55d5bc201880] mmco: unref short failure
[h264 @ 0x55edf4f8ae40] mmco: unref short failure
[h264 @ 0x55edf4f8ae40] mmco: unref short failure
[h264 @ 0x55edf4f8ae40] mmco: unref short failure
[h264 @ 0x55edf4f8ae40] mmco: unref short failure
[h264 @ 0x55edf4f8ae40] mmco: unref short failure
[h264 @ 0x55edf4f8ae40] mmco: unref short failure
[h264 @ 0x5643944dc6c0] mmco: unref short failure
[h264 @ 0x5643944dc6c0] mmco: unref short failure
[h264 @ 0x55d5b0d13b80] mmco: unref short failure
[h264 @ 0x55d5b0d13b80] mmco: unref short failure
 12%|█▏        | 234/1945 [1:13:42<8:50:24, 18.60s/it][h264 @ 0x55edf0aa7940] mmco: unref short failure
[h264 @ 0x55a840bbe6c0] mmco: unref short failure
 12%|█▏        | 235/1945 [1:13:49<7:04:42, 14.90s/it] 12%|█▏        | 236/1945 [1:13:55<5:49:54, 12.28s/it] 12%|█▏        | 237/1945 [1:14:00<4:53:46, 10.32s/it][h264 @ 0x5643a884d740] mmco: unref short failure
[h264 @ 0x5643a884d740] mmco: unref short failure
[h264 @ 0x55a84807e2c0] mmco: unref short failure
[h264 @ 0x55a84807e2c0] mmco: unref short failure
[h264 @ 0x55a84807e2c0] mmco: unref short failure
[h264 @ 0x55a84807e2c0] mmco: unref short failure
[h264 @ 0x55d5b4a79dc0] mmco: unref short failure
[h264 @ 0x55d5b4a79dc0] mmco: unref short failure
[h264 @ 0x55edfbaf8a00] mmco: unref short failure
 12%|█▏        | 238/1945 [1:14:11<4:58:09, 10.48s/it] 12%|█▏        | 239/1945 [1:14:17<4:18:31,  9.09s/it][h264 @ 0x55a845bc19c0] mmco: unref short failure
[h264 @ 0x55a845bc19c0] mmco: unref short failure
[h264 @ 0x5643930f8900] mmco: unref short failure
[h264 @ 0x5643930f8900] mmco: unref short failure
[h264 @ 0x55ee0c92ce40] mmco: unref short failure
[h264 @ 0x55ee0c92ce40] mmco: unref short failure
[h264 @ 0x55a846338c80] mmco: unref short failure
[h264 @ 0x55a846338c80] mmco: unref short failure
[h264 @ 0x55edf9106540] mmco: unref short failure
[h264 @ 0x55d5bc2522c0] mmco: unref short failure
[h264 @ 0x55edfffbab40] mmco: unref short failure
[h264 @ 0x55edfffbab40] mmco: unref short failure
[h264 @ 0x55edfffbab40] mmco: unref short failure
[h264 @ 0x55edfffbab40] mmco: unref short failure
[h264 @ 0x564394706500] mmco: unref short failure
[h264 @ 0x564394706500] mmco: unref short failure
[h264 @ 0x564394706500] mmco: unref short failure
[h264 @ 0x564394706500] mmco: unref short failure
[h264 @ 0x55edf2f7dc00] mmco: unref short failure
[h264 @ 0x55a82fd5c700] mmco: unref short failure
[h264 @ 0x55ee00a24540] mmco: unref short failure
[h264 @ 0x55ee00a24540] mmco: unref short failure
[h264 @ 0x55d5c7628300] mmco: unref short failure
[h264 @ 0x55d5c7628300] mmco: unref short failure
[h264 @ 0x5643a0ea4600] mmco: unref short failure
 12%|█▏        | 240/1945 [1:15:22<12:16:08, 25.90s/it] 12%|█▏        | 241/1945 [1:15:28<9:20:13, 19.73s/it] [h264 @ 0x55d5b1446080] mmco: unref short failure
[h264 @ 0x55d5b1446080] mmco: unref short failure
[h264 @ 0x55d5b1446080] mmco: unref short failure
[h264 @ 0x55d5b1446080] mmco: unref short failure
[h264 @ 0x55d5cb36c000] mmco: unref short failure
 12%|█▏        | 242/1945 [1:15:46<9:05:39, 19.22s/it] 12%|█▏        | 243/1945 [1:15:52<7:14:48, 15.33s/it] 13%|█▎        | 244/1945 [1:15:58<5:55:00, 12.52s/it][h264 @ 0x55d5bb637880] mmco: unref short failure
 13%|█▎        | 245/1945 [1:16:03<4:56:14, 10.46s/it][h264 @ 0x55a832b3fa00] mmco: unref short failure
[h264 @ 0x55a832b3fa00] mmco: unref short failure
 13%|█▎        | 246/1945 [1:16:14<4:58:51, 10.55s/it][h264 @ 0x55edfcea3e80] mmco: unref short failure
[h264 @ 0x55edfcea3e80] mmco: unref short failure
 13%|█▎        | 247/1945 [1:16:20<4:17:02,  9.08s/it][h264 @ 0x55ee0b2e1040] mmco: unref short failure
[h264 @ 0x56439817cd80] mmco: unref short failure
[h264 @ 0x55edfe092cc0] mmco: unref short failure
[h264 @ 0x55edfe092cc0] mmco: unref short failure
[h264 @ 0x55a841890940] mmco: unref short failure
[h264 @ 0x55a841890940] mmco: unref short failure
[h264 @ 0x55d5b148be00] mmco: unref short failure
[h264 @ 0x55d5b148be00] mmco: unref short failure
[h264 @ 0x55edf34bd440] mmco: unref short failure
[h264 @ 0x55edf34bd440] mmco: unref short failure
[h264 @ 0x55a84970d740] mmco: unref short failure
[h264 @ 0x55d5be4f3b40] mmco: unref short failure
[h264 @ 0x55d5be4f3b40] mmco: unref short failure
[h264 @ 0x55edf95ee800] mmco: unref short failure
[h264 @ 0x55edf95ee800] mmco: unref short failure
[h264 @ 0x55d5c2144f80] mmco: unref short failure
[h264 @ 0x55d5c4a90000] mmco: unref short failure
[h264 @ 0x55d5c4a90000] mmco: unref short failure
[h264 @ 0x55d5d1480440] mmco: unref short failure
[h264 @ 0x55d5d1480440] mmco: unref short failure
[h264 @ 0x56439976df40] mmco: unref short failure
[h264 @ 0x56439976df40] mmco: unref short failure
[h264 @ 0x55a836dd85c0] mmco: unref short failure
[h264 @ 0x55d5c24f9280] mmco: unref short failure
[h264 @ 0x55d5c24f9280] mmco: unref short failure
[h264 @ 0x55d5c24f9280] mmco: unref short failure
[h264 @ 0x55d5c24f9280] mmco: unref short failure
[h264 @ 0x55edf56b9340] mmco: unref short failure
[h264 @ 0x55a84ce09240] mmco: unref short failure
[h264 @ 0x55edf077b580] mmco: unref short failure
[h264 @ 0x55edf077b580] mmco: unref short failure
[h264 @ 0x55a839a9e4c0] mmco: unref short failure
[h264 @ 0x5643916584c0] mmco: unref short failure
[h264 @ 0x5643916584c0] mmco: unref short failure
[h264 @ 0x55ee10fa8a00] mmco: unref short failure
[h264 @ 0x55ee10fa8a00] mmco: unref short failure
 13%|█▎        | 248/1945 [1:17:25<12:15:22, 26.00s/it][h264 @ 0x55a848af7dc0] mmco: unref short failure
[h264 @ 0x55d5cf780600] mmco: unref short failure
 13%|█▎        | 249/1945 [1:17:31<9:21:46, 19.87s/it] 09/10/2024 21:25:10 - INFO - __main__ -   evaluate on ret%tvas--msrvtt_ret task
09/10/2024 21:25:10 - INFO - __main__ -   start running ret%tvas validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55ee0b06edc0] mmco: unref short failure
[h264 @ 0x55ee0b06edc0] mmco: unref short failure
[h264 @ 0x55a83233b280] mmco: unref short failure
[h264 @ 0x55a83233b280] mmco: unref short failure
[h264 @ 0x55d5c9263440] mmco: unref short failure
[h264 @ 0x5643aa4b5680] mmco: unref short failure
[h264 @ 0x5643aa4b5680] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x564391658000] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55a846f20b00] mmco: unref short failure
[h264 @ 0x55a846f20b00] mmco: unref short failure
[h264 @ 0x55a846f20b00] mmco: unref short failure
[h264 @ 0x55a846f20b00] mmco: unref short failure
[h264 @ 0x55a82db52840] mmco: unref short failure
[h264 @ 0x55a82db52840] mmco: unref short failure
[h264 @ 0x55a82db52840] mmco: unref short failure
[h264 @ 0x55edf0303fc0] mmco: unref short failure
[h264 @ 0x55a83fd27540] mmco: unref short failure
[h264 @ 0x55a83fd27540] mmco: unref short failure
[h264 @ 0x55d5ba088180] mmco: unref short failure
[h264 @ 0x55a838488880] mmco: unref short failure
[h264 @ 0x55a838488880] mmco: unref short failure
[h264 @ 0x55d5b0b23f80] mmco: unref short failure
[h264 @ 0x55a84a6f3dc0] mmco: unref short failure
[h264 @ 0x5643abd4de00] mmco: unref short failure
[h264 @ 0x5643abd4de00] mmco: unref short failure
[h264 @ 0x55edf07f1080] mmco: unref short failure
[h264 @ 0x55edf07f1080] mmco: unref short failure
[h264 @ 0x55ee10fa8780] mmco: unref short failure
[h264 @ 0x55edf08f30c0] mmco: unref short failure
[h264 @ 0x55a82ff15dc0] mmco: unref short failure
[h264 @ 0x55a82ff15dc0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][h264 @ 0x55a82ff15dc0] mmco: unref short failure
[A
  0%|          | 1/221 [00:00<01:03,  3.49it/s][A
  1%|          | 2/221 [00:00<01:50,  1.98it/s][A
  1%|▏         | 3/221 [00:01<01:43,  2.10it/s][A
  2%|▏         | 4/221 [00:01<01:29,  2.43it/s][A
  2%|▏         | 5/221 [00:01<01:14,  2.91it/s][A
  3%|▎         | 6/221 [00:02<01:00,  3.55it/s][A
  3%|▎         | 7/221 [00:02<00:58,  3.66it/s][A
  4%|▎         | 8/221 [00:02<01:06,  3.18it/s][A[h264 @ 0x55a83fd12e80] mmco: unref short failure
[h264 @ 0x55a83fd12e80] mmco: unref short failure

  4%|▍         | 9/221 [00:03<01:13,  2.87it/s][A
  5%|▍         | 10/221 [00:03<01:39,  2.13it/s][A
  5%|▍         | 11/221 [00:04<01:25,  2.45it/s][A
  5%|▌         | 12/221 [00:04<01:18,  2.68it/s][A
  6%|▌         | 13/221 [00:05<01:43,  2.01it/s][A
  6%|▋         | 14/221 [00:05<01:21,  2.54it/s][A
  7%|▋         | 15/221 [00:05<01:12,  2.84it/s][A
  7%|▋         | 16/221 [00:06<01:31,  2.25it/s][A
  8%|▊         | 17/221 [00:07<01:55,  1.77it/s][A
  8%|▊         | 18/221 [00:07<01:37,  2.07it/s][A
  9%|▊         | 19/221 [00:07<01:29,  2.25it/s][A
  9%|▉         | 20/221 [00:08<01:14,  2.71it/s][A
 10%|▉         | 21/221 [00:08<01:04,  3.08it/s][A
 10%|▉         | 22/221 [00:08<01:01,  3.23it/s][A[h264 @ 0x55d5b11f2080] mmco: unref short failure
[h264 @ 0x55d5b11f2080] mmco: unref short failure

 10%|█         | 23/221 [00:08<00:56,  3.48it/s][A
 11%|█         | 24/221 [00:09<01:02,  3.17it/s][A
 11%|█▏        | 25/221 [00:09<01:11,  2.74it/s][A
 12%|█▏        | 26/221 [00:10<01:27,  2.23it/s][A
 12%|█▏        | 27/221 [00:10<01:14,  2.61it/s][A[h264 @ 0x5643a35afd40] mmco: unref short failure
[h264 @ 0x5643a35afd40] mmco: unref short failure

 13%|█▎        | 28/221 [00:11<01:32,  2.09it/s][A
 13%|█▎        | 29/221 [00:11<01:18,  2.43it/s][A
 14%|█▎        | 30/221 [00:11<01:14,  2.57it/s][A
 14%|█▍        | 31/221 [00:12<01:09,  2.73it/s][A
 14%|█▍        | 32/221 [00:12<00:58,  3.23it/s][A
 15%|█▍        | 33/221 [00:12<00:59,  3.15it/s][A
 15%|█▌        | 34/221 [00:12<00:50,  3.71it/s][A
 16%|█▌        | 35/221 [00:13<00:53,  3.48it/s][A
 16%|█▋        | 36/221 [00:13<01:07,  2.76it/s][A
 17%|█▋        | 37/221 [00:13<01:07,  2.73it/s][A
 17%|█▋        | 38/221 [00:14<01:13,  2.48it/s][A
 18%|█▊        | 39/221 [00:14<00:59,  3.04it/s][A
 18%|█▊        | 40/221 [00:15<01:03,  2.86it/s][A
 19%|█▊        | 41/221 [00:15<01:06,  2.72it/s][A
 19%|█▉        | 42/221 [00:16<01:21,  2.20it/s][A
 19%|█▉        | 43/221 [00:16<01:15,  2.35it/s][A
 20%|█▉        | 44/221 [00:16<01:04,  2.76it/s][A
 20%|██        | 45/221 [00:17<01:06,  2.65it/s][A
 21%|██        | 46/221 [00:17<01:01,  2.84it/s][A
 21%|██▏       | 47/221 [00:17<01:06,  2.62it/s][A
 22%|██▏       | 48/221 [00:18<01:02,  2.75it/s][A
 22%|██▏       | 49/221 [00:18<00:59,  2.89it/s][A
 23%|██▎       | 50/221 [00:18<01:00,  2.82it/s][A
 23%|██▎       | 51/221 [00:19<00:52,  3.26it/s][A
 24%|██▎       | 52/221 [00:19<00:50,  3.33it/s][A
 24%|██▍       | 53/221 [00:19<00:50,  3.32it/s][A
 24%|██▍       | 54/221 [00:20<01:23,  2.00it/s][A
 25%|██▍       | 55/221 [00:20<01:18,  2.11it/s][A
 25%|██▌       | 56/221 [00:21<01:08,  2.42it/s][A[h264 @ 0x55ee046a6640] mmco: unref short failure

 26%|██▌       | 57/221 [00:21<01:01,  2.66it/s][A[h264 @ 0x55d5b0f16dc0] mmco: unref short failure
[h264 @ 0x55d5b0f16dc0] mmco: unref short failure

 26%|██▌       | 58/221 [00:21<00:56,  2.89it/s][A
 27%|██▋       | 59/221 [00:22<00:52,  3.11it/s][A
 27%|██▋       | 60/221 [00:22<01:05,  2.46it/s][A
 28%|██▊       | 61/221 [00:23<01:00,  2.67it/s][A[h264 @ 0x55a83b2c3f00] mmco: unref short failure

 28%|██▊       | 62/221 [00:23<00:59,  2.66it/s][A
 29%|██▊       | 63/221 [00:23<00:56,  2.79it/s][A
 29%|██▉       | 64/221 [00:24<01:03,  2.47it/s][A[h264 @ 0x55edf13d1640] mmco: unref short failure

 29%|██▉       | 65/221 [00:24<01:03,  2.45it/s][A[h264 @ 0x55ee1001f3c0] mmco: unref short failure
[h264 @ 0x55ee1001f3c0] mmco: unref short failure
[h264 @ 0x55ee1001f3c0] mmco: unref short failure
[h264 @ 0x55ee1001f3c0] mmco: unref short failure

 30%|██▉       | 66/221 [00:25<01:09,  2.24it/s][A
 30%|███       | 67/221 [00:25<01:20,  1.92it/s][A
 31%|███       | 68/221 [00:26<01:03,  2.41it/s][A[h264 @ 0x55edf2724d00] mmco: unref short failure
[h264 @ 0x55edf2724d00] mmco: unref short failure

 31%|███       | 69/221 [00:26<01:16,  1.99it/s][A
 32%|███▏      | 70/221 [00:27<01:06,  2.28it/s][A
 32%|███▏      | 71/221 [00:27<00:59,  2.53it/s][A[h264 @ 0x564397acc640] mmco: unref short failure
[h264 @ 0x564397acc640] mmco: unref short failure
[h264 @ 0x564397acc640] mmco: unref short failure
[h264 @ 0x564397acc640] mmco: unref short failure
[h264 @ 0x564397acc640] mmco: unref short failure

 33%|███▎      | 72/221 [00:27<01:06,  2.24it/s][A
 33%|███▎      | 73/221 [00:28<01:11,  2.06it/s][A
 33%|███▎      | 74/221 [00:28<00:57,  2.57it/s][A
 34%|███▍      | 75/221 [00:28<00:53,  2.72it/s][A
 34%|███▍      | 76/221 [00:29<00:52,  2.74it/s][A
 35%|███▍      | 77/221 [00:29<00:47,  3.02it/s][A
 35%|███▌      | 78/221 [00:29<00:40,  3.52it/s][A[h264 @ 0x55edfba70b40] mmco: unref short failure

 36%|███▌      | 79/221 [00:30<01:01,  2.32it/s][A
 36%|███▌      | 80/221 [00:30<00:54,  2.61it/s][A[h264 @ 0x564397c21980] mmco: unref short failure
[h264 @ 0x564397c21980] mmco: unref short failure

 37%|███▋      | 81/221 [00:31<00:51,  2.70it/s][A
 37%|███▋      | 82/221 [00:31<00:53,  2.61it/s][A
 38%|███▊      | 83/221 [00:32<00:57,  2.40it/s][A
 38%|███▊      | 84/221 [00:32<00:55,  2.46it/s][A
 38%|███▊      | 85/221 [00:32<00:47,  2.84it/s][A
 39%|███▉      | 86/221 [00:32<00:42,  3.21it/s][A
 39%|███▉      | 87/221 [00:33<01:14,  1.79it/s][A
 40%|███▉      | 88/221 [00:34<01:24,  1.58it/s][A
 40%|████      | 89/221 [00:35<01:10,  1.87it/s][A
 41%|████      | 90/221 [00:35<01:14,  1.76it/s][A
 41%|████      | 91/221 [00:36<01:03,  2.06it/s][A
 42%|████▏     | 92/221 [00:36<00:59,  2.18it/s][A
 42%|████▏     | 93/221 [00:37<01:06,  1.92it/s][A
 43%|████▎     | 94/221 [00:37<01:01,  2.05it/s][A
 43%|████▎     | 95/221 [00:37<01:01,  2.04it/s][A
 43%|████▎     | 96/221 [00:38<00:54,  2.29it/s][A
 44%|████▍     | 97/221 [00:38<00:49,  2.51it/s][A
 44%|████▍     | 98/221 [00:38<00:45,  2.69it/s][A
 45%|████▍     | 99/221 [00:39<00:38,  3.14it/s][A
 45%|████▌     | 100/221 [00:39<00:39,  3.07it/s][A
 46%|████▌     | 101/221 [00:39<00:37,  3.18it/s][A
 46%|████▌     | 102/221 [00:40<00:55,  2.16it/s][A
 47%|████▋     | 103/221 [00:40<00:44,  2.65it/s][A
 47%|████▋     | 104/221 [00:40<00:39,  2.96it/s][A
 48%|████▊     | 105/221 [00:41<00:35,  3.23it/s][A
 48%|████▊     | 106/221 [00:42<00:54,  2.10it/s][A
 48%|████▊     | 107/221 [00:42<00:49,  2.30it/s][A
 49%|████▉     | 108/221 [00:42<00:45,  2.50it/s][A
 49%|████▉     | 109/221 [00:42<00:38,  2.92it/s][A
 50%|████▉     | 110/221 [00:43<00:38,  2.86it/s][A
 50%|█████     | 111/221 [00:43<00:46,  2.37it/s][A
 51%|█████     | 112/221 [00:44<00:43,  2.49it/s][A
 51%|█████     | 113/221 [00:44<00:44,  2.44it/s][A
 52%|█████▏    | 115/221 [00:45<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:45<00:31,  3.32it/s][A
 53%|█████▎    | 117/221 [00:45<00:33,  3.07it/s][A
 53%|█████▎    | 118/221 [00:46<00:33,  3.06it/s][A
 54%|█████▍    | 119/221 [00:46<00:39,  2.60it/s][A
 54%|█████▍    | 120/221 [00:46<00:34,  2.94it/s][A
 55%|█████▍    | 121/221 [00:46<00:28,  3.51it/s][A
 55%|█████▌    | 122/221 [00:47<00:28,  3.46it/s][A
 56%|█████▌    | 123/221 [00:47<00:27,  3.54it/s][A
 56%|█████▌    | 124/221 [00:47<00:29,  3.27it/s][A
 57%|█████▋    | 125/221 [00:48<00:32,  2.98it/s][A
 57%|█████▋    | 126/221 [00:48<00:27,  3.40it/s][A
 57%|█████▋    | 127/221 [00:48<00:32,  2.89it/s][A
 58%|█████▊    | 128/221 [00:49<00:33,  2.81it/s][A
 58%|█████▊    | 129/221 [00:49<00:25,  3.57it/s][A
 59%|█████▉    | 130/221 [00:49<00:25,  3.58it/s][A
 59%|█████▉    | 131/221 [00:50<00:26,  3.44it/s][A
 60%|█████▉    | 132/221 [00:50<00:34,  2.61it/s][A
 60%|██████    | 133/221 [00:51<00:34,  2.56it/s][A
 61%|██████    | 134/221 [00:51<00:37,  2.33it/s][A
 61%|██████    | 135/221 [00:51<00:32,  2.61it/s][A
 62%|██████▏   | 136/221 [00:52<00:31,  2.73it/s][A
 62%|██████▏   | 137/221 [00:52<00:26,  3.12it/s][A[h264 @ 0x5643ade6c9c0] mmco: unref short failure
[h264 @ 0x5643ade6c9c0] mmco: unref short failure

 62%|██████▏   | 138/221 [00:52<00:28,  2.93it/s][A[h264 @ 0x55a846a18380] mmco: unref short failure
[h264 @ 0x55a846a18380] mmco: unref short failure

 63%|██████▎   | 139/221 [00:53<00:35,  2.32it/s][A
 63%|██████▎   | 140/221 [00:53<00:33,  2.42it/s][A
 64%|██████▍   | 141/221 [00:54<00:28,  2.77it/s][A[h264 @ 0x55a83df72b80] mmco: unref short failure
[h264 @ 0x55a83df72b80] mmco: unref short failure

 64%|██████▍   | 142/221 [00:54<00:26,  3.01it/s][A
 65%|██████▍   | 143/221 [00:55<00:34,  2.24it/s][A
 65%|██████▌   | 144/221 [00:55<00:34,  2.21it/s][A
 66%|██████▌   | 146/221 [00:55<00:21,  3.51it/s][A
 67%|██████▋   | 147/221 [00:55<00:21,  3.38it/s][A
 67%|██████▋   | 148/221 [00:56<00:26,  2.72it/s][A
 67%|██████▋   | 149/221 [00:56<00:26,  2.76it/s][A
 68%|██████▊   | 150/221 [00:57<00:24,  2.94it/s][A
 68%|██████▊   | 151/221 [00:57<00:26,  2.63it/s][A
 69%|██████▉   | 152/221 [00:59<00:46,  1.50it/s][A
 69%|██████▉   | 153/221 [00:59<00:36,  1.86it/s][A
 70%|██████▉   | 154/221 [00:59<00:29,  2.28it/s][A
 70%|███████   | 155/221 [00:59<00:27,  2.41it/s][A[h264 @ 0x55d5cf780400] mmco: unref short failure
[h264 @ 0x55d5cf780400] mmco: unref short failure

 71%|███████   | 156/221 [01:00<00:32,  1.99it/s][A
 71%|███████   | 157/221 [01:00<00:30,  2.07it/s][A
 71%|███████▏  | 158/221 [01:01<00:26,  2.33it/s][A
 72%|███████▏  | 159/221 [01:01<00:21,  2.94it/s][A
 72%|███████▏  | 160/221 [01:01<00:20,  2.97it/s][A
 73%|███████▎  | 161/221 [01:01<00:17,  3.48it/s][A
 73%|███████▎  | 162/221 [01:02<00:15,  3.77it/s][A
 74%|███████▍  | 163/221 [01:02<00:15,  3.66it/s][A
 74%|███████▍  | 164/221 [01:02<00:14,  4.00it/s][A
 75%|███████▍  | 165/221 [01:02<00:13,  4.09it/s][A
 75%|███████▌  | 166/221 [01:03<00:14,  3.68it/s][A
 76%|███████▌  | 167/221 [01:03<00:11,  4.54it/s][A
 76%|███████▌  | 168/221 [01:03<00:13,  3.95it/s][A
 76%|███████▋  | 169/221 [01:03<00:12,  4.23it/s][A
 77%|███████▋  | 170/221 [01:04<00:14,  3.41it/s][A
 77%|███████▋  | 171/221 [01:04<00:16,  3.06it/s][A
 78%|███████▊  | 172/221 [01:04<00:13,  3.73it/s][A
 78%|███████▊  | 173/221 [01:05<00:15,  3.02it/s][A
 79%|███████▊  | 174/221 [01:05<00:17,  2.76it/s][A
 79%|███████▉  | 175/221 [01:06<00:17,  2.70it/s][A
 80%|███████▉  | 176/221 [01:06<00:13,  3.29it/s][A
 80%|████████  | 177/221 [01:06<00:13,  3.34it/s][A
 81%|████████  | 178/221 [01:06<00:13,  3.24it/s][A[h264 @ 0x55d5bbadde00] mmco: unref short failure

 81%|████████  | 179/221 [01:07<00:14,  2.98it/s][A
 81%|████████▏ | 180/221 [01:07<00:11,  3.55it/s][A
 82%|████████▏ | 181/221 [01:07<00:09,  4.06it/s][A
 82%|████████▏ | 182/221 [01:07<00:11,  3.49it/s][A
 83%|████████▎ | 183/221 [01:08<00:10,  3.70it/s][A
 83%|████████▎ | 184/221 [01:08<00:10,  3.65it/s][A
 84%|████████▍ | 186/221 [01:09<00:09,  3.50it/s][A
 85%|████████▍ | 187/221 [01:09<00:10,  3.25it/s][A
 85%|████████▌ | 188/221 [01:09<00:10,  3.22it/s][A[h264 @ 0x55d5bbadde00] mmco: unref short failure

 86%|████████▌ | 189/221 [01:10<00:10,  3.08it/s][A
 86%|████████▌ | 190/221 [01:10<00:11,  2.75it/s][A
 86%|████████▋ | 191/221 [01:10<00:09,  3.26it/s][A
 87%|████████▋ | 192/221 [01:11<00:08,  3.33it/s][A
 88%|████████▊ | 194/221 [01:11<00:10,  2.68it/s][A
 88%|████████▊ | 195/221 [01:12<00:09,  2.85it/s][A
 89%|████████▊ | 196/221 [01:12<00:10,  2.47it/s][A
 89%|████████▉ | 197/221 [01:13<00:09,  2.59it/s][A
 90%|████████▉ | 198/221 [01:13<00:09,  2.43it/s][A
 90%|█████████ | 199/221 [01:13<00:07,  2.97it/s][A
 90%|█████████ | 200/221 [01:14<00:07,  2.63it/s][A
 91%|█████████ | 201/221 [01:14<00:06,  2.98it/s][A
 91%|█████████▏| 202/221 [01:14<00:06,  3.03it/s][A
 92%|█████████▏| 203/221 [01:15<00:05,  3.10it/s][A
 92%|█████████▏| 204/221 [01:15<00:06,  2.74it/s][A
 93%|█████████▎| 205/221 [01:15<00:04,  3.46it/s][A
 93%|█████████▎| 206/221 [01:16<00:06,  2.49it/s][A
 94%|█████████▎| 207/221 [01:16<00:04,  3.21it/s][A
 94%|█████████▍| 208/221 [01:16<00:03,  3.36it/s][A
 95%|█████████▍| 209/221 [01:16<00:03,  3.53it/s][A
 95%|█████████▌| 211/221 [01:17<00:02,  3.81it/s][A
 96%|█████████▌| 212/221 [01:17<00:02,  3.72it/s][A
 96%|█████████▋| 213/221 [01:17<00:02,  3.86it/s][A
 97%|█████████▋| 214/221 [01:18<00:02,  2.97it/s][A
 97%|█████████▋| 215/221 [01:18<00:01,  3.11it/s][A
 98%|█████████▊| 216/221 [01:19<00:01,  2.75it/s][A
 98%|█████████▊| 217/221 [01:19<00:01,  2.61it/s][A
 99%|█████████▊| 218/221 [01:19<00:01,  2.74it/s][A
 99%|█████████▉| 219/221 [01:20<00:00,  2.82it/s][A
100%|█████████▉| 220/221 [01:20<00:00,  2.99it/s][A
100%|██████████| 221/221 [01:20<00:00,  3.26it/s][A100%|██████████| 221/221 [01:20<00:00,  2.73it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:06,  3.30it/s][A
  1%|          | 2/221 [00:00<01:06,  3.30it/s][A
  1%|▏         | 3/221 [00:00<01:05,  3.30it/s][A
  2%|▏         | 4/221 [00:01<01:05,  3.30it/s][A
  2%|▏         | 5/221 [00:01<01:05,  3.30it/s][A
  3%|▎         | 6/221 [00:01<01:05,  3.30it/s][A
  3%|▎         | 7/221 [00:02<01:04,  3.30it/s][A
  4%|▎         | 8/221 [00:02<01:04,  3.31it/s][A
  4%|▍         | 9/221 [00:02<01:04,  3.31it/s][A
  5%|▍         | 10/221 [00:03<01:03,  3.30it/s][A
  5%|▍         | 11/221 [00:03<01:03,  3.31it/s][A
  5%|▌         | 12/221 [00:03<01:03,  3.30it/s][A
  6%|▌         | 13/221 [00:03<01:02,  3.30it/s][A
  6%|▋         | 14/221 [00:04<01:02,  3.30it/s][A
  7%|▋         | 15/221 [00:04<01:02,  3.30it/s][A
  7%|▋         | 16/221 [00:04<01:02,  3.30it/s][A
  8%|▊         | 17/221 [00:05<01:01,  3.30it/s][A
  8%|▊         | 18/221 [00:05<01:01,  3.30it/s][A
  9%|▊         | 19/221 [00:05<01:01,  3.30it/s][A
  9%|▉         | 20/221 [00:06<01:00,  3.30it/s][A
 10%|▉         | 21/221 [00:06<01:00,  3.30it/s][A
 10%|▉         | 22/221 [00:06<01:00,  3.30it/s][A
 10%|█         | 23/221 [00:06<00:59,  3.30it/s][A
 11%|█         | 24/221 [00:07<00:59,  3.30it/s][A
 11%|█▏        | 25/221 [00:07<00:59,  3.30it/s][A
 12%|█▏        | 26/221 [00:07<00:59,  3.30it/s][A
 12%|█▏        | 27/221 [00:08<00:58,  3.30it/s][A
 13%|█▎        | 28/221 [00:08<00:58,  3.30it/s][A
 13%|█▎        | 29/221 [00:08<00:58,  3.30it/s][A
 14%|█▎        | 30/221 [00:09<00:57,  3.30it/s][A
 14%|█▍        | 31/221 [00:09<00:57,  3.30it/s][A
 14%|█▍        | 32/221 [00:09<00:57,  3.30it/s][A
 15%|█▍        | 33/221 [00:09<00:56,  3.30it/s][A
 15%|█▌        | 34/221 [00:10<00:56,  3.30it/s][A
 16%|█▌        | 35/221 [00:10<00:56,  3.30it/s][A
 16%|█▋        | 36/221 [00:10<00:55,  3.30it/s][A
 17%|█▋        | 37/221 [00:11<00:55,  3.30it/s][A
 17%|█▋        | 38/221 [00:11<00:55,  3.31it/s][A
 18%|█▊        | 39/221 [00:11<00:55,  3.30it/s][A
 18%|█▊        | 40/221 [00:12<00:54,  3.31it/s][A
 19%|█▊        | 41/221 [00:12<00:54,  3.31it/s][A
 19%|█▉        | 42/221 [00:12<00:54,  3.31it/s][A
 19%|█▉        | 43/221 [00:13<00:53,  3.31it/s][A
 20%|█▉        | 44/221 [00:13<00:53,  3.31it/s][A
 20%|██        | 45/221 [00:13<00:53,  3.31it/s][A
 21%|██        | 46/221 [00:13<00:52,  3.31it/s][A
 21%|██▏       | 47/221 [00:14<00:52,  3.31it/s][A
 22%|██▏       | 48/221 [00:14<00:52,  3.31it/s][A
 22%|██▏       | 49/221 [00:14<00:52,  3.31it/s][A
 23%|██▎       | 50/221 [00:15<00:51,  3.31it/s][A
 23%|██▎       | 51/221 [00:15<00:51,  3.31it/s][A
 24%|██▎       | 52/221 [00:15<00:51,  3.31it/s][A
 24%|██▍       | 53/221 [00:16<00:50,  3.31it/s][A
 24%|██▍       | 54/221 [00:16<00:50,  3.31it/s][A
 25%|██▍       | 55/221 [00:16<00:50,  3.31it/s][A
 25%|██▌       | 56/221 [00:16<00:49,  3.30it/s][A
 26%|██▌       | 57/221 [00:17<00:49,  3.30it/s][A
 26%|██▌       | 58/221 [00:17<00:49,  3.30it/s][A
 27%|██▋       | 59/221 [00:17<00:49,  3.30it/s][A
 27%|██▋       | 60/221 [00:18<00:48,  3.30it/s][A
 28%|██▊       | 61/221 [00:18<00:48,  3.30it/s][A
 28%|██▊       | 62/221 [00:18<00:48,  3.30it/s][A
 29%|██▊       | 63/221 [00:19<00:47,  3.30it/s][A
 29%|██▉       | 64/221 [00:19<00:47,  3.30it/s][A
 29%|██▉       | 65/221 [00:19<00:47,  3.30it/s][A
 30%|██▉       | 66/221 [00:19<00:46,  3.30it/s][A
 30%|███       | 67/221 [00:20<00:46,  3.30it/s][A
 31%|███       | 68/221 [00:20<00:46,  3.31it/s][A
 31%|███       | 69/221 [00:20<00:45,  3.31it/s][A
 32%|███▏      | 70/221 [00:21<00:45,  3.31it/s][A
 32%|███▏      | 71/221 [00:21<00:45,  3.31it/s][A
 33%|███▎      | 72/221 [00:21<00:45,  3.31it/s][A
 33%|███▎      | 73/221 [00:22<00:44,  3.30it/s][A
 33%|███▎      | 74/221 [00:22<00:44,  3.31it/s][A
 34%|███▍      | 75/221 [00:22<00:44,  3.31it/s][A
 34%|███▍      | 76/221 [00:22<00:43,  3.31it/s][A
 35%|███▍      | 77/221 [00:23<00:43,  3.31it/s][A
 35%|███▌      | 78/221 [00:23<00:43,  3.31it/s][A
 36%|███▌      | 79/221 [00:23<00:42,  3.31it/s][A
 36%|███▌      | 80/221 [00:24<00:42,  3.31it/s][A
 37%|███▋      | 81/221 [00:24<00:42,  3.31it/s][A
 37%|███▋      | 82/221 [00:24<00:42,  3.31it/s][A
 38%|███▊      | 83/221 [00:25<00:41,  3.30it/s][A
 38%|███▊      | 84/221 [00:25<00:41,  3.31it/s][A
 38%|███▊      | 85/221 [00:25<00:41,  3.31it/s][A
 39%|███▉      | 86/221 [00:26<00:40,  3.31it/s][A
 39%|███▉      | 87/221 [00:26<00:40,  3.31it/s][A
 40%|███▉      | 88/221 [00:26<00:40,  3.30it/s][A
 40%|████      | 89/221 [00:26<00:39,  3.30it/s][A
 41%|████      | 90/221 [00:27<00:39,  3.30it/s][A
 41%|████      | 91/221 [00:27<00:39,  3.30it/s][A
 42%|████▏     | 92/221 [00:27<00:39,  3.31it/s][A
 42%|████▏     | 93/221 [00:28<00:38,  3.31it/s][A
 43%|████▎     | 94/221 [00:28<00:38,  3.31it/s][A
 43%|████▎     | 95/221 [00:28<00:38,  3.31it/s][A
 43%|████▎     | 96/221 [00:29<00:37,  3.31it/s][A
 44%|████▍     | 97/221 [00:29<00:37,  3.31it/s][A
 44%|████▍     | 98/221 [00:29<00:37,  3.31it/s][A
 45%|████▍     | 99/221 [00:29<00:36,  3.31it/s][A
 45%|████▌     | 100/221 [00:30<00:36,  3.31it/s][A
 46%|████▌     | 101/221 [00:30<00:36,  3.31it/s][A
 46%|████▌     | 102/221 [00:30<00:36,  3.30it/s][A
 47%|████▋     | 103/221 [00:31<00:35,  3.30it/s][A
 47%|████▋     | 104/221 [00:31<00:35,  3.30it/s][A
 48%|████▊     | 105/221 [00:31<00:35,  3.30it/s][A
 48%|████▊     | 106/221 [00:32<00:34,  3.30it/s][A
 48%|████▊     | 107/221 [00:32<00:34,  3.30it/s][A
 49%|████▉     | 108/221 [00:32<00:34,  3.30it/s][A
 49%|████▉     | 109/221 [00:32<00:33,  3.30it/s][A
 50%|████▉     | 110/221 [00:33<00:33,  3.30it/s][A
 50%|█████     | 111/221 [00:33<00:33,  3.30it/s][A
 51%|█████     | 112/221 [00:33<00:32,  3.30it/s][A
 51%|█████     | 113/221 [00:34<00:32,  3.30it/s][A
 52%|█████▏    | 114/221 [00:34<00:32,  3.30it/s][A
 52%|█████▏    | 115/221 [00:34<00:32,  3.30it/s][A
 52%|█████▏    | 116/221 [00:35<00:31,  3.30it/s][A
 53%|█████▎    | 117/221 [00:35<00:31,  3.30it/s][A
 53%|█████▎    | 118/221 [00:35<00:31,  3.30it/s][A
 54%|█████▍    | 119/221 [00:36<00:30,  3.30it/s][A
 54%|█████▍    | 120/221 [00:36<00:30,  3.30it/s][A
 55%|█████▍    | 121/221 [00:36<00:30,  3.30it/s][A
 55%|█████▌    | 122/221 [00:36<00:29,  3.30it/s][A
 56%|█████▌    | 123/221 [00:37<00:29,  3.30it/s][A
 56%|█████▌    | 124/221 [00:37<00:29,  3.30it/s][A
 57%|█████▋    | 125/221 [00:37<00:29,  3.30it/s][A
 57%|█████▋    | 126/221 [00:38<00:28,  3.30it/s][A
 57%|█████▋    | 127/221 [00:38<00:28,  3.30it/s][A
 58%|█████▊    | 128/221 [00:38<00:28,  3.30it/s][A
 58%|█████▊    | 129/221 [00:39<00:27,  3.30it/s][A
 59%|█████▉    | 130/221 [00:39<00:27,  3.30it/s][A
 59%|█████▉    | 131/221 [00:39<00:27,  3.30it/s][A
 60%|█████▉    | 132/221 [00:39<00:26,  3.30it/s][A
 60%|██████    | 133/221 [00:40<00:26,  3.30it/s][A
 61%|██████    | 134/221 [00:40<00:26,  3.30it/s][A
 61%|██████    | 135/221 [00:40<00:26,  3.30it/s][A
 62%|██████▏   | 136/221 [00:41<00:25,  3.30it/s][A
 62%|██████▏   | 137/221 [00:41<00:25,  3.30it/s][A
 62%|██████▏   | 138/221 [00:41<00:25,  3.30it/s][A
 63%|██████▎   | 139/221 [00:42<00:24,  3.30it/s][A
 63%|██████▎   | 140/221 [00:42<00:24,  3.30it/s][A
 64%|██████▍   | 141/221 [00:42<00:24,  3.30it/s][A
 64%|██████▍   | 142/221 [00:42<00:23,  3.30it/s][A
 65%|██████▍   | 143/221 [00:43<00:23,  3.31it/s][A
 65%|██████▌   | 144/221 [00:43<00:23,  3.31it/s][A
 66%|██████▌   | 145/221 [00:43<00:22,  3.31it/s][A
 66%|██████▌   | 146/221 [00:44<00:22,  3.31it/s][A
 67%|██████▋   | 147/221 [00:44<00:22,  3.31it/s][A
 67%|██████▋   | 148/221 [00:44<00:22,  3.31it/s][A
 67%|██████▋   | 149/221 [00:45<00:21,  3.31it/s][A
 68%|██████▊   | 150/221 [00:45<00:21,  3.30it/s][A
 68%|██████▊   | 151/221 [00:45<00:21,  3.30it/s][A
 69%|██████▉   | 152/221 [00:46<00:20,  3.30it/s][A
 69%|██████▉   | 153/221 [00:46<00:20,  3.30it/s][A
 70%|██████▉   | 154/221 [00:46<00:20,  3.30it/s][A
 70%|███████   | 155/221 [00:46<00:19,  3.30it/s][A
 71%|███████   | 156/221 [00:47<00:19,  3.30it/s][A
 71%|███████   | 157/221 [00:47<00:19,  3.30it/s][A
 71%|███████▏  | 158/221 [00:47<00:19,  3.30it/s][A
 72%|███████▏  | 159/221 [00:48<00:18,  3.30it/s][A
 72%|███████▏  | 160/221 [00:48<00:18,  3.30it/s][A
 73%|███████▎  | 161/221 [00:48<00:18,  3.30it/s][A
 73%|███████▎  | 162/221 [00:49<00:17,  3.30it/s][A
 74%|███████▍  | 163/221 [00:49<00:17,  3.30it/s][A
 74%|███████▍  | 164/221 [00:49<00:17,  3.31it/s][A
 75%|███████▍  | 165/221 [00:49<00:16,  3.30it/s][A
 75%|███████▌  | 166/221 [00:50<00:16,  3.30it/s][A
 76%|███████▌  | 167/221 [00:50<00:16,  3.30it/s][A
 76%|███████▌  | 168/221 [00:50<00:16,  3.30it/s][A
 76%|███████▋  | 169/221 [00:51<00:15,  3.30it/s][A
 77%|███████▋  | 170/221 [00:51<00:15,  3.30it/s][A
 77%|███████▋  | 171/221 [00:51<00:15,  3.30it/s][A
 78%|███████▊  | 172/221 [00:52<00:14,  3.30it/s][A
 78%|███████▊  | 173/221 [00:52<00:14,  3.30it/s][A
 79%|███████▊  | 174/221 [00:52<00:14,  3.30it/s][A
 79%|███████▉  | 175/221 [00:52<00:13,  3.31it/s][A
 80%|███████▉  | 176/221 [00:53<00:13,  3.31it/s][A
 80%|████████  | 177/221 [00:53<00:13,  3.31it/s][A
 81%|████████  | 178/221 [00:53<00:13,  3.31it/s][A
 81%|████████  | 179/221 [00:54<00:12,  3.31it/s][A
 81%|████████▏ | 180/221 [00:54<00:12,  3.31it/s][A
 82%|████████▏ | 181/221 [00:54<00:12,  3.31it/s][A
 82%|████████▏ | 182/221 [00:55<00:11,  3.31it/s][A
 83%|████████▎ | 183/221 [00:55<00:11,  3.31it/s][A
 83%|████████▎ | 184/221 [00:55<00:11,  3.31it/s][A
 84%|████████▎ | 185/221 [00:55<00:10,  3.31it/s][A
 84%|████████▍ | 186/221 [00:56<00:10,  3.31it/s][A
 85%|████████▍ | 187/221 [00:56<00:10,  3.30it/s][A
 85%|████████▌ | 188/221 [00:56<00:09,  3.30it/s][A
 86%|████████▌ | 189/221 [00:57<00:09,  3.30it/s][A
 86%|████████▌ | 190/221 [00:57<00:09,  3.30it/s][A
 86%|████████▋ | 191/221 [00:57<00:09,  3.30it/s][A
 87%|████████▋ | 192/221 [00:58<00:08,  3.30it/s][A
 87%|████████▋ | 193/221 [00:58<00:08,  3.30it/s][A
 88%|████████▊ | 194/221 [00:58<00:08,  3.30it/s][A
 88%|████████▊ | 195/221 [00:59<00:07,  3.31it/s][A
 89%|████████▊ | 196/221 [00:59<00:07,  3.31it/s][A
 89%|████████▉ | 197/221 [00:59<00:07,  3.31it/s][A
 90%|████████▉ | 198/221 [00:59<00:06,  3.31it/s][A
 90%|█████████ | 199/221 [01:00<00:06,  3.31it/s][A
 90%|█████████ | 200/221 [01:00<00:06,  3.31it/s][A
 91%|█████████ | 201/221 [01:00<00:06,  3.31it/s][A
 91%|█████████▏| 202/221 [01:01<00:05,  3.31it/s][A
 92%|█████████▏| 203/221 [01:01<00:05,  3.31it/s][A
 92%|█████████▏| 204/221 [01:01<00:05,  3.31it/s][A
 93%|█████████▎| 205/221 [01:02<00:04,  3.31it/s][A
 93%|█████████▎| 206/221 [01:02<00:04,  3.31it/s][A
 94%|█████████▎| 207/221 [01:02<00:04,  3.31it/s][A
 94%|█████████▍| 208/221 [01:02<00:03,  3.31it/s][A
 95%|█████████▍| 209/221 [01:03<00:03,  3.31it/s][A
 95%|█████████▌| 210/221 [01:03<00:03,  3.31it/s][A
 95%|█████████▌| 211/221 [01:03<00:03,  3.30it/s][A
 96%|█████████▌| 212/221 [01:04<00:02,  3.31it/s][A
 96%|█████████▋| 213/221 [01:04<00:02,  3.31it/s][A
 97%|█████████▋| 214/221 [01:04<00:02,  3.30it/s][A
 97%|█████████▋| 215/221 [01:05<00:01,  3.30it/s][A
 98%|█████████▊| 216/221 [01:05<00:01,  3.30it/s][A
 98%|█████████▊| 217/221 [01:05<00:01,  3.30it/s][A
 99%|█████████▊| 218/221 [01:05<00:00,  3.30it/s][A
 99%|█████████▉| 219/221 [01:06<00:00,  3.30it/s][A
100%|█████████▉| 220/221 [01:06<00:00,  3.30it/s][A
100%|██████████| 221/221 [01:06<00:00,  3.30it/s][A100%|██████████| 221/221 [01:06<00:00,  3.30it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:50,  4.34it/s][A
  1%|          | 2/221 [00:00<01:45,  2.08it/s][A
  1%|▏         | 3/221 [00:01<01:13,  2.95it/s][A
  2%|▏         | 4/221 [00:01<01:08,  3.16it/s][A
  2%|▏         | 5/221 [00:01<01:01,  3.53it/s][A
  3%|▎         | 7/221 [00:02<00:54,  3.92it/s][A
  4%|▎         | 8/221 [00:02<01:04,  3.31it/s][A
  4%|▍         | 9/221 [00:02<01:11,  2.95it/s][A
  5%|▍         | 10/221 [00:03<01:28,  2.37it/s][A
  5%|▍         | 11/221 [00:03<01:15,  2.78it/s][A
  5%|▌         | 12/221 [00:04<01:11,  2.92it/s][A
  6%|▌         | 13/221 [00:04<01:28,  2.35it/s][A
  6%|▋         | 14/221 [00:04<01:09,  2.97it/s][A
  7%|▋         | 15/221 [00:04<00:54,  3.75it/s][A
  7%|▋         | 16/221 [00:05<01:06,  3.07it/s][A
  8%|▊         | 17/221 [00:06<01:33,  2.19it/s][A
  8%|▊         | 18/221 [00:06<01:27,  2.32it/s][A
  9%|▊         | 19/221 [00:07<01:33,  2.17it/s][A
  9%|▉         | 20/221 [00:07<01:11,  2.81it/s][A
 10%|▉         | 21/221 [00:07<01:00,  3.30it/s][A
 10%|▉         | 22/221 [00:07<00:56,  3.55it/s][A
 10%|█         | 23/221 [00:07<00:47,  4.14it/s][A
 11%|█         | 24/221 [00:07<00:43,  4.55it/s][A
 11%|█▏        | 25/221 [00:08<00:58,  3.37it/s][A
 12%|█▏        | 26/221 [00:08<00:57,  3.41it/s][A
 13%|█▎        | 28/221 [00:09<01:16,  2.51it/s][A
 13%|█▎        | 29/221 [00:09<01:05,  2.91it/s][A
 14%|█▎        | 30/221 [00:10<01:10,  2.70it/s][A
 14%|█▍        | 31/221 [00:10<01:12,  2.63it/s][A
 14%|█▍        | 32/221 [00:10<00:58,  3.25it/s][A
 15%|█▍        | 33/221 [00:10<00:50,  3.69it/s][A
 15%|█▌        | 34/221 [00:11<00:41,  4.51it/s][A
 16%|█▌        | 35/221 [00:11<00:40,  4.64it/s][A
 16%|█▋        | 36/221 [00:11<00:48,  3.81it/s][A
 17%|█▋        | 37/221 [00:11<00:52,  3.51it/s][A
 17%|█▋        | 38/221 [00:12<01:01,  2.95it/s][A
 18%|█▊        | 39/221 [00:12<00:49,  3.66it/s][A
 18%|█▊        | 40/221 [00:13<01:02,  2.88it/s][A
 19%|█▊        | 41/221 [00:13<00:56,  3.20it/s][A
 19%|█▉        | 42/221 [00:13<00:51,  3.46it/s][A
 19%|█▉        | 43/221 [00:13<00:47,  3.76it/s][A
 20%|█▉        | 44/221 [00:13<00:40,  4.39it/s][A
 20%|██        | 45/221 [00:14<00:44,  4.00it/s][A
 21%|██        | 46/221 [00:14<00:40,  4.30it/s][A
 21%|██▏       | 47/221 [00:14<00:45,  3.83it/s][A
 22%|██▏       | 48/221 [00:14<00:38,  4.49it/s][A
 22%|██▏       | 49/221 [00:15<00:35,  4.79it/s][A
 23%|██▎       | 50/221 [00:15<00:31,  5.37it/s][A
 23%|██▎       | 51/221 [00:15<00:28,  6.07it/s][A
 24%|██▎       | 52/221 [00:15<00:27,  6.19it/s][A
 24%|██▍       | 53/221 [00:15<00:32,  5.13it/s][A
 24%|██▍       | 54/221 [00:16<00:41,  4.03it/s][A
 25%|██▍       | 55/221 [00:16<00:35,  4.74it/s][A
 25%|██▌       | 56/221 [00:16<00:35,  4.61it/s][A
 26%|██▌       | 57/221 [00:16<00:31,  5.21it/s][A
 26%|██▌       | 58/221 [00:16<00:34,  4.69it/s][A
 27%|██▋       | 59/221 [00:17<00:32,  5.01it/s][A
 27%|██▋       | 60/221 [00:17<00:43,  3.66it/s][A
 28%|██▊       | 61/221 [00:17<00:44,  3.63it/s][A
 28%|██▊       | 62/221 [00:17<00:41,  3.87it/s][A
 29%|██▊       | 63/221 [00:18<00:47,  3.31it/s][A
 29%|██▉       | 64/221 [00:18<00:48,  3.26it/s][A
 29%|██▉       | 65/221 [00:19<01:05,  2.39it/s][A
 30%|██▉       | 66/221 [00:19<00:51,  3.00it/s][A
 30%|███       | 67/221 [00:19<00:55,  2.76it/s][A
 31%|███       | 68/221 [00:20<00:43,  3.49it/s][A
 32%|███▏      | 70/221 [00:20<00:34,  4.40it/s][A
 32%|███▏      | 71/221 [00:20<00:36,  4.09it/s][A
 33%|███▎      | 72/221 [00:21<00:45,  3.28it/s][A
 33%|███▎      | 73/221 [00:21<00:51,  2.85it/s][A
 33%|███▎      | 74/221 [00:21<00:48,  3.02it/s][A
 34%|███▍      | 75/221 [00:22<00:48,  3.03it/s][A
 34%|███▍      | 76/221 [00:22<00:40,  3.62it/s][A
 35%|███▍      | 77/221 [00:22<00:37,  3.89it/s][A
 35%|███▌      | 78/221 [00:22<00:39,  3.64it/s][A
 36%|███▌      | 79/221 [00:23<00:49,  2.86it/s][A
 36%|███▌      | 80/221 [00:23<00:45,  3.09it/s][A
 37%|███▋      | 81/221 [00:23<00:39,  3.54it/s][A
 37%|███▋      | 82/221 [00:24<00:39,  3.49it/s][A
 38%|███▊      | 83/221 [00:24<00:48,  2.85it/s][A
 38%|███▊      | 84/221 [00:25<00:50,  2.70it/s][A
 38%|███▊      | 85/221 [00:25<00:50,  2.68it/s][A
 39%|███▉      | 86/221 [00:25<00:43,  3.08it/s][A
 39%|███▉      | 87/221 [00:26<01:09,  1.93it/s][A
 40%|███▉      | 88/221 [00:27<01:03,  2.10it/s][A
 40%|████      | 89/221 [00:27<00:54,  2.43it/s][A
 41%|████      | 90/221 [00:27<00:49,  2.67it/s][A
 41%|████      | 91/221 [00:27<00:41,  3.16it/s][A
 42%|████▏     | 92/221 [00:27<00:38,  3.32it/s][A
 42%|████▏     | 93/221 [00:28<00:30,  4.15it/s][A
 43%|████▎     | 94/221 [00:28<00:29,  4.34it/s][A
 43%|████▎     | 95/221 [00:28<00:32,  3.83it/s][A
 43%|████▎     | 96/221 [00:28<00:29,  4.24it/s][A
 44%|████▍     | 97/221 [00:29<00:29,  4.24it/s][A
 44%|████▍     | 98/221 [00:29<00:30,  4.08it/s][A
 45%|████▍     | 99/221 [00:29<00:25,  4.85it/s][A
 45%|████▌     | 100/221 [00:29<00:24,  4.96it/s][A
 46%|████▌     | 101/221 [00:29<00:27,  4.43it/s][A
 46%|████▌     | 102/221 [00:30<00:28,  4.23it/s][A
 47%|████▋     | 103/221 [00:30<00:25,  4.57it/s][A
 47%|████▋     | 104/221 [00:30<00:24,  4.75it/s][A
 48%|████▊     | 105/221 [00:30<00:22,  5.26it/s][A
 48%|████▊     | 106/221 [00:31<00:27,  4.12it/s][A
 48%|████▊     | 107/221 [00:31<00:27,  4.09it/s][A
 49%|████▉     | 108/221 [00:31<00:31,  3.61it/s][A
 49%|████▉     | 109/221 [00:32<00:47,  2.35it/s][A
 50%|████▉     | 110/221 [00:32<00:45,  2.43it/s][A
 50%|█████     | 111/221 [00:33<00:46,  2.38it/s][A
 51%|█████     | 112/221 [00:33<00:38,  2.82it/s][A
 51%|█████     | 113/221 [00:33<00:38,  2.81it/s][A
 52%|█████▏    | 115/221 [00:33<00:24,  4.27it/s][A
 53%|█████▎    | 117/221 [00:34<00:23,  4.39it/s][A
 53%|█████▎    | 118/221 [00:34<00:28,  3.66it/s][A
 54%|█████▍    | 119/221 [00:35<00:33,  3.00it/s][A
 54%|█████▍    | 120/221 [00:35<00:35,  2.87it/s][A
 55%|█████▌    | 122/221 [00:36<00:26,  3.69it/s][A
 56%|█████▌    | 123/221 [00:36<00:29,  3.33it/s][A
 56%|█████▌    | 124/221 [00:36<00:31,  3.10it/s][A
 57%|█████▋    | 125/221 [00:37<00:33,  2.88it/s][A
 57%|█████▋    | 126/221 [00:37<00:30,  3.09it/s][A
 57%|█████▋    | 127/221 [00:37<00:28,  3.28it/s][A
 58%|█████▊    | 128/221 [00:38<00:29,  3.16it/s][A
 58%|█████▊    | 129/221 [00:38<00:25,  3.66it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.38it/s][A
 59%|█████▉    | 131/221 [00:38<00:22,  3.94it/s][A
 60%|█████▉    | 132/221 [00:38<00:19,  4.52it/s][A
 60%|██████    | 133/221 [00:39<00:28,  3.11it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.36it/s][A
 61%|██████    | 135/221 [00:40<00:25,  3.38it/s][A
 62%|██████▏   | 136/221 [00:40<00:25,  3.28it/s][A
 62%|██████▏   | 137/221 [00:40<00:23,  3.52it/s][A
 62%|██████▏   | 138/221 [00:41<00:25,  3.22it/s][A
 63%|██████▎   | 139/221 [00:41<00:23,  3.43it/s][A
 63%|██████▎   | 140/221 [00:41<00:24,  3.31it/s][A
 64%|██████▍   | 142/221 [00:42<00:21,  3.62it/s][A
 65%|██████▍   | 143/221 [00:42<00:19,  3.96it/s][A
 65%|██████▌   | 144/221 [00:42<00:18,  4.16it/s][A
 66%|██████▌   | 145/221 [00:42<00:16,  4.53it/s][A
 66%|██████▌   | 146/221 [00:42<00:16,  4.58it/s][A
 67%|██████▋   | 147/221 [00:42<00:14,  5.16it/s][A
 67%|██████▋   | 148/221 [00:43<00:17,  4.07it/s][A
 68%|██████▊   | 150/221 [00:43<00:19,  3.64it/s][A
 68%|██████▊   | 151/221 [00:44<00:18,  3.85it/s][A
 69%|██████▉   | 152/221 [00:44<00:27,  2.51it/s][A
 69%|██████▉   | 153/221 [00:45<00:28,  2.38it/s][A
 70%|██████▉   | 154/221 [00:45<00:30,  2.22it/s][A
 70%|███████   | 155/221 [00:46<00:27,  2.38it/s][A
 71%|███████   | 156/221 [00:46<00:31,  2.08it/s][A
 71%|███████   | 157/221 [00:47<00:28,  2.22it/s][A
 71%|███████▏  | 158/221 [00:47<00:24,  2.56it/s][A
 72%|███████▏  | 159/221 [00:47<00:23,  2.68it/s][A
 72%|███████▏  | 160/221 [00:48<00:21,  2.80it/s][A
 73%|███████▎  | 161/221 [00:48<00:17,  3.45it/s][A
 74%|███████▍  | 163/221 [00:48<00:15,  3.79it/s][A
 74%|███████▍  | 164/221 [00:49<00:16,  3.46it/s][A
 75%|███████▌  | 166/221 [00:49<00:17,  3.22it/s][A
 76%|███████▌  | 168/221 [00:50<00:13,  4.00it/s][A
 76%|███████▋  | 169/221 [00:50<00:12,  4.19it/s][A
 77%|███████▋  | 170/221 [00:50<00:14,  3.61it/s][A
 77%|███████▋  | 171/221 [00:51<00:15,  3.29it/s][A
 78%|███████▊  | 173/221 [00:51<00:10,  4.37it/s][A
 79%|███████▊  | 174/221 [00:51<00:11,  4.25it/s][A
 79%|███████▉  | 175/221 [00:51<00:11,  4.13it/s][A
 80%|███████▉  | 176/221 [00:52<00:12,  3.70it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.58it/s][A
 81%|████████  | 178/221 [00:52<00:11,  3.72it/s][A
 81%|████████  | 179/221 [00:53<00:12,  3.45it/s][A
 81%|████████▏ | 180/221 [00:53<00:10,  3.99it/s][A
 82%|████████▏ | 181/221 [00:53<00:09,  4.35it/s][A
 82%|████████▏ | 182/221 [00:53<00:10,  3.61it/s][A
 83%|████████▎ | 183/221 [00:54<00:09,  4.04it/s][A
 83%|████████▎ | 184/221 [00:54<00:13,  2.77it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.36it/s][A
 85%|████████▍ | 187/221 [00:55<00:07,  4.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.41it/s][A
 86%|████████▌ | 189/221 [00:56<00:11,  2.69it/s][A
 86%|████████▌ | 190/221 [00:56<00:13,  2.37it/s][A
 86%|████████▋ | 191/221 [00:57<00:11,  2.61it/s][A
 87%|████████▋ | 192/221 [00:57<00:10,  2.68it/s][A
 88%|████████▊ | 194/221 [00:58<00:12,  2.25it/s][A
 88%|████████▊ | 195/221 [00:59<00:12,  2.04it/s][A
 89%|████████▊ | 196/221 [00:59<00:11,  2.24it/s][A
 89%|████████▉ | 197/221 [00:59<00:09,  2.63it/s][A
 90%|████████▉ | 198/221 [00:59<00:07,  3.08it/s][A
 90%|█████████ | 200/221 [01:00<00:07,  2.91it/s][A
 91%|█████████ | 201/221 [01:00<00:06,  3.20it/s][A
 91%|█████████▏| 202/221 [01:00<00:05,  3.55it/s][A
 92%|█████████▏| 203/221 [01:01<00:04,  4.22it/s][A
 92%|█████████▏| 204/221 [01:01<00:04,  3.72it/s][A
 93%|█████████▎| 205/221 [01:01<00:03,  4.10it/s][A
 93%|█████████▎| 206/221 [01:02<00:04,  3.23it/s][A
 94%|█████████▍| 208/221 [01:02<00:03,  3.66it/s][A
 95%|█████████▍| 209/221 [01:02<00:03,  3.23it/s][A
 95%|█████████▌| 211/221 [01:03<00:02,  3.62it/s][A
 96%|█████████▌| 212/221 [01:03<00:02,  3.57it/s][A
 96%|█████████▋| 213/221 [01:04<00:02,  2.86it/s][A
 97%|█████████▋| 214/221 [01:04<00:02,  3.36it/s][A
 97%|█████████▋| 215/221 [01:04<00:02,  2.95it/s][A
 98%|█████████▊| 216/221 [01:05<00:01,  3.08it/s][A
 98%|█████████▊| 217/221 [01:05<00:01,  2.94it/s][A
 99%|█████████▊| 218/221 [01:05<00:00,  3.37it/s][A
 99%|█████████▉| 219/221 [01:05<00:00,  4.01it/s][A
100%|█████████▉| 220/221 [01:06<00:00,  4.23it/s][A
100%|██████████| 221/221 [01:06<00:00,  3.37it/s][A100%|██████████| 221/221 [01:06<00:00,  3.32it/s]
09/10/2024 21:31:15 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_area_forward=====step 249--===========

09/10/2024 21:31:15 - INFO - __main__ -   {'area_r1': 41.4, 'area_recall': '41.4/67.9/76.0', 'area_ravg': 61.8}
09/10/2024 21:31:15 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_area_backard=====step 249--===========

09/10/2024 21:31:15 - INFO - __main__ -   {'forward_r1': 37.2, 'forward_recall': '37.2/63.0/72.9', 'forward_ravg': 57.7}
09/10/2024 21:31:15 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_area_back_with_video=====step 249--===========

09/10/2024 21:31:15 - INFO - __main__ -   {'area_video_r1': 41.3, 'area_video_recall': '41.3/66.6/77.7', 'area_video_ravg': 61.9}
09/10/2024 21:31:15 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_area_back_with_video====history best step: 249=======

09/10/2024 21:31:15 - INFO - __main__ -   {'area_video_r1': 41.3, 'area_video_recall': '41.3/66.6/77.7', 'area_video_ravg': 61.9}
09/10/2024 21:31:15 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_itm_area=====step 249--===========

09/10/2024 21:31:15 - INFO - __main__ -   {'area_video_r1': 51.5, 'area_video_recall': '51.5/72.2/80.8', 'area_video_ravg': 68.1, 'area_video_back_r1': 49.1, 'area_video_back_recall': '49.1/70.7/79.1', 'area_video_back_ravg': 66.3}
09/10/2024 21:31:15 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_itm_area====history best step: 49=======

09/10/2024 21:31:15 - INFO - __main__ -   {'area_video_r1': 53.4, 'area_video_recall': '53.4/75.5/82.6', 'area_video_ravg': 70.5, 'area_video_back_r1': 51.4, 'area_video_back_recall': '51.4/73.1/80.9', 'area_video_back_ravg': 68.4}
09/10/2024 21:31:15 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_itc_tvas=====step 249--===========

09/10/2024 21:31:15 - INFO - __main__ -   {'video_r1': 29.6, 'video_recall': '29.6/55.0/66.7', 'video_ravg': 50.5}
09/10/2024 21:31:15 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_itc_tvas====history best step: 199=======

09/10/2024 21:31:15 - INFO - __main__ -   {'video_r1': 32.2, 'video_recall': '32.2/57.6/68.4', 'video_ravg': 52.8}
09/10/2024 21:31:15 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_itm_tvas=====step 249--===========

09/10/2024 21:31:15 - INFO - __main__ -   {'video_r1': 49.7, 'video_recall': '49.7/69.6/76.9', 'video_ravg': 65.4}
09/10/2024 21:31:15 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_itm_tvas====history best step: 49=======

09/10/2024 21:31:15 - INFO - __main__ -   {'video_r1': 52.6, 'video_recall': '52.6/72.3/77.8', 'video_ravg': 67.6}
09/10/2024 21:31:42 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.0005603863392025232, 'loss_ret%tv%ta--finetune_area/loss_area': 1.6768088340759277, 'loss_ret%tv%ta--finetune_area/total_loss': 1.677369236946106}
 13%|█▎        | 250/1945 [1:24:06<62:19:12, 132.36s/it][h264 @ 0x564391b68fc0] mmco: unref short failure
[h264 @ 0x55edf07fa300] mmco: unref short failure
[h264 @ 0x55edf07fa300] mmco: unref short failure
 13%|█▎        | 251/1945 [1:24:09<44:05:59, 93.72s/it] [h264 @ 0x55a84504ff00] mmco: unref short failure
[h264 @ 0x5643b51339c0] mmco: unref short failure
[h264 @ 0x5643b51339c0] mmco: unref short failure
[h264 @ 0x5643a67a58c0] mmco: unref short failure
[h264 @ 0x5643a67a58c0] mmco: unref short failure
[h264 @ 0x55a82d93f040] mmco: unref short failure
[h264 @ 0x55a82d93f040] mmco: unref short failure
 13%|█▎        | 252/1945 [1:24:14<31:26:48, 66.87s/it][h264 @ 0x5643949f00c0] mmco: unref short failure
[h264 @ 0x5643949f00c0] mmco: unref short failure
 13%|█▎        | 253/1945 [1:24:18<22:35:50, 48.08s/it][h264 @ 0x56439e98ac40] mmco: unref short failure
[h264 @ 0x56439e98ac40] mmco: unref short failure
[h264 @ 0x55a83031e100] mmco: unref short failure
[h264 @ 0x55a83031e100] mmco: unref short failure
[h264 @ 0x55d5b4980940] mmco: unref short failure
 13%|█▎        | 254/1945 [1:24:23<16:29:14, 35.10s/it] 13%|█▎        | 255/1945 [1:24:27<12:11:47, 25.98s/it][h264 @ 0x55edfda43540] mmco: unref short failure
[h264 @ 0x55edfda43540] mmco: unref short failure
 13%|█▎        | 256/1945 [1:24:33<9:18:25, 19.84s/it]  13%|█▎        | 257/1945 [1:24:39<7:18:58, 15.60s/it][h264 @ 0x5643aa84a400] mmco: unref short failure
[h264 @ 0x5643aa84a400] mmco: unref short failure
[h264 @ 0x55ee12777a80] mmco: unref short failure
[h264 @ 0x55ee12777a80] mmco: unref short failure
 13%|█▎        | 258/1945 [1:24:45<5:58:39, 12.76s/it][h264 @ 0x55a82d93f6c0] mmco: unref short failure
[h264 @ 0x55a82d93f6c0] mmco: unref short failure
[h264 @ 0x55a82d93f6c0] mmco: unref short failure
[h264 @ 0x55a82d93f6c0] mmco: unref short failure
 13%|█▎        | 259/1945 [1:24:51<5:04:16, 10.83s/it] 13%|█▎        | 260/1945 [1:24:57<4:25:00,  9.44s/it] 13%|█▎        | 261/1945 [1:25:03<3:51:09,  8.24s/it] 13%|█▎        | 262/1945 [1:25:08<3:30:59,  7.52s/it][h264 @ 0x55edf2a039c0] mmco: unref short failure
 14%|█▎        | 263/1945 [1:25:15<3:23:45,  7.27s/it][h264 @ 0x55edf245f600] mmco: unref short failure
[h264 @ 0x55d5c1790c80] mmco: unref short failure
[h264 @ 0x55d5c1790c80] mmco: unref short failure
 14%|█▎        | 264/1945 [1:25:22<3:19:47,  7.13s/it] 14%|█▎        | 265/1945 [1:25:28<3:07:02,  6.68s/it][h264 @ 0x564391fe9340] mmco: unref short failure
[h264 @ 0x564391fe9340] mmco: unref short failure
[h264 @ 0x55edf9bb60c0] mmco: unref short failure
[h264 @ 0x55d5bc756740] mmco: unref short failure
[h264 @ 0x55a82d5ad000] mmco: unref short failure
[h264 @ 0x55a82d5ad000] mmco: unref short failure
[h264 @ 0x55a82d5ad000] mmco: unref short failure
[h264 @ 0x55ee00a863c0] mmco: unref short failure
[h264 @ 0x55ee00a863c0] mmco: unref short failure
[h264 @ 0x55ee00a863c0] mmco: unref short failure
[h264 @ 0x55ee00a863c0] mmco: unref short failure
[h264 @ 0x55a84c151a80] mmco: unref short failure
[h264 @ 0x55a84c151a80] mmco: unref short failure
 14%|█▎        | 266/1945 [1:25:49<5:07:35, 10.99s/it][h264 @ 0x55a834c90180] mmco: unref short failure
[h264 @ 0x55a834c90180] mmco: unref short failure
[h264 @ 0x5643ad232700] mmco: unref short failure
[h264 @ 0x55edf9bb60c0] mmco: unref short failure
[h264 @ 0x55a8307f1180] mmco: unref short failure
[h264 @ 0x55a8307f1180] mmco: unref short failure
[h264 @ 0x55d5b548bc40] mmco: unref short failure
[h264 @ 0x55d5b548bc40] mmco: unref short failure
[h264 @ 0x5643adbcab00] mmco: unref short failure
[h264 @ 0x5643adbcab00] mmco: unref short failure
[h264 @ 0x5643adbcab00] mmco: unref short failure
[h264 @ 0x5643adbcab00] mmco: unref short failure
[h264 @ 0x55d5c8ce5b40] mmco: unref short failure
 14%|█▎        | 267/1945 [1:26:03<5:32:28, 11.89s/it][h264 @ 0x5643a7abea80] mmco: unref short failure
[h264 @ 0x5643a7abea80] mmco: unref short failure
[h264 @ 0x55a84dafd580] mmco: unref short failure
[h264 @ 0x55a84bcbc680] mmco: unref short failure
[h264 @ 0x5643944c0f80] mmco: unref short failure
[h264 @ 0x5643944c0f80] mmco: unref short failure
 14%|█▍        | 268/1945 [1:26:08<4:34:57,  9.84s/it][h264 @ 0x55ee09144f80] mmco: unref short failure
[h264 @ 0x55ee09144f80] mmco: unref short failure
[h264 @ 0x55a836b63340] mmco: unref short failure
[h264 @ 0x55a836b63340] mmco: unref short failure
[h264 @ 0x55d5cabaac00] mmco: unref short failure
[h264 @ 0x55d5cabaac00] mmco: unref short failure
[h264 @ 0x55d5b4bfe740] mmco: unref short failure
 14%|█▍        | 269/1945 [1:26:22<5:10:15, 11.11s/it][h264 @ 0x55a83b026fc0] mmco: unref short failure
[h264 @ 0x55a83b026fc0] mmco: unref short failure
 14%|█▍        | 270/1945 [1:26:27<4:22:34,  9.41s/it] 14%|█▍        | 271/1945 [1:26:34<3:58:59,  8.57s/it] 14%|█▍        | 272/1945 [1:26:39<3:32:41,  7.63s/it][h264 @ 0x55d5b0b48d40] mmco: unref short failure
[h264 @ 0x55d5b0b48d40] mmco: unref short failure
[h264 @ 0x56439d1b7740] mmco: unref short failure
[h264 @ 0x564391fe8f00] mmco: unref short failure
[h264 @ 0x564391fe8f00] mmco: unref short failure
 14%|█▍        | 273/1945 [1:26:54<4:31:56,  9.76s/it][h264 @ 0x55edf3b09980] mmco: unref short failure
[h264 @ 0x55edf3b09980] mmco: unref short failure
[h264 @ 0x55d5c6ad6380] mmco: unref short failure
[h264 @ 0x55d5b97fbcc0] mmco: unref short failure
[h264 @ 0x55a8439cb3c0] mmco: unref short failure
[h264 @ 0x55a8439cb3c0] mmco: unref short failure
[h264 @ 0x55d5bd76fc40] mmco: unref short failure
[h264 @ 0x55d5bf8b8e40] mmco: unref short failure
[h264 @ 0x55d5bf8b8e40] mmco: unref short failure
[h264 @ 0x55a848126100] mmco: unref short failure
[h264 @ 0x55a848126100] mmco: unref short failure
[h264 @ 0x55a848864f80] mmco: unref short failure
[h264 @ 0x55a848864f80] mmco: unref short failure
[h264 @ 0x55a845050580] mmco: unref short failure
[h264 @ 0x55a845050580] mmco: unref short failure
[h264 @ 0x55a84c291740] mmco: unref short failure
[h264 @ 0x55d5bf68f480] mmco: unref short failure
[h264 @ 0x55d5bf68f480] mmco: unref short failure
[h264 @ 0x55d5bf68f480] mmco: unref short failure
[h264 @ 0x55d5bf68f480] mmco: unref short failure
[h264 @ 0x5643a9f264c0] mmco: unref short failure
[h264 @ 0x5643a9f264c0] mmco: unref short failure
[h264 @ 0x55ee0d0d0b40] mmco: unref short failure
[h264 @ 0x55ee0d0d0b40] mmco: unref short failure
[h264 @ 0x55a835370980] mmco: unref short failure
[h264 @ 0x55a835370980] mmco: unref short failure
[h264 @ 0x55a835370980] mmco: unref short failure
[h264 @ 0x55a835370980] mmco: unref short failure
[h264 @ 0x55a835370c00] mmco: unref short failure
[h264 @ 0x55a835370c00] mmco: unref short failure
 14%|█▍        | 274/1945 [1:27:44<10:06:45, 21.79s/it][h264 @ 0x55a83212f440] mmco: unref short failure
[h264 @ 0x55a83212f440] mmco: unref short failure
[h264 @ 0x55a841994a00] mmco: unref short failure
[h264 @ 0x55a83f8b9fc0] mmco: unref short failure
[h264 @ 0x55a83f8b9fc0] mmco: unref short failure
[h264 @ 0x55a83f8b9fc0] mmco: unref short failure
[h264 @ 0x55a83f8b9fc0] mmco: unref short failure
[h264 @ 0x55d5b3155040] mmco: unref short failure
[h264 @ 0x55a83b027240] mmco: unref short failure
[h264 @ 0x55d5ccb23a80] mmco: unref short failure
[h264 @ 0x55d5ccb23a80] mmco: unref short failure
[h264 @ 0x55edfac8fa40] mmco: unref short failure
[h264 @ 0x55a8383e28c0] mmco: unref short failure
[h264 @ 0x55a8383e28c0] mmco: unref short failure
[h264 @ 0x55a8383e28c0] mmco: unref short failure
[h264 @ 0x55a8383e28c0] mmco: unref short failure
[h264 @ 0x55a8383e28c0] mmco: unref short failure
 14%|█▍        | 275/1945 [1:28:11<10:51:07, 23.39s/it] 14%|█▍        | 276/1945 [1:28:18<8:30:48, 18.36s/it]  14%|█▍        | 277/1945 [1:28:24<6:50:27, 14.76s/it] 14%|█▍        | 278/1945 [1:28:31<5:43:38, 12.37s/it][h264 @ 0x55a82fdce240] mmco: unref short failure
 14%|█▍        | 279/1945 [1:28:41<5:22:44, 11.62s/it][h264 @ 0x55edfb1e7c00] mmco: unref short failure
 14%|█▍        | 280/1945 [1:28:50<5:03:05, 10.92s/it][h264 @ 0x5643950a4040] mmco: unref short failure
[h264 @ 0x5643950a4040] mmco: unref short failure
[h264 @ 0x564393fa7440] mmco: unref short failure
 14%|█▍        | 281/1945 [1:29:00<4:57:37, 10.73s/it][h264 @ 0x55edf47b5bc0] mmco: unref short failure
[h264 @ 0x55edf47b5bc0] mmco: unref short failure
[h264 @ 0x55ee08064980] mmco: unref short failure
[h264 @ 0x55a82fb0a5c0] mmco: unref short failure
[h264 @ 0x55a833a9ec80] mmco: unref short failure
[h264 @ 0x55d5c21d8000] mmco: unref short failure
[h264 @ 0x55d5ce0fa0c0] mmco: unref short failure
[h264 @ 0x55d5ce0fa0c0] mmco: unref short failure
[h264 @ 0x55a82dc4ce80] mmco: unref short failure
[h264 @ 0x55ee0ef02a40] mmco: unref short failure
[h264 @ 0x55d5c2145180] mmco: unref short failure
[h264 @ 0x55d5c2145180] mmco: unref short failure
[h264 @ 0x55d5c3d15e40] mmco: unref short failure
[h264 @ 0x55d5c3d15e40] mmco: unref short failure
 14%|█▍        | 282/1945 [1:29:50<10:19:26, 22.35s/it][h264 @ 0x55a84a229080] mmco: unref short failure
[h264 @ 0x55a84a229080] mmco: unref short failure
[h264 @ 0x55a849240040] mmco: unref short failure
[h264 @ 0x55a849240040] mmco: unref short failure
[h264 @ 0x55a830acb080] mmco: unref short failure
[h264 @ 0x55d5c963c240] mmco: unref short failure
[h264 @ 0x55d5c963c240] mmco: unref short failure
 15%|█▍        | 283/1945 [1:30:07<9:39:30, 20.92s/it] [h264 @ 0x55a8435b5900] mmco: unref short failure
[h264 @ 0x55a8435b5900] mmco: unref short failure
[h264 @ 0x55d5c3973d00] mmco: unref short failure
 15%|█▍        | 284/1945 [1:30:14<7:41:09, 16.66s/it][h264 @ 0x55d5b11b7940] mmco: unref short failure
[h264 @ 0x56439ee318c0] mmco: unref short failure
[h264 @ 0x55a830acb080] mmco: unref short failure
 15%|█▍        | 285/1945 [1:30:24<6:42:34, 14.55s/it][h264 @ 0x55a845050100] mmco: unref short failure
[h264 @ 0x55a845050100] mmco: unref short failure
[h264 @ 0x5643910263c0] mmco: unref short failure
[h264 @ 0x5643910263c0] mmco: unref short failure
 15%|█▍        | 286/1945 [1:30:30<5:32:07, 12.01s/it][h264 @ 0x55d5b065c1c0] mmco: unref short failure
[h264 @ 0x55d5b359ee80] mmco: unref short failure
 15%|█▍        | 287/1945 [1:30:42<5:35:20, 12.14s/it][h264 @ 0x55d5b5af9840] mmco: unref short failure
[h264 @ 0x55a82dd94880] mmco: unref short failure
 15%|█▍        | 288/1945 [1:30:48<4:47:36, 10.41s/it][h264 @ 0x55a82d0e9980] mmco: unref short failure
[h264 @ 0x55a84b624940] mmco: unref short failure
[h264 @ 0x55edf59514c0] mmco: unref short failure
[h264 @ 0x55edf59514c0] mmco: unref short failure
[h264 @ 0x55d5b5f98b40] mmco: unref short failure
[h264 @ 0x55d5b5f98b40] mmco: unref short failure
[h264 @ 0x55d5b5f98b40] mmco: unref short failure
[h264 @ 0x55d5b5f98b40] mmco: unref short failure
[h264 @ 0x55d5b5f98b40] mmco: unref short failure
[h264 @ 0x55d5b5f98b40] mmco: unref short failure
 15%|█▍        | 289/1945 [1:31:02<5:11:40, 11.29s/it][h264 @ 0x55a83dad0b40] mmco: unref short failure
[h264 @ 0x55ee08dbb000] mmco: unref short failure
[h264 @ 0x55a835e1b7c0] mmco: unref short failure
[h264 @ 0x55d5c2339480] mmco: unref short failure
[h264 @ 0x55a82fd5c040] mmco: unref short failure
[h264 @ 0x564390e4cac0] mmco: unref short failure
 15%|█▍        | 290/1945 [1:31:47<9:48:42, 21.34s/it][h264 @ 0x55a836275140] mmco: unref short failure
[h264 @ 0x55a83af0be80] mmco: unref short failure
[h264 @ 0x55a83af0be80] mmco: unref short failure
[h264 @ 0x5643a541f080] mmco: unref short failure
[h264 @ 0x5643a541f080] mmco: unref short failure
[h264 @ 0x55a82ec3cc40] mmco: unref short failure
[h264 @ 0x55a8337d01c0] mmco: unref short failure
[h264 @ 0x55ee091571c0] mmco: unref short failure
[h264 @ 0x55ee091571c0] mmco: unref short failure
[h264 @ 0x55edf05005c0] mmco: unref short failure
[h264 @ 0x55edf05005c0] mmco: unref short failure
[h264 @ 0x55a840347640] mmco: unref short failure
[h264 @ 0x564392d6d500] mmco: unref short failure
[h264 @ 0x564392d6d500] mmco: unref short failure
[h264 @ 0x564394516cc0] mmco: unref short failure
 15%|█▍        | 291/1945 [1:32:14<10:41:44, 23.28s/it][h264 @ 0x56439f325040] mmco: unref short failure
 15%|█▌        | 292/1945 [1:32:21<8:22:45, 18.25s/it] [h264 @ 0x55d5c1072bc0] mmco: unref short failure
 15%|█▌        | 293/1945 [1:32:30<7:04:01, 15.40s/it][h264 @ 0x55d5b327b000] mmco: unref short failure
[h264 @ 0x55d5b327b000] mmco: unref short failure
 15%|█▌        | 294/1945 [1:32:35<5:42:04, 12.43s/it][h264 @ 0x55d5c7002980] mmco: unref short failure
[h264 @ 0x55d5c7002980] mmco: unref short failure
[h264 @ 0x55d5c7002980] mmco: unref short failure
[h264 @ 0x55d5c7002980] mmco: unref short failure
[h264 @ 0x55ee05e47e00] mmco: unref short failure
[h264 @ 0x55ee05e47e00] mmco: unref short failure
 15%|█▌        | 295/1945 [1:32:44<5:13:20, 11.39s/it][h264 @ 0x55edf0140f00] mmco: unref short failure
[h264 @ 0x55edf0140f00] mmco: unref short failure
[h264 @ 0x55a835a05a80] mmco: unref short failure
[h264 @ 0x55a835a05a80] mmco: unref short failure
 15%|█▌        | 296/1945 [1:32:51<4:33:09,  9.94s/it][h264 @ 0x55edf36d9800] mmco: unref short failure
[h264 @ 0x55a8399d1640] mmco: unref short failure
[h264 @ 0x55a8399d1640] mmco: unref short failure
[h264 @ 0x55a835e0d340] mmco: unref short failure
[h264 @ 0x55a835e0d340] mmco: unref short failure
[h264 @ 0x55a82fb0a5c0] mmco: unref short failure
[h264 @ 0x55a82fb0a5c0] mmco: unref short failure
 15%|█▌        | 297/1945 [1:33:13<6:12:40, 13.57s/it][h264 @ 0x55d5ccf0a3c0] mmco: unref short failure
[h264 @ 0x55edf655f540] mmco: unref short failure
[h264 @ 0x55edf655f540] mmco: unref short failure
[h264 @ 0x55a83c296fc0] mmco: unref short failure
[h264 @ 0x55a83c296fc0] mmco: unref short failure
[h264 @ 0x5643a5422400] mmco: unref short failure
[h264 @ 0x5643a5422400] mmco: unref short failure
[h264 @ 0x55a83714f0c0] mmco: unref short failure
[h264 @ 0x55a83714f0c0] mmco: unref short failure
[h264 @ 0x55a83714f0c0] mmco: unref short failure
[h264 @ 0x55a83714f0c0] mmco: unref short failure
[h264 @ 0x5643a7737f00] mmco: unref short failure
[h264 @ 0x55a835bc81c0] mmco: unref short failure
[h264 @ 0x55a848126100] mmco: unref short failure
[h264 @ 0x55a848126100] mmco: unref short failure
 15%|█▌        | 298/1945 [1:33:50<9:31:29, 20.82s/it][h264 @ 0x55a837a6afc0] mmco: unref short failure
[h264 @ 0x55a837a6afc0] mmco: unref short failure
[h264 @ 0x55d5b884b980] mmco: unref short failure
[h264 @ 0x55d5cb36c540] mmco: unref short failure
[h264 @ 0x55d5cb36c540] mmco: unref short failure
[h264 @ 0x55a84d80fcc0] mmco: unref short failure
[h264 @ 0x5643a27f4f40] mmco: unref short failure
[h264 @ 0x55d5c1863040] mmco: unref short failure
[h264 @ 0x5643a50f1d40] mmco: unref short failure
[h264 @ 0x5643aac86a80] mmco: unref short failure
[h264 @ 0x5643a50f1b40] mmco: unref short failure
[h264 @ 0x5643aee5b080] mmco: unref short failure
[h264 @ 0x5643aee5b080] mmco: unref short failure
[h264 @ 0x55a833e41700] mmco: unref short failure
[h264 @ 0x55a833e41700] mmco: unref short failure
[h264 @ 0x564391ae0500] mmco: unref short failure
 15%|█▌        | 299/1945 [1:34:17<10:21:32, 22.66s/it]09/10/2024 21:41:56 - INFO - __main__ -   evaluate on ret%tvas--msrvtt_ret task
09/10/2024 21:41:56 - INFO - __main__ -   start running ret%tvas validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55edfead4ec0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55a84c129b80] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55d5b11b7c80] mmco: unref short failure
[h264 @ 0x55d5b11b7c80] mmco: unref short failure
[h264 @ 0x5643a7efb740] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55a83985db40] mmco: unref short failure
[h264 @ 0x55a83985db40] mmco: unref short failure
[h264 @ 0x55d5c6efddc0] mmco: unref short failure
[h264 @ 0x55d5c6efddc0] mmco: unref short failure
[h264 @ 0x55d5c6efddc0] mmco: unref short failure
[h264 @ 0x55d5c6efddc0] mmco: unref short failure
[h264 @ 0x55ee06a04040] mmco: unref short failure
[h264 @ 0x55d5b2ae0700] mmco: unref short failure
[h264 @ 0x55ee0757cc40] mmco: unref short failure
[h264 @ 0x55ee0757cc40] mmco: unref short failure
[h264 @ 0x5643996ba700] mmco: unref short failure
[h264 @ 0x56439f165480] mmco: unref short failure
[h264 @ 0x56439f165480] mmco: unref short failure
[h264 @ 0x55a83f9c94c0] mmco: unref short failure
[h264 @ 0x55a83ab671c0] mmco: unref short failure
[h264 @ 0x55a83ab671c0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:19,  2.78it/s][A[h264 @ 0x5643921f4e40] mmco: unref short failure

  1%|          | 2/221 [00:01<01:56,  1.88it/s][A
  1%|▏         | 3/221 [00:01<01:44,  2.09it/s][A
  2%|▏         | 4/221 [00:01<01:43,  2.10it/s][A
  2%|▏         | 5/221 [00:02<01:39,  2.18it/s][A
  3%|▎         | 6/221 [00:02<01:22,  2.59it/s][A
  3%|▎         | 7/221 [00:02<01:24,  2.53it/s][A
  4%|▎         | 8/221 [00:03<01:33,  2.28it/s][A
  4%|▍         | 9/221 [00:04<01:35,  2.21it/s][A[h264 @ 0x55d5c83ee240] mmco: unref short failure
[h264 @ 0x55d5c83ee240] mmco: unref short failure
[h264 @ 0x55edf451f680] mmco: unref short failure
[h264 @ 0x55edf451f680] mmco: unref short failure
[h264 @ 0x55edf451f680] mmco: unref short failure
[h264 @ 0x55edf451f680] mmco: unref short failure
[h264 @ 0x55edf451f680] mmco: unref short failure
[h264 @ 0x55edf451f680] mmco: unref short failure

  5%|▍         | 10/221 [00:04<01:55,  1.82it/s][A
  5%|▍         | 11/221 [00:05<01:48,  1.93it/s][A
  5%|▌         | 12/221 [00:05<01:33,  2.22it/s][A
  6%|▌         | 13/221 [00:06<01:48,  1.92it/s][A
  6%|▋         | 14/221 [00:06<01:27,  2.35it/s][A
  7%|▋         | 15/221 [00:06<01:16,  2.70it/s][A[h264 @ 0x56439518bf00] mmco: unref short failure

  7%|▋         | 16/221 [00:07<01:32,  2.22it/s][A
  8%|▊         | 17/221 [00:08<01:58,  1.72it/s][A
  8%|▊         | 18/221 [00:08<01:40,  2.01it/s][A
  9%|▊         | 19/221 [00:08<01:41,  2.00it/s][A
  9%|▉         | 20/221 [00:09<01:28,  2.26it/s][A
 10%|▉         | 21/221 [00:09<01:15,  2.66it/s][A
 10%|▉         | 22/221 [00:09<01:09,  2.85it/s][A
 10%|█         | 23/221 [00:09<00:56,  3.50it/s][A
 11%|█         | 24/221 [00:10<00:52,  3.74it/s][A
 11%|█▏        | 25/221 [00:10<00:56,  3.45it/s][A
 12%|█▏        | 26/221 [00:10<01:06,  2.94it/s][A
 12%|█▏        | 27/221 [00:11<00:56,  3.41it/s][A
 13%|█▎        | 28/221 [00:11<01:18,  2.47it/s][A
 13%|█▎        | 29/221 [00:12<01:09,  2.75it/s][A
 14%|█▎        | 30/221 [00:12<01:12,  2.64it/s][A
 14%|█▍        | 31/221 [00:12<01:09,  2.72it/s][A
 14%|█▍        | 32/221 [00:12<00:54,  3.46it/s][A
 15%|█▍        | 33/221 [00:13<00:54,  3.44it/s][A
 15%|█▌        | 34/221 [00:13<00:51,  3.65it/s][A
 16%|█▌        | 35/221 [00:13<00:57,  3.21it/s][A
 16%|█▋        | 36/221 [00:14<01:12,  2.55it/s][A
 17%|█▋        | 37/221 [00:14<01:13,  2.49it/s][A
 17%|█▋        | 38/221 [00:15<01:19,  2.30it/s][A
 18%|█▊        | 39/221 [00:15<01:05,  2.76it/s][A
 18%|█▊        | 40/221 [00:16<01:18,  2.32it/s][A
 19%|█▊        | 41/221 [00:16<01:12,  2.49it/s][A
 19%|█▉        | 42/221 [00:17<01:25,  2.10it/s][A
 19%|█▉        | 43/221 [00:17<01:18,  2.27it/s][A
 20%|█▉        | 44/221 [00:17<01:06,  2.66it/s][A
 20%|██        | 45/221 [00:18<01:08,  2.58it/s][A
 21%|██        | 46/221 [00:18<01:01,  2.83it/s][A
 21%|██▏       | 47/221 [00:18<01:11,  2.42it/s][A
 22%|██▏       | 48/221 [00:19<01:00,  2.87it/s][A
 22%|██▏       | 49/221 [00:19<00:59,  2.91it/s][A
 23%|██▎       | 50/221 [00:19<01:05,  2.62it/s][A
 23%|██▎       | 51/221 [00:20<00:56,  2.98it/s][A
 24%|██▎       | 52/221 [00:20<00:53,  3.16it/s][A
 24%|██▍       | 53/221 [00:20<00:51,  3.23it/s][A
 24%|██▍       | 54/221 [00:21<01:21,  2.04it/s][A
 25%|██▍       | 55/221 [00:22<01:16,  2.18it/s][A[h264 @ 0x55d5c3a47f80] mmco: unref short failure
[h264 @ 0x55d5c3a47f80] mmco: unref short failure

 25%|██▌       | 56/221 [00:22<01:05,  2.51it/s][A
 26%|██▌       | 57/221 [00:22<01:00,  2.73it/s][A
 26%|██▌       | 58/221 [00:23<01:01,  2.67it/s][A
 27%|██▋       | 59/221 [00:23<00:56,  2.88it/s][A
 27%|██▋       | 60/221 [00:23<01:09,  2.30it/s][A
 28%|██▊       | 61/221 [00:24<01:00,  2.63it/s][A
 28%|██▊       | 62/221 [00:24<01:01,  2.57it/s][A
 29%|██▊       | 63/221 [00:24<00:57,  2.76it/s][A
 29%|██▉       | 64/221 [00:25<00:58,  2.69it/s][A
 29%|██▉       | 65/221 [00:25<00:47,  3.25it/s][A
 30%|██▉       | 66/221 [00:25<00:55,  2.81it/s][A
 30%|███       | 67/221 [00:26<01:07,  2.26it/s][A
 31%|███       | 68/221 [00:26<00:57,  2.66it/s][A
 31%|███       | 69/221 [00:27<01:10,  2.15it/s][A
 32%|███▏      | 70/221 [00:27<00:56,  2.69it/s][A
 32%|███▏      | 71/221 [00:27<00:51,  2.89it/s][A
 33%|███▎      | 72/221 [00:28<00:59,  2.50it/s][A
 33%|███▎      | 73/221 [00:28<01:04,  2.30it/s][A
 33%|███▎      | 74/221 [00:29<00:53,  2.75it/s][A
 34%|███▍      | 75/221 [00:29<00:52,  2.79it/s][A
 34%|███▍      | 76/221 [00:29<00:45,  3.19it/s][A
 35%|███▍      | 77/221 [00:29<00:43,  3.28it/s][A
 35%|███▌      | 78/221 [00:30<00:40,  3.57it/s][A
 36%|███▌      | 79/221 [00:30<00:52,  2.70it/s][A
 36%|███▌      | 80/221 [00:31<00:47,  2.96it/s][A
 37%|███▋      | 81/221 [00:31<00:47,  2.94it/s][A
 37%|███▋      | 82/221 [00:31<00:51,  2.68it/s][A
 38%|███▊      | 83/221 [00:32<01:00,  2.29it/s][A
 38%|███▊      | 84/221 [00:32<00:52,  2.59it/s][A
 38%|███▊      | 85/221 [00:32<00:44,  3.06it/s][A
 39%|███▉      | 86/221 [00:33<00:43,  3.11it/s][A
 39%|███▉      | 87/221 [00:34<01:07,  1.97it/s][A
 40%|███▉      | 88/221 [00:34<01:10,  1.88it/s][A
 40%|████      | 89/221 [00:35<01:01,  2.16it/s][A
 41%|████      | 90/221 [00:35<00:57,  2.26it/s][A
 41%|████      | 91/221 [00:35<00:48,  2.70it/s][A[h264 @ 0x55d5b1295b80] mmco: unref short failure

 42%|████▏     | 92/221 [00:35<00:44,  2.89it/s][A
 42%|████▏     | 93/221 [00:36<01:01,  2.07it/s][A
 43%|████▎     | 94/221 [00:36<00:52,  2.42it/s][A
[h264 @ 0x55d5c9da8140] mmco: unref short failure
[h264 @ 0x55d5c9da8140] mmco: unref short failure
 43%|████▎     | 95/221 [00:37<00:50,  2.51it/s][A[h264 @ 0x55d5c9da8140] mmco: unref short failure
[h264 @ 0x55d5c9da8140] mmco: unref short failure

 43%|████▎     | 96/221 [00:37<00:45,  2.76it/s][A
 44%|████▍     | 97/221 [00:37<00:41,  2.96it/s][A
 44%|████▍     | 98/221 [00:38<00:41,  2.98it/s][A
 45%|████▍     | 99/221 [00:38<00:36,  3.35it/s][A
 45%|████▌     | 100/221 [00:38<00:36,  3.35it/s][A
 46%|████▌     | 101/221 [00:39<00:35,  3.36it/s][A
 46%|████▌     | 102/221 [00:39<00:46,  2.53it/s][A
 47%|████▋     | 103/221 [00:39<00:37,  3.16it/s][A
 47%|████▋     | 104/221 [00:40<00:32,  3.55it/s][A
 48%|████▊     | 105/221 [00:40<00:35,  3.27it/s][A
 48%|████▊     | 106/221 [00:41<00:48,  2.37it/s][A
 48%|████▊     | 107/221 [00:41<00:41,  2.72it/s][A
 49%|████▉     | 108/221 [00:41<00:38,  2.95it/s][A
 49%|████▉     | 109/221 [00:41<00:33,  3.37it/s][A
 50%|████▉     | 110/221 [00:42<00:38,  2.91it/s][A
 50%|█████     | 111/221 [00:42<00:42,  2.59it/s][A[h264 @ 0x55ee00c93780] mmco: unref short failure

 51%|█████     | 112/221 [00:42<00:40,  2.70it/s][A
 51%|█████     | 113/221 [00:43<00:37,  2.89it/s][A
 52%|█████▏    | 115/221 [00:43<00:26,  3.95it/s][A
 52%|█████▏    | 116/221 [00:43<00:29,  3.58it/s][A[h264 @ 0x55edf36ee040] mmco: unref short failure
[h264 @ 0x55edf36ee040] mmco: unref short failure

 53%|█████▎    | 117/221 [00:44<00:32,  3.17it/s][A
 53%|█████▎    | 118/221 [00:44<00:31,  3.29it/s][A
 54%|█████▍    | 119/221 [00:45<00:37,  2.70it/s][A
 54%|█████▍    | 120/221 [00:45<00:34,  2.90it/s][A
 55%|█████▍    | 121/221 [00:45<00:27,  3.64it/s][A
 55%|█████▌    | 122/221 [00:45<00:27,  3.57it/s][A
 56%|█████▌    | 123/221 [00:46<00:26,  3.65it/s][A
 56%|█████▌    | 124/221 [00:46<00:27,  3.47it/s][A
 57%|█████▋    | 125/221 [00:46<00:31,  3.07it/s][A
 57%|█████▋    | 126/221 [00:47<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:47<00:34,  2.74it/s][A
 58%|█████▊    | 128/221 [00:47<00:33,  2.74it/s][A
 58%|█████▊    | 129/221 [00:48<00:27,  3.36it/s][A
 59%|█████▉    | 130/221 [00:48<00:24,  3.74it/s][A
 59%|█████▉    | 131/221 [00:48<00:21,  4.13it/s][A
 60%|█████▉    | 132/221 [00:48<00:26,  3.41it/s][A
 60%|██████    | 133/221 [00:49<00:29,  2.95it/s][A
 61%|██████    | 134/221 [00:49<00:32,  2.69it/s][A
 61%|██████    | 135/221 [00:50<00:29,  2.89it/s][A
 62%|██████▏   | 136/221 [00:50<00:29,  2.92it/s][A
 62%|██████▏   | 137/221 [00:50<00:27,  3.06it/s][A
 62%|██████▏   | 138/221 [00:51<00:28,  2.89it/s][A
 63%|██████▎   | 139/221 [00:51<00:34,  2.35it/s][A
 63%|██████▎   | 140/221 [00:51<00:31,  2.57it/s][A
 64%|██████▍   | 141/221 [00:52<00:27,  2.96it/s][A
 64%|██████▍   | 142/221 [00:52<00:25,  3.14it/s][A
 65%|██████▍   | 143/221 [00:53<00:33,  2.33it/s][A
 65%|██████▌   | 144/221 [00:53<00:34,  2.21it/s][A
 66%|██████▌   | 145/221 [00:53<00:26,  2.87it/s][A
 66%|██████▌   | 146/221 [00:53<00:20,  3.63it/s][A
 67%|██████▋   | 147/221 [00:54<00:21,  3.44it/s][A
 67%|██████▋   | 148/221 [00:54<00:24,  2.96it/s][A
 67%|██████▋   | 149/221 [00:54<00:23,  3.09it/s][A
 68%|██████▊   | 150/221 [00:55<00:22,  3.20it/s][A
 68%|██████▊   | 151/221 [00:55<00:27,  2.53it/s][A
 69%|██████▉   | 152/221 [00:57<00:48,  1.43it/s][A
 69%|██████▉   | 153/221 [00:57<00:38,  1.78it/s][A
 70%|██████▉   | 154/221 [00:57<00:32,  2.03it/s][A
 70%|███████   | 155/221 [00:58<00:28,  2.29it/s][A
 71%|███████   | 156/221 [00:58<00:28,  2.25it/s][A
 71%|███████   | 157/221 [00:59<00:28,  2.23it/s][A
 71%|███████▏  | 158/221 [00:59<00:26,  2.40it/s][A
 72%|███████▏  | 159/221 [00:59<00:20,  3.03it/s][A
 72%|███████▏  | 160/221 [00:59<00:21,  2.85it/s][A
 73%|███████▎  | 161/221 [01:00<00:18,  3.25it/s][A
 73%|███████▎  | 162/221 [01:00<00:17,  3.43it/s][A
 74%|███████▍  | 163/221 [01:00<00:16,  3.44it/s][A
 74%|███████▍  | 164/221 [01:00<00:14,  3.88it/s][A
 75%|███████▍  | 165/221 [01:01<00:13,  4.11it/s][A
 75%|███████▌  | 166/221 [01:01<00:15,  3.60it/s][A
 76%|███████▌  | 167/221 [01:01<00:12,  4.23it/s][A
 76%|███████▌  | 168/221 [01:01<00:13,  3.92it/s][A
 76%|███████▋  | 169/221 [01:02<00:12,  4.01it/s][A
 77%|███████▋  | 170/221 [01:02<00:16,  3.07it/s][A
 77%|███████▋  | 171/221 [01:02<00:17,  2.87it/s][A
 78%|███████▊  | 172/221 [01:03<00:14,  3.49it/s][A
 78%|███████▊  | 173/221 [01:03<00:15,  3.03it/s][A
 79%|███████▊  | 174/221 [01:04<00:17,  2.74it/s][A
 79%|███████▉  | 175/221 [01:04<00:17,  2.68it/s][A
 80%|███████▉  | 176/221 [01:04<00:14,  3.16it/s][A
 80%|████████  | 177/221 [01:04<00:12,  3.48it/s][A
 81%|████████  | 178/221 [01:04<00:10,  4.07it/s][A
 81%|████████  | 179/221 [01:05<00:12,  3.50it/s][A
 81%|████████▏ | 180/221 [01:05<00:10,  3.83it/s][A
 82%|████████▏ | 181/221 [01:05<00:10,  3.99it/s][A
 82%|████████▏ | 182/221 [01:06<00:10,  3.69it/s][A
 83%|████████▎ | 183/221 [01:06<00:09,  3.86it/s][A
 83%|████████▎ | 184/221 [01:06<00:09,  3.82it/s][A
 84%|████████▎ | 185/221 [01:06<00:07,  4.59it/s][A
 84%|████████▍ | 186/221 [01:07<00:09,  3.55it/s][A
 85%|████████▍ | 187/221 [01:07<00:10,  3.38it/s][A
 85%|████████▌ | 188/221 [01:07<00:10,  3.27it/s][A
 86%|████████▌ | 189/221 [01:08<00:09,  3.21it/s][A
 86%|████████▌ | 190/221 [01:08<00:10,  2.86it/s][A
 86%|████████▋ | 191/221 [01:08<00:09,  3.31it/s][A
 87%|████████▋ | 192/221 [01:08<00:08,  3.49it/s][A
 88%|████████▊ | 194/221 [01:09<00:09,  2.95it/s][A
 88%|████████▊ | 195/221 [01:10<00:08,  3.13it/s][A
 89%|████████▊ | 196/221 [01:10<00:09,  2.55it/s][A
 89%|████████▉ | 197/221 [01:10<00:08,  2.73it/s][A
 90%|████████▉ | 198/221 [01:11<00:09,  2.47it/s][A
 90%|█████████ | 199/221 [01:11<00:07,  2.92it/s][A
 90%|█████████ | 200/221 [01:12<00:07,  2.74it/s][A
 91%|█████████ | 201/221 [01:12<00:06,  2.96it/s][A
 91%|█████████▏| 202/221 [01:12<00:06,  2.96it/s][A
 92%|█████████▏| 203/221 [01:12<00:05,  3.14it/s][A
 92%|█████████▏| 204/221 [01:13<00:06,  2.73it/s][A
 93%|█████████▎| 205/221 [01:13<00:04,  3.40it/s][A
 93%|█████████▎| 206/221 [01:14<00:05,  2.69it/s][A
 94%|█████████▎| 207/221 [01:14<00:04,  3.39it/s][A
 94%|█████████▍| 208/221 [01:14<00:03,  3.79it/s][A
 95%|█████████▍| 209/221 [01:14<00:03,  3.72it/s][A
 95%|█████████▌| 211/221 [01:15<00:02,  3.97it/s][A
 96%|█████████▌| 212/221 [01:15<00:02,  3.83it/s][A
 96%|█████████▋| 213/221 [01:15<00:02,  3.87it/s][A
 97%|█████████▋| 214/221 [01:16<00:02,  3.14it/s][A
 97%|█████████▋| 215/221 [01:16<00:01,  3.18it/s][A
 98%|█████████▊| 216/221 [01:16<00:01,  2.94it/s][A
 98%|█████████▊| 217/221 [01:17<00:01,  2.73it/s][A
 99%|█████████▊| 218/221 [01:17<00:01,  2.72it/s][A
 99%|█████████▉| 219/221 [01:17<00:00,  2.90it/s][A
100%|█████████▉| 220/221 [01:18<00:00,  2.94it/s][A
100%|██████████| 221/221 [01:18<00:00,  3.17it/s][A100%|██████████| 221/221 [01:18<00:00,  2.81it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:06,  3.30it/s][A
  1%|          | 2/221 [00:00<01:06,  3.30it/s][A
  1%|▏         | 3/221 [00:00<01:05,  3.30it/s][A
  2%|▏         | 4/221 [00:01<01:05,  3.30it/s][A
  2%|▏         | 5/221 [00:01<01:05,  3.30it/s][A
  3%|▎         | 6/221 [00:01<01:05,  3.30it/s][A
  3%|▎         | 7/221 [00:02<01:04,  3.30it/s][A
  4%|▎         | 8/221 [00:02<01:04,  3.30it/s][A
  4%|▍         | 9/221 [00:02<01:04,  3.30it/s][A
  5%|▍         | 10/221 [00:03<01:03,  3.30it/s][A
  5%|▍         | 11/221 [00:03<01:03,  3.30it/s][A
  5%|▌         | 12/221 [00:03<01:03,  3.30it/s][A
  6%|▌         | 13/221 [00:03<01:02,  3.30it/s][A
  6%|▋         | 14/221 [00:04<01:02,  3.30it/s][A
  7%|▋         | 15/221 [00:04<01:02,  3.30it/s][A
  7%|▋         | 16/221 [00:04<01:02,  3.30it/s][A
  8%|▊         | 17/221 [00:05<01:01,  3.30it/s][A
  8%|▊         | 18/221 [00:05<01:01,  3.30it/s][A
  9%|▊         | 19/221 [00:05<01:01,  3.30it/s][A
  9%|▉         | 20/221 [00:06<01:00,  3.30it/s][A
 10%|▉         | 21/221 [00:06<01:00,  3.30it/s][A
 10%|▉         | 22/221 [00:06<01:00,  3.30it/s][A
 10%|█         | 23/221 [00:06<00:59,  3.30it/s][A
 11%|█         | 24/221 [00:07<00:59,  3.30it/s][A
 11%|█▏        | 25/221 [00:07<00:59,  3.30it/s][A
 12%|█▏        | 26/221 [00:07<00:59,  3.30it/s][A
 12%|█▏        | 27/221 [00:08<00:58,  3.30it/s][A
 13%|█▎        | 28/221 [00:08<00:58,  3.31it/s][A
 13%|█▎        | 29/221 [00:08<00:58,  3.31it/s][A
 14%|█▎        | 30/221 [00:09<00:57,  3.31it/s][A
 14%|█▍        | 31/221 [00:09<00:57,  3.31it/s][A
 14%|█▍        | 32/221 [00:09<00:57,  3.30it/s][A
 15%|█▍        | 33/221 [00:09<00:56,  3.31it/s][A
 15%|█▌        | 34/221 [00:10<00:56,  3.31it/s][A
 16%|█▌        | 35/221 [00:10<00:56,  3.31it/s][A
 16%|█▋        | 36/221 [00:10<00:55,  3.31it/s][A
 17%|█▋        | 37/221 [00:11<00:55,  3.31it/s][A
 17%|█▋        | 38/221 [00:11<00:55,  3.31it/s][A
 18%|█▊        | 39/221 [00:11<00:55,  3.31it/s][A
 18%|█▊        | 40/221 [00:12<00:54,  3.31it/s][A
 19%|█▊        | 41/221 [00:12<00:54,  3.31it/s][A
 19%|█▉        | 42/221 [00:12<00:54,  3.31it/s][A
 19%|█▉        | 43/221 [00:13<00:53,  3.31it/s][A
 20%|█▉        | 44/221 [00:13<00:53,  3.31it/s][A
 20%|██        | 45/221 [00:13<00:53,  3.31it/s][A
 21%|██        | 46/221 [00:13<00:52,  3.30it/s][A
 21%|██▏       | 47/221 [00:14<00:52,  3.30it/s][A
 22%|██▏       | 48/221 [00:14<00:52,  3.30it/s][A
 22%|██▏       | 49/221 [00:14<00:52,  3.30it/s][A
 23%|██▎       | 50/221 [00:15<00:51,  3.30it/s][A
 23%|██▎       | 51/221 [00:15<00:51,  3.30it/s][A
 24%|██▎       | 52/221 [00:15<00:51,  3.30it/s][A
 24%|██▍       | 53/221 [00:16<00:50,  3.30it/s][A
 24%|██▍       | 54/221 [00:16<00:50,  3.31it/s][A
 25%|██▍       | 55/221 [00:16<00:50,  3.31it/s][A
 25%|██▌       | 56/221 [00:16<00:49,  3.30it/s][A
 26%|██▌       | 57/221 [00:17<00:49,  3.30it/s][A
 26%|██▌       | 58/221 [00:17<00:49,  3.30it/s][A
 27%|██▋       | 59/221 [00:17<00:49,  3.31it/s][A
 27%|██▋       | 60/221 [00:18<00:48,  3.30it/s][A
 28%|██▊       | 61/221 [00:18<00:48,  3.31it/s][A
 28%|██▊       | 62/221 [00:18<00:48,  3.31it/s][A
 29%|██▊       | 63/221 [00:19<00:47,  3.31it/s][A
 29%|██▉       | 64/221 [00:19<00:47,  3.30it/s][A
 29%|██▉       | 65/221 [00:19<00:47,  3.30it/s][A
 30%|██▉       | 66/221 [00:19<00:46,  3.30it/s][A
 30%|███       | 67/221 [00:20<00:46,  3.31it/s][A
 31%|███       | 68/221 [00:20<00:46,  3.31it/s][A
 31%|███       | 69/221 [00:20<00:45,  3.30it/s][A
 32%|███▏      | 70/221 [00:21<00:45,  3.31it/s][A
 32%|███▏      | 71/221 [00:21<00:45,  3.31it/s][A
 33%|███▎      | 72/221 [00:21<00:45,  3.31it/s][A
 33%|███▎      | 73/221 [00:22<00:44,  3.31it/s][A
 33%|███▎      | 74/221 [00:22<00:44,  3.31it/s][A
 34%|███▍      | 75/221 [00:22<00:44,  3.31it/s][A
 34%|███▍      | 76/221 [00:22<00:43,  3.31it/s][A
 35%|███▍      | 77/221 [00:23<00:43,  3.31it/s][A
 35%|███▌      | 78/221 [00:23<00:43,  3.31it/s][A
 36%|███▌      | 79/221 [00:23<00:42,  3.31it/s][A
 36%|███▌      | 80/221 [00:24<00:42,  3.31it/s][A
 37%|███▋      | 81/221 [00:24<00:42,  3.31it/s][A
 37%|███▋      | 82/221 [00:24<00:42,  3.31it/s][A
 38%|███▊      | 83/221 [00:25<00:41,  3.31it/s][A
 38%|███▊      | 84/221 [00:25<00:41,  3.31it/s][A
 38%|███▊      | 85/221 [00:25<00:41,  3.31it/s][A
 39%|███▉      | 86/221 [00:26<00:40,  3.31it/s][A
 39%|███▉      | 87/221 [00:26<00:40,  3.31it/s][A
 40%|███▉      | 88/221 [00:26<00:40,  3.31it/s][A
 40%|████      | 89/221 [00:26<00:39,  3.31it/s][A
 41%|████      | 90/221 [00:27<00:39,  3.31it/s][A
 41%|████      | 91/221 [00:27<00:39,  3.31it/s][A
 42%|████▏     | 92/221 [00:27<00:39,  3.31it/s][A
 42%|████▏     | 93/221 [00:28<00:38,  3.31it/s][A
 43%|████▎     | 94/221 [00:28<00:38,  3.30it/s][A
 43%|████▎     | 95/221 [00:28<00:38,  3.30it/s][A
 43%|████▎     | 96/221 [00:29<00:37,  3.31it/s][A
 44%|████▍     | 97/221 [00:29<00:37,  3.31it/s][A
 44%|████▍     | 98/221 [00:29<00:37,  3.30it/s][A
 45%|████▍     | 99/221 [00:29<00:36,  3.31it/s][A
 45%|████▌     | 100/221 [00:30<00:36,  3.31it/s][A
 46%|████▌     | 101/221 [00:30<00:36,  3.31it/s][A
 46%|████▌     | 102/221 [00:30<00:36,  3.31it/s][A
 47%|████▋     | 103/221 [00:31<00:35,  3.31it/s][A
 47%|████▋     | 104/221 [00:31<00:35,  3.31it/s][A
 48%|████▊     | 105/221 [00:31<00:35,  3.31it/s][A
 48%|████▊     | 106/221 [00:32<00:34,  3.30it/s][A
 48%|████▊     | 107/221 [00:32<00:34,  3.30it/s][A
 49%|████▉     | 108/221 [00:32<00:34,  3.30it/s][A
 49%|████▉     | 109/221 [00:32<00:33,  3.30it/s][A
 50%|████▉     | 110/221 [00:33<00:33,  3.30it/s][A
 50%|█████     | 111/221 [00:33<00:33,  3.30it/s][A
 51%|█████     | 112/221 [00:33<00:33,  3.30it/s][A
 51%|█████     | 113/221 [00:34<00:32,  3.30it/s][A
 52%|█████▏    | 114/221 [00:34<00:32,  3.30it/s][A
 52%|█████▏    | 115/221 [00:34<00:32,  3.30it/s][A
 52%|█████▏    | 116/221 [00:35<00:31,  3.30it/s][A
 53%|█████▎    | 117/221 [00:35<00:31,  3.30it/s][A
 53%|█████▎    | 118/221 [00:35<00:31,  3.30it/s][A
 54%|█████▍    | 119/221 [00:36<00:30,  3.30it/s][A
 54%|█████▍    | 120/221 [00:36<00:30,  3.30it/s][A
 55%|█████▍    | 121/221 [00:36<00:30,  3.30it/s][A
 55%|█████▌    | 122/221 [00:36<00:29,  3.30it/s][A
 56%|█████▌    | 123/221 [00:37<00:29,  3.30it/s][A
 56%|█████▌    | 124/221 [00:37<00:29,  3.30it/s][A
 57%|█████▋    | 125/221 [00:37<00:29,  3.30it/s][A
 57%|█████▋    | 126/221 [00:38<00:28,  3.30it/s][A
 57%|█████▋    | 127/221 [00:38<00:28,  3.30it/s][A
 58%|█████▊    | 128/221 [00:38<00:28,  3.30it/s][A
 58%|█████▊    | 129/221 [00:39<00:27,  3.30it/s][A
 59%|█████▉    | 130/221 [00:39<00:27,  3.30it/s][A
 59%|█████▉    | 131/221 [00:39<00:27,  3.30it/s][A
 60%|█████▉    | 132/221 [00:39<00:26,  3.30it/s][A
 60%|██████    | 133/221 [00:40<00:26,  3.30it/s][A
 61%|██████    | 134/221 [00:40<00:26,  3.30it/s][A
 61%|██████    | 135/221 [00:40<00:26,  3.30it/s][A
 62%|██████▏   | 136/221 [00:41<00:25,  3.30it/s][A
 62%|██████▏   | 137/221 [00:41<00:25,  3.30it/s][A
 62%|██████▏   | 138/221 [00:41<00:25,  3.30it/s][A
 63%|██████▎   | 139/221 [00:42<00:24,  3.30it/s][A
 63%|██████▎   | 140/221 [00:42<00:24,  3.30it/s][A
 64%|██████▍   | 141/221 [00:42<00:24,  3.30it/s][A
 64%|██████▍   | 142/221 [00:42<00:23,  3.30it/s][A
 65%|██████▍   | 143/221 [00:43<00:23,  3.30it/s][A
 65%|██████▌   | 144/221 [00:43<00:23,  3.30it/s][A
 66%|██████▌   | 145/221 [00:43<00:23,  3.30it/s][A
 66%|██████▌   | 146/221 [00:44<00:22,  3.30it/s][A
 67%|██████▋   | 147/221 [00:44<00:22,  3.30it/s][A
 67%|██████▋   | 148/221 [00:44<00:22,  3.30it/s][A
 67%|██████▋   | 149/221 [00:45<00:21,  3.30it/s][A
 68%|██████▊   | 150/221 [00:45<00:21,  3.30it/s][A
 68%|██████▊   | 151/221 [00:45<00:21,  3.30it/s][A
 69%|██████▉   | 152/221 [00:46<00:20,  3.30it/s][A
 69%|██████▉   | 153/221 [00:46<00:20,  3.30it/s][A
 70%|██████▉   | 154/221 [00:46<00:20,  3.30it/s][A
 70%|███████   | 155/221 [00:46<00:20,  3.30it/s][A
 71%|███████   | 156/221 [00:47<00:19,  3.30it/s][A
 71%|███████   | 157/221 [00:47<00:19,  3.30it/s][A
 71%|███████▏  | 158/221 [00:47<00:19,  3.30it/s][A
 72%|███████▏  | 159/221 [00:48<00:18,  3.30it/s][A
 72%|███████▏  | 160/221 [00:48<00:18,  3.30it/s][A
 73%|███████▎  | 161/221 [00:48<00:18,  3.30it/s][A
 73%|███████▎  | 162/221 [00:49<00:17,  3.30it/s][A
 74%|███████▍  | 163/221 [00:49<00:17,  3.30it/s][A
 74%|███████▍  | 164/221 [00:49<00:17,  3.30it/s][A
 75%|███████▍  | 165/221 [00:49<00:16,  3.30it/s][A
 75%|███████▌  | 166/221 [00:50<00:16,  3.30it/s][A
 76%|███████▌  | 167/221 [00:50<00:16,  3.30it/s][A
 76%|███████▌  | 168/221 [00:50<00:16,  3.30it/s][A
 76%|███████▋  | 169/221 [00:51<00:15,  3.30it/s][A
 77%|███████▋  | 170/221 [00:51<00:15,  3.30it/s][A
 77%|███████▋  | 171/221 [00:51<00:15,  3.30it/s][A
 78%|███████▊  | 172/221 [00:52<00:14,  3.30it/s][A
 78%|███████▊  | 173/221 [00:52<00:14,  3.30it/s][A
 79%|███████▊  | 174/221 [00:52<00:14,  3.30it/s][A
 79%|███████▉  | 175/221 [00:52<00:13,  3.30it/s][A
 80%|███████▉  | 176/221 [00:53<00:13,  3.30it/s][A
 80%|████████  | 177/221 [00:53<00:13,  3.30it/s][A
 81%|████████  | 178/221 [00:53<00:13,  3.30it/s][A
 81%|████████  | 179/221 [00:54<00:12,  3.30it/s][A
 81%|████████▏ | 180/221 [00:54<00:12,  3.30it/s][A
 82%|████████▏ | 181/221 [00:54<00:12,  3.30it/s][A
 82%|████████▏ | 182/221 [00:55<00:11,  3.30it/s][A
 83%|████████▎ | 183/221 [00:55<00:11,  3.30it/s][A
 83%|████████▎ | 184/221 [00:55<00:11,  3.30it/s][A
 84%|████████▎ | 185/221 [00:56<00:10,  3.30it/s][A
 84%|████████▍ | 186/221 [00:56<00:10,  3.30it/s][A
 85%|████████▍ | 187/221 [00:56<00:10,  3.30it/s][A
 85%|████████▌ | 188/221 [00:56<00:09,  3.30it/s][A
 86%|████████▌ | 189/221 [00:57<00:09,  3.30it/s][A
 86%|████████▌ | 190/221 [00:57<00:09,  3.30it/s][A
 86%|████████▋ | 191/221 [00:57<00:09,  3.30it/s][A
 87%|████████▋ | 192/221 [00:58<00:08,  3.30it/s][A
 87%|████████▋ | 193/221 [00:58<00:08,  3.30it/s][A
 88%|████████▊ | 194/221 [00:58<00:08,  3.30it/s][A
 88%|████████▊ | 195/221 [00:59<00:07,  3.30it/s][A
 89%|████████▊ | 196/221 [00:59<00:07,  3.30it/s][A
 89%|████████▉ | 197/221 [00:59<00:07,  3.30it/s][A
 90%|████████▉ | 198/221 [00:59<00:06,  3.30it/s][A
 90%|█████████ | 199/221 [01:00<00:06,  3.30it/s][A
 90%|█████████ | 200/221 [01:00<00:06,  3.30it/s][A
 91%|█████████ | 201/221 [01:00<00:06,  3.30it/s][A
 91%|█████████▏| 202/221 [01:01<00:05,  3.30it/s][A
 92%|█████████▏| 203/221 [01:01<00:05,  3.30it/s][A
 92%|█████████▏| 204/221 [01:01<00:05,  3.30it/s][A
 93%|█████████▎| 205/221 [01:02<00:04,  3.30it/s][A
 93%|█████████▎| 206/221 [01:02<00:04,  3.30it/s][A
 94%|█████████▎| 207/221 [01:02<00:04,  3.30it/s][A
 94%|█████████▍| 208/221 [01:02<00:03,  3.30it/s][A
 95%|█████████▍| 209/221 [01:03<00:03,  3.30it/s][A
 95%|█████████▌| 210/221 [01:03<00:03,  3.30it/s][A
 95%|█████████▌| 211/221 [01:03<00:03,  3.30it/s][A
 96%|█████████▌| 212/221 [01:04<00:02,  3.30it/s][A
 96%|█████████▋| 213/221 [01:04<00:02,  3.30it/s][A
 97%|█████████▋| 214/221 [01:04<00:02,  3.30it/s][A
 97%|█████████▋| 215/221 [01:05<00:01,  3.30it/s][A
 98%|█████████▊| 216/221 [01:05<00:01,  3.30it/s][A
 98%|█████████▊| 217/221 [01:05<00:01,  3.30it/s][A
 99%|█████████▊| 218/221 [01:06<00:00,  3.30it/s][A
 99%|█████████▉| 219/221 [01:06<00:00,  3.30it/s][A
100%|█████████▉| 220/221 [01:06<00:00,  3.30it/s][A
100%|██████████| 221/221 [01:06<00:00,  3.30it/s][A100%|██████████| 221/221 [01:06<00:00,  3.30it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:54,  4.01it/s][A
  1%|          | 2/221 [00:01<02:06,  1.73it/s][A
  1%|▏         | 3/221 [00:01<01:19,  2.75it/s][A
  2%|▏         | 4/221 [00:01<01:11,  3.02it/s][A
  2%|▏         | 5/221 [00:01<01:04,  3.37it/s][A
  3%|▎         | 7/221 [00:01<00:47,  4.50it/s][A
  4%|▎         | 8/221 [00:02<00:57,  3.69it/s][A
  4%|▍         | 9/221 [00:02<01:04,  3.27it/s][A
  5%|▍         | 10/221 [00:03<01:29,  2.37it/s][A
  5%|▍         | 11/221 [00:03<01:17,  2.72it/s][A
  5%|▌         | 12/221 [00:04<01:12,  2.89it/s][A
  6%|▌         | 13/221 [00:04<01:32,  2.25it/s][A
  6%|▋         | 14/221 [00:04<01:13,  2.82it/s][A
  7%|▋         | 15/221 [00:04<00:58,  3.50it/s][A
  7%|▋         | 16/221 [00:05<01:01,  3.35it/s][A
  8%|▊         | 17/221 [00:06<01:49,  1.86it/s][A
  8%|▊         | 18/221 [00:06<01:41,  2.00it/s][A
  9%|▊         | 19/221 [00:07<01:30,  2.23it/s][A
  9%|▉         | 20/221 [00:07<01:15,  2.68it/s][A
 10%|▉         | 21/221 [00:07<01:03,  3.17it/s][A
 10%|▉         | 22/221 [00:07<00:53,  3.74it/s][A
 10%|█         | 23/221 [00:07<00:44,  4.40it/s][A
 11%|█         | 24/221 [00:07<00:38,  5.13it/s][A
 11%|█▏        | 25/221 [00:08<00:43,  4.53it/s][A
 12%|█▏        | 26/221 [00:08<00:50,  3.90it/s][A
 12%|█▏        | 27/221 [00:08<00:41,  4.67it/s][A
 13%|█▎        | 28/221 [00:09<01:25,  2.25it/s][A
 13%|█▎        | 29/221 [00:09<01:10,  2.72it/s][A
 14%|█▎        | 30/221 [00:10<01:07,  2.84it/s][A
 14%|█▍        | 31/221 [00:10<01:09,  2.74it/s][A
 14%|█▍        | 32/221 [00:10<00:55,  3.42it/s][A
 15%|█▍        | 33/221 [00:10<00:54,  3.45it/s][A
 15%|█▌        | 34/221 [00:11<00:44,  4.22it/s][A
 16%|█▌        | 35/221 [00:11<00:42,  4.33it/s][A
 16%|█▋        | 36/221 [00:11<00:49,  3.71it/s][A
 17%|█▋        | 37/221 [00:12<00:57,  3.22it/s][A
 17%|█▋        | 38/221 [00:12<01:04,  2.83it/s][A
 18%|█▊        | 39/221 [00:12<00:54,  3.32it/s][A
 18%|█▊        | 40/221 [00:13<01:04,  2.80it/s][A
 19%|█▊        | 41/221 [00:13<00:55,  3.24it/s][A
 19%|█▉        | 42/221 [00:13<00:48,  3.70it/s][A
 20%|█▉        | 44/221 [00:13<00:32,  5.38it/s][A
 20%|██        | 45/221 [00:14<00:42,  4.14it/s][A
 21%|██        | 46/221 [00:14<00:40,  4.28it/s][A
 21%|██▏       | 47/221 [00:14<00:46,  3.77it/s][A
 22%|██▏       | 48/221 [00:14<00:40,  4.30it/s][A
 22%|██▏       | 49/221 [00:15<00:41,  4.12it/s][A
 23%|██▎       | 50/221 [00:15<00:38,  4.48it/s][A
 24%|██▎       | 52/221 [00:15<00:28,  5.83it/s][A
 24%|██▍       | 53/221 [00:15<00:31,  5.33it/s][A
 24%|██▍       | 54/221 [00:16<00:39,  4.19it/s][A
 25%|██▍       | 55/221 [00:16<00:35,  4.63it/s][A
 25%|██▌       | 56/221 [00:16<00:36,  4.54it/s][A
 26%|██▌       | 57/221 [00:16<00:34,  4.76it/s][A
 26%|██▌       | 58/221 [00:17<00:39,  4.15it/s][A
 27%|██▋       | 59/221 [00:17<00:34,  4.74it/s][A
 27%|██▋       | 60/221 [00:17<00:47,  3.37it/s][A
 28%|██▊       | 61/221 [00:17<00:46,  3.42it/s][A
 28%|██▊       | 62/221 [00:18<00:44,  3.58it/s][A
 29%|██▊       | 63/221 [00:18<00:53,  2.94it/s][A
 29%|██▉       | 64/221 [00:18<00:49,  3.16it/s][A
 29%|██▉       | 65/221 [00:19<00:56,  2.77it/s][A
 30%|██▉       | 66/221 [00:19<00:46,  3.36it/s][A
 30%|███       | 67/221 [00:20<00:59,  2.60it/s][A
 31%|███       | 68/221 [00:20<00:48,  3.19it/s][A
 31%|███       | 69/221 [00:20<00:44,  3.42it/s][A
 32%|███▏      | 70/221 [00:20<00:42,  3.53it/s][A
 32%|███▏      | 71/221 [00:21<00:40,  3.70it/s][A
 33%|███▎      | 72/221 [00:21<00:43,  3.43it/s][A
 33%|███▎      | 73/221 [00:21<00:50,  2.95it/s][A
 33%|███▎      | 74/221 [00:22<00:47,  3.08it/s][A
 34%|███▍      | 75/221 [00:22<00:47,  3.05it/s][A
 34%|███▍      | 76/221 [00:22<00:39,  3.71it/s][A
 35%|███▍      | 77/221 [00:22<00:33,  4.29it/s][A
 35%|███▌      | 78/221 [00:23<00:36,  3.96it/s][A
 36%|███▌      | 79/221 [00:23<00:45,  3.10it/s][A
 36%|███▌      | 80/221 [00:23<00:45,  3.11it/s][A
 37%|███▋      | 81/221 [00:24<00:39,  3.56it/s][A
 37%|███▋      | 82/221 [00:24<00:47,  2.95it/s][A
 38%|███▊      | 83/221 [00:25<01:01,  2.23it/s][A
 38%|███▊      | 84/221 [00:25<00:59,  2.31it/s][A
 38%|███▊      | 85/221 [00:26<01:03,  2.15it/s][A
 39%|███▉      | 86/221 [00:26<00:56,  2.40it/s][A
 39%|███▉      | 87/221 [00:27<01:26,  1.54it/s][A
 40%|███▉      | 88/221 [00:27<01:10,  1.90it/s][A
 40%|████      | 89/221 [00:28<00:59,  2.22it/s][A
 41%|████      | 90/221 [00:28<00:48,  2.70it/s][A
 41%|████      | 91/221 [00:28<00:40,  3.19it/s][A
 42%|████▏     | 92/221 [00:28<00:36,  3.58it/s][A
 42%|████▏     | 93/221 [00:28<00:32,  3.95it/s][A
 43%|████▎     | 94/221 [00:29<00:29,  4.29it/s][A
 43%|████▎     | 95/221 [00:29<00:36,  3.46it/s][A
 43%|████▎     | 96/221 [00:29<00:30,  4.07it/s][A
 44%|████▍     | 97/221 [00:29<00:28,  4.43it/s][A
 44%|████▍     | 98/221 [00:30<00:28,  4.37it/s][A
 45%|████▍     | 99/221 [00:30<00:24,  4.99it/s][A
 45%|████▌     | 100/221 [00:30<00:21,  5.54it/s][A
 46%|████▌     | 101/221 [00:30<00:23,  5.12it/s][A
 46%|████▌     | 102/221 [00:30<00:23,  5.04it/s][A
 47%|████▋     | 103/221 [00:30<00:21,  5.59it/s][A
 47%|████▋     | 104/221 [00:31<00:19,  6.05it/s][A
 48%|████▊     | 105/221 [00:31<00:18,  6.30it/s][A
 48%|████▊     | 106/221 [00:31<00:21,  5.27it/s][A
 48%|████▊     | 107/221 [00:31<00:21,  5.30it/s][A
 49%|████▉     | 108/221 [00:31<00:23,  4.89it/s][A
 49%|████▉     | 109/221 [00:32<00:44,  2.53it/s][A
 50%|████▉     | 110/221 [00:33<00:46,  2.37it/s][A
 50%|█████     | 111/221 [00:33<00:45,  2.40it/s][A
 51%|█████     | 112/221 [00:33<00:38,  2.81it/s][A
 51%|█████     | 113/221 [00:34<00:36,  2.97it/s][A
 52%|█████▏    | 115/221 [00:34<00:24,  4.31it/s][A
 53%|█████▎    | 117/221 [00:34<00:23,  4.34it/s][A
 53%|█████▎    | 118/221 [00:35<00:26,  3.82it/s][A
 54%|█████▍    | 119/221 [00:35<00:29,  3.48it/s][A
 54%|█████▍    | 120/221 [00:35<00:32,  3.09it/s][A
 55%|█████▍    | 121/221 [00:36<00:27,  3.61it/s][A
 55%|█████▌    | 122/221 [00:36<00:23,  4.14it/s][A
 56%|█████▌    | 123/221 [00:36<00:26,  3.71it/s][A
 56%|█████▌    | 124/221 [00:36<00:28,  3.40it/s][A
 57%|█████▋    | 125/221 [00:37<00:32,  3.00it/s][A
 57%|█████▋    | 126/221 [00:37<00:31,  3.00it/s][A
 57%|█████▋    | 127/221 [00:37<00:25,  3.68it/s][A
 58%|█████▊    | 128/221 [00:38<00:26,  3.50it/s][A
 58%|█████▊    | 129/221 [00:38<00:21,  4.24it/s][A
 59%|█████▉    | 130/221 [00:38<00:25,  3.61it/s][A
 59%|█████▉    | 131/221 [00:38<00:22,  4.03it/s][A
 60%|█████▉    | 132/221 [00:38<00:18,  4.80it/s][A
 60%|██████    | 133/221 [00:39<00:29,  2.97it/s][A
 61%|██████    | 134/221 [00:39<00:24,  3.54it/s][A
 61%|██████    | 135/221 [00:40<00:25,  3.39it/s][A
 62%|██████▏   | 136/221 [00:40<00:26,  3.21it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.37it/s][A
 62%|██████▏   | 138/221 [00:41<00:26,  3.15it/s][A
 63%|██████▎   | 139/221 [00:41<00:22,  3.57it/s][A
 63%|██████▎   | 140/221 [00:41<00:21,  3.85it/s][A
 64%|██████▍   | 142/221 [00:41<00:18,  4.24it/s][A
 65%|██████▌   | 144/221 [00:42<00:16,  4.62it/s][A
 66%|██████▌   | 145/221 [00:42<00:15,  4.99it/s][A
 66%|██████▌   | 146/221 [00:42<00:16,  4.55it/s][A
 67%|██████▋   | 147/221 [00:42<00:14,  5.05it/s][A
 67%|██████▋   | 148/221 [00:43<00:17,  4.12it/s][A
 67%|██████▋   | 149/221 [00:43<00:14,  4.86it/s][A
 68%|██████▊   | 150/221 [00:43<00:20,  3.39it/s][A
 68%|██████▊   | 151/221 [00:44<00:19,  3.54it/s][A
 69%|██████▉   | 152/221 [00:45<00:33,  2.06it/s][A
 69%|██████▉   | 153/221 [00:45<00:33,  2.03it/s][A
 70%|██████▉   | 154/221 [00:46<00:34,  1.97it/s][A
 70%|███████   | 155/221 [00:46<00:28,  2.33it/s][A
 71%|███████   | 156/221 [00:46<00:25,  2.60it/s][A
 71%|███████   | 157/221 [00:46<00:24,  2.64it/s][A
 71%|███████▏  | 158/221 [00:47<00:22,  2.83it/s][A
 72%|███████▏  | 159/221 [00:47<00:20,  2.99it/s][A
 72%|███████▏  | 160/221 [00:47<00:20,  2.95it/s][A
 73%|███████▎  | 161/221 [00:48<00:17,  3.41it/s][A
 74%|███████▍  | 163/221 [00:48<00:14,  3.88it/s][A
 74%|███████▍  | 164/221 [00:48<00:16,  3.49it/s][A
 75%|███████▌  | 166/221 [00:49<00:17,  3.19it/s][A
 76%|███████▌  | 167/221 [00:49<00:14,  3.77it/s][A
 76%|███████▌  | 168/221 [00:49<00:13,  3.83it/s][A
 76%|███████▋  | 169/221 [00:50<00:11,  4.43it/s][A
 77%|███████▋  | 170/221 [00:50<00:14,  3.63it/s][A
 77%|███████▋  | 171/221 [00:50<00:15,  3.33it/s][A
 78%|███████▊  | 173/221 [00:51<00:10,  4.74it/s][A
 79%|███████▊  | 174/221 [00:51<00:11,  4.03it/s][A
 79%|███████▉  | 175/221 [00:51<00:12,  3.81it/s][A
 80%|███████▉  | 176/221 [00:51<00:12,  3.68it/s][A
 80%|████████  | 177/221 [00:52<00:11,  3.84it/s][A
 81%|████████  | 179/221 [00:52<00:10,  4.01it/s][A
 81%|████████▏ | 180/221 [00:52<00:09,  4.18it/s][A
 82%|████████▏ | 181/221 [00:53<00:08,  4.66it/s][A
 82%|████████▏ | 182/221 [00:53<00:08,  4.57it/s][A
 83%|████████▎ | 183/221 [00:53<00:07,  5.05it/s][A
 83%|████████▎ | 184/221 [00:53<00:11,  3.35it/s][A
 84%|████████▎ | 185/221 [00:54<00:09,  3.63it/s][A
 84%|████████▍ | 186/221 [00:54<00:09,  3.87it/s][A
 85%|████████▍ | 187/221 [00:54<00:07,  4.39it/s][A
 85%|████████▌ | 188/221 [00:55<00:10,  3.13it/s][A
 86%|████████▌ | 189/221 [00:55<00:12,  2.52it/s][A
 86%|████████▌ | 190/221 [00:56<00:14,  2.21it/s][A
 86%|████████▋ | 191/221 [00:56<00:11,  2.56it/s][A
 87%|████████▋ | 192/221 [00:56<00:10,  2.85it/s][A
 87%|████████▋ | 193/221 [00:56<00:07,  3.53it/s][A
 88%|████████▊ | 194/221 [00:57<00:12,  2.20it/s][A
 88%|████████▊ | 195/221 [00:58<00:12,  2.02it/s][A
 89%|████████▊ | 196/221 [00:58<00:12,  2.04it/s][A
 89%|████████▉ | 197/221 [00:59<00:09,  2.47it/s][A
 90%|████████▉ | 198/221 [00:59<00:07,  2.93it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.05it/s][A
 91%|█████████ | 201/221 [01:00<00:06,  3.18it/s][A
 91%|█████████▏| 202/221 [01:00<00:04,  3.87it/s][A
 92%|█████████▏| 203/221 [01:00<00:04,  4.45it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.62it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.87it/s][A
 93%|█████████▎| 206/221 [01:01<00:04,  3.29it/s][A
 94%|█████████▎| 207/221 [01:01<00:03,  4.00it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.60it/s][A
 95%|█████████▍| 209/221 [01:02<00:04,  2.92it/s][A
 95%|█████████▌| 210/221 [01:02<00:03,  3.62it/s][A
 95%|█████████▌| 211/221 [01:02<00:03,  3.24it/s][A
 96%|█████████▌| 212/221 [01:03<00:02,  3.52it/s][A
 96%|█████████▋| 213/221 [01:03<00:03,  2.53it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  2.80it/s][A
 97%|█████████▋| 215/221 [01:04<00:02,  2.64it/s][A
 98%|█████████▊| 216/221 [01:04<00:01,  2.83it/s][A
 98%|█████████▊| 217/221 [01:05<00:01,  2.78it/s][A
 99%|█████████▊| 218/221 [01:05<00:00,  3.21it/s][A
 99%|█████████▉| 219/221 [01:05<00:00,  3.96it/s][A
100%|█████████▉| 220/221 [01:05<00:00,  4.03it/s][A
100%|██████████| 221/221 [01:06<00:00,  3.09it/s][A100%|██████████| 221/221 [01:06<00:00,  3.34it/s]
09/10/2024 21:48:04 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_area_forward=====step 299--===========

09/10/2024 21:48:04 - INFO - __main__ -   {'area_r1': 40.0, 'area_recall': '40.0/67.1/76.1', 'area_ravg': 61.1}
09/10/2024 21:48:04 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_area_backard=====step 299--===========

09/10/2024 21:48:04 - INFO - __main__ -   {'forward_r1': 37.4, 'forward_recall': '37.4/63.0/74.2', 'forward_ravg': 58.2}
09/10/2024 21:48:04 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_area_back_with_video=====step 299--===========

09/10/2024 21:48:04 - INFO - __main__ -   {'area_video_r1': 40.4, 'area_video_recall': '40.4/68.7/77.6', 'area_video_ravg': 62.2}
09/10/2024 21:48:04 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_area_back_with_video====history best step: 249=======

09/10/2024 21:48:04 - INFO - __main__ -   {'area_video_r1': 41.3, 'area_video_recall': '41.3/66.6/77.7', 'area_video_ravg': 61.9}
09/10/2024 21:48:04 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_itm_area=====step 299--===========

09/10/2024 21:48:04 - INFO - __main__ -   {'area_video_r1': 51.7, 'area_video_recall': '51.7/71.6/80.9', 'area_video_ravg': 68.1, 'area_video_back_r1': 48.8, 'area_video_back_recall': '48.8/70.1/77.9', 'area_video_back_ravg': 65.6}
09/10/2024 21:48:04 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_itm_area====history best step: 49=======

09/10/2024 21:48:04 - INFO - __main__ -   {'area_video_r1': 53.4, 'area_video_recall': '53.4/75.5/82.6', 'area_video_ravg': 70.5, 'area_video_back_r1': 51.4, 'area_video_back_recall': '51.4/73.1/80.9', 'area_video_back_ravg': 68.4}
09/10/2024 21:48:04 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_itc_tvas=====step 299--===========

09/10/2024 21:48:04 - INFO - __main__ -   {'video_r1': 28.4, 'video_recall': '28.4/53.6/64.8', 'video_ravg': 48.9}
09/10/2024 21:48:04 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_itc_tvas====history best step: 199=======

09/10/2024 21:48:04 - INFO - __main__ -   {'video_r1': 32.2, 'video_recall': '32.2/57.6/68.4', 'video_ravg': 52.8}
09/10/2024 21:48:04 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_itm_tvas=====step 299--===========

09/10/2024 21:48:04 - INFO - __main__ -   {'video_r1': 49.1, 'video_recall': '49.1/68.4/75.5', 'video_ravg': 64.3}
09/10/2024 21:48:04 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_itm_tvas====history best step: 49=======

09/10/2024 21:48:04 - INFO - __main__ -   {'video_r1': 52.6, 'video_recall': '52.6/72.3/77.8', 'video_ravg': 67.6}
09/10/2024 21:48:26 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.0006616625469177961, 'loss_ret%tv%ta--finetune_area/loss_area': 1.354968786239624, 'loss_ret%tv%ta--finetune_area/total_loss': 1.3556303977966309}
[h264 @ 0x55a849847140] mmco: unref short failure
[h264 @ 0x55a849847140] mmco: unref short failure
[h264 @ 0x55a849847140] mmco: unref short failure
[h264 @ 0x55a849847140] mmco: unref short failure
[h264 @ 0x55a849847140] mmco: unref short failure
[h264 @ 0x55a849847140] mmco: unref short failure
 15%|█▌        | 300/1945 [1:40:50<61:01:11, 133.54s/it] 15%|█▌        | 301/1945 [1:40:53<43:10:33, 94.55s/it] [h264 @ 0x55d5cea42940] mmco: unref short failure
 16%|█▌        | 302/1945 [1:40:57<30:44:49, 67.37s/it] 16%|█▌        | 303/1945 [1:41:02<22:07:43, 48.52s/it] 16%|█▌        | 304/1945 [1:41:07<16:08:31, 35.41s/it][h264 @ 0x5643b29dc680] mmco: unref short failure
[h264 @ 0x5643964aef80] mmco: unref short failure
 16%|█▌        | 305/1945 [1:41:12<11:57:58, 26.27s/it][h264 @ 0x55a847eed500] mmco: unref short failure
 16%|█▌        | 306/1945 [1:41:18<9:12:40, 20.23s/it] [h264 @ 0x564399896f80] mmco: unref short failure
[h264 @ 0x564399896f80] mmco: unref short failure
[h264 @ 0x5643aa193640] mmco: unref short failure
[h264 @ 0x5643aa193640] mmco: unref short failure
[h264 @ 0x5643aa193640] mmco: unref short failure
 16%|█▌        | 307/1945 [1:41:24<7:20:04, 16.12s/it] 16%|█▌        | 308/1945 [1:41:30<5:55:43, 13.04s/it][h264 @ 0x5643ac30c880] mmco: unref short failure
[h264 @ 0x55a82dd32a40] mmco: unref short failure
[h264 @ 0x55a82dd32a40] mmco: unref short failure
 16%|█▌        | 309/1945 [1:41:36<5:00:35, 11.02s/it][h264 @ 0x55a83705ad00] mmco: unref short failure
[h264 @ 0x56439d339f40] mmco: unref short failure
 16%|█▌        | 310/1945 [1:41:42<4:14:48,  9.35s/it][h264 @ 0x55edfec05d00] mmco: unref short failure
 16%|█▌        | 311/1945 [1:41:48<3:45:51,  8.29s/it][h264 @ 0x55ee0e203580] mmco: unref short failure
[h264 @ 0x55ee0e203580] mmco: unref short failure
[h264 @ 0x5643b6348bc0] mmco: unref short failure
 16%|█▌        | 312/1945 [1:41:53<3:22:24,  7.44s/it][h264 @ 0x5643987fe880] mmco: unref short failure
[h264 @ 0x55a82e54a240] mmco: unref short failure
[h264 @ 0x55a82e54a240] mmco: unref short failure
[h264 @ 0x55ee0ff349c0] mmco: unref short failure
[h264 @ 0x55ee0ff349c0] mmco: unref short failure
[h264 @ 0x55ee0ff349c0] mmco: unref short failure
[h264 @ 0x55ee0ff349c0] mmco: unref short failure
[h264 @ 0x55ee0ff349c0] mmco: unref short failure
[h264 @ 0x55ee0ff349c0] mmco: unref short failure
 16%|█▌        | 313/1945 [1:41:59<3:06:07,  6.84s/it][h264 @ 0x55a84d862f80] mmco: unref short failure
[h264 @ 0x55a84d862f80] mmco: unref short failure
 16%|█▌        | 314/1945 [1:42:04<2:58:31,  6.57s/it][h264 @ 0x564396c54740] mmco: unref short failure
[h264 @ 0x55a82e5652c0] mmco: unref short failure
 16%|█▌        | 315/1945 [1:42:12<3:03:16,  6.75s/it][h264 @ 0x55edf0969a00] mmco: unref short failure
[h264 @ 0x56439446e140] mmco: unref short failure
[h264 @ 0x55a84b624940] mmco: unref short failure
 16%|█▌        | 316/1945 [1:42:34<5:07:56, 11.34s/it][h264 @ 0x55ee01e8f1c0] mmco: unref short failure
[h264 @ 0x55ee01e8f1c0] mmco: unref short failure
[h264 @ 0x55ee01290d00] mmco: unref short failure
[h264 @ 0x55d5cbe75a80] mmco: unref short failure
 16%|█▋        | 317/1945 [1:42:51<5:57:35, 13.18s/it][h264 @ 0x55edfaab7480] mmco: unref short failure
[h264 @ 0x55edfaab7480] mmco: unref short failure
[h264 @ 0x55edfaab7480] mmco: unref short failure
[h264 @ 0x55edfaab7480] mmco: unref short failure
[h264 @ 0x5643a155a700] mmco: unref short failure
[h264 @ 0x5643a155a700] mmco: unref short failure
 16%|█▋        | 318/1945 [1:42:57<4:57:08, 10.96s/it][h264 @ 0x5643a0d05240] mmco: unref short failure
[h264 @ 0x5643a0d05240] mmco: unref short failure
[h264 @ 0x56439d1070c0] mmco: unref short failure
 16%|█▋        | 319/1945 [1:43:02<4:09:09,  9.19s/it] 16%|█▋        | 320/1945 [1:43:11<4:05:37,  9.07s/it][h264 @ 0x55a84b624940] mmco: unref short failure
[h264 @ 0x55a84b624940] mmco: unref short failure
[h264 @ 0x55edf4c2d600] mmco: unref short failure
[h264 @ 0x55d5c6e4bb00] mmco: unref short failure
[h264 @ 0x55d5c6e4bb00] mmco: unref short failure
[h264 @ 0x55a8318c1cc0] mmco: unref short failure
[h264 @ 0x55a8318c1cc0] mmco: unref short failure
 17%|█▋        | 321/1945 [1:43:19<3:58:36,  8.82s/it][h264 @ 0x5643ad756240] mmco: unref short failure
[h264 @ 0x5643ad756240] mmco: unref short failure
[h264 @ 0x55d5b755a200] mmco: unref short failure
[h264 @ 0x55d5b755a200] mmco: unref short failure
[h264 @ 0x55a84b624940] mmco: unref short failure
[h264 @ 0x55a84b624940] mmco: unref short failure
 17%|█▋        | 322/1945 [1:43:27<3:48:58,  8.47s/it][h264 @ 0x55d5cedc4bc0] mmco: unref short failure
[h264 @ 0x55edfaab7480] mmco: unref short failure
[h264 @ 0x55edfaab7480] mmco: unref short failure
 17%|█▋        | 323/1945 [1:43:33<3:30:26,  7.78s/it][h264 @ 0x55d5b691ce80] mmco: unref short failure
[h264 @ 0x55d5b62bc580] mmco: unref short failure
[h264 @ 0x55d5b62bc580] mmco: unref short failure
[h264 @ 0x55d5c1673700] mmco: unref short failure
[h264 @ 0x55d5c1673700] mmco: unref short failure
[h264 @ 0x55a82f6f1c80] mmco: unref short failure
[h264 @ 0x55a82f6f1c80] mmco: unref short failure
[h264 @ 0x55d5bb3bb680] mmco: unref short failure
[h264 @ 0x55ee0ebdf080] mmco: unref short failure
[h264 @ 0x55ee0ebdf080] mmco: unref short failure
[h264 @ 0x55a8371c6240] mmco: unref short failure
[h264 @ 0x55a8371c6240] mmco: unref short failure
[h264 @ 0x55ee05e65280] mmco: unref short failure
[h264 @ 0x55d5b15468c0] mmco: unref short failure
[h264 @ 0x55d5c32bd980] mmco: unref short failure
[h264 @ 0x55ee00b99580] mmco: unref short failure
[h264 @ 0x55a832ba3080] mmco: unref short failure
[h264 @ 0x55a832ba3080] mmco: unref short failure
[h264 @ 0x55d5af89fe80] mmco: unref short failure
[h264 @ 0x55ee0e4b2b40] mmco: unref short failure
[h264 @ 0x55ee0e4b2b40] mmco: unref short failure
[h264 @ 0x5643ad61de80] mmco: unref short failure
[h264 @ 0x5643ad61de80] mmco: unref short failure
[h264 @ 0x5643ad61de80] mmco: unref short failure
[h264 @ 0x55d5c166cac0] mmco: unref short failure
[h264 @ 0x55d5bcd67100] mmco: unref short failure
[h264 @ 0x55d5bcd67100] mmco: unref short failure
 17%|█▋        | 324/1945 [1:44:38<11:14:41, 24.97s/it][h264 @ 0x55d5c899f240] mmco: unref short failure
[h264 @ 0x55d5c899f240] mmco: unref short failure
[h264 @ 0x5643ac1a8b40] mmco: unref short failure
 17%|█▋        | 325/1945 [1:45:00<10:52:57, 24.18s/it][h264 @ 0x55edf75f0f00] mmco: unref short failure
[h264 @ 0x55edf75f0f00] mmco: unref short failure
[h264 @ 0x55a848c53f40] mmco: unref short failure
[h264 @ 0x55a848c53f40] mmco: unref short failure
[h264 @ 0x56439ae34c00] mmco: unref short failure
 17%|█▋        | 326/1945 [1:45:06<8:22:03, 18.61s/it] [h264 @ 0x55ee0ab20900] mmco: unref short failure
[h264 @ 0x55ee0ab20900] mmco: unref short failure
 17%|█▋        | 327/1945 [1:45:13<6:51:39, 15.27s/it][h264 @ 0x5643a7919800] mmco: unref short failure
[h264 @ 0x55d5ca2dbf40] mmco: unref short failure
[h264 @ 0x55d5ca2dbf40] mmco: unref short failure
[h264 @ 0x55d5bcd67300] mmco: unref short failure
[h264 @ 0x55d5bcd67300] mmco: unref short failure
 17%|█▋        | 328/1945 [1:45:21<5:47:07, 12.88s/it][h264 @ 0x55ee104fdec0] mmco: unref short failure
[h264 @ 0x55a838663640] mmco: unref short failure
 17%|█▋        | 329/1945 [1:45:29<5:07:12, 11.41s/it][h264 @ 0x55ee07c4e140] mmco: unref short failure
[h264 @ 0x55ee07c4e140] mmco: unref short failure
[h264 @ 0x55ee07c4e140] mmco: unref short failure
[h264 @ 0x55ee07c4e140] mmco: unref short failure
 17%|█▋        | 330/1945 [1:45:34<4:17:50,  9.58s/it] 17%|█▋        | 331/1945 [1:45:40<3:47:14,  8.45s/it][h264 @ 0x55ee1006a680] mmco: unref short failure
[h264 @ 0x5643abc45080] mmco: unref short failure
[h264 @ 0x5643abc45080] mmco: unref short failure
[h264 @ 0x564391a92fc0] mmco: unref short failure
[h264 @ 0x55a82e448ec0] mmco: unref short failure
[h264 @ 0x55a82e448ec0] mmco: unref short failure
[h264 @ 0x55a83206d080] mmco: unref short failure
[h264 @ 0x5643ab2b5280] mmco: unref short failure
[h264 @ 0x5643ab2b5280] mmco: unref short failure
[h264 @ 0x5643ab2b5280] mmco: unref short failure
[h264 @ 0x5643ab2b5280] mmco: unref short failure
[h264 @ 0x5643ab2b5280] mmco: unref short failure
[h264 @ 0x5643ab2b5280] mmco: unref short failure
[h264 @ 0x5643ab2b5280] mmco: unref short failure
[h264 @ 0x5643aeb15500] mmco: unref short failure
[h264 @ 0x5643aeb15500] mmco: unref short failure
[h264 @ 0x5643ab2b5280] mmco: unref short failure
[h264 @ 0x5643ab2b5280] mmco: unref short failure
[h264 @ 0x55a830de3780] mmco: unref short failure
[h264 @ 0x55a830de3780] mmco: unref short failure
[h264 @ 0x55d5bb7ae440] mmco: unref short failure
[h264 @ 0x5643a9862b00] mmco: unref short failure
[h264 @ 0x55edf3c8cfc0] mmco: unref short failure
[h264 @ 0x55edf3c8cfc0] mmco: unref short failure
[h264 @ 0x55edf3c8cfc0] mmco: unref short failure
[h264 @ 0x55d5c26e6040] mmco: unref short failure
[h264 @ 0x55d5c26e6040] mmco: unref short failure
[h264 @ 0x55d5c26e6040] mmco: unref short failure
[h264 @ 0x55d5c26e6040] mmco: unref short failure
[h264 @ 0x55a83e84e5c0] mmco: unref short failure
[h264 @ 0x55a83e84e5c0] mmco: unref short failure
[h264 @ 0x55ee0c38e600] mmco: unref short failure
[h264 @ 0x55a84bf28cc0] mmco: unref short failure
[h264 @ 0x55a842643980] mmco: unref short failure
 17%|█▋        | 332/1945 [1:46:47<11:39:02, 26.00s/it][h264 @ 0x55ee1190d480] mmco: unref short failure
[h264 @ 0x55ee1190d480] mmco: unref short failure
 17%|█▋        | 333/1945 [1:47:00<9:55:23, 22.16s/it]  17%|█▋        | 334/1945 [1:47:06<7:41:54, 17.20s/it] 17%|█▋        | 335/1945 [1:47:11<6:08:15, 13.72s/it][h264 @ 0x55d5c89cbd00] mmco: unref short failure
[h264 @ 0x55d5c89cbd00] mmco: unref short failure
[h264 @ 0x56439b68ea80] mmco: unref short failure
[h264 @ 0x56439b68ea80] mmco: unref short failure
[h264 @ 0x55a82da5a3c0] mmco: unref short failure
 17%|█▋        | 336/1945 [1:47:33<7:12:24, 16.12s/it][h264 @ 0x55d5b3021d40] mmco: unref short failure
 17%|█▋        | 337/1945 [1:47:40<6:00:17, 13.44s/it][h264 @ 0x55d5b4e77bc0] mmco: unref short failure
[h264 @ 0x55d5b8f07d00] mmco: unref short failure
[h264 @ 0x55d5b61c0300] mmco: unref short failure
 17%|█▋        | 338/1945 [1:47:46<4:58:57, 11.16s/it][h264 @ 0x55d5bc8b5780] mmco: unref short failure
[h264 @ 0x55d5bc8b5780] mmco: unref short failure
 17%|█▋        | 339/1945 [1:47:51<4:13:02,  9.45s/it][h264 @ 0x55d5af89fe80] mmco: unref short failure
[h264 @ 0x55d5af89fe80] mmco: unref short failure
[h264 @ 0x55d5b68b3440] mmco: unref short failure
[h264 @ 0x55d5cccc8a00] mmco: unref short failure
[h264 @ 0x55d5cccc8a00] mmco: unref short failure
[h264 @ 0x55ee0fd21b00] mmco: unref short failure
[h264 @ 0x55edfc9adb00] mmco: unref short failure
[h264 @ 0x55edfc9adb00] mmco: unref short failure
[h264 @ 0x5643a0a711c0] mmco: unref short failure
[h264 @ 0x5643a0a711c0] mmco: unref short failure
[h264 @ 0x55ee0add2f80] mmco: unref short failure
[h264 @ 0x55ee0add2f80] mmco: unref short failure
[h264 @ 0x5643b0d57f00] mmco: unref short failure
[h264 @ 0x5643b0d57f00] mmco: unref short failure
[h264 @ 0x5643b0d57f00] mmco: unref short failure
[h264 @ 0x5643b0d57f00] mmco: unref short failure
[h264 @ 0x55d5b8f07d00] mmco: unref short failure
[h264 @ 0x55d5bf5634c0] mmco: unref short failure
[h264 @ 0x55d5bc8b5780] mmco: unref short failure
[h264 @ 0x55d5bc8b5780] mmco: unref short failure
[h264 @ 0x55d5bc8b5780] mmco: unref short failure
[h264 @ 0x55d5bc8b5780] mmco: unref short failure
[h264 @ 0x55d5ce640d00] mmco: unref short failure
[h264 @ 0x55d5ce640d00] mmco: unref short failure
[h264 @ 0x5643aeec6500] mmco: unref short failure
[h264 @ 0x5643964aef80] mmco: unref short failure
[h264 @ 0x5643964aef80] mmco: unref short failure
[h264 @ 0x5643b1a97880] mmco: unref short failure
[h264 @ 0x5643b1a97880] mmco: unref short failure
[h264 @ 0x55a82d2f1640] mmco: unref short failure
[h264 @ 0x55a833300580] mmco: unref short failure
[h264 @ 0x55a833300580] mmco: unref short failure
[h264 @ 0x55a834631d40] mmco: unref short failure
[h264 @ 0x55edf380a4c0] mmco: unref short failure
[h264 @ 0x55edf380a4c0] mmco: unref short failure
[h264 @ 0x55a82e43a680] mmco: unref short failure
[h264 @ 0x55a82e43a680] mmco: unref short failure
 17%|█▋        | 340/1945 [1:48:52<11:05:33, 24.88s/it][h264 @ 0x55d5c1a56280] mmco: unref short failure
[h264 @ 0x55d5cee1c540] mmco: unref short failure
[h264 @ 0x55edfc680c40] mmco: unref short failure
[h264 @ 0x55d5c1a56280] mmco: unref short failure
[h264 @ 0x55d5c1a56280] mmco: unref short failure
[h264 @ 0x5643966ecf40] mmco: unref short failure
 18%|█▊        | 341/1945 [1:49:08<9:49:02, 22.03s/it] [h264 @ 0x5643a1ded040] mmco: unref short failure
 18%|█▊        | 342/1945 [1:49:13<7:33:16, 16.97s/it][h264 @ 0x55ee00a02100] mmco: unref short failure
[h264 @ 0x55ee00a02100] mmco: unref short failure
[h264 @ 0x55d5b34c54c0] mmco: unref short failure
[h264 @ 0x55d5b34c54c0] mmco: unref short failure
 18%|█▊        | 343/1945 [1:49:20<6:15:30, 14.06s/it] 18%|█▊        | 344/1945 [1:49:29<5:37:39, 12.65s/it][h264 @ 0x55ee1372c540] mmco: unref short failure
[h264 @ 0x55ee1372c540] mmco: unref short failure
[h264 @ 0x55d5b280dec0] mmco: unref short failure
 18%|█▊        | 345/1945 [1:49:35<4:43:04, 10.62s/it][h264 @ 0x56439d1070c0] mmco: unref short failure
 18%|█▊        | 346/1945 [1:49:41<4:06:53,  9.26s/it] 18%|█▊        | 347/1945 [1:49:48<3:44:28,  8.43s/it][h264 @ 0x55a83da17300] mmco: unref short failure
[h264 @ 0x55edf0c545c0] mmco: unref short failure
[h264 @ 0x55edf0c545c0] mmco: unref short failure
[h264 @ 0x55d5b532b840] mmco: unref short failure
[h264 @ 0x55edf4176d40] mmco: unref short failure
[h264 @ 0x55a83310edc0] mmco: unref short failure
[h264 @ 0x55a8431ebc80] mmco: unref short failure
[h264 @ 0x55a8431ebc80] mmco: unref short failure
[h264 @ 0x5643a07db000] mmco: unref short failure
[h264 @ 0x55d5b38c1900] mmco: unref short failure
[h264 @ 0x56439160d180] mmco: unref short failure
[h264 @ 0x56439160d180] mmco: unref short failure
[h264 @ 0x56439d114400] mmco: unref short failure
[h264 @ 0x56439d114400] mmco: unref short failure
[h264 @ 0x55d5b208c840] mmco: unref short failure
[h264 @ 0x55d5b208c840] mmco: unref short failure
[h264 @ 0x56439373c8c0] mmco: unref short failure
[h264 @ 0x56439373c8c0] mmco: unref short failure
[h264 @ 0x56439803b440] mmco: unref short failure
[h264 @ 0x56439803b440] mmco: unref short failure
[h264 @ 0x5643b29fa000] mmco: unref short failure
[h264 @ 0x55edfc9bb0c0] mmco: unref short failure
[h264 @ 0x55edfc9bb0c0] mmco: unref short failure
 18%|█▊        | 348/1945 [1:51:04<12:47:55, 28.85s/it][h264 @ 0x55edfcb8a500] mmco: unref short failure
[h264 @ 0x55a83be46880] mmco: unref short failure
[h264 @ 0x55d5c8eae200] mmco: unref short failure
[h264 @ 0x55d5c8eae200] mmco: unref short failure
[h264 @ 0x55d5b306c480] mmco: unref short failure
[h264 @ 0x55d5b306c480] mmco: unref short failure
[h264 @ 0x55d5b306c480] mmco: unref short failure
[h264 @ 0x55d5b306c480] mmco: unref short failure
 18%|█▊        | 349/1945 [1:51:13<10:02:40, 22.66s/it]09/10/2024 21:58:51 - INFO - __main__ -   evaluate on ret%tvas--msrvtt_ret task
09/10/2024 21:58:51 - INFO - __main__ -   start running ret%tvas validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55ee00a02100] mmco: unref short failure
[h264 @ 0x55a835e1b7c0] mmco: unref short failure
[h264 @ 0x55a835e1b7c0] mmco: unref short failure
[h264 @ 0x55a833178e00] mmco: unref short failure
[h264 @ 0x55edf1c99b80] mmco: unref short failure
[h264 @ 0x55edf1c99b80] mmco: unref short failure
[h264 @ 0x55edf1c99b80] mmco: unref short failure
[h264 @ 0x55edf1c99b80] mmco: unref short failure
[h264 @ 0x5643934e8d80] mmco: unref short failure
[h264 @ 0x5643934e8d80] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55a843010f00] mmco: unref short failure
[h264 @ 0x55a8421079c0] mmco: unref short failure
[h264 @ 0x55a8421079c0] mmco: unref short failure
[h264 @ 0x55a8421079c0] mmco: unref short failure
[h264 @ 0x55a8421079c0] mmco: unref short failure
[h264 @ 0x55edf0ef5d00] mmco: unref short failure
[h264 @ 0x55edf0ef5d00] mmco: unref short failure
[h264 @ 0x55edf0ef5d00] mmco: unref short failure
[h264 @ 0x55edf0ef5d00] mmco: unref short failure
[h264 @ 0x55edfbf31a40] mmco: unref short failure
[h264 @ 0x55a83c4a3840] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:18,  2.80it/s][A
  1%|          | 2/221 [00:00<01:32,  2.37it/s][A
  1%|▏         | 3/221 [00:01<01:30,  2.41it/s][A
  2%|▏         | 4/221 [00:01<01:16,  2.85it/s][A
  2%|▏         | 5/221 [00:01<01:10,  3.07it/s][A
  3%|▎         | 6/221 [00:01<00:59,  3.62it/s][A
  3%|▎         | 7/221 [00:02<01:04,  3.31it/s][A
  4%|▎         | 8/221 [00:02<01:13,  2.91it/s][A
  4%|▍         | 9/221 [00:03<01:16,  2.76it/s][A
  5%|▍         | 10/221 [00:03<01:42,  2.05it/s][A[h264 @ 0x55ee091571c0] mmco: unref short failure

  5%|▍         | 11/221 [00:04<01:29,  2.35it/s][A
  5%|▌         | 12/221 [00:04<01:19,  2.64it/s][A[h264 @ 0x55a8337be480] mmco: unref short failure

  6%|▌         | 13/221 [00:05<01:45,  1.96it/s][A
  6%|▋         | 14/221 [00:05<01:33,  2.21it/s][A
  7%|▋         | 15/221 [00:05<01:22,  2.49it/s][A
  7%|▋         | 16/221 [00:06<01:35,  2.14it/s][A
  8%|▊         | 17/221 [00:07<02:03,  1.65it/s][A
  8%|▊         | 18/221 [00:07<01:48,  1.88it/s][A
  9%|▊         | 19/221 [00:08<01:40,  2.01it/s][A
  9%|▉         | 20/221 [00:08<01:26,  2.32it/s][A
 10%|▉         | 21/221 [00:08<01:16,  2.63it/s][A
 10%|▉         | 22/221 [00:09<01:11,  2.79it/s][A
 10%|█         | 23/221 [00:09<00:58,  3.39it/s][A
 11%|█         | 24/221 [00:09<00:53,  3.65it/s][A
 11%|█▏        | 25/221 [00:09<00:53,  3.65it/s][A
 12%|█▏        | 26/221 [00:10<01:08,  2.83it/s][A
 12%|█▏        | 27/221 [00:10<01:03,  3.08it/s][A
 13%|█▎        | 28/221 [00:11<01:24,  2.28it/s][A
 13%|█▎        | 29/221 [00:11<01:12,  2.65it/s][A
 14%|█▎        | 30/221 [00:11<01:13,  2.58it/s][A
 14%|█▍        | 31/221 [00:12<01:09,  2.72it/s][A
 14%|█▍        | 32/221 [00:12<01:00,  3.15it/s][A
 15%|█▍        | 33/221 [00:12<01:01,  3.07it/s][A[h264 @ 0x55d5ca4be000] mmco: unref short failure
[h264 @ 0x55d5ca4be000] mmco: unref short failure

 15%|█▌        | 34/221 [00:12<00:56,  3.30it/s][A
 16%|█▌        | 35/221 [00:13<00:55,  3.35it/s][A
 16%|█▋        | 36/221 [00:13<01:04,  2.85it/s][A[h264 @ 0x5643b1e7c700] mmco: unref short failure
[h264 @ 0x5643b1e7c700] mmco: unref short failure

 17%|█▋        | 37/221 [00:14<01:05,  2.82it/s][A
 17%|█▋        | 38/221 [00:14<01:09,  2.62it/s][A
 18%|█▊        | 39/221 [00:14<00:59,  3.04it/s][A
 18%|█▊        | 40/221 [00:15<01:13,  2.46it/s][A
 19%|█▊        | 41/221 [00:15<01:07,  2.67it/s][A
 19%|█▉        | 42/221 [00:16<01:14,  2.42it/s][A
 19%|█▉        | 43/221 [00:16<01:06,  2.66it/s][A
 20%|█▉        | 44/221 [00:16<00:57,  3.08it/s][A[h264 @ 0x5643aeb15500] mmco: unref short failure

 20%|██        | 45/221 [00:17<01:04,  2.74it/s][A
 21%|██        | 46/221 [00:17<01:01,  2.84it/s][A
 21%|██▏       | 47/221 [00:17<01:00,  2.86it/s][A
 22%|██▏       | 48/221 [00:18<00:55,  3.10it/s][A
 22%|██▏       | 49/221 [00:18<00:56,  3.03it/s][A
 23%|██▎       | 50/221 [00:18<01:00,  2.83it/s][A
 23%|██▎       | 51/221 [00:18<00:53,  3.21it/s][A[h264 @ 0x55a833178e00] mmco: unref short failure
[h264 @ 0x55a833178e00] mmco: unref short failure

 24%|██▎       | 52/221 [00:19<00:48,  3.47it/s][A
 24%|██▍       | 53/221 [00:19<00:43,  3.82it/s][A[h264 @ 0x55a8431ebc80] mmco: unref short failure

 24%|██▍       | 54/221 [00:20<01:16,  2.19it/s][A
 25%|██▍       | 55/221 [00:20<01:11,  2.33it/s][A
 25%|██▌       | 56/221 [00:20<01:03,  2.59it/s][A
 26%|██▌       | 57/221 [00:21<00:58,  2.81it/s][A
 26%|██▌       | 58/221 [00:21<00:55,  2.94it/s][A
 27%|██▋       | 59/221 [00:21<00:52,  3.10it/s][h264 @ 0x55d5cb2cea40] mmco: unref short failure
[A
 27%|██▋       | 60/221 [00:22<01:00,  2.67it/s][A
 28%|██▊       | 61/221 [00:22<00:53,  2.97it/s][A
 28%|██▊       | 62/221 [00:22<00:53,  2.95it/s][A
 29%|██▊       | 63/221 [00:23<00:52,  3.02it/s][A
 29%|██▉       | 64/221 [00:23<00:56,  2.78it/s][A
 29%|██▉       | 65/221 [00:23<00:48,  3.20it/s][A
 30%|██▉       | 66/221 [00:24<00:55,  2.79it/s][A
 30%|███       | 67/221 [00:24<01:04,  2.40it/s][A
 31%|███       | 68/221 [00:25<00:52,  2.90it/s][A
 31%|███       | 69/221 [00:25<01:02,  2.44it/s][A
 32%|███▏      | 70/221 [00:26<01:00,  2.49it/s][A
 32%|███▏      | 71/221 [00:26<00:56,  2.67it/s][A
 33%|███▎      | 72/221 [00:26<00:57,  2.57it/s][A
 33%|███▎      | 73/221 [00:27<00:59,  2.50it/s][A
 33%|███▎      | 74/221 [00:27<00:48,  3.02it/s][A
 34%|███▍      | 75/221 [00:27<00:49,  2.94it/s][A
 34%|███▍      | 76/221 [00:27<00:44,  3.29it/s][A
 35%|███▍      | 77/221 [00:28<00:39,  3.63it/s][A
 35%|███▌      | 78/221 [00:28<00:35,  4.00it/s][A
 36%|███▌      | 79/221 [00:28<00:48,  2.91it/s][A
 36%|███▌      | 80/221 [00:29<00:44,  3.14it/s][A
 37%|███▋      | 81/221 [00:29<00:44,  3.13it/s][A
 37%|███▋      | 82/221 [00:29<00:46,  2.97it/s][A
 38%|███▊      | 83/221 [00:30<00:53,  2.59it/s][A
 38%|███▊      | 84/221 [00:30<00:50,  2.72it/s][A
 38%|███▊      | 85/221 [00:30<00:40,  3.34it/s][A
 39%|███▉      | 86/221 [00:31<00:44,  3.03it/s][A
 39%|███▉      | 87/221 [00:32<01:04,  2.07it/s][A
 40%|███▉      | 88/221 [00:32<01:08,  1.95it/s][A
 40%|████      | 89/221 [00:32<00:59,  2.21it/s][A
 41%|████      | 90/221 [00:33<00:55,  2.38it/s][A
 41%|████      | 91/221 [00:33<00:47,  2.72it/s][A
 42%|████▏     | 92/221 [00:33<00:46,  2.76it/s][A[h264 @ 0x55ee0294a6c0] mmco: unref short failure
[h264 @ 0x55ee0294a6c0] mmco: unref short failure

 42%|████▏     | 93/221 [00:34<01:01,  2.09it/s][A
 43%|████▎     | 94/221 [00:34<00:52,  2.43it/s][A[h264 @ 0x55a844ce0ac0] mmco: unref short failure
[h264 @ 0x5643b5888b00] mmco: unref short failure

 43%|████▎     | 95/221 [00:35<00:51,  2.46it/s][A
 43%|████▎     | 96/221 [00:35<00:46,  2.69it/s][A
 44%|████▍     | 97/221 [00:35<00:41,  2.99it/s][A
 44%|████▍     | 98/221 [00:36<00:39,  3.15it/s][A
 45%|████▍     | 99/221 [00:36<00:34,  3.58it/s][A
 45%|████▌     | 100/221 [00:36<00:34,  3.54it/s][A
 46%|████▌     | 101/221 [00:36<00:33,  3.63it/s][A
 46%|████▌     | 102/221 [00:37<00:43,  2.75it/s][A
 47%|████▋     | 103/221 [00:37<00:35,  3.35it/s][A
 47%|████▋     | 104/221 [00:37<00:31,  3.68it/s][A
 48%|████▊     | 105/221 [00:38<00:30,  3.76it/s][A
 48%|████▊     | 106/221 [00:38<00:45,  2.51it/s][A
 48%|████▊     | 107/221 [00:39<00:42,  2.68it/s][A
 49%|████▉     | 108/221 [00:39<00:37,  2.99it/s][A
 49%|████▉     | 109/221 [00:39<00:33,  3.32it/s][A
 50%|████▉     | 110/221 [00:39<00:39,  2.80it/s][A
 50%|█████     | 111/221 [00:40<00:42,  2.56it/s][A
 51%|█████     | 112/221 [00:40<00:38,  2.83it/s][A[h264 @ 0x56439f883480] mmco: unref short failure
[h264 @ 0x56439f883480] mmco: unref short failure

 51%|█████     | 113/221 [00:41<00:38,  2.78it/s][A
 52%|█████▏    | 115/221 [00:41<00:28,  3.72it/s][A
 52%|█████▏    | 116/221 [00:41<00:29,  3.51it/s][A
 53%|█████▎    | 117/221 [00:42<00:31,  3.28it/s][A
 53%|█████▎    | 118/221 [00:42<00:30,  3.38it/s][A
 54%|█████▍    | 119/221 [00:42<00:36,  2.80it/s][A
 54%|█████▍    | 120/221 [00:43<00:35,  2.84it/s][A
 55%|█████▍    | 121/221 [00:43<00:28,  3.46it/s][A
 55%|█████▌    | 122/221 [00:43<00:30,  3.20it/s][A
 56%|█████▌    | 123/221 [00:44<00:29,  3.31it/s][A
 56%|█████▌    | 124/221 [00:44<00:29,  3.26it/s][A
 57%|█████▋    | 125/221 [00:44<00:32,  2.99it/s][A
 57%|█████▋    | 126/221 [00:45<00:29,  3.25it/s][A
 57%|█████▋    | 127/221 [00:45<00:33,  2.83it/s][A
 58%|█████▊    | 128/221 [00:45<00:33,  2.74it/s][A
 58%|█████▊    | 129/221 [00:45<00:26,  3.41it/s][A
 59%|█████▉    | 130/221 [00:46<00:26,  3.43it/s][A
 59%|█████▉    | 131/221 [00:46<00:21,  4.09it/s][A
 60%|█████▉    | 132/221 [00:46<00:24,  3.65it/s][A
 60%|██████    | 133/221 [00:47<00:27,  3.21it/s][A
 61%|██████    | 134/221 [00:47<00:26,  3.29it/s][A
 61%|██████    | 135/221 [00:47<00:24,  3.53it/s][A
 62%|██████▏   | 136/221 [00:47<00:25,  3.34it/s][A
 62%|██████▏   | 137/221 [00:48<00:23,  3.60it/s][A
 62%|██████▏   | 138/221 [00:48<00:26,  3.19it/s][A[h264 @ 0x5643b0d57f00] mmco: unref short failure
[h264 @ 0x5643b0d57f00] mmco: unref short failure

 63%|██████▎   | 139/221 [00:49<00:31,  2.62it/s][A
 63%|██████▎   | 140/221 [00:49<00:29,  2.79it/s][A
 64%|██████▍   | 141/221 [00:49<00:25,  3.12it/s][A
 64%|██████▍   | 142/221 [00:49<00:23,  3.31it/s][A
 65%|██████▍   | 143/221 [00:50<00:29,  2.61it/s][A
 65%|██████▌   | 144/221 [00:50<00:31,  2.45it/s][A
 66%|██████▌   | 146/221 [00:51<00:19,  3.78it/s][A
 67%|██████▋   | 147/221 [00:51<00:20,  3.64it/s][A
 67%|██████▋   | 148/221 [00:51<00:21,  3.36it/s][A[h264 @ 0x55d5c6ee3780] mmco: unref short failure
[h264 @ 0x55d5c6ee3780] mmco: unref short failure
[h264 @ 0x55d5c6ee3780] mmco: unref short failure

 67%|██████▋   | 149/221 [00:52<00:21,  3.27it/s][A
 68%|██████▊   | 150/221 [00:52<00:21,  3.31it/s][A
 68%|██████▊   | 151/221 [00:53<00:26,  2.68it/s][A
 69%|██████▉   | 152/221 [00:54<00:44,  1.57it/s][A
 69%|██████▉   | 153/221 [00:54<00:35,  1.91it/s][A
 70%|██████▉   | 154/221 [00:54<00:30,  2.18it/s][A
 70%|███████   | 155/221 [00:55<00:26,  2.53it/s][A
 71%|███████   | 156/221 [00:55<00:27,  2.38it/s][A
 71%|███████   | 157/221 [00:56<00:27,  2.35it/s][A
 71%|███████▏  | 158/221 [00:56<00:25,  2.47it/s][A
 72%|███████▏  | 159/221 [00:56<00:19,  3.15it/s][A[h264 @ 0x5643964aef80] mmco: unref short failure
[h264 @ 0x5643964aef80] mmco: unref short failure

 72%|███████▏  | 160/221 [00:56<00:20,  3.01it/s][A
 73%|███████▎  | 161/221 [00:57<00:17,  3.46it/s][A
 73%|███████▎  | 162/221 [00:57<00:16,  3.59it/s][A
 74%|███████▍  | 163/221 [00:57<00:16,  3.55it/s][A
 74%|███████▍  | 164/221 [00:57<00:14,  3.81it/s][A
 75%|███████▍  | 165/221 [00:57<00:13,  4.14it/s][A
 75%|███████▌  | 166/221 [00:58<00:15,  3.65it/s][A
 76%|███████▌  | 167/221 [00:58<00:12,  4.36it/s][A
 76%|███████▌  | 168/221 [00:58<00:13,  3.90it/s][A
 76%|███████▋  | 169/221 [00:58<00:12,  4.22it/s][A
 77%|███████▋  | 170/221 [00:59<00:16,  3.14it/s][A
 77%|███████▋  | 171/221 [00:59<00:16,  3.02it/s][A
 78%|███████▊  | 172/221 [01:00<00:13,  3.61it/s][A
 78%|███████▊  | 173/221 [01:00<00:15,  3.12it/s][A
 79%|███████▊  | 174/221 [01:00<00:17,  2.66it/s][A
 79%|███████▉  | 175/221 [01:01<00:17,  2.61it/s][A
 80%|███████▉  | 176/221 [01:01<00:14,  3.10it/s][A
 80%|████████  | 177/221 [01:01<00:13,  3.37it/s][A
 81%|████████  | 178/221 [01:01<00:11,  3.79it/s][A
 81%|████████  | 179/221 [01:02<00:12,  3.37it/s][A
 81%|████████▏ | 180/221 [01:02<00:10,  3.93it/s][A
 82%|████████▏ | 181/221 [01:02<00:10,  3.96it/s][A
 82%|████████▏ | 182/221 [01:03<00:10,  3.58it/s][A
 83%|████████▎ | 183/221 [01:03<00:10,  3.67it/s][A
 83%|████████▎ | 184/221 [01:03<00:10,  3.59it/s][A
 84%|████████▎ | 185/221 [01:03<00:08,  4.43it/s][A
 84%|████████▍ | 186/221 [01:04<00:09,  3.70it/s][A
 85%|████████▍ | 187/221 [01:04<00:10,  3.38it/s][A
 85%|████████▌ | 188/221 [01:04<00:10,  3.24it/s][A
 86%|████████▌ | 189/221 [01:05<00:10,  3.07it/s][A
 86%|████████▌ | 190/221 [01:05<00:11,  2.76it/s][A
 86%|████████▋ | 191/221 [01:05<00:09,  3.33it/s][A
 87%|████████▋ | 192/221 [01:06<00:08,  3.39it/s][A
 88%|████████▊ | 194/221 [01:06<00:08,  3.06it/s][A
 88%|████████▊ | 195/221 [01:06<00:07,  3.31it/s][A
 89%|████████▊ | 196/221 [01:07<00:10,  2.36it/s][A
 89%|████████▉ | 197/221 [01:08<00:09,  2.59it/s][A
 90%|████████▉ | 198/221 [01:08<00:09,  2.38it/s][A
 90%|█████████ | 199/221 [01:08<00:07,  2.81it/s][A
 90%|█████████ | 200/221 [01:09<00:08,  2.53it/s][A
 91%|█████████ | 201/221 [01:09<00:07,  2.69it/s][A
 91%|█████████▏| 202/221 [01:09<00:06,  2.75it/s][A
 92%|█████████▏| 203/221 [01:10<00:05,  3.14it/s][A
 92%|█████████▏| 204/221 [01:10<00:06,  2.64it/s][A
 93%|█████████▎| 205/221 [01:10<00:04,  3.34it/s][A
 93%|█████████▎| 206/221 [01:11<00:05,  2.75it/s][A
 94%|█████████▎| 207/221 [01:11<00:04,  3.32it/s][A
 94%|█████████▍| 208/221 [01:11<00:03,  3.52it/s][A
 95%|█████████▍| 209/221 [01:11<00:03,  3.49it/s][A
 95%|█████████▌| 211/221 [01:12<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [01:12<00:02,  3.71it/s][A
 96%|█████████▋| 213/221 [01:12<00:02,  3.80it/s][A
 97%|█████████▋| 214/221 [01:13<00:02,  3.38it/s][A
 97%|█████████▋| 215/221 [01:13<00:01,  3.23it/s][A
 98%|█████████▊| 216/221 [01:14<00:01,  3.09it/s][A
 98%|█████████▊| 217/221 [01:14<00:01,  2.88it/s][A
 99%|█████████▊| 218/221 [01:14<00:01,  2.87it/s][A
 99%|█████████▉| 219/221 [01:15<00:00,  2.78it/s][A
100%|█████████▉| 220/221 [01:15<00:00,  2.78it/s][A
100%|██████████| 221/221 [01:15<00:00,  3.03it/s][A100%|██████████| 221/221 [01:15<00:00,  2.92it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:06,  3.30it/s][A
  1%|          | 2/221 [00:00<01:06,  3.30it/s][A
  1%|▏         | 3/221 [00:00<01:06,  3.30it/s][A
  2%|▏         | 4/221 [00:01<01:05,  3.30it/s][A
  2%|▏         | 5/221 [00:01<01:05,  3.30it/s][A
  3%|▎         | 6/221 [00:01<01:05,  3.31it/s][A
  3%|▎         | 7/221 [00:02<01:04,  3.31it/s][A
  4%|▎         | 8/221 [00:02<01:04,  3.31it/s][A
  4%|▍         | 9/221 [00:02<01:04,  3.31it/s][A
  5%|▍         | 10/221 [00:03<01:03,  3.31it/s][A
  5%|▍         | 11/221 [00:03<01:03,  3.31it/s][A
  5%|▌         | 12/221 [00:03<01:03,  3.31it/s][A
  6%|▌         | 13/221 [00:03<01:02,  3.31it/s][A
  6%|▋         | 14/221 [00:04<01:02,  3.31it/s][A
  7%|▋         | 15/221 [00:04<01:02,  3.31it/s][A
  7%|▋         | 16/221 [00:04<01:02,  3.31it/s][A
  8%|▊         | 17/221 [00:05<01:01,  3.30it/s][A
  8%|▊         | 18/221 [00:05<01:01,  3.30it/s][A
  9%|▊         | 19/221 [00:05<01:01,  3.30it/s][A
  9%|▉         | 20/221 [00:06<01:00,  3.30it/s][A
 10%|▉         | 21/221 [00:06<01:00,  3.31it/s][A
 10%|▉         | 22/221 [00:06<01:00,  3.31it/s][A
 10%|█         | 23/221 [00:06<00:59,  3.30it/s][A
 11%|█         | 24/221 [00:07<00:59,  3.31it/s][A
 11%|█▏        | 25/221 [00:07<00:59,  3.31it/s][A
 12%|█▏        | 26/221 [00:07<00:58,  3.31it/s][A
 12%|█▏        | 27/221 [00:08<00:58,  3.31it/s][A
 13%|█▎        | 28/221 [00:08<00:58,  3.31it/s][A
 13%|█▎        | 29/221 [00:08<00:58,  3.31it/s][A
 14%|█▎        | 30/221 [00:09<00:57,  3.31it/s][A
 14%|█▍        | 31/221 [00:09<00:57,  3.31it/s][A
 14%|█▍        | 32/221 [00:09<00:57,  3.31it/s][A
 15%|█▍        | 33/221 [00:09<00:56,  3.31it/s][A
 15%|█▌        | 34/221 [00:10<00:56,  3.31it/s][A
 16%|█▌        | 35/221 [00:10<00:56,  3.31it/s][A
 16%|█▋        | 36/221 [00:10<00:55,  3.31it/s][A
 17%|█▋        | 37/221 [00:11<00:55,  3.31it/s][A
 17%|█▋        | 38/221 [00:11<00:55,  3.31it/s][A
 18%|█▊        | 39/221 [00:11<00:55,  3.31it/s][A
 18%|█▊        | 40/221 [00:12<00:54,  3.31it/s][A
 19%|█▊        | 41/221 [00:12<00:54,  3.31it/s][A
 19%|█▉        | 42/221 [00:12<00:54,  3.31it/s][A
 19%|█▉        | 43/221 [00:13<00:53,  3.31it/s][A
 20%|█▉        | 44/221 [00:13<00:53,  3.31it/s][A
 20%|██        | 45/221 [00:13<00:53,  3.31it/s][A
 21%|██        | 46/221 [00:13<00:52,  3.31it/s][A
 21%|██▏       | 47/221 [00:14<00:52,  3.31it/s][A
 22%|██▏       | 48/221 [00:14<00:52,  3.31it/s][A
 22%|██▏       | 49/221 [00:14<00:52,  3.31it/s][A
 23%|██▎       | 50/221 [00:15<00:51,  3.31it/s][A
 23%|██▎       | 51/221 [00:15<00:51,  3.31it/s][A
 24%|██▎       | 52/221 [00:15<00:51,  3.31it/s][A
 24%|██▍       | 53/221 [00:16<00:50,  3.31it/s][A
 24%|██▍       | 54/221 [00:16<00:50,  3.31it/s][A
 25%|██▍       | 55/221 [00:16<00:50,  3.31it/s][A
 25%|██▌       | 56/221 [00:16<00:49,  3.31it/s][A
 26%|██▌       | 57/221 [00:17<00:49,  3.31it/s][A
 26%|██▌       | 58/221 [00:17<00:49,  3.31it/s][A
 27%|██▋       | 59/221 [00:17<00:49,  3.30it/s][A
 27%|██▋       | 60/221 [00:18<00:48,  3.31it/s][A
 28%|██▊       | 61/221 [00:18<00:48,  3.31it/s][A
 28%|██▊       | 62/221 [00:18<00:48,  3.31it/s][A
 29%|██▊       | 63/221 [00:19<00:47,  3.31it/s][A
 29%|██▉       | 64/221 [00:19<00:47,  3.31it/s][A
 29%|██▉       | 65/221 [00:19<00:47,  3.31it/s][A
 30%|██▉       | 66/221 [00:19<00:46,  3.31it/s][A
 30%|███       | 67/221 [00:20<00:46,  3.31it/s][A
 31%|███       | 68/221 [00:20<00:46,  3.31it/s][A
 31%|███       | 69/221 [00:20<00:46,  3.30it/s][A
 32%|███▏      | 70/221 [00:21<00:45,  3.30it/s][A
 32%|███▏      | 71/221 [00:21<00:45,  3.30it/s][A
 33%|███▎      | 72/221 [00:21<00:45,  3.30it/s][A
 33%|███▎      | 73/221 [00:22<00:44,  3.30it/s][A
 33%|███▎      | 74/221 [00:22<00:44,  3.30it/s][A
 34%|███▍      | 75/221 [00:22<00:44,  3.30it/s][A
 34%|███▍      | 76/221 [00:22<00:43,  3.30it/s][A
 35%|███▍      | 77/221 [00:23<00:43,  3.30it/s][A
 35%|███▌      | 78/221 [00:23<00:43,  3.30it/s][A
 36%|███▌      | 79/221 [00:23<00:42,  3.30it/s][A
 36%|███▌      | 80/221 [00:24<00:42,  3.30it/s][A
 37%|███▋      | 81/221 [00:24<00:42,  3.30it/s][A
 37%|███▋      | 82/221 [00:24<00:42,  3.30it/s][A
 38%|███▊      | 83/221 [00:25<00:41,  3.30it/s][A
 38%|███▊      | 84/221 [00:25<00:41,  3.30it/s][A
 38%|███▊      | 85/221 [00:25<00:41,  3.30it/s][A
 39%|███▉      | 86/221 [00:26<00:40,  3.30it/s][A
 39%|███▉      | 87/221 [00:26<00:40,  3.30it/s][A
 40%|███▉      | 88/221 [00:26<00:40,  3.30it/s][A
 40%|████      | 89/221 [00:26<00:39,  3.30it/s][A
 41%|████      | 90/221 [00:27<00:39,  3.30it/s][A
 41%|████      | 91/221 [00:27<00:39,  3.30it/s][A
 42%|████▏     | 92/221 [00:27<00:39,  3.30it/s][A
 42%|████▏     | 93/221 [00:28<00:38,  3.30it/s][A
 43%|████▎     | 94/221 [00:28<00:38,  3.30it/s][A
 43%|████▎     | 95/221 [00:28<00:38,  3.30it/s][A
 43%|████▎     | 96/221 [00:29<00:37,  3.30it/s][A
 44%|████▍     | 97/221 [00:29<00:37,  3.30it/s][A
 44%|████▍     | 98/221 [00:29<00:37,  3.30it/s][A
 45%|████▍     | 99/221 [00:29<00:36,  3.30it/s][A
 45%|████▌     | 100/221 [00:30<00:36,  3.30it/s][A
 46%|████▌     | 101/221 [00:30<00:36,  3.30it/s][A
 46%|████▌     | 102/221 [00:30<00:36,  3.30it/s][A
 47%|████▋     | 103/221 [00:31<00:35,  3.30it/s][A
 47%|████▋     | 104/221 [00:31<00:35,  3.30it/s][A
 48%|████▊     | 105/221 [00:31<00:35,  3.30it/s][A
 48%|████▊     | 106/221 [00:32<00:34,  3.30it/s][A
 48%|████▊     | 107/221 [00:32<00:34,  3.30it/s][A
 49%|████▉     | 108/221 [00:32<00:34,  3.30it/s][A
 49%|████▉     | 109/221 [00:32<00:33,  3.30it/s][A
 50%|████▉     | 110/221 [00:33<00:33,  3.30it/s][A
 50%|█████     | 111/221 [00:33<00:33,  3.30it/s][A
 51%|█████     | 112/221 [00:33<00:33,  3.30it/s][A
 51%|█████     | 113/221 [00:34<00:32,  3.30it/s][A
 52%|█████▏    | 114/221 [00:34<00:32,  3.30it/s][A
 52%|█████▏    | 115/221 [00:34<00:32,  3.30it/s][A
 52%|█████▏    | 116/221 [00:35<00:31,  3.30it/s][A
 53%|█████▎    | 117/221 [00:35<00:31,  3.30it/s][A
 53%|█████▎    | 118/221 [00:35<00:31,  3.30it/s][A
 54%|█████▍    | 119/221 [00:36<00:30,  3.30it/s][A
 54%|█████▍    | 120/221 [00:36<00:30,  3.30it/s][A
 55%|█████▍    | 121/221 [00:36<00:30,  3.30it/s][A
 55%|█████▌    | 122/221 [00:36<00:30,  3.30it/s][A
 56%|█████▌    | 123/221 [00:37<00:29,  3.30it/s][A
 56%|█████▌    | 124/221 [00:37<00:29,  3.30it/s][A
 57%|█████▋    | 125/221 [00:37<00:29,  3.30it/s][A
 57%|█████▋    | 126/221 [00:38<00:28,  3.30it/s][A
 57%|█████▋    | 127/221 [00:38<00:28,  3.30it/s][A
 58%|█████▊    | 128/221 [00:38<00:28,  3.30it/s][A
 58%|█████▊    | 129/221 [00:39<00:27,  3.30it/s][A
 59%|█████▉    | 130/221 [00:39<00:27,  3.30it/s][A
 59%|█████▉    | 131/221 [00:39<00:27,  3.30it/s][A
 60%|█████▉    | 132/221 [00:39<00:26,  3.30it/s][A
 60%|██████    | 133/221 [00:40<00:26,  3.30it/s][A
 61%|██████    | 134/221 [00:40<00:26,  3.30it/s][A
 61%|██████    | 135/221 [00:40<00:26,  3.30it/s][A
 62%|██████▏   | 136/221 [00:41<00:25,  3.30it/s][A
 62%|██████▏   | 137/221 [00:41<00:25,  3.30it/s][A
 62%|██████▏   | 138/221 [00:41<00:25,  3.30it/s][A
 63%|██████▎   | 139/221 [00:42<00:24,  3.30it/s][A
 63%|██████▎   | 140/221 [00:42<00:24,  3.30it/s][A
 64%|██████▍   | 141/221 [00:42<00:24,  3.30it/s][A
 64%|██████▍   | 142/221 [00:42<00:23,  3.30it/s][A
 65%|██████▍   | 143/221 [00:43<00:23,  3.30it/s][A
 65%|██████▌   | 144/221 [00:43<00:23,  3.30it/s][A
 66%|██████▌   | 145/221 [00:43<00:23,  3.30it/s][A
 66%|██████▌   | 146/221 [00:44<00:22,  3.30it/s][A
 67%|██████▋   | 147/221 [00:44<00:22,  3.30it/s][A
 67%|██████▋   | 148/221 [00:44<00:22,  3.30it/s][A
 67%|██████▋   | 149/221 [00:45<00:21,  3.30it/s][A
 68%|██████▊   | 150/221 [00:45<00:21,  3.30it/s][A
 68%|██████▊   | 151/221 [00:45<00:21,  3.30it/s][A
 69%|██████▉   | 152/221 [00:46<00:20,  3.30it/s][A
 69%|██████▉   | 153/221 [00:46<00:20,  3.30it/s][A
 70%|██████▉   | 154/221 [00:46<00:20,  3.30it/s][A
 70%|███████   | 155/221 [00:46<00:19,  3.30it/s][A
 71%|███████   | 156/221 [00:47<00:19,  3.30it/s][A
 71%|███████   | 157/221 [00:47<00:19,  3.30it/s][A
 71%|███████▏  | 158/221 [00:47<00:19,  3.30it/s][A
 72%|███████▏  | 159/221 [00:48<00:18,  3.30it/s][A
 72%|███████▏  | 160/221 [00:48<00:18,  3.30it/s][A
 73%|███████▎  | 161/221 [00:48<00:18,  3.30it/s][A
 73%|███████▎  | 162/221 [00:49<00:17,  3.30it/s][A
 74%|███████▍  | 163/221 [00:49<00:17,  3.30it/s][A
 74%|███████▍  | 164/221 [00:49<00:17,  3.30it/s][A
 75%|███████▍  | 165/221 [00:49<00:16,  3.30it/s][A
 75%|███████▌  | 166/221 [00:50<00:16,  3.30it/s][A
 76%|███████▌  | 167/221 [00:50<00:16,  3.30it/s][A
 76%|███████▌  | 168/221 [00:50<00:16,  3.30it/s][A
 76%|███████▋  | 169/221 [00:51<00:15,  3.30it/s][A
 77%|███████▋  | 170/221 [00:51<00:15,  3.30it/s][A
 77%|███████▋  | 171/221 [00:51<00:15,  3.30it/s][A
 78%|███████▊  | 172/221 [00:52<00:14,  3.30it/s][A
 78%|███████▊  | 173/221 [00:52<00:14,  3.30it/s][A
 79%|███████▊  | 174/221 [00:52<00:14,  3.30it/s][A
 79%|███████▉  | 175/221 [00:52<00:13,  3.30it/s][A
 80%|███████▉  | 176/221 [00:53<00:13,  3.30it/s][A
 80%|████████  | 177/221 [00:53<00:13,  3.30it/s][A
 81%|████████  | 178/221 [00:53<00:13,  3.30it/s][A
 81%|████████  | 179/221 [00:54<00:12,  3.30it/s][A
 81%|████████▏ | 180/221 [00:54<00:12,  3.30it/s][A
 82%|████████▏ | 181/221 [00:54<00:12,  3.30it/s][A
 82%|████████▏ | 182/221 [00:55<00:11,  3.30it/s][A
 83%|████████▎ | 183/221 [00:55<00:11,  3.30it/s][A
 83%|████████▎ | 184/221 [00:55<00:11,  3.30it/s][A
 84%|████████▎ | 185/221 [00:56<00:10,  3.30it/s][A
 84%|████████▍ | 186/221 [00:56<00:10,  3.30it/s][A
 85%|████████▍ | 187/221 [00:56<00:10,  3.30it/s][A
 85%|████████▌ | 188/221 [00:56<00:10,  3.30it/s][A
 86%|████████▌ | 189/221 [00:57<00:09,  3.30it/s][A
 86%|████████▌ | 190/221 [00:57<00:09,  3.30it/s][A
 86%|████████▋ | 191/221 [00:57<00:09,  3.30it/s][A
 87%|████████▋ | 192/221 [00:58<00:08,  3.30it/s][A
 87%|████████▋ | 193/221 [00:58<00:08,  3.30it/s][A
 88%|████████▊ | 194/221 [00:58<00:08,  3.30it/s][A
 88%|████████▊ | 195/221 [00:59<00:07,  3.30it/s][A
 89%|████████▊ | 196/221 [00:59<00:07,  3.30it/s][A
 89%|████████▉ | 197/221 [00:59<00:07,  3.30it/s][A
 90%|████████▉ | 198/221 [00:59<00:06,  3.30it/s][A
 90%|█████████ | 199/221 [01:00<00:06,  3.30it/s][A
 90%|█████████ | 200/221 [01:00<00:06,  3.30it/s][A
 91%|█████████ | 201/221 [01:00<00:06,  3.30it/s][A
 91%|█████████▏| 202/221 [01:01<00:05,  3.30it/s][A
 92%|█████████▏| 203/221 [01:01<00:05,  3.30it/s][A
 92%|█████████▏| 204/221 [01:01<00:05,  3.30it/s][A
 93%|█████████▎| 205/221 [01:02<00:04,  3.30it/s][A
 93%|█████████▎| 206/221 [01:02<00:04,  3.30it/s][A
 94%|█████████▎| 207/221 [01:02<00:04,  3.30it/s][A
 94%|█████████▍| 208/221 [01:02<00:03,  3.30it/s][A
 95%|█████████▍| 209/221 [01:03<00:03,  3.30it/s][A
 95%|█████████▌| 210/221 [01:03<00:03,  3.30it/s][A
 95%|█████████▌| 211/221 [01:03<00:03,  3.30it/s][A
 96%|█████████▌| 212/221 [01:04<00:02,  3.30it/s][A
 96%|█████████▋| 213/221 [01:04<00:02,  3.30it/s][A
 97%|█████████▋| 214/221 [01:04<00:02,  3.30it/s][A
 97%|█████████▋| 215/221 [01:05<00:01,  3.30it/s][A
 98%|█████████▊| 216/221 [01:05<00:01,  3.30it/s][A
 98%|█████████▊| 217/221 [01:05<00:01,  3.30it/s][A
 99%|█████████▊| 218/221 [01:06<00:00,  3.30it/s][A
 99%|█████████▉| 219/221 [01:06<00:00,  3.30it/s][A
100%|█████████▉| 220/221 [01:06<00:00,  3.30it/s][A
100%|██████████| 221/221 [01:06<00:00,  3.30it/s][A100%|██████████| 221/221 [01:06<00:00,  3.30it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:58,  3.74it/s][A
  1%|          | 2/221 [00:00<01:56,  1.88it/s][A
  1%|▏         | 3/221 [00:01<01:13,  2.98it/s][A
  2%|▏         | 4/221 [00:01<01:06,  3.24it/s][A
  2%|▏         | 5/221 [00:01<01:06,  3.26it/s][A
  3%|▎         | 6/221 [00:01<00:53,  4.01it/s][A
  3%|▎         | 7/221 [00:02<00:50,  4.22it/s][A
  4%|▎         | 8/221 [00:02<01:04,  3.30it/s][A
  4%|▍         | 9/221 [00:02<01:06,  3.20it/s][A
  5%|▍         | 10/221 [00:03<01:34,  2.24it/s][A
  5%|▍         | 11/221 [00:03<01:20,  2.60it/s][A
  5%|▌         | 12/221 [00:04<01:12,  2.87it/s][A
  6%|▌         | 13/221 [00:04<01:33,  2.23it/s][A
  6%|▋         | 14/221 [00:05<01:23,  2.49it/s][A
  7%|▋         | 16/221 [00:05<01:04,  3.16it/s][A
  8%|▊         | 17/221 [00:06<01:54,  1.79it/s][A
  8%|▊         | 18/221 [00:07<01:44,  1.94it/s][A
  9%|▊         | 19/221 [00:07<01:31,  2.20it/s][A
  9%|▉         | 20/221 [00:07<01:16,  2.63it/s][A
 10%|▉         | 21/221 [00:07<01:04,  3.08it/s][A
 10%|▉         | 22/221 [00:07<00:56,  3.54it/s][A
 10%|█         | 23/221 [00:08<00:47,  4.19it/s][A
 11%|█         | 24/221 [00:08<00:40,  4.88it/s][A
 11%|█▏        | 25/221 [00:08<00:48,  4.02it/s][A
 12%|█▏        | 26/221 [00:08<00:56,  3.48it/s][A
 13%|█▎        | 28/221 [00:10<01:16,  2.52it/s][A
 13%|█▎        | 29/221 [00:10<01:05,  2.94it/s][A
 14%|█▎        | 30/221 [00:10<01:02,  3.07it/s][A
 14%|█▍        | 31/221 [00:10<01:04,  2.95it/s][A
 14%|█▍        | 32/221 [00:10<00:53,  3.56it/s][A
 15%|█▍        | 33/221 [00:11<00:49,  3.77it/s][A
 16%|█▌        | 35/221 [00:11<00:37,  4.93it/s][A
 16%|█▋        | 36/221 [00:11<00:44,  4.19it/s][A
 17%|█▋        | 37/221 [00:12<00:51,  3.55it/s][A
 17%|█▋        | 38/221 [00:12<00:58,  3.14it/s][A
 18%|█▊        | 39/221 [00:12<00:51,  3.55it/s][A
 18%|█▊        | 40/221 [00:13<00:59,  3.03it/s][A
 19%|█▊        | 41/221 [00:13<00:49,  3.60it/s][A
 19%|█▉        | 42/221 [00:13<00:46,  3.85it/s][A
 20%|█▉        | 44/221 [00:13<00:31,  5.69it/s][A
 20%|██        | 45/221 [00:14<00:41,  4.24it/s][A
 21%|██        | 46/221 [00:14<00:41,  4.24it/s][A
 21%|██▏       | 47/221 [00:14<00:46,  3.77it/s][A
 22%|██▏       | 48/221 [00:14<00:39,  4.43it/s][A
 22%|██▏       | 49/221 [00:15<00:40,  4.26it/s][A
 23%|██▎       | 50/221 [00:15<00:38,  4.44it/s][A
 24%|██▎       | 52/221 [00:15<00:29,  5.80it/s][A
 24%|██▍       | 53/221 [00:15<00:31,  5.25it/s][A
 24%|██▍       | 54/221 [00:16<00:40,  4.10it/s][A
 25%|██▍       | 55/221 [00:16<00:37,  4.38it/s][A
 25%|██▌       | 56/221 [00:16<00:38,  4.34it/s][A
 26%|██▌       | 57/221 [00:16<00:35,  4.60it/s][A
 26%|██▌       | 58/221 [00:17<00:38,  4.24it/s][A
 27%|██▋       | 59/221 [00:17<00:34,  4.76it/s][A
 27%|██▋       | 60/221 [00:17<00:47,  3.38it/s][A
 28%|██▊       | 61/221 [00:18<00:44,  3.56it/s][A
 28%|██▊       | 62/221 [00:18<00:43,  3.68it/s][A
 29%|██▊       | 63/221 [00:18<00:59,  2.65it/s][A
 29%|██▉       | 64/221 [00:19<00:57,  2.73it/s][A
 29%|██▉       | 65/221 [00:19<00:58,  2.65it/s][A
 30%|██▉       | 66/221 [00:19<00:49,  3.11it/s][A
 30%|███       | 67/221 [00:20<01:00,  2.54it/s][A
 31%|███       | 68/221 [00:20<00:48,  3.16it/s][A
 31%|███       | 69/221 [00:20<00:49,  3.05it/s][A
 32%|███▏      | 70/221 [00:21<00:47,  3.17it/s][A
 32%|███▏      | 71/221 [00:21<00:47,  3.17it/s][A
 33%|███▎      | 72/221 [00:21<00:44,  3.32it/s][A
 33%|███▎      | 73/221 [00:22<00:50,  2.93it/s][A
 33%|███▎      | 74/221 [00:22<00:47,  3.09it/s][A
 34%|███▍      | 75/221 [00:22<00:48,  3.03it/s][A
 34%|███▍      | 76/221 [00:22<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:23<00:32,  4.37it/s][A
 35%|███▌      | 78/221 [00:23<00:35,  3.98it/s][A
 36%|███▌      | 79/221 [00:23<00:46,  3.06it/s][A
 36%|███▌      | 80/221 [00:24<00:50,  2.78it/s][A
 37%|███▋      | 81/221 [00:24<00:44,  3.13it/s][A
 37%|███▋      | 82/221 [00:24<00:46,  3.00it/s][A
 38%|███▊      | 83/221 [00:25<00:55,  2.49it/s][A
 38%|███▊      | 84/221 [00:25<00:56,  2.43it/s][A
 38%|███▊      | 85/221 [00:26<01:00,  2.26it/s][A
 39%|███▉      | 86/221 [00:26<00:56,  2.37it/s][A
 39%|███▉      | 87/221 [00:27<01:21,  1.64it/s][A
 40%|███▉      | 88/221 [00:28<01:07,  1.96it/s][A
 40%|████      | 89/221 [00:28<00:57,  2.28it/s][A
 41%|████      | 90/221 [00:28<00:48,  2.72it/s][A
 41%|████      | 91/221 [00:28<00:40,  3.21it/s][A
 42%|████▏     | 92/221 [00:28<00:35,  3.62it/s][A
 42%|████▏     | 93/221 [00:29<00:31,  4.04it/s][A
 43%|████▎     | 94/221 [00:29<00:27,  4.63it/s][A
 43%|████▎     | 95/221 [00:29<00:33,  3.73it/s][A
 43%|████▎     | 96/221 [00:29<00:29,  4.20it/s][A
 44%|████▍     | 97/221 [00:29<00:25,  4.84it/s][A
 44%|████▍     | 98/221 [00:30<00:28,  4.36it/s][A
 45%|████▍     | 99/221 [00:30<00:24,  4.92it/s][A
 45%|████▌     | 100/221 [00:30<00:22,  5.30it/s][A
 46%|████▌     | 101/221 [00:30<00:24,  4.97it/s][A
 46%|████▌     | 102/221 [00:30<00:23,  5.02it/s][A
 47%|████▋     | 103/221 [00:31<00:21,  5.53it/s][A
 47%|████▋     | 104/221 [00:31<00:20,  5.78it/s][A
 48%|████▊     | 105/221 [00:31<00:19,  6.10it/s][A
 48%|████▊     | 106/221 [00:31<00:23,  4.95it/s][A
 48%|████▊     | 107/221 [00:31<00:22,  5.03it/s][A
 49%|████▉     | 108/221 [00:32<00:22,  4.98it/s][A
 49%|████▉     | 109/221 [00:32<00:44,  2.53it/s][A
 50%|████▉     | 110/221 [00:33<00:44,  2.48it/s][A
 50%|█████     | 111/221 [00:33<00:45,  2.42it/s][A
 51%|█████     | 112/221 [00:33<00:37,  2.94it/s][A
 51%|█████     | 113/221 [00:34<00:34,  3.17it/s][A
 52%|█████▏    | 115/221 [00:34<00:24,  4.33it/s][A
 53%|█████▎    | 117/221 [00:34<00:24,  4.26it/s][A
 53%|█████▎    | 118/221 [00:35<00:27,  3.72it/s][A
 54%|█████▍    | 119/221 [00:35<00:25,  4.04it/s][A
 54%|█████▍    | 120/221 [00:36<00:31,  3.24it/s][A
 55%|█████▍    | 121/221 [00:36<00:26,  3.78it/s][A
 55%|█████▌    | 122/221 [00:36<00:23,  4.20it/s][A
 56%|█████▌    | 123/221 [00:36<00:25,  3.81it/s][A
 56%|█████▌    | 124/221 [00:36<00:27,  3.55it/s][A
 57%|█████▋    | 125/221 [00:37<00:32,  2.92it/s][A
 57%|█████▋    | 126/221 [00:37<00:33,  2.87it/s][A
 57%|█████▋    | 127/221 [00:37<00:26,  3.60it/s][A
 58%|█████▊    | 128/221 [00:38<00:26,  3.57it/s][A
 58%|█████▊    | 129/221 [00:38<00:21,  4.31it/s][A
 59%|█████▉    | 130/221 [00:38<00:27,  3.31it/s][A
 59%|█████▉    | 131/221 [00:38<00:23,  3.82it/s][A
 60%|█████▉    | 132/221 [00:39<00:19,  4.56it/s][A
 60%|██████    | 133/221 [00:39<00:26,  3.27it/s][A
 61%|██████    | 134/221 [00:39<00:22,  3.91it/s][A
 61%|██████    | 135/221 [00:40<00:24,  3.54it/s][A
 62%|██████▏   | 136/221 [00:40<00:25,  3.31it/s][A
 62%|██████▏   | 137/221 [00:40<00:25,  3.34it/s][A
 62%|██████▏   | 138/221 [00:41<00:26,  3.13it/s][A
 63%|██████▎   | 139/221 [00:41<00:24,  3.38it/s][A
 63%|██████▎   | 140/221 [00:41<00:22,  3.62it/s][A
 64%|██████▍   | 142/221 [00:42<00:19,  3.99it/s][A
 65%|██████▍   | 143/221 [00:42<00:16,  4.68it/s][A
 65%|██████▌   | 144/221 [00:42<00:16,  4.76it/s][A
 66%|██████▌   | 145/221 [00:42<00:15,  5.02it/s][A
 66%|██████▌   | 146/221 [00:42<00:15,  4.90it/s][A
 67%|██████▋   | 147/221 [00:42<00:13,  5.52it/s][A
 67%|██████▋   | 148/221 [00:43<00:16,  4.38it/s][A
 67%|██████▋   | 149/221 [00:43<00:14,  4.99it/s][A
 68%|██████▊   | 150/221 [00:43<00:20,  3.51it/s][A
 68%|██████▊   | 151/221 [00:44<00:18,  3.79it/s][A
 69%|██████▉   | 152/221 [00:44<00:31,  2.19it/s][A
 69%|██████▉   | 153/221 [00:45<00:31,  2.15it/s][A
 70%|██████▉   | 154/221 [00:45<00:30,  2.18it/s][A
 70%|███████   | 155/221 [00:46<00:26,  2.53it/s][A
 71%|███████   | 156/221 [00:46<00:23,  2.82it/s][A
 71%|███████   | 157/221 [00:46<00:22,  2.81it/s][A
 71%|███████▏  | 158/221 [00:47<00:21,  2.88it/s][A
 72%|███████▏  | 159/221 [00:47<00:21,  2.94it/s][A
 72%|███████▏  | 160/221 [00:47<00:19,  3.08it/s][A
 73%|███████▎  | 161/221 [00:47<00:15,  3.80it/s][A
 74%|███████▍  | 163/221 [00:48<00:13,  4.45it/s][A
 74%|███████▍  | 164/221 [00:48<00:15,  3.77it/s][A
 75%|███████▌  | 166/221 [00:49<00:16,  3.33it/s][A
 76%|███████▌  | 167/221 [00:49<00:13,  3.86it/s][A
 76%|███████▌  | 168/221 [00:49<00:13,  3.93it/s][A
 76%|███████▋  | 169/221 [00:49<00:12,  4.30it/s][A
 77%|███████▋  | 170/221 [00:50<00:15,  3.38it/s][A
 77%|███████▋  | 171/221 [00:50<00:15,  3.22it/s][A
 78%|███████▊  | 173/221 [00:50<00:10,  4.67it/s][A
 79%|███████▊  | 174/221 [00:51<00:12,  3.84it/s][A
 79%|███████▉  | 175/221 [00:51<00:12,  3.64it/s][A
 80%|███████▉  | 176/221 [00:51<00:12,  3.73it/s][A
 80%|████████  | 177/221 [00:51<00:11,  3.94it/s][A
 81%|████████  | 179/221 [00:52<00:10,  4.06it/s][A
 81%|████████▏ | 180/221 [00:52<00:09,  4.32it/s][A
 82%|████████▏ | 181/221 [00:52<00:08,  4.81it/s][A
 82%|████████▏ | 182/221 [00:52<00:07,  4.91it/s][A
 83%|████████▎ | 183/221 [00:53<00:07,  5.04it/s][A
 83%|████████▎ | 184/221 [00:53<00:10,  3.60it/s][A
 84%|████████▎ | 185/221 [00:53<00:09,  3.89it/s][A
 84%|████████▍ | 186/221 [00:54<00:09,  3.64it/s][A
 85%|████████▍ | 187/221 [00:54<00:07,  4.34it/s][A
 85%|████████▌ | 188/221 [00:54<00:10,  3.09it/s][A
 86%|████████▌ | 189/221 [00:55<00:12,  2.46it/s][A
 86%|████████▌ | 190/221 [00:55<00:13,  2.28it/s][A
 86%|████████▋ | 191/221 [00:56<00:11,  2.70it/s][A
 87%|████████▋ | 192/221 [00:56<00:09,  3.05it/s][A
 87%|████████▋ | 193/221 [00:56<00:08,  3.47it/s][A
 88%|████████▊ | 194/221 [00:57<00:12,  2.21it/s][A
 88%|████████▊ | 195/221 [00:57<00:12,  2.14it/s][A
 89%|████████▊ | 196/221 [00:58<00:12,  1.97it/s][A
 89%|████████▉ | 197/221 [00:58<00:10,  2.32it/s][A
 90%|████████▉ | 198/221 [00:58<00:07,  3.01it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.18it/s][A
 91%|█████████ | 201/221 [00:59<00:06,  3.15it/s][A
 91%|█████████▏| 202/221 [00:59<00:04,  3.83it/s][A
 92%|█████████▏| 203/221 [00:59<00:03,  4.56it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.54it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.85it/s][A
 93%|█████████▎| 206/221 [01:01<00:04,  3.34it/s][A
 94%|█████████▎| 207/221 [01:01<00:03,  3.98it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.34it/s][A
 95%|█████████▍| 209/221 [01:02<00:04,  2.76it/s][A
 95%|█████████▌| 210/221 [01:02<00:03,  3.40it/s][A
 95%|█████████▌| 211/221 [01:02<00:03,  3.19it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.60it/s][A
 96%|█████████▋| 213/221 [01:03<00:03,  2.55it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  2.60it/s][A
 97%|█████████▋| 215/221 [01:04<00:02,  2.48it/s][A
 98%|█████████▊| 216/221 [01:04<00:01,  2.75it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  2.80it/s][A
 99%|█████████▊| 218/221 [01:05<00:00,  3.27it/s][A
 99%|█████████▉| 219/221 [01:05<00:00,  4.02it/s][A
100%|█████████▉| 220/221 [01:05<00:00,  4.06it/s][A
100%|██████████| 221/221 [01:05<00:00,  3.02it/s][A100%|██████████| 221/221 [01:05<00:00,  3.35it/s]
09/10/2024 22:04:47 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_area_forward=====step 349--===========

09/10/2024 22:04:47 - INFO - __main__ -   {'area_r1': 39.4, 'area_recall': '39.4/66.0/75.5', 'area_ravg': 60.3}
09/10/2024 22:04:47 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_area_backard=====step 349--===========

09/10/2024 22:04:47 - INFO - __main__ -   {'forward_r1': 36.3, 'forward_recall': '36.3/62.6/73.6', 'forward_ravg': 57.5}
09/10/2024 22:04:47 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_area_back_with_video=====step 349--===========

09/10/2024 22:04:47 - INFO - __main__ -   {'area_video_r1': 39.7, 'area_video_recall': '39.7/67.5/78.2', 'area_video_ravg': 61.8}
09/10/2024 22:04:47 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_area_back_with_video====history best step: 249=======

09/10/2024 22:04:47 - INFO - __main__ -   {'area_video_r1': 41.3, 'area_video_recall': '41.3/66.6/77.7', 'area_video_ravg': 61.9}
09/10/2024 22:04:47 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_itm_area=====step 349--===========

09/10/2024 22:04:47 - INFO - __main__ -   {'area_video_r1': 52.5, 'area_video_recall': '52.5/72.4/81.9', 'area_video_ravg': 68.9, 'area_video_back_r1': 50.1, 'area_video_back_recall': '50.1/71.4/78.5', 'area_video_back_ravg': 66.7}
09/10/2024 22:04:47 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_itm_area====history best step: 49=======

09/10/2024 22:04:47 - INFO - __main__ -   {'area_video_r1': 53.4, 'area_video_recall': '53.4/75.5/82.6', 'area_video_ravg': 70.5, 'area_video_back_r1': 51.4, 'area_video_back_recall': '51.4/73.1/80.9', 'area_video_back_ravg': 68.4}
09/10/2024 22:04:47 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_itc_tvas=====step 349--===========

09/10/2024 22:04:47 - INFO - __main__ -   {'video_r1': 28.4, 'video_recall': '28.4/52.9/63.9', 'video_ravg': 48.4}
09/10/2024 22:04:47 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_itc_tvas====history best step: 199=======

09/10/2024 22:04:47 - INFO - __main__ -   {'video_r1': 32.2, 'video_recall': '32.2/57.6/68.4', 'video_ravg': 52.8}
09/10/2024 22:04:47 - INFO - __main__ -   ====-evaluation--ret%tvas--msrvtt_ret_ret_itm_tvas=====step 349--===========

09/10/2024 22:04:47 - INFO - __main__ -   {'video_r1': 49.7, 'video_recall': '49.7/68.8/76.8', 'video_ravg': 65.1}
09/10/2024 22:04:47 - INFO - __main__ -   ======evaluation--ret%tvas--msrvtt_ret_ret_itm_tvas====history best step: 49=======

09/10/2024 22:04:47 - INFO - __main__ -   {'video_r1': 52.6, 'video_recall': '52.6/72.3/77.8', 'video_ravg': 67.6}
09/10/2024 22:05:11 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.00039345509139820933, 'loss_ret%tv%ta--finetune_area/loss_area': 1.2927443981170654, 'loss_ret%tv%ta--finetune_area/total_loss': 1.2931379079818726}
[h264 @ 0x5643a56634c0] mmco: unref short failure
[h264 @ 0x5643a56634c0] mmco: unref short failure
[h264 @ 0x55d5b5eb3280] mmco: unref short failure
 18%|█▊        | 350/1945 [1:57:34<57:46:39, 130.41s/it][h264 @ 0x5643a588c300] mmco: unref short failure
[h264 @ 0x5643a588c300] mmco: unref short failure
 18%|█▊        | 351/1945 [1:57:38<40:53:37, 92.36s/it] [h264 @ 0x55edfc9cc5c0] mmco: unref short failure
[h264 @ 0x55edfc9cc5c0] mmco: unref short failure
[h264 @ 0x55edfffcbc40] mmco: unref short failure
[h264 @ 0x55edfffcbc40] mmco: unref short failure
 18%|█▊        | 352/1945 [1:57:42<29:06:55, 65.80s/it][h264 @ 0x55d5d1748bc0] mmco: unref short failure
 18%|█▊        | 353/1945 [1:57:47<21:01:07, 47.53s/it][h264 @ 0x55a83a623180] mmco: unref short failure
 18%|█▊        | 354/1945 [1:57:51<15:20:12, 34.70s/it][h264 @ 0x55a83f349740] mmco: unref short failure
[h264 @ 0x55d5ca4be000] mmco: unref short failure
[h264 @ 0x55d5ca4be000] mmco: unref short failure
[h264 @ 0x55ee03bdfb40] mmco: unref short failure
[h264 @ 0x55ee03bdfb40] mmco: unref short failure
 18%|█▊        | 355/1945 [1:57:56<11:18:51, 25.62s/it][h264 @ 0x55a84cae8ac0] mmco: unref short failure
[h264 @ 0x5643a5495b80] mmco: unref short failure
srun: Job step aborted: Waiting up to 92 seconds for job step to finish.
 18%|█▊        | 356/1945 [1:58:02<8:41:01, 19.67s/it] slurmstepd: error: *** STEP 7470532.0 ON lrdn3286 CANCELLED AT 2024-09-10T22:05:45 ***
WARNING:torch.distributed.elastic.agent.server.api:Received 15 death signal, shutting down workers
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 298422 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 298423 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 298424 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 298425 closing signal SIGTERM
slurmstepd: error: *** JOB 7470532 ON lrdn3286 CANCELLED AT 2024-09-10T22:05:45 ***
